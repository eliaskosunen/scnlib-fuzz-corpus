_ZNK7simdutf14implementation25required_instruction_setsEv:
 1445|      2|  virtual uint32_t required_instruction_sets() const { return _required_instruction_sets; }
_ZN7simdutf14implementationC2ENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_j:
 2455|      7|  {
 2456|      7|  }
_ZN7simdutf8internal29available_implementation_listC2Ev:
 2485|      1|  simdutf_really_inline available_implementation_list() {}
_ZN7simdutf14implementationD2Ev:
 2457|      5|  virtual ~implementation()=default;
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEaSEPS3_:
 2551|      1|  atomic_ptr& operator=(T *_ptr) { ptr = _ptr; return *this; }
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEcvPS3_Ev:
 2548|      1|  operator T*() { return ptr.load(); }
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEC2EPS3_:
 2531|      1|  atomic_ptr(T *_ptr) : ptr{_ptr} {}
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEptEv:
 2550|  80.2k|  T* operator->() { return ptr.load(); }

simdutf.cpp:_ZN7simdutf8internalL30detect_supported_architecturesEv:
  170|      1|static inline uint32_t detect_supported_architectures() {
  171|      1|  uint32_t eax;
  172|      1|  uint32_t ebx = 0;
  173|      1|  uint32_t ecx = 0;
  174|      1|  uint32_t edx = 0;
  175|      1|  uint32_t host_isa = 0x0;
  176|       |
  177|       |  // EBX for EAX=0x1
  178|      1|  eax = 0x1;
  179|      1|  cpuid(&eax, &ebx, &ecx, &edx);
  180|       |
  181|      1|  if (ecx & cpuid_bit::sse42) {
  ------------------
  |  Branch (181:7): [True: 1, False: 0]
  ------------------
  182|      1|    host_isa |= instruction_set::SSE42;
  183|      1|  }
  184|       |
  185|      1|  if (ecx & cpuid_bit::pclmulqdq) {
  ------------------
  |  Branch (185:7): [True: 1, False: 0]
  ------------------
  186|      1|    host_isa |= instruction_set::PCLMULQDQ;
  187|      1|  }
  188|       |
  189|      1|  if ((ecx & cpuid_bit::osxsave) != cpuid_bit::osxsave) {
  ------------------
  |  Branch (189:7): [True: 0, False: 1]
  ------------------
  190|      0|    return host_isa;
  191|      0|  }
  192|       |
  193|       |  // xgetbv for checking if the OS saves registers
  194|      1|  uint64_t xcr0 = xgetbv();
  195|       |
  196|      1|  if ((xcr0 & cpuid_bit::xcr0_bit::avx256_saved) == 0) {
  ------------------
  |  Branch (196:7): [True: 0, False: 1]
  ------------------
  197|      0|    return host_isa;
  198|      0|  }
  199|       |  // ECX for EAX=0x7
  200|      1|  eax = 0x7;
  201|      1|  ecx = 0x0; // Sub-leaf = 0
  202|      1|  cpuid(&eax, &ebx, &ecx, &edx);
  203|      1|  if (ebx & cpuid_bit::ebx::avx2) {
  ------------------
  |  Branch (203:7): [True: 1, False: 0]
  ------------------
  204|      1|    host_isa |= instruction_set::AVX2;
  205|      1|  }
  206|      1|  if (ebx & cpuid_bit::ebx::bmi1) {
  ------------------
  |  Branch (206:7): [True: 1, False: 0]
  ------------------
  207|      1|    host_isa |= instruction_set::BMI1;
  208|      1|  }
  209|      1|  if (ebx & cpuid_bit::ebx::bmi2) {
  ------------------
  |  Branch (209:7): [True: 1, False: 0]
  ------------------
  210|      1|    host_isa |= instruction_set::BMI2;
  211|      1|  }
  212|      1|  if (!((xcr0 & cpuid_bit::xcr0_bit::avx512_saved) == cpuid_bit::xcr0_bit::avx512_saved)) {
  ------------------
  |  Branch (212:7): [True: 1, False: 0]
  ------------------
  213|      1|    return host_isa;
  214|      1|  }
  215|      0|  if (ebx & cpuid_bit::ebx::avx512f) {
  ------------------
  |  Branch (215:7): [True: 0, False: 0]
  ------------------
  216|      0|    host_isa |= instruction_set::AVX512F;
  217|      0|  }
  218|      0|  if (ebx & cpuid_bit::ebx::avx512bw) {
  ------------------
  |  Branch (218:7): [True: 0, False: 0]
  ------------------
  219|      0|    host_isa |= instruction_set::AVX512BW;
  220|      0|  }
  221|      0|  if (ebx & cpuid_bit::ebx::avx512cd) {
  ------------------
  |  Branch (221:7): [True: 0, False: 0]
  ------------------
  222|      0|    host_isa |= instruction_set::AVX512CD;
  223|      0|  }
  224|      0|  if (ebx & cpuid_bit::ebx::avx512dq) {
  ------------------
  |  Branch (224:7): [True: 0, False: 0]
  ------------------
  225|      0|    host_isa |= instruction_set::AVX512DQ;
  226|      0|  }
  227|      0|  if (ebx & cpuid_bit::ebx::avx512vl) {
  ------------------
  |  Branch (227:7): [True: 0, False: 0]
  ------------------
  228|      0|    host_isa |= instruction_set::AVX512VL;
  229|      0|  }
  230|      0|  if (ecx & cpuid_bit::ecx::avx512vbmi2) {
  ------------------
  |  Branch (230:7): [True: 0, False: 0]
  ------------------
  231|      0|    host_isa |= instruction_set::AVX512VBMI2;
  232|      0|  }
  233|      0|  if (ecx & cpuid_bit::ecx::avx512vpopcnt) {
  ------------------
  |  Branch (233:7): [True: 0, False: 0]
  ------------------
  234|      0|    host_isa |= instruction_set::AVX512VPOPCNTDQ;
  235|      0|  }
  236|      0|  return host_isa;
  237|      1|}
simdutf.cpp:_ZN7simdutf8internalL5cpuidEPjS1_S1_S1_:
  139|      2|                         uint32_t *edx) {
  140|       |#if defined(_MSC_VER)
  141|       |  int cpu_info[4];
  142|       |  __cpuidex(cpu_info, *eax, *ecx);
  143|       |  *eax = cpu_info[0];
  144|       |  *ebx = cpu_info[1];
  145|       |  *ecx = cpu_info[2];
  146|       |  *edx = cpu_info[3];
  147|       |#elif defined(HAVE_GCC_GET_CPUID) && defined(USE_GCC_GET_CPUID)
  148|       |  uint32_t level = *eax;
  149|       |  __get_cpuid(level, eax, ebx, ecx, edx);
  150|       |#else
  151|      2|  uint32_t a = *eax, b, c = *ecx, d;
  152|      2|  asm volatile("cpuid\n\t" : "+a"(a), "=b"(b), "+c"(c), "=d"(d));
  153|      2|  *eax = a;
  154|      2|  *ebx = b;
  155|      2|  *ecx = c;
  156|      2|  *edx = d;
  157|      2|#endif
  158|      2|}
simdutf.cpp:_ZN7simdutf8internalL6xgetbvEv:
  160|      1|static inline uint64_t xgetbv() {
  161|       | #if defined(_MSC_VER)
  162|       |   return _xgetbv(0);
  163|       | #else
  164|      1|   uint32_t xcr0_lo, xcr0_hi;
  165|      1|   asm volatile("xgetbv\n\t" : "=a" (xcr0_lo), "=d" (xcr0_hi) : "c" (0));
  166|      1|   return xcr0_lo | ((uint64_t)xcr0_hi << 32);
  167|      1| #endif
  168|      1| }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EEC2EPKhm:
   62|  2.30k|simdutf_really_inline buf_block_reader<STEP_SIZE>::buf_block_reader(const uint8_t *_buf, size_t _len) : buf{_buf}, len{_len}, lenminusstep{len < STEP_SIZE ? 0 : len - STEP_SIZE}, idx{0} {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE14has_full_blockEv:
   68|  9.90k|simdutf_really_inline bool buf_block_reader<STEP_SIZE>::has_full_block() const {
   69|  9.90k|  return idx < lenminusstep;
   70|  9.90k|}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE10full_blockEv:
   73|  7.59k|simdutf_really_inline const uint8_t *buf_block_reader<STEP_SIZE>::full_block() const {
   74|  7.59k|  return &buf[idx];
   75|  7.59k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE7advanceEv:
   86|  9.90k|simdutf_really_inline void buf_block_reader<STEP_SIZE>::advance() {
   87|  9.90k|  idx += STEP_SIZE;
   88|  9.90k|}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE13get_remainderEPh:
   78|  2.30k|simdutf_really_inline size_t buf_block_reader<STEP_SIZE>::get_remainder(uint8_t *dst) const {
   79|  2.30k|  if(len == idx) { return 0; } // memcpy(dst, null, 0) will trigger an error with some sanitizers
  ------------------
  |  Branch (79:6): [True: 0, False: 2.30k]
  ------------------
   80|  2.30k|  std::memset(dst, 0x20, STEP_SIZE); // std::memset STEP_SIZE because it's more efficient to write out 8 or 16 bytes at once.
   81|  2.30k|  std::memcpy(dst, buf + idx, len - idx);
   82|  2.30k|  return len - idx;
   83|  2.30k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14utf817count_code_pointsEPKcm:
   10|  1.79k|simdutf_really_inline size_t count_code_points(const char* in, size_t size) {
   11|  1.79k|    size_t pos = 0;
   12|  1.79k|    size_t count = 0;
   13|  7.82k|    for(;pos + 64 <= size; pos += 64) {
  ------------------
  |  Branch (13:10): [True: 6.03k, False: 1.79k]
  ------------------
   14|  6.03k|      simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
   15|  6.03k|      uint64_t utf8_continuation_mask = input.gt(-65);
   16|  6.03k|      count += count_ones(utf8_continuation_mask);
   17|  6.03k|    }
   18|  1.79k|    return count + scalar::utf8::count_code_points(in + pos, size - pos);
   19|  1.79k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoderC2Ev:
  115|  74.3k|    validating_transcoder() : error(uint8_t(0)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder7convertEPKcmPDi:
  129|  74.3k|    simdutf_really_inline size_t convert(const char* in, size_t size, char32_t* utf32_output) {
  130|  74.3k|      size_t pos = 0;
  131|  74.3k|      char32_t* start{utf32_output};
  132|       |      // In the worst case, we have the haswell kernel which can cause an overflow of
  133|       |      // 8 bytes when calling convert_masked_utf8_to_utf32. If you skip the last 16 bytes,
  134|       |      // and if the data is valid, then it is entirely safe because 16 UTF-8 bytes generate
  135|       |      // much more than 8 bytes. However, you cannot generally assume that you have valid
  136|       |      // UTF-8 input, so we are going to go back from the end counting 4 leading bytes,
  137|       |      // to give us a good margin.
  138|  74.3k|      size_t leading_byte = 0;
  139|  74.3k|      size_t margin = size;
  140|   165k|      for(; margin > 0 && leading_byte < 4; margin--) {
  ------------------
  |  Branch (140:13): [True: 90.6k, False: 74.3k]
  |  Branch (140:27): [True: 90.6k, False: 0]
  ------------------
  141|  90.6k|        leading_byte += (int8_t(in[margin-1]) > -65);
  142|  90.6k|      }
  143|       |      // If the input is long enough, then we have that margin-1 is the fourth last leading byte.
  144|  74.3k|      const size_t safety_margin = size - margin + 1; // to avoid overruns!
  145|  74.3k|      while(pos + 64 + safety_margin <= size) {
  ------------------
  |  Branch (145:13): [True: 0, False: 74.3k]
  ------------------
  146|      0|        simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
  147|      0|        if(input.is_ascii()) {
  ------------------
  |  Branch (147:12): [True: 0, False: 0]
  ------------------
  148|      0|          input.store_ascii_as_utf32(utf32_output);
  149|      0|          utf32_output += 64;
  150|      0|          pos += 64;
  151|      0|        } else {
  152|       |          // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  153|      0|          static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  154|      0|              "We support either two or four chunks per 64-byte block.");
  155|      0|          auto zero = simd8<uint8_t>{uint8_t(0)};
  156|      0|          if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (156:14): [Folded - Ignored]
  ------------------
  157|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  158|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  159|      0|          } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (159:21): [Folded - Ignored]
  ------------------
  160|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  161|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  162|      0|            this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  163|      0|            this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  164|      0|          }
  165|      0|          uint64_t utf8_continuation_mask = input.lt(-65 + 1);
  166|      0|          uint64_t utf8_leading_mask = ~utf8_continuation_mask;
  167|      0|          uint64_t utf8_end_of_code_point_mask = utf8_leading_mask>>1;
  168|       |          // We process in blocks of up to 12 bytes except possibly
  169|       |          // for fast paths which may process up to 16 bytes. For the
  170|       |          // slow path to work, we should have at least 12 input bytes left.
  171|      0|          size_t max_starting_point = (pos + 64) - 12;
  172|       |          // Next loop is going to run at least five times.
  173|      0|          while(pos < max_starting_point) {
  ------------------
  |  Branch (173:17): [True: 0, False: 0]
  ------------------
  174|       |            // Performance note: our ability to compute 'consumed' and
  175|       |            // then shift and recompute is critical. If there is a
  176|       |            // latency of, say, 4 cycles on getting 'consumed', then
  177|       |            // the inner loop might have a total latency of about 6 cycles.
  178|       |            // Yet we process between 6 to 12 inputs bytes, thus we get
  179|       |            // a speed limit between 1 cycle/byte and 0.5 cycle/byte
  180|       |            // for this section of the code. Hence, there is a limit
  181|       |            // to how much we can further increase this latency before
  182|       |            // it seriously harms performance.
  183|      0|            size_t consumed = convert_masked_utf8_to_utf32(in + pos,
  184|      0|                            utf8_end_of_code_point_mask, utf32_output);
  185|      0|            pos += consumed;
  186|      0|            utf8_end_of_code_point_mask >>= consumed;
  187|      0|          }
  188|       |          // At this point there may remain between 0 and 12 bytes in the
  189|       |          // 64-byte block. These bytes will be processed again. So we have an
  190|       |          // 80% efficiency (in the worst case). In practice we expect an
  191|       |          // 85% to 90% efficiency.
  192|      0|        }
  193|      0|      }
  194|  74.3k|      if(errors()) { return 0; }
  ------------------
  |  Branch (194:10): [True: 0, False: 74.3k]
  ------------------
  195|  74.3k|      if(pos < size) {
  ------------------
  |  Branch (195:10): [True: 74.3k, False: 0]
  ------------------
  196|  74.3k|        size_t howmany  = scalar::utf8_to_utf32::convert(in + pos, size - pos, utf32_output);
  197|  74.3k|        if(howmany == 0) { return 0; }
  ------------------
  |  Branch (197:12): [True: 4.26k, False: 70.1k]
  ------------------
  198|  70.1k|        utf32_output += howmany;
  199|  70.1k|      }
  200|  70.1k|      return utf32_output - start;
  201|  74.3k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder6errorsEv:
  290|  74.3k|    simdutf_really_inline bool errors() const {
  291|  74.3k|      return this->error.any_bits_set_anywhere();
  292|  74.3k|    }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3213convert_validEPKcmPDi:
   12|  1.79k|    char32_t* utf32_output) noexcept {
   13|  1.79k|  size_t pos = 0;
   14|  1.79k|  char32_t* start{utf32_output};
   15|  1.79k|  const size_t safety_margin = 16; // to avoid overruns!
   16|  7.74k|  while(pos + 64 + safety_margin <= size) {
  ------------------
  |  Branch (16:9): [True: 5.95k, False: 1.79k]
  ------------------
   17|  5.95k|    simd8x64<int8_t> in(reinterpret_cast<const int8_t *>(input + pos));
   18|  5.95k|    if(in.is_ascii()) {
  ------------------
  |  Branch (18:8): [True: 4.56k, False: 1.39k]
  ------------------
   19|  4.56k|      in.store_ascii_as_utf32(utf32_output);
   20|  4.56k|      utf32_output += 64;
   21|  4.56k|      pos += 64;
   22|  4.56k|    } else {
   23|       |    // -65 is 0b10111111 in two-complement's, so largest possible continuation byte
   24|  1.39k|    uint64_t utf8_continuation_mask = in.lt(-65 + 1);
   25|  1.39k|    uint64_t utf8_leading_mask = ~utf8_continuation_mask;
   26|  1.39k|    uint64_t utf8_end_of_code_point_mask = utf8_leading_mask>>1;
   27|  1.39k|    size_t max_starting_point = (pos + 64) - 12;
   28|  9.29k|    while(pos < max_starting_point) {
  ------------------
  |  Branch (28:11): [True: 7.90k, False: 1.39k]
  ------------------
   29|  7.90k|      size_t consumed = convert_masked_utf8_to_utf32(input + pos,
   30|  7.90k|                          utf8_end_of_code_point_mask, utf32_output);
   31|  7.90k|      pos += consumed;
   32|  7.90k|      utf8_end_of_code_point_mask >>= consumed;
   33|  7.90k|      }
   34|  1.39k|    }
   35|  5.95k|  }
   36|  1.79k|  utf32_output += scalar::utf8_to_utf32::convert_valid(input + pos, size - pos, utf32_output);
   37|  1.79k|  return utf32_output - start;
   38|  1.79k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker16check_next_inputERKNS1_4simd8simd8x64IhEE:
  152|  9.90k|    simdutf_really_inline void check_next_input(const simd8x64<uint8_t>& input) {
  153|  9.90k|      if(simdutf_likely(is_ascii(input))) {
  ------------------
  |  |   70|  9.90k|  #define simdutf_likely(x) __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (70:29): [True: 7.74k, False: 2.15k]
  |  |  ------------------
  ------------------
  154|  7.74k|        this->error |= this->prev_incomplete;
  155|  7.74k|      } else {
  156|       |        // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  157|  2.15k|        static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  158|  2.15k|            "We support either two or four chunks per 64-byte block.");
  159|  2.15k|        if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (159:12): [Folded - Ignored]
  ------------------
  160|  2.15k|          this->check_utf8_bytes(input.chunks[0], this->prev_input_block);
  161|  2.15k|          this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  162|  2.15k|        } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (162:19): [Folded - Ignored]
  ------------------
  163|      0|          this->check_utf8_bytes(input.chunks[0], this->prev_input_block);
  164|      0|          this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  165|      0|          this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  166|      0|          this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  167|      0|        }
  168|  2.15k|        this->prev_incomplete = is_incomplete(input.chunks[simd8x64<uint8_t>::NUM_CHUNKS-1]);
  169|  2.15k|        this->prev_input_block = input.chunks[simd8x64<uint8_t>::NUM_CHUNKS-1];
  170|       |
  171|  2.15k|      }
  172|  9.90k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker16check_utf8_bytesENS1_4simd5simd8IhEES6_:
  135|  4.30k|    simdutf_really_inline void check_utf8_bytes(const simd8<uint8_t> input, const simd8<uint8_t> prev_input) {
  136|       |      // Flip prev1...prev3 so we can easily determine if they are 2+, 3+ or 4+ lead bytes
  137|       |      // (2, 3, 4-byte leads become large positive numbers instead of small negative numbers)
  138|  4.30k|      simd8<uint8_t> prev1 = input.prev<1>(prev_input);
  139|  4.30k|      simd8<uint8_t> sc = check_special_cases(input, prev1);
  140|  4.30k|      this->error |= check_multibyte_lengths(input, prev_input, sc);
  141|  4.30k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation19check_special_casesENS1_4simd5simd8IhEES5_:
    8|  4.30k|  simdutf_really_inline simd8<uint8_t> check_special_cases(const simd8<uint8_t> input, const simd8<uint8_t> prev1) {
    9|       |// Bit 0 = Too Short (lead byte/ASCII followed by lead byte/ASCII)
   10|       |// Bit 1 = Too Long (ASCII followed by continuation)
   11|       |// Bit 2 = Overlong 3-byte
   12|       |// Bit 4 = Surrogate
   13|       |// Bit 5 = Overlong 2-byte
   14|       |// Bit 7 = Two Continuations
   15|  4.30k|    constexpr const uint8_t TOO_SHORT   = 1<<0; // 11______ 0_______
   16|       |                                                // 11______ 11______
   17|  4.30k|    constexpr const uint8_t TOO_LONG    = 1<<1; // 0_______ 10______
   18|  4.30k|    constexpr const uint8_t OVERLONG_3  = 1<<2; // 11100000 100_____
   19|  4.30k|    constexpr const uint8_t SURROGATE   = 1<<4; // 11101101 101_____
   20|  4.30k|    constexpr const uint8_t OVERLONG_2  = 1<<5; // 1100000_ 10______
   21|  4.30k|    constexpr const uint8_t TWO_CONTS   = 1<<7; // 10______ 10______
   22|  4.30k|    constexpr const uint8_t TOO_LARGE   = 1<<3; // 11110100 1001____
   23|       |                                                // 11110100 101_____
   24|       |                                                // 11110101 1001____
   25|       |                                                // 11110101 101_____
   26|       |                                                // 1111011_ 1001____
   27|       |                                                // 1111011_ 101_____
   28|       |                                                // 11111___ 1001____
   29|       |                                                // 11111___ 101_____
   30|  4.30k|    constexpr const uint8_t TOO_LARGE_1000 = 1<<6;
   31|       |                                                // 11110101 1000____
   32|       |                                                // 1111011_ 1000____
   33|       |                                                // 11111___ 1000____
   34|  4.30k|    constexpr const uint8_t OVERLONG_4  = 1<<6; // 11110000 1000____
   35|       |
   36|  4.30k|    const simd8<uint8_t> byte_1_high = prev1.shr<4>().lookup_16<uint8_t>(
   37|       |      // 0_______ ________ <ASCII in byte 1>
   38|  4.30k|      TOO_LONG, TOO_LONG, TOO_LONG, TOO_LONG,
   39|  4.30k|      TOO_LONG, TOO_LONG, TOO_LONG, TOO_LONG,
   40|       |      // 10______ ________ <continuation in byte 1>
   41|  4.30k|      TWO_CONTS, TWO_CONTS, TWO_CONTS, TWO_CONTS,
   42|       |      // 1100____ ________ <two byte lead in byte 1>
   43|  4.30k|      TOO_SHORT | OVERLONG_2,
   44|       |      // 1101____ ________ <two byte lead in byte 1>
   45|  4.30k|      TOO_SHORT,
   46|       |      // 1110____ ________ <three byte lead in byte 1>
   47|  4.30k|      TOO_SHORT | OVERLONG_3 | SURROGATE,
   48|       |      // 1111____ ________ <four+ byte lead in byte 1>
   49|  4.30k|      TOO_SHORT | TOO_LARGE | TOO_LARGE_1000 | OVERLONG_4
   50|  4.30k|    );
   51|  4.30k|    constexpr const uint8_t CARRY = TOO_SHORT | TOO_LONG | TWO_CONTS; // These all have ____ in byte 1 .
   52|  4.30k|    const simd8<uint8_t> byte_1_low = (prev1 & 0x0F).lookup_16<uint8_t>(
   53|       |      // ____0000 ________
   54|  4.30k|      CARRY | OVERLONG_3 | OVERLONG_2 | OVERLONG_4,
   55|       |      // ____0001 ________
   56|  4.30k|      CARRY | OVERLONG_2,
   57|       |      // ____001_ ________
   58|  4.30k|      CARRY,
   59|  4.30k|      CARRY,
   60|       |
   61|       |      // ____0100 ________
   62|  4.30k|      CARRY | TOO_LARGE,
   63|       |      // ____0101 ________
   64|  4.30k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   65|       |      // ____011_ ________
   66|  4.30k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   67|  4.30k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   68|       |
   69|       |      // ____1___ ________
   70|  4.30k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   71|  4.30k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   72|  4.30k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   73|  4.30k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   74|  4.30k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   75|       |      // ____1101 ________
   76|  4.30k|      CARRY | TOO_LARGE | TOO_LARGE_1000 | SURROGATE,
   77|  4.30k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   78|  4.30k|      CARRY | TOO_LARGE | TOO_LARGE_1000
   79|  4.30k|    );
   80|  4.30k|    const simd8<uint8_t> byte_2_high = input.shr<4>().lookup_16<uint8_t>(
   81|       |      // ________ 0_______ <ASCII in byte 2>
   82|  4.30k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT,
   83|  4.30k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT,
   84|       |
   85|       |      // ________ 1000____
   86|  4.30k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | OVERLONG_3 | TOO_LARGE_1000 | OVERLONG_4,
   87|       |      // ________ 1001____
   88|  4.30k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | OVERLONG_3 | TOO_LARGE,
   89|       |      // ________ 101_____
   90|  4.30k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | SURROGATE  | TOO_LARGE,
   91|  4.30k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | SURROGATE  | TOO_LARGE,
   92|       |
   93|       |      // ________ 11______
   94|  4.30k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT
   95|  4.30k|    );
   96|  4.30k|    return (byte_1_high & byte_1_low & byte_2_high);
   97|  4.30k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation23check_multibyte_lengthsENS1_4simd5simd8IhEES5_S5_:
   99|  4.30k|      const simd8<uint8_t> prev_input, const simd8<uint8_t> sc) {
  100|  4.30k|    simd8<uint8_t> prev2 = input.prev<2>(prev_input);
  101|  4.30k|    simd8<uint8_t> prev3 = input.prev<3>(prev_input);
  102|  4.30k|    simd8<uint8_t> must23 = simd8<uint8_t>(must_be_2_3_continuation(prev2, prev3));
  103|  4.30k|    simd8<uint8_t> must23_80 = must23 & uint8_t(0x80);
  104|  4.30k|    return must23_80 ^ sc;
  105|  4.30k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation13is_incompleteENS1_4simd5simd8IhEE:
  111|  2.15k|  simdutf_really_inline simd8<uint8_t> is_incomplete(const simd8<uint8_t> input) {
  112|       |    // If the previous input's last 3 bytes match this, they're too short (they ended at EOF):
  113|       |    // ... 1111____ 111_____ 11______
  114|  2.15k|    static const uint8_t max_array[32] = {
  115|  2.15k|      255, 255, 255, 255, 255, 255, 255, 255,
  116|  2.15k|      255, 255, 255, 255, 255, 255, 255, 255,
  117|  2.15k|      255, 255, 255, 255, 255, 255, 255, 255,
  118|  2.15k|      255, 255, 255, 255, 255, 0b11110000u-1, 0b11100000u-1, 0b11000000u-1
  119|  2.15k|    };
  120|  2.15k|    const simd8<uint8_t> max_value(&max_array[sizeof(max_array)-sizeof(simd8<uint8_t>)]);
  121|  2.15k|    return input.gt_bits(max_value);
  122|  2.15k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker9check_eofEv:
  146|  2.30k|    simdutf_really_inline void check_eof() {
  147|       |      // If the previous block had incomplete UTF-8 characters at the end, an ASCII block can't
  148|       |      // possibly finish them.
  149|  2.30k|      this->error |= this->prev_incomplete;
  150|  2.30k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker6errorsEv:
  175|  2.30k|    simdutf_really_inline bool errors() const {
  176|  2.30k|      return this->error.any_bits_set_anywhere();
  177|  2.30k|    }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation21generic_validate_utf8EPKcm:
   27|  2.30k|bool generic_validate_utf8(const char * input, size_t length) {
   28|  2.30k|  return generic_validate_utf8<utf8_checker>(reinterpret_cast<const uint8_t *>(input),length);
   29|  2.30k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation21generic_validate_utf8INS2_12utf8_checkerEEEbPKhm:
   10|  2.30k|bool generic_validate_utf8(const uint8_t * input, size_t length) {
   11|  2.30k|    checker c{};
   12|  2.30k|    buf_block_reader<64> reader(input, length);
   13|  9.90k|    while (reader.has_full_block()) {
  ------------------
  |  Branch (13:12): [True: 7.59k, False: 2.30k]
  ------------------
   14|  7.59k|      simd::simd8x64<uint8_t> in(reader.full_block());
   15|  7.59k|      c.check_next_input(in);
   16|  7.59k|      reader.advance();
   17|  7.59k|    }
   18|  2.30k|    uint8_t block[64]{};
   19|  2.30k|    reader.get_remainder(block);
   20|  2.30k|    simd::simd8x64<uint8_t> in(block);
   21|  2.30k|    c.check_next_input(in);
   22|  2.30k|    reader.advance();
   23|  2.30k|    c.check_eof();
   24|  2.30k|    return !c.errors();
   25|  2.30k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_128convert_masked_utf8_to_utf32EPKcmRPDi:
   10|  7.90k|                           char32_t *&utf32_output) {
   11|       |  // we use an approach where we try to process up to 12 input bytes.
   12|       |  // Why 12 input bytes and not 16? Because we are concerned with the size of
   13|       |  // the lookup tables. Also 12 is nicely divisible by two and three.
   14|       |  //
   15|       |  //
   16|       |  // Optimization note: our main path below is load-latency dependent. Thus it is maybe
   17|       |  // beneficial to have fast paths that depend on branch prediction but have less latency.
   18|       |  // This results in more instructions but, potentially, also higher speeds.
   19|       |  //
   20|       |  // We first try a few fast paths.
   21|  7.90k|  const __m128i in = _mm_loadu_si128((__m128i *)input);
   22|  7.90k|  const uint16_t input_utf8_end_of_code_point_mask =
   23|  7.90k|      utf8_end_of_code_point_mask & 0xfff;
   24|  7.90k|  if(((utf8_end_of_code_point_mask & 0xffff) == 0xffff)) {
  ------------------
  |  Branch (24:6): [True: 2.42k, False: 5.48k]
  ------------------
   25|       |    // We process the data in chunks of 16 bytes.
   26|  2.42k|    _mm256_storeu_si256(reinterpret_cast<__m256i *>(utf32_output), _mm256_cvtepu8_epi32(in));
   27|  2.42k|    _mm256_storeu_si256(reinterpret_cast<__m256i *>(utf32_output+8), _mm256_cvtepu8_epi32(_mm_srli_si128(in,8)));
   28|  2.42k|    utf32_output += 16; // We wrote 16 32-bit characters.
   29|  2.42k|    return 16; // We consumed 16 bytes.
   30|  2.42k|  }
   31|  5.48k|  if(((utf8_end_of_code_point_mask & 0xffff) == 0xaaaa)) {
  ------------------
  |  Branch (31:6): [True: 344, False: 5.13k]
  ------------------
   32|       |    // We want to take 8 2-byte UTF-8 code units and turn them into 8 4-byte UTF-32 code units.
   33|       |    // There is probably a more efficient sequence, but the following might do.
   34|    344|    const __m128i sh = _mm_setr_epi8(1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14);
   35|    344|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   36|    344|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi16(0x7f));
   37|    344|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi16(0x1f00));
   38|    344|    const __m128i composed = _mm_or_si128(ascii, _mm_srli_epi16(highbyte, 2));
   39|    344|    _mm256_storeu_si256((__m256i *)utf32_output, _mm256_cvtepu16_epi32(composed));
   40|    344|    utf32_output += 8; // We wrote 16 bytes, 8 code points.
   41|    344|    return 16;
   42|    344|  }
   43|  5.13k|  if(input_utf8_end_of_code_point_mask == 0x924) {
  ------------------
  |  Branch (43:6): [True: 201, False: 4.93k]
  ------------------
   44|       |    // We want to take 4 3-byte UTF-8 code units and turn them into 4 4-byte UTF-32 code units.
   45|       |    // There is probably a more efficient sequence, but the following might do.
   46|    201|    const __m128i sh = _mm_setr_epi8(2, 1, 0, -1, 5, 4, 3, -1, 8, 7, 6, -1, 11, 10, 9, -1);
   47|    201|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   48|    201|    const __m128i ascii =
   49|    201|        _mm_and_si128(perm, _mm_set1_epi32(0x7f)); // 7 or 6 bits
   50|    201|    const __m128i middlebyte =
   51|    201|        _mm_and_si128(perm, _mm_set1_epi32(0x3f00)); // 5 or 6 bits
   52|    201|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
   53|    201|    const __m128i highbyte =
   54|    201|        _mm_and_si128(perm, _mm_set1_epi32(0x0f0000)); // 4 bits
   55|    201|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 4);
   56|    201|    const __m128i composed =
   57|    201|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted), highbyte_shifted);
   58|    201|    _mm_storeu_si128((__m128i *)utf32_output, composed);
   59|    201|    utf32_output += 4;
   60|    201|    return 12;
   61|    201|  }
   62|       |  /// We do not have a fast path available, so we fallback.
   63|       |
   64|  4.93k|  const uint8_t idx =
   65|  4.93k|      tables::utf8_to_utf16::utf8bigindex[input_utf8_end_of_code_point_mask][0];
   66|  4.93k|  const uint8_t consumed =
   67|  4.93k|      tables::utf8_to_utf16::utf8bigindex[input_utf8_end_of_code_point_mask][1];
   68|  4.93k|  if (idx < 64) {
  ------------------
  |  Branch (68:7): [True: 3.35k, False: 1.58k]
  ------------------
   69|       |    // SIX (6) input code-code units
   70|       |    // this is a relatively easy scenario
   71|       |    // we process SIX (6) input code-code units. The max length in bytes of six code
   72|       |    // code units spanning between 1 and 2 bytes each is 12 bytes. On processors
   73|       |    // where pdep/pext is fast, we might be able to use a small lookup table.
   74|  3.35k|    const __m128i sh =
   75|  3.35k|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
   76|  3.35k|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   77|  3.35k|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi16(0x7f));
   78|  3.35k|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi16(0x1f00));
   79|  3.35k|    const __m128i composed = _mm_or_si128(ascii, _mm_srli_epi16(highbyte, 2));
   80|  3.35k|    _mm256_storeu_si256((__m256i *)utf32_output, _mm256_cvtepu16_epi32(composed));
   81|  3.35k|    utf32_output += 6; // We wrote 24 bytes, 6 code points. There is a potential
   82|       |    // overflow of 32 - 24 = 8 bytes.
   83|  3.35k|  } else if (idx < 145) {
  ------------------
  |  Branch (83:14): [True: 1.37k, False: 213]
  ------------------
   84|       |    // FOUR (4) input code-code units
   85|  1.37k|    const __m128i sh =
   86|  1.37k|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
   87|  1.37k|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   88|  1.37k|    const __m128i ascii =
   89|  1.37k|        _mm_and_si128(perm, _mm_set1_epi32(0x7f)); // 7 or 6 bits
   90|  1.37k|    const __m128i middlebyte =
   91|  1.37k|        _mm_and_si128(perm, _mm_set1_epi32(0x3f00)); // 5 or 6 bits
   92|  1.37k|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
   93|  1.37k|    const __m128i highbyte =
   94|  1.37k|        _mm_and_si128(perm, _mm_set1_epi32(0x0f0000)); // 4 bits
   95|  1.37k|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 4);
   96|  1.37k|    const __m128i composed =
   97|  1.37k|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted), highbyte_shifted);
   98|  1.37k|    _mm_storeu_si128((__m128i *)utf32_output, composed);
   99|  1.37k|    utf32_output += 4;
  100|  1.37k|  } else if (idx < 209) {
  ------------------
  |  Branch (100:14): [True: 213, False: 0]
  ------------------
  101|       |    // TWO (2) input code-code units
  102|    213|    const __m128i sh =
  103|    213|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
  104|    213|    const __m128i perm = _mm_shuffle_epi8(in, sh);
  105|    213|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi32(0x7f));
  106|    213|    const __m128i middlebyte = _mm_and_si128(perm, _mm_set1_epi32(0x3f00));
  107|    213|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
  108|    213|    __m128i middlehighbyte = _mm_and_si128(perm, _mm_set1_epi32(0x3f0000));
  109|       |    // correct for spurious high bit
  110|    213|    const __m128i correct =
  111|    213|        _mm_srli_epi32(_mm_and_si128(perm, _mm_set1_epi32(0x400000)), 1);
  112|    213|    middlehighbyte = _mm_xor_si128(correct, middlehighbyte);
  113|    213|    const __m128i middlehighbyte_shifted = _mm_srli_epi32(middlehighbyte, 4);
  114|    213|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi32(0x07000000));
  115|    213|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 6);
  116|    213|    const __m128i composed =
  117|    213|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted),
  118|    213|                     _mm_or_si128(highbyte_shifted, middlehighbyte_shifted));
  119|    213|    _mm_storeu_si128((__m128i *)utf32_output, composed);
  120|    213|    utf32_output += 3; // We wrote 3 * 4 bytes, there is a potential overflow of 4 bytes.
  121|    213|  } else {
  122|       |    // here we know that there is an error but we do not handle errors
  123|      0|  }
  124|  4.93k|  return consumed;
  125|  5.13k|}

_ZNK7simdutf7haswell14implementation13validate_utf8EPKcm:
  104|  2.30k|simdutf_warn_unused bool implementation::validate_utf8(const char *buf, size_t len) const noexcept {
  105|  2.30k|  return haswell::utf8_validation::generic_validate_utf8(buf,len);
  106|  2.30k|}
_ZNK7simdutf7haswell14implementation21convert_utf8_to_utf32EPKcmPDi:
  274|  74.3k|simdutf_warn_unused size_t implementation::convert_utf8_to_utf32(const char* buf, size_t len, char32_t* utf32_output) const noexcept {
  275|  74.3k|  utf8_to_utf32::validating_transcoder converter;
  276|  74.3k|  return converter.convert(buf, len, utf32_output);
  277|  74.3k|}
_ZNK7simdutf7haswell14implementation27convert_valid_utf8_to_utf32EPKcmPDi:
  285|  1.79k|    char32_t* utf32_output) const noexcept {
  286|  1.79k|  return utf8_to_utf32::convert_valid(input, size,  utf32_output);
  287|  1.79k|}
_ZNK7simdutf7haswell14implementation22utf32_length_from_utf8EPKcm:
  776|  1.79k|simdutf_warn_unused size_t implementation::utf32_length_from_utf8(const char * input, size_t length) const noexcept {
  777|  1.79k|  return utf8::count_code_points(input, length);
  778|  1.79k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_18is_asciiERKNS1_4simd8simd8x64IhEE:
   23|  9.90k|simdutf_really_inline bool is_ascii(const simd8x64<uint8_t>& input) {
   24|  9.90k|  return input.reduce_or().is_ascii();
   25|  9.90k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_124must_be_2_3_continuationENS1_4simd5simd8IhEES4_:
   35|  4.30k|simdutf_really_inline simd8<bool> must_be_2_3_continuation(const simd8<uint8_t> prev2, const simd8<uint8_t> prev3) {
   36|  4.30k|  simd8<uint8_t> is_third_byte  = prev2.saturating_sub(0b11100000u-1); // Only 111_____ will be > 0
   37|  4.30k|  simd8<uint8_t> is_fourth_byte = prev3.saturating_sub(0b11110000u-1); // Only 1111____ will be > 0
   38|       |  // Caller requires a bool (all 1's). All values resulting from the subtraction will be <= 64, so signed comparison is fine.
   39|  4.30k|  return simd8<int8_t>(is_third_byte | is_fourth_byte) > int8_t(0);
   40|  4.30k|}

_ZNK7simdutf8internal29available_implementation_list21detect_best_supportedEv:
  768|      1|const implementation *available_implementation_list::detect_best_supported() const noexcept {
  769|       |  // They are prelisted in priority order, so we just go down the list
  770|      1|  uint32_t supported_instruction_sets = internal::detect_supported_architectures();
  771|      2|  for (const implementation *impl : internal::get_available_implementation_pointers()) {
  ------------------
  |  Branch (771:35): [True: 2, False: 0]
  ------------------
  772|      2|    uint32_t required_instruction_sets = impl->required_instruction_sets();
  773|      2|    if ((supported_instruction_sets & required_instruction_sets) == required_instruction_sets) { return impl; }
  ------------------
  |  Branch (773:9): [True: 1, False: 1]
  ------------------
  774|      2|  }
  775|      0|  return &unsupported_singleton; // this should never happen?
  776|      1|}
_ZNK7simdutf8internal49detect_best_supported_implementation_on_first_use8set_bestEv:
  778|      1|const implementation *detect_best_supported_implementation_on_first_use::set_best() const noexcept {
  779|      1|  SIMDUTF_PUSH_DISABLE_WARNINGS
  780|       |  SIMDUTF_DISABLE_DEPRECATED_WARNING // Disable CRT_SECURE warning on MSVC: manually verified this is safe
  781|      1|  char *force_implementation_name = getenv("SIMDUTF_FORCE_IMPLEMENTATION");
  782|      1|  SIMDUTF_POP_DISABLE_WARNINGS
  783|       |
  784|      1|  if (force_implementation_name) {
  ------------------
  |  Branch (784:7): [True: 0, False: 1]
  ------------------
  785|      0|    auto force_implementation = get_available_implementations()[force_implementation_name];
  786|      0|    if (force_implementation) {
  ------------------
  |  Branch (786:9): [True: 0, False: 0]
  ------------------
  787|      0|      return get_active_implementation() = force_implementation;
  788|      0|    } else {
  789|       |      // Note: abort() and stderr usage within the library is forbidden.
  790|      0|      return get_active_implementation() = &unsupported_singleton;
  791|      0|    }
  792|      0|  }
  793|      1|  return get_active_implementation() = get_available_implementations().detect_best_supported();
  794|      1|}
_ZN7simdutf29get_available_implementationsEv:
  803|      1|SIMDUTF_DLLIMPORTEXPORT const internal::available_implementation_list& get_available_implementations() {
  804|      1|  static const internal::available_implementation_list available_implementations{};
  805|      1|  return available_implementations;
  806|      1|}
_ZN7simdutf25get_active_implementationEv:
  811|  80.2k|SIMDUTF_DLLIMPORTEXPORT internal::atomic_ptr<const implementation>& get_active_implementation() {
  812|  80.2k|    static const internal::detect_best_supported_implementation_on_first_use detect_best_supported_implementation_on_first_use_singleton;
  813|  80.2k|    static internal::atomic_ptr<const implementation> active_implementation{&detect_best_supported_implementation_on_first_use_singleton};
  814|  80.2k|    return active_implementation;
  815|  80.2k|}
_ZN7simdutf13validate_utf8EPKcm:
  817|  2.30k|simdutf_warn_unused bool validate_utf8(const char *buf, size_t len) noexcept {
  818|  2.30k|  return get_active_implementation()->validate_utf8(buf, len);
  819|  2.30k|}
_ZN7simdutf21convert_utf8_to_utf32EPKcmPDi:
  876|  74.3k|simdutf_warn_unused size_t convert_utf8_to_utf32(const char * input, size_t length, char32_t* utf32_output) noexcept {
  877|  74.3k|  return get_active_implementation()->convert_utf8_to_utf32(input, length, utf32_output);
  878|  74.3k|}
_ZN7simdutf27convert_valid_utf8_to_utf32EPKcmPDi:
  927|  1.79k|simdutf_warn_unused size_t convert_valid_utf8_to_utf32(const char * input, size_t length, char32_t* utf32_buffer) noexcept {
  928|  1.79k|  return get_active_implementation()->convert_valid_utf8_to_utf32(input, length, utf32_buffer);
  929|  1.79k|}
_ZN7simdutf22utf32_length_from_utf8EPKcm:
 1174|  1.79k|simdutf_warn_unused size_t utf32_length_from_utf8(const char * input, size_t length) noexcept {
 1175|  1.79k|  return get_active_implementation()->utf32_length_from_utf8(input, length);
 1176|  1.79k|}
_ZN7simdutf8internal26unsupported_implementationC2Ev:
  754|      2|  unsupported_implementation() : implementation("unsupported", "Unsupported CPU (no detected SIMD instructions)", 0) {}
simdutf.cpp:_ZN7simdutf8internalL37get_available_implementation_pointersEv:
  423|      1|static const std::initializer_list<const implementation *>& get_available_implementation_pointers() {
  424|      1|  static const std::initializer_list<const implementation *> available_implementation_pointers {
  425|      1|#if SIMDUTF_IMPLEMENTATION_ICELAKE
  426|      1|    get_icelake_singleton(),
  427|      1|#endif
  428|      1|#if SIMDUTF_IMPLEMENTATION_HASWELL
  429|      1|    get_haswell_singleton(),
  430|      1|#endif
  431|      1|#if SIMDUTF_IMPLEMENTATION_WESTMERE
  432|      1|    get_westmere_singleton(),
  433|      1|#endif
  434|       |#if SIMDUTF_IMPLEMENTATION_ARM64
  435|       |    get_arm64_singleton(),
  436|       |#endif
  437|       |#if SIMDUTF_IMPLEMENTATION_PPC64
  438|       |    get_ppc64_singleton(),
  439|       |#endif
  440|      1|#if SIMDUTF_IMPLEMENTATION_FALLBACK
  441|      1|    get_fallback_singleton(),
  442|      1|#endif
  443|      1|  }; // available_implementation_pointers
  444|      1|  return available_implementation_pointers;
  445|      1|}
simdutf.cpp:_ZN7simdutf8internalL21get_icelake_singletonEv:
   72|      1|static const icelake::implementation* get_icelake_singleton() {
   73|      1|  static const icelake::implementation icelake_singleton{};
   74|      1|  return &icelake_singleton;
   75|      1|}
simdutf.cpp:_ZN7simdutf8internalL21get_haswell_singletonEv:
   78|      1|static const haswell::implementation* get_haswell_singleton() {
   79|      1|  static const haswell::implementation haswell_singleton{};
   80|      1|  return &haswell_singleton;
   81|      1|}
simdutf.cpp:_ZN7simdutf8internalL22get_westmere_singletonEv:
   84|      1|static const westmere::implementation* get_westmere_singleton() {
   85|      1|  static const westmere::implementation westmere_singleton{};
   86|      1|  return &westmere_singleton;
   87|      1|}
simdutf.cpp:_ZN7simdutf8internalL22get_fallback_singletonEv:
  102|      1|static const fallback::implementation* get_fallback_singleton() {
  103|      1|  static const fallback::implementation fallback_singleton{};
  104|      1|  return &fallback_singleton;
  105|      1|}
_ZN7simdutf8internal49detect_best_supported_implementation_on_first_useC2Ev:
  417|      1|  simdutf_really_inline detect_best_supported_implementation_on_first_use() noexcept : implementation("best_supported_detector", "Detects the best supported implementation and sets it", 0) {}
_ZNK7simdutf8internal49detect_best_supported_implementation_on_first_use13validate_utf8EPKcm:
  121|      1|  simdutf_warn_unused bool validate_utf8(const char * buf, size_t len) const noexcept final override {
  122|      1|    return set_best()->validate_utf8(buf, len);
  123|      1|  }

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_14utf817count_code_pointsEPKcm:
  168|  1.79k|inline size_t count_code_points(const char* buf, size_t len) {
  169|  1.79k|    const int8_t * p = reinterpret_cast<const int8_t *>(buf);
  170|  1.79k|    size_t counter{0};
  171|  45.3k|    for(size_t i = 0; i < len; i++) {
  ------------------
  |  Branch (171:23): [True: 43.5k, False: 1.79k]
  ------------------
  172|       |        // -65 is 0b10111111, anything larger in two-complement's should start a new code point.
  173|  43.5k|        if(p[i] > -65) { counter++; }
  ------------------
  |  Branch (173:12): [True: 43.0k, False: 514]
  ------------------
  174|  43.5k|    }
  175|  1.79k|    return counter;
  176|  1.79k|}

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf327convertEPKcmPDi:
    9|  74.3k|inline size_t convert(const char* buf, size_t len, char32_t* utf32_output) {
   10|  74.3k| const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   11|  74.3k|  size_t pos = 0;
   12|  74.3k|  char32_t* start{utf32_output};
   13|   144k|  while (pos < len) {
  ------------------
  |  Branch (13:10): [True: 74.3k, False: 70.1k]
  ------------------
   14|       |    // try to convert the next block of 16 ASCII bytes
   15|  74.3k|    if (pos + 16 <= len) { // if it is safe to read 16 more bytes, check that they are ascii
  ------------------
  |  Branch (15:9): [True: 0, False: 74.3k]
  ------------------
   16|      0|      uint64_t v1;
   17|      0|      ::memcpy(&v1, data + pos, sizeof(uint64_t));
   18|      0|      uint64_t v2;
   19|      0|      ::memcpy(&v2, data + pos + sizeof(uint64_t), sizeof(uint64_t));
   20|      0|      uint64_t v{v1 | v2};
   21|      0|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (21:11): [True: 0, False: 0]
  ------------------
   22|      0|        size_t final_pos = pos + 16;
   23|      0|        while(pos < final_pos) {
  ------------------
  |  Branch (23:15): [True: 0, False: 0]
  ------------------
   24|      0|          *utf32_output++ = char32_t(buf[pos]);
   25|      0|          pos++;
   26|      0|        }
   27|      0|        continue;
   28|      0|      }
   29|      0|    }
   30|  74.3k|    uint8_t leading_byte = data[pos]; // leading byte
   31|  74.3k|    if (leading_byte < 0b10000000) {
  ------------------
  |  Branch (31:9): [True: 64.8k, False: 9.58k]
  ------------------
   32|       |      // converting one ASCII byte !!!
   33|  64.8k|      *utf32_output++ = char32_t(leading_byte);
   34|  64.8k|      pos++;
   35|  64.8k|    } else if ((leading_byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (35:16): [True: 4.89k, False: 4.69k]
  ------------------
   36|       |      // We have a two-byte UTF-8
   37|  4.89k|      if(pos + 1 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (37:10): [True: 0, False: 4.89k]
  ------------------
   38|  4.89k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (38:11): [True: 1.82k, False: 3.06k]
  ------------------
   39|       |      // range check
   40|  3.06k|      uint32_t code_point = (leading_byte & 0b00011111) << 6 | (data[pos + 1] & 0b00111111);
   41|  3.06k|      if (code_point < 0x80 || 0x7ff < code_point) { return 0; }
  ------------------
  |  Branch (41:11): [True: 177, False: 2.89k]
  |  Branch (41:32): [True: 0, False: 2.89k]
  ------------------
   42|  2.89k|      *utf32_output++ = char32_t(code_point);
   43|  2.89k|      pos += 2;
   44|  4.69k|    } else if ((leading_byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (44:16): [True: 2.73k, False: 1.95k]
  ------------------
   45|       |      // We have a three-byte UTF-8
   46|  2.73k|      if(pos + 2 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (46:10): [True: 0, False: 2.73k]
  ------------------
   47|       |
   48|  2.73k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (48:11): [True: 760, False: 1.97k]
  ------------------
   49|  1.97k|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (49:11): [True: 141, False: 1.83k]
  ------------------
   50|       |      // range check
   51|  1.83k|      uint32_t code_point = (leading_byte & 0b00001111) << 12 |
   52|  1.83k|                   (data[pos + 1] & 0b00111111) << 6 |
   53|  1.83k|                   (data[pos + 2] & 0b00111111);
   54|  1.83k|      if (code_point < 0x800 || 0xffff < code_point ||
  ------------------
  |  Branch (54:11): [True: 141, False: 1.69k]
  |  Branch (54:33): [True: 0, False: 1.69k]
  ------------------
   55|  1.83k|          (0xd7ff < code_point && code_point < 0xe000)) {
  ------------------
  |  Branch (55:12): [True: 277, False: 1.41k]
  |  Branch (55:35): [True: 136, False: 141]
  ------------------
   56|    277|        return 0;
   57|    277|      }
   58|  1.55k|      *utf32_output++ = char32_t(code_point);
   59|  1.55k|      pos += 3;
   60|  1.95k|    } else if ((leading_byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (60:16): [True: 1.95k, False: 0]
  ------------------
   61|       |      // we have a 4-byte UTF-8 word.
   62|  1.95k|      if(pos + 3 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (62:10): [True: 0, False: 1.95k]
  ------------------
   63|  1.95k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (63:11): [True: 368, False: 1.59k]
  ------------------
   64|  1.59k|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (64:11): [True: 167, False: 1.42k]
  ------------------
   65|  1.42k|      if ((data[pos + 3] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (65:11): [True: 141, False: 1.28k]
  ------------------
   66|       |
   67|       |      // range check
   68|  1.28k|      uint32_t code_point =
   69|  1.28k|          (leading_byte & 0b00000111) << 18 | (data[pos + 1] & 0b00111111) << 12 |
   70|  1.28k|          (data[pos + 2] & 0b00111111) << 6 | (data[pos + 3] & 0b00111111);
   71|  1.28k|      if (code_point <= 0xffff || 0x10ffff < code_point) { return 0; }
  ------------------
  |  Branch (71:11): [True: 262, False: 1.02k]
  |  Branch (71:35): [True: 141, False: 879]
  ------------------
   72|    879|      *utf32_output++ = char32_t(code_point);
   73|    879|      pos += 4;
   74|    879|    } else {
   75|      0|      return 0;
   76|      0|    }
   77|  74.3k|  }
   78|  70.1k|  return utf32_output - start;
   79|  74.3k|}

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf3213convert_validEPKcmPDi:
    9|  1.79k|inline size_t convert_valid(const char* buf, size_t len, char32_t* utf32_output) {
   10|  1.79k| const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   11|  1.79k|  size_t pos = 0;
   12|  1.79k|  char32_t* start{utf32_output};
   13|  15.0k|  while (pos < len) {
  ------------------
  |  Branch (13:10): [True: 13.2k, False: 1.79k]
  ------------------
   14|       |    // try to convert the next block of 8 ASCII bytes
   15|  13.2k|    if (pos + 8 <= len) { // if it is safe to read 8 more bytes, check that they are ascii
  ------------------
  |  Branch (15:9): [True: 7.19k, False: 6.03k]
  ------------------
   16|  7.19k|      uint64_t v;
   17|  7.19k|      ::memcpy(&v, data + pos, sizeof(uint64_t));
   18|  7.19k|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (18:11): [True: 6.60k, False: 587]
  ------------------
   19|  6.60k|        size_t final_pos = pos + 8;
   20|  59.4k|        while(pos < final_pos) {
  ------------------
  |  Branch (20:15): [True: 52.8k, False: 6.60k]
  ------------------
   21|  52.8k|          *utf32_output++ = char32_t(buf[pos]);
   22|  52.8k|          pos++;
   23|  52.8k|        }
   24|  6.60k|        continue;
   25|  6.60k|      }
   26|  7.19k|    }
   27|  6.62k|    uint8_t leading_byte = data[pos]; // leading byte
   28|  6.62k|    if (leading_byte < 0b10000000) {
  ------------------
  |  Branch (28:9): [True: 6.27k, False: 346]
  ------------------
   29|       |      // converting one ASCII byte !!!
   30|  6.27k|      *utf32_output++ = char32_t(leading_byte);
   31|  6.27k|      pos++;
   32|  6.27k|    } else if ((leading_byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (32:16): [True: 169, False: 177]
  ------------------
   33|       |      // We have a two-byte UTF-8
   34|    169|      if(pos + 1 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (34:10): [True: 0, False: 169]
  ------------------
   35|    169|      *utf32_output++ = char32_t(((leading_byte &0b00011111) << 6) | (data[pos + 1] &0b00111111));
   36|    169|      pos += 2;
   37|    177|    } else if ((leading_byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (37:16): [True: 122, False: 55]
  ------------------
   38|       |      // We have a three-byte UTF-8
   39|    122|      if(pos + 2 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (39:10): [True: 0, False: 122]
  ------------------
   40|    122|      *utf32_output++ = char32_t(((leading_byte &0b00001111) << 12) | ((data[pos + 1] &0b00111111) << 6) | (data[pos + 2] &0b00111111));
   41|    122|      pos += 3;
   42|    122|    } else if ((leading_byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (42:16): [True: 55, False: 0]
  ------------------
   43|       |      // we have a 4-byte UTF-8 word.
   44|     55|      if(pos + 3 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (44:10): [True: 0, False: 55]
  ------------------
   45|     55|      uint32_t code_word = ((leading_byte & 0b00000111) << 18 )| ((data[pos + 1] &0b00111111) << 12)
   46|     55|                           | ((data[pos + 2] &0b00111111) << 6) | (data[pos + 3] &0b00111111);
   47|     55|      *utf32_output++ = char32_t(code_word);
   48|     55|      pos += 4;
   49|     55|    } else {
   50|       |      // we may have a continuation but we do not do error checking
   51|      0|      return 0;
   52|      0|    }
   53|  6.62k|  }
   54|  1.79k|  return utf32_output - start;
   55|  1.79k|}

_ZN7simdutf8fallback14implementationC2Ev:
   19|      1|  ) {}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_110count_onesEm:
   14|  6.03k|simdutf_really_inline long long int count_ones(uint64_t input_num) {
   15|  6.03k|  return _popcnt64(input_num);
   16|  6.03k|}

_ZN7simdutf7haswell14implementationC2Ev:
   18|      1|  ) {}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Ev:
  195|  6.92k|    simdutf_really_inline simd8() : base8_numeric<uint8_t>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhEC2Ev:
  112|  6.92k|    simdutf_really_inline base8_numeric() : base8<T>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEEC2Ev:
   61|  6.92k|    simdutf_really_inline base8() : base<simd8<T>>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEC2Ev:
   16|  6.92k|    simdutf_really_inline base() : value{__m256i()} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IhEC2EPKh:
  276|  9.90k|    simdutf_really_inline simd8x64(const T* ptr) : chunks{simd8<T>::load(ptr), simd8<T>::load(ptr+sizeof(simd8<T>)/sizeof(T))} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE4loadEPKh:
   96|  21.9k|    static simdutf_really_inline simd8<T> load(const T values[32]) {
   97|  21.9k|      return _mm256_loadu_si256(reinterpret_cast<const __m256i *>(values));
   98|  21.9k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2EDv4_x:
  196|   243k|    simdutf_really_inline simd8(const __m256i _value) : base8_numeric<uint8_t>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhEC2EDv4_x:
  113|   243k|    simdutf_really_inline base8_numeric(const __m256i _value) : base8<T>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEEC2EDv4_x:
   62|   243k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEC2EDv4_x:
   19|   243k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IhE9reduce_orEv:
  295|  9.90k|    simdutf_really_inline simd8<T> reduce_or() const {
  296|  9.90k|      return this->chunks[0] | this->chunks[1];
  297|  9.90k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEorES5_:
   43|  28.5k|    simdutf_really_inline Child operator|(const Child other) const { return _mm256_or_si256(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEcvRKDv4_xEv:
   21|   362k|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE8is_asciiEv:
  248|  9.90k|    simdutf_really_inline bool is_ascii() const { return _mm256_movemask_epi8(*this) == 0; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEoRES5_:
   47|  14.3k|    simdutf_really_inline Child& operator|=(const Child other) { auto this_cast = static_cast<Child*>(this); *this_cast = *this_cast | other; return *this_cast; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi1EEENS4_IhEES8_:
   70|  4.30k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  4.30k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  4.30k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE3shrILi4EEES4_v:
  254|  8.60k|    simdutf_really_inline simd8<uint8_t> shr() const { return simd8<uint8_t>(_mm256_srli_epi16(*this, N)) & uint8_t(0xFFu >> N); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE9lookup_16IhEENS2_5simd8IT_EES7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_:
  138|  12.9k|        L replace12, L replace13, L replace14, L replace15) const {
  139|  12.9k|      return lookup_16(simd8<L>::repeat_16(
  140|  12.9k|        replace0,  replace1,  replace2,  replace3,
  141|  12.9k|        replace4,  replace5,  replace6,  replace7,
  142|  12.9k|        replace8,  replace9,  replace10, replace11,
  143|  12.9k|        replace12, replace13, replace14, replace15
  144|  12.9k|      ));
  145|  12.9k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE9lookup_16IhEENS2_5simd8IT_EES8_:
  129|  12.9k|    simdutf_really_inline simd8<L> lookup_16(simd8<L> lookup_table) const {
  130|  12.9k|      return _mm256_shuffle_epi8(lookup_table, *this);
  131|  12.9k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEcvRDv4_xEv:
   22|  17.2k|    simdutf_really_inline operator __m256i&() { return this->value; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE9repeat_16Ehhhhhhhhhhhhhhhh:
  217|  12.9k|    ) {
  218|  12.9k|      return simd8<uint8_t>(
  219|  12.9k|        v0, v1, v2, v3, v4, v5, v6, v7,
  220|  12.9k|        v8, v9, v10,v11,v12,v13,v14,v15,
  221|  12.9k|        v0, v1, v2, v3, v4, v5, v6, v7,
  222|  12.9k|        v8, v9, v10,v11,v12,v13,v14,v15
  223|  12.9k|      );
  224|  12.9k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Ehhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh:
  212|  12.9k|    )) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEanES5_:
   44|  25.8k|    simdutf_really_inline Child operator&(const Child other) const { return _mm256_and_si256(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Eh:
  198|   100k|    simdutf_really_inline simd8(uint8_t _value) : simd8(splat(_value)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE5splatEh:
   94|   100k|    static simdutf_really_inline simd8<T> splat(T _value) { return _mm256_set1_epi8(_value); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi2EEENS4_IhEES8_:
   70|  4.30k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  4.30k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  4.30k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi3EEENS4_IhEES8_:
   70|  4.30k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  4.30k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  4.30k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE14saturating_subES4_:
  229|  10.7k|    simdutf_really_inline simd8<uint8_t> saturating_sub(const simd8<uint8_t> other) const { return _mm256_subs_epu8(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEC2EDv4_x:
  153|  45.9k|    simdutf_really_inline simd8(const __m256i _value) : base8_numeric<int8_t>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaEC2EDv4_x:
  113|  45.9k|    simdutf_really_inline base8_numeric(const __m256i _value) : base8<T>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IaNS2_5simd8IbEEEC2EDv4_x:
   62|  45.9k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEC2EDv4_x:
   19|  45.9k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEgtES4_:
  188|  16.3k|    simdutf_really_inline simd8<bool> operator>(const simd8<int8_t> other) const { return _mm256_cmpgt_epi8(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEcvRKDv4_xEv:
   21|  92.7k|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IbEC2EDv4_x:
   81|  19.1k|    simdutf_really_inline simd8<bool>(const __m256i _value) : base8<bool>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IbNS2_5simd8IbEEEC2EDv4_x:
   62|  19.1k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEC2EDv4_x:
   19|  19.1k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEC2Ea:
  156|  4.30k|    simdutf_really_inline simd8(int8_t _value) : simd8(splat(_value)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaE5splatEa:
   94|  11.7k|    static simdutf_really_inline simd8<T> splat(T _value) { return _mm256_set1_epi8(_value); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEcvRDv4_xEv:
   22|  4.30k|    simdutf_really_inline operator __m256i&() { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEeoES5_:
   45|  4.30k|    simdutf_really_inline Child operator^(const Child other) const { return _mm256_xor_si256(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2EPKh:
  200|  2.15k|    simdutf_really_inline simd8(const uint8_t values[32]) : simd8(load(values)) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE7gt_bitsES4_:
  235|  2.15k|    simdutf_really_inline simd8<uint8_t> gt_bits(const simd8<uint8_t> other) const { return this->saturating_sub(other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE21any_bits_set_anywhereEv:
  250|  76.7k|    simdutf_really_inline bool any_bits_set_anywhere() const { return !bits_not_set_anywhere(); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE21bits_not_set_anywhereEv:
  249|  76.7k|    simdutf_really_inline bool bits_not_set_anywhere() const { return _mm256_testz_si256(*this, *this); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaEC2EPKa:
  276|  11.9k|    simdutf_really_inline simd8x64(const T* ptr) : chunks{simd8<T>::load(ptr), simd8<T>::load(ptr+sizeof(simd8<T>)/sizeof(T))} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaE4loadEPKa:
   96|  23.9k|    static simdutf_really_inline simd8<T> load(const T values[32]) {
   97|  23.9k|      return _mm256_loadu_si256(reinterpret_cast<const __m256i *>(values));
   98|  23.9k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE8is_asciiEv:
  299|  5.95k|    simdutf_really_inline bool is_ascii() const {
  300|  5.95k|      return this->reduce_or().is_ascii();
  301|  5.95k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE9reduce_orEv:
  295|  5.95k|    simdutf_really_inline simd8<T> reduce_or() const {
  296|  5.95k|      return this->chunks[0] | this->chunks[1];
  297|  5.95k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEorES5_:
   43|  5.95k|    simdutf_really_inline Child operator|(const Child other) const { return _mm256_or_si256(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaE8is_asciiEv:
  184|  5.95k|    simdutf_really_inline bool is_ascii() const { return _mm256_movemask_epi8(*this) == 0; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE2ltEa:
  362|  1.39k|    simdutf_really_inline uint64_t lt(const T m) const {
  363|  1.39k|      const simd8<T> mask = simd8<T>::splat(m);
  364|  1.39k|      return  simd8x64<bool>(
  365|  1.39k|        this->chunks[0] < mask,
  366|  1.39k|        this->chunks[1] < mask
  367|  1.39k|      ).to_bitmask();
  368|  1.39k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEltES4_:
  189|  2.78k|    simdutf_really_inline simd8<bool> operator<(const simd8<int8_t> other) const { return _mm256_cmpgt_epi8(other, *this); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IbEC2ENS2_5simd8IbEES6_:
  275|  7.43k|    simdutf_really_inline simd8x64(const simd8<T> chunk0, const simd8<T> chunk1) : chunks{chunk0, chunk1} {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IbE10to_bitmaskEv:
  283|  7.43k|    simdutf_really_inline uint64_t to_bitmask() const {
  284|  7.43k|      uint64_t r_lo = uint32_t(this->chunks[0].to_bitmask());
  285|  7.43k|      uint64_t r_hi =                       this->chunks[1].to_bitmask();
  286|  7.43k|      return r_lo | (r_hi << 32);
  287|  7.43k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IbE10to_bitmaskEv:
   85|  14.8k|    simdutf_really_inline uint32_t to_bitmask() const { return uint32_t(_mm256_movemask_epi8(*this)); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEcvRKDv4_xEv:
   21|  14.8k|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE20store_ascii_as_utf32EPDi:
  309|  4.56k|    simdutf_really_inline void store_ascii_as_utf32(char32_t * ptr) const {
  310|  4.56k|      this->chunks[0].store_ascii_as_utf32(ptr+sizeof(simd8<T>)*0);
  311|  4.56k|      this->chunks[1].store_ascii_as_utf32(ptr+sizeof(simd8<T>)*1);
  312|  4.56k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEE20store_ascii_as_utf32EPDi:
   36|  9.12k|    simdutf_really_inline void store_ascii_as_utf32(char32_t * ptr) const {
   37|  9.12k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr), _mm256_cvtepu8_epi32(_mm256_castsi256_si128(*this)));
   38|  9.12k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr+8), _mm256_cvtepu8_epi32(_mm256_castsi256_si128(_mm256_srli_si256(*this,8))));
   39|  9.12k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr + 16), _mm256_cvtepu8_epi32(_mm256_extractf128_si256(*this,1)));
   40|  9.12k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr + 24), _mm256_cvtepu8_epi32(_mm_srli_si128(_mm256_extractf128_si256(*this,1),8)));
   41|  9.12k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE2gtEa:
  370|  6.03k|    simdutf_really_inline uint64_t gt(const T m) const {
  371|  6.03k|      const simd8<T> mask = simd8<T>::splat(m);
  372|  6.03k|      return  simd8x64<bool>(
  373|  6.03k|        this->chunks[0] > mask,
  374|  6.03k|        this->chunks[1] > mask
  375|  6.03k|      ).to_bitmask();
  376|  6.03k|    }

_ZN7simdutf7icelake14implementationC2Ev:
   18|      1|      internal::instruction_set::AVX2 | internal::instruction_set::BMI1 | internal::instruction_set::BMI2 | internal::instruction_set::AVX512BW | internal::instruction_set::AVX512CD | internal::instruction_set::AVX512VL | internal::instruction_set::AVX512VBMI2 | internal::instruction_set::AVX512VPOPCNTDQ ) {}

_ZN7simdutf8westmere14implementationC2Ev:
   16|      1|  simdutf_really_inline implementation() : simdutf::implementation("westmere", "Intel/AMD SSE4.2", internal::instruction_set::SSE42) {}

_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJaEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   734k|{
  619|   734k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   734k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   734k|    static_cast<    \
  |  |  247|   734k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   734k|}
_ZN3scn2v26detail20check_scan_arg_typesIJaEEEvv:
  386|  1.71M|{
  387|  1.71M|    static_assert(
  388|  1.71M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  1.71M|        "Scan argument types must be default constructible");
  390|  1.71M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  1.71M|                  "Scan argument types must be Destructible");
  392|  1.71M|    static_assert(
  393|  1.71M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  1.71M|        "Scan argument types must not be references");
  395|  1.71M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJaEEC2EONSt3__15tupleIJaEEE:
  563|   734k|    {
  564|   734k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJaEE15make_data_arrayIJaEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   734k|    {
  574|   734k|        return {
  575|   734k|            detail::make_arg<base::is_packed, Context,
  576|   734k|                             detail::mapped_type_constant<
  577|   734k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   734k|                args)...};
  579|   734k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE1EavEENS1_9arg_valueERT2_:
  414|   734k|{
  415|   734k|    return make_value<Context>(value);
  416|   734k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEaEEDaRT0_:
  371|   813k|{
  372|   813k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   813k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   813k|                                  needs_context_tag>) {
  376|   813k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   813k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   813k|    }
  378|   813k|    else {
  379|   813k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   813k|            value, context_tag<Context>{}));
  381|   813k|    }
  382|   813k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERa:
  216|   813k|    {                                                                        \
  217|   813k|        return val;                                                          \
  218|   813k|    }
_ZN3scn2v26detail15make_value_implIRaEEDaOT_:
  340|  1.71M|{
  341|  1.71M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  1.71M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  1.71M|    constexpr bool scannable_char =
  345|  1.71M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  1.71M|    static_assert(scannable_char,
  347|  1.71M|                  "Cannot scan an argument of an unsupported character "
  348|  1.71M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  1.71M|    constexpr bool scannable_const =
  351|  1.71M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  1.71M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  1.71M|    constexpr bool scannable_disabled =
  355|  1.71M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  1.71M|    static_assert(scannable_disabled,
  357|  1.71M|                  "Cannot scan an argument that has been disabled by "
  358|  1.71M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  1.71M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  1.71M|    static_assert(
  362|  1.71M|        scannable,
  363|  1.71M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  1.71M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  1.71M|    return arg_value{arg};
  367|  1.71M|}
_ZN3scn2v26detail9arg_valueC2IaEERT_:
  159|  1.71M|    {
  160|  1.71M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJaEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   734k|    {
  647|   734k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPNS0_6detail9arg_valueE:
  693|  5.54M|    {
  694|  5.54M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJaEE4argsEv:
  553|   642k|    {
  554|   642k|        return m_args;
  555|   642k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEaEENS0_14basic_scan_argIT_EERT0_:
  399|  79.3k|{
  400|  79.3k|    check_scan_arg_types<T>();
  401|       |
  402|  79.3k|    basic_scan_arg<Context> arg;
  403|  79.3k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  79.3k|    arg.m_value = make_value<Context>(value);
  405|  79.3k|    return arg;
  406|  79.3k|}
_ZN3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
  476|  6.10M|    constexpr basic_scan_arg() = default;
_ZN3scn2v26detail9arg_valueC2Ev:
  155|  12.6M|        arg_value() = default;
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJhEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   749k|{
  619|   749k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   749k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   749k|    static_cast<    \
  |  |  247|   749k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   749k|}
_ZN3scn2v26detail20check_scan_arg_typesIJhEEEvv:
  386|  1.76M|{
  387|  1.76M|    static_assert(
  388|  1.76M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  1.76M|        "Scan argument types must be default constructible");
  390|  1.76M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  1.76M|                  "Scan argument types must be Destructible");
  392|  1.76M|    static_assert(
  393|  1.76M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  1.76M|        "Scan argument types must not be references");
  395|  1.76M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJhEEC2EONSt3__15tupleIJhEEE:
  563|   749k|    {
  564|   749k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJhEE15make_data_arrayIJhEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   749k|    {
  574|   749k|        return {
  575|   749k|            detail::make_arg<base::is_packed, Context,
  576|   749k|                             detail::mapped_type_constant<
  577|   749k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   749k|                args)...};
  579|   749k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE6EhvEENS1_9arg_valueERT2_:
  414|   749k|{
  415|   749k|    return make_value<Context>(value);
  416|   749k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEhEEDaRT0_:
  371|   828k|{
  372|   828k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   828k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   828k|                                  needs_context_tag>) {
  376|   828k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   828k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   828k|    }
  378|   828k|    else {
  379|   828k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   828k|            value, context_tag<Context>{}));
  381|   828k|    }
  382|   828k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERh:
  216|   828k|    {                                                                        \
  217|   828k|        return val;                                                          \
  218|   828k|    }
_ZN3scn2v26detail15make_value_implIRhEEDaOT_:
  340|  1.76M|{
  341|  1.76M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  1.76M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  1.76M|    constexpr bool scannable_char =
  345|  1.76M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  1.76M|    static_assert(scannable_char,
  347|  1.76M|                  "Cannot scan an argument of an unsupported character "
  348|  1.76M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  1.76M|    constexpr bool scannable_const =
  351|  1.76M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  1.76M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  1.76M|    constexpr bool scannable_disabled =
  355|  1.76M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  1.76M|    static_assert(scannable_disabled,
  357|  1.76M|                  "Cannot scan an argument that has been disabled by "
  358|  1.76M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  1.76M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  1.76M|    static_assert(
  362|  1.76M|        scannable,
  363|  1.76M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  1.76M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  1.76M|    return arg_value{arg};
  367|  1.76M|}
_ZN3scn2v26detail9arg_valueC2IhEERT_:
  159|  1.76M|    {
  160|  1.76M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJhEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   749k|    {
  647|   749k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJhEE4argsEv:
  553|   657k|    {
  554|   657k|        return m_args;
  555|   657k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEhEENS0_14basic_scan_argIT_EERT0_:
  399|  78.9k|{
  400|  78.9k|    check_scan_arg_types<T>();
  401|       |
  402|  78.9k|    basic_scan_arg<Context> arg;
  403|  78.9k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  78.9k|    arg.m_value = make_value<Context>(value);
  405|  78.9k|    return arg;
  406|  78.9k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJiEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  1.07M|{
  619|  1.07M|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  1.07M|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  1.07M|    static_cast<    \
  |  |  247|  1.07M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  1.07M|}
_ZN3scn2v26detail20check_scan_arg_typesIJiEEEvv:
  386|  2.42M|{
  387|  2.42M|    static_assert(
  388|  2.42M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  2.42M|        "Scan argument types must be default constructible");
  390|  2.42M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  2.42M|                  "Scan argument types must be Destructible");
  392|  2.42M|    static_assert(
  393|  2.42M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  2.42M|        "Scan argument types must not be references");
  395|  2.42M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJiEEC2EONSt3__15tupleIJiEEE:
  563|  1.07M|    {
  564|  1.07M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJiEE15make_data_arrayIJiEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  1.07M|    {
  574|  1.07M|        return {
  575|  1.07M|            detail::make_arg<base::is_packed, Context,
  576|  1.07M|                             detail::mapped_type_constant<
  577|  1.07M|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  1.07M|                args)...};
  579|  1.07M|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE3EivEENS1_9arg_valueERT2_:
  414|  1.07M|{
  415|  1.07M|    return make_value<Context>(value);
  416|  1.07M|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEiEEDaRT0_:
  371|  1.18M|{
  372|  1.18M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  1.18M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  1.18M|                                  needs_context_tag>) {
  376|  1.18M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  1.18M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  1.18M|    }
  378|  1.18M|    else {
  379|  1.18M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  1.18M|            value, context_tag<Context>{}));
  381|  1.18M|    }
  382|  1.18M|}
_ZN3scn2v26detail10arg_mapperIcE3mapERi:
  216|  1.18M|    {                                                                        \
  217|  1.18M|        return val;                                                          \
  218|  1.18M|    }
_ZN3scn2v26detail15make_value_implIRiEEDaOT_:
  340|  2.42M|{
  341|  2.42M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  2.42M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  2.42M|    constexpr bool scannable_char =
  345|  2.42M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  2.42M|    static_assert(scannable_char,
  347|  2.42M|                  "Cannot scan an argument of an unsupported character "
  348|  2.42M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  2.42M|    constexpr bool scannable_const =
  351|  2.42M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  2.42M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  2.42M|    constexpr bool scannable_disabled =
  355|  2.42M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  2.42M|    static_assert(scannable_disabled,
  357|  2.42M|                  "Cannot scan an argument that has been disabled by "
  358|  2.42M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  2.42M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  2.42M|    static_assert(
  362|  2.42M|        scannable,
  363|  2.42M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  2.42M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  2.42M|    return arg_value{arg};
  367|  2.42M|}
_ZN3scn2v26detail9arg_valueC2IiEERT_:
  159|  2.42M|    {
  160|  2.42M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJiEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  1.07M|    {
  647|  1.07M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJiEE4argsEv:
  553|   987k|    {
  554|   987k|        return m_args;
  555|   987k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEiEENS0_14basic_scan_argIT_EERT0_:
  399|   106k|{
  400|   106k|    check_scan_arg_types<T>();
  401|       |
  402|   106k|    basic_scan_arg<Context> arg;
  403|   106k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|   106k|    arg.m_value = make_value<Context>(value);
  405|   106k|    return arg;
  406|   106k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJjEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   910k|{
  619|   910k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   910k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   910k|    static_cast<    \
  |  |  247|   910k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   910k|}
_ZN3scn2v26detail20check_scan_arg_typesIJjEEEvv:
  386|  2.10M|{
  387|  2.10M|    static_assert(
  388|  2.10M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  2.10M|        "Scan argument types must be default constructible");
  390|  2.10M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  2.10M|                  "Scan argument types must be Destructible");
  392|  2.10M|    static_assert(
  393|  2.10M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  2.10M|        "Scan argument types must not be references");
  395|  2.10M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJjEEC2EONSt3__15tupleIJjEEE:
  563|   910k|    {
  564|   910k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJjEE15make_data_arrayIJjEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   910k|    {
  574|   910k|        return {
  575|   910k|            detail::make_arg<base::is_packed, Context,
  576|   910k|                             detail::mapped_type_constant<
  577|   910k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   910k|                args)...};
  579|   910k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE8EjvEENS1_9arg_valueERT2_:
  414|   910k|{
  415|   910k|    return make_value<Context>(value);
  416|   910k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEjEEDaRT0_:
  371|  1.00M|{
  372|  1.00M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  1.00M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  1.00M|                                  needs_context_tag>) {
  376|  1.00M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  1.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  1.00M|    }
  378|  1.00M|    else {
  379|  1.00M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  1.00M|            value, context_tag<Context>{}));
  381|  1.00M|    }
  382|  1.00M|}
_ZN3scn2v26detail10arg_mapperIcE3mapERj:
  216|  1.00M|    {                                                                        \
  217|  1.00M|        return val;                                                          \
  218|  1.00M|    }
_ZN3scn2v26detail15make_value_implIRjEEDaOT_:
  340|  2.10M|{
  341|  2.10M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  2.10M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  2.10M|    constexpr bool scannable_char =
  345|  2.10M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  2.10M|    static_assert(scannable_char,
  347|  2.10M|                  "Cannot scan an argument of an unsupported character "
  348|  2.10M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  2.10M|    constexpr bool scannable_const =
  351|  2.10M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  2.10M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  2.10M|    constexpr bool scannable_disabled =
  355|  2.10M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  2.10M|    static_assert(scannable_disabled,
  357|  2.10M|                  "Cannot scan an argument that has been disabled by "
  358|  2.10M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  2.10M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  2.10M|    static_assert(
  362|  2.10M|        scannable,
  363|  2.10M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  2.10M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  2.10M|    return arg_value{arg};
  367|  2.10M|}
_ZN3scn2v26detail9arg_valueC2IjEERT_:
  159|  2.10M|    {
  160|  2.10M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJjEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   910k|    {
  647|   910k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJjEE4argsEv:
  553|   818k|    {
  554|   818k|        return m_args;
  555|   818k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEjEENS0_14basic_scan_argIT_EERT0_:
  399|  89.4k|{
  400|  89.4k|    check_scan_arg_types<T>();
  401|       |
  402|  89.4k|    basic_scan_arg<Context> arg;
  403|  89.4k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  89.4k|    arg.m_value = make_value<Context>(value);
  405|  89.4k|    return arg;
  406|  89.4k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJxEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  1.12M|{
  619|  1.12M|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  1.12M|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  1.12M|    static_cast<    \
  |  |  247|  1.12M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  1.12M|}
_ZN3scn2v26detail20check_scan_arg_typesIJxEEEvv:
  386|  2.52M|{
  387|  2.52M|    static_assert(
  388|  2.52M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  2.52M|        "Scan argument types must be default constructible");
  390|  2.52M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  2.52M|                  "Scan argument types must be Destructible");
  392|  2.52M|    static_assert(
  393|  2.52M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  2.52M|        "Scan argument types must not be references");
  395|  2.52M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJxEEC2EONSt3__15tupleIJxEEE:
  563|  1.12M|    {
  564|  1.12M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJxEE15make_data_arrayIJxEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  1.12M|    {
  574|  1.12M|        return {
  575|  1.12M|            detail::make_arg<base::is_packed, Context,
  576|  1.12M|                             detail::mapped_type_constant<
  577|  1.12M|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  1.12M|                args)...};
  579|  1.12M|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE5ExvEENS1_9arg_valueERT2_:
  414|  1.12M|{
  415|  1.12M|    return make_value<Context>(value);
  416|  1.12M|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEExEEDaRT0_:
  371|  1.23M|{
  372|  1.23M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  1.23M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  1.23M|                                  needs_context_tag>) {
  376|  1.23M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  1.23M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  1.23M|    }
  378|  1.23M|    else {
  379|  1.23M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  1.23M|            value, context_tag<Context>{}));
  381|  1.23M|    }
  382|  1.23M|}
_ZN3scn2v26detail10arg_mapperIcE3mapERx:
  216|  1.23M|    {                                                                        \
  217|  1.23M|        return val;                                                          \
  218|  1.23M|    }
_ZN3scn2v26detail15make_value_implIRxEEDaOT_:
  340|  2.52M|{
  341|  2.52M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  2.52M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  2.52M|    constexpr bool scannable_char =
  345|  2.52M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  2.52M|    static_assert(scannable_char,
  347|  2.52M|                  "Cannot scan an argument of an unsupported character "
  348|  2.52M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  2.52M|    constexpr bool scannable_const =
  351|  2.52M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  2.52M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  2.52M|    constexpr bool scannable_disabled =
  355|  2.52M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  2.52M|    static_assert(scannable_disabled,
  357|  2.52M|                  "Cannot scan an argument that has been disabled by "
  358|  2.52M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  2.52M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  2.52M|    static_assert(
  362|  2.52M|        scannable,
  363|  2.52M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  2.52M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  2.52M|    return arg_value{arg};
  367|  2.52M|}
_ZN3scn2v26detail9arg_valueC2IxEERT_:
  159|  2.52M|    {
  160|  2.52M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJxEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  1.12M|    {
  647|  1.12M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJxEE4argsEv:
  553|  1.03M|    {
  554|  1.03M|        return m_args;
  555|  1.03M|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEExEENS0_14basic_scan_argIT_EERT0_:
  399|   111k|{
  400|   111k|    check_scan_arg_types<T>();
  401|       |
  402|   111k|    basic_scan_arg<Context> arg;
  403|   111k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|   111k|    arg.m_value = make_value<Context>(value);
  405|   111k|    return arg;
  406|   111k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJyEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   941k|{
  619|   941k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   941k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   941k|    static_cast<    \
  |  |  247|   941k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   941k|}
_ZN3scn2v26detail20check_scan_arg_typesIJyEEEvv:
  386|  2.17M|{
  387|  2.17M|    static_assert(
  388|  2.17M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  2.17M|        "Scan argument types must be default constructible");
  390|  2.17M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  2.17M|                  "Scan argument types must be Destructible");
  392|  2.17M|    static_assert(
  393|  2.17M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  2.17M|        "Scan argument types must not be references");
  395|  2.17M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJyEEC2EONSt3__15tupleIJyEEE:
  563|   941k|    {
  564|   941k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJyEE15make_data_arrayIJyEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   941k|    {
  574|   941k|        return {
  575|   941k|            detail::make_arg<base::is_packed, Context,
  576|   941k|                             detail::mapped_type_constant<
  577|   941k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   941k|                args)...};
  579|   941k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE10EyvEENS1_9arg_valueERT2_:
  414|   941k|{
  415|   941k|    return make_value<Context>(value);
  416|   941k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEyEEDaRT0_:
  371|  1.03M|{
  372|  1.03M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  1.03M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  1.03M|                                  needs_context_tag>) {
  376|  1.03M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  1.03M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  1.03M|    }
  378|  1.03M|    else {
  379|  1.03M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  1.03M|            value, context_tag<Context>{}));
  381|  1.03M|    }
  382|  1.03M|}
_ZN3scn2v26detail10arg_mapperIcE3mapERy:
  216|  1.03M|    {                                                                        \
  217|  1.03M|        return val;                                                          \
  218|  1.03M|    }
_ZN3scn2v26detail15make_value_implIRyEEDaOT_:
  340|  2.17M|{
  341|  2.17M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  2.17M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  2.17M|    constexpr bool scannable_char =
  345|  2.17M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  2.17M|    static_assert(scannable_char,
  347|  2.17M|                  "Cannot scan an argument of an unsupported character "
  348|  2.17M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  2.17M|    constexpr bool scannable_const =
  351|  2.17M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  2.17M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  2.17M|    constexpr bool scannable_disabled =
  355|  2.17M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  2.17M|    static_assert(scannable_disabled,
  357|  2.17M|                  "Cannot scan an argument that has been disabled by "
  358|  2.17M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  2.17M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  2.17M|    static_assert(
  362|  2.17M|        scannable,
  363|  2.17M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  2.17M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  2.17M|    return arg_value{arg};
  367|  2.17M|}
_ZN3scn2v26detail9arg_valueC2IyEERT_:
  159|  2.17M|    {
  160|  2.17M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJyEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   941k|    {
  647|   941k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJyEE4argsEv:
  553|   849k|    {
  554|   849k|        return m_args;
  555|   849k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEyEENS0_14basic_scan_argIT_EERT0_:
  399|  92.7k|{
  400|  92.7k|    check_scan_arg_types<T>();
  401|       |
  402|  92.7k|    basic_scan_arg<Context> arg;
  403|  92.7k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  92.7k|    arg.m_value = make_value<Context>(value);
  405|  92.7k|    return arg;
  406|  92.7k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJaEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   823k|{
  619|   823k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   823k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   823k|    static_cast<    \
  |  |  247|   823k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   823k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJaEEC2EONSt3__15tupleIJaEEE:
  563|   823k|    {
  564|   823k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJaEE15make_data_arrayIJaEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   823k|    {
  574|   823k|        return {
  575|   823k|            detail::make_arg<base::is_packed, Context,
  576|   823k|                             detail::mapped_type_constant<
  577|   823k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   823k|                args)...};
  579|   823k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE1EavEENS1_9arg_valueERT2_:
  414|   823k|{
  415|   823k|    return make_value<Context>(value);
  416|   823k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEaEEDaRT0_:
  371|   902k|{
  372|   902k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   902k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   902k|                                  needs_context_tag>) {
  376|   902k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   902k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   902k|    }
  378|   902k|    else {
  379|   902k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   902k|            value, context_tag<Context>{}));
  381|   902k|    }
  382|   902k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERa:
  216|   902k|    {                                                                        \
  217|   902k|        return val;                                                          \
  218|   902k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJaEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   823k|    {
  647|   823k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPNS0_6detail9arg_valueE:
  693|  6.04M|    {
  694|  6.04M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJaEE4argsEv:
  553|   547k|    {
  554|   547k|        return m_args;
  555|   547k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEaEENS0_14basic_scan_argIT_EERT0_:
  399|  78.6k|{
  400|  78.6k|    check_scan_arg_types<T>();
  401|       |
  402|  78.6k|    basic_scan_arg<Context> arg;
  403|  78.6k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  78.6k|    arg.m_value = make_value<Context>(value);
  405|  78.6k|    return arg;
  406|  78.6k|}
_ZN3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
  476|  6.59M|    constexpr basic_scan_arg() = default;
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJhEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   855k|{
  619|   855k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   855k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   855k|    static_cast<    \
  |  |  247|   855k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   855k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJhEEC2EONSt3__15tupleIJhEEE:
  563|   855k|    {
  564|   855k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJhEE15make_data_arrayIJhEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   855k|    {
  574|   855k|        return {
  575|   855k|            detail::make_arg<base::is_packed, Context,
  576|   855k|                             detail::mapped_type_constant<
  577|   855k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   855k|                args)...};
  579|   855k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE6EhvEENS1_9arg_valueERT2_:
  414|   855k|{
  415|   855k|    return make_value<Context>(value);
  416|   855k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEhEEDaRT0_:
  371|   935k|{
  372|   935k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   935k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   935k|                                  needs_context_tag>) {
  376|   935k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   935k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   935k|    }
  378|   935k|    else {
  379|   935k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   935k|            value, context_tag<Context>{}));
  381|   935k|    }
  382|   935k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERh:
  216|   935k|    {                                                                        \
  217|   935k|        return val;                                                          \
  218|   935k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJhEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   855k|    {
  647|   855k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJhEE4argsEv:
  553|   578k|    {
  554|   578k|        return m_args;
  555|   578k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEhEENS0_14basic_scan_argIT_EERT0_:
  399|  80.0k|{
  400|  80.0k|    check_scan_arg_types<T>();
  401|       |
  402|  80.0k|    basic_scan_arg<Context> arg;
  403|  80.0k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  80.0k|    arg.m_value = make_value<Context>(value);
  405|  80.0k|    return arg;
  406|  80.0k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJiEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  1.13M|{
  619|  1.13M|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  1.13M|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  1.13M|    static_cast<    \
  |  |  247|  1.13M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  1.13M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJiEEC2EONSt3__15tupleIJiEEE:
  563|  1.13M|    {
  564|  1.13M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJiEE15make_data_arrayIJiEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  1.13M|    {
  574|  1.13M|        return {
  575|  1.13M|            detail::make_arg<base::is_packed, Context,
  576|  1.13M|                             detail::mapped_type_constant<
  577|  1.13M|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  1.13M|                args)...};
  579|  1.13M|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE3EivEENS1_9arg_valueERT2_:
  414|  1.13M|{
  415|  1.13M|    return make_value<Context>(value);
  416|  1.13M|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEiEEDaRT0_:
  371|  1.23M|{
  372|  1.23M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  1.23M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  1.23M|                                  needs_context_tag>) {
  376|  1.23M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  1.23M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  1.23M|    }
  378|  1.23M|    else {
  379|  1.23M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  1.23M|            value, context_tag<Context>{}));
  381|  1.23M|    }
  382|  1.23M|}
_ZN3scn2v26detail10arg_mapperIwE3mapERi:
  216|  1.23M|    {                                                                        \
  217|  1.23M|        return val;                                                          \
  218|  1.23M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJiEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  1.13M|    {
  647|  1.13M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJiEE4argsEv:
  553|   857k|    {
  554|   857k|        return m_args;
  555|   857k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEiEENS0_14basic_scan_argIT_EERT0_:
  399|   100k|{
  400|   100k|    check_scan_arg_types<T>();
  401|       |
  402|   100k|    basic_scan_arg<Context> arg;
  403|   100k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|   100k|    arg.m_value = make_value<Context>(value);
  405|   100k|    return arg;
  406|   100k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJjEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  1.01M|{
  619|  1.01M|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  1.01M|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  1.01M|    static_cast<    \
  |  |  247|  1.01M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  1.01M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJjEEC2EONSt3__15tupleIJjEEE:
  563|  1.01M|    {
  564|  1.01M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJjEE15make_data_arrayIJjEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  1.01M|    {
  574|  1.01M|        return {
  575|  1.01M|            detail::make_arg<base::is_packed, Context,
  576|  1.01M|                             detail::mapped_type_constant<
  577|  1.01M|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  1.01M|                args)...};
  579|  1.01M|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE8EjvEENS1_9arg_valueERT2_:
  414|  1.01M|{
  415|  1.01M|    return make_value<Context>(value);
  416|  1.01M|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEjEEDaRT0_:
  371|  1.10M|{
  372|  1.10M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  1.10M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  1.10M|                                  needs_context_tag>) {
  376|  1.10M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  1.10M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  1.10M|    }
  378|  1.10M|    else {
  379|  1.10M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  1.10M|            value, context_tag<Context>{}));
  381|  1.10M|    }
  382|  1.10M|}
_ZN3scn2v26detail10arg_mapperIwE3mapERj:
  216|  1.10M|    {                                                                        \
  217|  1.10M|        return val;                                                          \
  218|  1.10M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJjEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  1.01M|    {
  647|  1.01M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJjEE4argsEv:
  553|   738k|    {
  554|   738k|        return m_args;
  555|   738k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEjEENS0_14basic_scan_argIT_EERT0_:
  399|  89.2k|{
  400|  89.2k|    check_scan_arg_types<T>();
  401|       |
  402|  89.2k|    basic_scan_arg<Context> arg;
  403|  89.2k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  89.2k|    arg.m_value = make_value<Context>(value);
  405|  89.2k|    return arg;
  406|  89.2k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJxEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  1.17M|{
  619|  1.17M|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  1.17M|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  1.17M|    static_cast<    \
  |  |  247|  1.17M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  1.17M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJxEEC2EONSt3__15tupleIJxEEE:
  563|  1.17M|    {
  564|  1.17M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJxEE15make_data_arrayIJxEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  1.17M|    {
  574|  1.17M|        return {
  575|  1.17M|            detail::make_arg<base::is_packed, Context,
  576|  1.17M|                             detail::mapped_type_constant<
  577|  1.17M|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  1.17M|                args)...};
  579|  1.17M|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE5ExvEENS1_9arg_valueERT2_:
  414|  1.17M|{
  415|  1.17M|    return make_value<Context>(value);
  416|  1.17M|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEExEEDaRT0_:
  371|  1.28M|{
  372|  1.28M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  1.28M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  1.28M|                                  needs_context_tag>) {
  376|  1.28M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  1.28M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  1.28M|    }
  378|  1.28M|    else {
  379|  1.28M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  1.28M|            value, context_tag<Context>{}));
  381|  1.28M|    }
  382|  1.28M|}
_ZN3scn2v26detail10arg_mapperIwE3mapERx:
  216|  1.28M|    {                                                                        \
  217|  1.28M|        return val;                                                          \
  218|  1.28M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJxEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  1.17M|    {
  647|  1.17M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJxEE4argsEv:
  553|   899k|    {
  554|   899k|        return m_args;
  555|   899k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEExEENS0_14basic_scan_argIT_EERT0_:
  399|   105k|{
  400|   105k|    check_scan_arg_types<T>();
  401|       |
  402|   105k|    basic_scan_arg<Context> arg;
  403|   105k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|   105k|    arg.m_value = make_value<Context>(value);
  405|   105k|    return arg;
  406|   105k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJyEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  1.04M|{
  619|  1.04M|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  1.04M|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  1.04M|    static_cast<    \
  |  |  247|  1.04M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  1.04M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJyEEC2EONSt3__15tupleIJyEEE:
  563|  1.04M|    {
  564|  1.04M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJyEE15make_data_arrayIJyEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  1.04M|    {
  574|  1.04M|        return {
  575|  1.04M|            detail::make_arg<base::is_packed, Context,
  576|  1.04M|                             detail::mapped_type_constant<
  577|  1.04M|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  1.04M|                args)...};
  579|  1.04M|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE10EyvEENS1_9arg_valueERT2_:
  414|  1.04M|{
  415|  1.04M|    return make_value<Context>(value);
  416|  1.04M|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEyEEDaRT0_:
  371|  1.13M|{
  372|  1.13M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  1.13M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  1.13M|                                  needs_context_tag>) {
  376|  1.13M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  1.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  1.13M|    }
  378|  1.13M|    else {
  379|  1.13M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  1.13M|            value, context_tag<Context>{}));
  381|  1.13M|    }
  382|  1.13M|}
_ZN3scn2v26detail10arg_mapperIwE3mapERy:
  216|  1.13M|    {                                                                        \
  217|  1.13M|        return val;                                                          \
  218|  1.13M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJyEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  1.04M|    {
  647|  1.04M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJyEE4argsEv:
  553|   767k|    {
  554|   767k|        return m_args;
  555|   767k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEyEENS0_14basic_scan_argIT_EERT0_:
  399|  92.3k|{
  400|  92.3k|    check_scan_arg_types<T>();
  401|       |
  402|  92.3k|    basic_scan_arg<Context> arg;
  403|  92.3k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  92.3k|    arg.m_value = make_value<Context>(value);
  405|  92.3k|    return arg;
  406|  92.3k|}
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
  681|  5.54M|    {
  682|  5.54M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  5.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.54M]
  |  |  ------------------
  ------------------
  683|      0|            return max_size();
  684|      0|        }
  685|       |
  686|  5.54M|        return static_cast<std::size_t>(m_desc &
  687|  5.54M|                                        ((1 << detail::packed_arg_bits) - 1));
  688|  5.54M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
  701|  11.0M|    {
  702|  11.0M|        return (m_desc & detail::is_unpacked_bit) == 0;
  703|  11.0M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
  654|  5.54M|    {
  655|  5.54M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  5.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.54M]
  |  |  ------------------
  ------------------
  656|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  657|      0|                return m_args[id];
  658|      0|            }
  659|      0|            return {};
  660|      0|        }
  661|       |
  662|  5.54M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  153|  5.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.54M]
  |  |  ------------------
  ------------------
  663|      0|            return {};
  664|      0|        }
  665|       |
  666|  5.54M|        const auto t = type(id);
  667|  5.54M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  153|  5.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.54M]
  |  |  ------------------
  ------------------
  668|      0|            return {};
  669|      0|        }
  670|       |
  671|  5.54M|        basic_scan_arg<Context> arg;
  672|  5.54M|        arg.m_type = t;
  673|  5.54M|        arg.m_value = m_values[id];
  674|  5.54M|        return arg;
  675|  5.54M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
  706|  5.54M|    {
  707|       |        // First (0th) index is size, types start after that
  708|  5.54M|        const auto shift = (index + 1) * detail::packed_arg_bits;
  709|  5.54M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
  710|  5.54M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
  711|  5.54M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
  482|  10.3M|    {
  483|  10.3M|        return m_type != detail::arg_type::none_type;
  484|  10.3M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
  487|  8.85M|    {
  488|  8.85M|        return m_type;
  489|  8.85M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
  681|  6.04M|    {
  682|  6.04M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  6.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 6.04M]
  |  |  ------------------
  ------------------
  683|      0|            return max_size();
  684|      0|        }
  685|       |
  686|  6.04M|        return static_cast<std::size_t>(m_desc &
  687|  6.04M|                                        ((1 << detail::packed_arg_bits) - 1));
  688|  6.04M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
  701|  12.0M|    {
  702|  12.0M|        return (m_desc & detail::is_unpacked_bit) == 0;
  703|  12.0M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
  654|  6.04M|    {
  655|  6.04M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  6.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 6.04M]
  |  |  ------------------
  ------------------
  656|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  657|      0|                return m_args[id];
  658|      0|            }
  659|      0|            return {};
  660|      0|        }
  661|       |
  662|  6.04M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  153|  6.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 6.04M]
  |  |  ------------------
  ------------------
  663|      0|            return {};
  664|      0|        }
  665|       |
  666|  6.04M|        const auto t = type(id);
  667|  6.04M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  153|  6.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 6.04M]
  |  |  ------------------
  ------------------
  668|      0|            return {};
  669|      0|        }
  670|       |
  671|  6.04M|        basic_scan_arg<Context> arg;
  672|  6.04M|        arg.m_type = t;
  673|  6.04M|        arg.m_value = m_values[id];
  674|  6.04M|        return arg;
  675|  6.04M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
  706|  6.04M|    {
  707|       |        // First (0th) index is size, types start after that
  708|  6.04M|        const auto shift = (index + 1) * detail::packed_arg_bits;
  709|  6.04M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
  710|  6.04M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
  711|  6.04M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
  482|  11.0M|    {
  483|  11.0M|        return m_type != detail::arg_type::none_type;
  484|  11.0M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
  487|  9.91M|    {
  488|  9.91M|        return m_type;
  489|  9.91M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
  634|   558k|    constexpr basic_scan_args() = default;
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
  634|   546k|    constexpr basic_scan_args() = default;

_ZN3scn2v218basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
  108|   276k|    {
  109|   276k|    }
_ZN3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
   59|  4.42M|    {
   60|  4.42M|    }
_ZNK3scn2v218basic_scan_contextIcE5beginEv:
  123|   498k|    {
  124|   498k|        return m_current;
  125|   498k|    }
_ZNK3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
   42|  4.42M|    {
   43|  4.42M|        return m_args.get(id);
   44|  4.42M|    }
_ZNK3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
   52|  4.26M|    {
   53|  4.26M|        return m_locale;
   54|  4.26M|    }
_ZNK3scn2v218basic_scan_contextIcE3endEv:
  131|   193k|    {
  132|   193k|        return ranges_std::default_sentinel;
  133|   193k|    }
_ZN3scn2v218basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
  145|  27.6k|    {
  146|  27.6k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|  27.6k|    static_cast<    \
  |  |  247|  27.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  147|  27.6k|    }
_ZNK3scn2v218basic_scan_contextIcE5rangeEv:
  139|   193k|    {
  140|   193k|        return ranges::subrange{begin(), end()};
  141|   193k|    }
_ZN3scn2v218basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
  108|   802k|    {
  109|   802k|    }
_ZN3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
   59|  4.95M|    {
   60|  4.95M|    }
_ZNK3scn2v218basic_scan_contextIwE5beginEv:
  123|  1.41M|    {
  124|  1.41M|        return m_current;
  125|  1.41M|    }
_ZNK3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
   42|  4.95M|    {
   43|  4.95M|        return m_args.get(id);
   44|  4.95M|    }
_ZNK3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
   52|  4.45M|    {
   53|  4.45M|        return m_locale;
   54|  4.45M|    }
_ZNK3scn2v218basic_scan_contextIwE3endEv:
  131|   553k|    {
  132|   553k|        return ranges_std::default_sentinel;
  133|   553k|    }
_ZN3scn2v218basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
  145|  55.3k|    {
  146|  55.3k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|  55.3k|    static_cast<    \
  |  |  247|  55.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  147|  55.3k|    }
_ZNK3scn2v218basic_scan_contextIwE5rangeEv:
  139|   553k|    {
  140|   553k|        return ranges::subrange{begin(), end()};
  141|   553k|    }

_ZN3scn2v210scan_errorC2ENS1_4codeEPKc:
   68|  3.21M|    {
   69|  3.21M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  227|  3.21M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   70|  3.21M|    }
_ZNK3scn2v210scan_errorcvbEv:
   74|  45.1M|    {
   75|  45.1M|        return m_code == good;
   76|  45.1M|    }
_ZNK3scn2v210scan_error4codeEv:
   85|  1.32M|    {
   86|  1.32M|        return m_code;
   87|  1.32M|    }
_ZN3scn2v2eqENS0_10scan_errorENS1_4codeE:
  110|  1.32M|{
  111|  1.32M|    return a.code() == b;
  112|  1.32M|}
_ZN3scn2v2neENS0_10scan_errorENS1_4codeE:
  115|  1.32M|{
  116|  1.32M|    return !(a == b);
  117|  1.32M|}
_ZN3scn2v210scan_errorC2Ev:
   62|  27.4M|    constexpr scan_error() SCN_NOEXCEPT = default;

_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJaEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   683k|    {
  675|   683k|        return m_str;
  676|   683k|    }
_ZN3scn2v214runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  384|  5.54M|{
  385|  5.54M|    return s;
  386|  5.54M|}
_ZN3scn2v26detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
  361|  5.54M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJaEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   683k|    {
  671|   683k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJhEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   698k|    {
  675|   698k|        return m_str;
  676|   698k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJhEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   698k|    {
  671|   698k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJiEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|  1.02M|    {
  675|  1.02M|        return m_str;
  676|  1.02M|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  1.02M|    {
  671|  1.02M|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJjEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   860k|    {
  675|   860k|        return m_str;
  676|   860k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   860k|    {
  671|   860k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJxEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|  1.07M|    {
  675|  1.07M|        return m_str;
  676|  1.07M|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJxEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  1.07M|    {
  671|  1.07M|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJyEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   890k|    {
  675|   890k|        return m_str;
  676|   890k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJyEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   890k|    {
  671|   890k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJaEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  50.7k|    {
  675|  50.7k|        return m_str;
  676|  50.7k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJaEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  50.7k|    {
  671|  50.7k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJhEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  50.7k|    {
  675|  50.7k|        return m_str;
  676|  50.7k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJhEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  50.7k|    {
  671|  50.7k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJiEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  50.7k|    {
  675|  50.7k|        return m_str;
  676|  50.7k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  50.7k|    {
  671|  50.7k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJjEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  50.7k|    {
  675|  50.7k|        return m_str;
  676|  50.7k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  50.7k|    {
  671|  50.7k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJxEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  50.7k|    {
  675|  50.7k|        return m_str;
  676|  50.7k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJxEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  50.7k|    {
  671|  50.7k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJyEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  50.7k|    {
  675|  50.7k|        return m_str;
  676|  50.7k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJyEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  50.7k|    {
  671|  50.7k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJaEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   685k|    {
  675|   685k|        return m_str;
  676|   685k|    }
_ZN3scn2v214runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
  389|  6.04M|{
  390|  6.04M|    return s;
  391|  6.04M|}
_ZN3scn2v26detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
  361|  6.04M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJaEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   685k|    {
  671|   685k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJhEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   717k|    {
  675|   717k|        return m_str;
  676|   717k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJhEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   717k|    {
  671|   717k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJiEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   981k|    {
  675|   981k|        return m_str;
  676|   981k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   981k|    {
  671|   981k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJjEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   862k|    {
  675|   862k|        return m_str;
  676|   862k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   862k|    {
  671|   862k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJxEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|  1.02M|    {
  675|  1.02M|        return m_str;
  676|  1.02M|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJxEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  1.02M|    {
  671|  1.02M|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJyEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   891k|    {
  675|   891k|        return m_str;
  676|   891k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJyEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   891k|    {
  671|   891k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJaEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   138k|    {
  675|   138k|        return m_str;
  676|   138k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJaEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   138k|    {
  671|   138k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJhEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   138k|    {
  675|   138k|        return m_str;
  676|   138k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJhEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   138k|    {
  671|   138k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJiEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   152k|    {
  675|   152k|        return m_str;
  676|   152k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   152k|    {
  671|   152k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJjEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   152k|    {
  675|   152k|        return m_str;
  676|   152k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   152k|    {
  671|   152k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJxEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   152k|    {
  675|   152k|        return m_str;
  676|   152k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJxEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   152k|    {
  671|   152k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJyEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   152k|    {
  675|   152k|        return m_str;
  676|   152k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJyEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   152k|    {
  671|   152k|    }

_ZNK3scn2v26detail12format_specs8get_baseEi:
  195|  8.67M|    {
  196|  8.67M|        SCN_GCC_COMPAT_PUSH
  197|  8.67M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
  198|  8.67M|        switch (type) {
  199|  2.19M|            case presentation_type::none:
  ------------------
  |  Branch (199:13): [True: 2.19M, False: 6.47M]
  ------------------
  200|  4.39M|            case presentation_type::int_generic:
  ------------------
  |  Branch (200:13): [True: 2.19M, False: 6.47M]
  ------------------
  201|  4.39M|                return default_base;
  202|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (202:13): [True: 0, False: 8.67M]
  ------------------
  203|      0|                return arbitrary_base;
  204|       |
  205|   383k|            case presentation_type::int_binary:
  ------------------
  |  Branch (205:13): [True: 383k, False: 8.28M]
  ------------------
  206|   383k|                return 2;
  207|   599k|            case presentation_type::int_octal:
  ------------------
  |  Branch (207:13): [True: 599k, False: 8.07M]
  ------------------
  208|   599k|                return 8;
  209|  1.56M|            case presentation_type::int_decimal:
  ------------------
  |  Branch (209:13): [True: 1.56M, False: 7.10M]
  ------------------
  210|  1.56M|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (210:13): [True: 0, False: 8.67M]
  ------------------
  211|  1.56M|                return 10;
  212|  1.72M|            case presentation_type::int_hex:
  ------------------
  |  Branch (212:13): [True: 1.72M, False: 6.94M]
  ------------------
  213|  1.72M|                return 16;
  214|       |
  215|      0|            default:
  ------------------
  |  Branch (215:13): [True: 0, False: 8.67M]
  ------------------
  216|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  217|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  218|  8.67M|        }
  219|  8.67M|        SCN_GCC_COMPAT_POP
  220|  8.67M|    }
_ZN3scn2v26detail12specs_setterC2ERNS1_12format_specsE:
  232|  9.38M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v26detail12specs_setter12on_localizedEv:
  244|  2.20M|    {
  245|  2.20M|        if constexpr (!SCN_DISABLE_LOCALE) {
  ------------------
  |  |  126|  2.20M|#define SCN_DISABLE_LOCALE 0
  ------------------
  |  Branch (245:23): [Folded - Ignored]
  ------------------
  246|  2.20M|            m_specs.localized = true;
  247|  2.20M|        }
  248|      0|        else {
  249|      0|            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
  250|      0|        }
  251|  2.20M|    }
_ZN3scn2v26detail12specs_setter7on_typeENS1_17presentation_typeE:
  259|  6.73M|    {
  260|  6.73M|        m_specs.type = type;
  261|  6.73M|    }
_ZN3scn2v26detail12specs_setter8on_errorEPKc:
  321|   442k|    {
  322|   442k|        SCN_UNLIKELY_ATTR
  323|   442k|        m_error = scan_error{scan_error::invalid_format_string, msg};
  324|   442k|    }
_ZNK3scn2v26detail12specs_settercvbEv:
  332|  8.94M|    {
  333|  8.94M|        return static_cast<bool>(m_error);
  334|  8.94M|    }
_ZN3scn2v26detail25get_category_for_arg_typeENS1_8arg_typeE:
  980|  2.20M|{
  981|  2.20M|    switch (type) {
  982|      0|        case arg_type::none_type:
  ------------------
  |  Branch (982:9): [True: 0, False: 2.20M]
  ------------------
  983|      0|            return arg_type_category::none;
  984|       |
  985|   315k|        case arg_type::schar_type:
  ------------------
  |  Branch (985:9): [True: 315k, False: 1.89M]
  ------------------
  986|   315k|        case arg_type::short_type:
  ------------------
  |  Branch (986:9): [True: 0, False: 2.20M]
  ------------------
  987|   728k|        case arg_type::int_type:
  ------------------
  |  Branch (987:9): [True: 413k, False: 1.79M]
  ------------------
  988|   728k|        case arg_type::long_type:
  ------------------
  |  Branch (988:9): [True: 0, False: 2.20M]
  ------------------
  989|  1.16M|        case arg_type::llong_type:
  ------------------
  |  Branch (989:9): [True: 433k, False: 1.77M]
  ------------------
  990|  1.16M|            return arg_type_category::integer;
  991|       |
  992|   317k|        case arg_type::uchar_type:
  ------------------
  |  Branch (992:9): [True: 317k, False: 1.88M]
  ------------------
  993|   317k|        case arg_type::ushort_type:
  ------------------
  |  Branch (993:9): [True: 0, False: 2.20M]
  ------------------
  994|   674k|        case arg_type::uint_type:
  ------------------
  |  Branch (994:9): [True: 356k, False: 1.84M]
  ------------------
  995|   674k|        case arg_type::ulong_type:
  ------------------
  |  Branch (995:9): [True: 0, False: 2.20M]
  ------------------
  996|  1.04M|        case arg_type::ullong_type:
  ------------------
  |  Branch (996:9): [True: 369k, False: 1.83M]
  ------------------
  997|  1.04M|            return arg_type_category::unsigned_integer;
  998|       |
  999|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (999:9): [True: 0, False: 2.20M]
  ------------------
 1000|      0|            return arg_type_category::pointer;
 1001|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (1001:9): [True: 0, False: 2.20M]
  ------------------
 1002|      0|            return arg_type_category::boolean;
 1003|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (1003:9): [True: 0, False: 2.20M]
  ------------------
 1004|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (1004:9): [True: 0, False: 2.20M]
  ------------------
 1005|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (1005:9): [True: 0, False: 2.20M]
  ------------------
 1006|      0|            return arg_type_category::character;
 1007|       |
 1008|      0|        case arg_type::float_type:
  ------------------
  |  Branch (1008:9): [True: 0, False: 2.20M]
  ------------------
 1009|      0|        case arg_type::double_type:
  ------------------
  |  Branch (1009:9): [True: 0, False: 2.20M]
  ------------------
 1010|      0|        case arg_type::ldouble_type:
  ------------------
  |  Branch (1010:9): [True: 0, False: 2.20M]
  ------------------
 1011|      0|            return arg_type_category::floating;
 1012|       |
 1013|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (1013:9): [True: 0, False: 2.20M]
  ------------------
 1014|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (1014:9): [True: 0, False: 2.20M]
  ------------------
 1015|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (1015:9): [True: 0, False: 2.20M]
  ------------------
 1016|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (1016:9): [True: 0, False: 2.20M]
  ------------------
 1017|      0|            return arg_type_category::string;
 1018|       |
 1019|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (1019:9): [True: 0, False: 2.20M]
  ------------------
 1020|      0|            return arg_type_category::custom;
 1021|       |
 1022|      0|            SCN_CLANG_PUSH
 1023|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 1024|      0|        default:
  ------------------
  |  Branch (1024:9): [True: 0, False: 2.20M]
  ------------------
 1025|      0|            SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1026|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1027|  2.20M|            SCN_CLANG_POP
 1028|  2.20M|    }
 1029|       |
 1030|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1031|  2.20M|}
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  961|  4.15M|{
  962|  4.15M|    parse_format_string_impl<IsConstexpr>(format, handler);
  963|  4.15M|    handler.check_args_exhausted();
  964|  4.15M|    return handler.get_error();
  965|  4.15M|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  927|  4.15M|{
  928|       |    // TODO: memchr fast path with a larger (> 32) format string
  929|       |
  930|  4.15M|    auto begin = format.data();
  931|  4.15M|    auto it = begin;
  932|  4.15M|    const auto end = format.data() + format.size();
  933|       |
  934|  8.05M|    while (it != end) {
  ------------------
  |  Branch (934:12): [True: 4.15M, False: 3.90M]
  ------------------
  935|  4.15M|        const auto ch = *it++;
  936|  4.15M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (936:13): [True: 4.15M, False: 0]
  ------------------
  937|  4.15M|            handler.on_literal_text(begin, it - 1);
  938|       |
  939|  4.15M|            begin = it = parse_replacement_field(it - 1, end, handler);
  940|  4.15M|            if (!handler) {
  ------------------
  |  Branch (940:17): [True: 249k, False: 3.90M]
  ------------------
  941|   249k|                return;
  942|   249k|            }
  943|  4.15M|        }
  944|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (944:18): [True: 0, False: 0]
  ------------------
  945|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  946|      0|                handler.on_error("Unmatched '}' in format string");
  947|      0|                return;
  948|      0|            }
  949|       |
  950|      0|            handler.on_literal_text(begin, it);
  951|      0|            begin = ++it;
  952|      0|        }
  953|  4.15M|    }
  954|       |
  955|  3.90M|    handler.on_literal_text(begin, end);
  956|  3.90M|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
  859|  4.15M|{
  860|  4.15M|    struct id_adapter {
  861|  4.15M|        constexpr void operator()()
  862|  4.15M|        {
  863|  4.15M|            arg_id = handler.on_arg_id();
  864|  4.15M|        }
  865|  4.15M|        constexpr void operator()(std::size_t id)
  866|  4.15M|        {
  867|  4.15M|            arg_id = handler.on_arg_id(id);
  868|  4.15M|        }
  869|       |
  870|  4.15M|        constexpr void on_error(const char* msg)
  871|  4.15M|        {
  872|  4.15M|            SCN_UNLIKELY_ATTR
  873|  4.15M|            handler.on_error(msg);
  874|  4.15M|        }
  875|       |
  876|  4.15M|        Handler& handler;
  877|  4.15M|        std::size_t arg_id;
  878|  4.15M|    };
  879|       |
  880|  4.15M|    ++begin;
  881|  4.15M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  4.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.15M]
  |  |  ------------------
  ------------------
  882|      0|        handler.on_error("Unexpected end of replacement field");
  883|      0|        return begin;
  884|      0|    }
  885|       |
  886|  4.15M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (886:9): [True: 0, False: 4.15M]
  ------------------
  887|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  888|      0|    }
  889|  4.15M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (889:14): [True: 0, False: 4.15M]
  ------------------
  890|      0|        handler.on_literal_text(begin, begin + 1);
  891|      0|    }
  892|  4.15M|    else {
  893|  4.15M|        auto adapter = id_adapter{handler, 0};
  894|  4.15M|        begin = parse_arg_id(begin, end, adapter);
  895|       |
  896|  4.15M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  4.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.15M]
  |  |  ------------------
  ------------------
  897|      0|            handler.on_error("Missing '}' in format string");
  898|      0|            return begin;
  899|      0|        }
  900|       |
  901|  4.15M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (901:13): [True: 0, False: 4.15M]
  ------------------
  902|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  903|      0|        }
  904|  4.15M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (904:18): [True: 4.15M, False: 0]
  ------------------
  905|  4.15M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|  4.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.15M]
  |  |  ------------------
  ------------------
  906|      0|                handler.on_error("Unexpected end of replacement field");
  907|      0|                return begin;
  908|      0|            }
  909|  4.15M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  910|  4.15M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|  8.30M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 83.0k, False: 4.06M]
  |  |  |  Branch (153:45): [True: 0, False: 4.15M]
  |  |  |  Branch (153:45): [True: 83.0k, False: 4.06M]
  |  |  ------------------
  ------------------
  911|  83.0k|                handler.on_error("Unknown format specifier");
  912|  83.0k|                return begin;
  913|  83.0k|            }
  914|  4.15M|        }
  915|      0|        else {
  916|      0|            SCN_UNLIKELY_ATTR
  917|      0|            handler.on_error("Missing '}' in format string");
  918|      0|            return begin;
  919|      0|        }
  920|  4.15M|    }
  921|  4.06M|    return begin + 1;
  922|  4.15M|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|  4.15M|{
  400|  4.15M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  4.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|  4.15M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 4.15M, False: 0]
  |  Branch (401:26): [True: 0, False: 4.15M]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|  4.15M|    handler();
  406|  4.15M|    return begin;
  407|  4.15M|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  862|  4.15M|        {
  863|  4.15M|            arg_id = handler.on_arg_id();
  864|  4.15M|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 1039|  4.15M|    {
 1040|  4.15M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|  4.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1041|  4.15M|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  788|  4.15M|{
  789|  4.15M|    auto do_presentation = [&]() -> const CharT* {
  790|  4.15M|        if (*begin == CharT{'['}) {
  791|  4.15M|            auto set = parse_presentation_set(begin, end, handler);
  792|  4.15M|            if (SCN_UNLIKELY(set.size() <= 2)) {
  793|       |                // clang-format off
  794|  4.15M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  795|       |                // clang-format on
  796|  4.15M|                return begin;
  797|  4.15M|            }
  798|  4.15M|            handler.on_character_set_string(set);
  799|  4.15M|            return begin;
  800|  4.15M|        }
  801|  4.15M|        if (*begin == CharT{'/'}) {
  802|  4.15M|            return parse_presentation_regex(begin, end, handler);
  803|  4.15M|        }
  804|  4.15M|        presentation_type type = parse_presentation_type(*begin++);
  805|  4.15M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  806|  4.15M|            handler.on_error("Invalid type specifier in format string");
  807|  4.15M|            return begin;
  808|  4.15M|        }
  809|  4.15M|        handler.on_type(type);
  810|  4.15M|        return begin;
  811|  4.15M|    };
  812|       |
  813|  4.15M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (813:9): [True: 4.15M, False: 0]
  |  Branch (813:28): [True: 4.09M, False: 55.3k]
  ------------------
  814|  4.15M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (814:9): [True: 4.06M, False: 27.6k]
  |  Branch (814:36): [True: 2.98M, False: 1.08M]
  ------------------
  815|  2.98M|        return do_presentation();
  816|  2.98M|    }
  817|       |
  818|  1.16M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.16M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.16M]
  |  |  ------------------
  ------------------
  819|      0|        handler.on_error("Unexpected end of format string");
  820|      0|        return begin;
  821|      0|    }
  822|       |
  823|  1.16M|    begin = parse_align(begin, end, handler);
  824|  1.16M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.16M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.16M]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|  1.16M|    begin = parse_width(begin, end, handler);
  830|  1.16M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.16M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.16M]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|  1.16M|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (835:9): [True: 1.08M, False: 83.0k]
  ------------------
  836|  1.08M|        handler.on_localized();
  837|  1.08M|        ++begin;
  838|  1.08M|    }
  839|  1.16M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.16M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.16M]
  |  |  ------------------
  ------------------
  840|      0|        handler.on_error("Unexpected end of format string");
  841|      0|        return begin;
  842|      0|    }
  843|       |
  844|  1.16M|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (844:9): [True: 1.16M, False: 0]
  |  Branch (844:25): [True: 83.0k, False: 1.08M]
  ------------------
  845|  83.0k|        do_presentation();
  846|  83.0k|    }
  847|  1.16M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.16M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.16M]
  |  |  ------------------
  ------------------
  848|      0|        handler.on_error("Unexpected end of format string");
  849|      0|        return begin;
  850|      0|    }
  851|       |
  852|  1.16M|    return begin;
  853|  1.16M|}
_ZN3scn2v26detail15is_ascii_letterIcEEbT_:
  463|  4.31M|{
  464|  4.31M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (464:13): [True: 3.14M, False: 1.16M]
  |  Branch (464:33): [True: 3.14M, False: 0]
  ------------------
  465|  4.31M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (465:13): [True: 1.11M, False: 55.3k]
  |  Branch (465:33): [True: 1.11M, False: 0]
  ------------------
  466|  4.31M|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
  789|  3.06M|    auto do_presentation = [&]() -> const CharT* {
  790|  3.06M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (790:13): [True: 0, False: 3.06M]
  ------------------
  791|      0|            auto set = parse_presentation_set(begin, end, handler);
  792|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  793|       |                // clang-format off
  794|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  795|       |                // clang-format on
  796|      0|                return begin;
  797|      0|            }
  798|      0|            handler.on_character_set_string(set);
  799|      0|            return begin;
  800|      0|        }
  801|  3.06M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (801:13): [True: 0, False: 3.06M]
  ------------------
  802|      0|            return parse_presentation_regex(begin, end, handler);
  803|      0|        }
  804|  3.06M|        presentation_type type = parse_presentation_type(*begin++);
  805|  3.06M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|  3.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 55.3k, False: 3.00M]
  |  |  ------------------
  ------------------
  806|  55.3k|            handler.on_error("Invalid type specifier in format string");
  807|  55.3k|            return begin;
  808|  55.3k|        }
  809|  3.00M|        handler.on_type(type);
  810|  3.00M|        return begin;
  811|  3.06M|    };
_ZN3scn2v26detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
  411|  3.31M|{
  412|  3.31M|    switch (type) {
  413|   142k|        case 'b':
  ------------------
  |  Branch (413:9): [True: 142k, False: 3.17M]
  ------------------
  414|   198k|        case 'B':
  ------------------
  |  Branch (414:9): [True: 55.3k, False: 3.25M]
  ------------------
  415|   198k|            return presentation_type::int_binary;
  416|   778k|        case 'd':
  ------------------
  |  Branch (416:9): [True: 778k, False: 2.53M]
  ------------------
  417|   778k|            return presentation_type::int_decimal;
  418|  1.11M|        case 'i':
  ------------------
  |  Branch (418:9): [True: 1.11M, False: 2.19M]
  ------------------
  419|  1.11M|            return presentation_type::int_generic;
  420|      0|        case 'u':
  ------------------
  |  Branch (420:9): [True: 0, False: 3.31M]
  ------------------
  421|      0|            return presentation_type::int_unsigned_decimal;
  422|   261k|        case 'o':
  ------------------
  |  Branch (422:9): [True: 261k, False: 3.05M]
  ------------------
  423|   261k|            return presentation_type::int_octal;
  424|   848k|        case 'x':
  ------------------
  |  Branch (424:9): [True: 848k, False: 2.46M]
  ------------------
  425|   848k|        case 'X':
  ------------------
  |  Branch (425:9): [True: 0, False: 3.31M]
  ------------------
  426|   848k|            return presentation_type::int_hex;
  427|      0|        case 'r':
  ------------------
  |  Branch (427:9): [True: 0, False: 3.31M]
  ------------------
  428|      0|        case 'R':
  ------------------
  |  Branch (428:9): [True: 0, False: 3.31M]
  ------------------
  429|      0|            return presentation_type::int_arbitrary_base;
  430|      0|        case 'a':
  ------------------
  |  Branch (430:9): [True: 0, False: 3.31M]
  ------------------
  431|      0|        case 'A':
  ------------------
  |  Branch (431:9): [True: 0, False: 3.31M]
  ------------------
  432|      0|            return presentation_type::float_hex;
  433|      0|        case 'e':
  ------------------
  |  Branch (433:9): [True: 0, False: 3.31M]
  ------------------
  434|      0|        case 'E':
  ------------------
  |  Branch (434:9): [True: 0, False: 3.31M]
  ------------------
  435|      0|            return presentation_type::float_scientific;
  436|      0|        case 'f':
  ------------------
  |  Branch (436:9): [True: 0, False: 3.31M]
  ------------------
  437|      0|        case 'F':
  ------------------
  |  Branch (437:9): [True: 0, False: 3.31M]
  ------------------
  438|      0|            return presentation_type::float_fixed;
  439|      0|        case 'g':
  ------------------
  |  Branch (439:9): [True: 0, False: 3.31M]
  ------------------
  440|      0|        case 'G':
  ------------------
  |  Branch (440:9): [True: 0, False: 3.31M]
  ------------------
  441|      0|            return presentation_type::float_general;
  442|      0|        case 's':
  ------------------
  |  Branch (442:9): [True: 0, False: 3.31M]
  ------------------
  443|      0|            return presentation_type::string;
  444|      0|        case 'c':
  ------------------
  |  Branch (444:9): [True: 0, False: 3.31M]
  ------------------
  445|      0|            return presentation_type::character;
  446|      0|        case '?':
  ------------------
  |  Branch (446:9): [True: 0, False: 3.31M]
  ------------------
  447|      0|            return presentation_type::escaped_character;
  448|      0|        case 'p':
  ------------------
  |  Branch (448:9): [True: 0, False: 3.31M]
  ------------------
  449|      0|            return presentation_type::pointer;
  450|      0|        case '[':
  ------------------
  |  Branch (450:9): [True: 0, False: 3.31M]
  ------------------
  451|      0|        case '/':
  ------------------
  |  Branch (451:9): [True: 0, False: 3.31M]
  ------------------
  452|       |            // Should be handled by parse_presentation_set and
  453|       |            // parse_presentation_regex
  454|      0|            SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  456|   110k|        default:
  ------------------
  |  Branch (456:9): [True: 110k, False: 3.20M]
  ------------------
  457|   110k|            return presentation_type::none;
  458|  3.31M|    }
  459|  3.31M|}
vscan.cpp:_ZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  488|  1.16M|{
  489|  1.16M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  1.16M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.16M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|  1.16M|        switch (ch) {
  493|  1.16M|            case L'<':
  494|  1.16M|                return align_type::left;
  495|  1.16M|            case L'>':
  496|  1.16M|                return align_type::right;
  497|  1.16M|            case L'^':
  498|  1.16M|                return align_type::center;
  499|  1.16M|            default:
  500|  1.16M|                return align_type::none;
  501|  1.16M|        }
  502|  1.16M|    };
  503|       |
  504|  1.16M|    auto potential_fill_len = code_point_length(begin, end);
  505|  1.16M|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|  2.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.16M]
  |  |  |  Branch (153:45): [True: 0, False: 1.16M]
  |  |  |  Branch (153:45): [True: 0, False: 1.16M]
  |  |  ------------------
  ------------------
  506|  1.16M|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|  1.16M|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|  1.16M|    auto potential_fill = std::basic_string_view<CharT>{
  514|  1.16M|        begin, static_cast<size_t>(potential_fill_len)};
  515|  1.16M|    const auto begin_before_fill = begin;
  516|  1.16M|    begin += potential_fill_len;
  517|       |
  518|  1.16M|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 1.16M]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|  1.16M|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|  1.16M|    const auto begin_after_fill = begin;
  524|  1.16M|    ++begin;
  525|       |
  526|  1.16M|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 1.16M, False: 0]
  ------------------
  527|  1.16M|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|  1.16M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.16M]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|  1.16M|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 1.16M]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|  1.16M|    }
  535|       |
  536|  1.16M|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 1.16M, False: 0]
  ------------------
  537|  1.16M|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 1.16M]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|  1.16M|        return begin_before_fill;
  542|  1.16M|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|  1.16M|}
_ZN3scn2v26detail17code_point_lengthIcEEiPKT_S5_:
  470|  1.28M|{
  471|  1.28M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  1.28M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.28M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  472|  1.28M|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (472:19): [Folded - Ignored]
  ------------------
  473|  1.28M|        return 1;
  474|  1.28M|    }
  475|  1.28M|    else {
  476|  1.28M|        const auto lengths =
  477|  1.28M|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
  478|  1.28M|            "\3\4";
  479|  1.28M|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
  480|  1.28M|        return len;
  481|  1.28M|    }
  482|  1.28M|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
  491|  2.33M|    auto check_align = [](wchar_t ch) {
  492|  2.33M|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 2.33M]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 2.33M]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 2.33M]
  ------------------
  498|      0|                return align_type::center;
  499|  2.33M|            default:
  ------------------
  |  Branch (499:13): [True: 2.33M, False: 0]
  ------------------
  500|  2.33M|                return align_type::none;
  501|  2.33M|        }
  502|  2.33M|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  553|  1.16M|{
  554|  1.16M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  1.16M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.16M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|  1.16M|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 1.11M, False: 55.3k]
  |  Branch (556:33): [True: 0, False: 1.11M]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|  1.16M|    return begin;
  567|  1.16M|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 1044|  1.08M|    {
 1045|  1.08M|        const auto cat = get_category_for_arg_type(m_arg_type);
 1046|  1.08M|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1046:13): [True: 507k, False: 579k]
  ------------------
 1047|  1.08M|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1047:13): [True: 0, False: 507k]
  ------------------
 1048|  1.08M|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1048:13): [True: 0, False: 0]
  ------------------
 1049|  1.08M|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1049:13): [True: 0, False: 0]
  ------------------
 1050|      0|            SCN_UNLIKELY_ATTR
 1051|       |            // clang-format off
 1052|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1053|       |            // clang-format on
 1054|      0|        }
 1055|       |
 1056|  1.08M|        Handler::on_localized();
 1057|  1.08M|    }
_ZN3scn2v26detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 1066|  8.71M|{
 1067|  8.71M|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  |  153|  8.71M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 8.71M]
  |  |  ------------------
  ------------------
 1068|      0|        return handler.on_error("Invalid type specifier for integer type");
 1069|      0|    }
 1070|  8.71M|    if (specs.localized) {
  ------------------
  |  Branch (1070:9): [True: 2.20M, False: 6.51M]
  ------------------
 1071|  2.20M|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  |  153|  2.20M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.20M]
  |  |  ------------------
  ------------------
 1072|       |            // clang-format off
 1073|      0|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 1074|       |            // clang-format on
 1075|      0|            return;
 1076|      0|        }
 1077|  2.20M|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  |  153|  2.20M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.20M]
  |  |  ------------------
  ------------------
 1078|       |            // clang-format off
 1079|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 1080|       |            // clang-format on
 1081|      0|        }
 1082|  2.20M|    }
 1083|  8.71M|}
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  961|   276k|{
  962|   276k|    parse_format_string_impl<IsConstexpr>(format, handler);
  963|   276k|    handler.check_args_exhausted();
  964|   276k|    return handler.get_error();
  965|   276k|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  927|   276k|{
  928|       |    // TODO: memchr fast path with a larger (> 32) format string
  929|       |
  930|   276k|    auto begin = format.data();
  931|   276k|    auto it = begin;
  932|   276k|    const auto end = format.data() + format.size();
  933|       |
  934|   304k|    while (it != end) {
  ------------------
  |  Branch (934:12): [True: 276k, False: 27.6k]
  ------------------
  935|   276k|        const auto ch = *it++;
  936|   276k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (936:13): [True: 276k, False: 0]
  ------------------
  937|   276k|            handler.on_literal_text(begin, it - 1);
  938|       |
  939|   276k|            begin = it = parse_replacement_field(it - 1, end, handler);
  940|   276k|            if (!handler) {
  ------------------
  |  Branch (940:17): [True: 249k, False: 27.6k]
  ------------------
  941|   249k|                return;
  942|   249k|            }
  943|   276k|        }
  944|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (944:18): [True: 0, False: 0]
  ------------------
  945|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  946|      0|                handler.on_error("Unmatched '}' in format string");
  947|      0|                return;
  948|      0|            }
  949|       |
  950|      0|            handler.on_literal_text(begin, it);
  951|      0|            begin = ++it;
  952|      0|        }
  953|   276k|    }
  954|       |
  955|  27.6k|    handler.on_literal_text(begin, end);
  956|  27.6k|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
  859|   276k|{
  860|   276k|    struct id_adapter {
  861|   276k|        constexpr void operator()()
  862|   276k|        {
  863|   276k|            arg_id = handler.on_arg_id();
  864|   276k|        }
  865|   276k|        constexpr void operator()(std::size_t id)
  866|   276k|        {
  867|   276k|            arg_id = handler.on_arg_id(id);
  868|   276k|        }
  869|       |
  870|   276k|        constexpr void on_error(const char* msg)
  871|   276k|        {
  872|   276k|            SCN_UNLIKELY_ATTR
  873|   276k|            handler.on_error(msg);
  874|   276k|        }
  875|       |
  876|   276k|        Handler& handler;
  877|   276k|        std::size_t arg_id;
  878|   276k|    };
  879|       |
  880|   276k|    ++begin;
  881|   276k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   276k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 276k]
  |  |  ------------------
  ------------------
  882|      0|        handler.on_error("Unexpected end of replacement field");
  883|      0|        return begin;
  884|      0|    }
  885|       |
  886|   276k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (886:9): [True: 0, False: 276k]
  ------------------
  887|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  888|      0|    }
  889|   276k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (889:14): [True: 0, False: 276k]
  ------------------
  890|      0|        handler.on_literal_text(begin, begin + 1);
  891|      0|    }
  892|   276k|    else {
  893|   276k|        auto adapter = id_adapter{handler, 0};
  894|   276k|        begin = parse_arg_id(begin, end, adapter);
  895|       |
  896|   276k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   276k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 276k]
  |  |  ------------------
  ------------------
  897|      0|            handler.on_error("Missing '}' in format string");
  898|      0|            return begin;
  899|      0|        }
  900|       |
  901|   276k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (901:13): [True: 0, False: 276k]
  ------------------
  902|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  903|      0|        }
  904|   276k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (904:18): [True: 276k, False: 0]
  ------------------
  905|   276k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|   276k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 276k]
  |  |  ------------------
  ------------------
  906|      0|                handler.on_error("Unexpected end of replacement field");
  907|      0|                return begin;
  908|      0|            }
  909|   276k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  910|   276k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|   553k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 83.0k, False: 193k]
  |  |  |  Branch (153:45): [True: 0, False: 276k]
  |  |  |  Branch (153:45): [True: 83.0k, False: 193k]
  |  |  ------------------
  ------------------
  911|  83.0k|                handler.on_error("Unknown format specifier");
  912|  83.0k|                return begin;
  913|  83.0k|            }
  914|   276k|        }
  915|      0|        else {
  916|      0|            SCN_UNLIKELY_ATTR
  917|      0|            handler.on_error("Missing '}' in format string");
  918|      0|            return begin;
  919|      0|        }
  920|   276k|    }
  921|   193k|    return begin + 1;
  922|   276k|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|   276k|{
  400|   276k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   276k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   276k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|   276k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 276k, False: 0]
  |  Branch (401:26): [True: 0, False: 276k]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|   276k|    handler();
  406|   276k|    return begin;
  407|   276k|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  862|   276k|        {
  863|   276k|            arg_id = handler.on_arg_id();
  864|   276k|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 1039|   276k|    {
 1040|   276k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|   276k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   276k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1041|   276k|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  788|   276k|{
  789|   276k|    auto do_presentation = [&]() -> const CharT* {
  790|   276k|        if (*begin == CharT{'['}) {
  791|   276k|            auto set = parse_presentation_set(begin, end, handler);
  792|   276k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  793|       |                // clang-format off
  794|   276k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  795|       |                // clang-format on
  796|   276k|                return begin;
  797|   276k|            }
  798|   276k|            handler.on_character_set_string(set);
  799|   276k|            return begin;
  800|   276k|        }
  801|   276k|        if (*begin == CharT{'/'}) {
  802|   276k|            return parse_presentation_regex(begin, end, handler);
  803|   276k|        }
  804|   276k|        presentation_type type = parse_presentation_type(*begin++);
  805|   276k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  806|   276k|            handler.on_error("Invalid type specifier in format string");
  807|   276k|            return begin;
  808|   276k|        }
  809|   276k|        handler.on_type(type);
  810|   276k|        return begin;
  811|   276k|    };
  812|       |
  813|   276k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (813:9): [True: 276k, False: 0]
  |  Branch (813:28): [True: 221k, False: 55.3k]
  ------------------
  814|   276k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (814:9): [True: 193k, False: 27.6k]
  |  Branch (814:36): [True: 166k, False: 27.6k]
  ------------------
  815|   166k|        return do_presentation();
  816|   166k|    }
  817|       |
  818|   110k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 110k]
  |  |  ------------------
  ------------------
  819|      0|        handler.on_error("Unexpected end of format string");
  820|      0|        return begin;
  821|      0|    }
  822|       |
  823|   110k|    begin = parse_align(begin, end, handler);
  824|   110k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 110k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|   110k|    begin = parse_width(begin, end, handler);
  830|   110k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 110k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|   110k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (835:9): [True: 27.6k, False: 83.0k]
  ------------------
  836|  27.6k|        handler.on_localized();
  837|  27.6k|        ++begin;
  838|  27.6k|    }
  839|   110k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 110k]
  |  |  ------------------
  ------------------
  840|      0|        handler.on_error("Unexpected end of format string");
  841|      0|        return begin;
  842|      0|    }
  843|       |
  844|   110k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (844:9): [True: 110k, False: 0]
  |  Branch (844:25): [True: 83.0k, False: 27.6k]
  ------------------
  845|  83.0k|        do_presentation();
  846|  83.0k|    }
  847|   110k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 110k]
  |  |  ------------------
  ------------------
  848|      0|        handler.on_error("Unexpected end of format string");
  849|      0|        return begin;
  850|      0|    }
  851|       |
  852|   110k|    return begin;
  853|   110k|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
  789|   249k|    auto do_presentation = [&]() -> const CharT* {
  790|   249k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (790:13): [True: 0, False: 249k]
  ------------------
  791|      0|            auto set = parse_presentation_set(begin, end, handler);
  792|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  793|       |                // clang-format off
  794|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  795|       |                // clang-format on
  796|      0|                return begin;
  797|      0|            }
  798|      0|            handler.on_character_set_string(set);
  799|      0|            return begin;
  800|      0|        }
  801|   249k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (801:13): [True: 0, False: 249k]
  ------------------
  802|      0|            return parse_presentation_regex(begin, end, handler);
  803|      0|        }
  804|   249k|        presentation_type type = parse_presentation_type(*begin++);
  805|   249k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|   249k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 55.3k, False: 193k]
  |  |  ------------------
  ------------------
  806|  55.3k|            handler.on_error("Invalid type specifier in format string");
  807|  55.3k|            return begin;
  808|  55.3k|        }
  809|   193k|        handler.on_type(type);
  810|   193k|        return begin;
  811|   249k|    };
vscan.cpp:_ZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  488|   110k|{
  489|   110k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   110k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   110k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|   110k|        switch (ch) {
  493|   110k|            case L'<':
  494|   110k|                return align_type::left;
  495|   110k|            case L'>':
  496|   110k|                return align_type::right;
  497|   110k|            case L'^':
  498|   110k|                return align_type::center;
  499|   110k|            default:
  500|   110k|                return align_type::none;
  501|   110k|        }
  502|   110k|    };
  503|       |
  504|   110k|    auto potential_fill_len = code_point_length(begin, end);
  505|   110k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|   221k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 110k]
  |  |  |  Branch (153:45): [True: 0, False: 110k]
  |  |  |  Branch (153:45): [True: 0, False: 110k]
  |  |  ------------------
  ------------------
  506|   110k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|   110k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|   110k|    auto potential_fill = std::basic_string_view<CharT>{
  514|   110k|        begin, static_cast<size_t>(potential_fill_len)};
  515|   110k|    const auto begin_before_fill = begin;
  516|   110k|    begin += potential_fill_len;
  517|       |
  518|   110k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 110k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|   110k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|   110k|    const auto begin_after_fill = begin;
  524|   110k|    ++begin;
  525|       |
  526|   110k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 110k, False: 0]
  ------------------
  527|   110k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 110k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|   110k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 110k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|   110k|    }
  535|       |
  536|   110k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 110k, False: 0]
  ------------------
  537|   110k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 110k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|   110k|        return begin_before_fill;
  542|   110k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|   110k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
  491|   221k|    auto check_align = [](wchar_t ch) {
  492|   221k|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 221k]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 221k]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 221k]
  ------------------
  498|      0|                return align_type::center;
  499|   221k|            default:
  ------------------
  |  Branch (499:13): [True: 221k, False: 0]
  ------------------
  500|   221k|                return align_type::none;
  501|   221k|        }
  502|   221k|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  553|   110k|{
  554|   110k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   110k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   110k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|   110k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 55.3k, False: 55.3k]
  |  Branch (556:33): [True: 0, False: 55.3k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|   110k|    return begin;
  567|   110k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 1044|  27.6k|    {
 1045|  27.6k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1046|  27.6k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1046:13): [True: 13.8k, False: 13.8k]
  ------------------
 1047|  27.6k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1047:13): [True: 0, False: 13.8k]
  ------------------
 1048|  27.6k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1048:13): [True: 0, False: 0]
  ------------------
 1049|  27.6k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1049:13): [True: 0, False: 0]
  ------------------
 1050|      0|            SCN_UNLIKELY_ATTR
 1051|       |            // clang-format off
 1052|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1053|       |            // clang-format on
 1054|      0|        }
 1055|       |
 1056|  27.6k|        Handler::on_localized();
 1057|  27.6k|    }
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  961|  4.15M|{
  962|  4.15M|    parse_format_string_impl<IsConstexpr>(format, handler);
  963|  4.15M|    handler.check_args_exhausted();
  964|  4.15M|    return handler.get_error();
  965|  4.15M|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  927|  4.15M|{
  928|       |    // TODO: memchr fast path with a larger (> 32) format string
  929|       |
  930|  4.15M|    auto begin = format.data();
  931|  4.15M|    auto it = begin;
  932|  4.15M|    const auto end = format.data() + format.size();
  933|       |
  934|  7.55M|    while (it != end) {
  ------------------
  |  Branch (934:12): [True: 4.15M, False: 3.40M]
  ------------------
  935|  4.15M|        const auto ch = *it++;
  936|  4.15M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (936:13): [True: 4.15M, False: 0]
  ------------------
  937|  4.15M|            handler.on_literal_text(begin, it - 1);
  938|       |
  939|  4.15M|            begin = it = parse_replacement_field(it - 1, end, handler);
  940|  4.15M|            if (!handler) {
  ------------------
  |  Branch (940:17): [True: 747k, False: 3.40M]
  ------------------
  941|   747k|                return;
  942|   747k|            }
  943|  4.15M|        }
  944|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (944:18): [True: 0, False: 0]
  ------------------
  945|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  946|      0|                handler.on_error("Unmatched '}' in format string");
  947|      0|                return;
  948|      0|            }
  949|       |
  950|      0|            handler.on_literal_text(begin, it);
  951|      0|            begin = ++it;
  952|      0|        }
  953|  4.15M|    }
  954|       |
  955|  3.40M|    handler.on_literal_text(begin, end);
  956|  3.40M|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
  859|  4.15M|{
  860|  4.15M|    struct id_adapter {
  861|  4.15M|        constexpr void operator()()
  862|  4.15M|        {
  863|  4.15M|            arg_id = handler.on_arg_id();
  864|  4.15M|        }
  865|  4.15M|        constexpr void operator()(std::size_t id)
  866|  4.15M|        {
  867|  4.15M|            arg_id = handler.on_arg_id(id);
  868|  4.15M|        }
  869|       |
  870|  4.15M|        constexpr void on_error(const char* msg)
  871|  4.15M|        {
  872|  4.15M|            SCN_UNLIKELY_ATTR
  873|  4.15M|            handler.on_error(msg);
  874|  4.15M|        }
  875|       |
  876|  4.15M|        Handler& handler;
  877|  4.15M|        std::size_t arg_id;
  878|  4.15M|    };
  879|       |
  880|  4.15M|    ++begin;
  881|  4.15M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  4.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.15M]
  |  |  ------------------
  ------------------
  882|      0|        handler.on_error("Unexpected end of replacement field");
  883|      0|        return begin;
  884|      0|    }
  885|       |
  886|  4.15M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (886:9): [True: 0, False: 4.15M]
  ------------------
  887|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  888|      0|    }
  889|  4.15M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (889:14): [True: 0, False: 4.15M]
  ------------------
  890|      0|        handler.on_literal_text(begin, begin + 1);
  891|      0|    }
  892|  4.15M|    else {
  893|  4.15M|        auto adapter = id_adapter{handler, 0};
  894|  4.15M|        begin = parse_arg_id(begin, end, adapter);
  895|       |
  896|  4.15M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  4.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.15M]
  |  |  ------------------
  ------------------
  897|      0|            handler.on_error("Missing '}' in format string");
  898|      0|            return begin;
  899|      0|        }
  900|       |
  901|  4.15M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (901:13): [True: 0, False: 4.15M]
  ------------------
  902|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  903|      0|        }
  904|  4.15M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (904:18): [True: 4.15M, False: 0]
  ------------------
  905|  4.15M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|  4.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.15M]
  |  |  ------------------
  ------------------
  906|      0|                handler.on_error("Unexpected end of replacement field");
  907|      0|                return begin;
  908|      0|            }
  909|  4.15M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  910|  4.15M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|  8.30M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 249k, False: 3.90M]
  |  |  |  Branch (153:45): [True: 0, False: 4.15M]
  |  |  |  Branch (153:45): [True: 249k, False: 3.90M]
  |  |  ------------------
  ------------------
  911|   249k|                handler.on_error("Unknown format specifier");
  912|   249k|                return begin;
  913|   249k|            }
  914|  4.15M|        }
  915|      0|        else {
  916|      0|            SCN_UNLIKELY_ATTR
  917|      0|            handler.on_error("Missing '}' in format string");
  918|      0|            return begin;
  919|      0|        }
  920|  4.15M|    }
  921|  3.90M|    return begin + 1;
  922|  4.15M|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|  4.15M|{
  400|  4.15M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  4.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|  4.15M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 4.15M, False: 0]
  |  Branch (401:26): [True: 0, False: 4.15M]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|  4.15M|    handler();
  406|  4.15M|    return begin;
  407|  4.15M|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  862|  4.15M|        {
  863|  4.15M|            arg_id = handler.on_arg_id();
  864|  4.15M|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 1039|  4.15M|    {
 1040|  4.15M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|  4.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1041|  4.15M|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  788|  4.15M|{
  789|  4.15M|    auto do_presentation = [&]() -> const CharT* {
  790|  4.15M|        if (*begin == CharT{'['}) {
  791|  4.15M|            auto set = parse_presentation_set(begin, end, handler);
  792|  4.15M|            if (SCN_UNLIKELY(set.size() <= 2)) {
  793|       |                // clang-format off
  794|  4.15M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  795|       |                // clang-format on
  796|  4.15M|                return begin;
  797|  4.15M|            }
  798|  4.15M|            handler.on_character_set_string(set);
  799|  4.15M|            return begin;
  800|  4.15M|        }
  801|  4.15M|        if (*begin == CharT{'/'}) {
  802|  4.15M|            return parse_presentation_regex(begin, end, handler);
  803|  4.15M|        }
  804|  4.15M|        presentation_type type = parse_presentation_type(*begin++);
  805|  4.15M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  806|  4.15M|            handler.on_error("Invalid type specifier in format string");
  807|  4.15M|            return begin;
  808|  4.15M|        }
  809|  4.15M|        handler.on_type(type);
  810|  4.15M|        return begin;
  811|  4.15M|    };
  812|       |
  813|  4.15M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (813:9): [True: 4.15M, False: 0]
  |  Branch (813:28): [True: 3.98M, False: 166k]
  ------------------
  814|  4.15M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (814:9): [True: 3.90M, False: 83.0k]
  |  Branch (814:36): [True: 2.89M, False: 1.00M]
  ------------------
  815|  2.89M|        return do_presentation();
  816|  2.89M|    }
  817|       |
  818|  1.25M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.25M]
  |  |  ------------------
  ------------------
  819|      0|        handler.on_error("Unexpected end of format string");
  820|      0|        return begin;
  821|      0|    }
  822|       |
  823|  1.25M|    begin = parse_align(begin, end, handler);
  824|  1.25M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.25M]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|  1.25M|    begin = parse_width(begin, end, handler);
  830|  1.25M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.25M]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|  1.25M|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (835:9): [True: 1.00M, False: 249k]
  ------------------
  836|  1.00M|        handler.on_localized();
  837|  1.00M|        ++begin;
  838|  1.00M|    }
  839|  1.25M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.25M]
  |  |  ------------------
  ------------------
  840|      0|        handler.on_error("Unexpected end of format string");
  841|      0|        return begin;
  842|      0|    }
  843|       |
  844|  1.25M|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (844:9): [True: 1.25M, False: 0]
  |  Branch (844:25): [True: 249k, False: 1.00M]
  ------------------
  845|   249k|        do_presentation();
  846|   249k|    }
  847|  1.25M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.25M]
  |  |  ------------------
  ------------------
  848|      0|        handler.on_error("Unexpected end of format string");
  849|      0|        return begin;
  850|      0|    }
  851|       |
  852|  1.25M|    return begin;
  853|  1.25M|}
_ZN3scn2v26detail15is_ascii_letterIwEEbT_:
  463|  4.62M|{
  464|  4.62M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (464:13): [True: 3.36M, False: 1.25M]
  |  Branch (464:33): [True: 3.36M, False: 0]
  ------------------
  465|  4.62M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (465:13): [True: 1.09M, False: 166k]
  |  Branch (465:33): [True: 1.09M, False: 0]
  ------------------
  466|  4.62M|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
  789|  3.14M|    auto do_presentation = [&]() -> const CharT* {
  790|  3.14M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (790:13): [True: 0, False: 3.14M]
  ------------------
  791|      0|            auto set = parse_presentation_set(begin, end, handler);
  792|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  793|       |                // clang-format off
  794|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  795|       |                // clang-format on
  796|      0|                return begin;
  797|      0|            }
  798|      0|            handler.on_character_set_string(set);
  799|      0|            return begin;
  800|      0|        }
  801|  3.14M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (801:13): [True: 0, False: 3.14M]
  ------------------
  802|      0|            return parse_presentation_regex(begin, end, handler);
  803|      0|        }
  804|  3.14M|        presentation_type type = parse_presentation_type(*begin++);
  805|  3.14M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|  3.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 166k, False: 2.97M]
  |  |  ------------------
  ------------------
  806|   166k|            handler.on_error("Invalid type specifier in format string");
  807|   166k|            return begin;
  808|   166k|        }
  809|  2.97M|        handler.on_type(type);
  810|  2.97M|        return begin;
  811|  3.14M|    };
_ZN3scn2v26detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
  411|  3.86M|{
  412|  3.86M|    switch (type) {
  413|   242k|        case 'b':
  ------------------
  |  Branch (413:9): [True: 242k, False: 3.62M]
  ------------------
  414|   408k|        case 'B':
  ------------------
  |  Branch (414:9): [True: 166k, False: 3.69M]
  ------------------
  415|   408k|            return presentation_type::int_binary;
  416|   795k|        case 'd':
  ------------------
  |  Branch (416:9): [True: 795k, False: 3.06M]
  ------------------
  417|   795k|            return presentation_type::int_decimal;
  418|  1.09M|        case 'i':
  ------------------
  |  Branch (418:9): [True: 1.09M, False: 2.77M]
  ------------------
  419|  1.09M|            return presentation_type::int_generic;
  420|      0|        case 'u':
  ------------------
  |  Branch (420:9): [True: 0, False: 3.86M]
  ------------------
  421|      0|            return presentation_type::int_unsigned_decimal;
  422|   341k|        case 'o':
  ------------------
  |  Branch (422:9): [True: 341k, False: 3.52M]
  ------------------
  423|   341k|            return presentation_type::int_octal;
  424|   892k|        case 'x':
  ------------------
  |  Branch (424:9): [True: 892k, False: 2.97M]
  ------------------
  425|   892k|        case 'X':
  ------------------
  |  Branch (425:9): [True: 0, False: 3.86M]
  ------------------
  426|   892k|            return presentation_type::int_hex;
  427|      0|        case 'r':
  ------------------
  |  Branch (427:9): [True: 0, False: 3.86M]
  ------------------
  428|      0|        case 'R':
  ------------------
  |  Branch (428:9): [True: 0, False: 3.86M]
  ------------------
  429|      0|            return presentation_type::int_arbitrary_base;
  430|      0|        case 'a':
  ------------------
  |  Branch (430:9): [True: 0, False: 3.86M]
  ------------------
  431|      0|        case 'A':
  ------------------
  |  Branch (431:9): [True: 0, False: 3.86M]
  ------------------
  432|      0|            return presentation_type::float_hex;
  433|      0|        case 'e':
  ------------------
  |  Branch (433:9): [True: 0, False: 3.86M]
  ------------------
  434|      0|        case 'E':
  ------------------
  |  Branch (434:9): [True: 0, False: 3.86M]
  ------------------
  435|      0|            return presentation_type::float_scientific;
  436|      0|        case 'f':
  ------------------
  |  Branch (436:9): [True: 0, False: 3.86M]
  ------------------
  437|      0|        case 'F':
  ------------------
  |  Branch (437:9): [True: 0, False: 3.86M]
  ------------------
  438|      0|            return presentation_type::float_fixed;
  439|      0|        case 'g':
  ------------------
  |  Branch (439:9): [True: 0, False: 3.86M]
  ------------------
  440|      0|        case 'G':
  ------------------
  |  Branch (440:9): [True: 0, False: 3.86M]
  ------------------
  441|      0|            return presentation_type::float_general;
  442|      0|        case 's':
  ------------------
  |  Branch (442:9): [True: 0, False: 3.86M]
  ------------------
  443|      0|            return presentation_type::string;
  444|      0|        case 'c':
  ------------------
  |  Branch (444:9): [True: 0, False: 3.86M]
  ------------------
  445|      0|            return presentation_type::character;
  446|      0|        case '?':
  ------------------
  |  Branch (446:9): [True: 0, False: 3.86M]
  ------------------
  447|      0|            return presentation_type::escaped_character;
  448|      0|        case 'p':
  ------------------
  |  Branch (448:9): [True: 0, False: 3.86M]
  ------------------
  449|      0|            return presentation_type::pointer;
  450|      0|        case '[':
  ------------------
  |  Branch (450:9): [True: 0, False: 3.86M]
  ------------------
  451|      0|        case '/':
  ------------------
  |  Branch (451:9): [True: 0, False: 3.86M]
  ------------------
  452|       |            // Should be handled by parse_presentation_set and
  453|       |            // parse_presentation_regex
  454|      0|            SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  456|   332k|        default:
  ------------------
  |  Branch (456:9): [True: 332k, False: 3.53M]
  ------------------
  457|   332k|            return presentation_type::none;
  458|  3.86M|    }
  459|  3.86M|}
vscan.cpp:_ZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  488|  1.25M|{
  489|  1.25M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  1.25M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.25M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|  1.25M|        switch (ch) {
  493|  1.25M|            case L'<':
  494|  1.25M|                return align_type::left;
  495|  1.25M|            case L'>':
  496|  1.25M|                return align_type::right;
  497|  1.25M|            case L'^':
  498|  1.25M|                return align_type::center;
  499|  1.25M|            default:
  500|  1.25M|                return align_type::none;
  501|  1.25M|        }
  502|  1.25M|    };
  503|       |
  504|  1.25M|    auto potential_fill_len = code_point_length(begin, end);
  505|  1.25M|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|  2.51M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.25M]
  |  |  |  Branch (153:45): [True: 0, False: 1.25M]
  |  |  |  Branch (153:45): [True: 0, False: 1.25M]
  |  |  ------------------
  ------------------
  506|  1.25M|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|  1.25M|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|  1.25M|    auto potential_fill = std::basic_string_view<CharT>{
  514|  1.25M|        begin, static_cast<size_t>(potential_fill_len)};
  515|  1.25M|    const auto begin_before_fill = begin;
  516|  1.25M|    begin += potential_fill_len;
  517|       |
  518|  1.25M|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 1.25M]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|  1.25M|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|  1.25M|    const auto begin_after_fill = begin;
  524|  1.25M|    ++begin;
  525|       |
  526|  1.25M|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 1.25M, False: 0]
  ------------------
  527|  1.25M|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|  1.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.25M]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|  1.25M|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 1.25M]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|  1.25M|    }
  535|       |
  536|  1.25M|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 1.25M, False: 0]
  ------------------
  537|  1.25M|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 1.25M]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|  1.25M|        return begin_before_fill;
  542|  1.25M|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|  1.25M|}
_ZN3scn2v26detail17code_point_lengthIwEEiPKT_S5_:
  470|  1.58M|{
  471|  1.58M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  1.58M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.58M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  472|  1.58M|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (472:19): [Folded - Ignored]
  ------------------
  473|  1.58M|        return 1;
  474|  1.58M|    }
  475|  1.58M|    else {
  476|  1.58M|        const auto lengths =
  477|  1.58M|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
  478|  1.58M|            "\3\4";
  479|  1.58M|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
  480|  1.58M|        return len;
  481|  1.58M|    }
  482|  1.58M|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
  491|  2.51M|    auto check_align = [](wchar_t ch) {
  492|  2.51M|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 2.51M]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 2.51M]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 2.51M]
  ------------------
  498|      0|                return align_type::center;
  499|  2.51M|            default:
  ------------------
  |  Branch (499:13): [True: 2.51M, False: 0]
  ------------------
  500|  2.51M|                return align_type::none;
  501|  2.51M|        }
  502|  2.51M|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  553|  1.25M|{
  554|  1.25M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  1.25M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.25M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|  1.25M|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 1.09M, False: 166k]
  |  Branch (556:33): [True: 0, False: 1.09M]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|  1.25M|    return begin;
  567|  1.25M|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 1044|  1.00M|    {
 1045|  1.00M|        const auto cat = get_category_for_arg_type(m_arg_type);
 1046|  1.00M|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1046:13): [True: 480k, False: 527k]
  ------------------
 1047|  1.00M|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1047:13): [True: 0, False: 480k]
  ------------------
 1048|  1.00M|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1048:13): [True: 0, False: 0]
  ------------------
 1049|  1.00M|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1049:13): [True: 0, False: 0]
  ------------------
 1050|      0|            SCN_UNLIKELY_ATTR
 1051|       |            // clang-format off
 1052|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1053|       |            // clang-format on
 1054|      0|        }
 1055|       |
 1056|  1.00M|        Handler::on_localized();
 1057|  1.00M|    }
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  961|   802k|{
  962|   802k|    parse_format_string_impl<IsConstexpr>(format, handler);
  963|   802k|    handler.check_args_exhausted();
  964|   802k|    return handler.get_error();
  965|   802k|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  927|   802k|{
  928|       |    // TODO: memchr fast path with a larger (> 32) format string
  929|       |
  930|   802k|    auto begin = format.data();
  931|   802k|    auto it = begin;
  932|   802k|    const auto end = format.data() + format.size();
  933|       |
  934|   858k|    while (it != end) {
  ------------------
  |  Branch (934:12): [True: 802k, False: 55.3k]
  ------------------
  935|   802k|        const auto ch = *it++;
  936|   802k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (936:13): [True: 802k, False: 0]
  ------------------
  937|   802k|            handler.on_literal_text(begin, it - 1);
  938|       |
  939|   802k|            begin = it = parse_replacement_field(it - 1, end, handler);
  940|   802k|            if (!handler) {
  ------------------
  |  Branch (940:17): [True: 747k, False: 55.3k]
  ------------------
  941|   747k|                return;
  942|   747k|            }
  943|   802k|        }
  944|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (944:18): [True: 0, False: 0]
  ------------------
  945|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  946|      0|                handler.on_error("Unmatched '}' in format string");
  947|      0|                return;
  948|      0|            }
  949|       |
  950|      0|            handler.on_literal_text(begin, it);
  951|      0|            begin = ++it;
  952|      0|        }
  953|   802k|    }
  954|       |
  955|  55.3k|    handler.on_literal_text(begin, end);
  956|  55.3k|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
  859|   802k|{
  860|   802k|    struct id_adapter {
  861|   802k|        constexpr void operator()()
  862|   802k|        {
  863|   802k|            arg_id = handler.on_arg_id();
  864|   802k|        }
  865|   802k|        constexpr void operator()(std::size_t id)
  866|   802k|        {
  867|   802k|            arg_id = handler.on_arg_id(id);
  868|   802k|        }
  869|       |
  870|   802k|        constexpr void on_error(const char* msg)
  871|   802k|        {
  872|   802k|            SCN_UNLIKELY_ATTR
  873|   802k|            handler.on_error(msg);
  874|   802k|        }
  875|       |
  876|   802k|        Handler& handler;
  877|   802k|        std::size_t arg_id;
  878|   802k|    };
  879|       |
  880|   802k|    ++begin;
  881|   802k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   802k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 802k]
  |  |  ------------------
  ------------------
  882|      0|        handler.on_error("Unexpected end of replacement field");
  883|      0|        return begin;
  884|      0|    }
  885|       |
  886|   802k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (886:9): [True: 0, False: 802k]
  ------------------
  887|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  888|      0|    }
  889|   802k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (889:14): [True: 0, False: 802k]
  ------------------
  890|      0|        handler.on_literal_text(begin, begin + 1);
  891|      0|    }
  892|   802k|    else {
  893|   802k|        auto adapter = id_adapter{handler, 0};
  894|   802k|        begin = parse_arg_id(begin, end, adapter);
  895|       |
  896|   802k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   802k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 802k]
  |  |  ------------------
  ------------------
  897|      0|            handler.on_error("Missing '}' in format string");
  898|      0|            return begin;
  899|      0|        }
  900|       |
  901|   802k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (901:13): [True: 0, False: 802k]
  ------------------
  902|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  903|      0|        }
  904|   802k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (904:18): [True: 802k, False: 0]
  ------------------
  905|   802k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|   802k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 802k]
  |  |  ------------------
  ------------------
  906|      0|                handler.on_error("Unexpected end of replacement field");
  907|      0|                return begin;
  908|      0|            }
  909|   802k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  910|   802k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|  1.60M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 249k, False: 553k]
  |  |  |  Branch (153:45): [True: 0, False: 802k]
  |  |  |  Branch (153:45): [True: 249k, False: 553k]
  |  |  ------------------
  ------------------
  911|   249k|                handler.on_error("Unknown format specifier");
  912|   249k|                return begin;
  913|   249k|            }
  914|   802k|        }
  915|      0|        else {
  916|      0|            SCN_UNLIKELY_ATTR
  917|      0|            handler.on_error("Missing '}' in format string");
  918|      0|            return begin;
  919|      0|        }
  920|   802k|    }
  921|   553k|    return begin + 1;
  922|   802k|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|   802k|{
  400|   802k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   802k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   802k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|   802k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 802k, False: 0]
  |  Branch (401:26): [True: 0, False: 802k]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|   802k|    handler();
  406|   802k|    return begin;
  407|   802k|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  862|   802k|        {
  863|   802k|            arg_id = handler.on_arg_id();
  864|   802k|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 1039|   802k|    {
 1040|   802k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|   802k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   802k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1041|   802k|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  788|   802k|{
  789|   802k|    auto do_presentation = [&]() -> const CharT* {
  790|   802k|        if (*begin == CharT{'['}) {
  791|   802k|            auto set = parse_presentation_set(begin, end, handler);
  792|   802k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  793|       |                // clang-format off
  794|   802k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  795|       |                // clang-format on
  796|   802k|                return begin;
  797|   802k|            }
  798|   802k|            handler.on_character_set_string(set);
  799|   802k|            return begin;
  800|   802k|        }
  801|   802k|        if (*begin == CharT{'/'}) {
  802|   802k|            return parse_presentation_regex(begin, end, handler);
  803|   802k|        }
  804|   802k|        presentation_type type = parse_presentation_type(*begin++);
  805|   802k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  806|   802k|            handler.on_error("Invalid type specifier in format string");
  807|   802k|            return begin;
  808|   802k|        }
  809|   802k|        handler.on_type(type);
  810|   802k|        return begin;
  811|   802k|    };
  812|       |
  813|   802k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (813:9): [True: 802k, False: 0]
  |  Branch (813:28): [True: 636k, False: 166k]
  ------------------
  814|   802k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (814:9): [True: 553k, False: 83.0k]
  |  Branch (814:36): [True: 470k, False: 83.0k]
  ------------------
  815|   470k|        return do_presentation();
  816|   470k|    }
  817|       |
  818|   332k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   332k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 332k]
  |  |  ------------------
  ------------------
  819|      0|        handler.on_error("Unexpected end of format string");
  820|      0|        return begin;
  821|      0|    }
  822|       |
  823|   332k|    begin = parse_align(begin, end, handler);
  824|   332k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   332k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 332k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|   332k|    begin = parse_width(begin, end, handler);
  830|   332k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   332k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 332k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|   332k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (835:9): [True: 83.0k, False: 249k]
  ------------------
  836|  83.0k|        handler.on_localized();
  837|  83.0k|        ++begin;
  838|  83.0k|    }
  839|   332k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   332k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 332k]
  |  |  ------------------
  ------------------
  840|      0|        handler.on_error("Unexpected end of format string");
  841|      0|        return begin;
  842|      0|    }
  843|       |
  844|   332k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (844:9): [True: 332k, False: 0]
  |  Branch (844:25): [True: 249k, False: 83.0k]
  ------------------
  845|   249k|        do_presentation();
  846|   249k|    }
  847|   332k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   332k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 332k]
  |  |  ------------------
  ------------------
  848|      0|        handler.on_error("Unexpected end of format string");
  849|      0|        return begin;
  850|      0|    }
  851|       |
  852|   332k|    return begin;
  853|   332k|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
  789|   719k|    auto do_presentation = [&]() -> const CharT* {
  790|   719k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (790:13): [True: 0, False: 719k]
  ------------------
  791|      0|            auto set = parse_presentation_set(begin, end, handler);
  792|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  793|       |                // clang-format off
  794|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  795|       |                // clang-format on
  796|      0|                return begin;
  797|      0|            }
  798|      0|            handler.on_character_set_string(set);
  799|      0|            return begin;
  800|      0|        }
  801|   719k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (801:13): [True: 0, False: 719k]
  ------------------
  802|      0|            return parse_presentation_regex(begin, end, handler);
  803|      0|        }
  804|   719k|        presentation_type type = parse_presentation_type(*begin++);
  805|   719k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|   719k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 166k, False: 553k]
  |  |  ------------------
  ------------------
  806|   166k|            handler.on_error("Invalid type specifier in format string");
  807|   166k|            return begin;
  808|   166k|        }
  809|   553k|        handler.on_type(type);
  810|   553k|        return begin;
  811|   719k|    };
vscan.cpp:_ZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  488|   332k|{
  489|   332k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   332k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   332k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|   332k|        switch (ch) {
  493|   332k|            case L'<':
  494|   332k|                return align_type::left;
  495|   332k|            case L'>':
  496|   332k|                return align_type::right;
  497|   332k|            case L'^':
  498|   332k|                return align_type::center;
  499|   332k|            default:
  500|   332k|                return align_type::none;
  501|   332k|        }
  502|   332k|    };
  503|       |
  504|   332k|    auto potential_fill_len = code_point_length(begin, end);
  505|   332k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|   664k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 332k]
  |  |  |  Branch (153:45): [True: 0, False: 332k]
  |  |  |  Branch (153:45): [True: 0, False: 332k]
  |  |  ------------------
  ------------------
  506|   332k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|   332k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|   332k|    auto potential_fill = std::basic_string_view<CharT>{
  514|   332k|        begin, static_cast<size_t>(potential_fill_len)};
  515|   332k|    const auto begin_before_fill = begin;
  516|   332k|    begin += potential_fill_len;
  517|       |
  518|   332k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 332k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|   332k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|   332k|    const auto begin_after_fill = begin;
  524|   332k|    ++begin;
  525|       |
  526|   332k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 332k, False: 0]
  ------------------
  527|   332k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|   332k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 332k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|   332k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 332k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|   332k|    }
  535|       |
  536|   332k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 332k, False: 0]
  ------------------
  537|   332k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 332k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|   332k|        return begin_before_fill;
  542|   332k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|   332k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
  491|   664k|    auto check_align = [](wchar_t ch) {
  492|   664k|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 664k]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 664k]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 664k]
  ------------------
  498|      0|                return align_type::center;
  499|   664k|            default:
  ------------------
  |  Branch (499:13): [True: 664k, False: 0]
  ------------------
  500|   664k|                return align_type::none;
  501|   664k|        }
  502|   664k|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  553|   332k|{
  554|   332k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   332k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   332k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|   332k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 166k, False: 166k]
  |  Branch (556:33): [True: 0, False: 166k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|   332k|    return begin;
  567|   332k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 1044|  83.0k|    {
 1045|  83.0k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1046|  83.0k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1046:13): [True: 41.5k, False: 41.5k]
  ------------------
 1047|  83.0k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1047:13): [True: 0, False: 41.5k]
  ------------------
 1048|  83.0k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1048:13): [True: 0, False: 0]
  ------------------
 1049|  83.0k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1049:13): [True: 0, False: 0]
  ------------------
 1050|      0|            SCN_UNLIKELY_ATTR
 1051|       |            // clang-format off
 1052|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1053|       |            // clang-format on
 1054|      0|        }
 1055|       |
 1056|  83.0k|        Handler::on_localized();
 1057|  83.0k|    }

_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|  5.78M|{
  226|  5.78M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|  5.78M|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|  5.78M|                  "\n"
  230|  5.78M|                  "Unsupported range type given as input to a scanning "
  231|  5.78M|                  "function.\n"
  232|  5.78M|                  "A range needs to have a character type (value type) "
  233|  5.78M|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|  5.78M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|  5.78M|                  "to be included.\n"
  236|  5.78M|                  "See the scnlib documentation for more details.");
  237|  5.78M|    static_assert(
  238|  5.78M|        !std::is_same_v<T, custom_char_traits>,
  239|  5.78M|        "\n"
  240|  5.78M|        "Unsupported range type given as input to a scanning "
  241|  5.78M|        "function.\n"
  242|  5.78M|        "String types (std::basic_string, and std::basic_string_view) "
  243|  5.78M|        "need to use std::char_traits. Strings with custom Traits are "
  244|  5.78M|        "not supported.");
  245|  5.78M|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|  5.78M|                  "\n"
  247|  5.78M|                  "Unsupported range type given as input to a scanning "
  248|  5.78M|                  "function.\n"
  249|  5.78M|                  "file_marker_found cannot be used as an "
  250|  5.78M|                  "source range type to scn::scan.\n"
  251|  5.78M|                  "To read from stdin, use scn::input or scn::prompt, "
  252|  5.78M|                  "and do not provide an explicit source range, "
  253|  5.78M|                  "or use scn::scan with a FILE* directly.");
  254|  5.78M|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|  5.78M|                  "\n"
  256|  5.78M|                  "Unsupported range type given as input to a scanning "
  257|  5.78M|                  "function.\n"
  258|  5.78M|                  "In order to be scannable, a range needs to satisfy "
  259|  5.78M|                  "`forward_range`. `input_range` is not sufficient.");
  260|  5.78M|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|  5.78M|                  "\n"
  262|  5.78M|                  "Unsupported range type given as input to a scanning "
  263|  5.78M|                  "function.\n"
  264|  5.78M|                  "A range needs to model forward_range and have a valid "
  265|  5.78M|                  "character type (char or wchar_t) to be scannable.\n"
  266|  5.78M|                  "Examples of scannable ranges are std::string, "
  267|  5.78M|                  "std::string_view, "
  268|  5.78M|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|  5.78M|                  "See the scnlib documentation for more details.");
  270|       |
  271|  5.78M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|  5.78M|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
  152|  5.78M|{
  153|  5.78M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (153:19): [Folded - Ignored]
  ------------------
  154|  5.78M|        return std::basic_string_view{ranges::data(r),
  155|  5.78M|                                      ranges_polyfill::usize(r)};
  156|       |#if 0
  157|       |                    return make_string_scan_buffer(std::basic_string_view{
  158|       |                        ranges::data(r),
  159|       |                        static_cast<std::size_t>(ranges::size(r))});
  160|       |#endif
  161|  5.78M|    }
  162|  5.78M|    else {
  163|  5.78M|        return invalid_char_type{};
  164|  5.78M|    }
  165|  5.78M|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|   318k|{
  226|   318k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|   318k|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|   318k|                  "\n"
  230|   318k|                  "Unsupported range type given as input to a scanning "
  231|   318k|                  "function.\n"
  232|   318k|                  "A range needs to have a character type (value type) "
  233|   318k|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|   318k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|   318k|                  "to be included.\n"
  236|   318k|                  "See the scnlib documentation for more details.");
  237|   318k|    static_assert(
  238|   318k|        !std::is_same_v<T, custom_char_traits>,
  239|   318k|        "\n"
  240|   318k|        "Unsupported range type given as input to a scanning "
  241|   318k|        "function.\n"
  242|   318k|        "String types (std::basic_string, and std::basic_string_view) "
  243|   318k|        "need to use std::char_traits. Strings with custom Traits are "
  244|   318k|        "not supported.");
  245|   318k|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|   318k|                  "\n"
  247|   318k|                  "Unsupported range type given as input to a scanning "
  248|   318k|                  "function.\n"
  249|   318k|                  "file_marker_found cannot be used as an "
  250|   318k|                  "source range type to scn::scan.\n"
  251|   318k|                  "To read from stdin, use scn::input or scn::prompt, "
  252|   318k|                  "and do not provide an explicit source range, "
  253|   318k|                  "or use scn::scan with a FILE* directly.");
  254|   318k|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|   318k|                  "\n"
  256|   318k|                  "Unsupported range type given as input to a scanning "
  257|   318k|                  "function.\n"
  258|   318k|                  "In order to be scannable, a range needs to satisfy "
  259|   318k|                  "`forward_range`. `input_range` is not sufficient.");
  260|   318k|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|   318k|                  "\n"
  262|   318k|                  "Unsupported range type given as input to a scanning "
  263|   318k|                  "function.\n"
  264|   318k|                  "A range needs to model forward_range and have a valid "
  265|   318k|                  "character type (char or wchar_t) to be scannable.\n"
  266|   318k|                  "Examples of scannable ranges are std::string, "
  267|   318k|                  "std::string_view, "
  268|   318k|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|   318k|                  "See the scnlib documentation for more details.");
  270|       |
  271|   318k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|   318k|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEEEDaRKT_NS1_12priority_tagILm0EEE:
  195|   318k|{
  196|   318k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (196:19): [Folded - Ignored]
  ------------------
  197|   318k|        return file_marker_found{};
  198|   318k|    }
  199|   318k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (199:24): [Folded - Ignored]
  ------------------
  200|   318k|        if constexpr (ranges::input_range<Range>) {
  201|   318k|            return insufficient_range{};
  202|   318k|        }
  203|   318k|        else {
  204|   318k|            return invalid_input_range{};
  205|   318k|        }
  206|   318k|    }
  207|   318k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (207:24): [Folded - Ignored]
  ------------------
  208|   318k|        return invalid_char_type{};
  209|   318k|    }
  210|   318k|    else {
  211|   318k|        return make_forward_scan_buffer(r);
  212|   318k|    }
  213|   318k|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|  5.66M|{
  226|  5.66M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|  5.66M|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|  5.66M|                  "\n"
  230|  5.66M|                  "Unsupported range type given as input to a scanning "
  231|  5.66M|                  "function.\n"
  232|  5.66M|                  "A range needs to have a character type (value type) "
  233|  5.66M|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|  5.66M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|  5.66M|                  "to be included.\n"
  236|  5.66M|                  "See the scnlib documentation for more details.");
  237|  5.66M|    static_assert(
  238|  5.66M|        !std::is_same_v<T, custom_char_traits>,
  239|  5.66M|        "\n"
  240|  5.66M|        "Unsupported range type given as input to a scanning "
  241|  5.66M|        "function.\n"
  242|  5.66M|        "String types (std::basic_string, and std::basic_string_view) "
  243|  5.66M|        "need to use std::char_traits. Strings with custom Traits are "
  244|  5.66M|        "not supported.");
  245|  5.66M|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|  5.66M|                  "\n"
  247|  5.66M|                  "Unsupported range type given as input to a scanning "
  248|  5.66M|                  "function.\n"
  249|  5.66M|                  "file_marker_found cannot be used as an "
  250|  5.66M|                  "source range type to scn::scan.\n"
  251|  5.66M|                  "To read from stdin, use scn::input or scn::prompt, "
  252|  5.66M|                  "and do not provide an explicit source range, "
  253|  5.66M|                  "or use scn::scan with a FILE* directly.");
  254|  5.66M|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|  5.66M|                  "\n"
  256|  5.66M|                  "Unsupported range type given as input to a scanning "
  257|  5.66M|                  "function.\n"
  258|  5.66M|                  "In order to be scannable, a range needs to satisfy "
  259|  5.66M|                  "`forward_range`. `input_range` is not sufficient.");
  260|  5.66M|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|  5.66M|                  "\n"
  262|  5.66M|                  "Unsupported range type given as input to a scanning "
  263|  5.66M|                  "function.\n"
  264|  5.66M|                  "A range needs to model forward_range and have a valid "
  265|  5.66M|                  "character type (char or wchar_t) to be scannable.\n"
  266|  5.66M|                  "Examples of scannable ranges are std::string, "
  267|  5.66M|                  "std::string_view, "
  268|  5.66M|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|  5.66M|                  "See the scnlib documentation for more details.");
  270|       |
  271|  5.66M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|  5.66M|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
  152|  5.66M|{
  153|  5.66M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (153:19): [Folded - Ignored]
  ------------------
  154|  5.66M|        return std::basic_string_view{ranges::data(r),
  155|  5.66M|                                      ranges_polyfill::usize(r)};
  156|       |#if 0
  157|       |                    return make_string_scan_buffer(std::basic_string_view{
  158|       |                        ranges::data(r),
  159|       |                        static_cast<std::size_t>(ranges::size(r))});
  160|       |#endif
  161|  5.66M|    }
  162|  5.66M|    else {
  163|  5.66M|        return invalid_char_type{};
  164|  5.66M|    }
  165|  5.66M|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|   927k|{
  226|   927k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|   927k|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|   927k|                  "\n"
  230|   927k|                  "Unsupported range type given as input to a scanning "
  231|   927k|                  "function.\n"
  232|   927k|                  "A range needs to have a character type (value type) "
  233|   927k|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|   927k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|   927k|                  "to be included.\n"
  236|   927k|                  "See the scnlib documentation for more details.");
  237|   927k|    static_assert(
  238|   927k|        !std::is_same_v<T, custom_char_traits>,
  239|   927k|        "\n"
  240|   927k|        "Unsupported range type given as input to a scanning "
  241|   927k|        "function.\n"
  242|   927k|        "String types (std::basic_string, and std::basic_string_view) "
  243|   927k|        "need to use std::char_traits. Strings with custom Traits are "
  244|   927k|        "not supported.");
  245|   927k|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|   927k|                  "\n"
  247|   927k|                  "Unsupported range type given as input to a scanning "
  248|   927k|                  "function.\n"
  249|   927k|                  "file_marker_found cannot be used as an "
  250|   927k|                  "source range type to scn::scan.\n"
  251|   927k|                  "To read from stdin, use scn::input or scn::prompt, "
  252|   927k|                  "and do not provide an explicit source range, "
  253|   927k|                  "or use scn::scan with a FILE* directly.");
  254|   927k|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|   927k|                  "\n"
  256|   927k|                  "Unsupported range type given as input to a scanning "
  257|   927k|                  "function.\n"
  258|   927k|                  "In order to be scannable, a range needs to satisfy "
  259|   927k|                  "`forward_range`. `input_range` is not sufficient.");
  260|   927k|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|   927k|                  "\n"
  262|   927k|                  "Unsupported range type given as input to a scanning "
  263|   927k|                  "function.\n"
  264|   927k|                  "A range needs to model forward_range and have a valid "
  265|   927k|                  "character type (char or wchar_t) to be scannable.\n"
  266|   927k|                  "Examples of scannable ranges are std::string, "
  267|   927k|                  "std::string_view, "
  268|   927k|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|   927k|                  "See the scnlib documentation for more details.");
  270|       |
  271|   927k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|   927k|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEEEDaRKT_NS1_12priority_tagILm0EEE:
  195|   927k|{
  196|   927k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (196:19): [Folded - Ignored]
  ------------------
  197|   927k|        return file_marker_found{};
  198|   927k|    }
  199|   927k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (199:24): [Folded - Ignored]
  ------------------
  200|   927k|        if constexpr (ranges::input_range<Range>) {
  201|   927k|            return insufficient_range{};
  202|   927k|        }
  203|   927k|        else {
  204|   927k|            return invalid_input_range{};
  205|   927k|        }
  206|   927k|    }
  207|   927k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (207:24): [Folded - Ignored]
  ------------------
  208|   927k|        return invalid_char_type{};
  209|   927k|    }
  210|   927k|    else {
  211|   927k|        return make_forward_scan_buffer(r);
  212|   927k|    }
  213|   927k|}

_ZN3scn2v26detail10locale_refC2Ev:
   29|  9.11M|    constexpr locale_ref() = default;

_ZN3scn2v224basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
   44|  4.42M|    {
   45|  4.42M|    }
_ZN3scn2v224basic_scan_parse_contextIcE11next_arg_idEv:
   65|  4.42M|    {
   66|  4.42M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  153|  4.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.42M]
  |  |  ------------------
  ------------------
   67|      0|            on_error(
   68|      0|                "Cannot switch from manual to automatic argument indexing");
   69|      0|            return 0;
   70|      0|        }
   71|       |
   72|  4.42M|        auto id = static_cast<size_t>(m_next_arg_id++);
   73|  4.42M|        do_check_arg_id(id);
   74|  4.42M|        return id;
   75|  4.42M|    }
_ZN3scn2v224basic_scan_parse_contextIcE15do_check_arg_idEm:
  209|  4.42M|{
  210|  4.42M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (210:9): [Folded - Ignored]
  ------------------
  211|  4.42M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   54|      0|    ((major)*10'000'000 + (minor)*10'000 + (patch))
  ------------------
  |  Branch (211:10): [Folded - Ignored]
  |  Branch (211:22): [Folded - Ignored]
  ------------------
  212|       |        // The cast below will cause an error on gcc pre-12
  213|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
  214|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (214:13): [True: 0, False: 0]
  ------------------
  215|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
  216|      0|            SCN_UNLIKELY_ATTR
  217|      0|            on_error("Argument not found");
  218|      0|        }
  219|      0|    }
  220|  4.42M|}
_ZN3scn2v224basic_scan_parse_contextIcE10advance_toEPKc:
   60|  4.26M|    {
   61|  4.26M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
   62|  4.26M|    }
_ZNK3scn2v224basic_scan_parse_contextIcE5beginEv:
   49|  8.69M|    {
   50|  8.69M|        return m_format.data();
   51|  8.69M|    }
_ZN3scn2v224basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
   44|  4.95M|    {
   45|  4.95M|    }
_ZN3scn2v224basic_scan_parse_contextIwE11next_arg_idEv:
   65|  4.95M|    {
   66|  4.95M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  153|  4.95M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.95M]
  |  |  ------------------
  ------------------
   67|      0|            on_error(
   68|      0|                "Cannot switch from manual to automatic argument indexing");
   69|      0|            return 0;
   70|      0|        }
   71|       |
   72|  4.95M|        auto id = static_cast<size_t>(m_next_arg_id++);
   73|  4.95M|        do_check_arg_id(id);
   74|  4.95M|        return id;
   75|  4.95M|    }
_ZN3scn2v224basic_scan_parse_contextIwE15do_check_arg_idEm:
  209|  4.95M|{
  210|  4.95M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (210:9): [Folded - Ignored]
  ------------------
  211|  4.95M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   54|      0|    ((major)*10'000'000 + (minor)*10'000 + (patch))
  ------------------
  |  Branch (211:10): [Folded - Ignored]
  |  Branch (211:22): [Folded - Ignored]
  ------------------
  212|       |        // The cast below will cause an error on gcc pre-12
  213|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
  214|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (214:13): [True: 0, False: 0]
  ------------------
  215|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
  216|      0|            SCN_UNLIKELY_ATTR
  217|      0|            on_error("Argument not found");
  218|      0|        }
  219|      0|    }
  220|  4.95M|}
_ZN3scn2v224basic_scan_parse_contextIwE10advance_toEPKw:
   60|  4.45M|    {
   61|  4.45M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
   62|  4.45M|    }
_ZNK3scn2v224basic_scan_parse_contextIwE5beginEv:
   49|  9.41M|    {
   50|  9.41M|        return m_format.data();
   51|  9.41M|    }

_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlSH_T0_E_clIccEEDaSH_SR_:
  153|   401k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSE_T0_E_clIwcEEDaSE_SO_:
  153|  18.0M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlSH_T0_E_clIwcEEDaSH_SR_:
  153|  1.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZNK3scn2v24r_pf10usize_impl2fnclIRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  11.4M|    {
  482|  11.4M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  11.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  11.4M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSH_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSF_5beginEEclsr3stdE7declvalIRSK_EEEEE15difference_typeEE4typeELm8EEmNSH_13make_unsignedISR_E4typeEE4typeE_EEOSK_:
  472|  11.4M|    {
  473|  11.4M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  11.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  11.4M|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRKN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  5.66M|    {
  482|  5.66M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  5.66M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  5.66M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRKN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSH_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSF_5beginEEclsr3stdE7declvalIRSK_EEEEE15difference_typeEE4typeELm8EEmNSH_13make_unsignedISR_E4typeEE4typeE_EEOSK_:
  472|  5.66M|    {
  473|  5.66M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  5.66M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  5.66M|    }
_ZNK3scn2v24r_pf19prev_backtrack_impl2fnclIPKcEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm2EEEEEET_SB_:
  593|  1.52M|    {
  594|  1.52M|        return fn::impl(it, beg, detail::priority_tag<2>{});
  595|  1.52M|    }
_ZN3scn2v24r_pf19prev_backtrack_impl2fn4implIPKcEENSt3__19enable_ifIXsr10ranges_stdE22bidirectional_iteratorIT_EES9_E4typeES9_S9_NS0_6detail12priority_tagILm2EEE:
  563|  1.52M|    {
  564|  1.52M|        return ranges::prev(it);
  565|  1.52M|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  3.45M|    {
  482|  3.45M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  3.45M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  3.45M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSG_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSJ_EEEEE15difference_typeEE4typeELm8EEmNSG_13make_unsignedISQ_E4typeEE4typeE_EEOSJ_:
  472|  3.45M|    {
  473|  3.45M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  3.45M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  3.45M|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclIPKcEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_l:
  512|  3.97M|    {
  513|  3.97M|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|  3.97M|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implIPKcEEDaT_lNS0_6detail12priority_tagILm0EEE:
  504|  3.97M|    {
  505|  3.97M|        return ranges::next(it, n);
  506|  3.97M|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclIPKcS6_EEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_T0_:
  548|  3.93M|    {
  549|  3.93M|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|  3.93M|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implIPKcS6_EEDTclL_ZN4nano6ranges16function_objects8distanceEEfp_fp0_EET_T0_NS0_6detail12priority_tagILm0EEE:
  540|  3.93M|    {
  541|  3.93M|        return ranges::distance(lhs, rhs);
  542|  3.93M|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_l:
  512|   636k|    {
  513|   636k|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|   636k|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTcmcldtfp_13batch_advancefp0_Efp_EE4typeEE4typeET_lNS5_12priority_tagILm1EEE:
  497|   636k|    {
  498|   636k|        it.batch_advance(n);
  499|   636k|        return it;
  500|   636k|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_T0_:
  548|  27.6k|    {
  549|  27.6k|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|  27.6k|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTmicldtfp0_8positionEcldtfp_8positionEEE4typeEE4typeET_SH_NS5_12priority_tagILm1EEE:
  533|  27.6k|    {
  534|  27.6k|        return rhs.position() - lhs.position();
  535|  27.6k|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  3.37M|    {
  482|  3.37M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  3.37M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  3.37M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSG_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSJ_EEEEE15difference_typeEE4typeELm8EEmNSG_13make_unsignedISQ_E4typeEE4typeE_EEOSJ_:
  472|  3.37M|    {
  473|  3.37M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  3.37M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  3.37M|    }
_ZNK3scn2v24r_pf19prev_backtrack_impl2fnclIPKwEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm2EEEEEET_SB_:
  593|  1.33M|    {
  594|  1.33M|        return fn::impl(it, beg, detail::priority_tag<2>{});
  595|  1.33M|    }
_ZN3scn2v24r_pf19prev_backtrack_impl2fn4implIPKwEENSt3__19enable_ifIXsr10ranges_stdE22bidirectional_iteratorIT_EES9_E4typeES9_S9_NS0_6detail12priority_tagILm2EEE:
  563|  1.33M|    {
  564|  1.33M|        return ranges::prev(it);
  565|  1.33M|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclIPKwEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_l:
  512|  3.46M|    {
  513|  3.46M|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|  3.46M|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implIPKwEEDaT_lNS0_6detail12priority_tagILm0EEE:
  504|  3.46M|    {
  505|  3.46M|        return ranges::next(it, n);
  506|  3.46M|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclIPKwS6_EEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_T0_:
  548|  3.44M|    {
  549|  3.44M|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|  3.44M|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implIPKwS6_EEDTclL_ZN4nano6ranges16function_objects8distanceEEfp_fp0_EET_T0_NS0_6detail12priority_tagILm0EEE:
  540|  3.44M|    {
  541|  3.44M|        return ranges::distance(lhs, rhs);
  542|  3.44M|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_l:
  512|  1.85M|    {
  513|  1.85M|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|  1.85M|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTcmcldtfp_13batch_advancefp0_Efp_EE4typeEE4typeET_lNS5_12priority_tagILm1EEE:
  497|  1.85M|    {
  498|  1.85M|        it.batch_advance(n);
  499|  1.85M|        return it;
  500|  1.85M|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_T0_:
  548|  55.3k|    {
  549|  55.3k|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|  55.3k|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTmicldtfp0_8positionEcldtfp_8positionEEE4typeEE4typeET_SH_NS5_12priority_tagILm1EEE:
  533|  55.3k|    {
  534|  55.3k|        return rhs.position() - lhs.position();
  535|  55.3k|    }

_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_l:
  342|  5.49M|{
  343|  5.49M|    return {ranges::next(ranges::begin(source), n),
  344|  5.49M|            make_vscan_result_range_end(source)};
  345|  5.49M|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|  5.49M|{
  330|  5.49M|    return ranges::end(source);
  331|  5.49M|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJaEEC2ES9_ONSt3__15tupleIJaEEE:
  252|   712k|    {
  253|   712k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEC2EOSA_:
  103|  5.49M|    {
  104|  5.49M|    }
_ZN3scn2v26detail25scan_result_value_storageIJaEEC2EONSt3__15tupleIJaEEE:
   38|  1.32M|    {
   39|  1.32M|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEE5beginEv:
  120|  5.49M|    {
  121|  5.49M|        return ranges::begin(m_range);
  122|  5.49M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJhEEC2ES9_ONSt3__15tupleIJhEEE:
  252|   726k|    {
  253|   726k|    }
_ZN3scn2v26detail25scan_result_value_storageIJhEEC2EONSt3__15tupleIJhEEE:
   38|  1.37M|    {
   39|  1.37M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJiEEC2ES9_ONSt3__15tupleIJiEEE:
  252|  1.08M|    {
  253|  1.08M|    }
_ZN3scn2v26detail25scan_result_value_storageIJiEEC2EONSt3__15tupleIJiEEE:
   38|  2.03M|    {
   39|  2.03M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJjEEC2ES9_ONSt3__15tupleIJjEEE:
  252|   898k|    {
  253|   898k|    }
_ZN3scn2v26detail25scan_result_value_storageIJjEEC2EONSt3__15tupleIJjEEE:
   38|  1.71M|    {
   39|  1.71M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJxEEC2ES9_ONSt3__15tupleIJxEEE:
  252|  1.13M|    {
  253|  1.13M|    }
_ZN3scn2v26detail25scan_result_value_storageIJxEEC2EONSt3__15tupleIJxEEE:
   38|  2.13M|    {
   39|  2.13M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJyEEC2ES9_ONSt3__15tupleIJyEEE:
  252|   932k|    {
  253|   932k|    }
_ZN3scn2v26detail25scan_result_value_storageIJyEEC2EONSt3__15tupleIJyEEE:
   38|  1.78M|    {
   39|  1.78M|    }
_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_l:
  342|  27.6k|{
  343|  27.6k|    return {ranges::next(ranges::begin(source), n),
  344|  27.6k|            make_vscan_result_range_end(source)};
  345|  27.6k|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|  27.6k|{
  330|  27.6k|    return ranges::end(source);
  331|  27.6k|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJaEEC2ESF_ONS6_5tupleIJaEEE:
  252|  4.61k|    {
  253|  4.61k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEC2EOSG_:
  103|  27.6k|    {
  104|  27.6k|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEE5beginEv:
  120|  27.6k|    {
  121|  27.6k|        return ranges::begin(m_range);
  122|  27.6k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJhEEC2ESF_ONS6_5tupleIJhEEE:
  252|  4.61k|    {
  253|  4.61k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJiEEC2ESF_ONS6_5tupleIJiEEE:
  252|  4.61k|    {
  253|  4.61k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJjEEC2ESF_ONS6_5tupleIJjEEE:
  252|  4.61k|    {
  253|  4.61k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJxEEC2ESF_ONS6_5tupleIJxEEE:
  252|  4.61k|    {
  253|  4.61k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJyEEC2ESF_ONS6_5tupleIJyEEE:
  252|  4.61k|    {
  253|  4.61k|    }
_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_l:
  342|  4.79M|{
  343|  4.79M|    return {ranges::next(ranges::begin(source), n),
  344|  4.79M|            make_vscan_result_range_end(source)};
  345|  4.79M|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|  4.79M|{
  330|  4.79M|    return ranges::end(source);
  331|  4.79M|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJaEEC2ES9_ONSt3__15tupleIJaEEE:
  252|   611k|    {
  253|   611k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEC2EOSA_:
  103|  4.79M|    {
  104|  4.79M|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEE5beginEv:
  120|  4.79M|    {
  121|  4.79M|        return ranges::begin(m_range);
  122|  4.79M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJhEEC2ES9_ONSt3__15tupleIJhEEE:
  252|   645k|    {
  253|   645k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJiEEC2ES9_ONSt3__15tupleIJiEEE:
  252|   930k|    {
  253|   930k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJjEEC2ES9_ONSt3__15tupleIJjEEE:
  252|   799k|    {
  253|   799k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJxEEC2ES9_ONSt3__15tupleIJxEEE:
  252|   978k|    {
  253|   978k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJyEEC2ES9_ONSt3__15tupleIJyEEE:
  252|   831k|    {
  253|   831k|    }
_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_l:
  342|  55.3k|{
  343|  55.3k|    return {ranges::next(ranges::begin(source), n),
  344|  55.3k|            make_vscan_result_range_end(source)};
  345|  55.3k|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|  55.3k|{
  330|  55.3k|    return ranges::end(source);
  331|  55.3k|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJaEEC2ESF_ONS6_5tupleIJaEEE:
  252|      2|    {
  253|      2|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEC2EOSG_:
  103|  55.3k|    {
  104|  55.3k|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEE5beginEv:
  120|  55.3k|    {
  121|  55.3k|        return ranges::begin(m_range);
  122|  55.3k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJhEEC2ESF_ONS6_5tupleIJhEEE:
  252|      4|    {
  253|      4|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJiEEC2ESF_ONS6_5tupleIJiEEE:
  252|  13.8k|    {
  253|  13.8k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJjEEC2ESF_ONS6_5tupleIJjEEE:
  252|  13.8k|    {
  253|  13.8k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJxEEC2ESF_ONS6_5tupleIJxEEE:
  252|  13.8k|    {
  253|  13.8k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJyEEC2ESF_ONS6_5tupleIJyEEE:
  252|  13.8k|    {
  253|  13.8k|    }

_ZN3scn2v24scanIJaEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   341k|{
  117|   341k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   341k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   341k|}
_ZN3scn2v26detail9scan_implIcJaEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JaEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   341k|{
   77|   341k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   341k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   341k|    static_cast<    \
  |  |  247|   341k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   341k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   341k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   341k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   341k|    static_cast<    \
  |  |  247|   341k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   341k|    static_cast<    \
  |  |  247|   341k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   341k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   683k|{
   55|   683k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   683k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 46.1k, False: 637k]
  |  |  ------------------
  ------------------
   56|  46.1k|        return unexpected(result.error());
   57|  46.1k|    }
   58|   637k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   637k|    static_cast<    \
  |  |  247|   637k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   637k|    static_cast<    \
  |  |  247|   637k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   683k|}
_ZN3scn2v24scanIJaENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   341k|{
  201|   341k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   341k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   341k|                                                      format, {});
  203|   341k|}
_ZN3scn2v26detail19scan_localized_implIcJaENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   341k|{
  163|   341k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   341k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   341k|    static_cast<    \
  |  |  247|   341k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   341k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   341k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   341k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   341k|    static_cast<    \
  |  |  247|   341k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   341k|    static_cast<    \
  |  |  247|   341k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   341k|}
_ZN3scn2v210scan_valueIaN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  77.0k|{
  248|  77.0k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  77.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  77.0k|}
_ZN3scn2v26detail15scan_value_implIcaN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  77.0k|{
  229|  77.0k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  77.0k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  77.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  77.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  77.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  77.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.30k, False: 74.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.30k|    }                                                  \
  |  |  |  |   70|  77.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  74.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  74.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  74.7k|    static_cast<    \
  |  |  247|  74.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  74.7k|    static_cast<    \
  |  |  247|  74.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  77.0k|}
_ZN3scn2v24scanIJhEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   349k|{
  117|   349k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   349k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   349k|}
_ZN3scn2v26detail9scan_implIcJhEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JhEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   349k|{
   77|   349k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   349k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   349k|    static_cast<    \
  |  |  247|   349k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   349k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   349k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   349k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   349k|    static_cast<    \
  |  |  247|   349k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   349k|    static_cast<    \
  |  |  247|   349k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   349k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   698k|{
   55|   698k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   698k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 46.1k, False: 652k]
  |  |  ------------------
  ------------------
   56|  46.1k|        return unexpected(result.error());
   57|  46.1k|    }
   58|   652k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   652k|    static_cast<    \
  |  |  247|   652k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   652k|    static_cast<    \
  |  |  247|   652k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   698k|}
_ZN3scn2v24scanIJhENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   349k|{
  201|   349k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   349k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   349k|                                                      format, {});
  203|   349k|}
_ZN3scn2v26detail19scan_localized_implIcJhENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   349k|{
  163|   349k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   349k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   349k|    static_cast<    \
  |  |  247|   349k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   349k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   349k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   349k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   349k|    static_cast<    \
  |  |  247|   349k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   349k|    static_cast<    \
  |  |  247|   349k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   349k|}
_ZN3scn2v210scan_valueIhN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  76.6k|{
  248|  76.6k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  76.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  76.6k|}
_ZN3scn2v26detail15scan_value_implIchN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  76.6k|{
  229|  76.6k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  76.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  76.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  76.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  76.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  76.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.30k, False: 74.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.30k|    }                                                  \
  |  |  |  |   70|  76.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  74.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  74.3k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  74.3k|    static_cast<    \
  |  |  247|  74.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  74.3k|    static_cast<    \
  |  |  247|  74.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  76.6k|}
_ZN3scn2v24scanIJiEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   514k|{
  117|   514k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   514k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   514k|}
_ZN3scn2v26detail9scan_implIcJiEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JiEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   514k|{
   77|   514k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   514k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   514k|    static_cast<    \
  |  |  247|   514k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   514k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   514k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   514k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   514k|    static_cast<    \
  |  |  247|   514k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   514k|    static_cast<    \
  |  |  247|   514k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   514k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|  1.02M|{
   55|  1.02M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 46.1k, False: 982k]
  |  |  ------------------
  ------------------
   56|  46.1k|        return unexpected(result.error());
   57|  46.1k|    }
   58|   982k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   982k|    static_cast<    \
  |  |  247|   982k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   982k|    static_cast<    \
  |  |  247|   982k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  1.02M|}
_ZN3scn2v24scanIJiENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   514k|{
  201|   514k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   514k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   514k|                                                      format, {});
  203|   514k|}
_ZN3scn2v26detail19scan_localized_implIcJiENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   514k|{
  163|   514k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   514k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   514k|    static_cast<    \
  |  |  247|   514k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   514k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   514k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   514k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   514k|    static_cast<    \
  |  |  247|   514k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   514k|    static_cast<    \
  |  |  247|   514k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   514k|}
_ZN3scn2v210scan_valueIiN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|   103k|{
  248|   103k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|   103k|}
_ZN3scn2v26detail15scan_value_implIciN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|   103k|{
  229|   103k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|   103k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|   103k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   103k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   103k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.30k, False: 101k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.30k|    }                                                  \
  |  |  |  |   70|   103k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   101k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|   101k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|   101k|    static_cast<    \
  |  |  247|   101k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|   101k|    static_cast<    \
  |  |  247|   101k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|   103k|}
_ZN3scn2v24scanIJjEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   430k|{
  117|   430k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   430k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   430k|}
_ZN3scn2v26detail9scan_implIcJjEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JjEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   430k|{
   77|   430k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   430k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   430k|    static_cast<    \
  |  |  247|   430k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   430k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   430k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   430k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   430k|    static_cast<    \
  |  |  247|   430k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   430k|    static_cast<    \
  |  |  247|   430k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   430k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   860k|{
   55|   860k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   860k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 46.1k, False: 814k]
  |  |  ------------------
  ------------------
   56|  46.1k|        return unexpected(result.error());
   57|  46.1k|    }
   58|   814k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   814k|    static_cast<    \
  |  |  247|   814k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   814k|    static_cast<    \
  |  |  247|   814k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   860k|}
_ZN3scn2v24scanIJjENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   430k|{
  201|   430k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   430k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   430k|                                                      format, {});
  203|   430k|}
_ZN3scn2v26detail19scan_localized_implIcJjENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   430k|{
  163|   430k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   430k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   430k|    static_cast<    \
  |  |  247|   430k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   430k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   430k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   430k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   430k|    static_cast<    \
  |  |  247|   430k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   430k|    static_cast<    \
  |  |  247|   430k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   430k|}
_ZN3scn2v210scan_valueIjN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  87.1k|{
  248|  87.1k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  87.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  87.1k|}
_ZN3scn2v26detail15scan_value_implIcjN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  87.1k|{
  229|  87.1k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  87.1k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  87.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  87.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  87.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  87.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.30k, False: 84.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.30k|    }                                                  \
  |  |  |  |   70|  87.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  84.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  84.8k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  84.8k|    static_cast<    \
  |  |  247|  84.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  84.8k|    static_cast<    \
  |  |  247|  84.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  87.1k|}
_ZN3scn2v24scanIJxEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   538k|{
  117|   538k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   538k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   538k|}
_ZN3scn2v26detail9scan_implIcJxEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JxEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   538k|{
   77|   538k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   538k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   538k|    static_cast<    \
  |  |  247|   538k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   538k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   538k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   538k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   538k|    static_cast<    \
  |  |  247|   538k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   538k|    static_cast<    \
  |  |  247|   538k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   538k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|  1.07M|{
   55|  1.07M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 46.1k, False: 1.03M]
  |  |  ------------------
  ------------------
   56|  46.1k|        return unexpected(result.error());
   57|  46.1k|    }
   58|  1.03M|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.03M|    static_cast<    \
  |  |  247|  1.03M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.03M|    static_cast<    \
  |  |  247|  1.03M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  1.07M|}
_ZN3scn2v24scanIJxENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   538k|{
  201|   538k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   538k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   538k|                                                      format, {});
  203|   538k|}
_ZN3scn2v26detail19scan_localized_implIcJxENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   538k|{
  163|   538k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   538k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   538k|    static_cast<    \
  |  |  247|   538k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   538k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   538k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   538k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   538k|    static_cast<    \
  |  |  247|   538k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   538k|    static_cast<    \
  |  |  247|   538k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   538k|}
_ZN3scn2v210scan_valueIxN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|   109k|{
  248|   109k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|   109k|}
_ZN3scn2v26detail15scan_value_implIcxN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|   109k|{
  229|   109k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|   109k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|   109k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   109k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   109k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.30k, False: 106k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.30k|    }                                                  \
  |  |  |  |   70|   109k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   106k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|   106k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|   106k|    static_cast<    \
  |  |  247|   106k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|   106k|    static_cast<    \
  |  |  247|   106k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|   109k|}
_ZN3scn2v24scanIJyEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   445k|{
  117|   445k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   445k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   445k|}
_ZN3scn2v26detail9scan_implIcJyEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JyEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   445k|{
   77|   445k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   445k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   445k|    static_cast<    \
  |  |  247|   445k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   445k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   445k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   445k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   445k|    static_cast<    \
  |  |  247|   445k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   445k|    static_cast<    \
  |  |  247|   445k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   445k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   890k|{
   55|   890k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   890k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 46.1k, False: 844k]
  |  |  ------------------
  ------------------
   56|  46.1k|        return unexpected(result.error());
   57|  46.1k|    }
   58|   844k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   844k|    static_cast<    \
  |  |  247|   844k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   844k|    static_cast<    \
  |  |  247|   844k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   890k|}
_ZN3scn2v24scanIJyENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   445k|{
  201|   445k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   445k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   445k|                                                      format, {});
  203|   445k|}
_ZN3scn2v26detail19scan_localized_implIcJyENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   445k|{
  163|   445k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   445k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   445k|    static_cast<    \
  |  |  247|   445k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   445k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   445k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   445k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   445k|    static_cast<    \
  |  |  247|   445k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   445k|    static_cast<    \
  |  |  247|   445k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   445k|}
_ZN3scn2v210scan_valueIyN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  90.4k|{
  248|  90.4k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  90.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  90.4k|}
_ZN3scn2v26detail15scan_value_implIcyN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  90.4k|{
  229|  90.4k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  90.4k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  90.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  90.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  90.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  90.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.30k, False: 88.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.30k|    }                                                  \
  |  |  |  |   70|  90.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  88.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  88.1k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  88.1k|    static_cast<    \
  |  |  247|  88.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  88.1k|    static_cast<    \
  |  |  247|  88.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  90.4k|}
_ZN3scn2v24scanIJaEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  25.3k|{
  117|  25.3k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  25.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  25.3k|}
_ZN3scn2v26detail9scan_implIcJaEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  25.3k|{
   77|  25.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  25.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  25.3k|    static_cast<    \
  |  |  247|  25.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  25.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  25.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  25.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  25.3k|    static_cast<    \
  |  |  247|  25.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  25.3k|    static_cast<    \
  |  |  247|  25.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  25.3k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  50.7k|{
   55|  50.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  50.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 46.1k, False: 4.61k]
  |  |  ------------------
  ------------------
   56|  46.1k|        return unexpected(result.error());
   57|  46.1k|    }
   58|  4.61k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  4.61k|    static_cast<    \
  |  |  247|  4.61k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  4.61k|    static_cast<    \
  |  |  247|  4.61k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  50.7k|}
_ZN3scn2v24scanIJaENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  25.3k|{
  201|  25.3k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  25.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  25.3k|                                                      format, {});
  203|  25.3k|}
_ZN3scn2v26detail19scan_localized_implIcJaENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  25.3k|{
  163|  25.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  25.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  25.3k|    static_cast<    \
  |  |  247|  25.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  25.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  25.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  25.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  25.3k|    static_cast<    \
  |  |  247|  25.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  25.3k|    static_cast<    \
  |  |  247|  25.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  25.3k|}
_ZN3scn2v210scan_valueIaN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  2.30k|{
  248|  2.30k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  2.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  2.30k|}
_ZN3scn2v26detail15scan_value_implIcaN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  2.30k|{
  229|  2.30k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  2.30k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  2.30k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.30k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.30k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.30k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.30k|    }                                                  \
  |  |  |  |   70|  2.30k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  2.30k|}
_ZN3scn2v24scanIJhEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  25.3k|{
  117|  25.3k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  25.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  25.3k|}
_ZN3scn2v26detail9scan_implIcJhEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  25.3k|{
   77|  25.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  25.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  25.3k|    static_cast<    \
  |  |  247|  25.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  25.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  25.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  25.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  25.3k|    static_cast<    \
  |  |  247|  25.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  25.3k|    static_cast<    \
  |  |  247|  25.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  25.3k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  50.7k|{
   55|  50.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  50.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 46.1k, False: 4.61k]
  |  |  ------------------
  ------------------
   56|  46.1k|        return unexpected(result.error());
   57|  46.1k|    }
   58|  4.61k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  4.61k|    static_cast<    \
  |  |  247|  4.61k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  4.61k|    static_cast<    \
  |  |  247|  4.61k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  50.7k|}
_ZN3scn2v24scanIJhENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  25.3k|{
  201|  25.3k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  25.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  25.3k|                                                      format, {});
  203|  25.3k|}
_ZN3scn2v26detail19scan_localized_implIcJhENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  25.3k|{
  163|  25.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  25.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  25.3k|    static_cast<    \
  |  |  247|  25.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  25.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  25.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  25.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  25.3k|    static_cast<    \
  |  |  247|  25.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  25.3k|    static_cast<    \
  |  |  247|  25.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  25.3k|}
_ZN3scn2v210scan_valueIhN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  2.30k|{
  248|  2.30k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  2.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  2.30k|}
_ZN3scn2v26detail15scan_value_implIchN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  2.30k|{
  229|  2.30k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  2.30k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  2.30k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.30k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.30k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.30k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.30k|    }                                                  \
  |  |  |  |   70|  2.30k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  2.30k|}
_ZN3scn2v24scanIJiEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  25.3k|{
  117|  25.3k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  25.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  25.3k|}
_ZN3scn2v26detail9scan_implIcJiEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  25.3k|{
   77|  25.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  25.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  25.3k|    static_cast<    \
  |  |  247|  25.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  25.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  25.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  25.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  25.3k|    static_cast<    \
  |  |  247|  25.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  25.3k|    static_cast<    \
  |  |  247|  25.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  25.3k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  50.7k|{
   55|  50.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  50.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 46.1k, False: 4.61k]
  |  |  ------------------
  ------------------
   56|  46.1k|        return unexpected(result.error());
   57|  46.1k|    }
   58|  4.61k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  4.61k|    static_cast<    \
  |  |  247|  4.61k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  4.61k|    static_cast<    \
  |  |  247|  4.61k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  50.7k|}
_ZN3scn2v24scanIJiENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  25.3k|{
  201|  25.3k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  25.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  25.3k|                                                      format, {});
  203|  25.3k|}
_ZN3scn2v26detail19scan_localized_implIcJiENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  25.3k|{
  163|  25.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  25.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  25.3k|    static_cast<    \
  |  |  247|  25.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  25.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  25.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  25.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  25.3k|    static_cast<    \
  |  |  247|  25.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  25.3k|    static_cast<    \
  |  |  247|  25.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  25.3k|}
_ZN3scn2v210scan_valueIiN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  2.30k|{
  248|  2.30k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  2.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  2.30k|}
_ZN3scn2v26detail15scan_value_implIciN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  2.30k|{
  229|  2.30k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  2.30k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  2.30k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.30k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.30k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.30k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.30k|    }                                                  \
  |  |  |  |   70|  2.30k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  2.30k|}
_ZN3scn2v24scanIJjEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  25.3k|{
  117|  25.3k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  25.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  25.3k|}
_ZN3scn2v26detail9scan_implIcJjEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  25.3k|{
   77|  25.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  25.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  25.3k|    static_cast<    \
  |  |  247|  25.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  25.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  25.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  25.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  25.3k|    static_cast<    \
  |  |  247|  25.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  25.3k|    static_cast<    \
  |  |  247|  25.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  25.3k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  50.7k|{
   55|  50.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  50.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 46.1k, False: 4.61k]
  |  |  ------------------
  ------------------
   56|  46.1k|        return unexpected(result.error());
   57|  46.1k|    }
   58|  4.61k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  4.61k|    static_cast<    \
  |  |  247|  4.61k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  4.61k|    static_cast<    \
  |  |  247|  4.61k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  50.7k|}
_ZN3scn2v24scanIJjENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  25.3k|{
  201|  25.3k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  25.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  25.3k|                                                      format, {});
  203|  25.3k|}
_ZN3scn2v26detail19scan_localized_implIcJjENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  25.3k|{
  163|  25.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  25.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  25.3k|    static_cast<    \
  |  |  247|  25.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  25.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  25.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  25.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  25.3k|    static_cast<    \
  |  |  247|  25.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  25.3k|    static_cast<    \
  |  |  247|  25.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  25.3k|}
_ZN3scn2v210scan_valueIjN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  2.30k|{
  248|  2.30k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  2.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  2.30k|}
_ZN3scn2v26detail15scan_value_implIcjN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  2.30k|{
  229|  2.30k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  2.30k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  2.30k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.30k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.30k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.30k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.30k|    }                                                  \
  |  |  |  |   70|  2.30k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  2.30k|}
_ZN3scn2v24scanIJxEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  25.3k|{
  117|  25.3k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  25.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  25.3k|}
_ZN3scn2v26detail9scan_implIcJxEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  25.3k|{
   77|  25.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  25.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  25.3k|    static_cast<    \
  |  |  247|  25.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  25.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  25.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  25.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  25.3k|    static_cast<    \
  |  |  247|  25.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  25.3k|    static_cast<    \
  |  |  247|  25.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  25.3k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  50.7k|{
   55|  50.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  50.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 46.1k, False: 4.61k]
  |  |  ------------------
  ------------------
   56|  46.1k|        return unexpected(result.error());
   57|  46.1k|    }
   58|  4.61k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  4.61k|    static_cast<    \
  |  |  247|  4.61k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  4.61k|    static_cast<    \
  |  |  247|  4.61k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  50.7k|}
_ZN3scn2v24scanIJxENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  25.3k|{
  201|  25.3k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  25.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  25.3k|                                                      format, {});
  203|  25.3k|}
_ZN3scn2v26detail19scan_localized_implIcJxENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  25.3k|{
  163|  25.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  25.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  25.3k|    static_cast<    \
  |  |  247|  25.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  25.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  25.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  25.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  25.3k|    static_cast<    \
  |  |  247|  25.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  25.3k|    static_cast<    \
  |  |  247|  25.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  25.3k|}
_ZN3scn2v210scan_valueIxN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  2.30k|{
  248|  2.30k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  2.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  2.30k|}
_ZN3scn2v26detail15scan_value_implIcxN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  2.30k|{
  229|  2.30k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  2.30k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  2.30k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.30k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.30k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.30k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.30k|    }                                                  \
  |  |  |  |   70|  2.30k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  2.30k|}
_ZN3scn2v24scanIJyEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  25.3k|{
  117|  25.3k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  25.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  25.3k|}
_ZN3scn2v26detail9scan_implIcJyEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  25.3k|{
   77|  25.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  25.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  25.3k|    static_cast<    \
  |  |  247|  25.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  25.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  25.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  25.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  25.3k|    static_cast<    \
  |  |  247|  25.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  25.3k|    static_cast<    \
  |  |  247|  25.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  25.3k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  50.7k|{
   55|  50.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  50.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 46.1k, False: 4.61k]
  |  |  ------------------
  ------------------
   56|  46.1k|        return unexpected(result.error());
   57|  46.1k|    }
   58|  4.61k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  4.61k|    static_cast<    \
  |  |  247|  4.61k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  4.61k|    static_cast<    \
  |  |  247|  4.61k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  50.7k|}
_ZN3scn2v24scanIJyENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  25.3k|{
  201|  25.3k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  25.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  25.3k|                                                      format, {});
  203|  25.3k|}
_ZN3scn2v26detail19scan_localized_implIcJyENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  25.3k|{
  163|  25.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  25.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  25.3k|    static_cast<    \
  |  |  247|  25.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  25.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  25.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  25.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  25.3k|    static_cast<    \
  |  |  247|  25.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  25.3k|    static_cast<    \
  |  |  247|  25.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  25.3k|}
_ZN3scn2v210scan_valueIyN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  2.30k|{
  248|  2.30k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  2.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  2.30k|}
_ZN3scn2v26detail15scan_value_implIcyN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  2.30k|{
  229|  2.30k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  2.30k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  2.30k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.30k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.30k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.30k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.30k|    }                                                  \
  |  |  |  |   70|  2.30k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  2.30k|}
_ZN3scn2v26detail9scan_implIwJaEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JaEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   342k|{
   77|   342k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   342k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   342k|    static_cast<    \
  |  |  247|   342k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   342k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   342k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   342k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   342k|    static_cast<    \
  |  |  247|   342k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   342k|    static_cast<    \
  |  |  247|   342k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   342k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   685k|{
   55|   685k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   685k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 138k, False: 547k]
  |  |  ------------------
  ------------------
   56|   138k|        return unexpected(result.error());
   57|   138k|    }
   58|   547k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   547k|    static_cast<    \
  |  |  247|   547k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   547k|    static_cast<    \
  |  |  247|   547k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   685k|}
_ZN3scn2v26detail19scan_localized_implIwJaENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   342k|{
  163|   342k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   342k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   342k|    static_cast<    \
  |  |  247|   342k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   342k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   342k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   342k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   342k|    static_cast<    \
  |  |  247|   342k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   342k|    static_cast<    \
  |  |  247|   342k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   342k|}
_ZN3scn2v26detail15scan_value_implIwaN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  71.7k|{
  229|  71.7k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  71.7k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  71.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  71.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  71.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  71.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.92k, False: 64.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.92k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.92k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.92k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.92k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.92k|    }                                                  \
  |  |  |  |   70|  71.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  64.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  64.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  64.7k|    static_cast<    \
  |  |  247|  64.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  64.7k|    static_cast<    \
  |  |  247|  64.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  71.7k|}
_ZN3scn2v26detail9scan_implIwJhEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JhEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   358k|{
   77|   358k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   358k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   358k|    static_cast<    \
  |  |  247|   358k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   358k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   358k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   358k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   358k|    static_cast<    \
  |  |  247|   358k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   358k|    static_cast<    \
  |  |  247|   358k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   358k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   717k|{
   55|   717k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   717k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 138k, False: 578k]
  |  |  ------------------
  ------------------
   56|   138k|        return unexpected(result.error());
   57|   138k|    }
   58|   578k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   578k|    static_cast<    \
  |  |  247|   578k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   578k|    static_cast<    \
  |  |  247|   578k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   717k|}
_ZN3scn2v26detail19scan_localized_implIwJhENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   358k|{
  163|   358k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   358k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   358k|    static_cast<    \
  |  |  247|   358k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   358k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   358k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   358k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   358k|    static_cast<    \
  |  |  247|   358k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   358k|    static_cast<    \
  |  |  247|   358k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   358k|}
_ZN3scn2v26detail15scan_value_implIwhN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  73.1k|{
  229|  73.1k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  73.1k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  73.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  73.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  73.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  73.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.92k, False: 66.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.92k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.92k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.92k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.92k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.92k|    }                                                  \
  |  |  |  |   70|  73.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  66.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  66.2k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  66.2k|    static_cast<    \
  |  |  247|  66.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  66.2k|    static_cast<    \
  |  |  247|  66.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  73.1k|}
_ZN3scn2v26detail9scan_implIwJiEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JiEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   490k|{
   77|   490k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   490k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   490k|    static_cast<    \
  |  |  247|   490k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   490k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   490k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   490k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   490k|    static_cast<    \
  |  |  247|   490k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   490k|    static_cast<    \
  |  |  247|   490k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   490k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   981k|{
   55|   981k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   981k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 138k, False: 843k]
  |  |  ------------------
  ------------------
   56|   138k|        return unexpected(result.error());
   57|   138k|    }
   58|   843k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   843k|    static_cast<    \
  |  |  247|   843k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   843k|    static_cast<    \
  |  |  247|   843k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   981k|}
_ZN3scn2v26detail19scan_localized_implIwJiENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   490k|{
  163|   490k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   490k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   490k|    static_cast<    \
  |  |  247|   490k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   490k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   490k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   490k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   490k|    static_cast<    \
  |  |  247|   490k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   490k|    static_cast<    \
  |  |  247|   490k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   490k|}
_ZN3scn2v26detail15scan_value_implIwiN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  93.8k|{
  229|  93.8k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  93.8k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  93.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  93.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  93.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  93.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.92k, False: 86.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.92k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.92k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.92k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.92k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.92k|    }                                                  \
  |  |  |  |   70|  93.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  86.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  86.9k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  86.9k|    static_cast<    \
  |  |  247|  86.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  86.9k|    static_cast<    \
  |  |  247|  86.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  93.8k|}
_ZN3scn2v26detail9scan_implIwJjEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JjEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   431k|{
   77|   431k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   431k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   431k|    static_cast<    \
  |  |  247|   431k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   431k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   431k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   431k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   431k|    static_cast<    \
  |  |  247|   431k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   431k|    static_cast<    \
  |  |  247|   431k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   431k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   862k|{
   55|   862k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   862k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 138k, False: 724k]
  |  |  ------------------
  ------------------
   56|   138k|        return unexpected(result.error());
   57|   138k|    }
   58|   724k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   724k|    static_cast<    \
  |  |  247|   724k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   724k|    static_cast<    \
  |  |  247|   724k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   862k|}
_ZN3scn2v26detail19scan_localized_implIwJjENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   431k|{
  163|   431k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   431k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   431k|    static_cast<    \
  |  |  247|   431k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   431k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   431k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   431k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   431k|    static_cast<    \
  |  |  247|   431k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   431k|    static_cast<    \
  |  |  247|   431k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   431k|}
_ZN3scn2v26detail15scan_value_implIwjN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  82.3k|{
  229|  82.3k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  82.3k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  82.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  82.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  82.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  82.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.92k, False: 75.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.92k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.92k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.92k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.92k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.92k|    }                                                  \
  |  |  |  |   70|  82.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  75.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  75.3k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  75.3k|    static_cast<    \
  |  |  247|  75.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  75.3k|    static_cast<    \
  |  |  247|  75.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  82.3k|}
_ZN3scn2v26detail9scan_implIwJxEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JxEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   512k|{
   77|   512k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   512k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   512k|    static_cast<    \
  |  |  247|   512k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   512k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   512k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   512k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   512k|    static_cast<    \
  |  |  247|   512k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   512k|    static_cast<    \
  |  |  247|   512k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   512k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|  1.02M|{
   55|  1.02M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 138k, False: 886k]
  |  |  ------------------
  ------------------
   56|   138k|        return unexpected(result.error());
   57|   138k|    }
   58|   886k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   886k|    static_cast<    \
  |  |  247|   886k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   886k|    static_cast<    \
  |  |  247|   886k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  1.02M|}
_ZN3scn2v26detail19scan_localized_implIwJxENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   512k|{
  163|   512k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   512k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   512k|    static_cast<    \
  |  |  247|   512k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   512k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   512k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   512k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   512k|    static_cast<    \
  |  |  247|   512k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   512k|    static_cast<    \
  |  |  247|   512k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   512k|}
_ZN3scn2v26detail15scan_value_implIwxN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  98.9k|{
  229|  98.9k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  98.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  98.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  98.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  98.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  98.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.92k, False: 92.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.92k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.92k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.92k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.92k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.92k|    }                                                  \
  |  |  |  |   70|  98.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  92.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  92.0k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  92.0k|    static_cast<    \
  |  |  247|  92.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  92.0k|    static_cast<    \
  |  |  247|  92.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  98.9k|}
_ZN3scn2v26detail9scan_implIwJyEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JyEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   445k|{
   77|   445k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   445k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   445k|    static_cast<    \
  |  |  247|   445k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   445k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   445k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   445k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   445k|    static_cast<    \
  |  |  247|   445k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   445k|    static_cast<    \
  |  |  247|   445k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   445k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   891k|{
   55|   891k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   891k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 138k, False: 753k]
  |  |  ------------------
  ------------------
   56|   138k|        return unexpected(result.error());
   57|   138k|    }
   58|   753k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   753k|    static_cast<    \
  |  |  247|   753k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   753k|    static_cast<    \
  |  |  247|   753k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   891k|}
_ZN3scn2v26detail19scan_localized_implIwJyENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   445k|{
  163|   445k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   445k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   445k|    static_cast<    \
  |  |  247|   445k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   445k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   445k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   445k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   445k|    static_cast<    \
  |  |  247|   445k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   445k|    static_cast<    \
  |  |  247|   445k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   445k|}
_ZN3scn2v26detail15scan_value_implIwyN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  85.4k|{
  229|  85.4k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  85.4k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  85.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  85.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  85.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  85.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.92k, False: 78.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.92k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.92k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.92k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.92k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.92k|    }                                                  \
  |  |  |  |   70|  85.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  78.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  78.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  78.5k|    static_cast<    \
  |  |  247|  78.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  78.5k|    static_cast<    \
  |  |  247|  78.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  85.4k|}
_ZN3scn2v26detail9scan_implIwJaEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  69.2k|{
   77|  69.2k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  69.2k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  69.2k|    static_cast<    \
  |  |  247|  69.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  69.2k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  69.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  69.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  69.2k|    static_cast<    \
  |  |  247|  69.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  69.2k|    static_cast<    \
  |  |  247|  69.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  69.2k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   138k|{
   55|   138k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   138k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 138k, False: 2]
  |  |  ------------------
  ------------------
   56|   138k|        return unexpected(result.error());
   57|   138k|    }
   58|      2|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      2|    static_cast<    \
  |  |  247|      2|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      2|    static_cast<    \
  |  |  247|      2|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   138k|}
_ZN3scn2v26detail19scan_localized_implIwJaENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  69.2k|{
  163|  69.2k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  69.2k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  69.2k|    static_cast<    \
  |  |  247|  69.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  69.2k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  69.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  69.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  69.2k|    static_cast<    \
  |  |  247|  69.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  69.2k|    static_cast<    \
  |  |  247|  69.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  69.2k|}
_ZN3scn2v26detail15scan_value_implIwaN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  6.92k|{
  229|  6.92k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  6.92k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  6.92k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.92k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.92k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.92k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.92k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.92k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.92k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.92k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.92k|    }                                                  \
  |  |  |  |   70|  6.92k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  6.92k|}
_ZN3scn2v26detail9scan_implIwJhEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  69.2k|{
   77|  69.2k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  69.2k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  69.2k|    static_cast<    \
  |  |  247|  69.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  69.2k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  69.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  69.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  69.2k|    static_cast<    \
  |  |  247|  69.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  69.2k|    static_cast<    \
  |  |  247|  69.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  69.2k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   138k|{
   55|   138k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   138k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 138k, False: 4]
  |  |  ------------------
  ------------------
   56|   138k|        return unexpected(result.error());
   57|   138k|    }
   58|      4|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      4|    static_cast<    \
  |  |  247|      4|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      4|    static_cast<    \
  |  |  247|      4|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   138k|}
_ZN3scn2v26detail19scan_localized_implIwJhENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  69.2k|{
  163|  69.2k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  69.2k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  69.2k|    static_cast<    \
  |  |  247|  69.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  69.2k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  69.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  69.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  69.2k|    static_cast<    \
  |  |  247|  69.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  69.2k|    static_cast<    \
  |  |  247|  69.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  69.2k|}
_ZN3scn2v26detail15scan_value_implIwhN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  6.92k|{
  229|  6.92k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  6.92k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  6.92k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.92k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.92k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.92k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.92k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.92k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.92k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.92k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.92k|    }                                                  \
  |  |  |  |   70|  6.92k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  6.92k|}
_ZN3scn2v26detail9scan_implIwJiEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  76.1k|{
   77|  76.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  76.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  76.1k|    static_cast<    \
  |  |  247|  76.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  76.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  76.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  76.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  76.1k|    static_cast<    \
  |  |  247|  76.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  76.1k|    static_cast<    \
  |  |  247|  76.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  76.1k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   152k|{
   55|   152k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   152k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 138k, False: 13.8k]
  |  |  ------------------
  ------------------
   56|   138k|        return unexpected(result.error());
   57|   138k|    }
   58|  13.8k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  13.8k|    static_cast<    \
  |  |  247|  13.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  13.8k|    static_cast<    \
  |  |  247|  13.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   152k|}
_ZN3scn2v26detail19scan_localized_implIwJiENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  76.1k|{
  163|  76.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  76.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  76.1k|    static_cast<    \
  |  |  247|  76.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  76.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  76.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  76.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  76.1k|    static_cast<    \
  |  |  247|  76.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  76.1k|    static_cast<    \
  |  |  247|  76.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  76.1k|}
_ZN3scn2v26detail15scan_value_implIwiN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  6.92k|{
  229|  6.92k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  6.92k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  6.92k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.92k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.92k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.92k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.92k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.92k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.92k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.92k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.92k|    }                                                  \
  |  |  |  |   70|  6.92k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  6.92k|}
_ZN3scn2v26detail9scan_implIwJjEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  76.1k|{
   77|  76.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  76.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  76.1k|    static_cast<    \
  |  |  247|  76.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  76.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  76.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  76.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  76.1k|    static_cast<    \
  |  |  247|  76.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  76.1k|    static_cast<    \
  |  |  247|  76.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  76.1k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   152k|{
   55|   152k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   152k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 138k, False: 13.8k]
  |  |  ------------------
  ------------------
   56|   138k|        return unexpected(result.error());
   57|   138k|    }
   58|  13.8k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  13.8k|    static_cast<    \
  |  |  247|  13.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  13.8k|    static_cast<    \
  |  |  247|  13.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   152k|}
_ZN3scn2v26detail19scan_localized_implIwJjENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  76.1k|{
  163|  76.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  76.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  76.1k|    static_cast<    \
  |  |  247|  76.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  76.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  76.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  76.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  76.1k|    static_cast<    \
  |  |  247|  76.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  76.1k|    static_cast<    \
  |  |  247|  76.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  76.1k|}
_ZN3scn2v26detail15scan_value_implIwjN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  6.92k|{
  229|  6.92k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  6.92k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  6.92k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.92k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.92k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.92k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.92k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.92k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.92k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.92k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.92k|    }                                                  \
  |  |  |  |   70|  6.92k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  6.92k|}
_ZN3scn2v26detail9scan_implIwJxEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  76.1k|{
   77|  76.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  76.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  76.1k|    static_cast<    \
  |  |  247|  76.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  76.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  76.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  76.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  76.1k|    static_cast<    \
  |  |  247|  76.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  76.1k|    static_cast<    \
  |  |  247|  76.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  76.1k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   152k|{
   55|   152k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   152k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 138k, False: 13.8k]
  |  |  ------------------
  ------------------
   56|   138k|        return unexpected(result.error());
   57|   138k|    }
   58|  13.8k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  13.8k|    static_cast<    \
  |  |  247|  13.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  13.8k|    static_cast<    \
  |  |  247|  13.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   152k|}
_ZN3scn2v26detail19scan_localized_implIwJxENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  76.1k|{
  163|  76.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  76.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  76.1k|    static_cast<    \
  |  |  247|  76.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  76.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  76.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  76.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  76.1k|    static_cast<    \
  |  |  247|  76.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  76.1k|    static_cast<    \
  |  |  247|  76.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  76.1k|}
_ZN3scn2v26detail15scan_value_implIwxN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  6.92k|{
  229|  6.92k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  6.92k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  6.92k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.92k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.92k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.92k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.92k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.92k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.92k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.92k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.92k|    }                                                  \
  |  |  |  |   70|  6.92k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  6.92k|}
_ZN3scn2v26detail9scan_implIwJyEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  76.1k|{
   77|  76.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  76.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  76.1k|    static_cast<    \
  |  |  247|  76.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  76.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  76.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  76.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  76.1k|    static_cast<    \
  |  |  247|  76.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  76.1k|    static_cast<    \
  |  |  247|  76.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  76.1k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   152k|{
   55|   152k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   152k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 138k, False: 13.8k]
  |  |  ------------------
  ------------------
   56|   138k|        return unexpected(result.error());
   57|   138k|    }
   58|  13.8k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  13.8k|    static_cast<    \
  |  |  247|  13.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  13.8k|    static_cast<    \
  |  |  247|  13.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   152k|}
_ZN3scn2v26detail19scan_localized_implIwJyENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  76.1k|{
  163|  76.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  76.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  76.1k|    static_cast<    \
  |  |  247|  76.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  76.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  76.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  76.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  76.1k|    static_cast<    \
  |  |  247|  76.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  76.1k|    static_cast<    \
  |  |  247|  76.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  76.1k|}
_ZN3scn2v26detail15scan_value_implIwyN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  6.92k|{
  229|  6.92k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  6.92k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  6.92k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.92k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.92k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.92k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.92k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.92k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.92k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.92k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.92k|    }                                                  \
  |  |  |  |   70|  6.92k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  6.92k|}

_ZN3scn2v26detail24make_forward_scan_bufferIRKN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEEDaOT_:
  485|   318k|{
  486|   318k|    return basic_scan_forward_buffer_impl(SCN_FWD(range));
  ------------------
  |  |  248|   318k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  487|   318k|}
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEC2ESG_:
  377|   318k|    {
  378|   318k|    }
_ZN3scn2v26detail30basic_scan_forward_buffer_baseIcEC2Ev:
  359|   318k|    {
  360|   318k|    }
_ZN3scn2v26detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
  128|   318k|    {
  129|   318k|    }
_ZN3scn2v26detail17basic_scan_bufferIcED2Ev:
   43|   318k|    virtual ~basic_scan_buffer() = default;
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEE4fillEv:
  381|   526k|    {
  382|   526k|        if (m_cursor == ranges::end(m_range)) {
  ------------------
  |  Branch (382:13): [True: 588, False: 525k]
  ------------------
  383|    588|            return false;
  384|    588|        }
  385|   525k|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (385:13): [True: 290k, False: 235k]
  ------------------
  386|   290k|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
  387|   290k|                                          this->m_current_view.begin(),
  388|   290k|                                          this->m_current_view.end());
  389|   290k|        }
  390|   525k|        m_latest = *m_cursor;
  391|   525k|        ++m_cursor;
  392|   525k|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
  393|   525k|        return true;
  394|   526k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE4syncEl:
   48|   318k|    {
   49|   318k|        SCN_UNUSED(position);
  ------------------
  |  |  227|   318k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   50|   318k|    }
_ZN3scn2v26detail24make_forward_scan_bufferIRKN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEEDaOT_:
  485|   927k|{
  486|   927k|    return basic_scan_forward_buffer_impl(SCN_FWD(range));
  ------------------
  |  |  248|   927k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  487|   927k|}
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEC2ESG_:
  377|   927k|    {
  378|   927k|    }
_ZN3scn2v26detail30basic_scan_forward_buffer_baseIwEC2Ev:
  359|   927k|    {
  360|   927k|    }
_ZN3scn2v26detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
  128|   927k|    {
  129|   927k|    }
_ZN3scn2v26detail17basic_scan_bufferIwED2Ev:
   43|   927k|    virtual ~basic_scan_buffer() = default;
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEE4fillEv:
  381|  1.63M|    {
  382|  1.63M|        if (m_cursor == ranges::end(m_range)) {
  ------------------
  |  Branch (382:13): [True: 650, False: 1.63M]
  ------------------
  383|    650|            return false;
  384|    650|        }
  385|  1.63M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (385:13): [True: 954k, False: 678k]
  ------------------
  386|   954k|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
  387|   954k|                                          this->m_current_view.begin(),
  388|   954k|                                          this->m_current_view.end());
  389|   954k|        }
  390|  1.63M|        m_latest = *m_cursor;
  391|  1.63M|        ++m_cursor;
  392|  1.63M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
  393|  1.63M|        return true;
  394|  1.63M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE4syncEl:
   48|   927k|    {
   49|   927k|        SCN_UNUSED(position);
  ------------------
  |  |  227|   927k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   50|   927k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
  172|  13.3M|    {
  173|  13.3M|        return m_end == nullptr;
  174|  13.3M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
  188|   525k|    {
  189|   525k|        if (!stores_parent()) {
  ------------------
  |  Branch (189:13): [True: 0, False: 525k]
  ------------------
  190|      0|            return make_string_view_from_pointers(
  191|      0|                static_cast<const CharT*>(m_begin) + position(),
  192|      0|                static_cast<const CharT*>(m_end));
  193|      0|        }
  194|   525k|        return parent()->get_segment_starting_at(position());
  195|   525k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator6parentEv:
  182|  7.05M|    {
  183|  7.05M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|  7.05M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  7.05M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  184|      0|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
  185|  7.05M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE23get_segment_starting_atEl:
   78|   525k|    {
   79|   525k|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|   525k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 27.6k, False: 498k]
  |  |  ------------------
  ------------------
   80|   525k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   81|  27.6k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
   82|  27.6k|        }
   83|   498k|        const auto start = pos - m_putback_buffer.size();
   84|   498k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  242|   498k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   498k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   85|      0|        return m_current_view.substr(start);
   86|   525k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iterator6parentEv:
  177|   401k|    {
  178|   401k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|   401k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   401k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  179|      0|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
  180|   401k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator8positionEv:
  167|  1.03M|    {
  168|  1.03M|        return m_position;
  169|  1.03M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE13is_contiguousEv:
  100|   955k|    {
  101|   955k|        return m_is_contiguous;
  102|   955k|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
  172|  41.2M|    {
  173|  41.2M|        return m_end == nullptr;
  174|  41.2M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
  188|  1.52M|    {
  189|  1.52M|        if (!stores_parent()) {
  ------------------
  |  Branch (189:13): [True: 0, False: 1.52M]
  ------------------
  190|      0|            return make_string_view_from_pointers(
  191|      0|                static_cast<const CharT*>(m_begin) + position(),
  192|      0|                static_cast<const CharT*>(m_end));
  193|      0|        }
  194|  1.52M|        return parent()->get_segment_starting_at(position());
  195|  1.52M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator6parentEv:
  182|  21.8M|    {
  183|  21.8M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|  21.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  21.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  184|      0|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
  185|  21.8M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE23get_segment_starting_atEl:
   78|  1.52M|    {
   79|  1.52M|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|  1.52M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 83.0k, False: 1.43M]
  |  |  ------------------
  ------------------
   80|  1.52M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   81|  83.0k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
   82|  83.0k|        }
   83|  1.43M|        const auto start = pos - m_putback_buffer.size();
   84|  1.43M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  242|  1.43M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.43M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   85|      0|        return m_current_view.substr(start);
   86|  1.52M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iterator6parentEv:
  177|  1.17M|    {
  178|  1.17M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|  1.17M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.17M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  179|      0|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
  180|  1.17M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator8positionEv:
  167|  2.97M|    {
  168|  2.97M|        return m_position;
  169|  2.97M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE13is_contiguousEv:
  100|  2.78M|    {
  101|  2.78M|        return m_is_contiguous;
  102|  2.78M|    }
_ZN3scn2v26detail17basic_scan_bufferIcE3getEv:
  321|   318k|{
  322|   318k|    if (is_contiguous()) {
  ------------------
  |  Branch (322:9): [True: 0, False: 318k]
  ------------------
  323|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
  324|      0|                                ranges_std::default_sentinel};
  325|      0|    }
  326|   318k|    return ranges::subrange{forward_iterator{this, 0},
  327|   318k|                            ranges_std::default_sentinel};
  328|   318k|}
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
  154|   318k|    {
  155|   318k|        SCN_EXPECT(parent);
  ------------------
  |  |  242|   318k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   318k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|   318k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  242|   318k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   318k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|   318k|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  257|  1.12M|    {
  258|  1.12M|        return x.is_at_end();
  259|  1.12M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
  301|  1.38M|    {
  302|  1.38M|        if (m_end) {
  ------------------
  |  Branch (302:13): [True: 0, False: 1.38M]
  ------------------
  303|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
  304|      0|        }
  305|  1.38M|        if (!m_begin) {
  ------------------
  |  Branch (305:13): [True: 0, False: 1.38M]
  ------------------
  306|      0|            return true;
  307|      0|        }
  308|  1.38M|        return !read_at_position();
  309|  1.38M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
  281|  3.40M|    {
  282|  3.40M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  3.40M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.40M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  283|       |
  284|  3.40M|        if (!stores_parent()) {
  ------------------
  |  Branch (284:13): [True: 0, False: 3.40M]
  ------------------
  285|      0|            return true;
  286|      0|        }
  287|       |
  288|  3.40M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  152|  3.40M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 2.87M, False: 526k]
  |  |  ------------------
  ------------------
  289|  2.87M|            return true;
  290|  2.87M|        }
  291|       |
  292|  1.05M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (292:16): [True: 526k, False: 525k]
  ------------------
  293|   526k|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (293:17): [True: 588, False: 525k]
  ------------------
  294|    588|                return false;
  295|    588|            }
  296|   526k|        }
  297|   525k|        return true;
  298|   526k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE15chars_availableEv:
   58|  4.85M|    {
   59|  4.85M|        return m_putback_buffer.size() + m_current_view.size();
   60|  4.85M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  268|   262k|    {
  269|   262k|        return !x.is_at_end();
  270|   262k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iteratordeEv:
  216|  1.55M|    {
  217|  1.55M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  1.55M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.55M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  218|       |
  219|  1.55M|        if (!stores_parent()) {
  ------------------
  |  Branch (219:13): [True: 0, False: 1.55M]
  ------------------
  220|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
  221|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|      0|            return *ptr;
  223|      0|        }
  224|       |
  225|  1.55M|        auto res = read_at_position();
  226|  1.55M|        SCN_EXPECT(res);
  ------------------
  |  |  242|  1.55M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.55M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  227|      0|        return parent()->get_character_at(m_position);
  228|  1.55M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16get_character_atEl:
   89|  1.55M|    {
   90|  1.55M|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|  1.55M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.52M, False: 28.1k]
  |  |  ------------------
  ------------------
   91|  1.55M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   92|  1.52M|            return m_putback_buffer[pos];
   93|  1.52M|        }
   94|  28.1k|        const auto start = pos - m_putback_buffer.size();
   95|  28.1k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  242|  28.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  28.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   96|      0|        return m_current_view[start];
   97|  1.55M|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorppEv:
  202|   470k|    {
  203|   470k|        ++m_position;
  204|   470k|        std::ignore = read_at_position();
  205|   470k|        return *this;
  206|   470k|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
  251|   456k|    {
  252|   456k|        return !(lhs == rhs);
  253|   456k|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
  246|   664k|    {
  247|   664k|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (247:16): [True: 664k, False: 0]
  |  Branch (247:46): [True: 207k, False: 456k]
  ------------------
  248|   664k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iterator13batch_advanceEl:
  231|   636k|    {
  232|   636k|        SCN_EXPECT(n >= 0);
  ------------------
  |  |  242|   636k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   636k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  233|      0|        m_position += n;
  234|   636k|        return *this;
  235|   636k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE8sync_allEv:
   53|   290k|    {
   54|   290k|        sync(0);
   55|   290k|    }
_ZN3scn2v26detail17basic_scan_bufferIwE3getEv:
  321|   927k|{
  322|   927k|    if (is_contiguous()) {
  ------------------
  |  Branch (322:9): [True: 0, False: 927k]
  ------------------
  323|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
  324|      0|                                ranges_std::default_sentinel};
  325|      0|    }
  326|   927k|    return ranges::subrange{forward_iterator{this, 0},
  327|   927k|                            ranges_std::default_sentinel};
  328|   927k|}
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
  154|   927k|    {
  155|   927k|        SCN_EXPECT(parent);
  ------------------
  |  |  242|   927k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   927k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|   927k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  242|   927k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   927k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|   927k|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  257|  3.19M|    {
  258|  3.19M|        return x.is_at_end();
  259|  3.19M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
  301|  4.12M|    {
  302|  4.12M|        if (m_end) {
  ------------------
  |  Branch (302:13): [True: 0, False: 4.12M]
  ------------------
  303|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
  304|      0|        }
  305|  4.12M|        if (!m_begin) {
  ------------------
  |  Branch (305:13): [True: 0, False: 4.12M]
  ------------------
  306|      0|            return true;
  307|      0|        }
  308|  4.12M|        return !read_at_position();
  309|  4.12M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
  281|  10.6M|    {
  282|  10.6M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  10.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  10.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  283|       |
  284|  10.6M|        if (!stores_parent()) {
  ------------------
  |  Branch (284:13): [True: 0, False: 10.6M]
  ------------------
  285|      0|            return true;
  286|      0|        }
  287|       |
  288|  10.6M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  152|  10.6M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 8.99M, False: 1.63M]
  |  |  ------------------
  ------------------
  289|  8.99M|            return true;
  290|  8.99M|        }
  291|       |
  292|  3.26M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (292:16): [True: 1.63M, False: 1.63M]
  ------------------
  293|  1.63M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (293:17): [True: 650, False: 1.63M]
  ------------------
  294|    650|                return false;
  295|    650|            }
  296|  1.63M|        }
  297|  1.63M|        return true;
  298|  1.63M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE15chars_availableEv:
   58|  15.0M|    {
   59|  15.0M|        return m_putback_buffer.size() + m_current_view.size();
   60|  15.0M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  268|   927k|    {
  269|   927k|        return !x.is_at_end();
  270|   927k|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iteratordeEv:
  216|  4.84M|    {
  217|  4.84M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  4.84M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.84M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  218|       |
  219|  4.84M|        if (!stores_parent()) {
  ------------------
  |  Branch (219:13): [True: 0, False: 4.84M]
  ------------------
  220|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
  221|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|      0|            return *ptr;
  223|      0|        }
  224|       |
  225|  4.84M|        auto res = read_at_position();
  226|  4.84M|        SCN_EXPECT(res);
  ------------------
  |  |  242|  4.84M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.84M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  227|      0|        return parent()->get_character_at(m_position);
  228|  4.84M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16get_character_atEl:
   89|  4.84M|    {
   90|  4.84M|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|  4.84M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.59M, False: 249k]
  |  |  ------------------
  ------------------
   91|  4.84M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   92|  4.59M|            return m_putback_buffer[pos];
   93|  4.59M|        }
   94|   249k|        const auto start = pos - m_putback_buffer.size();
   95|   249k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  242|   249k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   249k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   96|      0|        return m_current_view[start];
   97|  4.84M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorppEv:
  202|  1.66M|    {
  203|  1.66M|        ++m_position;
  204|  1.66M|        std::ignore = read_at_position();
  205|  1.66M|        return *this;
  206|  1.66M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
  251|  1.50M|    {
  252|  1.50M|        return !(lhs == rhs);
  253|  1.50M|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
  246|  2.10M|    {
  247|  2.10M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (247:16): [True: 2.10M, False: 0]
  |  Branch (247:46): [True: 595k, False: 1.50M]
  ------------------
  248|  2.10M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iterator13batch_advanceEl:
  231|  1.85M|    {
  232|  1.85M|        SCN_EXPECT(n >= 0);
  ------------------
  |  |  242|  1.85M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.85M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  233|      0|        m_position += n;
  234|  1.85M|        return *this;
  235|  1.85M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE8sync_allEv:
   53|   872k|    {
   54|   872k|        sync(0);
   55|   872k|    }

_ZN3scn2v26detail43utf_code_point_length_by_starting_code_unitIcEEmT_:
   71|   154k|{
   72|   154k|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (72:19): [Folded - Ignored]
  ------------------
   73|   154k|        return utf8_code_point_length_by_starting_code_unit(ch);
   74|   154k|    }
   75|   154k|    else if constexpr (sizeof(U) == 2) {
   76|   154k|        return utf16_code_point_length_by_starting_code_unit(ch);
   77|   154k|    }
   78|   154k|    else {
   79|       |        // utf-32
   80|   154k|        static_assert(sizeof(U) == 4);
   81|   154k|        SCN_UNUSED(ch);
   82|   154k|        return 1;
   83|   154k|    }
   84|   154k|}
_ZN3scn2v26detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
   35|   154k|{
   36|   154k|    static_assert(sizeof(U8) == 1);
   37|       |
   38|   154k|    SCN_GCC_COMPAT_PUSH
   39|   154k|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
   40|   154k|    constexpr char lengths[] =
   41|   154k|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
   42|   154k|        "\1\1\1\1\1\1\1\1"
   43|   154k|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
   44|       |                            // byte
   45|   154k|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
   46|   154k|        "\3\3"              // highest bits 1110 -> 3-byte cp
   47|   154k|        "\4";               // highest bits 11110 -> 4-byte cp
   48|   154k|    return lengths[static_cast<unsigned char>(ch) >> 3];
   49|   154k|    SCN_GCC_COMPAT_POP
   50|   154k|}
_ZN3scn2v26detail43utf_code_point_length_by_starting_code_unitIwEEmT_:
   71|  82.7M|{
   72|  82.7M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (72:19): [Folded - Ignored]
  ------------------
   73|  82.7M|        return utf8_code_point_length_by_starting_code_unit(ch);
   74|  82.7M|    }
   75|  82.7M|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (75:24): [Folded - Ignored]
  ------------------
   76|  82.7M|        return utf16_code_point_length_by_starting_code_unit(ch);
   77|  82.7M|    }
   78|  82.7M|    else {
   79|       |        // utf-32
   80|  82.7M|        static_assert(sizeof(U) == 4);
   81|  82.7M|        SCN_UNUSED(ch);
  ------------------
  |  |  227|  82.7M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   82|  82.7M|        return 1;
   83|  82.7M|    }
   84|  82.7M|}

_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  1.63M|{
   36|  1.63M|#define SCN_VISIT(Type)                                         \
   37|  1.63M|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  1.63M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  1.63M|    }                                                           \
   40|  1.63M|    else {                                                      \
   41|  1.63M|        return vis(monostate_val);                              \
   42|  1.63M|    }
   43|       |
   44|  1.63M|    monostate monostate_val{};
   45|       |
   46|  1.63M|    switch (arg.m_type) {
   47|   231k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 231k, False: 1.40M]
  ------------------
   48|   231k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|   231k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   231k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   231k|    }                                                           \
  |  |   40|   231k|    else {                                                      \
  |  |   41|   231k|        return vis(monostate_val);                              \
  |  |   42|   231k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 1.63M]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|   311k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 311k, False: 1.32M]
  ------------------
   52|   311k|            SCN_VISIT(int);
  ------------------
  |  |   37|   311k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   311k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   311k|    }                                                           \
  |  |   40|   311k|    else {                                                      \
  |  |   41|   311k|        return vis(monostate_val);                              \
  |  |   42|   311k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 1.63M]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|   327k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 327k, False: 1.30M]
  ------------------
   56|   327k|            SCN_VISIT(long long);
  ------------------
  |  |   37|   327k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   327k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   327k|    }                                                           \
  |  |   40|   327k|    else {                                                      \
  |  |   41|   327k|        return vis(monostate_val);                              \
  |  |   42|   327k|    }
  ------------------
   57|   229k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 229k, False: 1.40M]
  ------------------
   58|   229k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|   229k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   229k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   229k|    }                                                           \
  |  |   40|   229k|    else {                                                      \
  |  |   41|   229k|        return vis(monostate_val);                              \
  |  |   42|   229k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 1.63M]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|   261k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 261k, False: 1.37M]
  ------------------
   62|   261k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|   261k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   261k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   261k|    }                                                           \
  |  |   40|   261k|    else {                                                      \
  |  |   41|   261k|        return vis(monostate_val);                              \
  |  |   42|   261k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 1.63M]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|   271k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 271k, False: 1.36M]
  ------------------
   66|   271k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|   271k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   271k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   271k|    }                                                           \
  |  |   40|   271k|    else {                                                      \
  |  |   41|   271k|        return vis(monostate_val);                              \
  |  |   42|   271k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 1.63M]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 1.63M]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 1.63M]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 1.63M]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 1.63M]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 1.63M]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 1.63M]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 1.63M]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 1.63M]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 1.63M]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 1.63M]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 1.63M]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 1.63M]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 1.63M]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 1.63M]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 1.63M]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 1.63M]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  1.63M|            SCN_CLANG_POP
  114|  1.63M|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  1.63M|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  41.5k|{
   36|  41.5k|#define SCN_VISIT(Type)                                         \
   37|  41.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  41.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  41.5k|    }                                                           \
   40|  41.5k|    else {                                                      \
   41|  41.5k|        return vis(monostate_val);                              \
   42|  41.5k|    }
   43|       |
   44|  41.5k|    monostate monostate_val{};
   45|       |
   46|  41.5k|    switch (arg.m_type) {
   47|  6.92k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 6.92k, False: 34.6k]
  ------------------
   48|  6.92k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|  6.92k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  6.92k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  6.92k|    }                                                           \
  |  |   40|  6.92k|    else {                                                      \
  |  |   41|  6.92k|        return vis(monostate_val);                              \
  |  |   42|  6.92k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 41.5k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  6.92k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 6.92k, False: 34.6k]
  ------------------
   52|  6.92k|            SCN_VISIT(int);
  ------------------
  |  |   37|  6.92k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  6.92k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  6.92k|    }                                                           \
  |  |   40|  6.92k|    else {                                                      \
  |  |   41|  6.92k|        return vis(monostate_val);                              \
  |  |   42|  6.92k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 41.5k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  6.92k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 6.92k, False: 34.6k]
  ------------------
   56|  6.92k|            SCN_VISIT(long long);
  ------------------
  |  |   37|  6.92k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  6.92k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  6.92k|    }                                                           \
  |  |   40|  6.92k|    else {                                                      \
  |  |   41|  6.92k|        return vis(monostate_val);                              \
  |  |   42|  6.92k|    }
  ------------------
   57|  6.92k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 6.92k, False: 34.6k]
  ------------------
   58|  6.92k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  6.92k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  6.92k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  6.92k|    }                                                           \
  |  |   40|  6.92k|    else {                                                      \
  |  |   41|  6.92k|        return vis(monostate_val);                              \
  |  |   42|  6.92k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 41.5k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  6.92k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 6.92k, False: 34.6k]
  ------------------
   62|  6.92k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  6.92k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  6.92k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  6.92k|    }                                                           \
  |  |   40|  6.92k|    else {                                                      \
  |  |   41|  6.92k|        return vis(monostate_val);                              \
  |  |   42|  6.92k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 41.5k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|  6.92k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 6.92k, False: 34.6k]
  ------------------
   66|  6.92k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|  6.92k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  6.92k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  6.92k|    }                                                           \
  |  |   40|  6.92k|    else {                                                      \
  |  |   41|  6.92k|        return vis(monostate_val);                              \
  |  |   42|  6.92k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 41.5k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 41.5k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 41.5k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 41.5k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 41.5k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 41.5k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 41.5k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 41.5k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 41.5k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 41.5k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 41.5k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 41.5k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 41.5k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 41.5k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 41.5k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 41.5k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 41.5k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  41.5k|            SCN_CLANG_POP
  114|  41.5k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  41.5k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  4.06M|{
   36|  4.06M|#define SCN_VISIT(Type)                                         \
   37|  4.06M|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  4.06M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  4.06M|    }                                                           \
   40|  4.06M|    else {                                                      \
   41|  4.06M|        return vis(monostate_val);                              \
   42|  4.06M|    }
   43|       |
   44|  4.06M|    monostate monostate_val{};
   45|       |
   46|  4.06M|    switch (arg.m_type) {
   47|   515k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 515k, False: 3.55M]
  ------------------
   48|   515k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|   515k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   515k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   515k|    }                                                           \
  |  |   40|   515k|    else {                                                      \
  |  |   41|   515k|        return vis(monostate_val);                              \
  |  |   42|   515k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 4.06M]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|   807k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 807k, False: 3.26M]
  ------------------
   52|   807k|            SCN_VISIT(int);
  ------------------
  |  |   37|   807k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   807k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   807k|    }                                                           \
  |  |   40|   807k|    else {                                                      \
  |  |   41|   807k|        return vis(monostate_val);                              \
  |  |   42|   807k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 4.06M]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|   845k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 845k, False: 3.22M]
  ------------------
   56|   845k|            SCN_VISIT(long long);
  ------------------
  |  |   37|   845k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   845k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   845k|    }                                                           \
  |  |   40|   845k|    else {                                                      \
  |  |   41|   845k|        return vis(monostate_val);                              \
  |  |   42|   845k|    }
  ------------------
   57|   531k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 531k, False: 3.53M]
  ------------------
   58|   531k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|   531k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   531k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   531k|    }                                                           \
  |  |   40|   531k|    else {                                                      \
  |  |   41|   531k|        return vis(monostate_val);                              \
  |  |   42|   531k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 4.06M]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|   672k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 672k, False: 3.39M]
  ------------------
   62|   672k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|   672k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   672k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   672k|    }                                                           \
  |  |   40|   672k|    else {                                                      \
  |  |   41|   672k|        return vis(monostate_val);                              \
  |  |   42|   672k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 4.06M]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|   696k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 696k, False: 3.37M]
  ------------------
   66|   696k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|   696k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   696k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   696k|    }                                                           \
  |  |   40|   696k|    else {                                                      \
  |  |   41|   696k|        return vis(monostate_val);                              \
  |  |   42|   696k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 4.06M]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 4.06M]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 4.06M]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 4.06M]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 4.06M]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 4.06M]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 4.06M]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 4.06M]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 4.06M]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 4.06M]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 4.06M]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 4.06M]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 4.06M]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 4.06M]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 4.06M]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 4.06M]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 4.06M]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  4.06M|            SCN_CLANG_POP
  114|  4.06M|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  4.06M|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   193k|{
   36|   193k|#define SCN_VISIT(Type)                                         \
   37|   193k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   193k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   193k|    }                                                           \
   40|   193k|    else {                                                      \
   41|   193k|        return vis(monostate_val);                              \
   42|   193k|    }
   43|       |
   44|   193k|    monostate monostate_val{};
   45|       |
   46|   193k|    switch (arg.m_type) {
   47|  32.2k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 32.2k, False: 161k]
  ------------------
   48|  32.2k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|  32.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  32.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  32.2k|    }                                                           \
  |  |   40|  32.2k|    else {                                                      \
  |  |   41|  32.2k|        return vis(monostate_val);                              \
  |  |   42|  32.2k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 193k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  32.2k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 32.2k, False: 161k]
  ------------------
   52|  32.2k|            SCN_VISIT(int);
  ------------------
  |  |   37|  32.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  32.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  32.2k|    }                                                           \
  |  |   40|  32.2k|    else {                                                      \
  |  |   41|  32.2k|        return vis(monostate_val);                              \
  |  |   42|  32.2k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 193k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  32.2k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 32.2k, False: 161k]
  ------------------
   56|  32.2k|            SCN_VISIT(long long);
  ------------------
  |  |   37|  32.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  32.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  32.2k|    }                                                           \
  |  |   40|  32.2k|    else {                                                      \
  |  |   41|  32.2k|        return vis(monostate_val);                              \
  |  |   42|  32.2k|    }
  ------------------
   57|  32.2k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 32.2k, False: 161k]
  ------------------
   58|  32.2k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  32.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  32.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  32.2k|    }                                                           \
  |  |   40|  32.2k|    else {                                                      \
  |  |   41|  32.2k|        return vis(monostate_val);                              \
  |  |   42|  32.2k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 193k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  32.2k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 32.2k, False: 161k]
  ------------------
   62|  32.2k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  32.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  32.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  32.2k|    }                                                           \
  |  |   40|  32.2k|    else {                                                      \
  |  |   41|  32.2k|        return vis(monostate_val);                              \
  |  |   42|  32.2k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 193k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|  32.2k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 32.2k, False: 161k]
  ------------------
   66|  32.2k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|  32.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  32.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  32.2k|    }                                                           \
  |  |   40|  32.2k|    else {                                                      \
  |  |   41|  32.2k|        return vis(monostate_val);                              \
  |  |   42|  32.2k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 193k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 193k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 193k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 193k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 193k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 193k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 193k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 193k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 193k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 193k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 193k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 193k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 193k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 193k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 193k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 193k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 193k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   193k|            SCN_CLANG_POP
  114|   193k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   193k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  1.51M|{
   36|  1.51M|#define SCN_VISIT(Type)                                         \
   37|  1.51M|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  1.51M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  1.51M|    }                                                           \
   40|  1.51M|    else {                                                      \
   41|  1.51M|        return vis(monostate_val);                              \
   42|  1.51M|    }
   43|       |
   44|  1.51M|    monostate monostate_val{};
   45|       |
   46|  1.51M|    switch (arg.m_type) {
   47|   215k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 215k, False: 1.30M]
  ------------------
   48|   215k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|   215k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   215k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   215k|    }                                                           \
  |  |   40|   215k|    else {                                                      \
  |  |   41|   215k|        return vis(monostate_val);                              \
  |  |   42|   215k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 1.51M]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|   281k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 281k, False: 1.23M]
  ------------------
   52|   281k|            SCN_VISIT(int);
  ------------------
  |  |   37|   281k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   281k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   281k|    }                                                           \
  |  |   40|   281k|    else {                                                      \
  |  |   41|   281k|        return vis(monostate_val);                              \
  |  |   42|   281k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 1.51M]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|   296k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 296k, False: 1.21M]
  ------------------
   56|   296k|            SCN_VISIT(long long);
  ------------------
  |  |   37|   296k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   296k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   296k|    }                                                           \
  |  |   40|   296k|    else {                                                      \
  |  |   41|   296k|        return vis(monostate_val);                              \
  |  |   42|   296k|    }
  ------------------
   57|   219k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 219k, False: 1.29M]
  ------------------
   58|   219k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|   219k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   219k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   219k|    }                                                           \
  |  |   40|   219k|    else {                                                      \
  |  |   41|   219k|        return vis(monostate_val);                              \
  |  |   42|   219k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 1.51M]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|   246k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 246k, False: 1.26M]
  ------------------
   62|   246k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|   246k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   246k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   246k|    }                                                           \
  |  |   40|   246k|    else {                                                      \
  |  |   41|   246k|        return vis(monostate_val);                              \
  |  |   42|   246k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 1.51M]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|   256k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 256k, False: 1.25M]
  ------------------
   66|   256k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|   256k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   256k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   256k|    }                                                           \
  |  |   40|   256k|    else {                                                      \
  |  |   41|   256k|        return vis(monostate_val);                              \
  |  |   42|   256k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 1.51M]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 1.51M]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 1.51M]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 1.51M]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 1.51M]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 1.51M]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 1.51M]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 1.51M]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 1.51M]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 1.51M]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 1.51M]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 1.51M]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 1.51M]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 1.51M]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 1.51M]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 1.51M]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 1.51M]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  1.51M|            SCN_CLANG_POP
  114|  1.51M|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  1.51M|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  3.90M|{
   36|  3.90M|#define SCN_VISIT(Type)                                         \
   37|  3.90M|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  3.90M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  3.90M|    }                                                           \
   40|  3.90M|    else {                                                      \
   41|  3.90M|        return vis(monostate_val);                              \
   42|  3.90M|    }
   43|       |
   44|  3.90M|    monostate monostate_val{};
   45|       |
   46|  3.90M|    switch (arg.m_type) {
   47|   500k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 500k, False: 3.40M]
  ------------------
   48|   500k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|   500k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   500k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   500k|    }                                                           \
  |  |   40|   500k|    else {                                                      \
  |  |   41|   500k|        return vis(monostate_val);                              \
  |  |   42|   500k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 3.90M]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|   752k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 752k, False: 3.15M]
  ------------------
   52|   752k|            SCN_VISIT(int);
  ------------------
  |  |   37|   752k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   752k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   752k|    }                                                           \
  |  |   40|   752k|    else {                                                      \
  |  |   41|   752k|        return vis(monostate_val);                              \
  |  |   42|   752k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 3.90M]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|   785k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 785k, False: 3.11M]
  ------------------
   56|   785k|            SCN_VISIT(long long);
  ------------------
  |  |   37|   785k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   785k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   785k|    }                                                           \
  |  |   40|   785k|    else {                                                      \
  |  |   41|   785k|        return vis(monostate_val);                              \
  |  |   42|   785k|    }
  ------------------
   57|   529k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 529k, False: 3.37M]
  ------------------
   58|   529k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|   529k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   529k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   529k|    }                                                           \
  |  |   40|   529k|    else {                                                      \
  |  |   41|   529k|        return vis(monostate_val);                              \
  |  |   42|   529k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 3.90M]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|   656k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 656k, False: 3.24M]
  ------------------
   62|   656k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|   656k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   656k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   656k|    }                                                           \
  |  |   40|   656k|    else {                                                      \
  |  |   41|   656k|        return vis(monostate_val);                              \
  |  |   42|   656k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 3.90M]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|   679k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 679k, False: 3.22M]
  ------------------
   66|   679k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|   679k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   679k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   679k|    }                                                           \
  |  |   40|   679k|    else {                                                      \
  |  |   41|   679k|        return vis(monostate_val);                              \
  |  |   42|   679k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 3.90M]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 3.90M]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 3.90M]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 3.90M]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 3.90M]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 3.90M]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 3.90M]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 3.90M]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 3.90M]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 3.90M]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 3.90M]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 3.90M]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 3.90M]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 3.90M]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 3.90M]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 3.90M]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 3.90M]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  3.90M|            SCN_CLANG_POP
  114|  3.90M|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  3.90M|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   124k|{
   36|   124k|#define SCN_VISIT(Type)                                         \
   37|   124k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   124k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   124k|    }                                                           \
   40|   124k|    else {                                                      \
   41|   124k|        return vis(monostate_val);                              \
   42|   124k|    }
   43|       |
   44|   124k|    monostate monostate_val{};
   45|       |
   46|   124k|    switch (arg.m_type) {
   47|  20.7k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 20.7k, False: 103k]
  ------------------
   48|  20.7k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|  20.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  20.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  20.7k|    }                                                           \
  |  |   40|  20.7k|    else {                                                      \
  |  |   41|  20.7k|        return vis(monostate_val);                              \
  |  |   42|  20.7k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 124k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  20.7k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 20.7k, False: 103k]
  ------------------
   52|  20.7k|            SCN_VISIT(int);
  ------------------
  |  |   37|  20.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  20.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  20.7k|    }                                                           \
  |  |   40|  20.7k|    else {                                                      \
  |  |   41|  20.7k|        return vis(monostate_val);                              \
  |  |   42|  20.7k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 124k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  20.7k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 20.7k, False: 103k]
  ------------------
   56|  20.7k|            SCN_VISIT(long long);
  ------------------
  |  |   37|  20.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  20.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  20.7k|    }                                                           \
  |  |   40|  20.7k|    else {                                                      \
  |  |   41|  20.7k|        return vis(monostate_val);                              \
  |  |   42|  20.7k|    }
  ------------------
   57|  20.7k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 20.7k, False: 103k]
  ------------------
   58|  20.7k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  20.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  20.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  20.7k|    }                                                           \
  |  |   40|  20.7k|    else {                                                      \
  |  |   41|  20.7k|        return vis(monostate_val);                              \
  |  |   42|  20.7k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 124k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  20.7k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 20.7k, False: 103k]
  ------------------
   62|  20.7k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  20.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  20.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  20.7k|    }                                                           \
  |  |   40|  20.7k|    else {                                                      \
  |  |   41|  20.7k|        return vis(monostate_val);                              \
  |  |   42|  20.7k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 124k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|  20.7k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 20.7k, False: 103k]
  ------------------
   66|  20.7k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|  20.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  20.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  20.7k|    }                                                           \
  |  |   40|  20.7k|    else {                                                      \
  |  |   41|  20.7k|        return vis(monostate_val);                              \
  |  |   42|  20.7k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 124k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 124k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 124k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 124k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 124k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 124k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 124k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 124k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 124k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 124k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 124k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 124k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 124k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 124k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 124k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 124k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 124k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   124k|            SCN_CLANG_POP
  114|   124k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   124k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   553k|{
   36|   553k|#define SCN_VISIT(Type)                                         \
   37|   553k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   553k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   553k|    }                                                           \
   40|   553k|    else {                                                      \
   41|   553k|        return vis(monostate_val);                              \
   42|   553k|    }
   43|       |
   44|   553k|    monostate monostate_val{};
   45|       |
   46|   553k|    switch (arg.m_type) {
   47|  83.0k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 83.0k, False: 470k]
  ------------------
   48|  83.0k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|  83.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  83.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  83.0k|    }                                                           \
  |  |   40|  83.0k|    else {                                                      \
  |  |   41|  83.0k|        return vis(monostate_val);                              \
  |  |   42|  83.0k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 553k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  96.8k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 96.8k, False: 456k]
  ------------------
   52|  96.8k|            SCN_VISIT(int);
  ------------------
  |  |   37|  96.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  96.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  96.8k|    }                                                           \
  |  |   40|  96.8k|    else {                                                      \
  |  |   41|  96.8k|        return vis(monostate_val);                              \
  |  |   42|  96.8k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 553k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  96.8k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 96.8k, False: 456k]
  ------------------
   56|  96.8k|            SCN_VISIT(long long);
  ------------------
  |  |   37|  96.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  96.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  96.8k|    }                                                           \
  |  |   40|  96.8k|    else {                                                      \
  |  |   41|  96.8k|        return vis(monostate_val);                              \
  |  |   42|  96.8k|    }
  ------------------
   57|  83.0k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 83.0k, False: 470k]
  ------------------
   58|  83.0k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  83.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  83.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  83.0k|    }                                                           \
  |  |   40|  83.0k|    else {                                                      \
  |  |   41|  83.0k|        return vis(monostate_val);                              \
  |  |   42|  83.0k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 553k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  96.8k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 96.8k, False: 456k]
  ------------------
   62|  96.8k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  96.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  96.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  96.8k|    }                                                           \
  |  |   40|  96.8k|    else {                                                      \
  |  |   41|  96.8k|        return vis(monostate_val);                              \
  |  |   42|  96.8k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 553k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|  96.8k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 96.8k, False: 456k]
  ------------------
   66|  96.8k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|  96.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  96.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  96.8k|    }                                                           \
  |  |   40|  96.8k|    else {                                                      \
  |  |   41|  96.8k|        return vis(monostate_val);                              \
  |  |   42|  96.8k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 553k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 553k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 553k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 553k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 553k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 553k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 553k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 553k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 553k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 553k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 553k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 553k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 553k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 553k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 553k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 553k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 553k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   553k|            SCN_CLANG_POP
  114|   553k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   553k|}  // namespace scn

_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  173|  2.62M|{
  174|  2.62M|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  2.62M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  175|  2.62M|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NSC_17basic_string_viewIT0_NSC_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
  110|  2.62M|{
  111|  2.62M|    auto buffer = make_scan_buffer(range);
  112|       |
  113|  2.62M|    auto result = vscan_impl(buffer, format, args);
  114|  2.62M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  2.62M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 138k, False: 2.48M]
  |  |  ------------------
  ------------------
  115|   138k|        return unexpected(result.error());
  116|   138k|    }
  117|  2.48M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  2.48M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  2.62M|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENSt3__16localeEvEENS0_13scan_expectedINSA_11conditionalIXsr3stdE9is_same_vINSA_9remove_cvINSA_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEERKT0_OSG_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  191|  2.62M|{
  192|  2.62M|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  2.62M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  193|  2.62M|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEERKT_OSH_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
  126|  2.62M|{
  127|  2.62M|#if !SCN_DISABLE_LOCALE
  128|  2.62M|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|  2.62M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|  2.62M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|  2.62M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|  2.62M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  2.62M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 138k, False: 2.48M]
  |  |  ------------------
  ------------------
  135|   138k|        return unexpected(result.error());
  136|   138k|    }
  137|  2.48M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  2.48M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|  2.62M|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  204|   544k|{
  205|   544k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  248|   544k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|   544k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|   544k|{
  151|   544k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|   544k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|   544k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   544k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 13.8k, False: 530k]
  |  |  ------------------
  ------------------
  155|  13.8k|        return unexpected(result.error());
  156|  13.8k|    }
  157|   530k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|   530k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|   544k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  173|   152k|{
  174|   152k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   152k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  175|   152k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS7_17basic_string_viewIT0_NS7_11char_traitsIS10_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS10_EEEE:
  110|   152k|{
  111|   152k|    auto buffer = make_scan_buffer(range);
  112|       |
  113|   152k|    auto result = vscan_impl(buffer, format, args);
  114|   152k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   152k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 138k, False: 13.8k]
  |  |  ------------------
  ------------------
  115|   138k|        return unexpected(result.error());
  116|   138k|    }
  117|  13.8k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  13.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   152k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEERKT0_OSL_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  191|   152k|{
  192|   152k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   152k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  193|   152k|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEEERKT_OSM_NS3_17basic_string_viewIT1_NS3_11char_traitsIS14_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS14_EEEE:
  126|   152k|{
  127|   152k|#if !SCN_DISABLE_LOCALE
  128|   152k|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|   152k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|   152k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|   152k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|   152k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   152k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 138k, False: 13.8k]
  |  |  ------------------
  ------------------
  135|   138k|        return unexpected(result.error());
  136|   138k|    }
  137|  13.8k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  13.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|   152k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  204|  13.8k|{
  205|  13.8k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  248|  13.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  13.8k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|  13.8k|{
  151|  13.8k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|  13.8k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|  13.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 13.8k, False: 0]
  |  |  ------------------
  ------------------
  155|  13.8k|        return unexpected(result.error());
  156|  13.8k|    }
  157|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|  13.8k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NSC_17basic_string_viewIT0_NSC_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
  110|  2.58M|{
  111|  2.58M|    auto buffer = make_scan_buffer(range);
  112|       |
  113|  2.58M|    auto result = vscan_impl(buffer, format, args);
  114|  2.58M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  2.58M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 415k, False: 2.16M]
  |  |  ------------------
  ------------------
  115|   415k|        return unexpected(result.error());
  116|   415k|    }
  117|  2.16M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  2.16M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  2.58M|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEERKT_OSH_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
  126|  2.58M|{
  127|  2.58M|#if !SCN_DISABLE_LOCALE
  128|  2.58M|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|  2.58M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|  2.58M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|  2.58M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|  2.58M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  2.58M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 415k, False: 2.16M]
  |  |  ------------------
  ------------------
  135|   415k|        return unexpected(result.error());
  136|   415k|    }
  137|  2.16M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  2.16M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|  2.58M|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|   505k|{
  151|   505k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|   505k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|   505k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   505k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 41.5k, False: 463k]
  |  |  ------------------
  ------------------
  155|  41.5k|        return unexpected(result.error());
  156|  41.5k|    }
  157|   463k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|   463k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|   505k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS7_17basic_string_viewIT0_NS7_11char_traitsIS10_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS10_EEEE:
  110|   442k|{
  111|   442k|    auto buffer = make_scan_buffer(range);
  112|       |
  113|   442k|    auto result = vscan_impl(buffer, format, args);
  114|   442k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   442k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 415k, False: 27.6k]
  |  |  ------------------
  ------------------
  115|   415k|        return unexpected(result.error());
  116|   415k|    }
  117|  27.6k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  27.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   442k|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEEERKT_OSM_NS3_17basic_string_viewIT1_NS3_11char_traitsIS14_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS14_EEEE:
  126|   442k|{
  127|   442k|#if !SCN_DISABLE_LOCALE
  128|   442k|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|   442k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|   442k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|   442k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|   442k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   442k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 415k, False: 27.6k]
  |  |  ------------------
  ------------------
  135|   415k|        return unexpected(result.error());
  136|   415k|    }
  137|  27.6k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  27.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|   442k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|  41.5k|{
  151|  41.5k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|  41.5k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|  41.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  41.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 41.5k, False: 0]
  |  |  ------------------
  ------------------
  155|  41.5k|        return unexpected(result.error());
  156|  41.5k|    }
  157|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|  41.5k|}

_ZN3scn2v24scanIJaEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   342k|{
   90|   342k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   342k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   342k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NSB_17basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   44|  2.58M|{
   45|  2.58M|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  248|  2.58M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|  2.58M|}
_ZN3scn2v24scanIJaENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   342k|{
  125|   342k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   342k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   342k|                                                         format, {});
  127|   342k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENSt3__16localeELPv0EEENS0_13scan_expectedINSA_11conditionalIXsr3stdE9is_same_vINSA_9remove_cvINSA_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEERKT0_OSH_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   60|  2.58M|{
   61|  2.58M|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  248|  2.58M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   62|  2.58M|}
_ZN3scn2v210scan_valueIaN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  71.7k|{
  159|  71.7k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  71.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  71.7k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   72|   505k|{
   73|   505k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  248|   505k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   74|   505k|}
_ZN3scn2v24scanIJhEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   358k|{
   90|   358k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   358k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   358k|}
_ZN3scn2v24scanIJhENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   358k|{
  125|   358k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   358k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   358k|                                                         format, {});
  127|   358k|}
_ZN3scn2v210scan_valueIhN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  73.1k|{
  159|  73.1k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  73.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  73.1k|}
_ZN3scn2v24scanIJiEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   490k|{
   90|   490k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   490k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   490k|}
_ZN3scn2v24scanIJiENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   490k|{
  125|   490k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   490k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   490k|                                                         format, {});
  127|   490k|}
_ZN3scn2v210scan_valueIiN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  93.8k|{
  159|  93.8k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  93.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  93.8k|}
_ZN3scn2v24scanIJjEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   431k|{
   90|   431k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   431k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   431k|}
_ZN3scn2v24scanIJjENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   431k|{
  125|   431k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   431k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   431k|                                                         format, {});
  127|   431k|}
_ZN3scn2v210scan_valueIjN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  82.3k|{
  159|  82.3k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  82.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  82.3k|}
_ZN3scn2v24scanIJxEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   512k|{
   90|   512k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   512k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   512k|}
_ZN3scn2v24scanIJxENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   512k|{
  125|   512k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   512k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   512k|                                                         format, {});
  127|   512k|}
_ZN3scn2v210scan_valueIxN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  98.9k|{
  159|  98.9k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  98.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  98.9k|}
_ZN3scn2v24scanIJyEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   445k|{
   90|   445k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   445k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   445k|}
_ZN3scn2v24scanIJyENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   445k|{
  125|   445k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   445k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   445k|                                                         format, {});
  127|   445k|}
_ZN3scn2v210scan_valueIyN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  85.4k|{
  159|  85.4k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  85.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  85.4k|}
_ZN3scn2v24scanIJaEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  69.2k|{
   90|  69.2k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  69.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  69.2k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   44|   442k|{
   45|   442k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  248|   442k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|   442k|}
_ZN3scn2v24scanIJaENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  69.2k|{
  125|  69.2k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  69.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  69.2k|                                                         format, {});
  127|  69.2k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS6_6localeELPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEEERKT0_OSM_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   60|   442k|{
   61|   442k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  248|   442k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   62|   442k|}
_ZN3scn2v210scan_valueIaN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  6.92k|{
  159|  6.92k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  6.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  6.92k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   72|  41.5k|{
   73|  41.5k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  248|  41.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   74|  41.5k|}
_ZN3scn2v24scanIJhEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  69.2k|{
   90|  69.2k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  69.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  69.2k|}
_ZN3scn2v24scanIJhENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  69.2k|{
  125|  69.2k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  69.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  69.2k|                                                         format, {});
  127|  69.2k|}
_ZN3scn2v210scan_valueIhN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  6.92k|{
  159|  6.92k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  6.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  6.92k|}
_ZN3scn2v24scanIJiEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  76.1k|{
   90|  76.1k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  76.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  76.1k|}
_ZN3scn2v24scanIJiENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  76.1k|{
  125|  76.1k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  76.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  76.1k|                                                         format, {});
  127|  76.1k|}
_ZN3scn2v210scan_valueIiN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  6.92k|{
  159|  6.92k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  6.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  6.92k|}
_ZN3scn2v24scanIJjEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  76.1k|{
   90|  76.1k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  76.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  76.1k|}
_ZN3scn2v24scanIJjENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  76.1k|{
  125|  76.1k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  76.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  76.1k|                                                         format, {});
  127|  76.1k|}
_ZN3scn2v210scan_valueIjN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  6.92k|{
  159|  6.92k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  6.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  6.92k|}
_ZN3scn2v24scanIJxEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  76.1k|{
   90|  76.1k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  76.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  76.1k|}
_ZN3scn2v24scanIJxENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  76.1k|{
  125|  76.1k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  76.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  76.1k|                                                         format, {});
  127|  76.1k|}
_ZN3scn2v210scan_valueIxN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  6.92k|{
  159|  6.92k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  6.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  6.92k|}
_ZN3scn2v24scanIJyEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  76.1k|{
   90|  76.1k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  76.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  76.1k|}
_ZN3scn2v24scanIJyENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  76.1k|{
  125|  76.1k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  76.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  76.1k|                                                         format, {});
  127|  76.1k|}
_ZN3scn2v210scan_valueIyN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  6.92k|{
  159|  6.92k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  6.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  6.92k|}

_ZNK4nano6ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2692|  6.23M|            {
 2693|  6.23M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  6.23M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESD_E4typeEOSC_NS1_12priority_tagILm1EEE:
 2671|  6.23M|            {
 2672|  6.23M|                return decay_copy(t.begin());
 2673|  6.23M|            }
_ZN4nano6ranges6detail10decay_copyIPKcEENSt3__15decayIT_E4typeEOS7_:
 2605|   184M|    {
 2606|   184M|        return std::forward<T>(t);
 2607|   184M|    }
_ZNK4nano6ranges6detail5data_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSD_:
 3177|  11.4M|            {
 3178|  11.4M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  11.4M|            }
_ZN4nano6ranges6detail5data_2fn4implIKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  11.4M|            {
 3158|  11.4M|                return t.data();
 3159|  11.4M|            }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6094|  11.4M|    {
 6095|  11.4M|        return ranges::empty(derived())
  ------------------
  |  Branch (6095:16): [True: 23.5k, False: 11.4M]
  ------------------
 6096|  11.4M|                   ? nullptr
 6097|  11.4M|                   : std::addressof(*ranges::begin(derived()));
 6098|  11.4M|    }
_ZNK4nano6ranges6detail6empty_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSD_:
 3126|  11.4M|            {
 3127|  11.4M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  11.4M|            }
_ZN4nano6ranges6detail6empty_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSD_NS1_12priority_tagILm2EEE:
 3097|  11.4M|            {
 3098|  11.4M|                return bool((std::forward<T>(t).empty()));
 3099|  11.4M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE5emptyEv:
 6453|  27.2M|        {
 6454|  27.2M|            return data_.begin_ == data_.end_;
 6455|  27.2M|        }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6048|  22.9M|    {
 6049|  22.9M|        return static_cast<const D&>(*this);
 6050|  22.9M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2692|  47.0M|            {
 2693|  47.0M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  47.0M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESG_E4typeEOSF_NS1_12priority_tagILm1EEE:
 2671|  47.0M|            {
 2672|  47.0M|                return decay_copy(t.begin());
 2673|  47.0M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE5beginEv:
 6443|   108M|        {
 6444|   108M|            return data_.begin_;
 6445|   108M|        }
_ZNK4nano6ranges6detail5size_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 3037|  11.4M|            {
 3038|  11.4M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  11.4M|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESF_E4typeEOSH_NS1_12priority_tagILm2EEE:
 2999|  11.4M|            {
 3000|  11.4M|                return decay_copy(std::forward<T>(t).size());
 3001|  11.4M|            }
_ZN4nano6ranges6detail10decay_copyIlEENSt3__15decayIT_E4typeEOS5_:
 2605|  48.0M|    {
 2606|  48.0M|        return std::forward<T>(t);
 2607|  48.0M|    }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE4sizeILS5_1EEENSt3__19enable_ifIXeqT_LS5_1EElE4typeEv:
 6461|  27.3M|        {
 6462|  27.3M|            if constexpr (StoreSize) {
  ------------------
  |  Branch (6462:27): [Folded - Ignored]
  ------------------
 6463|  27.3M|                return data_.size_;
 6464|  27.3M|            }
 6465|  27.3M|            else {
 6466|  27.3M|                return data_.end_ - data_.begin_;
 6467|  27.3M|            }
 6468|  27.3M|        }
_ZNK4nano6ranges6detail5next_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3787|  19.2M|            {
 3788|  19.2M|                ranges::advance(x, n);
 3789|  19.2M|                return x;
 3790|  19.2M|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3677|  19.2M|            {
 3678|  19.2M|                fn::impl(i, n);
 3679|  19.2M|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3561|  19.2M|            {
 3562|  19.2M|                r += n;
 3563|  19.2M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|  57.4M|            {
 2693|  57.4M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  57.4M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESF_E4typeEOSE_NS1_12priority_tagILm1EEE:
 2671|  57.4M|            {
 2672|  57.4M|                return decay_copy(t.begin());
 2673|  57.4M|            }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|  26.5M|            {
 2759|  26.5M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  26.5M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  26.5M|            {
 2739|  26.5M|                return decay_copy(std::forward<T>(t).end());
 2740|  26.5M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE3endEv:
 6448|  70.2M|        {
 6449|  70.2M|            return data_.end_;
 6450|  70.2M|        }
_ZNK4nano6ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2758|  11.7M|            {
 2759|  11.7M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  11.7M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEPKcSC_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  11.7M|            {
 2739|  11.7M|                return decay_copy(std::forward<T>(t).end());
 2740|  11.7M|            }
_ZN4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EEC2IS4_Lb0EvEET_S4_:
 6374|  45.7M|        {
 6375|  45.7M|        }
_ZN4nano6ranges6detail13subrange_dataIPKcS4_Lb0EEC2EOS4_S6_:
 6293|  45.7M|        {
 6294|  45.7M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|   290k|            {
 2693|   290k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   290k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESE_E4typeEOSD_NS1_12priority_tagILm1EEE:
 2671|   290k|            {
 2672|   290k|                return decay_copy(t.begin());
 2673|   290k|            }
_ZN4nano6ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEEEENS3_5decayIT_E4typeEOSC_:
 2605|  1.53M|    {
 2606|  1.53M|        return std::forward<T>(t);
 2607|  1.53M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|   346k|            {
 2693|   346k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   346k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|   346k|            {
 2672|   346k|                return decay_copy(t.begin());
 2673|   346k|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EE5beginEv:
 6443|   373k|        {
 6444|   373k|            return data_.begin_;
 6445|   373k|        }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|   554k|            {
 2759|   554k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   554k|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEESE_SE_EENS7_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|   554k|            {
 2739|   554k|                return decay_copy(std::forward<T>(t).end());
 2740|   554k|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EE3endEv:
 6448|   554k|        {
 6449|   554k|            return data_.end_;
 6450|   554k|        }
_ZNK4nano6ranges6detail5next_2fnclINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEEEENS5_9enable_ifIX24input_or_output_iteratorIT_EESE_E4typeESE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3787|  27.6k|            {
 3788|  27.6k|                ranges::advance(x, n);
 3789|  27.6k|                return x;
 3790|  27.6k|            }
_ZNK4nano6ranges6detail8advance_2fnclINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEEEENS5_9enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3677|  27.6k|            {
 3678|  27.6k|                fn::impl(i, n);
 3679|  27.6k|            }
_ZN4nano6ranges6detail8advance_2fn4implINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEEEENS5_9enable_ifIX22random_access_iteratorIT_EEvE4typeERSE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3561|  27.6k|            {
 3562|  27.6k|                r += n;
 3563|  27.6k|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|   318k|            {
 2759|   318k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   318k|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS5_9allocatorIcEEEENS5_16__deque_iteratorIcPKcRSD_PKSE_lLl4096EEESI_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|   318k|            {
 2739|   318k|                return decay_copy(std::forward<T>(t).end());
 2740|   318k|            }
_ZN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EEC2ISA_Lb0EvEET_SA_:
 6374|   346k|        {
 6375|   346k|        }
_ZN4nano6ranges6detail13subrange_dataINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_Lb0EEC2EOSA_SC_:
 6293|   346k|        {
 6294|   346k|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSJ_:
 2692|  27.6k|            {
 2693|  27.6k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  27.6k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  27.6k|            {
 2672|  27.6k|                return decay_copy(t.begin());
 2673|  27.6k|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2692|  1.55M|            {
 2693|  1.55M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  1.55M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESD_E4typeEOSC_NS1_12priority_tagILm1EEE:
 2671|  1.55M|            {
 2672|  1.55M|                return decay_copy(t.begin());
 2673|  1.55M|            }
_ZN4nano6ranges6detail10decay_copyIPKwEENSt3__15decayIT_E4typeEOS7_:
 2605|   265M|    {
 2606|   265M|        return std::forward<T>(t);
 2607|   265M|    }
_ZNK4nano6ranges6detail5data_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSD_:
 3177|  5.66M|            {
 3178|  5.66M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  5.66M|            }
_ZN4nano6ranges6detail5data_2fn4implIKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  5.66M|            {
 3158|  5.66M|                return t.data();
 3159|  5.66M|            }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6094|  5.66M|    {
 6095|  5.66M|        return ranges::empty(derived())
  ------------------
  |  Branch (6095:16): [True: 28.7k, False: 5.64M]
  ------------------
 6096|  5.66M|                   ? nullptr
 6097|  5.66M|                   : std::addressof(*ranges::begin(derived()));
 6098|  5.66M|    }
_ZNK4nano6ranges6detail6empty_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSD_:
 3126|  5.66M|            {
 3127|  5.66M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  5.66M|            }
_ZN4nano6ranges6detail6empty_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSD_NS1_12priority_tagILm2EEE:
 3097|  5.66M|            {
 3098|  5.66M|                return bool((std::forward<T>(t).empty()));
 3099|  5.66M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE5emptyEv:
 6453|  9.04M|        {
 6454|  9.04M|            return data_.begin_ == data_.end_;
 6455|  9.04M|        }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6048|  11.3M|    {
 6049|  11.3M|        return static_cast<const D&>(*this);
 6050|  11.3M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2692|  44.4M|            {
 2693|  44.4M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  44.4M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESG_E4typeEOSF_NS1_12priority_tagILm1EEE:
 2671|  44.4M|            {
 2672|  44.4M|                return decay_copy(t.begin());
 2673|  44.4M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE5beginEv:
 6443|   114M|        {
 6444|   114M|            return data_.begin_;
 6445|   114M|        }
_ZNK4nano6ranges6detail5size_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 3037|  5.66M|            {
 3038|  5.66M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  5.66M|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESF_E4typeEOSH_NS1_12priority_tagILm2EEE:
 2999|  5.66M|            {
 3000|  5.66M|                return decay_copy(std::forward<T>(t).size());
 3001|  5.66M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE4sizeILS5_1EEENSt3__19enable_ifIXeqT_LS5_1EElE4typeEv:
 6461|  20.6M|        {
 6462|  20.6M|            if constexpr (StoreSize) {
  ------------------
  |  Branch (6462:27): [Folded - Ignored]
  ------------------
 6463|  20.6M|                return data_.size_;
 6464|  20.6M|            }
 6465|  20.6M|            else {
 6466|  20.6M|                return data_.end_ - data_.begin_;
 6467|  20.6M|            }
 6468|  20.6M|        }
_ZNK4nano6ranges6detail5next_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3787|  23.2M|            {
 3788|  23.2M|                ranges::advance(x, n);
 3789|  23.2M|                return x;
 3790|  23.2M|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3677|  23.2M|            {
 3678|  23.2M|                fn::impl(i, n);
 3679|  23.2M|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3561|  23.2M|            {
 3562|  23.2M|                r += n;
 3563|  23.2M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|  65.3M|            {
 2693|  65.3M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  65.3M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESF_E4typeEOSE_NS1_12priority_tagILm1EEE:
 2671|  65.3M|            {
 2672|  65.3M|                return decay_copy(t.begin());
 2673|  65.3M|            }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|  24.8M|            {
 2759|  24.8M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  24.8M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  24.8M|            {
 2739|  24.8M|                return decay_copy(std::forward<T>(t).end());
 2740|  24.8M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE3endEv:
 6448|   154M|        {
 6449|   154M|            return data_.end_;
 6450|   154M|        }
_ZNK4nano6ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2758|  7.71M|            {
 2759|  7.71M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  7.71M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEPKwSC_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  7.71M|            {
 2739|  7.71M|                return decay_copy(std::forward<T>(t).end());
 2740|  7.71M|            }
_ZN4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EEC2IS4_Lb0EvEET_S4_:
 6374|  43.6M|        {
 6375|  43.6M|        }
_ZN4nano6ranges6detail13subrange_dataIPKwS4_Lb0EEC2EOS4_S6_:
 6293|  43.6M|        {
 6294|  43.6M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|   872k|            {
 2693|   872k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   872k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESE_E4typeEOSD_NS1_12priority_tagILm1EEE:
 2671|   872k|            {
 2672|   872k|                return decay_copy(t.begin());
 2673|   872k|            }
_ZN4nano6ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEEEENS3_5decayIT_E4typeEOSC_:
 2605|  4.52M|    {
 2606|  4.52M|        return std::forward<T>(t);
 2607|  4.52M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|   982k|            {
 2693|   982k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   982k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|   982k|            {
 2672|   982k|                return decay_copy(t.begin());
 2673|   982k|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EE5beginEv:
 6443|  1.03M|        {
 6444|  1.03M|            return data_.begin_;
 6445|  1.03M|        }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  1.68M|            {
 2759|  1.68M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  1.68M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEESE_SE_EENS7_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|  1.68M|            {
 2739|  1.68M|                return decay_copy(std::forward<T>(t).end());
 2740|  1.68M|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EE3endEv:
 6448|  1.68M|        {
 6449|  1.68M|            return data_.end_;
 6450|  1.68M|        }
_ZNK4nano6ranges6detail5next_2fnclINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEEEENS5_9enable_ifIX24input_or_output_iteratorIT_EESE_E4typeESE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3787|  55.3k|            {
 3788|  55.3k|                ranges::advance(x, n);
 3789|  55.3k|                return x;
 3790|  55.3k|            }
_ZNK4nano6ranges6detail8advance_2fnclINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEEEENS5_9enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3677|  55.3k|            {
 3678|  55.3k|                fn::impl(i, n);
 3679|  55.3k|            }
_ZN4nano6ranges6detail8advance_2fn4implINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEEEENS5_9enable_ifIX22random_access_iteratorIT_EEvE4typeERSE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3561|  55.3k|            {
 3562|  55.3k|                r += n;
 3563|  55.3k|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|   927k|            {
 2759|   927k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   927k|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS5_9allocatorIwEEEENS5_16__deque_iteratorIwPKwRSD_PKSE_lLl1024EEESI_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|   927k|            {
 2739|   927k|                return decay_copy(std::forward<T>(t).end());
 2740|   927k|            }
_ZN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EEC2ISA_Lb0EvEET_SA_:
 6374|   982k|        {
 6375|   982k|        }
_ZN4nano6ranges6detail13subrange_dataINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_Lb0EEC2EOSA_SC_:
 6293|   982k|        {
 6294|   982k|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSJ_:
 2692|  55.3k|            {
 2693|  55.3k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  55.3k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  55.3k|            {
 2672|  55.3k|                return decay_copy(t.begin());
 2673|  55.3k|            }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE5beginEv:
 6443|  5.66M|        {
 6444|  5.66M|            return data_.begin_;
 6445|  5.66M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE5beginEv:
 6443|  17.1M|        {
 6444|  17.1M|            return data_.begin_;
 6445|  17.1M|        }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6043|  31.6M|    {
 6044|  31.6M|        return static_cast<D&>(*this);
 6045|  31.6M|    }
_ZN4nano6ranges6detail6empty_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSC_NS1_12priority_tagILm2EEE:
 3097|  15.8M|            {
 3098|  15.8M|                return bool((std::forward<T>(t).empty()));
 3099|  15.8M|            }
_ZNK4nano6ranges6detail6empty_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSC_:
 3126|  15.8M|            {
 3127|  15.8M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  15.8M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6084|  15.8M|    {
 6085|  15.8M|        return ranges::empty(derived())
  ------------------
  |  Branch (6085:16): [True: 0, False: 15.8M]
  ------------------
 6086|  15.8M|                   ? nullptr
 6087|  15.8M|                   : std::addressof(*ranges::begin(derived()));
 6088|  15.8M|    }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSH_NS1_12priority_tagILm1EEE:
 2738|  35.8M|            {
 2739|  35.8M|                return decay_copy(std::forward<T>(t).end());
 2740|  35.8M|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2758|  35.8M|            {
 2759|  35.8M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  35.8M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6043|  6.75M|    {
 6044|  6.75M|        return static_cast<D&>(*this);
 6045|  6.75M|    }
_ZN4nano6ranges6detail6empty_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSC_NS1_12priority_tagILm2EEE:
 3097|  3.37M|            {
 3098|  3.37M|                return bool((std::forward<T>(t).empty()));
 3099|  3.37M|            }
_ZNK4nano6ranges6detail6empty_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSC_:
 3126|  3.37M|            {
 3127|  3.37M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  3.37M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6084|  3.37M|    {
 6085|  3.37M|        return ranges::empty(derived())
  ------------------
  |  Branch (6085:16): [True: 0, False: 3.37M]
  ------------------
 6086|  3.37M|                   ? nullptr
 6087|  3.37M|                   : std::addressof(*ranges::begin(derived()));
 6088|  3.37M|    }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSH_NS1_12priority_tagILm1EEE:
 2738|   122M|            {
 2739|   122M|                return decay_copy(std::forward<T>(t).end());
 2740|   122M|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2758|   122M|            {
 2759|   122M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   122M|            }
_ZNK4nano6ranges6detail5next_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
 3779|  9.61M|            {
 3780|  9.61M|                ++x;
 3781|  9.61M|                return x;
 3782|  9.61M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 3037|  15.8M|            {
 3038|  15.8M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  15.8M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESE_E4typeEOSG_NS1_12priority_tagILm2EEE:
 2999|  15.8M|            {
 3000|  15.8M|                return decay_copy(std::forward<T>(t).size());
 3001|  15.8M|            }
_ZNK4nano6ranges6detail5data_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSC_:
 3177|  15.8M|            {
 3178|  15.8M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  15.8M|            }
_ZN4nano6ranges6detail5data_2fn4implINS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  15.8M|            {
 3158|  15.8M|                return t.data();
 3159|  15.8M|            }
_ZNK4nano6ranges6detail5prev_2fnclIPKcEENSt3__19enable_ifIX22bidirectional_iteratorIT_EES9_E4typeES9_:
 3827|  1.52M|            {
 3828|  1.52M|                --x;
 3829|  1.52M|                return x;
 3830|  1.52M|            }
_ZNK4nano6ranges6detail6ssize_2fnclIRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSE_:
 3076|  1.21M|            {
 3077|  1.21M|                return fn::impl(std::forward<T>(t));
 3078|  1.21M|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS5_11conditionalIXltstNS5_9enable_ifIX5rangeISF_EENS0_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSF_EEEEE15difference_typeEE4typeELm8EElSO_E4typeE_EEOSF_:
 3066|  1.21M|            {
 3067|  1.21M|                return static_cast<ssize_return_t<T>>(
 3068|  1.21M|                    ranges::size(std::forward<T>(t)));
 3069|  1.21M|            }
_ZNK4nano6ranges6detail5size_2fnclIRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSE_:
 3037|  1.21M|            {
 3038|  1.21M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  1.21M|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEmEENS5_9enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESF_E4typeEOSH_NS1_12priority_tagILm2EEE:
 2999|  1.21M|            {
 3000|  1.21M|                return decay_copy(std::forward<T>(t).size());
 3001|  1.21M|            }
_ZN4nano6ranges6detail10decay_copyImEENSt3__15decayIT_E4typeEOS5_:
 2605|  14.4M|    {
 2606|  14.4M|        return std::forward<T>(t);
 2607|  14.4M|    }
_ZNK4nano6ranges6detail6ssize_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSB_:
 3076|  13.2M|            {
 3077|  13.2M|                return fn::impl(std::forward<T>(t));
 3078|  13.2M|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS5_11conditionalIXltstNS5_9enable_ifIX5rangeISC_EENS0_20incrementable_traitsIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRSC_EEEEE15difference_typeEE4typeELm8EElSL_E4typeE_EEOSC_:
 3066|  13.2M|            {
 3067|  13.2M|                return static_cast<ssize_return_t<T>>(
 3068|  13.2M|                    ranges::size(std::forward<T>(t)));
 3069|  13.2M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 3037|  13.2M|            {
 3038|  13.2M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  13.2M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEmEENS5_9enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESC_E4typeEOSE_NS1_12priority_tagILm2EEE:
 2999|  13.2M|            {
 3000|  13.2M|                return decay_copy(std::forward<T>(t).size());
 3001|  13.2M|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS9_DpOSA_:
 1299|  12.3M|            {
 1300|  12.3M|                return fn::impl(std::forward<F>(f),
 1301|  12.3M|                                std::forward<Args>(args)...);
 1302|  12.3M|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJRKcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS9_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISC_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSC_DpOSF_:
 1288|  12.3M|            {
 1289|  12.3M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  12.3M|            }
_ZNK4nano6ranges8identityclIRKcEEOT_S6_:
 1141|  12.3M|    {
 1142|  12.3M|        return std::forward<T>(t);
 1143|  12.3M|    }
_ZNK4nano6ranges6detail9distance_2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EENS0_20incrementable_traitsIS9_E15difference_typeEE4typeES9_SA_:
 3755|  19.4M|            {
 3756|  19.4M|                return fn::impl(std::move(first), std::move(last));
 3757|  19.4M|            }
_ZN4nano6ranges6detail9distance_2fn4implIPKcS6_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISA_E15difference_typeEE4typeESA_S9_:
 3715|  19.4M|            {
 3716|  19.4M|                return s - i;
 3717|  19.4M|            }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S9_:
 6374|  1.45M|        {
 6375|  1.45M|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELb0EEC2EOS8_OS9_:
 6293|  1.45M|        {
 6294|  1.45M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  2.74M|            {
 2693|  2.74M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  2.74M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  2.74M|            {
 2672|  2.74M|                return decay_copy(t.begin());
 2673|  2.74M|            }
_ZN4nano6ranges6detail10decay_copyIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__15decayIT_E4typeEOSB_:
 2605|  5.38M|    {
 2606|  5.38M|        return std::forward<T>(t);
 2607|  5.38M|    }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2758|   996k|            {
 2759|   996k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   996k|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|   996k|            {
 2739|   996k|                return decay_copy(std::forward<T>(t).end());
 2740|   996k|            }
_ZN4nano6ranges6detail10decay_copyINS0_18default_sentinel_tEEENSt3__15decayIT_E4typeEOS6_:
 2605|  8.88M|    {
 2606|  8.88M|        return std::forward<T>(t);
 2607|  8.88M|    }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE3endEv:
 6448|  2.29M|        {
 6449|  2.29M|            return data_.end_;
 6450|  2.29M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_LNS0_13subrange_kindE0EE5beginEv:
 6443|  83.0k|        {
 6444|  83.0k|            return data_.begin_;
 6445|  83.0k|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_LNS0_13subrange_kindE0EE3endEv:
 6448|  83.0k|        {
 6449|  83.0k|            return data_.end_;
 6450|  83.0k|        }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_LNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S8_:
 6374|  27.6k|        {
 6375|  27.6k|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_Lb0EEC2EOS8_SA_:
 6293|  27.6k|        {
 6294|  27.6k|        }
_ZNK4nano6ranges6detail5next_2fnclIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
 3779|   359k|            {
 3780|   359k|                ++x;
 3781|   359k|                return x;
 3782|   359k|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEENS0_8identityENS7_4impl12function_refIFbcESJ_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SG_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSN_EEEENS1_16projected_helperISV_SQ_vEEEEEENSP_IX14borrowed_rangeISN_EEE4typeISV_NS0_8danglingEEEE4typeEOSN_SO_SQ_:
 6792|   207k|        {
 6793|   207k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|   207k|                                    proj);
 6795|   207k|        }
_ZN4nano6ranges6detail10find_if_fn4implIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tENS5_4impl12function_refIFbcESD_EENS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|   207k|        {
 6761|   235k|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 235k, False: 24]
  ------------------
 6762|   235k|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 207k, False: 27.6k]
  ------------------
 6763|   207k|                    return first;
 6764|   207k|                }
 6765|  27.6k|                ++first;
 6766|  27.6k|            }
 6767|     24|            return first;
 6768|   207k|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbcES9_EEJcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSC_DpOSD_:
 1299|   235k|            {
 1300|   235k|                return fn::impl(std::forward<F>(f),
 1301|   235k|                                std::forward<Args>(args)...);
 1302|   235k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbcES9_EEJcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINSC_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISF_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSF_DpOSI_:
 1288|   235k|            {
 1289|   235k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   235k|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS7_DpOS8_:
 1299|   235k|            {
 1300|   235k|                return fn::impl(std::forward<F>(f),
 1301|   235k|                                std::forward<Args>(args)...);
 1302|   235k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS7_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISA_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSA_DpOSD_:
 1288|   235k|            {
 1289|   235k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   235k|            }
_ZNK4nano6ranges8identityclIcEEOT_S4_:
 1141|   235k|    {
 1142|   235k|        return std::forward<T>(t);
 1143|   235k|    }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  1.30M|            {
 2759|  1.30M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  1.30M|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|  1.30M|            {
 2739|  1.30M|                return decay_copy(std::forward<T>(t).end());
 2740|  1.30M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2692|  2.64M|            {
 2693|  2.64M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  2.64M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|  2.64M|            {
 2672|  2.64M|                return decay_copy(t.begin());
 2673|  2.64M|            }
_ZNK4nano6ranges6detail5data_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSC_:
 3177|  3.37M|            {
 3178|  3.37M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  3.37M|            }
_ZN4nano6ranges6detail5data_2fn4implINS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  3.37M|            {
 3158|  3.37M|                return t.data();
 3159|  3.37M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 3037|  15.0M|            {
 3038|  15.0M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  15.0M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESE_E4typeEOSG_NS1_12priority_tagILm2EEE:
 2999|  15.0M|            {
 3000|  15.0M|                return decay_copy(std::forward<T>(t).size());
 3001|  15.0M|            }
_ZNK4nano6ranges6detail5next_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
 3779|  9.07M|            {
 3780|  9.07M|                ++x;
 3781|  9.07M|                return x;
 3782|  9.07M|            }
_ZNK4nano6ranges6detail6ssize_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSC_:
 3076|  11.6M|            {
 3077|  11.6M|                return fn::impl(std::forward<T>(t));
 3078|  11.6M|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNSt3__111conditionalIXltstNSE_9enable_ifIX5rangeISD_EENS0_20incrementable_traitsIDTclL_ZNSC_5beginEEclsr3stdE7declvalIRSD_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSD_:
 3066|  11.6M|            {
 3067|  11.6M|                return static_cast<ssize_return_t<T>>(
 3068|  11.6M|                    ranges::size(std::forward<T>(t)));
 3069|  11.6M|            }
_ZNK4nano6ranges6detail5prev_2fnclIPKwEENSt3__19enable_ifIX22bidirectional_iteratorIT_EES9_E4typeES9_:
 3827|  1.33M|            {
 3828|  1.33M|                --x;
 3829|  1.33M|                return x;
 3830|  1.33M|            }
_ZNK4nano6ranges6detail9distance_2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EENS0_20incrementable_traitsIS9_E15difference_typeEE4typeES9_SA_:
 3755|  12.5M|            {
 3756|  12.5M|                return fn::impl(std::move(first), std::move(last));
 3757|  12.5M|            }
_ZN4nano6ranges6detail9distance_2fn4implIPKwS6_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISA_E15difference_typeEE4typeESA_S9_:
 3715|  12.5M|            {
 3716|  12.5M|                return s - i;
 3717|  12.5M|            }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S9_:
 6374|  4.19M|        {
 6375|  4.19M|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELb0EEC2EOS8_OS9_:
 6293|  4.19M|        {
 6294|  4.19M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  8.65M|            {
 2693|  8.65M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  8.65M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  8.65M|            {
 2672|  8.65M|                return decay_copy(t.begin());
 2673|  8.65M|            }
_ZN4nano6ranges6detail10decay_copyIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__15decayIT_E4typeEOSB_:
 2605|  16.3M|    {
 2606|  16.3M|        return std::forward<T>(t);
 2607|  16.3M|    }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2758|  2.82M|            {
 2759|  2.82M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  2.82M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|  2.82M|            {
 2739|  2.82M|                return decay_copy(std::forward<T>(t).end());
 2740|  2.82M|            }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE3endEv:
 6448|  6.58M|        {
 6449|  6.58M|            return data_.end_;
 6450|  6.58M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_LNS0_13subrange_kindE0EE5beginEv:
 6443|   249k|        {
 6444|   249k|            return data_.begin_;
 6445|   249k|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_LNS0_13subrange_kindE0EE3endEv:
 6448|   249k|        {
 6449|   249k|            return data_.end_;
 6450|   249k|        }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_LNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S8_:
 6374|  83.0k|        {
 6375|  83.0k|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_Lb0EEC2EOS8_SA_:
 6293|  83.0k|        {
 6294|  83.0k|        }
_ZNK4nano6ranges6detail5next_2fnclIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
 3779|  1.05M|            {
 3780|  1.05M|                ++x;
 3781|  1.05M|                return x;
 3782|  1.05M|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEENS0_8identityENS7_4impl12function_refIFbwESJ_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SG_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSN_EEEENS1_16projected_helperISV_SQ_vEEEEEENSP_IX14borrowed_rangeISN_EEE4typeISV_NS0_8danglingEEEE4typeEOSN_SO_SQ_:
 6792|   595k|        {
 6793|   595k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|   595k|                                    proj);
 6795|   595k|        }
_ZN4nano6ranges6detail10find_if_fn4implIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tENS5_4impl12function_refIFbwESD_EENS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|   595k|        {
 6761|   844k|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 844k, False: 44]
  ------------------
 6762|   844k|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 595k, False: 249k]
  ------------------
 6763|   595k|                    return first;
 6764|   595k|                }
 6765|   249k|                ++first;
 6766|   249k|            }
 6767|     44|            return first;
 6768|   595k|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbwES9_EEJwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSC_DpOSD_:
 1299|   844k|            {
 1300|   844k|                return fn::impl(std::forward<F>(f),
 1301|   844k|                                std::forward<Args>(args)...);
 1302|   844k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbwES9_EEJwEEENSt3__19enable_ifIXntsr3std17is_member_pointerINSC_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISF_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSF_DpOSI_:
 1288|   844k|            {
 1289|   844k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   844k|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS7_DpOS8_:
 1299|   844k|            {
 1300|   844k|                return fn::impl(std::forward<F>(f),
 1301|   844k|                                std::forward<Args>(args)...);
 1302|   844k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJwEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS7_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISA_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSA_DpOSD_:
 1288|   844k|            {
 1289|   844k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   844k|            }
_ZNK4nano6ranges8identityclIwEEOT_S4_:
 1141|   844k|    {
 1142|   844k|        return std::forward<T>(t);
 1143|   844k|    }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  3.76M|            {
 2759|  3.76M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  3.76M|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|  3.76M|            {
 2739|  3.76M|                return decay_copy(std::forward<T>(t).end());
 2740|  3.76M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2692|  7.70M|            {
 2693|  7.70M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  7.70M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|  7.70M|            {
 2672|  7.70M|                return decay_copy(t.begin());
 2673|  7.70M|            }
find_whitespace.cpp:_ZNK4nano6ranges6detail10find_if_fnclIRNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEENS0_8identityEZN3scn2v24impl33find_classic_nonspace_narrow_fastES8_E3$_3EENS4_9enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SA_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSG_EEEENS1_16projected_helperISO_SJ_vEEEEEENSI_IX14borrowed_rangeISG_EEE4typeISO_NS0_8danglingEEEE4typeEOSG_SH_SJ_:
 6792|  5.93M|        {
 6793|  5.93M|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|  5.93M|                                    proj);
 6795|  5.93M|        }
find_whitespace.cpp:_ZN4nano6ranges6detail10find_if_fn4implIPKcS5_ZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEE3$_3NS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|  5.93M|        {
 6761|  12.4M|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 12.3M, False: 85.1k]
  ------------------
 6762|  12.3M|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 5.85M, False: 6.54M]
  ------------------
 6763|  5.85M|                    return first;
 6764|  5.85M|                }
 6765|  6.54M|                ++first;
 6766|  6.54M|            }
 6767|  85.1k|            return first;
 6768|  5.93M|        }
find_whitespace.cpp:_ZNK4nano6ranges6detail7invoke_2fnclIRZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_3JRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSH_DpOSI_:
 1299|  12.3M|            {
 1300|  12.3M|                return fn::impl(std::forward<F>(f),
 1301|  12.3M|                                std::forward<Args>(args)...);
 1302|  12.3M|            }
find_whitespace.cpp:_ZN4nano6ranges6detail7invoke_2fn4implIRZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_3JRKcEEENS8_9enable_ifIXntsr3std17is_member_pointerINS8_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISJ_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSJ_DpOSM_:
 1288|  12.3M|            {
 1289|  12.3M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  12.3M|            }

_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA22_KcEEEDaDpOT_:
   49|   568k|{
   50|   568k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|   568k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|   568k|}
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
   49|   192k|{
   50|   192k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|   192k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|   192k|}
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA51_KcEEEDaDpOT_:
   49|  59.6k|{
   50|  59.6k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|  59.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  59.6k|}
_ZN3scn2v213scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
   43|   207k|    {
   44|   207k|    }
_ZN3scn2v213scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
   43|   595k|    {
   44|   595k|    }
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA17_KcEEEDaDpOT_:
   49|  79.0k|{
   50|  79.0k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|  79.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  79.0k|}

_ZNK3scn2v28expectedIlNS0_10scan_errorEEcvbEv:
 1190|  13.9M|    {
 1191|  13.9M|        return has_value();
 1192|  13.9M|    }
_ZNK3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  188|  26.7M|    {
  189|  26.7M|        return m_has_value;
  190|  26.7M|    }
_ZNR3scn2v28expectedIlNS0_10scan_errorEE5errorEv:
 1196|  2.32M|    {
 1197|  2.32M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  2.32M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.32M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  2.32M|    }
_ZNR3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|  2.32M|    {
  172|  2.32M|        return m_unexpected;
  173|  2.32M|    }
_ZNR3scn2v210unexpectedINS0_10scan_errorEE5errorEv:
   71|  17.5M|    {
   72|  17.5M|        return m_unexpected;
   73|  17.5M|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
   57|  8.65M|    {
   58|  8.65M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  8.65M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  8.65M|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISA_LPv0ELSD_0EEEONS0_10unexpectedIT_EE:
 1077|   290k|    {
 1078|   290k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  150|   290k|    {
  151|   290k|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
   66|  10.3M|    {
   67|  10.3M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  10.3M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|  10.3M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  5.78M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1250|  10.4M|    {
 1251|  10.4M|        return value();
 1252|  10.4M|    }
_ZNR3scn2v28expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1220|  10.4M|    {
 1221|  10.4M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  10.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  10.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  10.4M|    }
_ZNR3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  154|  10.4M|    {
  155|  10.4M|        return m_value;
  156|  10.4M|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2IS9_vEEOT_:
 1033|  5.49M|    {
 1034|  5.49M|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  141|  5.49M|    {
  142|  5.49M|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|  5.78M|    {
 1191|  5.78M|        return has_value();
 1192|  5.78M|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|  11.5M|    {
  189|  11.5M|        return m_has_value;
  190|  11.5M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   290k|    {
 1197|   290k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   290k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   290k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   290k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   290k|    {
  172|   290k|        return m_unexpected;
  173|   290k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  48.4k|    {
 1078|  48.4k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  48.4k|    {
  151|  48.4k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   760k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEERT_v:
 1250|  4.96M|    {
 1251|  4.96M|        return value();
 1252|  4.96M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1220|  5.49M|    {
 1221|  5.49M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  5.49M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.49M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  5.49M|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|  5.49M|    {
  155|  5.49M|        return m_value;
  156|  5.49M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   712k|    {
 1034|   712k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   712k|    {
  142|   712k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEcvbEv:
 1190|   760k|    {
 1191|   760k|        return has_value();
 1192|   760k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.47M|    {
  189|  1.47M|        return m_has_value;
  190|  1.47M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEptEv:
 1273|   712k|    {
 1274|   712k|        return std::addressof(value());
 1275|   712k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   712k|    {
 1221|   712k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   712k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   712k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   712k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   712k|    {
  155|   712k|        return m_value;
  156|   712k|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1262|   530k|    {
 1263|   530k|        return std::move(value());
 1264|   530k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  48.4k|    {
 1078|  48.4k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  48.4k|    {
  151|  48.4k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   775k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   726k|    {
 1034|   726k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   726k|    {
  142|   726k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEcvbEv:
 1190|   775k|    {
 1191|   775k|        return has_value();
 1192|   775k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.50M|    {
  189|  1.50M|        return m_has_value;
  190|  1.50M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEptEv:
 1273|   726k|    {
 1274|   726k|        return std::addressof(value());
 1275|   726k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   726k|    {
 1221|   726k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   726k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   726k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   726k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   726k|    {
  155|   726k|        return m_value;
  156|   726k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  48.4k|    {
 1078|  48.4k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  48.4k|    {
  151|  48.4k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.13M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|  1.08M|    {
 1034|  1.08M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|  1.08M|    {
  142|  1.08M|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEcvbEv:
 1190|  1.13M|    {
 1191|  1.13M|        return has_value();
 1192|  1.13M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  2.21M|    {
  189|  2.21M|        return m_has_value;
  190|  2.21M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEptEv:
 1273|  1.08M|    {
 1274|  1.08M|        return std::addressof(value());
 1275|  1.08M|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|  1.08M|    {
 1221|  1.08M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.08M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.08M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.08M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  1.08M|    {
  155|  1.08M|        return m_value;
  156|  1.08M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  48.4k|    {
 1078|  48.4k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  48.4k|    {
  151|  48.4k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   947k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   898k|    {
 1034|   898k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   898k|    {
  142|   898k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEcvbEv:
 1190|   947k|    {
 1191|   947k|        return has_value();
 1192|   947k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.84M|    {
  189|  1.84M|        return m_has_value;
  190|  1.84M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEptEv:
 1273|   898k|    {
 1274|   898k|        return std::addressof(value());
 1275|   898k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   898k|    {
 1221|   898k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   898k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   898k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   898k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   898k|    {
  155|   898k|        return m_value;
  156|   898k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  48.4k|    {
 1078|  48.4k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  48.4k|    {
  151|  48.4k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.18M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|  1.13M|    {
 1034|  1.13M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|  1.13M|    {
  142|  1.13M|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEcvbEv:
 1190|  1.18M|    {
 1191|  1.18M|        return has_value();
 1192|  1.18M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  2.32M|    {
  189|  2.32M|        return m_has_value;
  190|  2.32M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEptEv:
 1273|  1.13M|    {
 1274|  1.13M|        return std::addressof(value());
 1275|  1.13M|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|  1.13M|    {
 1221|  1.13M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.13M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  1.13M|    {
  155|  1.13M|        return m_value;
  156|  1.13M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  48.4k|    {
 1078|  48.4k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  48.4k|    {
  151|  48.4k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   981k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   932k|    {
 1034|   932k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   932k|    {
  142|   932k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEcvbEv:
 1190|   981k|    {
 1191|   981k|        return has_value();
 1192|   981k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.91M|    {
  189|  1.91M|        return m_has_value;
  190|  1.91M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEptEv:
 1273|   932k|    {
 1274|   932k|        return std::addressof(value());
 1275|   932k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   932k|    {
 1221|   932k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   932k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   932k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   932k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   932k|    {
  155|   932k|        return m_value;
  156|   932k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1077|   290k|    {
 1078|   290k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  150|   290k|    {
  151|   290k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   318k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISF_vEEOT_:
 1033|  27.6k|    {
 1034|  27.6k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSG_EvEENS7_10in_place_tEDpOT_:
  141|  27.6k|    {
  142|  27.6k|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|   318k|    {
 1191|   318k|        return has_value();
 1192|   318k|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|   636k|    {
  189|   636k|        return m_has_value;
  190|   636k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   290k|    {
 1197|   290k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   290k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   290k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   290k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   290k|    {
  172|   290k|        return m_unexpected;
  173|   290k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  48.4k|    {
 1078|  48.4k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  48.4k|    {
  151|  48.4k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  53.0k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeISF_LPv0EEERT_v:
 1250|  27.6k|    {
 1251|  27.6k|        return value();
 1252|  27.6k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1220|  27.6k|    {
 1221|  27.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  27.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  27.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  27.6k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|  27.6k|    {
  155|  27.6k|        return m_value;
  156|  27.6k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  4.61k|    {
 1034|  4.61k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  4.61k|    {
  142|  4.61k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEcvbEv:
 1190|  53.0k|    {
 1191|  53.0k|        return has_value();
 1192|  53.0k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  57.6k|    {
  189|  57.6k|        return m_has_value;
  190|  57.6k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEptEv:
 1273|  4.61k|    {
 1274|  4.61k|        return std::addressof(value());
 1275|  4.61k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  4.61k|    {
 1221|  4.61k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  4.61k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.61k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  4.61k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  4.61k|    {
  155|  4.61k|        return m_value;
  156|  4.61k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  48.4k|    {
 1078|  48.4k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  48.4k|    {
  151|  48.4k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  53.0k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  4.61k|    {
 1034|  4.61k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  4.61k|    {
  142|  4.61k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEcvbEv:
 1190|  53.0k|    {
 1191|  53.0k|        return has_value();
 1192|  53.0k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  57.6k|    {
  189|  57.6k|        return m_has_value;
  190|  57.6k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEptEv:
 1273|  4.61k|    {
 1274|  4.61k|        return std::addressof(value());
 1275|  4.61k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  4.61k|    {
 1221|  4.61k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  4.61k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.61k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  4.61k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  4.61k|    {
  155|  4.61k|        return m_value;
  156|  4.61k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  48.4k|    {
 1078|  48.4k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  48.4k|    {
  151|  48.4k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  53.0k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  4.61k|    {
 1034|  4.61k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  4.61k|    {
  142|  4.61k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEcvbEv:
 1190|  53.0k|    {
 1191|  53.0k|        return has_value();
 1192|  53.0k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  57.6k|    {
  189|  57.6k|        return m_has_value;
  190|  57.6k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEptEv:
 1273|  4.61k|    {
 1274|  4.61k|        return std::addressof(value());
 1275|  4.61k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  4.61k|    {
 1221|  4.61k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  4.61k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.61k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  4.61k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  4.61k|    {
  155|  4.61k|        return m_value;
  156|  4.61k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  48.4k|    {
 1078|  48.4k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  48.4k|    {
  151|  48.4k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  53.0k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  4.61k|    {
 1034|  4.61k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  4.61k|    {
  142|  4.61k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEcvbEv:
 1190|  53.0k|    {
 1191|  53.0k|        return has_value();
 1192|  53.0k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  57.6k|    {
  189|  57.6k|        return m_has_value;
  190|  57.6k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEptEv:
 1273|  4.61k|    {
 1274|  4.61k|        return std::addressof(value());
 1275|  4.61k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  4.61k|    {
 1221|  4.61k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  4.61k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.61k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  4.61k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  4.61k|    {
  155|  4.61k|        return m_value;
  156|  4.61k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  48.4k|    {
 1078|  48.4k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  48.4k|    {
  151|  48.4k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  53.0k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  4.61k|    {
 1034|  4.61k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  4.61k|    {
  142|  4.61k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEcvbEv:
 1190|  53.0k|    {
 1191|  53.0k|        return has_value();
 1192|  53.0k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  57.6k|    {
  189|  57.6k|        return m_has_value;
  190|  57.6k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEptEv:
 1273|  4.61k|    {
 1274|  4.61k|        return std::addressof(value());
 1275|  4.61k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  4.61k|    {
 1221|  4.61k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  4.61k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.61k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  4.61k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  4.61k|    {
  155|  4.61k|        return m_value;
  156|  4.61k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  48.4k|    {
 1078|  48.4k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  48.4k|    {
  151|  48.4k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  53.0k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  4.61k|    {
 1034|  4.61k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  4.61k|    {
  142|  4.61k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEcvbEv:
 1190|  53.0k|    {
 1191|  53.0k|        return has_value();
 1192|  53.0k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  57.6k|    {
  189|  57.6k|        return m_has_value;
  190|  57.6k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEptEv:
 1273|  4.61k|    {
 1274|  4.61k|        return std::addressof(value());
 1275|  4.61k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  4.61k|    {
 1221|  4.61k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  4.61k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.61k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  4.61k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  4.61k|    {
  155|  4.61k|        return m_value;
  156|  4.61k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISA_LPv0ELSD_0EEEONS0_10unexpectedIT_EE:
 1077|   872k|    {
 1078|   872k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  150|   872k|    {
  151|   872k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  5.66M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2IS9_vEEOT_:
 1033|  4.79M|    {
 1034|  4.79M|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  141|  4.79M|    {
  142|  4.79M|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|  5.66M|    {
 1191|  5.66M|        return has_value();
 1192|  5.66M|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|  11.3M|    {
  189|  11.3M|        return m_has_value;
  190|  11.3M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   872k|    {
 1197|   872k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   872k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   872k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   872k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   872k|    {
  172|   872k|        return m_unexpected;
  173|   872k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|   145k|    {
 1078|   145k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|   145k|    {
  151|   145k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   757k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEERT_v:
 1250|  4.33M|    {
 1251|  4.33M|        return value();
 1252|  4.33M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1220|  4.79M|    {
 1221|  4.79M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  4.79M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.79M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  4.79M|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|  4.79M|    {
  155|  4.79M|        return m_value;
  156|  4.79M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   611k|    {
 1034|   611k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   611k|    {
  142|   611k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEcvbEv:
 1190|   757k|    {
 1191|   757k|        return has_value();
 1192|   757k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.36M|    {
  189|  1.36M|        return m_has_value;
  190|  1.36M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEptEv:
 1273|   611k|    {
 1274|   611k|        return std::addressof(value());
 1275|   611k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   611k|    {
 1221|   611k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   611k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   611k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   611k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   611k|    {
  155|   611k|        return m_value;
  156|   611k|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1262|   463k|    {
 1263|   463k|        return std::move(value());
 1264|   463k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|   145k|    {
 1078|   145k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|   145k|    {
  151|   145k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   790k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   645k|    {
 1034|   645k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   645k|    {
  142|   645k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEcvbEv:
 1190|   790k|    {
 1191|   790k|        return has_value();
 1192|   790k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.43M|    {
  189|  1.43M|        return m_has_value;
  190|  1.43M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEptEv:
 1273|   645k|    {
 1274|   645k|        return std::addressof(value());
 1275|   645k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   645k|    {
 1221|   645k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   645k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   645k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   645k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   645k|    {
  155|   645k|        return m_value;
  156|   645k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|   145k|    {
 1078|   145k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|   145k|    {
  151|   145k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.07M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   930k|    {
 1034|   930k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   930k|    {
  142|   930k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEcvbEv:
 1190|  1.07M|    {
 1191|  1.07M|        return has_value();
 1192|  1.07M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  2.00M|    {
  189|  2.00M|        return m_has_value;
  190|  2.00M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEptEv:
 1273|   930k|    {
 1274|   930k|        return std::addressof(value());
 1275|   930k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   930k|    {
 1221|   930k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   930k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   930k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   930k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   930k|    {
  155|   930k|        return m_value;
  156|   930k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|   145k|    {
 1078|   145k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|   145k|    {
  151|   145k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   945k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   799k|    {
 1034|   799k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   799k|    {
  142|   799k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEcvbEv:
 1190|   945k|    {
 1191|   945k|        return has_value();
 1192|   945k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.74M|    {
  189|  1.74M|        return m_has_value;
  190|  1.74M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEptEv:
 1273|   799k|    {
 1274|   799k|        return std::addressof(value());
 1275|   799k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   799k|    {
 1221|   799k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   799k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   799k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   799k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   799k|    {
  155|   799k|        return m_value;
  156|   799k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|   145k|    {
 1078|   145k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|   145k|    {
  151|   145k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.12M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   978k|    {
 1034|   978k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   978k|    {
  142|   978k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEcvbEv:
 1190|  1.12M|    {
 1191|  1.12M|        return has_value();
 1192|  1.12M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  2.10M|    {
  189|  2.10M|        return m_has_value;
  190|  2.10M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEptEv:
 1273|   978k|    {
 1274|   978k|        return std::addressof(value());
 1275|   978k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   978k|    {
 1221|   978k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   978k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   978k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   978k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   978k|    {
  155|   978k|        return m_value;
  156|   978k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|   145k|    {
 1078|   145k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|   145k|    {
  151|   145k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   977k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   831k|    {
 1034|   831k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   831k|    {
  142|   831k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEcvbEv:
 1190|   977k|    {
 1191|   977k|        return has_value();
 1192|   977k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.80M|    {
  189|  1.80M|        return m_has_value;
  190|  1.80M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEptEv:
 1273|   831k|    {
 1274|   831k|        return std::addressof(value());
 1275|   831k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   831k|    {
 1221|   831k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   831k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   831k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   831k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   831k|    {
  155|   831k|        return m_value;
  156|   831k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1077|   872k|    {
 1078|   872k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  150|   872k|    {
  151|   872k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   927k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISF_vEEOT_:
 1033|  55.3k|    {
 1034|  55.3k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSG_EvEENS7_10in_place_tEDpOT_:
  141|  55.3k|    {
  142|  55.3k|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|   927k|    {
 1191|   927k|        return has_value();
 1192|   927k|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.85M|    {
  189|  1.85M|        return m_has_value;
  190|  1.85M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   872k|    {
 1197|   872k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   872k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   872k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   872k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   872k|    {
  172|   872k|        return m_unexpected;
  173|   872k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|   145k|    {
 1078|   145k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|   145k|    {
  151|   145k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   145k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeISF_LPv0EEERT_v:
 1250|  55.3k|    {
 1251|  55.3k|        return value();
 1252|  55.3k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1220|  55.3k|    {
 1221|  55.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  55.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  55.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  55.3k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|  55.3k|    {
  155|  55.3k|        return m_value;
  156|  55.3k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|      2|    {
 1034|      2|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|      2|    {
  142|      2|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEcvbEv:
 1190|   145k|    {
 1191|   145k|        return has_value();
 1192|   145k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   145k|    {
  189|   145k|        return m_has_value;
  190|   145k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEptEv:
 1273|      2|    {
 1274|      2|        return std::addressof(value());
 1275|      2|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|      2|    {
 1221|      2|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|      2|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      2|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|      2|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  154|      2|    {
  155|      2|        return m_value;
  156|      2|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|   145k|    {
 1078|   145k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|   145k|    {
  151|   145k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   145k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|      4|    {
 1034|      4|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|      4|    {
  142|      4|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEcvbEv:
 1190|   145k|    {
 1191|   145k|        return has_value();
 1192|   145k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   145k|    {
  189|   145k|        return m_has_value;
  190|   145k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEptEv:
 1273|      4|    {
 1274|      4|        return std::addressof(value());
 1275|      4|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|      4|    {
 1221|      4|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|      4|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      4|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|      4|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  154|      4|    {
  155|      4|        return m_value;
  156|      4|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|   145k|    {
 1078|   145k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|   145k|    {
  151|   145k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   159k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  13.8k|    {
 1034|  13.8k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  13.8k|    {
  142|  13.8k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEcvbEv:
 1190|   159k|    {
 1191|   159k|        return has_value();
 1192|   159k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   173k|    {
  189|   173k|        return m_has_value;
  190|   173k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEptEv:
 1273|  13.8k|    {
 1274|  13.8k|        return std::addressof(value());
 1275|  13.8k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  13.8k|    {
 1221|  13.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  13.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  13.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  13.8k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  13.8k|    {
  155|  13.8k|        return m_value;
  156|  13.8k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|   145k|    {
 1078|   145k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|   145k|    {
  151|   145k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   159k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  13.8k|    {
 1034|  13.8k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  13.8k|    {
  142|  13.8k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEcvbEv:
 1190|   159k|    {
 1191|   159k|        return has_value();
 1192|   159k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   173k|    {
  189|   173k|        return m_has_value;
  190|   173k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEptEv:
 1273|  13.8k|    {
 1274|  13.8k|        return std::addressof(value());
 1275|  13.8k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  13.8k|    {
 1221|  13.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  13.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  13.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  13.8k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  13.8k|    {
  155|  13.8k|        return m_value;
  156|  13.8k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|   145k|    {
 1078|   145k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|   145k|    {
  151|   145k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   159k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  13.8k|    {
 1034|  13.8k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  13.8k|    {
  142|  13.8k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEcvbEv:
 1190|   159k|    {
 1191|   159k|        return has_value();
 1192|   159k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   173k|    {
  189|   173k|        return m_has_value;
  190|   173k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEptEv:
 1273|  13.8k|    {
 1274|  13.8k|        return std::addressof(value());
 1275|  13.8k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  13.8k|    {
 1221|  13.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  13.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  13.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  13.8k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  13.8k|    {
  155|  13.8k|        return m_value;
  156|  13.8k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|   145k|    {
 1078|   145k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|   145k|    {
  151|   145k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   159k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  13.8k|    {
 1034|  13.8k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  13.8k|    {
  142|  13.8k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEcvbEv:
 1190|   159k|    {
 1191|   159k|        return has_value();
 1192|   159k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   173k|    {
  189|   173k|        return m_has_value;
  190|   173k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEptEv:
 1273|  13.8k|    {
 1274|  13.8k|        return std::addressof(value());
 1275|  13.8k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  13.8k|    {
 1221|  13.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  13.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  13.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  13.8k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  13.8k|    {
  155|  13.8k|        return m_value;
  156|  13.8k|    }
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDaOT_:
 1404|  5.70M|    {
 1405|  5.70M|        return detail::transform_error_impl(std::move(*this),
 1406|  5.70M|                                            std::forward<F>(f));
 1407|  5.70M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  5.70M|{
  927|  5.70M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  5.70M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  5.70M|        if (SCN_LIKELY(exp.has_value())) {
  930|  5.70M|            return result(*std::forward<Exp>(exp));
  931|  5.70M|        }
  932|       |
  933|  5.70M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  5.70M|        return result(unexpect, monostate{});
  935|  5.70M|    }
  936|  5.70M|    else {
  937|  5.70M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  5.70M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  5.70M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 5.67M, False: 27.1k]
  |  |  ------------------
  ------------------
  939|  5.70M|                   ? result(*std::forward<Exp>(exp))
  940|  5.70M|                   : result(unexpect,
  941|  27.1k|                            std::invoke(std::forward<F>(f),
  942|  27.1k|                                        std::forward<Exp>(exp).error()));
  943|  5.70M|    }
  944|  5.70M|}
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  23.6M|    {
  189|  23.6M|        return m_has_value;
  190|  23.6M|    }
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1262|  5.67M|    {
 1263|  5.67M|        return std::move(value());
 1264|  5.67M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1220|  8.30M|    {
 1221|  8.30M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  8.30M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  8.30M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  8.30M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  8.30M|    {
  155|  8.30M|        return m_value;
  156|  8.30M|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1033|  21.3M|    {
 1034|  21.3M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  21.3M|    {
  142|  21.3M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  21.7M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1206|  27.1k|    {
 1207|  27.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  27.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  27.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|  27.1k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|  28.7k|    {
  172|  28.7k|        return m_unexpected;
  173|  28.7k|    }
_ZNR3scn2v210unexpectedINS0_4impl9eof_errorEE5errorEv:
   71|   367k|    {
   72|   367k|        return m_unexpected;
   73|   367k|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1087|  27.1k|    {
 1088|  27.1k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  150|   396k|    {
  151|   396k|    }
_ZNK3scn2v28expectedIPKcNS0_10scan_errorEEcvbEv:
 1190|  21.7M|    {
 1191|  21.7M|        return has_value();
 1192|  21.7M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  188|  43.5M|    {
  189|  43.5M|        return m_has_value;
  190|  43.5M|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEE5errorEv:
 1196|   396k|    {
 1197|   396k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   396k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   396k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   396k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   396k|    {
  172|   396k|        return m_unexpected;
  173|   396k|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1077|   369k|    {
 1078|   369k|    }
_ZNO3scn2v28expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1262|  17.4M|    {
 1263|  17.4M|        return std::move(value());
 1264|  17.4M|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1220|  21.3M|    {
 1221|  21.3M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  21.3M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  21.3M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  21.3M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  154|  21.3M|    {
  155|  21.3M|        return m_value;
  156|  21.3M|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
   57|   900k|    {
   58|   900k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   900k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|   900k|    }
_ZN3scn2v28expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1077|  2.32M|    {
 1078|  2.32M|    }
_ZN3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  150|  2.32M|    {
  151|  2.32M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  12.6M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
   57|  67.1k|    {
   58|  67.1k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  67.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  67.1k|    }
_ZN3scn2v28expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|  28.7k|    {
 1078|  28.7k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  28.7k|    {
  151|  28.7k|    }
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
   66|   183k|    {
   67|   183k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   183k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|   183k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  15.3M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1033|  15.2M|    {
 1034|  15.2M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  15.2M|    {
  142|  15.2M|    }
_ZNK3scn2v28expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1190|  9.61M|    {
 1191|  9.61M|        return has_value();
 1192|  9.61M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1196|  1.56k|    {
 1197|  1.56k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  1.56k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.56k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  1.56k|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
   57|  52.6k|    {
   58|  52.6k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  52.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  52.6k|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|  49.9k|    {
 1078|  49.9k|    }
_ZNR3scn2v210unexpectedINS0_4impl11parse_errorEE5errorEv:
   71|  12.3M|    {
   72|  12.3M|        return m_unexpected;
   73|  12.3M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  49.9k|    {
  151|  49.9k|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
   66|   285k|    {
   67|   285k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   285k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|   285k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  26.0M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1250|  2.62M|    {
 1251|  2.62M|        return value();
 1252|  2.62M|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1033|  4.98M|    {
 1034|  4.98M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  141|  4.98M|    {
  142|  4.98M|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
   57|  44.9M|    {
   58|  44.9M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  44.9M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  44.9M|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|  20.9M|    {
 1078|  20.9M|    }
_ZNR3scn2v210unexpectedINS0_4impl11parse_error4codeEE5errorEv:
   71|  44.9M|    {
   72|  44.9M|        return m_unexpected;
   73|  44.9M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  20.9M|    {
  151|  20.9M|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
   66|  44.9M|    {
   67|  44.9M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  44.9M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|  44.9M|    }
_ZNK3scn2v28expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1190|  26.0M|    {
 1191|  26.0M|        return has_value();
 1192|  26.0M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  36.4M|    {
  189|  36.4M|        return m_has_value;
  190|  36.4M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1196|  5.36M|    {
 1197|  5.36M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  5.36M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.36M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  5.36M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|  5.36M|    {
  172|  5.36M|        return m_unexpected;
  173|  5.36M|    }
_ZN3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1033|  5.67M|    {
 1034|  5.67M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  5.67M|    {
  142|  5.67M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  5.67M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
   57|   116k|    {
   58|   116k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   116k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|   116k|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1250|  5.08M|    {
 1251|  5.08M|        return value();
 1252|  5.08M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1220|  5.08M|    {
 1221|  5.08M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  5.08M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.08M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  5.08M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  154|  5.08M|    {
  155|  5.08M|        return m_value;
  156|  5.08M|    }
_ZNK3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1190|  5.67M|    {
 1191|  5.67M|        return has_value();
 1192|  5.67M|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  188|  11.3M|    {
  189|  11.3M|        return m_has_value;
  190|  11.3M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  5.67M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|  5.67M|    {
 1263|  5.67M|        return std::move(value());
 1264|  5.67M|    }
_ZNR3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|  5.67M|    {
 1221|  5.67M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  5.67M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.67M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  5.67M|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  154|  5.67M|    {
  155|  5.67M|        return m_value;
  156|  5.67M|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1033|  92.4k|    {
 1034|  92.4k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  92.4k|    {
  142|  92.4k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1033|  5.67M|    {
 1034|  5.67M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  5.67M|    {
  142|  5.67M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|  5.67M|    {
 1405|  5.67M|        return detail::transform_error_impl(std::move(*this),
 1406|  5.67M|                                            std::forward<F>(f));
 1407|  5.67M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
  926|  5.67M|{
  927|  5.67M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  5.67M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  5.67M|        if (SCN_LIKELY(exp.has_value())) {
  930|  5.67M|            return result(*std::forward<Exp>(exp));
  931|  5.67M|        }
  932|       |
  933|  5.67M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  5.67M|        return result(unexpect, monostate{});
  935|  5.67M|    }
  936|  5.67M|    else {
  937|  5.67M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  5.67M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  5.67M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 5.67M, False: 0]
  |  |  ------------------
  ------------------
  939|  5.67M|                   ? result(*std::forward<Exp>(exp))
  940|  5.67M|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|  5.67M|    }
  944|  5.67M|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  188|  11.3M|    {
  189|  11.3M|        return m_has_value;
  190|  11.3M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1262|  5.67M|    {
 1263|  5.67M|        return std::move(value());
 1264|  5.67M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1220|  5.67M|    {
 1221|  5.67M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  5.67M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.67M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  5.67M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  154|  5.67M|    {
  155|  5.67M|        return m_value;
  156|  5.67M|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1033|  5.67M|    {
 1034|  5.67M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  5.67M|    {
  142|  5.67M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  5.67M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1190|  5.67M|    {
 1191|  5.67M|        return has_value();
 1192|  5.67M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  188|  11.3M|    {
  189|  11.3M|        return m_has_value;
  190|  11.3M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1262|  5.67M|    {
 1263|  5.67M|        return std::move(value());
 1264|  5.67M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1220|  5.67M|    {
 1221|  5.67M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  5.67M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.67M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  5.67M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  154|  5.67M|    {
  155|  5.67M|        return m_value;
  156|  5.67M|    }
_ZN3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISD_LPv0ELSG_0EEEONS0_10unexpectedIT_EE:
 1077|  11.1k|    {
 1078|  11.1k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  311|  11.1k|    {
  312|  11.1k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  11.1k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESE_EEEvDpOT_:
  372|  11.1k|    {
  373|  11.1k|        scn::detail::construct_at(unexpected_ptr(),
  374|  11.1k|                                  std::forward<Args>(args)...);
  375|  11.1k|        m_has_value = false;
  376|  11.1k|    }
_ZN3scn2v26detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  101|   188k|{
  102|   188k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|   188k|        T(std::forward<Args>(args)...);
  104|   188k|}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|  33.4k|    {
  403|  33.4k|        return reinterpret_cast<unexpected<E>*>(
  404|  33.4k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|  33.4k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|  33.4k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   669k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EED2Ev:
  316|   669k|    {
  317|   669k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 658k, False: 11.1k]
  ------------------
  318|   658k|            destroy_value();
  319|   658k|        }
  320|  11.1k|        else {
  321|  11.1k|            destroy_unexpected();
  322|  11.1k|        }
  323|   669k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9has_valueEv:
  360|  2.00M|    {
  361|  2.00M|        return m_has_value;
  362|  2.00M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE13destroy_valueEv:
  379|   658k|    {
  380|   658k|        scn::detail::destroy_at(value_ptr());
  381|   658k|    }
_ZN3scn2v26detail10destroy_atINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEEEEvPT_:
  107|   658k|{
  108|   658k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|   658k|        for (auto& elem : *p) {
  110|   658k|            scn::detail::destroy_at(std::addressof(elem));
  111|   658k|        }
  112|   658k|    }
  113|   658k|    else {
  114|   658k|        p->~T();
  115|   658k|    }
  116|   658k|}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9value_ptrEv:
  389|  1.97M|    {
  390|  1.97M|        return reinterpret_cast<T*>(
  391|  1.97M|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(T)));
  ------------------
  |  |  201|  1.97M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  392|  1.97M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  11.1k|    {
  384|  11.1k|        scn::detail::destroy_at(unexpected_ptr());
  385|  11.1k|    }
_ZN3scn2v26detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  107|   188k|{
  108|   188k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|   188k|        for (auto& elem : *p) {
  110|   188k|            scn::detail::destroy_at(std::addressof(elem));
  111|   188k|        }
  112|   188k|    }
  113|   188k|    else {
  114|   188k|        p->~T();
  115|   188k|    }
  116|   188k|}
_ZN3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISC_vEEOT_:
 1033|   658k|    {
 1034|   658k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSD_EvEENS3_10in_place_tEDpOT_:
  302|   658k|    {
  303|   658k|        construct(std::forward<Args>(args)...);
  304|   658k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9constructIJSD_EEEvDpOT_:
  366|   658k|    {
  367|   658k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  368|   658k|        m_has_value = true;
  369|   658k|    }
_ZN3scn2v26detail12construct_atINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEEJSD_EEEPT_SF_DpOT0_:
  101|   658k|{
  102|   658k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|   658k|        T(std::forward<Args>(args)...);
  104|   658k|}
_ZNK3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEcvbEv:
 1190|   669k|    {
 1191|   669k|        return has_value();
 1192|   669k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5errorEv:
 1196|  11.1k|    {
 1197|  11.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  11.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  11.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  11.1k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|  11.1k|    {
  344|  11.1k|        return *unexpected_ptr();
  345|  11.1k|    }
_ZNO3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEdeISC_LPv0EEEOT_v:
 1262|   658k|    {
 1263|   658k|        return std::move(value());
 1264|   658k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5valueISC_LPv0EEERT_v:
 1220|   658k|    {
 1221|   658k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   658k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   658k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   658k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9get_valueEv:
  326|   658k|    {
  327|   658k|        return *value_ptr();
  328|   658k|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1250|  3.90M|    {
 1251|  3.90M|        return value();
 1252|  3.90M|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
   57|   116k|    {
   58|   116k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   116k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|   116k|    }
_ZN3scn2v28expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1033|  10.3M|    {
 1034|  10.3M|    }
_ZN3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  141|  10.3M|    {
  142|  10.3M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    198|    {
 1078|    198|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    198|    {
  151|    198|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   996k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1033|   996k|    {
 1034|   996k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   996k|    {
  142|   996k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|   235k|    {
 1405|   235k|        return detail::transform_error_impl(std::move(*this),
 1406|   235k|                                            std::forward<F>(f));
 1407|   235k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   235k|{
  927|   235k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   235k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   235k|        if (SCN_LIKELY(exp.has_value())) {
  930|   235k|            return result(*std::forward<Exp>(exp));
  931|   235k|        }
  932|       |
  933|   235k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   235k|        return result(unexpect, monostate{});
  935|   235k|    }
  936|   235k|    else {
  937|   235k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   235k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   235k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 235k, False: 12]
  |  |  ------------------
  ------------------
  939|   235k|                   ? result(*std::forward<Exp>(exp))
  940|   235k|                   : result(unexpect,
  941|     12|                            std::invoke(std::forward<F>(f),
  942|     12|                                        std::forward<Exp>(exp).error()));
  943|   235k|    }
  944|   235k|}
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  1.66M|    {
  189|  1.66M|        return m_has_value;
  190|  1.66M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1262|   636k|    {
 1263|   636k|        return std::move(value());
 1264|   636k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1220|   664k|    {
 1221|   664k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   664k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   664k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   664k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  154|   664k|    {
  155|   664k|        return m_value;
  156|   664k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1033|   290k|    {
 1034|   290k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   290k|    {
  142|   290k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   678k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1206|    198|    {
 1207|    198|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|    198|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    198|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|    198|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|    198|    {
  172|    198|        return m_unexpected;
  173|    198|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1087|   179k|    {
 1088|   179k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   387k|    {
  151|   387k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1190|   359k|    {
 1191|   359k|        return has_value();
 1192|   359k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    186|    {
 1078|    186|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    372|    {
  151|    372|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.49M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEERT_v:
 1250|  27.6k|    {
 1251|  27.6k|        return value();
 1252|  27.6k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1033|  27.6k|    {
 1034|  27.6k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  141|  27.6k|    {
  142|  27.6k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1077|  1.03M|    {
 1078|  1.03M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  1.03M|    {
  151|  1.03M|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1190|  1.28M|    {
 1191|  1.28M|        return has_value();
 1192|  1.28M|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  2.33M|    {
  189|  2.33M|        return m_has_value;
  190|  2.33M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1196|   207k|    {
 1197|   207k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   207k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   207k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   207k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|   387k|    {
  172|   387k|        return m_unexpected;
  173|   387k|    }
_ZN3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1033|   235k|    {
 1034|   235k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  141|   235k|    {
  142|   235k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   235k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEERT_v:
 1250|  27.6k|    {
 1251|  27.6k|        return value();
 1252|  27.6k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1220|   456k|    {
 1221|   456k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   456k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   456k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   456k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  154|   456k|    {
  155|   456k|        return m_value;
  156|   456k|    }
_ZNK3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1190|   235k|    {
 1191|   235k|        return has_value();
 1192|   235k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  188|   470k|    {
  189|   470k|        return m_has_value;
  190|   470k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   235k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1262|   235k|    {
 1263|   235k|        return std::move(value());
 1264|   235k|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1220|   235k|    {
 1221|   235k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   235k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   235k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   235k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  154|   235k|    {
  155|   235k|        return m_value;
  156|   235k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDaOT_:
 1404|   401k|    {
 1405|   401k|        return detail::transform_error_impl(std::move(*this),
 1406|   401k|                                            std::forward<F>(f));
 1407|   401k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   401k|{
  927|   401k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   401k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   401k|        if (SCN_LIKELY(exp.has_value())) {
  930|   401k|            return result(*std::forward<Exp>(exp));
  931|   401k|        }
  932|       |
  933|   401k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   401k|        return result(unexpect, monostate{});
  935|   401k|    }
  936|   401k|    else {
  937|   401k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   401k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   401k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 401k, False: 186]
  |  |  ------------------
  ------------------
  939|   401k|                   ? result(*std::forward<Exp>(exp))
  940|   401k|                   : result(unexpect,
  941|    186|                            std::invoke(std::forward<F>(f),
  942|    186|                                        std::forward<Exp>(exp).error()));
  943|   401k|    }
  944|   401k|}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1033|   428k|    {
 1034|   428k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   428k|    {
  142|   428k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1087|    186|    {
 1088|    186|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1262|   428k|    {
 1263|   428k|        return std::move(value());
 1264|   428k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEEC2IS8_vEEOT_:
 1033|   235k|    {
 1034|   235k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|   235k|    {
  142|   235k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDaOT_:
 1404|   235k|    {
 1405|   235k|        return detail::transform_error_impl(std::move(*this),
 1406|   235k|                                            std::forward<F>(f));
 1407|   235k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
  926|   235k|{
  927|   235k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   235k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   235k|        if (SCN_LIKELY(exp.has_value())) {
  930|   235k|            return result(*std::forward<Exp>(exp));
  931|   235k|        }
  932|       |
  933|   235k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   235k|        return result(unexpect, monostate{});
  935|   235k|    }
  936|   235k|    else {
  937|   235k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   235k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   235k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 235k, False: 0]
  |  |  ------------------
  ------------------
  939|   235k|                   ? result(*std::forward<Exp>(exp))
  940|   235k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|   235k|    }
  944|   235k|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EE9has_valueEv:
  188|   470k|    {
  189|   470k|        return m_has_value;
  190|   470k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|   235k|    {
 1263|   235k|        return std::move(value());
 1264|   235k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|   235k|    {
 1221|   235k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   235k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   235k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   235k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EE9get_valueEv:
  154|   235k|    {
  155|   235k|        return m_value;
  156|   235k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1033|   235k|    {
 1034|   235k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|   235k|    {
  142|   235k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   235k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEcvbEv:
 1190|   235k|    {
 1191|   235k|        return has_value();
 1192|   235k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   470k|    {
  189|   470k|        return m_has_value;
  190|   470k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1262|   235k|    {
 1263|   235k|        return std::move(value());
 1264|   235k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1220|   235k|    {
 1221|   235k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   235k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   235k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   235k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   235k|    {
  155|   235k|        return m_value;
  156|   235k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDaOT_:
 1404|   207k|    {
 1405|   207k|        return detail::transform_error_impl(std::move(*this),
 1406|   207k|                                            std::forward<F>(f));
 1407|   207k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESA_EEDaOT_OT0_:
  926|   207k|{
  927|   207k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   207k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   207k|        if (SCN_LIKELY(exp.has_value())) {
  930|   207k|            return result(*std::forward<Exp>(exp));
  931|   207k|        }
  932|       |
  933|   207k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   207k|        return result(unexpect, monostate{});
  935|   207k|    }
  936|   207k|    else {
  937|   207k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   207k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   207k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 27.6k, False: 179k]
  |  |  ------------------
  ------------------
  939|   207k|                   ? result(*std::forward<Exp>(exp))
  940|   207k|                   : result(unexpect,
  941|   179k|                            std::invoke(std::forward<F>(f),
  942|   179k|                                        std::forward<Exp>(exp).error()));
  943|   207k|    }
  944|   207k|}
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1206|   179k|    {
 1207|   179k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   179k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   179k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|   179k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|   207k|    {
 1078|   207k|    }
_ZN3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1077|  27.6k|    {
 1078|  27.6k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EEC2IJSF_EvEENS0_10unexpect_tEDpOT_:
  311|  27.6k|    {
  312|  27.6k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  27.6k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESF_EEEvDpOT_:
  372|  27.6k|    {
  373|  27.6k|        scn::detail::construct_at(unexpected_ptr(),
  374|  27.6k|                                  std::forward<Args>(args)...);
  375|  27.6k|        m_has_value = false;
  376|  27.6k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|  83.0k|    {
  403|  83.0k|        return reinterpret_cast<unexpected<E>*>(
  404|  83.0k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|  83.0k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|  83.0k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  27.6k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EED2Ev:
  316|  27.6k|    {
  317|  27.6k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 0, False: 27.6k]
  ------------------
  318|      0|            destroy_value();
  319|      0|        }
  320|  27.6k|        else {
  321|  27.6k|            destroy_unexpected();
  322|  27.6k|        }
  323|  27.6k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9has_valueEv:
  360|  83.0k|    {
  361|  83.0k|        return m_has_value;
  362|  83.0k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  27.6k|    {
  384|  27.6k|        scn::detail::destroy_at(unexpected_ptr());
  385|  27.6k|    }
_ZNK3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEcvbEv:
 1190|  27.6k|    {
 1191|  27.6k|        return has_value();
 1192|  27.6k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEE5errorEv:
 1196|  27.6k|    {
 1197|  27.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  27.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  27.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  27.6k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|  27.6k|    {
  344|  27.6k|        return *unexpected_ptr();
  345|  27.6k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1250|  27.6k|    {
 1251|  27.6k|        return value();
 1252|  27.6k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1220|   290k|    {
 1221|   290k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   290k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   290k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   290k|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.35M|    {
  189|  1.35M|        return m_has_value;
  190|  1.35M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  154|   290k|    {
  155|   290k|        return m_value;
  156|   290k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1190|   678k|    {
 1191|   678k|        return has_value();
 1192|   678k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1196|   387k|    {
 1197|   387k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   387k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   387k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   387k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   387k|    {
  172|   387k|        return m_unexpected;
  173|   387k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1262|   262k|    {
 1263|   262k|        return std::move(value());
 1264|   262k|    }
_ZN3scn2v28expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|   154k|    {
 1078|   154k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   154k|    {
  151|   154k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  26.1M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1033|  25.9M|    {
 1034|  25.9M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  25.9M|    {
  142|  25.9M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDaOT_:
 1404|  5.42M|    {
 1405|  5.42M|        return detail::transform_error_impl(std::move(*this),
 1406|  5.42M|                                            std::forward<F>(f));
 1407|  5.42M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  5.42M|{
  927|  5.42M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  5.42M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  5.42M|        if (SCN_LIKELY(exp.has_value())) {
  930|  5.42M|            return result(*std::forward<Exp>(exp));
  931|  5.42M|        }
  932|       |
  933|  5.42M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  5.42M|        return result(unexpect, monostate{});
  935|  5.42M|    }
  936|  5.42M|    else {
  937|  5.42M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  5.42M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  5.42M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 5.38M, False: 35.6k]
  |  |  ------------------
  ------------------
  939|  5.42M|                   ? result(*std::forward<Exp>(exp))
  940|  5.42M|                   : result(unexpect,
  941|  35.6k|                            std::invoke(std::forward<F>(f),
  942|  35.6k|                                        std::forward<Exp>(exp).error()));
  943|  5.42M|    }
  944|  5.42M|}
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  45.4M|    {
  189|  45.4M|        return m_has_value;
  190|  45.4M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1262|  16.9M|    {
 1263|  16.9M|        return std::move(value());
 1264|  16.9M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1220|  19.1M|    {
 1221|  19.1M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  19.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  19.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  19.1M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  19.1M|    {
  155|  19.1M|        return m_value;
  156|  19.1M|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1033|  19.5M|    {
 1034|  19.5M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  19.5M|    {
  142|  19.5M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  20.7M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1206|   151k|    {
 1207|   151k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   151k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   151k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|   151k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|   154k|    {
  172|   154k|        return m_unexpected;
  173|   154k|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1087|  35.6k|    {
 1088|  35.6k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  150|  1.22M|    {
  151|  1.22M|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1077|  1.19M|    {
 1078|  1.19M|    }
_ZNK3scn2v28expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1190|  9.08M|    {
 1191|  9.08M|        return has_value();
 1192|  9.08M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1196|  2.70k|    {
 1197|  2.70k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  2.70k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.70k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  2.70k|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|   118k|    {
 1078|   118k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   235k|    {
  151|   235k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  36.0M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1250|  2.26M|    {
 1251|  2.26M|        return value();
 1252|  2.26M|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1033|  4.33M|    {
 1034|  4.33M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  141|  4.33M|    {
  142|  4.33M|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|  19.9M|    {
 1078|  19.9M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  19.9M|    {
  151|  19.9M|    }
_ZNK3scn2v28expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1190|  36.0M|    {
 1191|  36.0M|        return has_value();
 1192|  36.0M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  57.3M|    {
  189|  57.3M|        return m_has_value;
  190|  57.3M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1196|  5.27M|    {
 1197|  5.27M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  5.27M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.27M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  5.27M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|  5.27M|    {
  172|  5.27M|        return m_unexpected;
  173|  5.27M|    }
_ZN3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1033|  5.38M|    {
 1034|  5.38M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  5.38M|    {
  142|  5.38M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  5.38M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1250|  4.41M|    {
 1251|  4.41M|        return value();
 1252|  4.41M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1220|  15.9M|    {
 1221|  15.9M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  15.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  15.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  15.9M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  154|  15.9M|    {
  155|  15.9M|        return m_value;
  156|  15.9M|    }
_ZNK3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1190|  5.38M|    {
 1191|  5.38M|        return has_value();
 1192|  5.38M|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  188|  10.7M|    {
  189|  10.7M|        return m_has_value;
  190|  10.7M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  5.38M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|  5.38M|    {
 1263|  5.38M|        return std::move(value());
 1264|  5.38M|    }
_ZNR3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|  5.38M|    {
 1221|  5.38M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  5.38M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.38M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  5.38M|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  154|  5.38M|    {
  155|  5.38M|        return m_value;
  156|  5.38M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDaOT_:
 1404|  11.6M|    {
 1405|  11.6M|        return detail::transform_error_impl(std::move(*this),
 1406|  11.6M|                                            std::forward<F>(f));
 1407|  11.6M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  11.6M|{
  927|  11.6M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  11.6M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  11.6M|        if (SCN_LIKELY(exp.has_value())) {
  930|  11.6M|            return result(*std::forward<Exp>(exp));
  931|  11.6M|        }
  932|       |
  933|  11.6M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  11.6M|        return result(unexpect, monostate{});
  935|  11.6M|    }
  936|  11.6M|    else {
  937|  11.6M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  11.6M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  11.6M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 11.5M, False: 116k]
  |  |  ------------------
  ------------------
  939|  11.6M|                   ? result(*std::forward<Exp>(exp))
  940|  11.6M|                   : result(unexpect,
  941|   116k|                            std::invoke(std::forward<F>(f),
  942|   116k|                                        std::forward<Exp>(exp).error()));
  943|  11.6M|    }
  944|  11.6M|}
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1033|  11.6M|    {
 1034|  11.6M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  11.6M|    {
  142|  11.6M|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1087|   116k|    {
 1088|   116k|    }
_ZNO3scn2v28expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1262|  11.5M|    {
 1263|  11.5M|        return std::move(value());
 1264|  11.5M|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1033|  5.38M|    {
 1034|  5.38M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  5.38M|    {
  142|  5.38M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|  5.38M|    {
 1405|  5.38M|        return detail::transform_error_impl(std::move(*this),
 1406|  5.38M|                                            std::forward<F>(f));
 1407|  5.38M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
  926|  5.38M|{
  927|  5.38M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  5.38M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  5.38M|        if (SCN_LIKELY(exp.has_value())) {
  930|  5.38M|            return result(*std::forward<Exp>(exp));
  931|  5.38M|        }
  932|       |
  933|  5.38M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  5.38M|        return result(unexpect, monostate{});
  935|  5.38M|    }
  936|  5.38M|    else {
  937|  5.38M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  5.38M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  5.38M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 5.38M, False: 0]
  |  |  ------------------
  ------------------
  939|  5.38M|                   ? result(*std::forward<Exp>(exp))
  940|  5.38M|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|  5.38M|    }
  944|  5.38M|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  188|  10.7M|    {
  189|  10.7M|        return m_has_value;
  190|  10.7M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1262|  5.38M|    {
 1263|  5.38M|        return std::move(value());
 1264|  5.38M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1220|  5.38M|    {
 1221|  5.38M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  5.38M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.38M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  5.38M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  154|  5.38M|    {
  155|  5.38M|        return m_value;
  156|  5.38M|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1033|  5.38M|    {
 1034|  5.38M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  5.38M|    {
  142|  5.38M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  5.38M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1190|  5.38M|    {
 1191|  5.38M|        return has_value();
 1192|  5.38M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  188|  10.7M|    {
  189|  10.7M|        return m_has_value;
  190|  10.7M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1262|  5.38M|    {
 1263|  5.38M|        return std::move(value());
 1264|  5.38M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1220|  5.38M|    {
 1221|  5.38M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  5.38M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.38M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  5.38M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  154|  5.38M|    {
  155|  5.38M|        return m_value;
  156|  5.38M|    }
_ZN3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1077|  66.9k|    {
 1078|  66.9k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  311|  66.9k|    {
  312|  66.9k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  66.9k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESH_EEEvDpOT_:
  372|  66.9k|    {
  373|  66.9k|        scn::detail::construct_at(unexpected_ptr(),
  374|  66.9k|                                  std::forward<Args>(args)...);
  375|  66.9k|        m_has_value = false;
  376|  66.9k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|   200k|    {
  403|   200k|        return reinterpret_cast<unexpected<E>*>(
  404|   200k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|   200k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|   200k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   640k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  316|   640k|    {
  317|   640k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 573k, False: 66.9k]
  ------------------
  318|   573k|            destroy_value();
  319|   573k|        }
  320|  66.9k|        else {
  321|  66.9k|            destroy_unexpected();
  322|  66.9k|        }
  323|   640k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  360|  1.92M|    {
  361|  1.92M|        return m_has_value;
  362|  1.92M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  379|   573k|    {
  380|   573k|        scn::detail::destroy_at(value_ptr());
  381|   573k|    }
_ZN3scn2v26detail10destroy_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEEEvPT_:
  107|   573k|{
  108|   573k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|   573k|        for (auto& elem : *p) {
  110|   573k|            scn::detail::destroy_at(std::addressof(elem));
  111|   573k|        }
  112|   573k|    }
  113|   573k|    else {
  114|   573k|        p->~T();
  115|   573k|    }
  116|   573k|}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  389|  1.72M|    {
  390|  1.72M|        return reinterpret_cast<T*>(
  391|  1.72M|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(T)));
  ------------------
  |  |  201|  1.72M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  392|  1.72M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  66.9k|    {
  384|  66.9k|        scn::detail::destroy_at(unexpected_ptr());
  385|  66.9k|    }
_ZN3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1033|   573k|    {
 1034|   573k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSG_EvEENS3_10in_place_tEDpOT_:
  302|   573k|    {
  303|   573k|        construct(std::forward<Args>(args)...);
  304|   573k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9constructIJSG_EEEvDpOT_:
  366|   573k|    {
  367|   573k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  368|   573k|        m_has_value = true;
  369|   573k|    }
_ZN3scn2v26detail12construct_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEJSG_EEEPT_SI_DpOT0_:
  101|   573k|{
  102|   573k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|   573k|        T(std::forward<Args>(args)...);
  104|   573k|}
_ZNK3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1190|   640k|    {
 1191|   640k|        return has_value();
 1192|   640k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1196|  66.9k|    {
 1197|  66.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  66.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  66.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  66.9k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|  66.9k|    {
  344|  66.9k|        return *unexpected_ptr();
  345|  66.9k|    }
_ZNO3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEdeISF_LPv0EEEOT_v:
 1262|   573k|    {
 1263|   573k|        return std::move(value());
 1264|   573k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1220|   573k|    {
 1221|   573k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   573k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   573k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   573k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  326|   573k|    {
  327|   573k|        return *value_ptr();
  328|   573k|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1250|  3.40M|    {
 1251|  3.40M|        return value();
 1252|  3.40M|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1220|  19.5M|    {
 1221|  19.5M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  19.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  19.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  19.5M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  188|  41.4M|    {
  189|  41.4M|        return m_has_value;
  190|  41.4M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  154|  19.5M|    {
  155|  19.5M|        return m_value;
  156|  19.5M|    }
_ZNK3scn2v28expectedIPKwNS0_10scan_errorEEcvbEv:
 1190|  20.7M|    {
 1191|  20.7M|        return has_value();
 1192|  20.7M|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEE5errorEv:
 1196|  1.22M|    {
 1197|  1.22M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  1.22M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.22M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  1.22M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|  1.22M|    {
  172|  1.22M|        return m_unexpected;
  173|  1.22M|    }
_ZNO3scn2v28expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1262|  16.1M|    {
 1263|  16.1M|        return std::move(value());
 1264|  16.1M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|   622k|    {
 1078|   622k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  1.13M|    {
  151|  1.13M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.95M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1033|   816k|    {
 1034|   816k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   816k|    {
  142|   816k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1190|  1.95M|    {
 1191|  1.95M|        return has_value();
 1192|  1.95M|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  188|  3.90M|    {
  189|  3.90M|        return m_has_value;
  190|  3.90M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1196|  1.13M|    {
 1197|  1.13M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  1.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  1.13M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|  1.13M|    {
  172|  1.13M|        return m_unexpected;
  173|  1.13M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1250|  55.3k|    {
 1251|  55.3k|        return value();
 1252|  55.3k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1220|   816k|    {
 1221|   816k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   816k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   816k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   816k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  154|   816k|    {
  155|   816k|        return m_value;
  156|   816k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    208|    {
 1078|    208|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    208|    {
  151|    208|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.90M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1033|  2.90M|    {
 1034|  2.90M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|  2.90M|    {
  142|  2.90M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|   678k|    {
 1405|   678k|        return detail::transform_error_impl(std::move(*this),
 1406|   678k|                                            std::forward<F>(f));
 1407|   678k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   678k|{
  927|   678k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   678k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   678k|        if (SCN_LIKELY(exp.has_value())) {
  930|   678k|            return result(*std::forward<Exp>(exp));
  931|   678k|        }
  932|       |
  933|   678k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   678k|        return result(unexpect, monostate{});
  935|   678k|    }
  936|   678k|    else {
  937|   678k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   678k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   678k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 678k, False: 30]
  |  |  ------------------
  ------------------
  939|   678k|                   ? result(*std::forward<Exp>(exp))
  940|   678k|                   : result(unexpect,
  941|     30|                            std::invoke(std::forward<F>(f),
  942|     30|                                        std::forward<Exp>(exp).error()));
  943|   678k|    }
  944|   678k|}
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  4.81M|    {
  189|  4.81M|        return m_has_value;
  190|  4.81M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1262|  1.85M|    {
 1263|  1.85M|        return std::move(value());
 1264|  1.85M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1220|  1.90M|    {
 1221|  1.90M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.90M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.90M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.90M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  1.90M|    {
  155|  1.90M|        return m_value;
  156|  1.90M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1206|    208|    {
 1207|    208|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|    208|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    208|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|    208|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|    208|    {
  172|    208|        return m_unexpected;
  173|    208|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1087|   512k|    {
 1088|   512k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1190|  1.05M|    {
 1191|  1.05M|        return has_value();
 1192|  1.05M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    178|    {
 1078|    178|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    356|    {
  151|    356|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  4.37M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEERT_v:
 1250|  55.3k|    {
 1251|  55.3k|        return value();
 1252|  55.3k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1033|  55.3k|    {
 1034|  55.3k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  141|  55.3k|    {
  142|  55.3k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1077|  3.05M|    {
 1078|  3.05M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  3.05M|    {
  151|  3.05M|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1190|  3.77M|    {
 1191|  3.77M|        return has_value();
 1192|  3.77M|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  6.82M|    {
  189|  6.82M|        return m_has_value;
  190|  6.82M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1196|   623k|    {
 1197|   623k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   623k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   623k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   623k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|  1.13M|    {
  172|  1.13M|        return m_unexpected;
  173|  1.13M|    }
_ZN3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1033|   678k|    {
 1034|   678k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  141|   678k|    {
  142|   678k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   678k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEERT_v:
 1250|  55.3k|    {
 1251|  55.3k|        return value();
 1252|  55.3k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1220|  1.31M|    {
 1221|  1.31M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.31M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.31M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.31M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  154|  1.31M|    {
  155|  1.31M|        return m_value;
  156|  1.31M|    }
_ZNK3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1190|   678k|    {
 1191|   678k|        return has_value();
 1192|   678k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  188|  1.35M|    {
  189|  1.35M|        return m_has_value;
  190|  1.35M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   678k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1262|   678k|    {
 1263|   678k|        return std::move(value());
 1264|   678k|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1220|   678k|    {
 1221|   678k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   678k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   678k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   678k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  154|   678k|    {
  155|   678k|        return m_value;
  156|   678k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDaOT_:
 1404|  1.17M|    {
 1405|  1.17M|        return detail::transform_error_impl(std::move(*this),
 1406|  1.17M|                                            std::forward<F>(f));
 1407|  1.17M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|  1.17M|{
  927|  1.17M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  1.17M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  1.17M|        if (SCN_LIKELY(exp.has_value())) {
  930|  1.17M|            return result(*std::forward<Exp>(exp));
  931|  1.17M|        }
  932|       |
  933|  1.17M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  1.17M|        return result(unexpect, monostate{});
  935|  1.17M|    }
  936|  1.17M|    else {
  937|  1.17M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  1.17M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  1.17M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 1.17M, False: 178]
  |  |  ------------------
  ------------------
  939|  1.17M|                   ? result(*std::forward<Exp>(exp))
  940|  1.17M|                   : result(unexpect,
  941|    178|                            std::invoke(std::forward<F>(f),
  942|    178|                                        std::forward<Exp>(exp).error()));
  943|  1.17M|    }
  944|  1.17M|}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1033|  1.25M|    {
 1034|  1.25M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|  1.25M|    {
  142|  1.25M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1087|    178|    {
 1088|    178|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1262|  1.25M|    {
 1263|  1.25M|        return std::move(value());
 1264|  1.25M|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEEC2IS8_vEEOT_:
 1033|   678k|    {
 1034|   678k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|   678k|    {
  142|   678k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDaOT_:
 1404|   678k|    {
 1405|   678k|        return detail::transform_error_impl(std::move(*this),
 1406|   678k|                                            std::forward<F>(f));
 1407|   678k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
  926|   678k|{
  927|   678k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   678k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   678k|        if (SCN_LIKELY(exp.has_value())) {
  930|   678k|            return result(*std::forward<Exp>(exp));
  931|   678k|        }
  932|       |
  933|   678k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   678k|        return result(unexpect, monostate{});
  935|   678k|    }
  936|   678k|    else {
  937|   678k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   678k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   678k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 678k, False: 0]
  |  |  ------------------
  ------------------
  939|   678k|                   ? result(*std::forward<Exp>(exp))
  940|   678k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|   678k|    }
  944|   678k|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EE9has_valueEv:
  188|  1.35M|    {
  189|  1.35M|        return m_has_value;
  190|  1.35M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|   678k|    {
 1263|   678k|        return std::move(value());
 1264|   678k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|   678k|    {
 1221|   678k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   678k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   678k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   678k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EE9get_valueEv:
  154|   678k|    {
  155|   678k|        return m_value;
  156|   678k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1033|   678k|    {
 1034|   678k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|   678k|    {
  142|   678k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   678k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEcvbEv:
 1190|   678k|    {
 1191|   678k|        return has_value();
 1192|   678k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.35M|    {
  189|  1.35M|        return m_has_value;
  190|  1.35M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1262|   678k|    {
 1263|   678k|        return std::move(value());
 1264|   678k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1220|   678k|    {
 1221|   678k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   678k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   678k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   678k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   678k|    {
  155|   678k|        return m_value;
  156|   678k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDaOT_:
 1404|   595k|    {
 1405|   595k|        return detail::transform_error_impl(std::move(*this),
 1406|   595k|                                            std::forward<F>(f));
 1407|   595k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESA_EEDaOT_OT0_:
  926|   595k|{
  927|   595k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   595k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   595k|        if (SCN_LIKELY(exp.has_value())) {
  930|   595k|            return result(*std::forward<Exp>(exp));
  931|   595k|        }
  932|       |
  933|   595k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   595k|        return result(unexpect, monostate{});
  935|   595k|    }
  936|   595k|    else {
  937|   595k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   595k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   595k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 83.0k, False: 512k]
  |  |  ------------------
  ------------------
  939|   595k|                   ? result(*std::forward<Exp>(exp))
  940|   595k|                   : result(unexpect,
  941|   512k|                            std::invoke(std::forward<F>(f),
  942|   512k|                                        std::forward<Exp>(exp).error()));
  943|   595k|    }
  944|   595k|}
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1206|   512k|    {
 1207|   512k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   512k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   512k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|   512k|    }
_ZN3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  83.0k|    {
 1078|  83.0k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  311|  83.0k|    {
  312|  83.0k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  83.0k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESI_EEEvDpOT_:
  372|  83.0k|    {
  373|  83.0k|        scn::detail::construct_at(unexpected_ptr(),
  374|  83.0k|                                  std::forward<Args>(args)...);
  375|  83.0k|        m_has_value = false;
  376|  83.0k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|   249k|    {
  403|   249k|        return reinterpret_cast<unexpected<E>*>(
  404|   249k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|   249k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|   249k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  83.0k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  316|  83.0k|    {
  317|  83.0k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 0, False: 83.0k]
  ------------------
  318|      0|            destroy_value();
  319|      0|        }
  320|  83.0k|        else {
  321|  83.0k|            destroy_unexpected();
  322|  83.0k|        }
  323|  83.0k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  360|   249k|    {
  361|   249k|        return m_has_value;
  362|   249k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  83.0k|    {
  384|  83.0k|        scn::detail::destroy_at(unexpected_ptr());
  385|  83.0k|    }
_ZNK3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1190|  83.0k|    {
 1191|  83.0k|        return has_value();
 1192|  83.0k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1196|  83.0k|    {
 1197|  83.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  83.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  83.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  83.0k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|  83.0k|    {
  344|  83.0k|        return *unexpected_ptr();
  345|  83.0k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1262|   761k|    {
 1263|   761k|        return std::move(value());
 1264|   761k|    }

_ZN3scn2v26detail10to_addressIRPNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  4.61k|{
  200|  4.61k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  4.61k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  4.61k|}
_ZN3scn2v26detail15to_address_implINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEPT_S9_NS1_12priority_tagILm2EEE:
  179|  4.61k|{
  180|  4.61k|    return p;
  181|  4.61k|}
_ZN3scn2v26detail10to_addressIRPNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  4.61k|{
  200|  4.61k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  4.61k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  4.61k|}
_ZN3scn2v26detail15to_address_implINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEPT_S9_NS1_12priority_tagILm2EEE:
  179|  4.61k|{
  180|  4.61k|    return p;
  181|  4.61k|}
_ZN3scn2v26detail10to_addressIRPKhEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  4.61k|{
  200|  4.61k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  4.61k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  4.61k|}
_ZN3scn2v26detail15to_address_implIKhEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  4.61k|{
  180|  4.61k|    return p;
  181|  4.61k|}
_ZN3scn2v26detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  18.2M|{
  200|  18.2M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  18.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  18.2M|}
_ZN3scn2v26detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  18.3M|{
  180|  18.3M|    return p;
  181|  18.3M|}
_ZN3scn2v26detail10to_addressIRPDiEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  12.1M|{
  200|  12.1M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  12.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  12.1M|}
_ZN3scn2v26detail15to_address_implIDiEEPT_S4_NS1_12priority_tagILm2EEE:
  179|  12.1M|{
  180|  12.1M|    return p;
  181|  12.1M|}
_ZN3scn2v26detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  55.3k|{
  200|  55.3k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  55.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  55.3k|}
_ZN3scn2v26detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  12.1M|{
  200|  12.1M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  12.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  12.1M|}
_ZN3scn2v26detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  12.3M|{
  180|  12.3M|    return p;
  181|  12.3M|}
_ZN3scn2v26detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|   166k|{
  200|   166k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|   166k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|   166k|}

_ZNK3scn2v24spanIKhE4sizeEv:
  241|  18.3k|    {
  242|  18.3k|        return static_cast<size_type>(m_end - m_ptr);
  243|  18.3k|    }
_ZN3scn2v24spanIKhE5beginEv:
  180|  4.61k|    {
  181|  4.61k|        return m_ptr;
  182|  4.61k|    }
_ZN3scn2v24spanIKhE3endEv:
  184|  4.61k|    {
  185|  4.61k|        return m_end;
  186|  4.61k|    }
_ZNK3scn2v24spanIKhE4dataEv:
  237|  2.30k|    {
  238|  2.30k|        return m_ptr;
  239|  2.30k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEC2IPS6_LPv0EEET_m:
  119|  2.30k|    {
  120|  2.30k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEE5beginEv:
  180|  55.3k|    {
  181|  55.3k|        return m_ptr;
  182|  55.3k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEE3endEv:
  184|  55.3k|    {
  185|  55.3k|        return m_end;
  186|  55.3k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEC2IPS6_LPv0EEET_m:
  119|  2.30k|    {
  120|  2.30k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEE5beginEv:
  180|   166k|    {
  181|   166k|        return m_ptr;
  182|   166k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEE3endEv:
  184|   166k|    {
  185|   166k|        return m_end;
  186|   166k|    }
_ZN3scn2v24spanIKhEC2IPS2_LPv0EEET_m:
  119|  2.30k|    {
  120|  2.30k|    }
_ZN3scn2v24spanIDiEC2IPDiLPv0EEET_m:
  119|  6.08M|    {
  120|  6.08M|    }
_ZNK3scn2v24spanIDiE4dataEv:
  237|  6.08M|    {
  238|  6.08M|        return m_ptr;
  239|  6.08M|    }
_ZNK3scn2v24spanIDiE4sizeEv:
  241|  6.08M|    {
  242|  6.08M|        return static_cast<size_type>(m_end - m_ptr);
  243|  6.08M|    }

_ZN3scn2v26detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
   59|  2.80M|{
   60|  2.80M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|  2.80M|                                          const CharT*, const CharT*>) {
   62|  2.80M|        return {first, last};
   63|  2.80M|    }
   64|  2.80M|    else {
   65|  2.80M|        return {first, static_cast<size_t>(std::distance(first, last))};
   66|  2.80M|    }
   67|  2.80M|}
_ZN3scn2v26detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
   59|  8.56M|{
   60|  8.56M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|  8.56M|                                          const CharT*, const CharT*>) {
   62|  8.56M|        return {first, last};
   63|  8.56M|    }
   64|  8.56M|    else {
   65|  8.56M|        return {first, static_cast<size_t>(std::distance(first, last))};
   66|  8.56M|    }
   67|  8.56M|}
_ZN3scn2v26detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
   43|  6.07M|{
   44|  6.07M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (44:19): [Folded - Ignored]
  |  Branch (44:19): [Folded - Ignored]
  ------------------
   45|  6.07M|                                          decltype(first), decltype(last)> &&
   46|  6.07M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  152|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (46:19): [Folded - Ignored]
  ------------------
   47|  6.07M|        return {first, last};
   48|  6.07M|    }
   49|  6.07M|    else {
   50|  6.07M|        return {to_address(first), static_cast<size_t>(std::distance(
   51|  6.07M|                                       to_address(first), to_address(last)))};
   52|  6.07M|    }
   53|  6.07M|}
_ZN3scn2v26detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
   74|  11.8M|{
   75|  11.8M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (75:19): [Folded - Ignored]
  |  Branch (75:19): [Folded - Ignored]
  ------------------
   76|  11.8M|                      typename std::basic_string_view<CharT>::iterator,
   77|  11.8M|                      decltype(it)> &&
   78|  11.8M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  152|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (78:19): [Folded - Ignored]
  ------------------
   79|  11.8M|        SCN_UNUSED(sv);
  ------------------
  |  |  227|  11.8M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   80|  11.8M|        return it;
   81|  11.8M|    }
   82|  11.8M|    else {
   83|  11.8M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
   84|  11.8M|    }
   85|  11.8M|}

_ZN3scn2v24impl21is_segment_contiguousIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   53|   235k|{
   54|   235k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (54:19): [Folded - Ignored]
  |  Branch (54:19): [Folded - Ignored]
  ------------------
   55|   235k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|   235k|        return true;
   57|   235k|    }
   58|   235k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (58:24): [Folded - Ignored]
  ------------------
   59|   235k|                           ranges::iterator_t<Range>,
   60|   235k|                           typename detail::basic_scan_buffer<
   61|   235k|                               detail::char_t<Range>>::forward_iterator>) {
   62|   235k|        auto beg = ranges::begin(r);
   63|   235k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (63:13): [True: 235k, False: 0]
  ------------------
   64|   235k|            return false;
   65|   235k|        }
   66|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (66:23): [Folded - Ignored]
  ------------------
   67|      0|            return beg.contiguous_segment().end() ==
   68|      0|                   ranges::end(r).contiguous_segment().end();
   69|      0|        }
   70|      0|        else {
   71|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (71:17): [True: 0, False: 0]
  ------------------
   72|      0|                return beg.contiguous_segment().end() ==
   73|      0|                       beg.parent()->current_view().end();
   74|      0|            }
   75|      0|            return true;
   76|      0|        }
   77|      0|    }
   78|   235k|    else {
   79|   235k|        return false;
   80|   235k|    }
   81|   235k|}
_ZN3scn2v24impl24get_contiguous_beginningIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEDaRKT_:
  111|   235k|{
  112|   235k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (112:19): [Folded - Ignored]
  |  Branch (112:19): [Folded - Ignored]
  ------------------
  113|   235k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (113:19): [Folded - Ignored]
  ------------------
  114|   235k|        return r;
  115|   235k|    }
  116|   235k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (116:24): [Folded - Ignored]
  ------------------
  117|   235k|                           ranges::iterator_t<Range>,
  118|   235k|                           typename detail::basic_scan_buffer<
  119|   235k|                               detail::char_t<Range>>::forward_iterator>) {
  120|   235k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|   235k|            auto seg = ranges::begin(r).contiguous_segment();
  122|   235k|            auto dist = static_cast<size_t>(ranges_polyfill::pos_distance(
  123|   235k|                ranges::begin(r), ranges::end(r)));
  124|   235k|            return seg.substr(0, std::min(seg.size(), dist));
  125|   235k|        }
  126|   235k|        else {
  127|   235k|            return ranges::begin(r).contiguous_segment();
  128|   235k|        }
  129|   235k|    }
  130|   235k|    else {
  131|   235k|        return std::basic_string_view<detail::char_t<Range>>{};
  132|   235k|    }
  133|   235k|}
_ZN3scn2v24impl23guaranteed_minimum_sizeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEmRKT_:
  165|   401k|{
  166|   401k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (166:19): [Folded - Ignored]
  ------------------
  167|   401k|        return ranges_polyfill::usize(r);
  168|   401k|    }
  169|   401k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (169:24): [Folded - Ignored]
  ------------------
  170|   401k|                           ranges::iterator_t<Range>,
  171|   401k|                           typename detail::basic_scan_buffer<
  172|   401k|                               detail::char_t<Range>>::forward_iterator>) {
  173|   401k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (173:23): [Folded - Ignored]
  ------------------
  174|   401k|            return static_cast<size_t>(ranges::end(r).position() -
  175|   401k|                                       ranges::begin(r).position());
  176|   401k|        }
  177|   401k|        else {
  178|   401k|            if (ranges::begin(r).stores_parent()) {
  ------------------
  |  Branch (178:17): [True: 401k, False: 0]
  ------------------
  179|   401k|                return static_cast<size_t>(
  180|   401k|                    ranges::begin(r).parent()->chars_available() -
  181|   401k|                    ranges::begin(r).position());
  182|   401k|            }
  183|      0|            return ranges::begin(r).contiguous_segment().size();
  184|   401k|        }
  185|   401k|    }
  186|   401k|    else {
  187|   401k|        return 0;
  188|   401k|    }
  189|   401k|}
_ZN3scn2v24impl21is_segment_contiguousIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   53|   678k|{
   54|   678k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (54:19): [Folded - Ignored]
  |  Branch (54:19): [Folded - Ignored]
  ------------------
   55|   678k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|   678k|        return true;
   57|   678k|    }
   58|   678k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (58:24): [Folded - Ignored]
  ------------------
   59|   678k|                           ranges::iterator_t<Range>,
   60|   678k|                           typename detail::basic_scan_buffer<
   61|   678k|                               detail::char_t<Range>>::forward_iterator>) {
   62|   678k|        auto beg = ranges::begin(r);
   63|   678k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (63:13): [True: 678k, False: 0]
  ------------------
   64|   678k|            return false;
   65|   678k|        }
   66|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (66:23): [Folded - Ignored]
  ------------------
   67|      0|            return beg.contiguous_segment().end() ==
   68|      0|                   ranges::end(r).contiguous_segment().end();
   69|      0|        }
   70|      0|        else {
   71|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (71:17): [True: 0, False: 0]
  ------------------
   72|      0|                return beg.contiguous_segment().end() ==
   73|      0|                       beg.parent()->current_view().end();
   74|      0|            }
   75|      0|            return true;
   76|      0|        }
   77|      0|    }
   78|   678k|    else {
   79|   678k|        return false;
   80|   678k|    }
   81|   678k|}
_ZN3scn2v24impl24get_contiguous_beginningIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEDaRKT_:
  111|   678k|{
  112|   678k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (112:19): [Folded - Ignored]
  |  Branch (112:19): [Folded - Ignored]
  ------------------
  113|   678k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (113:19): [Folded - Ignored]
  ------------------
  114|   678k|        return r;
  115|   678k|    }
  116|   678k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (116:24): [Folded - Ignored]
  ------------------
  117|   678k|                           ranges::iterator_t<Range>,
  118|   678k|                           typename detail::basic_scan_buffer<
  119|   678k|                               detail::char_t<Range>>::forward_iterator>) {
  120|   678k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|   678k|            auto seg = ranges::begin(r).contiguous_segment();
  122|   678k|            auto dist = static_cast<size_t>(ranges_polyfill::pos_distance(
  123|   678k|                ranges::begin(r), ranges::end(r)));
  124|   678k|            return seg.substr(0, std::min(seg.size(), dist));
  125|   678k|        }
  126|   678k|        else {
  127|   678k|            return ranges::begin(r).contiguous_segment();
  128|   678k|        }
  129|   678k|    }
  130|   678k|    else {
  131|   678k|        return std::basic_string_view<detail::char_t<Range>>{};
  132|   678k|    }
  133|   678k|}
_ZN3scn2v24impl23guaranteed_minimum_sizeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEmRKT_:
  165|  1.17M|{
  166|  1.17M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (166:19): [Folded - Ignored]
  ------------------
  167|  1.17M|        return ranges_polyfill::usize(r);
  168|  1.17M|    }
  169|  1.17M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (169:24): [Folded - Ignored]
  ------------------
  170|  1.17M|                           ranges::iterator_t<Range>,
  171|  1.17M|                           typename detail::basic_scan_buffer<
  172|  1.17M|                               detail::char_t<Range>>::forward_iterator>) {
  173|  1.17M|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (173:23): [Folded - Ignored]
  ------------------
  174|  1.17M|            return static_cast<size_t>(ranges::end(r).position() -
  175|  1.17M|                                       ranges::begin(r).position());
  176|  1.17M|        }
  177|  1.17M|        else {
  178|  1.17M|            if (ranges::begin(r).stores_parent()) {
  ------------------
  |  Branch (178:17): [True: 1.17M, False: 0]
  ------------------
  179|  1.17M|                return static_cast<size_t>(
  180|  1.17M|                    ranges::begin(r).parent()->chars_available() -
  181|  1.17M|                    ranges::begin(r).position());
  182|  1.17M|            }
  183|      0|            return ranges::begin(r).contiguous_segment().size();
  184|  1.17M|        }
  185|  1.17M|    }
  186|  1.17M|    else {
  187|  1.17M|        return 0;
  188|  1.17M|    }
  189|  1.17M|}

_ZN3scn2v24impl22make_contiguous_bufferIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|  5.67M|{
  235|  5.67M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  5.67M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  5.67M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  5.67M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  248|  5.67M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|  5.67M|    }
  240|  5.67M|    else {
  241|  5.67M|        return contiguous_range_factory{SCN_FWD(range)};
  242|  5.67M|    }
  243|  5.67M|}
_ZN3scn2v24impl19string_view_wrapperIcEC2IRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|  5.67M|    {
   50|  5.67M|    }
_ZNK3scn2v24impl19string_view_wrapperIcE4viewEv:
   62|  18.1M|    {
   63|  18.1M|        return sv;
   64|  18.1M|    }
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|  3.45M|{
  235|  3.45M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  3.45M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  3.45M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  3.45M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  248|  3.45M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|  3.45M|    }
  240|  3.45M|    else {
  241|  3.45M|        return contiguous_range_factory{SCN_FWD(range)};
  242|  3.45M|    }
  243|  3.45M|}
_ZN3scn2v24impl19string_view_wrapperIcEC2IN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|  3.45M|    {
   50|  3.45M|    }
_ZNK3scn2v24impl24contiguous_range_factoryIcE4viewEv:
  141|  55.3k|    {
  142|  55.3k|        return m_view;
  143|  55.3k|    }
_ZN3scn2v24impl24contiguous_range_factoryIcED2Ev:
  131|  27.6k|    ~contiguous_range_factory() = default;
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_LNS4_13subrange_kindE0EEEEEDaOT_:
  234|  27.6k|{
  235|  27.6k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  27.6k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  27.6k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  27.6k|        return string_view_wrapper{SCN_FWD(range)};
  239|  27.6k|    }
  240|  27.6k|    else {
  241|  27.6k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  248|  27.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  242|  27.6k|    }
  243|  27.6k|}
_ZN3scn2v24impl24contiguous_range_factoryIcEC2IN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_LNS6_13subrange_kindE0EEELPv0EEEOT_:
   96|  27.6k|    {
   97|  27.6k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|  27.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   98|  27.6k|    }
_ZN3scn2v24impl24contiguous_range_factoryIcE13emplace_rangeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_LNS6_13subrange_kindE0EEEEEvOT_:
  180|  27.6k|    {
  181|  27.6k|        using value_t = ranges::range_value_t<Range>;
  182|  27.6k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|  27.6k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|  27.6k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|  27.6k|            m_storage.reset();
  186|  27.6k|            m_view = string_view_type{ranges::data(range),
  187|  27.6k|                                      ranges_polyfill::usize(range)};
  188|  27.6k|        }
  189|  27.6k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (189:28): [Folded - Ignored]
  ------------------
  190|  27.6k|                                          std::basic_string<CharT>>) {
  191|  27.6k|            m_storage.emplace(SCN_FWD(range));
  192|  27.6k|            m_view = string_view_type{*m_storage};
  193|  27.6k|        }
  194|  27.6k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (194:28): [Folded - Ignored]
  |  Branch (194:28): [Folded - Ignored]
  ------------------
  195|  27.6k|                                          typename detail::basic_scan_buffer<
  196|  27.6k|                                              value_t>::forward_iterator> &&
  197|  27.6k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (197:28): [Folded - Ignored]
  ------------------
  198|  27.6k|            auto beg_seg = range.begin().contiguous_segment();
  199|  27.6k|            auto end_seg = range.end().contiguous_segment();
  200|  27.6k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  153|  27.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 27.6k, False: 12]
  |  |  ------------------
  ------------------
  201|  27.6k|                             detail::to_address(end_seg.end()))) {
  202|  27.6k|                auto& str = m_storage.emplace();
  203|  27.6k|                str.reserve(range.end().position() - range.begin().position());
  204|  27.6k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|  27.6k|                m_view = string_view_type{str};
  206|  27.6k|                return;
  207|  27.6k|            }
  208|       |
  209|     12|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|     12|                                                            end_seg.data());
  211|     12|            m_storage.reset();
  212|     12|        }
  213|  27.6k|        else {
  214|  27.6k|            auto& str = m_storage.emplace();
  215|  27.6k|            if constexpr (ranges::sized_range<Range>) {
  216|  27.6k|                str.reserve(ranges_polyfill::usize(range));
  217|  27.6k|            }
  218|  27.6k|            std::copy(ranges::begin(range), ranges::end(range),
  219|  27.6k|                      std::back_inserter(str));
  220|  27.6k|            m_view = string_view_type{str};
  221|  27.6k|        }
  222|  27.6k|    }
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|  3.37M|{
  235|  3.37M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  3.37M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  3.37M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  3.37M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  248|  3.37M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|  3.37M|    }
  240|  3.37M|    else {
  241|  3.37M|        return contiguous_range_factory{SCN_FWD(range)};
  242|  3.37M|    }
  243|  3.37M|}
_ZN3scn2v24impl19string_view_wrapperIwEC2IN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|  3.37M|    {
   50|  3.37M|    }
_ZNK3scn2v24impl19string_view_wrapperIwE4viewEv:
   62|  6.27M|    {
   63|  6.27M|        return sv;
   64|  6.27M|    }
_ZNK3scn2v24impl24contiguous_range_factoryIwE4viewEv:
  141|   138k|    {
  142|   138k|        return m_view;
  143|   138k|    }
_ZN3scn2v24impl24contiguous_range_factoryIwED2Ev:
  131|  83.0k|    ~contiguous_range_factory() = default;
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_LNS4_13subrange_kindE0EEEEEDaOT_:
  234|  83.0k|{
  235|  83.0k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  83.0k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  83.0k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  83.0k|        return string_view_wrapper{SCN_FWD(range)};
  239|  83.0k|    }
  240|  83.0k|    else {
  241|  83.0k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  248|  83.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  242|  83.0k|    }
  243|  83.0k|}
_ZN3scn2v24impl24contiguous_range_factoryIwEC2IN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_LNS6_13subrange_kindE0EEELPv0EEEOT_:
   96|  83.0k|    {
   97|  83.0k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|  83.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   98|  83.0k|    }
_ZN3scn2v24impl24contiguous_range_factoryIwE13emplace_rangeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_LNS6_13subrange_kindE0EEEEEvOT_:
  180|  83.0k|    {
  181|  83.0k|        using value_t = ranges::range_value_t<Range>;
  182|  83.0k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|  83.0k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|  83.0k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|  83.0k|            m_storage.reset();
  186|  83.0k|            m_view = string_view_type{ranges::data(range),
  187|  83.0k|                                      ranges_polyfill::usize(range)};
  188|  83.0k|        }
  189|  83.0k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (189:28): [Folded - Ignored]
  ------------------
  190|  83.0k|                                          std::basic_string<CharT>>) {
  191|  83.0k|            m_storage.emplace(SCN_FWD(range));
  192|  83.0k|            m_view = string_view_type{*m_storage};
  193|  83.0k|        }
  194|  83.0k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (194:28): [Folded - Ignored]
  |  Branch (194:28): [Folded - Ignored]
  ------------------
  195|  83.0k|                                          typename detail::basic_scan_buffer<
  196|  83.0k|                                              value_t>::forward_iterator> &&
  197|  83.0k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (197:28): [Folded - Ignored]
  ------------------
  198|  83.0k|            auto beg_seg = range.begin().contiguous_segment();
  199|  83.0k|            auto end_seg = range.end().contiguous_segment();
  200|  83.0k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  153|  83.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 83.0k, False: 12]
  |  |  ------------------
  ------------------
  201|  83.0k|                             detail::to_address(end_seg.end()))) {
  202|  83.0k|                auto& str = m_storage.emplace();
  203|  83.0k|                str.reserve(range.end().position() - range.begin().position());
  204|  83.0k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|  83.0k|                m_view = string_view_type{str};
  206|  83.0k|                return;
  207|  83.0k|            }
  208|       |
  209|     12|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|     12|                                                            end_seg.data());
  211|     12|            m_storage.reset();
  212|     12|        }
  213|  83.0k|        else {
  214|  83.0k|            auto& str = m_storage.emplace();
  215|  83.0k|            if constexpr (ranges::sized_range<Range>) {
  216|  83.0k|                str.reserve(ranges_polyfill::usize(range));
  217|  83.0k|            }
  218|  83.0k|            std::copy(ranges::begin(range), ranges::end(range),
  219|  83.0k|                      std::back_inserter(str));
  220|  83.0k|            m_view = string_view_type{str};
  221|  83.0k|        }
  222|  83.0k|    }

_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_9eof_errorERKT_:
   96|  24.4M|{
   97|  24.4M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  24.4M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 30.3k, False: 24.4M]
  |  |  ------------------
  ------------------
   98|  30.3k|        return eof_error::eof;
   99|  30.3k|    }
  100|  24.4M|    return eof_error::good;
  101|  24.4M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEbRKT_:
   90|  24.4M|{
   91|  24.4M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  24.4M|}
_ZN3scn2v24impl12is_range_eofIPKcS4_EEbT_T0_:
   74|  24.4M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  24.4M|    {
   84|  24.4M|        return begin == end;
   85|  24.4M|    }
   86|  24.4M|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_9eof_errorERKT_:
   96|   830k|{
   97|   830k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|   830k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 12, False: 830k]
  |  |  ------------------
  ------------------
   98|     12|        return eof_error::eof;
   99|     12|    }
  100|   830k|    return eof_error::good;
  101|   830k|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   90|   830k|{
   91|   830k|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|   830k|}
_ZN3scn2v24impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tEEEbT_T0_:
   74|   830k|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|   830k|    {
   84|   830k|        return begin == end;
   85|   830k|    }
   86|   830k|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_9eof_errorERKT_:
   96|  23.2M|{
   97|  23.2M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  23.2M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 40.8k, False: 23.2M]
  |  |  ------------------
  ------------------
   98|  40.8k|        return eof_error::eof;
   99|  40.8k|    }
  100|  23.2M|    return eof_error::good;
  101|  23.2M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEbRKT_:
   90|  23.2M|{
   91|  23.2M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  23.2M|}
_ZN3scn2v24impl12is_range_eofIPKwS4_EEbT_T0_:
   74|  23.2M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  23.2M|    {
   84|  23.2M|        return begin == end;
   85|  23.2M|    }
   86|  23.2M|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_9eof_errorERKT_:
   96|  2.40M|{
   97|  2.40M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  2.40M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 30, False: 2.40M]
  |  |  ------------------
  ------------------
   98|     30|        return eof_error::eof;
   99|     30|    }
  100|  2.40M|    return eof_error::good;
  101|  2.40M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   90|  2.40M|{
   91|  2.40M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  2.40M|}
_ZN3scn2v24impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tEEEbT_T0_:
   74|  2.40M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  2.40M|    {
   84|  2.40M|        return begin == end;
   85|  2.40M|    }
   86|  2.40M|}

_ZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  127|  5.91M|{
  128|  5.91M|    return find_classic_impl(
  129|  5.91M|        source, [](char ch) { return !is_ascii_space(ch); },
  130|  5.91M|        [](char32_t cp) { return !is_cp_space(cp); });
  131|  5.91M|}
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
   30|  5.99M|{
   31|  5.99M|    static_assert(sizeof(*source.data()) == 1);
   32|  5.99M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  242|  5.99M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.99M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   33|      0|    uint64_t word{};
   34|  5.99M|    std::memcpy(&word, source.data(), source.size());
   35|       |
   36|  5.99M|    return has_byte_greater(word, 127) != 0;
   37|  5.99M|}
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_3ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_4EEPKcS8_T_T0_:
   43|  5.91M|{
   44|  5.91M|    auto it = source.begin();
   45|       |
   46|  5.99M|    while (it != source.end()) {
  ------------------
  |  Branch (46:12): [True: 5.99M, False: 3.68k]
  ------------------
   47|  5.99M|        auto sv =
   48|  5.99M|            detail::make_string_view_from_iterators<char>(it, source.end())
   49|  5.99M|                .substr(0, 8);
   50|       |
   51|  5.99M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (51:13): [True: 5.93M, False: 57.3k]
  ------------------
   52|  5.93M|            auto tmp_it = ranges::find_if(sv, cu_cb);
   53|  5.93M|            it = detail::make_string_view_iterator(source, tmp_it);
   54|  5.93M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (54:17): [True: 5.85M, False: 85.1k]
  ------------------
   55|  5.85M|                break;
   56|  5.85M|            }
   57|  85.1k|            continue;
   58|  5.93M|        }
   59|       |
   60|  81.0k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (60:28): [True: 79.8k, False: 1.26k]
  ------------------
   61|  79.8k|            auto tmp =
   62|  79.8k|                detail::make_string_view_from_iterators<char>(it, source.end());
   63|  79.8k|            auto res = get_next_code_point(tmp);
   64|  79.8k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (64:17): [True: 56.0k, False: 23.7k]
  ------------------
   65|  56.0k|                return it;
   66|  56.0k|            }
   67|  23.7k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
   68|  23.7k|            it = detail::make_string_view_iterator(source, res.iterator);
   69|  23.7k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  243|  23.7k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|  23.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   70|  23.7k|        }
   71|  57.3k|    }
   72|       |
   73|  5.85M|    return detail::make_string_view_iterator(source, it);
   74|  5.91M|}
find_whitespace.cpp:_ZZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_3clEc:
  129|  12.3M|        source, [](char ch) { return !is_ascii_space(ch); },
find_whitespace.cpp:_ZZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_4clEDi:
  130|  79.8k|        [](char32_t cp) { return !is_cp_space(cp); });

_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_:
  299|  5.67M|{
  300|  5.67M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|  5.67M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|  5.67M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|  5.67M|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  ------------------
  |  |  248|  5.67M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  304|  5.67M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|  5.67M|        return ranges::next(ranges::begin(range),
  306|  5.67M|                            ranges::distance(buf.view().begin(), it));
  307|  5.67M|    }
  308|  5.67M|    else {
  309|  5.67M|        auto it = ranges::begin(range);
  310|       |
  311|  5.67M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  312|  5.67M|            auto seg = get_contiguous_beginning(range);
  313|  5.67M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|  5.67M|                seg_it != seg.end()) {
  315|  5.67M|                return ranges_polyfill::batch_next(
  316|  5.67M|                    it, ranges::distance(seg.begin(), seg_it));
  317|  5.67M|            }
  318|  5.67M|            ranges_polyfill::batch_next(it, seg.size());
  319|  5.67M|        }
  320|       |
  321|  5.67M|        return read_while_code_point(
  322|  5.67M|            SCN_FWD(range),
  323|  5.67M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|  5.67M|    }
  325|  5.67M|}
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  458|  5.67M|{
  459|  5.67M|    auto it = read_code_unit(range);
  460|  5.67M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  5.67M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.67M]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|  11.2M|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 11.2M, False: 5.36M]
  ------------------
  465|  11.2M|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 310k, False: 10.9M]
  ------------------
  466|   310k|            return *it;
  467|   310k|        }
  468|  11.2M|    }
  469|       |
  470|  5.36M|    return unexpected(parse_error::error);
  471|  5.67M|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEOSH_OSJ_:
  481|  1.13M|{
  482|  1.13M|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 975k, False: 159k]
  ------------------
  483|   975k|        return ranges::begin(range);
  484|   975k|    }
  485|   159k|    return *result;
  486|  1.13M|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  417|  12.4M|{
  418|  12.4M|    using char_type = detail::char_t<Range>;
  419|       |
  420|  12.4M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  12.4M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  12.4M|        if (ranges::size(range) < str.size()) {
  ------------------
  |  Branch (422:13): [True: 48.3k, False: 12.3M]
  ------------------
  423|  48.3k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  48.3k|        }
  425|  12.3M|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  ------------------
  |  Branch (425:13): [True: 12.2M, False: 92.4k]
  ------------------
  426|  12.2M|            return unexpected(parse_error::error);
  427|  12.2M|        }
  428|  92.4k|        return ranges::next(ranges::begin(range), str.size());
  429|  12.3M|    }
  430|  12.4M|    else {
  431|  12.4M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  12.4M|            if (ch < 'A' || ch > 'Z') {
  433|  12.4M|                return ch;
  434|  12.4M|            }
  435|  12.4M|            return static_cast<char_type>(ch +
  436|  12.4M|                                          static_cast<char_type>('a' - 'A'));
  437|  12.4M|        };
  438|       |
  439|  12.4M|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  440|  12.4M|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  12.4M|        if (SCN_UNLIKELY(!std::equal(
  443|  12.4M|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  12.4M|                    return ascii_tolower(a) ==
  445|  12.4M|                           static_cast<detail::char_t<Range>>(b);
  446|  12.4M|                }))) {
  447|  12.4M|            return unexpected(parse_error::error);
  448|  12.4M|        }
  449|       |
  450|  12.4M|        return it;
  451|  12.4M|    }
  452|  12.4M|}
_ZN3scn2v24impl17fast_streq_nocaseEPKcS3_m:
  406|  12.3M|{
  407|  12.3M|    unsigned char running_diff{0};
  408|  37.1M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (408:24): [True: 24.7M, False: 12.3M]
  ------------------
  409|  24.7M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
  410|  24.7M|    }
  411|  12.3M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (411:12): [True: 87.2k, False: 12.2M]
  |  Branch (411:33): [True: 5.21k, False: 12.2M]
  ------------------
  412|  12.3M|}
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NDTcl4implISE_EEE4typeE:
  331|  3.94M|{
  332|  3.94M|    auto it = read_code_unit(range);
  333|  3.94M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  3.94M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.56k, False: 3.94M]
  |  |  ------------------
  ------------------
  334|  1.56k|        return unexpected(make_eof_parse_error(it.error()));
  335|  1.56k|    }
  336|       |
  337|  3.94M|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|  3.94M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.62M, False: 2.31M]
  |  |  ------------------
  ------------------
  338|  3.94M|                     static_cast<detail::char_t<Range>>(ch))) {
  339|  1.62M|        return unexpected(parse_error::error);
  340|  1.62M|    }
  341|       |
  342|  2.31M|    return *it;
  343|  3.94M|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_:
  299|   235k|{
  300|   235k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|   235k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|   235k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|   235k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|   235k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|   235k|        return ranges::next(ranges::begin(range),
  306|   235k|                            ranges::distance(buf.view().begin(), it));
  307|   235k|    }
  308|   235k|    else {
  309|   235k|        auto it = ranges::begin(range);
  310|       |
  311|   235k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|   235k|            auto seg = get_contiguous_beginning(range);
  313|   235k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|   235k|                seg_it != seg.end()) {
  ------------------
  |  Branch (314:17): [True: 235k, False: 0]
  ------------------
  315|   235k|                return ranges_polyfill::batch_next(
  316|   235k|                    it, ranges::distance(seg.begin(), seg_it));
  317|   235k|            }
  318|      0|            ranges_polyfill::batch_next(it, seg.size());
  319|      0|        }
  320|       |
  321|      0|        return read_while_code_point(
  322|      0|            SCN_FWD(range),
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|      0|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|   235k|    }
  325|   235k|}
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  458|   235k|{
  459|   235k|    auto it = read_code_unit(range);
  460|   235k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   235k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 235k]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|   442k|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 442k, False: 207k]
  ------------------
  465|   442k|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 27.6k, False: 415k]
  ------------------
  466|  27.6k|            return *it;
  467|  27.6k|        }
  468|   442k|    }
  469|       |
  470|   207k|    return unexpected(parse_error::error);
  471|   235k|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEENS1_14parse_expectedESA_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEOSK_OSM_:
  481|   110k|{
  482|   110k|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 110k, False: 0]
  ------------------
  483|   110k|        return ranges::begin(range);
  484|   110k|    }
  485|      0|    return *result;
  486|   110k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  417|   401k|{
  418|   401k|    using char_type = detail::char_t<Range>;
  419|       |
  420|   401k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|   401k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|   401k|        if (ranges::size(range) < str.size()) {
  423|   401k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|   401k|        }
  425|   401k|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|   401k|            return unexpected(parse_error::error);
  427|   401k|        }
  428|   401k|        return ranges::next(ranges::begin(range), str.size());
  429|   401k|    }
  430|   401k|    else {
  431|   401k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   401k|            if (ch < 'A' || ch > 'Z') {
  433|   401k|                return ch;
  434|   401k|            }
  435|   401k|            return static_cast<char_type>(ch +
  436|   401k|                                          static_cast<char_type>('a' - 'A'));
  437|   401k|        };
  438|       |
  439|   401k|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|   401k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   401k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   401k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   401k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 186, False: 401k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    186|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    186|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    186|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    186|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    186|    }                                                  \
  |  |  |  |   70|   401k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   401k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|   401k|                        .transform_error(make_eof_parse_error));
  441|       |
  442|   401k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|   401k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 401k, False: 0]
  |  |  ------------------
  ------------------
  443|   401k|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|   401k|                    return ascii_tolower(a) ==
  445|   401k|                           static_cast<detail::char_t<Range>>(b);
  446|   401k|                }))) {
  447|   401k|            return unexpected(parse_error::error);
  448|   401k|        }
  449|       |
  450|      0|        return it;
  451|   401k|    }
  452|   401k|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlcE_clEc:
  431|   401k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   401k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 27.6k, False: 373k]
  |  Branch (432:29): [True: 0, False: 373k]
  ------------------
  433|  27.6k|                return ch;
  434|  27.6k|            }
  435|   373k|            return static_cast<char_type>(ch +
  436|   373k|                                          static_cast<char_type>('a' - 'A'));
  437|   401k|        };
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NDTcl4implISH_EEE4typeE:
  331|   124k|{
  332|   124k|    auto it = read_code_unit(range);
  333|   124k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 124k]
  |  |  ------------------
  ------------------
  334|      0|        return unexpected(make_eof_parse_error(it.error()));
  335|      0|    }
  336|       |
  337|   124k|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 124k, False: 0]
  |  |  ------------------
  ------------------
  338|   124k|                     static_cast<detail::char_t<Range>>(ch))) {
  339|   124k|        return unexpected(parse_error::error);
  340|   124k|    }
  341|       |
  342|      0|    return *it;
  343|   124k|}
_ZN3scn2v24impl21read_while1_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NS1_12function_refIFbNDTcl4implISH_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
  158|   207k|{
  159|   207k|    auto it = read_while_code_unit(range, pred);
  160|   207k|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 179k, False: 27.6k]
  ------------------
  161|   179k|        return unexpected(parse_error::error);
  162|   179k|    }
  163|  27.6k|    return it;
  164|   207k|}
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  138|   207k|{
  139|   207k|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|   207k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|   207k|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  130|   207k|{
  131|   207k|    return ranges::find_if(range, pred);
  132|   207k|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_:
  299|  5.39M|{
  300|  5.39M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|  5.39M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|  5.39M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|  5.39M|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|  5.39M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|  5.39M|        return ranges::next(ranges::begin(range),
  306|  5.39M|                            ranges::distance(buf.view().begin(), it));
  307|  5.39M|    }
  308|  5.39M|    else {
  309|  5.39M|        auto it = ranges::begin(range);
  310|       |
  311|  5.39M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|  5.39M|            auto seg = get_contiguous_beginning(range);
  313|  5.39M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|  5.39M|                seg_it != seg.end()) {
  315|  5.39M|                return ranges_polyfill::batch_next(
  316|  5.39M|                    it, ranges::distance(seg.begin(), seg_it));
  317|  5.39M|            }
  318|  5.39M|            ranges_polyfill::batch_next(it, seg.size());
  319|  5.39M|        }
  320|       |
  321|  5.39M|        return read_while_code_point(
  322|  5.39M|            SCN_FWD(range),
  ------------------
  |  |  248|  5.39M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  5.39M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|  5.39M|    }
  325|  5.39M|}
_ZN3scn2v24impl21read_while_code_pointIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  263|  5.39M|{
  264|  5.39M|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|  5.39M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|  5.39M|}
_ZN3scn2v24impl21read_until_code_pointIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  230|  5.39M|{
  231|  5.39M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|  5.39M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|  5.39M|        return read_until_code_point_eager(SCN_FWD(range), pred);
  ------------------
  |  |  248|  5.39M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  234|  5.39M|    }
  235|  5.39M|    else {
  236|  5.39M|        auto it = ranges::begin(range);
  237|  5.39M|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|  5.39M|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|  5.39M|            seg_it != seg.end()) {
  241|  5.39M|            return ranges_polyfill::batch_next(
  242|  5.39M|                it, ranges::distance(seg.begin(), seg_it));
  243|  5.39M|        }
  244|       |
  245|  5.39M|        while (it != ranges::end(range)) {
  246|  5.39M|            const auto [iter, value] =
  247|  5.39M|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|  5.39M|            const auto cp = decode_code_point_exhaustive(value.view());
  249|  5.39M|            if (pred(cp)) {
  250|  5.39M|                return it;
  251|  5.39M|            }
  252|  5.39M|            it = iter;
  253|  5.39M|        }
  254|       |
  255|  5.39M|        return it;
  256|  5.39M|    }
  257|  5.39M|}
_ZN3scn2v24impl27read_until_code_point_eagerIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  177|  5.39M|{
  178|  5.39M|    static_assert(ranges::contiguous_range<Range> &&
  179|  5.39M|                  ranges::sized_range<Range>);
  180|       |
  181|  5.39M|    std::array<char32_t, 16> cp_buf{};
  182|  5.39M|    std::array<uint8_t, 16> idx_buf{};
  183|  5.39M|    auto it = ranges::begin(range);
  184|  5.40M|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 5.40M, False: 6.98k]
  ------------------
  185|  5.40M|        auto chunk_begin = it;
  186|  5.40M|        size_t code_point_count = 0;
  187|  5.40M|        uint8_t code_unit_idx = 0;
  188|  87.4M|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 82.5M, False: 4.92M]
  |  Branch (188:52): [True: 82.0M, False: 475k]
  ------------------
  189|  82.0M|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 82.0M, False: 0]
  ------------------
  190|  82.0M|                idx_buf[code_point_count] = code_unit_idx;
  191|  82.0M|                ++code_point_count;
  192|  82.0M|            }
  193|  82.0M|            ++it;
  194|  82.0M|            ++code_unit_idx;
  195|  82.0M|        }
  196|       |
  197|  5.40M|        auto input = detail::make_string_view_from_pointers(
  198|  5.40M|            detail::to_address(chunk_begin), detail::to_address(it));
  199|  5.40M|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|  5.40M|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|  5.40M|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|  5.40M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.40M]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|  11.1M|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 11.1M, False: 17.4k]
  ------------------
  217|  11.1M|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 5.38M, False: 5.79M]
  ------------------
  218|  5.38M|                return chunk_begin + idx_buf[i];
  219|  5.38M|            }
  220|  11.1M|        }
  221|  5.40M|    }
  222|       |
  223|  6.98k|    return it;
  224|  5.39M|}
_ZZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_ENKUlDiE_clEDi:
  323|  11.1M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  458|  5.38M|{
  459|  5.38M|    auto it = read_code_unit(range);
  460|  5.38M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  5.38M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.38M]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|  10.7M|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 10.7M, False: 5.15M]
  ------------------
  465|  10.7M|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 228k, False: 10.4M]
  ------------------
  466|   228k|            return *it;
  467|   228k|        }
  468|  10.7M|    }
  469|       |
  470|  5.15M|    return unexpected(parse_error::error);
  471|  5.38M|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEOSH_OSJ_:
  481|  1.16M|{
  482|  1.16M|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 1.02M, False: 139k]
  ------------------
  483|  1.02M|        return ranges::begin(range);
  484|  1.02M|    }
  485|   139k|    return *result;
  486|  1.16M|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  417|  11.6M|{
  418|  11.6M|    using char_type = detail::char_t<Range>;
  419|       |
  420|  11.6M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  11.6M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  11.6M|        if (ranges::size(range) < str.size()) {
  423|  11.6M|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  11.6M|        }
  425|  11.6M|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|  11.6M|            return unexpected(parse_error::error);
  427|  11.6M|        }
  428|  11.6M|        return ranges::next(ranges::begin(range), str.size());
  429|  11.6M|    }
  430|  11.6M|    else {
  431|  11.6M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  11.6M|            if (ch < 'A' || ch > 'Z') {
  433|  11.6M|                return ch;
  434|  11.6M|            }
  435|  11.6M|            return static_cast<char_type>(ch +
  436|  11.6M|                                          static_cast<char_type>('a' - 'A'));
  437|  11.6M|        };
  438|       |
  439|  11.6M|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|  11.6M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  11.6M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  11.6M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  11.6M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 116k, False: 11.5M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|   116k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|   116k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|   116k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|   116k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|   116k|    }                                                  \
  |  |  |  |   70|  11.6M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  11.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|  11.5M|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  11.5M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|  11.5M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 11.4M, False: 82.5k]
  |  |  ------------------
  ------------------
  443|  11.5M|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  11.5M|                    return ascii_tolower(a) ==
  445|  11.5M|                           static_cast<detail::char_t<Range>>(b);
  446|  11.5M|                }))) {
  447|  11.4M|            return unexpected(parse_error::error);
  448|  11.4M|        }
  449|       |
  450|  82.5k|        return it;
  451|  11.5M|    }
  452|  11.6M|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlwE_clEw:
  431|  18.0M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  18.0M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 17.1M, False: 912k]
  |  Branch (432:29): [True: 871k, False: 40.6k]
  ------------------
  433|  18.0M|                return ch;
  434|  18.0M|            }
  435|  40.6k|            return static_cast<char_type>(ch +
  436|  40.6k|                                          static_cast<char_type>('a' - 'A'));
  437|  18.0M|        };
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NDTcl4implISE_EEE4typeE:
  331|  3.69M|{
  332|  3.69M|    auto it = read_code_unit(range);
  333|  3.69M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  3.69M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.70k, False: 3.69M]
  |  |  ------------------
  ------------------
  334|  2.70k|        return unexpected(make_eof_parse_error(it.error()));
  335|  2.70k|    }
  336|       |
  337|  3.69M|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|  3.69M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.65M, False: 2.03M]
  |  |  ------------------
  ------------------
  338|  3.69M|                     static_cast<detail::char_t<Range>>(ch))) {
  339|  1.65M|        return unexpected(parse_error::error);
  340|  1.65M|    }
  341|       |
  342|  2.03M|    return *it;
  343|  3.69M|}
_ZN3scn2v24impl27read_until_code_point_eagerIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_NS1_12function_refIFbDiESF_EE:
  177|   678k|{
  178|   678k|    static_assert(ranges::contiguous_range<Range> &&
  179|   678k|                  ranges::sized_range<Range>);
  180|       |
  181|   678k|    std::array<char32_t, 16> cp_buf{};
  182|   678k|    std::array<uint8_t, 16> idx_buf{};
  183|   678k|    auto it = ranges::begin(range);
  184|   678k|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 678k, False: 0]
  ------------------
  185|   678k|        auto chunk_begin = it;
  186|   678k|        size_t code_point_count = 0;
  187|   678k|        uint8_t code_unit_idx = 0;
  188|  1.35M|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 1.35M, False: 0]
  |  Branch (188:52): [True: 678k, False: 678k]
  ------------------
  189|   678k|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 678k, False: 0]
  ------------------
  190|   678k|                idx_buf[code_point_count] = code_unit_idx;
  191|   678k|                ++code_point_count;
  192|   678k|            }
  193|   678k|            ++it;
  194|   678k|            ++code_unit_idx;
  195|   678k|        }
  196|       |
  197|   678k|        auto input = detail::make_string_view_from_pointers(
  198|   678k|            detail::to_address(chunk_begin), detail::to_address(it));
  199|   678k|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|   678k|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|   678k|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|   678k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 678k]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|   678k|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 678k, False: 0]
  ------------------
  217|   678k|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 678k, False: 0]
  ------------------
  218|   678k|                return chunk_begin + idx_buf[i];
  219|   678k|            }
  220|   678k|        }
  221|   678k|    }
  222|       |
  223|      0|    return it;
  224|   678k|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_:
  299|   678k|{
  300|   678k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|   678k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|   678k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|   678k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|   678k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|   678k|        return ranges::next(ranges::begin(range),
  306|   678k|                            ranges::distance(buf.view().begin(), it));
  307|   678k|    }
  308|   678k|    else {
  309|   678k|        auto it = ranges::begin(range);
  310|       |
  311|   678k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|   678k|            auto seg = get_contiguous_beginning(range);
  313|   678k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|   678k|                seg_it != seg.end()) {
  315|   678k|                return ranges_polyfill::batch_next(
  316|   678k|                    it, ranges::distance(seg.begin(), seg_it));
  317|   678k|            }
  318|   678k|            ranges_polyfill::batch_next(it, seg.size());
  319|   678k|        }
  320|       |
  321|   678k|        return read_while_code_point(
  322|   678k|            SCN_FWD(range),
  ------------------
  |  |  248|   678k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|   678k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|   678k|    }
  325|   678k|}
_ZN3scn2v24impl21read_while_code_pointIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NS1_12function_refIFbDiESM_EE:
  263|   678k|{
  264|   678k|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|   678k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|   678k|}
_ZN3scn2v24impl21read_until_code_pointIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NS1_12function_refIFbDiESM_EE:
  230|   678k|{
  231|   678k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|   678k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|   678k|        return read_until_code_point_eager(SCN_FWD(range), pred);
  234|   678k|    }
  235|   678k|    else {
  236|   678k|        auto it = ranges::begin(range);
  237|   678k|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|   678k|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|   678k|            seg_it != seg.end()) {
  ------------------
  |  Branch (240:13): [True: 678k, False: 0]
  ------------------
  241|   678k|            return ranges_polyfill::batch_next(
  242|   678k|                it, ranges::distance(seg.begin(), seg_it));
  243|   678k|        }
  244|       |
  245|      0|        while (it != ranges::end(range)) {
  ------------------
  |  Branch (245:16): [True: 0, False: 0]
  ------------------
  246|      0|            const auto [iter, value] =
  247|      0|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|      0|            const auto cp = decode_code_point_exhaustive(value.view());
  249|      0|            if (pred(cp)) {
  ------------------
  |  Branch (249:17): [True: 0, False: 0]
  ------------------
  250|      0|                return it;
  251|      0|            }
  252|      0|            it = iter;
  253|      0|        }
  254|       |
  255|      0|        return it;
  256|      0|    }
  257|   678k|}
_ZZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_ENKUlDiE_clEDi:
  323|   678k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  458|   678k|{
  459|   678k|    auto it = read_code_unit(range);
  460|   678k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   678k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 678k]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|  1.30M|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 1.30M, False: 622k]
  ------------------
  465|  1.30M|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 55.3k, False: 1.24M]
  ------------------
  466|  55.3k|            return *it;
  467|  55.3k|        }
  468|  1.30M|    }
  469|       |
  470|   622k|    return unexpected(parse_error::error);
  471|   678k|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEENS1_14parse_expectedESA_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEOSK_OSM_:
  481|   304k|{
  482|   304k|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 304k, False: 0]
  ------------------
  483|   304k|        return ranges::begin(range);
  484|   304k|    }
  485|      0|    return *result;
  486|   304k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  417|  1.17M|{
  418|  1.17M|    using char_type = detail::char_t<Range>;
  419|       |
  420|  1.17M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  1.17M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  1.17M|        if (ranges::size(range) < str.size()) {
  423|  1.17M|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  1.17M|        }
  425|  1.17M|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|  1.17M|            return unexpected(parse_error::error);
  427|  1.17M|        }
  428|  1.17M|        return ranges::next(ranges::begin(range), str.size());
  429|  1.17M|    }
  430|  1.17M|    else {
  431|  1.17M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  1.17M|            if (ch < 'A' || ch > 'Z') {
  433|  1.17M|                return ch;
  434|  1.17M|            }
  435|  1.17M|            return static_cast<char_type>(ch +
  436|  1.17M|                                          static_cast<char_type>('a' - 'A'));
  437|  1.17M|        };
  438|       |
  439|  1.17M|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|  1.17M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.17M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.17M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 178, False: 1.17M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    178|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    178|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    178|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    178|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    178|    }                                                  \
  |  |  |  |   70|  1.17M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.17M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|  1.17M|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  1.17M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|  1.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.17M, False: 0]
  |  |  ------------------
  ------------------
  443|  1.17M|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  1.17M|                    return ascii_tolower(a) ==
  445|  1.17M|                           static_cast<detail::char_t<Range>>(b);
  446|  1.17M|                }))) {
  447|  1.17M|            return unexpected(parse_error::error);
  448|  1.17M|        }
  449|       |
  450|      0|        return it;
  451|  1.17M|    }
  452|  1.17M|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlwE_clEw:
  431|  1.17M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  1.17M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 55.3k, False: 1.12M]
  |  Branch (432:29): [True: 0, False: 1.12M]
  ------------------
  433|  55.3k|                return ch;
  434|  55.3k|            }
  435|  1.12M|            return static_cast<char_type>(ch +
  436|  1.12M|                                          static_cast<char_type>('a' - 'A'));
  437|  1.17M|        };
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NDTcl4implISH_EEE4typeE:
  331|   373k|{
  332|   373k|    auto it = read_code_unit(range);
  333|   373k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   373k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 373k]
  |  |  ------------------
  ------------------
  334|      0|        return unexpected(make_eof_parse_error(it.error()));
  335|      0|    }
  336|       |
  337|   373k|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|   373k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 373k, False: 0]
  |  |  ------------------
  ------------------
  338|   373k|                     static_cast<detail::char_t<Range>>(ch))) {
  339|   373k|        return unexpected(parse_error::error);
  340|   373k|    }
  341|       |
  342|      0|    return *it;
  343|   373k|}
_ZN3scn2v24impl21read_while1_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NS1_12function_refIFbNDTcl4implISH_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
  158|   595k|{
  159|   595k|    auto it = read_while_code_unit(range, pred);
  160|   595k|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 512k, False: 83.0k]
  ------------------
  161|   512k|        return unexpected(parse_error::error);
  162|   512k|    }
  163|  83.0k|    return it;
  164|   595k|}
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  138|   595k|{
  139|   595k|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|   595k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|   595k|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  130|   595k|{
  131|   595k|    return ranges::find_if(range, pred);
  132|   595k|}

_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   35|  9.61M|{
   36|  9.61M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  9.61M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.56k, False: 9.61M]
  |  |  ------------------
  ------------------
   37|  1.56k|        return unexpected(e);
   38|  1.56k|    }
   39|       |
   40|  9.61M|    return ranges::next(ranges::begin(range));
   41|  9.61M|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   35|   359k|{
   36|   359k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   359k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 359k]
  |  |  ------------------
  ------------------
   37|      0|        return unexpected(e);
   38|      0|    }
   39|       |
   40|   359k|    return ranges::next(ranges::begin(range));
   41|   359k|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__19enable_ifIX5rangeISH_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSH_EEEEE15difference_typeEE4typeE:
   47|   401k|{
   48|   401k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|   401k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   401k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|   401k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|   401k|        const auto sz = ranges::ssize(range);
   52|   401k|        if (sz < count) {
   53|   401k|            return unexpected(eof_error::eof);
   54|   401k|        }
   55|       |
   56|   401k|        return ranges::next(ranges::begin(range), count);
   57|   401k|    }
   58|   401k|    else {
   59|   401k|        auto it = ranges::begin(range);
   60|   401k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (60:13): [True: 373k, False: 27.8k]
  ------------------
   61|   373k|            return ranges_polyfill::batch_next(it, count);
   62|   373k|        }
   63|       |
   64|  83.3k|        for (ranges::range_difference_t<Range> i = 0; i < count;
  ------------------
  |  Branch (64:55): [True: 55.6k, False: 27.6k]
  ------------------
   65|  55.6k|             ++i, (void)++it) {
   66|  55.6k|            if (it == ranges::end(range)) {
  ------------------
  |  Branch (66:17): [True: 186, False: 55.4k]
  ------------------
   67|    186|                return unexpected(eof_error::eof);
   68|    186|            }
   69|  55.6k|        }
   70|       |
   71|  27.6k|        return it;
   72|  27.8k|    }
   73|   401k|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   35|  9.08M|{
   36|  9.08M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  9.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.70k, False: 9.07M]
  |  |  ------------------
  ------------------
   37|  2.70k|        return unexpected(e);
   38|  2.70k|    }
   39|       |
   40|  9.07M|    return ranges::next(ranges::begin(range));
   41|  9.08M|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__19enable_ifIX5rangeISE_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeE:
   47|  11.6M|{
   48|  11.6M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|  11.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  11.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|  11.6M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|  11.6M|        const auto sz = ranges::ssize(range);
   52|  11.6M|        if (sz < count) {
  ------------------
  |  Branch (52:13): [True: 116k, False: 11.5M]
  ------------------
   53|   116k|            return unexpected(eof_error::eof);
   54|   116k|        }
   55|       |
   56|  11.5M|        return ranges::next(ranges::begin(range), count);
   57|  11.6M|    }
   58|  11.6M|    else {
   59|  11.6M|        auto it = ranges::begin(range);
   60|  11.6M|        if (guaranteed_minimum_size(range) >= count) {
   61|  11.6M|            return ranges_polyfill::batch_next(it, count);
   62|  11.6M|        }
   63|       |
   64|  11.6M|        for (ranges::range_difference_t<Range> i = 0; i < count;
   65|  11.6M|             ++i, (void)++it) {
   66|  11.6M|            if (it == ranges::end(range)) {
   67|  11.6M|                return unexpected(eof_error::eof);
   68|  11.6M|            }
   69|  11.6M|        }
   70|       |
   71|  11.6M|        return it;
   72|  11.6M|    }
   73|  11.6M|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   35|  1.05M|{
   36|  1.05M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.05M]
  |  |  ------------------
  ------------------
   37|      0|        return unexpected(e);
   38|      0|    }
   39|       |
   40|  1.05M|    return ranges::next(ranges::begin(range));
   41|  1.05M|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__19enable_ifIX5rangeISH_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSH_EEEEE15difference_typeEE4typeE:
   47|  1.17M|{
   48|  1.17M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|  1.17M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.17M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|  1.17M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|  1.17M|        const auto sz = ranges::ssize(range);
   52|  1.17M|        if (sz < count) {
   53|  1.17M|            return unexpected(eof_error::eof);
   54|  1.17M|        }
   55|       |
   56|  1.17M|        return ranges::next(ranges::begin(range), count);
   57|  1.17M|    }
   58|  1.17M|    else {
   59|  1.17M|        auto it = ranges::begin(range);
   60|  1.17M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (60:13): [True: 1.12M, False: 55.5k]
  ------------------
   61|  1.12M|            return ranges_polyfill::batch_next(it, count);
   62|  1.12M|        }
   63|       |
   64|   166k|        for (ranges::range_difference_t<Range> i = 0; i < count;
  ------------------
  |  Branch (64:55): [True: 111k, False: 55.3k]
  ------------------
   65|   111k|             ++i, (void)++it) {
   66|   111k|            if (it == ranges::end(range)) {
  ------------------
  |  Branch (66:17): [True: 178, False: 110k]
  ------------------
   67|    178|                return unexpected(eof_error::eof);
   68|    178|            }
   69|   111k|        }
   70|       |
   71|  55.3k|        return it;
   72|  55.5k|    }
   73|  1.17M|}

_ZN3scn2v26detail10locale_refC2INSt3__16localeEEERKT_:
   32|  5.79M|{
   33|  5.79M|    static_assert(std::is_same_v<Locale, std::locale>);
   34|  5.79M|}
_ZNK3scn2v26detail10locale_ref3getINSt3__16localeEEET_v:
   38|  1.42M|{
   39|  1.42M|    static_assert(std::is_same_v<Locale, std::locale>);
   40|  1.42M|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (40:12): [True: 710k, False: 710k]
  ------------------
   41|  1.42M|                    : std::locale{};
   42|  1.42M|}

_ZN3scn2v24impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
  111|   697k|    {
  112|   697k|        auto stdloc = loc.get<std::locale>();
  113|   697k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
  114|   697k|        grouping = numpunct.grouping();
  115|   697k|        thousands_sep =
  116|   697k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (116:13): [True: 0, False: 697k]
  ------------------
  117|   697k|        decimal_point = numpunct.decimal_point();
  118|   697k|    }
_ZN3scn2v24impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
   48|   697k|{
   49|   697k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (49:9): [True: 697k, False: 0]
  ------------------
   50|   697k|        return std::use_facet<Facet>(stdloc);
   51|   697k|    }
   52|      0|    stdloc = std::locale(stdloc, new Facet{});
   53|      0|    return std::use_facet<Facet>(stdloc);
   54|   697k|}
_ZN3scn2v24impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
  111|   723k|    {
  112|   723k|        auto stdloc = loc.get<std::locale>();
  113|   723k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
  114|   723k|        grouping = numpunct.grouping();
  115|   723k|        thousands_sep =
  116|   723k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (116:13): [True: 0, False: 723k]
  ------------------
  117|   723k|        decimal_point = numpunct.decimal_point();
  118|   723k|    }
_ZN3scn2v24impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
   48|   723k|{
   49|   723k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (49:9): [True: 723k, False: 0]
  ------------------
   50|   723k|        return std::use_facet<Facet>(stdloc);
   51|   723k|    }
   52|      0|    stdloc = std::locale(stdloc, new Facet{});
   53|      0|    return std::use_facet<Facet>(stdloc);
   54|   723k|}

_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
   45|  5.67M|{
   46|  5.67M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 5.67M, False: 0]
  ------------------
   47|  5.67M|        auto it = read_while_classic_space(range);
   48|  5.67M|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|  5.67M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  5.67M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.68k, False: 5.67M]
  |  |  ------------------
  ------------------
   50|  3.68k|            return unexpected(e);
   51|  3.68k|        }
   52|       |
   53|  5.67M|        return it;
   54|  5.67M|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|  5.67M|}
_ZNK3scn2v24impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
  125|  5.93M|    {
  126|  5.93M|        return true;
  127|  5.93M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
   45|   235k|{
   46|   235k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 235k, False: 0]
  ------------------
   47|   235k|        auto it = read_while_classic_space(range);
   48|   235k|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|   235k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   235k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 235k]
  |  |  ------------------
  ------------------
   50|      0|            return unexpected(e);
   51|      0|        }
   52|       |
   53|   235k|        return it;
   54|   235k|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|   235k|}
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
  130|  4.26M|    {
  131|  4.26M|        reader_error_handler eh{};
  132|  4.26M|        get_derived().check_specs_impl(specs, eh);
  133|  4.26M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|  4.26M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.26M]
  |  |  ------------------
  ------------------
  134|      0|            return {scan_error::invalid_format_string, eh.m_msg};
  135|      0|        }
  136|  4.26M|        return {};
  137|  4.26M|    }
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
  141|  4.26M|    {
  142|  4.26M|        return static_cast<Derived&>(*this);
  143|  4.26M|    }
_ZNK3scn2v24impl20reader_error_handlercvbEv:
   34|  8.71M|    {
   35|  8.71M|        return m_msg == nullptr;
   36|  8.71M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
   45|  5.39M|{
   46|  5.39M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 5.39M, False: 0]
  ------------------
   47|  5.39M|        auto it = read_while_classic_space(range);
   48|  5.39M|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|  5.39M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  5.39M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.98k, False: 5.38M]
  |  |  ------------------
  ------------------
   50|  6.98k|            return unexpected(e);
   51|  6.98k|        }
   52|       |
   53|  5.38M|        return it;
   54|  5.39M|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|  5.39M|}
_ZNK3scn2v24impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
  125|  6.09M|    {
  126|  6.09M|        return true;
  127|  6.09M|    }
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
  130|  4.45M|    {
  131|  4.45M|        reader_error_handler eh{};
  132|  4.45M|        get_derived().check_specs_impl(specs, eh);
  133|  4.45M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|  4.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.45M]
  |  |  ------------------
  ------------------
  134|      0|            return {scan_error::invalid_format_string, eh.m_msg};
  135|      0|        }
  136|  4.45M|        return {};
  137|  4.45M|    }
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
  141|  4.45M|    {
  142|  4.45M|        return static_cast<Derived&>(*this);
  143|  4.45M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
   45|   678k|{
   46|   678k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 678k, False: 0]
  ------------------
   47|   678k|        auto it = read_while_classic_space(range);
   48|   678k|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|   678k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   678k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 678k]
  |  |  ------------------
  ------------------
   50|      0|            return unexpected(e);
   51|      0|        }
   52|       |
   53|   678k|        return it;
   54|   678k|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|   678k|}

_ZN3scn2v24impl19parse_integer_valueIcaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   528k|{
  218|   528k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   528k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   528k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   528k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   528k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   528k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   528k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   528k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   528k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   528k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   528k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   528k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   528k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 15.9k, False: 512k]
  ------------------
  224|  15.9k|        SCN_UNLIKELY_ATTR
  225|  15.9k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  15.9k|                                     "Invalid integer value");
  227|  15.9k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   512k|    auto start = source.data();
  231|   512k|    const auto end = source.data() + source.size();
  232|   512k|    {
  233|   947k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 929k, False: 17.6k]
  ------------------
  234|   929k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 495k, False: 434k]
  ------------------
  235|   495k|                break;
  236|   495k|            }
  237|   929k|        }
  238|   512k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 148k, False: 363k]
  |  |  |  Branch (153:45): [True: 17.6k, False: 495k]
  |  |  |  Branch (153:45): [True: 131k, False: 363k]
  |  |  ------------------
  ------------------
  239|   148k|            value = 0;
  240|   148k|            return ranges::next(source.begin(),
  241|   148k|                                ranges::distance(source.data(), start));
  242|   148k|        }
  243|   512k|    }
  244|       |
  245|   363k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   363k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 271k, False: 92.2k]
  ------------------
  247|   271k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   271k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   271k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   271k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   271k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.19k, False: 264k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.19k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.19k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.19k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.19k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.19k|    }                                                  \
  |  |  |  |   70|   271k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   264k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   264k|                             detail::make_string_view_from_pointers(start, end),
  249|   264k|                             value, sign == sign_type::minus_sign));
  250|   264k|            return ranges::next(source.begin(),
  251|   264k|                                ranges::distance(source.data(), ptr));
  252|   271k|        }
  253|   363k|    }
  254|       |
  255|  92.2k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|  92.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  92.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  92.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  92.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.00k, False: 86.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.00k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.00k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.00k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.00k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.00k|    }                                                  \
  |  |  |  |   70|  92.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  86.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|  86.2k|                     detail::make_string_view_from_pointers(start, end), value,
  257|  86.2k|                     base, sign == sign_type::minus_sign));
  258|  86.2k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|  92.2k|}
_ZN3scn2v24impl19parse_integer_valueIwaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   522k|{
  218|   522k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   522k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   522k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   522k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   522k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   522k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   522k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   522k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   522k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   522k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   522k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   522k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   522k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 76.9k, False: 445k]
  ------------------
  224|  76.9k|        SCN_UNLIKELY_ATTR
  225|  76.9k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  76.9k|                                     "Invalid integer value");
  227|  76.9k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   445k|    auto start = source.data();
  231|   445k|    const auto end = source.data() + source.size();
  232|   445k|    {
  233|   820k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 804k, False: 15.8k]
  ------------------
  234|   804k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 429k, False: 375k]
  ------------------
  235|   429k|                break;
  236|   429k|            }
  237|   804k|        }
  238|   445k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   874k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 130k, False: 314k]
  |  |  |  Branch (153:45): [True: 15.8k, False: 429k]
  |  |  |  Branch (153:45): [True: 114k, False: 314k]
  |  |  ------------------
  ------------------
  239|   130k|            value = 0;
  240|   130k|            return ranges::next(source.begin(),
  241|   130k|                                ranges::distance(source.data(), start));
  242|   130k|        }
  243|   445k|    }
  244|       |
  245|   314k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   314k|        if (base == 10) {
  247|   314k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   314k|                             detail::make_string_view_from_pointers(start, end),
  249|   314k|                             value, sign == sign_type::minus_sign));
  250|   314k|            return ranges::next(source.begin(),
  251|   314k|                                ranges::distance(source.data(), ptr));
  252|   314k|        }
  253|   314k|    }
  254|       |
  255|   314k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   314k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   314k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   314k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   314k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 24.1k, False: 290k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  24.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  24.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  24.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  24.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  24.1k|    }                                                  \
  |  |  |  |   70|   314k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   290k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   290k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   290k|                     base, sign == sign_type::minus_sign));
  258|   290k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   314k|}
_ZN3scn2v24impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   827k|{
  218|   827k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   827k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   827k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   827k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   827k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   827k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   827k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   827k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   827k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   827k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   827k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   827k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   827k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 21.0k, False: 806k]
  ------------------
  224|  21.0k|        SCN_UNLIKELY_ATTR
  225|  21.0k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  21.0k|                                     "Invalid integer value");
  227|  21.0k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   806k|    auto start = source.data();
  231|   806k|    const auto end = source.data() + source.size();
  232|   806k|    {
  233|  1.53M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.50M, False: 25.9k]
  ------------------
  234|  1.50M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 780k, False: 725k]
  ------------------
  235|   780k|                break;
  236|   780k|            }
  237|  1.50M|        }
  238|   806k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.58M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 239k, False: 567k]
  |  |  |  Branch (153:45): [True: 25.9k, False: 780k]
  |  |  |  Branch (153:45): [True: 213k, False: 567k]
  |  |  ------------------
  ------------------
  239|   239k|            value = 0;
  240|   239k|            return ranges::next(source.begin(),
  241|   239k|                                ranges::distance(source.data(), start));
  242|   239k|        }
  243|   806k|    }
  244|       |
  245|   567k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   567k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 383k, False: 184k]
  ------------------
  247|   383k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   383k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   383k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   383k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   383k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.26k, False: 380k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.26k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.26k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.26k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.26k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.26k|    }                                                  \
  |  |  |  |   70|   383k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   380k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   380k|                             detail::make_string_view_from_pointers(start, end),
  249|   380k|                             value, sign == sign_type::minus_sign));
  250|   380k|            return ranges::next(source.begin(),
  251|   380k|                                ranges::distance(source.data(), ptr));
  252|   383k|        }
  253|   567k|    }
  254|       |
  255|   184k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   184k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   184k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   184k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   184k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.99k, False: 182k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.99k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.99k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.99k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.99k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.99k|    }                                                  \
  |  |  |  |   70|   184k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   182k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   182k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   182k|                     base, sign == sign_type::minus_sign));
  258|   182k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   184k|}
_ZN3scn2v24impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   779k|{
  218|   779k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   779k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   779k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   779k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   779k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   779k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   779k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   779k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   779k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   779k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   779k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   779k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   779k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 80.4k, False: 698k]
  ------------------
  224|  80.4k|        SCN_UNLIKELY_ATTR
  225|  80.4k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  80.4k|                                     "Invalid integer value");
  227|  80.4k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   698k|    auto start = source.data();
  231|   698k|    const auto end = source.data() + source.size();
  232|   698k|    {
  233|  1.33M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.31M, False: 22.7k]
  ------------------
  234|  1.31M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 675k, False: 635k]
  ------------------
  235|   675k|                break;
  236|   675k|            }
  237|  1.31M|        }
  238|   698k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.37M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 209k, False: 489k]
  |  |  |  Branch (153:45): [True: 22.7k, False: 675k]
  |  |  |  Branch (153:45): [True: 186k, False: 489k]
  |  |  ------------------
  ------------------
  239|   209k|            value = 0;
  240|   209k|            return ranges::next(source.begin(),
  241|   209k|                                ranges::distance(source.data(), start));
  242|   209k|        }
  243|   698k|    }
  244|       |
  245|   489k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   489k|        if (base == 10) {
  247|   489k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   489k|                             detail::make_string_view_from_pointers(start, end),
  249|   489k|                             value, sign == sign_type::minus_sign));
  250|   489k|            return ranges::next(source.begin(),
  251|   489k|                                ranges::distance(source.data(), ptr));
  252|   489k|        }
  253|   489k|    }
  254|       |
  255|   489k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   489k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   489k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   489k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   489k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.11k, False: 486k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.11k|    }                                                  \
  |  |  |  |   70|   489k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   486k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   486k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   486k|                     base, sign == sign_type::minus_sign));
  258|   486k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   489k|}
_ZN3scn2v24impl19parse_integer_valueIcxEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   874k|{
  218|   874k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   874k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   874k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   874k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   874k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   874k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   874k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   874k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   874k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   874k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   874k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   874k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   874k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 22.4k, False: 851k]
  ------------------
  224|  22.4k|        SCN_UNLIKELY_ATTR
  225|  22.4k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  22.4k|                                     "Invalid integer value");
  227|  22.4k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   851k|    auto start = source.data();
  231|   851k|    const auto end = source.data() + source.size();
  232|   851k|    {
  233|  1.59M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.56M, False: 26.1k]
  ------------------
  234|  1.56M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 825k, False: 739k]
  ------------------
  235|   825k|                break;
  236|   825k|            }
  237|  1.56M|        }
  238|   851k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.67M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 243k, False: 608k]
  |  |  |  Branch (153:45): [True: 26.1k, False: 825k]
  |  |  |  Branch (153:45): [True: 217k, False: 608k]
  |  |  ------------------
  ------------------
  239|   243k|            value = 0;
  240|   243k|            return ranges::next(source.begin(),
  241|   243k|                                ranges::distance(source.data(), start));
  242|   243k|        }
  243|   851k|    }
  244|       |
  245|   608k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   608k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 411k, False: 196k]
  ------------------
  247|   411k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   411k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   411k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   411k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   411k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.05k, False: 410k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.05k|    }                                                  \
  |  |  |  |   70|   411k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   410k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   410k|                             detail::make_string_view_from_pointers(start, end),
  249|   410k|                             value, sign == sign_type::minus_sign));
  250|   410k|            return ranges::next(source.begin(),
  251|   410k|                                ranges::distance(source.data(), ptr));
  252|   411k|        }
  253|   608k|    }
  254|       |
  255|   196k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   196k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   196k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   196k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   196k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 867, False: 195k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    867|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    867|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    867|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    867|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    867|    }                                                  \
  |  |  |  |   70|   196k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   195k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   195k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   195k|                     base, sign == sign_type::minus_sign));
  258|   195k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   196k|}
_ZN3scn2v24impl19parse_integer_valueIwxEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   819k|{
  218|   819k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   819k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   819k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   819k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   819k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   819k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   819k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   819k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   819k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   819k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   819k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   819k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   819k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 81.3k, False: 738k]
  ------------------
  224|  81.3k|        SCN_UNLIKELY_ATTR
  225|  81.3k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  81.3k|                                     "Invalid integer value");
  227|  81.3k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   738k|    auto start = source.data();
  231|   738k|    const auto end = source.data() + source.size();
  232|   738k|    {
  233|  1.38M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.36M, False: 22.9k]
  ------------------
  234|  1.36M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 715k, False: 645k]
  ------------------
  235|   715k|                break;
  236|   715k|            }
  237|  1.36M|        }
  238|   738k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 212k, False: 526k]
  |  |  |  Branch (153:45): [True: 22.9k, False: 715k]
  |  |  |  Branch (153:45): [True: 189k, False: 526k]
  |  |  ------------------
  ------------------
  239|   212k|            value = 0;
  240|   212k|            return ranges::next(source.begin(),
  241|   212k|                                ranges::distance(source.data(), start));
  242|   212k|        }
  243|   738k|    }
  244|       |
  245|   526k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   526k|        if (base == 10) {
  247|   526k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   526k|                             detail::make_string_view_from_pointers(start, end),
  249|   526k|                             value, sign == sign_type::minus_sign));
  250|   526k|            return ranges::next(source.begin(),
  251|   526k|                                ranges::distance(source.data(), ptr));
  252|   526k|        }
  253|   526k|    }
  254|       |
  255|   526k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   526k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   526k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   526k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   526k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.46k, False: 524k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.46k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.46k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.46k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.46k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.46k|    }                                                  \
  |  |  |  |   70|   526k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   524k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   524k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   524k|                     base, sign == sign_type::minus_sign));
  258|   524k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   526k|}
_ZN3scn2v24impl19parse_integer_valueIchEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   528k|{
  218|   528k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   528k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   528k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   528k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   528k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   528k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   528k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   528k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   528k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   528k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   528k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   528k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   528k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 13.2k, False: 515k]
  ------------------
  224|  13.2k|        SCN_UNLIKELY_ATTR
  225|  13.2k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  13.2k|                                     "Invalid integer value");
  227|  13.2k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   515k|    auto start = source.data();
  231|   515k|    const auto end = source.data() + source.size();
  232|   515k|    {
  233|  1.03M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.01M, False: 20.9k]
  ------------------
  234|  1.01M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 494k, False: 520k]
  ------------------
  235|   494k|                break;
  236|   494k|            }
  237|  1.01M|        }
  238|   515k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 169k, False: 345k]
  |  |  |  Branch (153:45): [True: 20.9k, False: 494k]
  |  |  |  Branch (153:45): [True: 148k, False: 345k]
  |  |  ------------------
  ------------------
  239|   169k|            value = 0;
  240|   169k|            return ranges::next(source.begin(),
  241|   169k|                                ranges::distance(source.data(), start));
  242|   169k|        }
  243|   515k|    }
  244|       |
  245|   345k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   345k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 238k, False: 107k]
  ------------------
  247|   238k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   238k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   238k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   238k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   238k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.51k, False: 234k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.51k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.51k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.51k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.51k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.51k|    }                                                  \
  |  |  |  |   70|   238k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   234k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   234k|                             detail::make_string_view_from_pointers(start, end),
  249|   234k|                             value, sign == sign_type::minus_sign));
  250|   234k|            return ranges::next(source.begin(),
  251|   234k|                                ranges::distance(source.data(), ptr));
  252|   238k|        }
  253|   345k|    }
  254|       |
  255|   107k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   107k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   107k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   107k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.94k, False: 104k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.94k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.94k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.94k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.94k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.94k|    }                                                  \
  |  |  |  |   70|   107k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   104k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   104k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   104k|                     base, sign == sign_type::minus_sign));
  258|   104k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   107k|}
_ZN3scn2v24impl19parse_integer_valueIwhEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   540k|{
  218|   540k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   540k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   540k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   540k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   540k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   540k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   540k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   540k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   540k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   540k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   540k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   540k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   540k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 74.5k, False: 466k]
  ------------------
  224|  74.5k|        SCN_UNLIKELY_ATTR
  225|  74.5k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  74.5k|                                     "Invalid integer value");
  227|  74.5k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   466k|    auto start = source.data();
  231|   466k|    const auto end = source.data() + source.size();
  232|   466k|    {
  233|   918k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 899k, False: 18.7k]
  ------------------
  234|   899k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 447k, False: 451k]
  ------------------
  235|   447k|                break;
  236|   447k|            }
  237|   899k|        }
  238|   466k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   913k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 149k, False: 316k]
  |  |  |  Branch (153:45): [True: 18.7k, False: 447k]
  |  |  |  Branch (153:45): [True: 130k, False: 316k]
  |  |  ------------------
  ------------------
  239|   149k|            value = 0;
  240|   149k|            return ranges::next(source.begin(),
  241|   149k|                                ranges::distance(source.data(), start));
  242|   149k|        }
  243|   466k|    }
  244|       |
  245|   316k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   316k|        if (base == 10) {
  247|   316k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   316k|                             detail::make_string_view_from_pointers(start, end),
  249|   316k|                             value, sign == sign_type::minus_sign));
  250|   316k|            return ranges::next(source.begin(),
  251|   316k|                                ranges::distance(source.data(), ptr));
  252|   316k|        }
  253|   316k|    }
  254|       |
  255|   316k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   316k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   316k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   316k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   316k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 19.3k, False: 297k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  19.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  19.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  19.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  19.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  19.3k|    }                                                  \
  |  |  |  |   70|   316k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   297k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   297k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   297k|                     base, sign == sign_type::minus_sign));
  258|   297k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   316k|}
_ZN3scn2v24impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   672k|{
  218|   672k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   672k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   672k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   672k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   672k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   672k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   672k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   672k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   672k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   672k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   672k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   672k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   672k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 14.9k, False: 657k]
  ------------------
  224|  14.9k|        SCN_UNLIKELY_ATTR
  225|  14.9k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  14.9k|                                     "Invalid integer value");
  227|  14.9k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   657k|    auto start = source.data();
  231|   657k|    const auto end = source.data() + source.size();
  232|   657k|    {
  233|  1.32M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.29M, False: 22.9k]
  ------------------
  234|  1.29M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 634k, False: 662k]
  ------------------
  235|   634k|                break;
  236|   634k|            }
  237|  1.29M|        }
  238|   657k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 212k, False: 445k]
  |  |  |  Branch (153:45): [True: 22.9k, False: 634k]
  |  |  |  Branch (153:45): [True: 189k, False: 445k]
  |  |  ------------------
  ------------------
  239|   212k|            value = 0;
  240|   212k|            return ranges::next(source.begin(),
  241|   212k|                                ranges::distance(source.data(), start));
  242|   212k|        }
  243|   657k|    }
  244|       |
  245|   445k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   445k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 300k, False: 145k]
  ------------------
  247|   300k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   300k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   300k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   300k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   300k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.02k, False: 299k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.02k|    }                                                  \
  |  |  |  |   70|   300k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   299k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   299k|                             detail::make_string_view_from_pointers(start, end),
  249|   299k|                             value, sign == sign_type::minus_sign));
  250|   299k|            return ranges::next(source.begin(),
  251|   299k|                                ranges::distance(source.data(), ptr));
  252|   300k|        }
  253|   445k|    }
  254|       |
  255|   145k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   145k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   145k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   145k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   145k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 947, False: 144k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    947|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    947|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    947|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    947|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    947|    }                                                  \
  |  |  |  |   70|   145k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   144k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   144k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   144k|                     base, sign == sign_type::minus_sign));
  258|   144k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   145k|}
_ZN3scn2v24impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   671k|{
  218|   671k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   671k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   671k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   671k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   671k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   671k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   671k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   671k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   671k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   671k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   671k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   671k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   671k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 76.0k, False: 595k]
  ------------------
  224|  76.0k|        SCN_UNLIKELY_ATTR
  225|  76.0k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  76.0k|                                     "Invalid integer value");
  227|  76.0k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   595k|    auto start = source.data();
  231|   595k|    const auto end = source.data() + source.size();
  232|   595k|    {
  233|  1.18M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.15M, False: 20.6k]
  ------------------
  234|  1.15M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 575k, False: 584k]
  ------------------
  235|   575k|                break;
  236|   575k|            }
  237|  1.15M|        }
  238|   595k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 189k, False: 406k]
  |  |  |  Branch (153:45): [True: 20.6k, False: 575k]
  |  |  |  Branch (153:45): [True: 168k, False: 406k]
  |  |  ------------------
  ------------------
  239|   189k|            value = 0;
  240|   189k|            return ranges::next(source.begin(),
  241|   189k|                                ranges::distance(source.data(), start));
  242|   189k|        }
  243|   595k|    }
  244|       |
  245|   406k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   406k|        if (base == 10) {
  247|   406k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   406k|                             detail::make_string_view_from_pointers(start, end),
  249|   406k|                             value, sign == sign_type::minus_sign));
  250|   406k|            return ranges::next(source.begin(),
  251|   406k|                                ranges::distance(source.data(), ptr));
  252|   406k|        }
  253|   406k|    }
  254|       |
  255|   406k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   406k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   406k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   406k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   406k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.53k, False: 404k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.53k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.53k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.53k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.53k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.53k|    }                                                  \
  |  |  |  |   70|   406k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   404k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   404k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   404k|                     base, sign == sign_type::minus_sign));
  258|   404k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   406k|}
_ZN3scn2v24impl19parse_integer_valueIcyEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   701k|{
  218|   701k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   701k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   701k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   701k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   701k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   701k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   701k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   701k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   701k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   701k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   701k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   701k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   701k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 15.2k, False: 686k]
  ------------------
  224|  15.2k|        SCN_UNLIKELY_ATTR
  225|  15.2k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  15.2k|                                     "Invalid integer value");
  227|  15.2k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   686k|    auto start = source.data();
  231|   686k|    const auto end = source.data() + source.size();
  232|   686k|    {
  233|  1.35M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.33M, False: 23.1k]
  ------------------
  234|  1.33M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 663k, False: 667k]
  ------------------
  235|   663k|                break;
  236|   663k|            }
  237|  1.33M|        }
  238|   686k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.34M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 214k, False: 472k]
  |  |  |  Branch (153:45): [True: 23.1k, False: 663k]
  |  |  |  Branch (153:45): [True: 191k, False: 472k]
  |  |  ------------------
  ------------------
  239|   214k|            value = 0;
  240|   214k|            return ranges::next(source.begin(),
  241|   214k|                                ranges::distance(source.data(), start));
  242|   214k|        }
  243|   686k|    }
  244|       |
  245|   472k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   472k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 320k, False: 151k]
  ------------------
  247|   320k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   320k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   320k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   320k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   320k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 453, False: 319k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    453|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    453|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    453|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    453|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    453|    }                                                  \
  |  |  |  |   70|   320k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   319k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   319k|                             detail::make_string_view_from_pointers(start, end),
  249|   319k|                             value, sign == sign_type::minus_sign));
  250|   319k|            return ranges::next(source.begin(),
  251|   319k|                                ranges::distance(source.data(), ptr));
  252|   320k|        }
  253|   472k|    }
  254|       |
  255|   151k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   151k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   151k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   151k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 360, False: 151k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    360|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    360|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    360|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    360|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    360|    }                                                  \
  |  |  |  |   70|   151k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   151k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   151k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   151k|                     base, sign == sign_type::minus_sign));
  258|   151k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   151k|}
_ZN3scn2v24impl19parse_integer_valueIwyEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   699k|{
  218|   699k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   699k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   699k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   699k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   699k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   699k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   699k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   699k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   699k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   699k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   699k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   699k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   699k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 76.3k, False: 623k]
  ------------------
  224|  76.3k|        SCN_UNLIKELY_ATTR
  225|  76.3k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  76.3k|                                     "Invalid integer value");
  227|  76.3k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   623k|    auto start = source.data();
  231|   623k|    const auto end = source.data() + source.size();
  232|   623k|    {
  233|  1.21M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.19M, False: 20.8k]
  ------------------
  234|  1.19M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 602k, False: 589k]
  ------------------
  235|   602k|                break;
  236|   602k|            }
  237|  1.19M|        }
  238|   623k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 191k, False: 431k]
  |  |  |  Branch (153:45): [True: 20.8k, False: 602k]
  |  |  |  Branch (153:45): [True: 170k, False: 431k]
  |  |  ------------------
  ------------------
  239|   191k|            value = 0;
  240|   191k|            return ranges::next(source.begin(),
  241|   191k|                                ranges::distance(source.data(), start));
  242|   191k|        }
  243|   623k|    }
  244|       |
  245|   431k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   431k|        if (base == 10) {
  247|   431k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   431k|                             detail::make_string_view_from_pointers(start, end),
  249|   431k|                             value, sign == sign_type::minus_sign));
  250|   431k|            return ranges::next(source.begin(),
  251|   431k|                                ranges::distance(source.data(), ptr));
  252|   431k|        }
  253|   431k|    }
  254|       |
  255|   431k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   431k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   431k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   431k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   431k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 719, False: 431k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    719|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    719|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    719|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    719|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    719|    }                                                  \
  |  |  |  |   70|   431k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   431k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   431k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   431k|                     base, sign == sign_type::minus_sign));
  258|   431k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   431k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIaEEbmmib:
  125|   678k|{
  126|   678k|    auto max_digits = maxdigits_u64(base);
  127|   678k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 2.23k, False: 676k]
  ------------------
  128|  2.23k|        return true;
  129|  2.23k|    }
  130|   676k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 721, False: 675k]
  |  Branch (130:39): [True: 178, False: 543]
  ------------------
  131|    178|        return true;
  132|    178|    }
  133|   676k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   676k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 34.9k, False: 641k]
  ------------------
  135|   676k|                      static_cast<uint64_t>(is_negative)) {
  136|  34.9k|            SCN_UNLIKELY_ATTR
  137|  34.9k|            return true;
  138|  34.9k|        }
  139|   676k|    }
  140|       |
  141|   641k|    return false;
  142|   676k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113maxdigits_u64Ei:
   95|  5.28M|{
   96|  5.28M|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  |  242|  5.28M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.28M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   97|      0|    return maxdigits_u64_table[static_cast<size_t>(base - 2)];
   98|  5.28M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112min_safe_u64Ei:
  115|  4.05k|{
  116|  4.05k|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  |  242|  4.05k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.05k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  117|      0|    return min_safe_u64_table[static_cast<size_t>(base - 2)];
  118|  4.05k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIaEET_mb:
  146|   641k|{
  147|   641k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 87.0k, False: 554k]
  ------------------
  148|  87.0k|        SCN_MSVC_PUSH
  149|  87.0k|        SCN_MSVC_IGNORE(4146)
  150|  87.0k|        return static_cast<T>(
  151|  87.0k|            -std::numeric_limits<T>::max() -
  152|  87.0k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|  87.0k|        SCN_MSVC_POP
  154|  87.0k|    }
  155|       |
  156|   554k|    return static_cast<T>(u64val);
  157|   641k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIiEEbmmib:
  125|  1.05M|{
  126|  1.05M|    auto max_digits = maxdigits_u64(base);
  127|  1.05M|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 2.56k, False: 1.05M]
  ------------------
  128|  2.56k|        return true;
  129|  2.56k|    }
  130|  1.05M|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 771, False: 1.05M]
  |  Branch (130:39): [True: 178, False: 593]
  ------------------
  131|    178|        return true;
  132|    178|    }
  133|  1.05M|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|  1.05M|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 4.63k, False: 1.04M]
  ------------------
  135|  1.05M|                      static_cast<uint64_t>(is_negative)) {
  136|  4.63k|            SCN_UNLIKELY_ATTR
  137|  4.63k|            return true;
  138|  4.63k|        }
  139|  1.05M|    }
  140|       |
  141|  1.04M|    return false;
  142|  1.05M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIiEET_mb:
  146|  1.04M|{
  147|  1.04M|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 117k, False: 931k]
  ------------------
  148|   117k|        SCN_MSVC_PUSH
  149|   117k|        SCN_MSVC_IGNORE(4146)
  150|   117k|        return static_cast<T>(
  151|   117k|            -std::numeric_limits<T>::max() -
  152|   117k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|   117k|        SCN_MSVC_POP
  154|   117k|    }
  155|       |
  156|   931k|    return static_cast<T>(u64val);
  157|  1.04M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIxEEbmmib:
  125|  1.13M|{
  126|  1.13M|    auto max_digits = maxdigits_u64(base);
  127|  1.13M|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 2.76k, False: 1.13M]
  ------------------
  128|  2.76k|        return true;
  129|  2.76k|    }
  130|  1.13M|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 1.00k, False: 1.13M]
  |  Branch (130:39): [True: 236, False: 768]
  ------------------
  131|    236|        return true;
  132|    236|    }
  133|  1.13M|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|  1.13M|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 383, False: 1.13M]
  ------------------
  135|  1.13M|                      static_cast<uint64_t>(is_negative)) {
  136|    383|            SCN_UNLIKELY_ATTR
  137|    383|            return true;
  138|    383|        }
  139|  1.13M|    }
  140|       |
  141|  1.13M|    return false;
  142|  1.13M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIxEET_mb:
  146|  1.13M|{
  147|  1.13M|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 120k, False: 1.01M]
  ------------------
  148|   120k|        SCN_MSVC_PUSH
  149|   120k|        SCN_MSVC_IGNORE(4146)
  150|   120k|        return static_cast<T>(
  151|   120k|            -std::numeric_limits<T>::max() -
  152|   120k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|   120k|        SCN_MSVC_POP
  154|   120k|    }
  155|       |
  156|  1.01M|    return static_cast<T>(u64val);
  157|  1.13M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIhEEbmmib:
  125|   662k|{
  126|   662k|    auto max_digits = maxdigits_u64(base);
  127|   662k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 1.27k, False: 660k]
  ------------------
  128|  1.27k|        return true;
  129|  1.27k|    }
  130|   660k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 456, False: 660k]
  |  Branch (130:39): [True: 148, False: 308]
  ------------------
  131|    148|        return true;
  132|    148|    }
  133|   660k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   660k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 24.4k, False: 636k]
  ------------------
  135|   660k|                      static_cast<uint64_t>(is_negative)) {
  136|  24.4k|            SCN_UNLIKELY_ATTR
  137|  24.4k|            return true;
  138|  24.4k|        }
  139|   660k|    }
  140|       |
  141|   636k|    return false;
  142|   660k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIhEET_mb:
  146|   636k|{
  147|   636k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 0, False: 636k]
  ------------------
  148|      0|        SCN_MSVC_PUSH
  149|      0|        SCN_MSVC_IGNORE(4146)
  150|      0|        return static_cast<T>(
  151|      0|            -std::numeric_limits<T>::max() -
  152|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|      0|        SCN_MSVC_POP
  154|      0|    }
  155|       |
  156|   636k|    return static_cast<T>(u64val);
  157|   636k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIjEEbmmib:
  125|   852k|{
  126|   852k|    auto max_digits = maxdigits_u64(base);
  127|   852k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 1.28k, False: 850k]
  ------------------
  128|  1.28k|        return true;
  129|  1.28k|    }
  130|   850k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 474, False: 850k]
  |  Branch (130:39): [True: 148, False: 326]
  ------------------
  131|    148|        return true;
  132|    148|    }
  133|   850k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   850k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 2.06k, False: 848k]
  ------------------
  135|   850k|                      static_cast<uint64_t>(is_negative)) {
  136|  2.06k|            SCN_UNLIKELY_ATTR
  137|  2.06k|            return true;
  138|  2.06k|        }
  139|   850k|    }
  140|       |
  141|   848k|    return false;
  142|   850k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIjEET_mb:
  146|   848k|{
  147|   848k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 0, False: 848k]
  ------------------
  148|      0|        SCN_MSVC_PUSH
  149|      0|        SCN_MSVC_IGNORE(4146)
  150|      0|        return static_cast<T>(
  151|      0|            -std::numeric_limits<T>::max() -
  152|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|      0|        SCN_MSVC_POP
  154|      0|    }
  155|       |
  156|   848k|    return static_cast<T>(u64val);
  157|   848k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIyEEbmmib:
  125|   903k|{
  126|   903k|    auto max_digits = maxdigits_u64(base);
  127|   903k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 1.37k, False: 902k]
  ------------------
  128|  1.37k|        return true;
  129|  1.37k|    }
  130|   902k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 630, False: 901k]
  |  Branch (130:39): [True: 160, False: 470]
  ------------------
  131|    160|        return true;
  132|    160|    }
  133|   902k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   902k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 0, False: 902k]
  ------------------
  135|   902k|                      static_cast<uint64_t>(is_negative)) {
  136|      0|            SCN_UNLIKELY_ATTR
  137|      0|            return true;
  138|      0|        }
  139|   902k|    }
  140|       |
  141|   902k|    return false;
  142|   902k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIyEET_mb:
  146|   902k|{
  147|   902k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 0, False: 902k]
  ------------------
  148|      0|        SCN_MSVC_PUSH
  149|      0|        SCN_MSVC_IGNORE(4146)
  150|      0|        return static_cast<T>(
  151|      0|            -std::numeric_limits<T>::max() -
  152|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|      0|        SCN_MSVC_POP
  154|      0|    }
  155|       |
  156|   902k|    return static_cast<T>(u64val);
  157|   902k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121get_eight_digits_wordEPKc:
   33|  1.59M|{
   34|  1.59M|    uint64_t val{};
   35|  1.59M|    std::memcpy(&val, input, sizeof(uint64_t));
   36|  1.59M|    if constexpr (SCN_IS_BIG_ENDIAN) {
  ------------------
  |  |  538|  1.59M|#define SCN_IS_BIG_ENDIAN 0
  |  |  ------------------
  |  |  |  Branch (538:27): [Folded - Ignored]
  |  |  ------------------
  ------------------
   37|      0|        val = byteswap(val);
   38|      0|    }
   39|  1.59M|    return val;
   40|  1.59M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_140parse_eight_decimal_digits_unrolled_fastEm:
   43|  65.0k|{
   44|  65.0k|    constexpr uint64_t mask = 0x000000FF000000FF;
   45|  65.0k|    constexpr uint64_t mul1 = 0x000F424000000064;  // 100 + (1000000ULL << 32)
   46|  65.0k|    constexpr uint64_t mul2 = 0x0000271000000001;  // 1 + (10000ULL << 32)
   47|  65.0k|    word -= 0x3030303030303030;
   48|  65.0k|    word = (word * 10) + (word >> 8);  // val = (val * 2561) >> 8;
   49|  65.0k|    word = (((word & mask) * mul1) + (((word >> 16) & mask) * mul2)) >> 32;
   50|  65.0k|    return static_cast<uint32_t>(word);
   51|  65.0k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_141is_word_made_of_eight_decimal_digits_fastEm:
   54|  1.53M|{
   55|  1.53M|    return !((((word + 0x4646464646464646) | (word - 0x3030303030303030)) &
   56|  1.53M|              0x8080808080808080));
   57|  1.53M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIaEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   271k|{
  164|   271k|    uint64_t u64val{};
  165|   271k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   271k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   271k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   271k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   271k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 7.19k, False: 264k]
  |  |  ------------------
  ------------------
  170|   271k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  7.19k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  7.19k|                                     "Integer overflow");
  173|  7.19k|    }
  174|       |
  175|   264k|    val = store_result<T>(u64val, is_negative);
  176|   264k|    return ptr;
  177|   271k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_131parse_decimal_integer_fast_implEPKcS4_Rm:
   75|  1.92M|{
   76|  1.92M|    loop_parse_if_eight_decimal_digits(begin, end, val);
   77|       |
   78|  4.81M|    while (begin != end) {
  ------------------
  |  Branch (78:12): [True: 4.38M, False: 431k]
  ------------------
   79|  4.38M|        const auto digit = char_to_int(*begin);
   80|  4.38M|        if (digit >= 10) {
  ------------------
  |  Branch (80:13): [True: 1.49M, False: 2.88M]
  ------------------
   81|  1.49M|            break;
   82|  1.49M|        }
   83|  2.88M|        val = 10ull * val + static_cast<uint64_t>(digit);
   84|  2.88M|        ++begin;
   85|  2.88M|    }
   86|       |
   87|  1.92M|    return begin;
   88|  1.92M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_134loop_parse_if_eight_decimal_digitsERPKcS4_Rm:
   62|  1.92M|{
   63|  1.92M|    while (
   64|  1.99M|        std::distance(p, end) >= 8 &&
  ------------------
  |  Branch (64:9): [True: 1.53M, False: 459k]
  ------------------
   65|  1.99M|        is_word_made_of_eight_decimal_digits_fast(get_eight_digits_word(p))) {
  ------------------
  |  Branch (65:9): [True: 65.0k, False: 1.46M]
  ------------------
   66|  65.0k|        val = val * 100'000'000 + parse_eight_decimal_digits_unrolled_fast(
   67|  65.0k|                                      get_eight_digits_word(p));
   68|  65.0k|        p += 8;
   69|  65.0k|    }
   70|  1.92M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIcaEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|  92.2k|{
  185|  92.2k|    uint64_t u64val{};
  186|  92.2k|    const CharT* begin = input.data();
  187|  92.2k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   289k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 269k, False: 19.9k]
  ------------------
  190|   269k|        const auto digit = char_to_int(*begin);
  191|   269k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 72.2k, False: 197k]
  ------------------
  192|  72.2k|            break;
  193|  72.2k|        }
  194|   197k|        u64val =
  195|   197k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   197k|        ++begin;
  197|   197k|    }
  198|       |
  199|  92.2k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|  92.2k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|  92.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.00k, False: 86.2k]
  |  |  ------------------
  ------------------
  201|  92.2k|                                               is_negative))) {
  202|  6.00k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  6.00k|                                     "Integer overflow");
  204|  6.00k|    }
  205|       |
  206|  86.2k|    val = store_result<T>(u64val, is_negative);
  207|  86.2k|    return begin;
  208|  92.2k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwaEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   314k|{
  185|   314k|    uint64_t u64val{};
  186|   314k|    const CharT* begin = input.data();
  187|   314k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   887k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 806k, False: 81.3k]
  ------------------
  190|   806k|        const auto digit = char_to_int(*begin);
  191|   806k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 233k, False: 572k]
  ------------------
  192|   233k|            break;
  193|   233k|        }
  194|   572k|        u64val =
  195|   572k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   572k|        ++begin;
  197|   572k|    }
  198|       |
  199|   314k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   314k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   314k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 24.1k, False: 290k]
  |  |  ------------------
  ------------------
  201|   314k|                                               is_negative))) {
  202|  24.1k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  24.1k|                                     "Integer overflow");
  204|  24.1k|    }
  205|       |
  206|   290k|    val = store_result<T>(u64val, is_negative);
  207|   290k|    return begin;
  208|   314k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIiEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   383k|{
  164|   383k|    uint64_t u64val{};
  165|   383k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   383k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   383k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   383k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   383k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.26k, False: 380k]
  |  |  ------------------
  ------------------
  170|   383k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  2.26k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  2.26k|                                     "Integer overflow");
  173|  2.26k|    }
  174|       |
  175|   380k|    val = store_result<T>(u64val, is_negative);
  176|   380k|    return ptr;
  177|   383k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIciEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   184k|{
  185|   184k|    uint64_t u64val{};
  186|   184k|    const CharT* begin = input.data();
  187|   184k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   536k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 512k, False: 24.5k]
  ------------------
  190|   512k|        const auto digit = char_to_int(*begin);
  191|   512k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 159k, False: 352k]
  ------------------
  192|   159k|            break;
  193|   159k|        }
  194|   352k|        u64val =
  195|   352k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   352k|        ++begin;
  197|   352k|    }
  198|       |
  199|   184k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   184k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   184k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.99k, False: 182k]
  |  |  ------------------
  ------------------
  201|   184k|                                               is_negative))) {
  202|  1.99k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  1.99k|                                     "Integer overflow");
  204|  1.99k|    }
  205|       |
  206|   182k|    val = store_result<T>(u64val, is_negative);
  207|   182k|    return begin;
  208|   184k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwiEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   489k|{
  185|   489k|    uint64_t u64val{};
  186|   489k|    const CharT* begin = input.data();
  187|   489k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|  1.36M|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 1.26M, False: 102k]
  ------------------
  190|  1.26M|        const auto digit = char_to_int(*begin);
  191|  1.26M|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 386k, False: 877k]
  ------------------
  192|   386k|            break;
  193|   386k|        }
  194|   877k|        u64val =
  195|   877k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   877k|        ++begin;
  197|   877k|    }
  198|       |
  199|   489k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   489k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   489k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.11k, False: 486k]
  |  |  ------------------
  ------------------
  201|   489k|                                               is_negative))) {
  202|  3.11k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  3.11k|                                     "Integer overflow");
  204|  3.11k|    }
  205|       |
  206|   486k|    val = store_result<T>(u64val, is_negative);
  207|   486k|    return begin;
  208|   489k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIxEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   411k|{
  164|   411k|    uint64_t u64val{};
  165|   411k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   411k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   411k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   411k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   411k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.05k, False: 410k]
  |  |  ------------------
  ------------------
  170|   411k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  1.05k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  1.05k|                                     "Integer overflow");
  173|  1.05k|    }
  174|       |
  175|   410k|    val = store_result<T>(u64val, is_negative);
  176|   410k|    return ptr;
  177|   411k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIcxEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   196k|{
  185|   196k|    uint64_t u64val{};
  186|   196k|    const CharT* begin = input.data();
  187|   196k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   588k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 561k, False: 26.7k]
  ------------------
  190|   561k|        const auto digit = char_to_int(*begin);
  191|   561k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 170k, False: 391k]
  ------------------
  192|   170k|            break;
  193|   170k|        }
  194|   391k|        u64val =
  195|   391k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   391k|        ++begin;
  197|   391k|    }
  198|       |
  199|   196k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   196k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   196k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 867, False: 195k]
  |  |  ------------------
  ------------------
  201|   196k|                                               is_negative))) {
  202|    867|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|    867|                                     "Integer overflow");
  204|    867|    }
  205|       |
  206|   195k|    val = store_result<T>(u64val, is_negative);
  207|   195k|    return begin;
  208|   196k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwxEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   526k|{
  185|   526k|    uint64_t u64val{};
  186|   526k|    const CharT* begin = input.data();
  187|   526k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|  1.51M|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 1.39M, False: 111k]
  ------------------
  190|  1.39M|        const auto digit = char_to_int(*begin);
  191|  1.39M|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 414k, False: 984k]
  ------------------
  192|   414k|            break;
  193|   414k|        }
  194|   984k|        u64val =
  195|   984k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   984k|        ++begin;
  197|   984k|    }
  198|       |
  199|   526k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   526k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   526k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.46k, False: 524k]
  |  |  ------------------
  ------------------
  201|   526k|                                               is_negative))) {
  202|  1.46k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  1.46k|                                     "Integer overflow");
  204|  1.46k|    }
  205|       |
  206|   524k|    val = store_result<T>(u64val, is_negative);
  207|   524k|    return begin;
  208|   526k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIhEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   238k|{
  164|   238k|    uint64_t u64val{};
  165|   238k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   238k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   238k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   238k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   238k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.51k, False: 234k]
  |  |  ------------------
  ------------------
  170|   238k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  3.51k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  3.51k|                                     "Integer overflow");
  173|  3.51k|    }
  174|       |
  175|   234k|    val = store_result<T>(u64val, is_negative);
  176|   234k|    return ptr;
  177|   238k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIchEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   107k|{
  185|   107k|    uint64_t u64val{};
  186|   107k|    const CharT* begin = input.data();
  187|   107k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   286k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 266k, False: 19.7k]
  ------------------
  190|   266k|        const auto digit = char_to_int(*begin);
  191|   266k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 87.4k, False: 178k]
  ------------------
  192|  87.4k|            break;
  193|  87.4k|        }
  194|   178k|        u64val =
  195|   178k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   178k|        ++begin;
  197|   178k|    }
  198|       |
  199|   107k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   107k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.94k, False: 104k]
  |  |  ------------------
  ------------------
  201|   107k|                                               is_negative))) {
  202|  2.94k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  2.94k|                                     "Integer overflow");
  204|  2.94k|    }
  205|       |
  206|   104k|    val = store_result<T>(u64val, is_negative);
  207|   104k|    return begin;
  208|   107k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwhEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   316k|{
  185|   316k|    uint64_t u64val{};
  186|   316k|    const CharT* begin = input.data();
  187|   316k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   839k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 761k, False: 78.1k]
  ------------------
  190|   761k|        const auto digit = char_to_int(*begin);
  191|   761k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 238k, False: 522k]
  ------------------
  192|   238k|            break;
  193|   238k|        }
  194|   522k|        u64val =
  195|   522k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   522k|        ++begin;
  197|   522k|    }
  198|       |
  199|   316k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   316k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   316k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 19.3k, False: 297k]
  |  |  ------------------
  ------------------
  201|   316k|                                               is_negative))) {
  202|  19.3k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  19.3k|                                     "Integer overflow");
  204|  19.3k|    }
  205|       |
  206|   297k|    val = store_result<T>(u64val, is_negative);
  207|   297k|    return begin;
  208|   316k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIjEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   300k|{
  164|   300k|    uint64_t u64val{};
  165|   300k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   300k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   300k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   300k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   300k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.02k, False: 299k]
  |  |  ------------------
  ------------------
  170|   300k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  1.02k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  1.02k|                                     "Integer overflow");
  173|  1.02k|    }
  174|       |
  175|   299k|    val = store_result<T>(u64val, is_negative);
  176|   299k|    return ptr;
  177|   300k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIcjEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   145k|{
  185|   145k|    uint64_t u64val{};
  186|   145k|    const CharT* begin = input.data();
  187|   145k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   392k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 370k, False: 21.7k]
  ------------------
  190|   370k|        const auto digit = char_to_int(*begin);
  191|   370k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 123k, False: 246k]
  ------------------
  192|   123k|            break;
  193|   123k|        }
  194|   246k|        u64val =
  195|   246k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   246k|        ++begin;
  197|   246k|    }
  198|       |
  199|   145k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   145k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   145k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 947, False: 144k]
  |  |  ------------------
  ------------------
  201|   145k|                                               is_negative))) {
  202|    947|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|    947|                                     "Integer overflow");
  204|    947|    }
  205|       |
  206|   144k|    val = store_result<T>(u64val, is_negative);
  207|   144k|    return begin;
  208|   145k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwjEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   406k|{
  185|   406k|    uint64_t u64val{};
  186|   406k|    const CharT* begin = input.data();
  187|   406k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|  1.10M|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 1.01M, False: 88.7k]
  ------------------
  190|  1.01M|        const auto digit = char_to_int(*begin);
  191|  1.01M|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 317k, False: 695k]
  ------------------
  192|   317k|            break;
  193|   317k|        }
  194|   695k|        u64val =
  195|   695k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   695k|        ++begin;
  197|   695k|    }
  198|       |
  199|   406k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   406k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   406k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.53k, False: 404k]
  |  |  ------------------
  ------------------
  201|   406k|                                               is_negative))) {
  202|  1.53k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  1.53k|                                     "Integer overflow");
  204|  1.53k|    }
  205|       |
  206|   404k|    val = store_result<T>(u64val, is_negative);
  207|   404k|    return begin;
  208|   406k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIyEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   320k|{
  164|   320k|    uint64_t u64val{};
  165|   320k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   320k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   320k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   320k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   320k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 453, False: 319k]
  |  |  ------------------
  ------------------
  170|   320k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|    453|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|    453|                                     "Integer overflow");
  173|    453|    }
  174|       |
  175|   319k|    val = store_result<T>(u64val, is_negative);
  176|   319k|    return ptr;
  177|   320k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIcyEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   151k|{
  185|   151k|    uint64_t u64val{};
  186|   151k|    const CharT* begin = input.data();
  187|   151k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   416k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 393k, False: 23.1k]
  ------------------
  190|   393k|        const auto digit = char_to_int(*begin);
  191|   393k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 128k, False: 264k]
  ------------------
  192|   128k|            break;
  193|   128k|        }
  194|   264k|        u64val =
  195|   264k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   264k|        ++begin;
  197|   264k|    }
  198|       |
  199|   151k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   151k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 360, False: 151k]
  |  |  ------------------
  ------------------
  201|   151k|                                               is_negative))) {
  202|    360|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|    360|                                     "Integer overflow");
  204|    360|    }
  205|       |
  206|   151k|    val = store_result<T>(u64val, is_negative);
  207|   151k|    return begin;
  208|   151k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwyEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   431k|{
  185|   431k|    uint64_t u64val{};
  186|   431k|    const CharT* begin = input.data();
  187|   431k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|  1.19M|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 1.09M, False: 93.6k]
  ------------------
  190|  1.09M|        const auto digit = char_to_int(*begin);
  191|  1.09M|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 338k, False: 758k]
  ------------------
  192|   338k|            break;
  193|   338k|        }
  194|   758k|        u64val =
  195|   758k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   758k|        ++begin;
  197|   758k|    }
  198|       |
  199|   431k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   431k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   431k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 719, False: 431k]
  |  |  ------------------
  ------------------
  201|   431k|                                               is_negative))) {
  202|    719|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|    719|                                     "Integer overflow");
  204|    719|    }
  205|       |
  206|   431k|    val = store_result<T>(u64val, is_negative);
  207|   431k|    return begin;
  208|   431k|}

_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   230k|    {
  324|   230k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   230k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   230k|        return read_default_with_base(range, value, 0);
  326|   230k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   230k|    {
  287|   230k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   230k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   230k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   230k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   230k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 230k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   230k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   230k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   230k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   230k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   230k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   230k|                return unexpected_scan_error(
  293|   230k|                    scan_error::invalid_scanned_value,
  294|   230k|                    "Unexpected '-' sign when parsing an "
  295|   230k|                    "unsigned value");
  296|   230k|            }
  297|   230k|        }
  298|       |
  299|   230k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 86.5k, False: 143k]
  ------------------
  300|  86.5k|            value = T{0};
  301|  86.5k|            return std::next(prefix_result.iterator);
  302|  86.5k|        }
  303|       |
  304|   287k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   143k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   143k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   143k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   143k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 87, False: 143k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     87|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     87|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     87|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     87|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     87|    }                                                  \
  |  |  |  |   70|   143k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   143k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   287k|                                     ranges::subrange{prefix_result.iterator,
  306|   287k|                                                      ranges::end(range)},
  307|   287k|                                     prefix_result.parsed_base));
  308|       |
  309|   287k|        auto buf = make_contiguous_buffer(
  310|   287k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   287k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   143k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   143k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   143k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   143k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.01k, False: 137k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.01k|    }                                                  \
  |  |  |  |   70|   143k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   137k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   137k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   137k|                                    prefix_result.parsed_base));
  314|       |
  315|   137k|        return ranges_polyfill::batch_next(
  316|   137k|            prefix_result.iterator,
  317|   137k|            ranges::distance(buf.view().begin(), result_it));
  318|   287k|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESE_i:
  120|  5.67M|{
  121|  5.67M|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|  5.67M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.67M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.67M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  5.67M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 5.67M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  5.67M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  5.67M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|  5.67M|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|  5.67M|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|  5.67M|        parse_integer_base_prefix(
  126|  5.67M|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|  5.67M|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 2.31M, False: 3.35M]
  ------------------
  129|  2.31M|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 2.02k, False: 2.31M]
  ------------------
  130|  2.31M|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 1.51M, False: 798k]
  ------------------
  131|  1.52M|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|  1.52M|                digits_begin_it, ranges::begin(range));
  133|  1.52M|        }
  134|   798k|        else {
  135|   798k|            parsed_zero = false;
  136|   798k|        }
  137|  2.31M|    }
  138|  3.35M|    else {
  139|  3.35M|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 5.49k, False: 3.34M]
  ------------------
  140|  3.35M|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 121k, False: 3.22M]
  ------------------
  141|   126k|            digits_begin_it = base_prefix_begin_it;
  142|   126k|        }
  143|  3.35M|    }
  144|       |
  145|  5.67M|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 5.36M, False: 310k]
  ------------------
  146|  5.36M|        sign = sign_type::plus_sign;
  147|  5.36M|    }
  148|  5.67M|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|  5.67M|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|  5.67M|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_i:
   87|  5.67M|{
   88|  5.67M|    switch (base) {
   89|   114k|        case 2:
  ------------------
  |  Branch (89:9): [True: 114k, False: 5.55M]
  ------------------
   90|       |            // allow 0b/0B
   91|   114k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|   114k|                    false};
   93|       |
   94|   232k|        case 8: {
  ------------------
  |  Branch (94:9): [True: 232k, False: 5.44M]
  ------------------
   95|       |            // allow 0o/0O/0
   96|   232k|            bool zero_parsed = false;
   97|   232k|            auto it = apply_opt(
   98|   232k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|   232k|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|   788k|        case 16:
  ------------------
  |  Branch (102:9): [True: 788k, False: 4.88M]
  ------------------
  103|       |            // allow 0x/0X
  104|   788k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|   788k|                    false};
  106|       |
  107|  3.79M|        case 0:
  ------------------
  |  Branch (107:9): [True: 3.79M, False: 1.88M]
  ------------------
  108|       |            // detect base
  109|  3.79M|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  248|  3.79M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|   747k|        default:
  ------------------
  |  Branch (111:9): [True: 747k, False: 4.92M]
  ------------------
  112|       |            // no base prefix allowed
  113|   747k|            return {ranges::begin(range), base, false};
  114|  5.67M|    }
  115|  5.67M|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   37|  3.86M|{
   38|  3.86M|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  248|  3.86M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|  3.86M|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_Rb:
   52|  3.98M|{
   53|  3.98M|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 40.2k, False: 3.94M]
  ------------------
   54|  40.2k|        return *r;
   55|  40.2k|    }
   56|       |
   57|  3.94M|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 2.31M, False: 1.62M]
  ------------------
   58|  2.31M|        zero_parsed = true;
   59|  2.31M|        return *r;
   60|  2.31M|    }
   61|       |
   62|  1.62M|    return unexpected(parse_error::error);
   63|  3.94M|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   44|  4.58M|{
   45|  4.58M|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|  4.58M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|  4.58M|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_:
   68|  3.79M|{
   69|  3.79M|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 39.4k, False: 3.75M]
  ------------------
   70|  39.4k|        return {*r, 16, false};
   71|  39.4k|    }
   72|  3.75M|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 1.66k, False: 3.75M]
  ------------------
   73|  1.66k|        return {*r, 2, false};
   74|  1.66k|    }
   75|  3.75M|    {
   76|  3.75M|        bool zero_parsed{false};
   77|  3.75M|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 2.21M, False: 1.54M]
  ------------------
   78|  2.21M|            return {*r, 8, zero_parsed};
   79|  2.21M|        }
   80|  3.75M|    }
   81|  1.54M|    return {ranges::begin(range), 10, false};
   82|  3.75M|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESD_i:
  155|  3.45M|{
  156|  3.45M|    using char_type = detail::char_t<Range>;
  157|       |
  158|  3.45M|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|  3.45M|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  3.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.56k, False: 3.45M]
  |  |  ------------------
  ------------------
  160|  1.56k|            return unexpected_scan_error(
  161|  1.56k|                scan_error::invalid_scanned_value,
  162|  1.56k|                "Failed to parse integer: No digits found");
  163|  1.56k|        }
  164|  3.45M|        return ranges::end(range);
  165|  3.45M|    }
  166|  3.45M|    else {
  167|  3.45M|        return read_while1_code_unit(
  168|  3.45M|                   range, [&](char_type ch)
  169|  3.45M|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|  3.45M|            .transform_error(map_parse_error_to_scan_error(
  171|  3.45M|                scan_error::invalid_scanned_value,
  172|  3.45M|                "Failed to parse integer: No digits found"));
  173|  3.45M|    }
  174|  3.45M|}
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   309k|    {
  324|   309k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   309k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   309k|        return read_default_with_base(range, value, 0);
  326|   309k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   309k|    {
  287|   309k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   309k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   309k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   309k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   309k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 309k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   309k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   309k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   309k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   309k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   309k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   309k|                return unexpected_scan_error(
  293|   309k|                    scan_error::invalid_scanned_value,
  294|   309k|                    "Unexpected '-' sign when parsing an "
  295|   309k|                    "unsigned value");
  296|   309k|            }
  297|   309k|        }
  298|       |
  299|   309k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 115k, False: 194k]
  ------------------
  300|   115k|            value = T{0};
  301|   115k|            return std::next(prefix_result.iterator);
  302|   115k|        }
  303|       |
  304|   389k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   194k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   194k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   194k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   194k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 120, False: 194k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    120|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    120|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    120|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    120|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    120|    }                                                  \
  |  |  |  |   70|   194k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   194k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   389k|                                     ranges::subrange{prefix_result.iterator,
  306|   389k|                                                      ranges::end(range)},
  307|   389k|                                     prefix_result.parsed_base));
  308|       |
  309|   389k|        auto buf = make_contiguous_buffer(
  310|   389k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   389k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   194k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   194k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   194k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   194k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.26k, False: 189k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.26k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.26k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.26k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.26k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.26k|    }                                                  \
  |  |  |  |   70|   194k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   189k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   189k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   189k|                                    prefix_result.parsed_base));
  314|       |
  315|   189k|        return ranges_polyfill::batch_next(
  316|   189k|            prefix_result.iterator,
  317|   189k|            ranges::distance(buf.view().begin(), result_it));
  318|   389k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   326k|    {
  324|   326k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   326k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   326k|        return read_default_with_base(range, value, 0);
  326|   326k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   326k|    {
  287|   326k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   326k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   326k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   326k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   326k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 326k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   326k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   326k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   326k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   326k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   326k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   326k|                return unexpected_scan_error(
  293|   326k|                    scan_error::invalid_scanned_value,
  294|   326k|                    "Unexpected '-' sign when parsing an "
  295|   326k|                    "unsigned value");
  296|   326k|            }
  297|   326k|        }
  298|       |
  299|   326k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 118k, False: 208k]
  ------------------
  300|   118k|            value = T{0};
  301|   118k|            return std::next(prefix_result.iterator);
  302|   118k|        }
  303|       |
  304|   415k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   208k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   208k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   208k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   208k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 129, False: 207k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    129|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    129|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    129|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    129|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    129|    }                                                  \
  |  |  |  |   70|   208k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   207k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   415k|                                     ranges::subrange{prefix_result.iterator,
  306|   415k|                                                      ranges::end(range)},
  307|   415k|                                     prefix_result.parsed_base));
  308|       |
  309|   415k|        auto buf = make_contiguous_buffer(
  310|   415k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   415k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   207k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   207k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   207k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   207k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.10k, False: 202k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.10k|    }                                                  \
  |  |  |  |   70|   207k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   202k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   202k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   202k|                                    prefix_result.parsed_base));
  314|       |
  315|   202k|        return ranges_polyfill::batch_next(
  316|   202k|            prefix_result.iterator,
  317|   202k|            ranges::distance(buf.view().begin(), result_it));
  318|   415k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   229k|    {
  324|   229k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   229k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   229k|        return read_default_with_base(range, value, 0);
  326|   229k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   229k|    {
  287|   229k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   229k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   229k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   229k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   229k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 229k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   229k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   229k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   229k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   229k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   229k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 2.34k, False: 226k]
  ------------------
  292|  2.34k|                return unexpected_scan_error(
  293|  2.34k|                    scan_error::invalid_scanned_value,
  294|  2.34k|                    "Unexpected '-' sign when parsing an "
  295|  2.34k|                    "unsigned value");
  296|  2.34k|            }
  297|   229k|        }
  298|       |
  299|   226k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 89.4k, False: 137k]
  ------------------
  300|  89.4k|            value = T{0};
  301|  89.4k|            return std::next(prefix_result.iterator);
  302|  89.4k|        }
  303|       |
  304|   274k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   137k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   137k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   137k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 42, False: 137k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     42|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     42|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     42|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     42|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     42|    }                                                  \
  |  |  |  |   70|   137k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   137k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   274k|                                     ranges::subrange{prefix_result.iterator,
  306|   274k|                                                      ranges::end(range)},
  307|   274k|                                     prefix_result.parsed_base));
  308|       |
  309|   274k|        auto buf = make_contiguous_buffer(
  310|   274k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   274k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   137k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   137k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   137k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.83k, False: 133k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.83k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.83k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.83k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.83k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.83k|    }                                                  \
  |  |  |  |   70|   137k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   133k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   133k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   133k|                                    prefix_result.parsed_base));
  314|       |
  315|   133k|        return ranges_polyfill::batch_next(
  316|   133k|            prefix_result.iterator,
  317|   133k|            ranges::distance(buf.view().begin(), result_it));
  318|   274k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   260k|    {
  324|   260k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   260k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   260k|        return read_default_with_base(range, value, 0);
  326|   260k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   260k|    {
  287|   260k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   260k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   260k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   260k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   260k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 260k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   260k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   260k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   260k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   260k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   260k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 2.50k, False: 257k]
  ------------------
  292|  2.50k|                return unexpected_scan_error(
  293|  2.50k|                    scan_error::invalid_scanned_value,
  294|  2.50k|                    "Unexpected '-' sign when parsing an "
  295|  2.50k|                    "unsigned value");
  296|  2.50k|            }
  297|   260k|        }
  298|       |
  299|   257k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 100k, False: 157k]
  ------------------
  300|   100k|            value = T{0};
  301|   100k|            return std::next(prefix_result.iterator);
  302|   100k|        }
  303|       |
  304|   315k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   157k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   157k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   157k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 54, False: 157k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     54|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     54|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     54|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     54|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     54|    }                                                  \
  |  |  |  |   70|   157k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   315k|                                     ranges::subrange{prefix_result.iterator,
  306|   315k|                                                      ranges::end(range)},
  307|   315k|                                     prefix_result.parsed_base));
  308|       |
  309|   315k|        auto buf = make_contiguous_buffer(
  310|   315k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   315k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   157k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   157k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   157k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.22k, False: 154k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.22k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.22k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.22k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.22k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.22k|    }                                                  \
  |  |  |  |   70|   157k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   154k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   154k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   154k|                                    prefix_result.parsed_base));
  314|       |
  315|   154k|        return ranges_polyfill::batch_next(
  316|   154k|            prefix_result.iterator,
  317|   154k|            ranges::distance(buf.view().begin(), result_it));
  318|   315k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   270k|    {
  324|   270k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   270k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   270k|        return read_default_with_base(range, value, 0);
  326|   270k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   270k|    {
  287|   270k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   270k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   270k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   270k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   270k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 270k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   270k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   270k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   270k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   270k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   270k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 2.63k, False: 267k]
  ------------------
  292|  2.63k|                return unexpected_scan_error(
  293|  2.63k|                    scan_error::invalid_scanned_value,
  294|  2.63k|                    "Unexpected '-' sign when parsing an "
  295|  2.63k|                    "unsigned value");
  296|  2.63k|            }
  297|   270k|        }
  298|       |
  299|   267k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 101k, False: 165k]
  ------------------
  300|   101k|            value = T{0};
  301|   101k|            return std::next(prefix_result.iterator);
  302|   101k|        }
  303|       |
  304|   331k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   165k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   165k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   165k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   165k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 54, False: 165k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     54|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     54|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     54|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     54|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     54|    }                                                  \
  |  |  |  |   70|   165k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   165k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   331k|                                     ranges::subrange{prefix_result.iterator,
  306|   331k|                                                      ranges::end(range)},
  307|   331k|                                     prefix_result.parsed_base));
  308|       |
  309|   331k|        auto buf = make_contiguous_buffer(
  310|   331k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   331k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   165k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   165k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   165k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   165k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.02k, False: 162k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.02k|    }                                                  \
  |  |  |  |   70|   165k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   162k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   162k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   162k|                                    prefix_result.parsed_base));
  314|       |
  315|   162k|        return ranges_polyfill::batch_next(
  316|   162k|            prefix_result.iterator,
  317|   162k|            ranges::distance(buf.view().begin(), result_it));
  318|   331k|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSC_12basic_stringIT0_NSC_11char_traitsISJ_EENSC_9allocatorISJ_EEEENSI_IcNSK_IcEENSM_IcEEEEEEEEESF_iRKNS1_35localized_number_formatting_optionsISJ_EE:
  184|   669k|{
  185|   669k|    std::basic_string<CharT> output;
  186|   669k|    std::string thsep_indices;
  187|   669k|    auto it = ranges::begin(range);
  188|   669k|    bool digit_matched = false;
  189|  2.08M|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 2.08M, False: 5.81k]
  ------------------
  190|  2.08M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 32.0k, False: 2.05M]
  ------------------
  191|  32.0k|            thsep_indices.push_back(static_cast<char>(
  192|  32.0k|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|  32.0k|        }
  194|  2.05M|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 663k, False: 1.38M]
  ------------------
  195|   663k|            break;
  196|   663k|        }
  197|  1.38M|        else {
  198|  1.38M|            output.push_back(*it);
  199|  1.38M|            digit_matched = true;
  200|  1.38M|        }
  201|  2.08M|    }
  202|   669k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  153|   669k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 11.1k, False: 658k]
  |  |  ------------------
  ------------------
  203|  11.1k|        return unexpected_scan_error(
  204|  11.1k|            scan_error::invalid_scanned_value,
  205|  11.1k|            "Failed to parse integer: No digits found");
  206|  11.1k|    }
  207|   658k|    return std::tuple{it, output, thsep_indices};
  208|   669k|}
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  6.92k|    {
  324|  6.92k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  6.92k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  6.92k|        return read_default_with_base(range, value, 0);
  326|  6.92k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  6.92k|    {
  287|  6.92k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  6.92k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.92k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.92k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.92k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.92k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  6.92k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  6.92k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  6.92k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  6.92k|                return unexpected_scan_error(
  293|  6.92k|                    scan_error::invalid_scanned_value,
  294|  6.92k|                    "Unexpected '-' sign when parsing an "
  295|  6.92k|                    "unsigned value");
  296|  6.92k|            }
  297|  6.92k|        }
  298|       |
  299|  6.92k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 6.92k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  6.92k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  6.92k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.92k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.92k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.92k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.92k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.92k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.92k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.92k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.92k|    }                                                  \
  |  |  |  |   70|  6.92k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  6.92k|                                     ranges::subrange{prefix_result.iterator,
  306|  6.92k|                                                      ranges::end(range)},
  307|  6.92k|                                     prefix_result.parsed_base));
  308|       |
  309|  6.92k|        auto buf = make_contiguous_buffer(
  310|  6.92k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  6.92k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  6.92k|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESH_i:
  120|   235k|{
  121|   235k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|   235k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   235k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   235k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   235k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 235k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   235k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   235k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|   235k|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|   235k|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|   235k|        parse_integer_base_prefix(
  126|   235k|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|   235k|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 0, False: 235k]
  ------------------
  129|      0|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 0, False: 0]
  ------------------
  130|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 0, False: 0]
  ------------------
  131|      0|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|      0|                digits_begin_it, ranges::begin(range));
  133|      0|        }
  134|      0|        else {
  135|      0|            parsed_zero = false;
  136|      0|        }
  137|      0|    }
  138|   235k|    else {
  139|   235k|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 12, False: 235k]
  ------------------
  140|   235k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 207k, False: 27.6k]
  ------------------
  141|   207k|            digits_begin_it = base_prefix_begin_it;
  142|   207k|        }
  143|   235k|    }
  144|       |
  145|   235k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 207k, False: 27.6k]
  ------------------
  146|   207k|        sign = sign_type::plus_sign;
  147|   207k|    }
  148|   235k|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|   235k|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|   235k|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEibEEEOSH_i:
   87|   235k|{
   88|   235k|    switch (base) {
   89|  27.6k|        case 2:
  ------------------
  |  Branch (89:9): [True: 27.6k, False: 207k]
  ------------------
   90|       |            // allow 0b/0B
   91|  27.6k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|  27.6k|                    false};
   93|       |
   94|  27.6k|        case 8: {
  ------------------
  |  Branch (94:9): [True: 27.6k, False: 207k]
  ------------------
   95|       |            // allow 0o/0O/0
   96|  27.6k|            bool zero_parsed = false;
   97|  27.6k|            auto it = apply_opt(
   98|  27.6k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|  27.6k|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|  55.3k|        case 16:
  ------------------
  |  Branch (102:9): [True: 55.3k, False: 179k]
  ------------------
  103|       |            // allow 0x/0X
  104|  55.3k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|  55.3k|                    false};
  106|       |
  107|  96.8k|        case 0:
  ------------------
  |  Branch (107:9): [True: 96.8k, False: 138k]
  ------------------
  108|       |            // detect base
  109|  96.8k|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  248|  96.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|  27.6k|        default:
  ------------------
  |  Branch (111:9): [True: 27.6k, False: 207k]
  ------------------
  112|       |            // no base prefix allowed
  113|  27.6k|            return {ranges::begin(range), base, false};
  114|   235k|    }
  115|   235k|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   37|   124k|{
   38|   124k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  248|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|   124k|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_Rb:
   52|   124k|{
   53|   124k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 0, False: 124k]
  ------------------
   54|      0|        return *r;
   55|      0|    }
   56|       |
   57|   124k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 0, False: 124k]
  ------------------
   58|      0|        zero_parsed = true;
   59|      0|        return *r;
   60|      0|    }
   61|       |
   62|   124k|    return unexpected(parse_error::error);
   63|   124k|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   44|   152k|{
   45|   152k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|   152k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|   152k|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEibEEEOSH_:
   68|  96.8k|{
   69|  96.8k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 0, False: 96.8k]
  ------------------
   70|      0|        return {*r, 16, false};
   71|      0|    }
   72|  96.8k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 0, False: 96.8k]
  ------------------
   73|      0|        return {*r, 2, false};
   74|      0|    }
   75|  96.8k|    {
   76|  96.8k|        bool zero_parsed{false};
   77|  96.8k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 0, False: 96.8k]
  ------------------
   78|      0|            return {*r, 8, zero_parsed};
   79|      0|        }
   80|  96.8k|    }
   81|  96.8k|    return {ranges::begin(range), 10, false};
   82|  96.8k|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESG_i:
  155|   207k|{
  156|   207k|    using char_type = detail::char_t<Range>;
  157|       |
  158|   207k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|   207k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  160|   207k|            return unexpected_scan_error(
  161|   207k|                scan_error::invalid_scanned_value,
  162|   207k|                "Failed to parse integer: No digits found");
  163|   207k|        }
  164|   207k|        return ranges::end(range);
  165|   207k|    }
  166|   207k|    else {
  167|   207k|        return read_while1_code_unit(
  168|   207k|                   range, [&](char_type ch)
  169|   207k|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|   207k|            .transform_error(map_parse_error_to_scan_error(
  171|   207k|                scan_error::invalid_scanned_value,
  172|   207k|                "Failed to parse integer: No digits found"));
  173|   207k|    }
  174|   207k|}
_ZZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESG_iENKUlcE_clEc:
  169|   235k|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  6.92k|    {
  324|  6.92k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  6.92k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  6.92k|        return read_default_with_base(range, value, 0);
  326|  6.92k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  6.92k|    {
  287|  6.92k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  6.92k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.92k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.92k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.92k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.92k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  6.92k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  6.92k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  6.92k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  6.92k|                return unexpected_scan_error(
  293|  6.92k|                    scan_error::invalid_scanned_value,
  294|  6.92k|                    "Unexpected '-' sign when parsing an "
  295|  6.92k|                    "unsigned value");
  296|  6.92k|            }
  297|  6.92k|        }
  298|       |
  299|  6.92k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 6.92k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  6.92k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  6.92k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.92k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.92k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.92k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.92k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.92k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.92k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.92k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.92k|    }                                                  \
  |  |  |  |   70|  6.92k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  6.92k|                                     ranges::subrange{prefix_result.iterator,
  306|  6.92k|                                                      ranges::end(range)},
  307|  6.92k|                                     prefix_result.parsed_base));
  308|       |
  309|  6.92k|        auto buf = make_contiguous_buffer(
  310|  6.92k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  6.92k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  6.92k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  6.92k|    {
  324|  6.92k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  6.92k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  6.92k|        return read_default_with_base(range, value, 0);
  326|  6.92k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  6.92k|    {
  287|  6.92k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  6.92k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.92k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.92k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.92k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.92k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  6.92k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  6.92k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  6.92k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  6.92k|                return unexpected_scan_error(
  293|  6.92k|                    scan_error::invalid_scanned_value,
  294|  6.92k|                    "Unexpected '-' sign when parsing an "
  295|  6.92k|                    "unsigned value");
  296|  6.92k|            }
  297|  6.92k|        }
  298|       |
  299|  6.92k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 6.92k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  6.92k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  6.92k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.92k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.92k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.92k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.92k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.92k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.92k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.92k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.92k|    }                                                  \
  |  |  |  |   70|  6.92k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  6.92k|                                     ranges::subrange{prefix_result.iterator,
  306|  6.92k|                                                      ranges::end(range)},
  307|  6.92k|                                     prefix_result.parsed_base));
  308|       |
  309|  6.92k|        auto buf = make_contiguous_buffer(
  310|  6.92k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  6.92k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  6.92k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  6.92k|    {
  324|  6.92k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  6.92k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  6.92k|        return read_default_with_base(range, value, 0);
  326|  6.92k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  6.92k|    {
  287|  6.92k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  6.92k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.92k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.92k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.92k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.92k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  6.92k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  6.92k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  6.92k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 6.92k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  6.92k|        }
  298|       |
  299|  6.92k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 6.92k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  6.92k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  6.92k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.92k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.92k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.92k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.92k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.92k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.92k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.92k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.92k|    }                                                  \
  |  |  |  |   70|  6.92k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  6.92k|                                     ranges::subrange{prefix_result.iterator,
  306|  6.92k|                                                      ranges::end(range)},
  307|  6.92k|                                     prefix_result.parsed_base));
  308|       |
  309|  6.92k|        auto buf = make_contiguous_buffer(
  310|  6.92k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  6.92k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  6.92k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  6.92k|    {
  324|  6.92k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  6.92k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  6.92k|        return read_default_with_base(range, value, 0);
  326|  6.92k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  6.92k|    {
  287|  6.92k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  6.92k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.92k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.92k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.92k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.92k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  6.92k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  6.92k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  6.92k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 6.92k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  6.92k|        }
  298|       |
  299|  6.92k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 6.92k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  6.92k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  6.92k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.92k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.92k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.92k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.92k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.92k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.92k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.92k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.92k|    }                                                  \
  |  |  |  |   70|  6.92k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  6.92k|                                     ranges::subrange{prefix_result.iterator,
  306|  6.92k|                                                      ranges::end(range)},
  307|  6.92k|                                     prefix_result.parsed_base));
  308|       |
  309|  6.92k|        auto buf = make_contiguous_buffer(
  310|  6.92k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  6.92k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  6.92k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  6.92k|    {
  324|  6.92k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  6.92k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  6.92k|        return read_default_with_base(range, value, 0);
  326|  6.92k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  6.92k|    {
  287|  6.92k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  6.92k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.92k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.92k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.92k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.92k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  6.92k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  6.92k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  6.92k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 6.92k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  6.92k|        }
  298|       |
  299|  6.92k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 6.92k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  6.92k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  6.92k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.92k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.92k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.92k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.92k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.92k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.92k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.92k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.92k|    }                                                  \
  |  |  |  |   70|  6.92k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  6.92k|                                     ranges::subrange{prefix_result.iterator,
  306|  6.92k|                                                      ranges::end(range)},
  307|  6.92k|                                     prefix_result.parsed_base));
  308|       |
  309|  6.92k|        auto buf = make_contiguous_buffer(
  310|  6.92k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  6.92k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  6.92k|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSF_12basic_stringIT0_NSF_11char_traitsISM_EENSF_9allocatorISM_EEEENSL_IcNSN_IcEENSP_IcEEEEEEEEESI_iRKNS1_35localized_number_formatting_optionsISM_EE:
  184|  27.6k|{
  185|  27.6k|    std::basic_string<CharT> output;
  186|  27.6k|    std::string thsep_indices;
  187|  27.6k|    auto it = ranges::begin(range);
  188|  27.6k|    bool digit_matched = false;
  189|  27.6k|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 27.6k, False: 0]
  ------------------
  190|  27.6k|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 0, False: 27.6k]
  ------------------
  191|      0|            thsep_indices.push_back(static_cast<char>(
  192|      0|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|      0|        }
  194|  27.6k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 27.6k, False: 0]
  ------------------
  195|  27.6k|            break;
  196|  27.6k|        }
  197|      0|        else {
  198|      0|            output.push_back(*it);
  199|      0|            digit_matched = true;
  200|      0|        }
  201|  27.6k|    }
  202|  27.6k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  153|  27.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 27.6k, False: 0]
  |  |  ------------------
  ------------------
  203|  27.6k|        return unexpected_scan_error(
  204|  27.6k|            scan_error::invalid_scanned_value,
  205|  27.6k|            "Failed to parse integer: No digits found");
  206|  27.6k|    }
  207|      0|    return std::tuple{it, output, thsep_indices};
  208|  27.6k|}
_ZN3scn2v24impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
  279|  4.26M|    {
  280|  4.26M|        detail::check_int_type_specs(specs, eh);
  281|  4.26M|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   513k|    {
  335|   513k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   513k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   513k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   513k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   513k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 513k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   513k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   513k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   513k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   513k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 45.2k, False: 468k]
  ------------------
  339|  45.2k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  45.2k|                return unexpected_scan_error(
  341|  45.2k|                    scan_error::invalid_scanned_value,
  342|  45.2k|                    "Unexpected '-' sign when parsing an "
  343|  45.2k|                    "unsigned value");
  344|  45.2k|            }
  345|  45.2k|            else {
  346|  45.2k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 45.2k]
  ------------------
  347|  45.2k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  45.2k|            }
  353|  45.2k|        }
  354|       |
  355|   513k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 130k, False: 382k]
  ------------------
  356|   130k|            value = T{0};
  357|   130k|            return std::next(prefix_result.iterator);
  358|   130k|        }
  359|       |
  360|   382k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   382k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 287k, False: 95.4k]
  |  |  ------------------
  ------------------
  361|   287k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   287k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   287k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   287k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   287k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 182, False: 287k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    182|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    182|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    182|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    182|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    182|    }                                                  \
  |  |  |  |   70|   287k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   287k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   287k|                    parse_integer_digits_without_thsep(
  363|   287k|                        ranges::subrange{prefix_result.iterator,
  364|   287k|                                         ranges::end(range)},
  365|   287k|                        prefix_result.parsed_base));
  366|       |
  367|   287k|            auto buf = make_contiguous_buffer(
  368|   287k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   287k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   287k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   287k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   287k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   287k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 21.2k, False: 265k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  21.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  21.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  21.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  21.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  21.2k|    }                                                  \
  |  |  |  |   70|   287k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   265k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   265k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   265k|                                        prefix_result.parsed_base));
  372|       |
  373|   265k|            return ranges_polyfill::batch_next(
  374|   265k|                prefix_result.iterator,
  375|   265k|                ranges::distance(buf.view().begin(), result_it));
  376|   287k|        }
  377|       |
  378|  95.4k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  95.4k|            localized_number_formatting_options<CharT>{loc};
  383|  95.4k|#endif
  384|       |
  385|  95.4k|        SCN_TRY(
  ------------------
  |  |   71|  95.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  95.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  95.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  95.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.65k, False: 93.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.65k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.65k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.65k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.65k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.65k|    }                                                  \
  |  |  |  |   70|  95.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  93.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  93.8k|            parse_digits_result,
  387|  93.8k|            parse_integer_digits_with_thsep(
  388|  93.8k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  93.8k|                prefix_result.parsed_base, locale_options));
  390|  93.8k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  93.8k|            parse_digits_result;
  392|       |
  393|  93.8k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 476, False: 93.3k]
  ------------------
  394|    476|            if (auto e = check_thsep_grouping(
  395|    476|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    476|                    thsep_indices, locale_options.grouping);
  397|    476|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    476|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 466, False: 10]
  |  |  ------------------
  ------------------
  398|    466|                return unexpected(e);
  399|    466|            }
  400|    476|        }
  401|       |
  402|  93.3k|        auto nothsep_source_view =
  403|  93.3k|            std::basic_string_view<CharT>{nothsep_source};
  404|  93.3k|        SCN_TRY(
  ------------------
  |  |   71|  93.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  93.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  93.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  93.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.94k, False: 91.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.94k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.94k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.94k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.94k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.94k|    }                                                  \
  |  |  |  |   70|  93.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  91.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  91.4k|            nothsep_source_it,
  406|  91.4k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  91.4k|                                prefix_result.parsed_base));
  408|       |
  409|  91.4k|        return ranges_polyfill::batch_next(
  410|  91.4k|            prefix_result.iterator,
  411|  91.4k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  91.4k|                ranges::ssize(thsep_indices));
  413|  93.3k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   803k|    {
  335|   803k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   803k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   803k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   803k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   803k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 803k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   803k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   803k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   803k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   803k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 58.4k, False: 744k]
  ------------------
  339|  58.4k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  58.4k|                return unexpected_scan_error(
  341|  58.4k|                    scan_error::invalid_scanned_value,
  342|  58.4k|                    "Unexpected '-' sign when parsing an "
  343|  58.4k|                    "unsigned value");
  344|  58.4k|            }
  345|  58.4k|            else {
  346|  58.4k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 58.4k]
  ------------------
  347|  58.4k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  58.4k|            }
  353|  58.4k|        }
  354|       |
  355|   803k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 171k, False: 631k]
  ------------------
  356|   171k|            value = T{0};
  357|   171k|            return std::next(prefix_result.iterator);
  358|   171k|        }
  359|       |
  360|   631k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   631k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 502k, False: 129k]
  |  |  ------------------
  ------------------
  361|   502k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   502k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   502k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   502k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   502k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 276, False: 502k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    276|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    276|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    276|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    276|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    276|    }                                                  \
  |  |  |  |   70|   502k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   502k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   502k|                    parse_integer_digits_without_thsep(
  363|   502k|                        ranges::subrange{prefix_result.iterator,
  364|   502k|                                         ranges::end(range)},
  365|   502k|                        prefix_result.parsed_base));
  366|       |
  367|   502k|            auto buf = make_contiguous_buffer(
  368|   502k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   502k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   502k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   502k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   502k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   502k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 19.4k, False: 482k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  19.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  19.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  19.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  19.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  19.4k|    }                                                  \
  |  |  |  |   70|   502k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   482k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   482k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   482k|                                        prefix_result.parsed_base));
  372|       |
  373|   482k|            return ranges_polyfill::batch_next(
  374|   482k|                prefix_result.iterator,
  375|   482k|                ranges::distance(buf.view().begin(), result_it));
  376|   502k|        }
  377|       |
  378|   129k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|   129k|            localized_number_formatting_options<CharT>{loc};
  383|   129k|#endif
  384|       |
  385|   129k|        SCN_TRY(
  ------------------
  |  |   71|   129k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   129k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   129k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   129k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.41k, False: 126k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.41k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.41k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.41k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.41k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.41k|    }                                                  \
  |  |  |  |   70|   129k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   126k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|   126k|            parse_digits_result,
  387|   126k|            parse_integer_digits_with_thsep(
  388|   126k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|   126k|                prefix_result.parsed_base, locale_options));
  390|   126k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|   126k|            parse_digits_result;
  392|       |
  393|   126k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 604, False: 126k]
  ------------------
  394|    604|            if (auto e = check_thsep_grouping(
  395|    604|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    604|                    thsep_indices, locale_options.grouping);
  397|    604|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    604|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 594, False: 10]
  |  |  ------------------
  ------------------
  398|    594|                return unexpected(e);
  399|    594|            }
  400|    604|        }
  401|       |
  402|   126k|        auto nothsep_source_view =
  403|   126k|            std::basic_string_view<CharT>{nothsep_source};
  404|   126k|        SCN_TRY(
  ------------------
  |  |   71|   126k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   126k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   126k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 584, False: 125k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    584|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    584|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    584|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    584|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    584|    }                                                  \
  |  |  |  |   70|   126k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   125k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|   125k|            nothsep_source_it,
  406|   125k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|   125k|                                prefix_result.parsed_base));
  408|       |
  409|   125k|        return ranges_polyfill::batch_next(
  410|   125k|            prefix_result.iterator,
  411|   125k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|   125k|                ranges::ssize(thsep_indices));
  413|   126k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   840k|    {
  335|   840k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   840k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   840k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   840k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   840k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 840k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   840k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   840k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   840k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   840k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 59.4k, False: 780k]
  ------------------
  339|  59.4k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  59.4k|                return unexpected_scan_error(
  341|  59.4k|                    scan_error::invalid_scanned_value,
  342|  59.4k|                    "Unexpected '-' sign when parsing an "
  343|  59.4k|                    "unsigned value");
  344|  59.4k|            }
  345|  59.4k|            else {
  346|  59.4k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 59.4k]
  ------------------
  347|  59.4k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  59.4k|            }
  353|  59.4k|        }
  354|       |
  355|   840k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 174k, False: 665k]
  ------------------
  356|   174k|            value = T{0};
  357|   174k|            return std::next(prefix_result.iterator);
  358|   174k|        }
  359|       |
  360|   665k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   665k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 527k, False: 138k]
  |  |  ------------------
  ------------------
  361|   527k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   527k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   527k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   527k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   527k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 302, False: 526k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    302|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    302|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    302|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    302|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    302|    }                                                  \
  |  |  |  |   70|   527k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   526k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   526k|                    parse_integer_digits_without_thsep(
  363|   526k|                        ranges::subrange{prefix_result.iterator,
  364|   526k|                                         ranges::end(range)},
  365|   526k|                        prefix_result.parsed_base));
  366|       |
  367|   526k|            auto buf = make_contiguous_buffer(
  368|   526k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   526k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   526k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   526k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   526k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   526k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 19.0k, False: 507k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  19.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  19.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  19.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  19.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  19.0k|    }                                                  \
  |  |  |  |   70|   526k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   507k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   507k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   507k|                                        prefix_result.parsed_base));
  372|       |
  373|   507k|            return ranges_polyfill::batch_next(
  374|   507k|                prefix_result.iterator,
  375|   507k|                ranges::distance(buf.view().begin(), result_it));
  376|   526k|        }
  377|       |
  378|   138k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|   138k|            localized_number_formatting_options<CharT>{loc};
  383|   138k|#endif
  384|       |
  385|   138k|        SCN_TRY(
  ------------------
  |  |   71|   138k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   138k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   138k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   138k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.58k, False: 135k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.58k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.58k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.58k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.58k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.58k|    }                                                  \
  |  |  |  |   70|   138k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   135k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|   135k|            parse_digits_result,
  387|   135k|            parse_integer_digits_with_thsep(
  388|   135k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|   135k|                prefix_result.parsed_base, locale_options));
  390|   135k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|   135k|            parse_digits_result;
  392|       |
  393|   135k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 688, False: 134k]
  ------------------
  394|    688|            if (auto e = check_thsep_grouping(
  395|    688|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    688|                    thsep_indices, locale_options.grouping);
  397|    688|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    688|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 676, False: 12]
  |  |  ------------------
  ------------------
  398|    676|                return unexpected(e);
  399|    676|            }
  400|    688|        }
  401|       |
  402|   134k|        auto nothsep_source_view =
  403|   134k|            std::basic_string_view<CharT>{nothsep_source};
  404|   134k|        SCN_TRY(
  ------------------
  |  |   71|   134k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   134k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   134k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 230, False: 134k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    230|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    230|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    230|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    230|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    230|    }                                                  \
  |  |  |  |   70|   134k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   134k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|   134k|            nothsep_source_it,
  406|   134k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|   134k|                                prefix_result.parsed_base));
  408|       |
  409|   134k|        return ranges_polyfill::batch_next(
  410|   134k|            prefix_result.iterator,
  411|   134k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|   134k|                ranges::ssize(thsep_indices));
  413|   134k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   529k|    {
  335|   529k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   529k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   529k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   529k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   529k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 529k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   529k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   529k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   529k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   529k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 8.12k, False: 521k]
  ------------------
  339|  8.12k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  8.12k|                return unexpected_scan_error(
  341|  8.12k|                    scan_error::invalid_scanned_value,
  342|  8.12k|                    "Unexpected '-' sign when parsing an "
  343|  8.12k|                    "unsigned value");
  344|  8.12k|            }
  345|  8.12k|            else {
  346|  8.12k|                if (specs.type ==
  347|  8.12k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  8.12k|                    return unexpected_scan_error(
  349|  8.12k|                        scan_error::invalid_scanned_value,
  350|  8.12k|                        "'u'-option disallows negative values");
  351|  8.12k|                }
  352|  8.12k|            }
  353|  8.12k|        }
  354|       |
  355|   521k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 133k, False: 388k]
  ------------------
  356|   133k|            value = T{0};
  357|   133k|            return std::next(prefix_result.iterator);
  358|   133k|        }
  359|       |
  360|   388k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   388k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 296k, False: 91.3k]
  |  |  ------------------
  ------------------
  361|   296k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   296k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   296k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   296k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   296k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 90, False: 296k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     90|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     90|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     90|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     90|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     90|    }                                                  \
  |  |  |  |   70|   296k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   296k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   296k|                    parse_integer_digits_without_thsep(
  363|   296k|                        ranges::subrange{prefix_result.iterator,
  364|   296k|                                         ranges::end(range)},
  365|   296k|                        prefix_result.parsed_base));
  366|       |
  367|   296k|            auto buf = make_contiguous_buffer(
  368|   296k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   296k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   296k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   296k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   296k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   296k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 14.9k, False: 281k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  14.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  14.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  14.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  14.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  14.9k|    }                                                  \
  |  |  |  |   70|   296k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   281k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   281k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   281k|                                        prefix_result.parsed_base));
  372|       |
  373|   281k|            return ranges_polyfill::batch_next(
  374|   281k|                prefix_result.iterator,
  375|   281k|                ranges::distance(buf.view().begin(), result_it));
  376|   296k|        }
  377|       |
  378|  91.3k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  91.3k|            localized_number_formatting_options<CharT>{loc};
  383|  91.3k|#endif
  384|       |
  385|  91.3k|        SCN_TRY(
  ------------------
  |  |   71|  91.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  91.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  91.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  91.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.36k, False: 90.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.36k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.36k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.36k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.36k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.36k|    }                                                  \
  |  |  |  |   70|  91.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  90.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  90.0k|            parse_digits_result,
  387|  90.0k|            parse_integer_digits_with_thsep(
  388|  90.0k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  90.0k|                prefix_result.parsed_base, locale_options));
  390|  90.0k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  90.0k|            parse_digits_result;
  392|       |
  393|  90.0k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 318, False: 89.7k]
  ------------------
  394|    318|            if (auto e = check_thsep_grouping(
  395|    318|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    318|                    thsep_indices, locale_options.grouping);
  397|    318|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    318|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 316, False: 2]
  |  |  ------------------
  ------------------
  398|    316|                return unexpected(e);
  399|    316|            }
  400|    318|        }
  401|       |
  402|  89.7k|        auto nothsep_source_view =
  403|  89.7k|            std::basic_string_view<CharT>{nothsep_source};
  404|  89.7k|        SCN_TRY(
  ------------------
  |  |   71|  89.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  89.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  89.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  89.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 910, False: 88.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    910|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    910|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    910|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    910|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    910|    }                                                  \
  |  |  |  |   70|  89.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  88.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  88.8k|            nothsep_source_it,
  406|  88.8k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  88.8k|                                prefix_result.parsed_base));
  408|       |
  409|  88.8k|        return ranges_polyfill::batch_next(
  410|  88.8k|            prefix_result.iterator,
  411|  88.8k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  88.8k|                ranges::ssize(thsep_indices));
  413|  89.7k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   668k|    {
  335|   668k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   668k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   668k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   668k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   668k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 668k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   668k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   668k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   668k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   668k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 8.74k, False: 660k]
  ------------------
  339|  8.74k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  8.74k|                return unexpected_scan_error(
  341|  8.74k|                    scan_error::invalid_scanned_value,
  342|  8.74k|                    "Unexpected '-' sign when parsing an "
  343|  8.74k|                    "unsigned value");
  344|  8.74k|            }
  345|  8.74k|            else {
  346|  8.74k|                if (specs.type ==
  347|  8.74k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  8.74k|                    return unexpected_scan_error(
  349|  8.74k|                        scan_error::invalid_scanned_value,
  350|  8.74k|                        "'u'-option disallows negative values");
  351|  8.74k|                }
  352|  8.74k|            }
  353|  8.74k|        }
  354|       |
  355|   660k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 147k, False: 512k]
  ------------------
  356|   147k|            value = T{0};
  357|   147k|            return std::next(prefix_result.iterator);
  358|   147k|        }
  359|       |
  360|   512k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   512k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 407k, False: 104k]
  |  |  ------------------
  ------------------
  361|   407k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   407k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   407k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   407k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   407k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 116, False: 407k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    116|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    116|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    116|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    116|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    116|    }                                                  \
  |  |  |  |   70|   407k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   407k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   407k|                    parse_integer_digits_without_thsep(
  363|   407k|                        ranges::subrange{prefix_result.iterator,
  364|   407k|                                         ranges::end(range)},
  365|   407k|                        prefix_result.parsed_base));
  366|       |
  367|   407k|            auto buf = make_contiguous_buffer(
  368|   407k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   407k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   407k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   407k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   407k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   407k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 13.4k, False: 394k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  13.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  13.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  13.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  13.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  13.4k|    }                                                  \
  |  |  |  |   70|   407k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   394k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   394k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   394k|                                        prefix_result.parsed_base));
  372|       |
  373|   394k|            return ranges_polyfill::batch_next(
  374|   394k|                prefix_result.iterator,
  375|   394k|                ranges::distance(buf.view().begin(), result_it));
  376|   407k|        }
  377|       |
  378|   104k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|   104k|            localized_number_formatting_options<CharT>{loc};
  383|   104k|#endif
  384|       |
  385|   104k|        SCN_TRY(
  ------------------
  |  |   71|   104k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   104k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   104k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.54k, False: 103k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.54k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.54k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.54k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.54k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.54k|    }                                                  \
  |  |  |  |   70|   104k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|   103k|            parse_digits_result,
  387|   103k|            parse_integer_digits_with_thsep(
  388|   103k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|   103k|                prefix_result.parsed_base, locale_options));
  390|   103k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|   103k|            parse_digits_result;
  392|       |
  393|   103k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 360, False: 102k]
  ------------------
  394|    360|            if (auto e = check_thsep_grouping(
  395|    360|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    360|                    thsep_indices, locale_options.grouping);
  397|    360|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    360|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 358, False: 2]
  |  |  ------------------
  ------------------
  398|    358|                return unexpected(e);
  399|    358|            }
  400|    360|        }
  401|       |
  402|   102k|        auto nothsep_source_view =
  403|   102k|            std::basic_string_view<CharT>{nothsep_source};
  404|   102k|        SCN_TRY(
  ------------------
  |  |   71|   102k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   102k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   102k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 278, False: 102k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    278|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    278|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    278|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    278|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    278|    }                                                  \
  |  |  |  |   70|   102k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|   102k|            nothsep_source_it,
  406|   102k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|   102k|                                prefix_result.parsed_base));
  408|       |
  409|   102k|        return ranges_polyfill::batch_next(
  410|   102k|            prefix_result.iterator,
  411|   102k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|   102k|                ranges::ssize(thsep_indices));
  413|   102k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   692k|    {
  335|   692k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   692k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   692k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   692k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   692k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 692k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   692k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   692k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   692k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   692k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 9.11k, False: 683k]
  ------------------
  339|  9.11k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  9.11k|                return unexpected_scan_error(
  341|  9.11k|                    scan_error::invalid_scanned_value,
  342|  9.11k|                    "Unexpected '-' sign when parsing an "
  343|  9.11k|                    "unsigned value");
  344|  9.11k|            }
  345|  9.11k|            else {
  346|  9.11k|                if (specs.type ==
  347|  9.11k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  9.11k|                    return unexpected_scan_error(
  349|  9.11k|                        scan_error::invalid_scanned_value,
  350|  9.11k|                        "'u'-option disallows negative values");
  351|  9.11k|                }
  352|  9.11k|            }
  353|  9.11k|        }
  354|       |
  355|   683k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 149k, False: 533k]
  ------------------
  356|   149k|            value = T{0};
  357|   149k|            return std::next(prefix_result.iterator);
  358|   149k|        }
  359|       |
  360|   533k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   533k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 423k, False: 110k]
  |  |  ------------------
  ------------------
  361|   423k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   423k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   423k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   423k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   423k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 116, False: 423k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    116|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    116|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    116|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    116|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    116|    }                                                  \
  |  |  |  |   70|   423k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   423k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   423k|                    parse_integer_digits_without_thsep(
  363|   423k|                        ranges::subrange{prefix_result.iterator,
  364|   423k|                                         ranges::end(range)},
  365|   423k|                        prefix_result.parsed_base));
  366|       |
  367|   423k|            auto buf = make_contiguous_buffer(
  368|   423k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   423k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   423k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   423k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   423k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   423k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 12.9k, False: 410k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  12.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  12.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  12.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  12.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  12.9k|    }                                                  \
  |  |  |  |   70|   423k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   410k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   410k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   410k|                                        prefix_result.parsed_base));
  372|       |
  373|   410k|            return ranges_polyfill::batch_next(
  374|   410k|                prefix_result.iterator,
  375|   410k|                ranges::distance(buf.view().begin(), result_it));
  376|   423k|        }
  377|       |
  378|   110k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|   110k|            localized_number_formatting_options<CharT>{loc};
  383|   110k|#endif
  384|       |
  385|   110k|        SCN_TRY(
  ------------------
  |  |   71|   110k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   110k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   110k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.58k, False: 108k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.58k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.58k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.58k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.58k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.58k|    }                                                  \
  |  |  |  |   70|   110k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   108k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|   108k|            parse_digits_result,
  387|   108k|            parse_integer_digits_with_thsep(
  388|   108k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|   108k|                prefix_result.parsed_base, locale_options));
  390|   108k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|   108k|            parse_digits_result;
  392|       |
  393|   108k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 366, False: 108k]
  ------------------
  394|    366|            if (auto e = check_thsep_grouping(
  395|    366|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    366|                    thsep_indices, locale_options.grouping);
  397|    366|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    366|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 364, False: 2]
  |  |  ------------------
  ------------------
  398|    364|                return unexpected(e);
  399|    364|            }
  400|    366|        }
  401|       |
  402|   108k|        auto nothsep_source_view =
  403|   108k|            std::basic_string_view<CharT>{nothsep_source};
  404|   108k|        SCN_TRY(
  ------------------
  |  |   71|   108k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   108k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   108k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   108k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 100, False: 108k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    100|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    100|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    100|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    100|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    100|    }                                                  \
  |  |  |  |   70|   108k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   108k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|   108k|            nothsep_source_it,
  406|   108k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|   108k|                                prefix_result.parsed_base));
  408|       |
  409|   108k|        return ranges_polyfill::batch_next(
  410|   108k|            prefix_result.iterator,
  411|   108k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|   108k|                ranges::ssize(thsep_indices));
  413|   108k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  32.2k|    {
  335|  32.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  32.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  32.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  32.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  32.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 32.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  32.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  32.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  32.2k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  32.2k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 32.2k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  32.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 32.2k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  32.2k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  32.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 27.6k, False: 4.61k]
  |  |  ------------------
  ------------------
  361|  27.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  27.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  27.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  27.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  27.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 23.0k, False: 4.61k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  23.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  23.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  23.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  23.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  23.0k|    }                                                  \
  |  |  |  |   70|  27.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.61k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  4.61k|                    parse_integer_digits_without_thsep(
  363|  4.61k|                        ranges::subrange{prefix_result.iterator,
  364|  4.61k|                                         ranges::end(range)},
  365|  4.61k|                        prefix_result.parsed_base));
  366|       |
  367|  4.61k|            auto buf = make_contiguous_buffer(
  368|  4.61k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  4.61k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  4.61k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.61k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.61k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 4.61k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  4.61k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.61k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  4.61k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  4.61k|                                        prefix_result.parsed_base));
  372|       |
  373|  4.61k|            return ranges_polyfill::batch_next(
  374|  4.61k|                prefix_result.iterator,
  375|  4.61k|                ranges::distance(buf.view().begin(), result_it));
  376|  4.61k|        }
  377|       |
  378|  4.61k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  4.61k|            localized_number_formatting_options<CharT>{loc};
  383|  4.61k|#endif
  384|       |
  385|  4.61k|        SCN_TRY(
  ------------------
  |  |   71|  4.61k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.61k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.61k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.61k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.61k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.61k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.61k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.61k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.61k|    }                                                  \
  |  |  |  |   70|  4.61k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  32.2k|    {
  335|  32.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  32.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  32.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  32.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  32.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 32.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  32.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  32.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  32.2k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  32.2k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 32.2k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  32.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 32.2k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  32.2k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  32.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 27.6k, False: 4.61k]
  |  |  ------------------
  ------------------
  361|  27.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  27.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  27.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  27.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  27.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 23.0k, False: 4.61k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  23.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  23.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  23.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  23.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  23.0k|    }                                                  \
  |  |  |  |   70|  27.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.61k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  4.61k|                    parse_integer_digits_without_thsep(
  363|  4.61k|                        ranges::subrange{prefix_result.iterator,
  364|  4.61k|                                         ranges::end(range)},
  365|  4.61k|                        prefix_result.parsed_base));
  366|       |
  367|  4.61k|            auto buf = make_contiguous_buffer(
  368|  4.61k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  4.61k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  4.61k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.61k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.61k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 4.61k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  4.61k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.61k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  4.61k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  4.61k|                                        prefix_result.parsed_base));
  372|       |
  373|  4.61k|            return ranges_polyfill::batch_next(
  374|  4.61k|                prefix_result.iterator,
  375|  4.61k|                ranges::distance(buf.view().begin(), result_it));
  376|  4.61k|        }
  377|       |
  378|  4.61k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  4.61k|            localized_number_formatting_options<CharT>{loc};
  383|  4.61k|#endif
  384|       |
  385|  4.61k|        SCN_TRY(
  ------------------
  |  |   71|  4.61k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.61k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.61k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.61k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.61k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.61k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.61k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.61k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.61k|    }                                                  \
  |  |  |  |   70|  4.61k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  32.2k|    {
  335|  32.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  32.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  32.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  32.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  32.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 32.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  32.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  32.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  32.2k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  32.2k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 32.2k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  32.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 32.2k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  32.2k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  32.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 27.6k, False: 4.61k]
  |  |  ------------------
  ------------------
  361|  27.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  27.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  27.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  27.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  27.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 23.0k, False: 4.61k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  23.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  23.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  23.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  23.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  23.0k|    }                                                  \
  |  |  |  |   70|  27.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.61k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  4.61k|                    parse_integer_digits_without_thsep(
  363|  4.61k|                        ranges::subrange{prefix_result.iterator,
  364|  4.61k|                                         ranges::end(range)},
  365|  4.61k|                        prefix_result.parsed_base));
  366|       |
  367|  4.61k|            auto buf = make_contiguous_buffer(
  368|  4.61k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  4.61k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  4.61k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.61k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.61k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 4.61k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  4.61k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.61k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  4.61k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  4.61k|                                        prefix_result.parsed_base));
  372|       |
  373|  4.61k|            return ranges_polyfill::batch_next(
  374|  4.61k|                prefix_result.iterator,
  375|  4.61k|                ranges::distance(buf.view().begin(), result_it));
  376|  4.61k|        }
  377|       |
  378|  4.61k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  4.61k|            localized_number_formatting_options<CharT>{loc};
  383|  4.61k|#endif
  384|       |
  385|  4.61k|        SCN_TRY(
  ------------------
  |  |   71|  4.61k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.61k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.61k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.61k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.61k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.61k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.61k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.61k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.61k|    }                                                  \
  |  |  |  |   70|  4.61k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  32.2k|    {
  335|  32.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  32.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  32.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  32.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  32.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 32.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  32.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  32.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  32.2k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  32.2k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 32.2k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  32.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 32.2k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  32.2k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  32.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 27.6k, False: 4.61k]
  |  |  ------------------
  ------------------
  361|  27.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  27.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  27.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  27.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  27.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 23.0k, False: 4.61k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  23.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  23.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  23.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  23.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  23.0k|    }                                                  \
  |  |  |  |   70|  27.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.61k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  4.61k|                    parse_integer_digits_without_thsep(
  363|  4.61k|                        ranges::subrange{prefix_result.iterator,
  364|  4.61k|                                         ranges::end(range)},
  365|  4.61k|                        prefix_result.parsed_base));
  366|       |
  367|  4.61k|            auto buf = make_contiguous_buffer(
  368|  4.61k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  4.61k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  4.61k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.61k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.61k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 4.61k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  4.61k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.61k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  4.61k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  4.61k|                                        prefix_result.parsed_base));
  372|       |
  373|  4.61k|            return ranges_polyfill::batch_next(
  374|  4.61k|                prefix_result.iterator,
  375|  4.61k|                ranges::distance(buf.view().begin(), result_it));
  376|  4.61k|        }
  377|       |
  378|  4.61k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  4.61k|            localized_number_formatting_options<CharT>{loc};
  383|  4.61k|#endif
  384|       |
  385|  4.61k|        SCN_TRY(
  ------------------
  |  |   71|  4.61k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.61k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.61k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.61k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.61k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.61k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.61k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.61k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.61k|    }                                                  \
  |  |  |  |   70|  4.61k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  32.2k|    {
  335|  32.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  32.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  32.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  32.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  32.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 32.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  32.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  32.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  32.2k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  32.2k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 32.2k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  32.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 32.2k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  32.2k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  32.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 27.6k, False: 4.61k]
  |  |  ------------------
  ------------------
  361|  27.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  27.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  27.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  27.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  27.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 23.0k, False: 4.61k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  23.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  23.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  23.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  23.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  23.0k|    }                                                  \
  |  |  |  |   70|  27.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.61k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  4.61k|                    parse_integer_digits_without_thsep(
  363|  4.61k|                        ranges::subrange{prefix_result.iterator,
  364|  4.61k|                                         ranges::end(range)},
  365|  4.61k|                        prefix_result.parsed_base));
  366|       |
  367|  4.61k|            auto buf = make_contiguous_buffer(
  368|  4.61k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  4.61k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  4.61k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.61k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.61k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 4.61k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  4.61k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.61k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  4.61k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  4.61k|                                        prefix_result.parsed_base));
  372|       |
  373|  4.61k|            return ranges_polyfill::batch_next(
  374|  4.61k|                prefix_result.iterator,
  375|  4.61k|                ranges::distance(buf.view().begin(), result_it));
  376|  4.61k|        }
  377|       |
  378|  4.61k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  4.61k|            localized_number_formatting_options<CharT>{loc};
  383|  4.61k|#endif
  384|       |
  385|  4.61k|        SCN_TRY(
  ------------------
  |  |   71|  4.61k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.61k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.61k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.61k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.61k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.61k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.61k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.61k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.61k|    }                                                  \
  |  |  |  |   70|  4.61k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  32.2k|    {
  335|  32.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  32.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  32.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  32.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  32.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 32.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  32.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  32.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  32.2k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  32.2k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 32.2k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  32.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 32.2k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  32.2k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  32.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 27.6k, False: 4.61k]
  |  |  ------------------
  ------------------
  361|  27.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  27.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  27.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  27.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  27.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 23.0k, False: 4.61k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  23.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  23.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  23.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  23.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  23.0k|    }                                                  \
  |  |  |  |   70|  27.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.61k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  4.61k|                    parse_integer_digits_without_thsep(
  363|  4.61k|                        ranges::subrange{prefix_result.iterator,
  364|  4.61k|                                         ranges::end(range)},
  365|  4.61k|                        prefix_result.parsed_base));
  366|       |
  367|  4.61k|            auto buf = make_contiguous_buffer(
  368|  4.61k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  4.61k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  4.61k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.61k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.61k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 4.61k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  4.61k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.61k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  4.61k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  4.61k|                                        prefix_result.parsed_base));
  372|       |
  373|  4.61k|            return ranges_polyfill::batch_next(
  374|  4.61k|                prefix_result.iterator,
  375|  4.61k|                ranges::distance(buf.view().begin(), result_it));
  376|  4.61k|        }
  377|       |
  378|  4.61k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  4.61k|            localized_number_formatting_options<CharT>{loc};
  383|  4.61k|#endif
  384|       |
  385|  4.61k|        SCN_TRY(
  ------------------
  |  |   71|  4.61k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.61k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.61k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.61k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.61k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.61k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.61k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.61k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.61k|    }                                                  \
  |  |  |  |   70|  4.61k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   214k|    {
  324|   214k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   214k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   214k|        return read_default_with_base(range, value, 0);
  326|   214k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   214k|    {
  287|   214k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   214k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   214k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   214k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   214k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 214k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   214k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   214k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   214k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   214k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   214k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   214k|                return unexpected_scan_error(
  293|   214k|                    scan_error::invalid_scanned_value,
  294|   214k|                    "Unexpected '-' sign when parsing an "
  295|   214k|                    "unsigned value");
  296|   214k|            }
  297|   214k|        }
  298|       |
  299|   214k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 76.1k, False: 137k]
  ------------------
  300|  76.1k|            value = T{0};
  301|  76.1k|            return std::next(prefix_result.iterator);
  302|  76.1k|        }
  303|       |
  304|   275k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   137k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   137k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   137k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 150, False: 137k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    150|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    150|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    150|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    150|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    150|    }                                                  \
  |  |  |  |   70|   137k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   137k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   275k|                                     ranges::subrange{prefix_result.iterator,
  306|   275k|                                                      ranges::end(range)},
  307|   275k|                                     prefix_result.parsed_base));
  308|       |
  309|   275k|        auto buf = make_contiguous_buffer(
  310|   275k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   275k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   137k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   137k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   137k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 19.5k, False: 118k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  19.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  19.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  19.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  19.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  19.5k|    }                                                  \
  |  |  |  |   70|   137k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   118k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   118k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   118k|                                    prefix_result.parsed_base));
  314|       |
  315|   118k|        return ranges_polyfill::batch_next(
  316|   118k|            prefix_result.iterator,
  317|   118k|            ranges::distance(buf.view().begin(), result_it));
  318|   275k|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESE_i:
  120|  5.38M|{
  121|  5.38M|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|  5.38M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.38M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.38M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  5.38M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 5.38M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  5.38M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  5.38M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|  5.38M|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|  5.38M|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|  5.38M|        parse_integer_base_prefix(
  126|  5.38M|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|  5.38M|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 2.03M, False: 3.34M]
  ------------------
  129|  2.03M|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 3.26k, False: 2.03M]
  ------------------
  130|  2.03M|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 1.33M, False: 699k]
  ------------------
  131|  1.33M|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|  1.33M|                digits_begin_it, ranges::begin(range));
  133|  1.33M|        }
  134|   699k|        else {
  135|   699k|            parsed_zero = false;
  136|   699k|        }
  137|  2.03M|    }
  138|  3.34M|    else {
  139|  3.34M|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 7.49k, False: 3.34M]
  ------------------
  140|  3.34M|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 540k, False: 2.80M]
  ------------------
  141|   547k|            digits_begin_it = base_prefix_begin_it;
  142|   547k|        }
  143|  3.34M|    }
  144|       |
  145|  5.38M|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 5.15M, False: 228k]
  ------------------
  146|  5.15M|        sign = sign_type::plus_sign;
  147|  5.15M|    }
  148|  5.38M|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|  5.38M|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|  5.38M|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_i:
   87|  5.38M|{
   88|  5.38M|    switch (base) {
   89|   158k|        case 2:
  ------------------
  |  Branch (89:9): [True: 158k, False: 5.22M]
  ------------------
   90|       |            // allow 0b/0B
   91|   158k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|   158k|                    false};
   93|       |
   94|   255k|        case 8: {
  ------------------
  |  Branch (94:9): [True: 255k, False: 5.12M]
  ------------------
   95|       |            // allow 0o/0O/0
   96|   255k|            bool zero_parsed = false;
   97|   255k|            auto it = apply_opt(
   98|   255k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|   255k|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|   748k|        case 16:
  ------------------
  |  Branch (102:9): [True: 748k, False: 4.63M]
  ------------------
  103|       |            // allow 0x/0X
  104|   748k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|   748k|                    false};
  106|       |
  107|  3.51M|        case 0:
  ------------------
  |  Branch (107:9): [True: 3.51M, False: 1.86M]
  ------------------
  108|       |            // detect base
  109|  3.51M|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  248|  3.51M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|   707k|        default:
  ------------------
  |  Branch (111:9): [True: 707k, False: 4.67M]
  ------------------
  112|       |            // no base prefix allowed
  113|   707k|            return {ranges::begin(range), base, false};
  114|  5.38M|    }
  115|  5.38M|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   37|  3.63M|{
   38|  3.63M|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  248|  3.63M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|  3.63M|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_Rb:
   52|  3.73M|{
   53|  3.73M|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 36.8k, False: 3.69M]
  ------------------
   54|  36.8k|        return *r;
   55|  36.8k|    }
   56|       |
   57|  3.69M|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 2.03M, False: 1.66M]
  ------------------
   58|  2.03M|        zero_parsed = true;
   59|  2.03M|        return *r;
   60|  2.03M|    }
   61|       |
   62|  1.66M|    return unexpected(parse_error::error);
   63|  3.69M|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   44|  4.26M|{
   45|  4.26M|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|  4.26M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|  4.26M|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_:
   68|  3.51M|{
   69|  3.51M|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 33.9k, False: 3.48M]
  ------------------
   70|  33.9k|        return {*r, 16, false};
   71|  33.9k|    }
   72|  3.48M|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 1.81k, False: 3.47M]
  ------------------
   73|  1.81k|        return {*r, 2, false};
   74|  1.81k|    }
   75|  3.47M|    {
   76|  3.47M|        bool zero_parsed{false};
   77|  3.47M|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 1.94M, False: 1.53M]
  ------------------
   78|  1.94M|            return {*r, 8, zero_parsed};
   79|  1.94M|        }
   80|  3.47M|    }
   81|  1.53M|    return {ranges::begin(range), 10, false};
   82|  3.47M|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESD_i:
  155|  3.38M|{
  156|  3.38M|    using char_type = detail::char_t<Range>;
  157|       |
  158|  3.38M|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|  3.38M|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  3.38M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.50k, False: 3.37M]
  |  |  ------------------
  ------------------
  160|  2.50k|            return unexpected_scan_error(
  161|  2.50k|                scan_error::invalid_scanned_value,
  162|  2.50k|                "Failed to parse integer: No digits found");
  163|  2.50k|        }
  164|  3.37M|        return ranges::end(range);
  165|  3.38M|    }
  166|  3.38M|    else {
  167|  3.38M|        return read_while1_code_unit(
  168|  3.38M|                   range, [&](char_type ch)
  169|  3.38M|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|  3.38M|            .transform_error(map_parse_error_to_scan_error(
  171|  3.38M|                scan_error::invalid_scanned_value,
  172|  3.38M|                "Failed to parse integer: No digits found"));
  173|  3.38M|    }
  174|  3.38M|}
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   279k|    {
  324|   279k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   279k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   279k|        return read_default_with_base(range, value, 0);
  326|   279k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   279k|    {
  287|   279k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   279k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   279k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   279k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   279k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 279k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   279k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   279k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   279k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   279k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   279k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   279k|                return unexpected_scan_error(
  293|   279k|                    scan_error::invalid_scanned_value,
  294|   279k|                    "Unexpected '-' sign when parsing an "
  295|   279k|                    "unsigned value");
  296|   279k|            }
  297|   279k|        }
  298|       |
  299|   279k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 100k, False: 179k]
  ------------------
  300|   100k|            value = T{0};
  301|   100k|            return std::next(prefix_result.iterator);
  302|   100k|        }
  303|       |
  304|   358k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   179k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   179k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   179k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   179k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 183, False: 179k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    183|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    183|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    183|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    183|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    183|    }                                                  \
  |  |  |  |   70|   179k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   179k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   358k|                                     ranges::subrange{prefix_result.iterator,
  306|   358k|                                                      ranges::end(range)},
  307|   358k|                                     prefix_result.parsed_base));
  308|       |
  309|   358k|        auto buf = make_contiguous_buffer(
  310|   358k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   358k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   179k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   179k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   179k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   179k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 18.7k, False: 160k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  18.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  18.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  18.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  18.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  18.7k|    }                                                  \
  |  |  |  |   70|   179k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   160k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   160k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   160k|                                    prefix_result.parsed_base));
  314|       |
  315|   160k|        return ranges_polyfill::batch_next(
  316|   160k|            prefix_result.iterator,
  317|   160k|            ranges::distance(buf.view().begin(), result_it));
  318|   358k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   294k|    {
  324|   294k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   294k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   294k|        return read_default_with_base(range, value, 0);
  326|   294k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   294k|    {
  287|   294k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   294k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   294k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   294k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   294k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 294k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   294k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   294k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   294k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   294k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   294k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   294k|                return unexpected_scan_error(
  293|   294k|                    scan_error::invalid_scanned_value,
  294|   294k|                    "Unexpected '-' sign when parsing an "
  295|   294k|                    "unsigned value");
  296|   294k|            }
  297|   294k|        }
  298|       |
  299|   294k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 102k, False: 192k]
  ------------------
  300|   102k|            value = T{0};
  301|   102k|            return std::next(prefix_result.iterator);
  302|   102k|        }
  303|       |
  304|   383k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   192k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   192k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   192k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   192k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 192, False: 191k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    192|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    192|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    192|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    192|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    192|    }                                                  \
  |  |  |  |   70|   192k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   191k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   383k|                                     ranges::subrange{prefix_result.iterator,
  306|   383k|                                                      ranges::end(range)},
  307|   383k|                                     prefix_result.parsed_base));
  308|       |
  309|   383k|        auto buf = make_contiguous_buffer(
  310|   383k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   383k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   191k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   191k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   191k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   191k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 18.5k, False: 173k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  18.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  18.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  18.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  18.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  18.5k|    }                                                  \
  |  |  |  |   70|   191k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   173k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   173k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   173k|                                    prefix_result.parsed_base));
  314|       |
  315|   173k|        return ranges_polyfill::batch_next(
  316|   173k|            prefix_result.iterator,
  317|   173k|            ranges::distance(buf.view().begin(), result_it));
  318|   383k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   218k|    {
  324|   218k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   218k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   218k|        return read_default_with_base(range, value, 0);
  326|   218k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   218k|    {
  287|   218k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   218k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   218k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   218k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   218k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 218k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   218k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   218k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   218k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   218k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   218k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 1.84k, False: 216k]
  ------------------
  292|  1.84k|                return unexpected_scan_error(
  293|  1.84k|                    scan_error::invalid_scanned_value,
  294|  1.84k|                    "Unexpected '-' sign when parsing an "
  295|  1.84k|                    "unsigned value");
  296|  1.84k|            }
  297|   218k|        }
  298|       |
  299|   216k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 79.6k, False: 136k]
  ------------------
  300|  79.6k|            value = T{0};
  301|  79.6k|            return std::next(prefix_result.iterator);
  302|  79.6k|        }
  303|       |
  304|   273k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   136k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   136k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   136k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 51, False: 136k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     51|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     51|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     51|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     51|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     51|    }                                                  \
  |  |  |  |   70|   136k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   136k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   273k|                                     ranges::subrange{prefix_result.iterator,
  306|   273k|                                                      ranges::end(range)},
  307|   273k|                                     prefix_result.parsed_base));
  308|       |
  309|   273k|        auto buf = make_contiguous_buffer(
  310|   273k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   273k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   136k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   136k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   136k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 17.8k, False: 119k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  17.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  17.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  17.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  17.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  17.8k|    }                                                  \
  |  |  |  |   70|   136k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   119k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   119k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   119k|                                    prefix_result.parsed_base));
  314|       |
  315|   119k|        return ranges_polyfill::batch_next(
  316|   119k|            prefix_result.iterator,
  317|   119k|            ranges::distance(buf.view().begin(), result_it));
  318|   273k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   245k|    {
  324|   245k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   245k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   245k|        return read_default_with_base(range, value, 0);
  326|   245k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   245k|    {
  287|   245k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   245k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   245k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   245k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   245k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 245k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   245k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   245k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   245k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   245k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   245k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 1.94k, False: 243k]
  ------------------
  292|  1.94k|                return unexpected_scan_error(
  293|  1.94k|                    scan_error::invalid_scanned_value,
  294|  1.94k|                    "Unexpected '-' sign when parsing an "
  295|  1.94k|                    "unsigned value");
  296|  1.94k|            }
  297|   245k|        }
  298|       |
  299|   243k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 88.5k, False: 155k]
  ------------------
  300|  88.5k|            value = T{0};
  301|  88.5k|            return std::next(prefix_result.iterator);
  302|  88.5k|        }
  303|       |
  304|   309k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   155k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   155k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   155k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 63, False: 154k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     63|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     63|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     63|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     63|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     63|    }                                                  \
  |  |  |  |   70|   155k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   154k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   309k|                                     ranges::subrange{prefix_result.iterator,
  306|   309k|                                                      ranges::end(range)},
  307|   309k|                                     prefix_result.parsed_base));
  308|       |
  309|   309k|        auto buf = make_contiguous_buffer(
  310|   309k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   309k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   154k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   154k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   154k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 17.3k, False: 137k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  17.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  17.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  17.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  17.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  17.3k|    }                                                  \
  |  |  |  |   70|   154k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   137k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   137k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   137k|                                    prefix_result.parsed_base));
  314|       |
  315|   137k|        return ranges_polyfill::batch_next(
  316|   137k|            prefix_result.iterator,
  317|   137k|            ranges::distance(buf.view().begin(), result_it));
  318|   309k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   254k|    {
  324|   254k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   254k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   254k|        return read_default_with_base(range, value, 0);
  326|   254k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   254k|    {
  287|   254k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   254k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   254k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   254k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   254k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 254k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   254k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   254k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   254k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   254k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   254k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 1.99k, False: 252k]
  ------------------
  292|  1.99k|                return unexpected_scan_error(
  293|  1.99k|                    scan_error::invalid_scanned_value,
  294|  1.99k|                    "Unexpected '-' sign when parsing an "
  295|  1.99k|                    "unsigned value");
  296|  1.99k|            }
  297|   254k|        }
  298|       |
  299|   252k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 90.2k, False: 162k]
  ------------------
  300|  90.2k|            value = T{0};
  301|  90.2k|            return std::next(prefix_result.iterator);
  302|  90.2k|        }
  303|       |
  304|   325k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   162k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   162k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   162k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   162k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 63, False: 162k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     63|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     63|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     63|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     63|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     63|    }                                                  \
  |  |  |  |   70|   162k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   162k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   325k|                                     ranges::subrange{prefix_result.iterator,
  306|   325k|                                                      ranges::end(range)},
  307|   325k|                                     prefix_result.parsed_base));
  308|       |
  309|   325k|        auto buf = make_contiguous_buffer(
  310|   325k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   325k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   162k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   162k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   162k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   162k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 17.1k, False: 145k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  17.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  17.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  17.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  17.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  17.1k|    }                                                  \
  |  |  |  |   70|   162k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   145k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   145k|                                    prefix_result.parsed_base));
  314|       |
  315|   145k|        return ranges_polyfill::batch_next(
  316|   145k|            prefix_result.iterator,
  317|   145k|            ranges::distance(buf.view().begin(), result_it));
  318|   325k|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSC_12basic_stringIT0_NSC_11char_traitsISJ_EENSC_9allocatorISJ_EEEENSI_IcNSK_IcEENSM_IcEEEEEEEEESF_iRKNS1_35localized_number_formatting_optionsISJ_EE:
  184|   640k|{
  185|   640k|    std::basic_string<CharT> output;
  186|   640k|    std::string thsep_indices;
  187|   640k|    auto it = ranges::begin(range);
  188|   640k|    bool digit_matched = false;
  189|  1.85M|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 1.84M, False: 7.54k]
  ------------------
  190|  1.84M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 35.9k, False: 1.81M]
  ------------------
  191|  35.9k|            thsep_indices.push_back(static_cast<char>(
  192|  35.9k|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|  35.9k|        }
  194|  1.81M|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 632k, False: 1.18M]
  ------------------
  195|   632k|            break;
  196|   632k|        }
  197|  1.18M|        else {
  198|  1.18M|            output.push_back(*it);
  199|  1.18M|            digit_matched = true;
  200|  1.18M|        }
  201|  1.84M|    }
  202|   640k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  153|   640k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 66.9k, False: 573k]
  |  |  ------------------
  ------------------
  203|  66.9k|        return unexpected_scan_error(
  204|  66.9k|            scan_error::invalid_scanned_value,
  205|  66.9k|            "Failed to parse integer: No digits found");
  206|  66.9k|    }
  207|   573k|    return std::tuple{it, output, thsep_indices};
  208|   640k|}
_ZN3scn2v24impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
  279|  4.45M|    {
  280|  4.45M|        detail::check_int_type_specs(specs, eh);
  281|  4.45M|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   497k|    {
  335|   497k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   497k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   497k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   497k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   497k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 497k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   497k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   497k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   497k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   497k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 30.8k, False: 466k]
  ------------------
  339|  30.8k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  30.8k|                return unexpected_scan_error(
  341|  30.8k|                    scan_error::invalid_scanned_value,
  342|  30.8k|                    "Unexpected '-' sign when parsing an "
  343|  30.8k|                    "unsigned value");
  344|  30.8k|            }
  345|  30.8k|            else {
  346|  30.8k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 30.8k]
  ------------------
  347|  30.8k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  30.8k|            }
  353|  30.8k|        }
  354|       |
  355|   497k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 114k, False: 382k]
  ------------------
  356|   114k|            value = T{0};
  357|   114k|            return std::next(prefix_result.iterator);
  358|   114k|        }
  359|       |
  360|   382k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   382k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 290k, False: 91.6k]
  |  |  ------------------
  ------------------
  361|   290k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   290k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   290k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   290k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   290k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 392, False: 290k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    392|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    392|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    392|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    392|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    392|    }                                                  \
  |  |  |  |   70|   290k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   290k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   290k|                    parse_integer_digits_without_thsep(
  363|   290k|                        ranges::subrange{prefix_result.iterator,
  364|   290k|                                         ranges::end(range)},
  365|   290k|                        prefix_result.parsed_base));
  366|       |
  367|   290k|            auto buf = make_contiguous_buffer(
  368|   290k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   290k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   290k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   290k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   290k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   290k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 66.2k, False: 224k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  66.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  66.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  66.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  66.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  66.2k|    }                                                  \
  |  |  |  |   70|   290k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   224k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   224k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   224k|                                        prefix_result.parsed_base));
  372|       |
  373|   224k|            return ranges_polyfill::batch_next(
  374|   224k|                prefix_result.iterator,
  375|   224k|                ranges::distance(buf.view().begin(), result_it));
  376|   290k|        }
  377|       |
  378|  91.6k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  91.6k|            localized_number_formatting_options<CharT>{loc};
  383|  91.6k|#endif
  384|       |
  385|  91.6k|        SCN_TRY(
  ------------------
  |  |   71|  91.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  91.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  91.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  91.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 11.0k, False: 80.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  11.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  11.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  11.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  11.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  11.0k|    }                                                  \
  |  |  |  |   70|  91.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  80.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  80.5k|            parse_digits_result,
  387|  80.5k|            parse_integer_digits_with_thsep(
  388|  80.5k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  80.5k|                prefix_result.parsed_base, locale_options));
  390|  80.5k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  80.5k|            parse_digits_result;
  392|       |
  393|  80.5k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 550, False: 80.0k]
  ------------------
  394|    550|            if (auto e = check_thsep_grouping(
  395|    550|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    550|                    thsep_indices, locale_options.grouping);
  397|    550|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    550|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 540, False: 10]
  |  |  ------------------
  ------------------
  398|    540|                return unexpected(e);
  399|    540|            }
  400|    550|        }
  401|       |
  402|  80.0k|        auto nothsep_source_view =
  403|  80.0k|            std::basic_string_view<CharT>{nothsep_source};
  404|  80.0k|        SCN_TRY(
  ------------------
  |  |   71|  80.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  80.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  80.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  80.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.52k, False: 78.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.52k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.52k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.52k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.52k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.52k|    }                                                  \
  |  |  |  |   70|  80.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  78.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  78.5k|            nothsep_source_it,
  406|  78.5k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  78.5k|                                prefix_result.parsed_base));
  408|       |
  409|  78.5k|        return ranges_polyfill::batch_next(
  410|  78.5k|            prefix_result.iterator,
  411|  78.5k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  78.5k|                ranges::ssize(thsep_indices));
  413|  80.0k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   747k|    {
  335|   747k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   747k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   747k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   747k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   747k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 747k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   747k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   747k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   747k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   747k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 40.0k, False: 707k]
  ------------------
  339|  40.0k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  40.0k|                return unexpected_scan_error(
  341|  40.0k|                    scan_error::invalid_scanned_value,
  342|  40.0k|                    "Unexpected '-' sign when parsing an "
  343|  40.0k|                    "unsigned value");
  344|  40.0k|            }
  345|  40.0k|            else {
  346|  40.0k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 40.0k]
  ------------------
  347|  40.0k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  40.0k|            }
  353|  40.0k|        }
  354|       |
  355|   747k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 148k, False: 598k]
  ------------------
  356|   148k|            value = T{0};
  357|   148k|            return std::next(prefix_result.iterator);
  358|   148k|        }
  359|       |
  360|   598k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   598k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 479k, False: 119k]
  |  |  ------------------
  ------------------
  361|   479k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   479k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   479k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   479k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   479k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 486, False: 478k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    486|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    486|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    486|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    486|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    486|    }                                                  \
  |  |  |  |   70|   479k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   478k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   478k|                    parse_integer_digits_without_thsep(
  363|   478k|                        ranges::subrange{prefix_result.iterator,
  364|   478k|                                         ranges::end(range)},
  365|   478k|                        prefix_result.parsed_base));
  366|       |
  367|   478k|            auto buf = make_contiguous_buffer(
  368|   478k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   478k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   478k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   478k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   478k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   478k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 64.3k, False: 414k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  64.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  64.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  64.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  64.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  64.3k|    }                                                  \
  |  |  |  |   70|   478k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   414k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   414k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   414k|                                        prefix_result.parsed_base));
  372|       |
  373|   414k|            return ranges_polyfill::batch_next(
  374|   414k|                prefix_result.iterator,
  375|   414k|                ranges::distance(buf.view().begin(), result_it));
  376|   478k|        }
  377|       |
  378|   119k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|   119k|            localized_number_formatting_options<CharT>{loc};
  383|   119k|#endif
  384|       |
  385|   119k|        SCN_TRY(
  ------------------
  |  |   71|   119k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   119k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   119k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   119k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 11.5k, False: 107k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  11.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  11.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  11.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  11.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  11.5k|    }                                                  \
  |  |  |  |   70|   119k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|   107k|            parse_digits_result,
  387|   107k|            parse_integer_digits_with_thsep(
  388|   107k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|   107k|                prefix_result.parsed_base, locale_options));
  390|   107k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|   107k|            parse_digits_result;
  392|       |
  393|   107k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 650, False: 107k]
  ------------------
  394|    650|            if (auto e = check_thsep_grouping(
  395|    650|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    650|                    thsep_indices, locale_options.grouping);
  397|    650|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    650|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 640, False: 10]
  |  |  ------------------
  ------------------
  398|    640|                return unexpected(e);
  399|    640|            }
  400|    650|        }
  401|       |
  402|   107k|        auto nothsep_source_view =
  403|   107k|            std::basic_string_view<CharT>{nothsep_source};
  404|   107k|        SCN_TRY(
  ------------------
  |  |   71|   107k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   107k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   107k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 434, False: 106k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    434|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    434|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    434|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    434|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    434|    }                                                  \
  |  |  |  |   70|   107k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   106k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|   106k|            nothsep_source_it,
  406|   106k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|   106k|                                prefix_result.parsed_base));
  408|       |
  409|   106k|        return ranges_polyfill::batch_next(
  410|   106k|            prefix_result.iterator,
  411|   106k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|   106k|                ranges::ssize(thsep_indices));
  413|   107k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   779k|    {
  335|   779k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   779k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   779k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   779k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   779k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 779k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   779k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   779k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   779k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   779k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 40.3k, False: 738k]
  ------------------
  339|  40.3k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  40.3k|                return unexpected_scan_error(
  341|  40.3k|                    scan_error::invalid_scanned_value,
  342|  40.3k|                    "Unexpected '-' sign when parsing an "
  343|  40.3k|                    "unsigned value");
  344|  40.3k|            }
  345|  40.3k|            else {
  346|  40.3k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 40.3k]
  ------------------
  347|  40.3k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  40.3k|            }
  353|  40.3k|        }
  354|       |
  355|   779k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 152k, False: 626k]
  ------------------
  356|   152k|            value = T{0};
  357|   152k|            return std::next(prefix_result.iterator);
  358|   152k|        }
  359|       |
  360|   626k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   626k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 499k, False: 127k]
  |  |  ------------------
  ------------------
  361|   499k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   499k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   499k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   499k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   499k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 512, False: 498k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    512|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    512|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    512|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    512|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    512|    }                                                  \
  |  |  |  |   70|   499k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   498k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   498k|                    parse_integer_digits_without_thsep(
  363|   498k|                        ranges::subrange{prefix_result.iterator,
  364|   498k|                                         ranges::end(range)},
  365|   498k|                        prefix_result.parsed_base));
  366|       |
  367|   498k|            auto buf = make_contiguous_buffer(
  368|   498k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   498k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   498k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   498k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   498k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   498k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 64.0k, False: 434k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  64.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  64.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  64.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  64.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  64.0k|    }                                                  \
  |  |  |  |   70|   498k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   434k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   434k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   434k|                                        prefix_result.parsed_base));
  372|       |
  373|   434k|            return ranges_polyfill::batch_next(
  374|   434k|                prefix_result.iterator,
  375|   434k|                ranges::distance(buf.view().begin(), result_it));
  376|   498k|        }
  377|       |
  378|   127k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|   127k|            localized_number_formatting_options<CharT>{loc};
  383|   127k|#endif
  384|       |
  385|   127k|        SCN_TRY(
  ------------------
  |  |   71|   127k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   127k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   127k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 11.6k, False: 115k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  11.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  11.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  11.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  11.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  11.6k|    }                                                  \
  |  |  |  |   70|   127k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   115k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|   115k|            parse_digits_result,
  387|   115k|            parse_integer_digits_with_thsep(
  388|   115k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|   115k|                prefix_result.parsed_base, locale_options));
  390|   115k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|   115k|            parse_digits_result;
  392|       |
  393|   115k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 684, False: 115k]
  ------------------
  394|    684|            if (auto e = check_thsep_grouping(
  395|    684|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    684|                    thsep_indices, locale_options.grouping);
  397|    684|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    684|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 672, False: 12]
  |  |  ------------------
  ------------------
  398|    672|                return unexpected(e);
  399|    672|            }
  400|    684|        }
  401|       |
  402|   115k|        auto nothsep_source_view =
  403|   115k|            std::basic_string_view<CharT>{nothsep_source};
  404|   115k|        SCN_TRY(
  ------------------
  |  |   71|   115k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   115k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   115k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   115k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 176, False: 114k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    176|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    176|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    176|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    176|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    176|    }                                                  \
  |  |  |  |   70|   115k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   114k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|   114k|            nothsep_source_it,
  406|   114k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|   114k|                                prefix_result.parsed_base));
  408|       |
  409|   114k|        return ranges_polyfill::batch_next(
  410|   114k|            prefix_result.iterator,
  411|   114k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|   114k|                ranges::ssize(thsep_indices));
  413|   115k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   526k|    {
  335|   526k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   526k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   526k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   526k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   526k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 526k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   526k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   526k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   526k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   526k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 6.49k, False: 520k]
  ------------------
  339|  6.49k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  6.49k|                return unexpected_scan_error(
  341|  6.49k|                    scan_error::invalid_scanned_value,
  342|  6.49k|                    "Unexpected '-' sign when parsing an "
  343|  6.49k|                    "unsigned value");
  344|  6.49k|            }
  345|  6.49k|            else {
  346|  6.49k|                if (specs.type ==
  347|  6.49k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  6.49k|                    return unexpected_scan_error(
  349|  6.49k|                        scan_error::invalid_scanned_value,
  350|  6.49k|                        "'u'-option disallows negative values");
  351|  6.49k|                }
  352|  6.49k|            }
  353|  6.49k|        }
  354|       |
  355|   520k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 118k, False: 401k]
  ------------------
  356|   118k|            value = T{0};
  357|   118k|            return std::next(prefix_result.iterator);
  358|   118k|        }
  359|       |
  360|   401k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   401k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 310k, False: 91.0k]
  |  |  ------------------
  ------------------
  361|   310k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   310k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   310k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   310k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   310k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 120, False: 310k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    120|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    120|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    120|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    120|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    120|    }                                                  \
  |  |  |  |   70|   310k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   310k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   310k|                    parse_integer_digits_without_thsep(
  363|   310k|                        ranges::subrange{prefix_result.iterator,
  364|   310k|                                         ranges::end(range)},
  365|   310k|                        prefix_result.parsed_base));
  366|       |
  367|   310k|            auto buf = make_contiguous_buffer(
  368|   310k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   310k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   310k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   310k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   310k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   310k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 61.4k, False: 248k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  61.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  61.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  61.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  61.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  61.4k|    }                                                  \
  |  |  |  |   70|   310k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   248k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   248k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   248k|                                        prefix_result.parsed_base));
  372|       |
  373|   248k|            return ranges_polyfill::batch_next(
  374|   248k|                prefix_result.iterator,
  375|   248k|                ranges::distance(buf.view().begin(), result_it));
  376|   310k|        }
  377|       |
  378|  91.0k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  91.0k|            localized_number_formatting_options<CharT>{loc};
  383|  91.0k|#endif
  384|       |
  385|  91.0k|        SCN_TRY(
  ------------------
  |  |   71|  91.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  91.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  91.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  91.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10.7k, False: 80.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  10.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  10.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  10.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  10.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  10.7k|    }                                                  \
  |  |  |  |   70|  91.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  80.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  80.2k|            parse_digits_result,
  387|  80.2k|            parse_integer_digits_with_thsep(
  388|  80.2k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  80.2k|                prefix_result.parsed_base, locale_options));
  390|  80.2k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  80.2k|            parse_digits_result;
  392|       |
  393|  80.2k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 396, False: 79.8k]
  ------------------
  394|    396|            if (auto e = check_thsep_grouping(
  395|    396|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    396|                    thsep_indices, locale_options.grouping);
  397|    396|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    396|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 394, False: 2]
  |  |  ------------------
  ------------------
  398|    394|                return unexpected(e);
  399|    394|            }
  400|    396|        }
  401|       |
  402|  79.8k|        auto nothsep_source_view =
  403|  79.8k|            std::basic_string_view<CharT>{nothsep_source};
  404|  79.8k|        SCN_TRY(
  ------------------
  |  |   71|  79.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  79.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  79.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  79.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 794, False: 79.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    794|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    794|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    794|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    794|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    794|    }                                                  \
  |  |  |  |   70|  79.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  79.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  79.0k|            nothsep_source_it,
  406|  79.0k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  79.0k|                                prefix_result.parsed_base));
  408|       |
  409|  79.0k|        return ranges_polyfill::batch_next(
  410|  79.0k|            prefix_result.iterator,
  411|  79.0k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  79.0k|                ranges::ssize(thsep_indices));
  413|  79.8k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   652k|    {
  335|   652k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   652k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   652k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   652k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   652k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 652k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   652k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   652k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   652k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   652k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 6.89k, False: 645k]
  ------------------
  339|  6.89k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  6.89k|                return unexpected_scan_error(
  341|  6.89k|                    scan_error::invalid_scanned_value,
  342|  6.89k|                    "Unexpected '-' sign when parsing an "
  343|  6.89k|                    "unsigned value");
  344|  6.89k|            }
  345|  6.89k|            else {
  346|  6.89k|                if (specs.type ==
  347|  6.89k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  6.89k|                    return unexpected_scan_error(
  349|  6.89k|                        scan_error::invalid_scanned_value,
  350|  6.89k|                        "'u'-option disallows negative values");
  351|  6.89k|                }
  352|  6.89k|            }
  353|  6.89k|        }
  354|       |
  355|   645k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 130k, False: 514k]
  ------------------
  356|   130k|            value = T{0};
  357|   130k|            return std::next(prefix_result.iterator);
  358|   130k|        }
  359|       |
  360|   514k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   514k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 411k, False: 103k]
  |  |  ------------------
  ------------------
  361|   411k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   411k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   411k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   411k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   411k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 146, False: 411k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    146|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    146|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    146|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    146|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    146|    }                                                  \
  |  |  |  |   70|   411k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   411k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   411k|                    parse_integer_digits_without_thsep(
  363|   411k|                        ranges::subrange{prefix_result.iterator,
  364|   411k|                                         ranges::end(range)},
  365|   411k|                        prefix_result.parsed_base));
  366|       |
  367|   411k|            auto buf = make_contiguous_buffer(
  368|   411k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   411k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   411k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   411k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   411k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   411k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 60.0k, False: 351k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  60.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  60.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  60.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  60.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  60.0k|    }                                                  \
  |  |  |  |   70|   411k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   351k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   351k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   351k|                                        prefix_result.parsed_base));
  372|       |
  373|   351k|            return ranges_polyfill::batch_next(
  374|   351k|                prefix_result.iterator,
  375|   351k|                ranges::distance(buf.view().begin(), result_it));
  376|   411k|        }
  377|       |
  378|   103k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|   103k|            localized_number_formatting_options<CharT>{loc};
  383|   103k|#endif
  384|       |
  385|   103k|        SCN_TRY(
  ------------------
  |  |   71|   103k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   103k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   103k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10.9k, False: 92.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  10.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  10.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  10.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  10.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  10.9k|    }                                                  \
  |  |  |  |   70|   103k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  92.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  92.0k|            parse_digits_result,
  387|  92.0k|            parse_integer_digits_with_thsep(
  388|  92.0k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  92.0k|                prefix_result.parsed_base, locale_options));
  390|  92.0k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  92.0k|            parse_digits_result;
  392|       |
  393|  92.0k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 434, False: 91.6k]
  ------------------
  394|    434|            if (auto e = check_thsep_grouping(
  395|    434|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    434|                    thsep_indices, locale_options.grouping);
  397|    434|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    434|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 432, False: 2]
  |  |  ------------------
  ------------------
  398|    432|                return unexpected(e);
  399|    432|            }
  400|    434|        }
  401|       |
  402|  91.6k|        auto nothsep_source_view =
  403|  91.6k|            std::basic_string_view<CharT>{nothsep_source};
  404|  91.6k|        SCN_TRY(
  ------------------
  |  |   71|  91.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  91.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  91.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  91.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 212, False: 91.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    212|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    212|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    212|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    212|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    212|    }                                                  \
  |  |  |  |   70|  91.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  91.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  91.4k|            nothsep_source_it,
  406|  91.4k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  91.4k|                                prefix_result.parsed_base));
  408|       |
  409|  91.4k|        return ranges_polyfill::batch_next(
  410|  91.4k|            prefix_result.iterator,
  411|  91.4k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  91.4k|                ranges::ssize(thsep_indices));
  413|  91.6k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   674k|    {
  335|   674k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   674k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   674k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   674k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   674k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 674k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   674k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   674k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   674k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   674k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 7.03k, False: 667k]
  ------------------
  339|  7.03k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  7.03k|                return unexpected_scan_error(
  341|  7.03k|                    scan_error::invalid_scanned_value,
  342|  7.03k|                    "Unexpected '-' sign when parsing an "
  343|  7.03k|                    "unsigned value");
  344|  7.03k|            }
  345|  7.03k|            else {
  346|  7.03k|                if (specs.type ==
  347|  7.03k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  7.03k|                    return unexpected_scan_error(
  349|  7.03k|                        scan_error::invalid_scanned_value,
  350|  7.03k|                        "'u'-option disallows negative values");
  351|  7.03k|                }
  352|  7.03k|            }
  353|  7.03k|        }
  354|       |
  355|   667k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 132k, False: 534k]
  ------------------
  356|   132k|            value = T{0};
  357|   132k|            return std::next(prefix_result.iterator);
  358|   132k|        }
  359|       |
  360|   534k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   534k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 426k, False: 108k]
  |  |  ------------------
  ------------------
  361|   426k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   426k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   426k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   426k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   426k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 146, False: 426k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    146|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    146|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    146|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    146|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    146|    }                                                  \
  |  |  |  |   70|   426k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   426k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   426k|                    parse_integer_digits_without_thsep(
  363|   426k|                        ranges::subrange{prefix_result.iterator,
  364|   426k|                                         ranges::end(range)},
  365|   426k|                        prefix_result.parsed_base));
  366|       |
  367|   426k|            auto buf = make_contiguous_buffer(
  368|   426k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   426k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   426k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   426k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   426k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   426k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 59.7k, False: 366k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  59.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  59.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  59.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  59.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  59.7k|    }                                                  \
  |  |  |  |   70|   426k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   366k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   366k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   366k|                                        prefix_result.parsed_base));
  372|       |
  373|   366k|            return ranges_polyfill::batch_next(
  374|   366k|                prefix_result.iterator,
  375|   366k|                ranges::distance(buf.view().begin(), result_it));
  376|   426k|        }
  377|       |
  378|   108k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|   108k|            localized_number_formatting_options<CharT>{loc};
  383|   108k|#endif
  384|       |
  385|   108k|        SCN_TRY(
  ------------------
  |  |   71|   108k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   108k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   108k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   108k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10.9k, False: 97.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  10.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  10.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  10.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  10.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  10.9k|    }                                                  \
  |  |  |  |   70|   108k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  97.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  97.0k|            parse_digits_result,
  387|  97.0k|            parse_integer_digits_with_thsep(
  388|  97.0k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  97.0k|                prefix_result.parsed_base, locale_options));
  390|  97.0k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  97.0k|            parse_digits_result;
  392|       |
  393|  97.0k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 440, False: 96.5k]
  ------------------
  394|    440|            if (auto e = check_thsep_grouping(
  395|    440|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    440|                    thsep_indices, locale_options.grouping);
  397|    440|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    440|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 438, False: 2]
  |  |  ------------------
  ------------------
  398|    438|                return unexpected(e);
  399|    438|            }
  400|    440|        }
  401|       |
  402|  96.5k|        auto nothsep_source_view =
  403|  96.5k|            std::basic_string_view<CharT>{nothsep_source};
  404|  96.5k|        SCN_TRY(
  ------------------
  |  |   71|  96.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  96.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  96.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  96.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 88, False: 96.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     88|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     88|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     88|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     88|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     88|    }                                                  \
  |  |  |  |   70|  96.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  96.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  96.5k|            nothsep_source_it,
  406|  96.5k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  96.5k|                                prefix_result.parsed_base));
  408|       |
  409|  96.5k|        return ranges_polyfill::batch_next(
  410|  96.5k|            prefix_result.iterator,
  411|  96.5k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  96.5k|                ranges::ssize(thsep_indices));
  413|  96.5k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  20.7k|    {
  324|  20.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  20.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  20.7k|        return read_default_with_base(range, value, 0);
  326|  20.7k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  20.7k|    {
  287|  20.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  20.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  20.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  20.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  20.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 20.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  20.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  20.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  20.7k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  20.7k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  20.7k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  20.7k|                return unexpected_scan_error(
  293|  20.7k|                    scan_error::invalid_scanned_value,
  294|  20.7k|                    "Unexpected '-' sign when parsing an "
  295|  20.7k|                    "unsigned value");
  296|  20.7k|            }
  297|  20.7k|        }
  298|       |
  299|  20.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 20.7k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  20.7k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  20.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  20.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  20.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  20.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 20.7k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  20.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  20.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  20.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  20.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  20.7k|    }                                                  \
  |  |  |  |   70|  20.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  20.7k|                                     ranges::subrange{prefix_result.iterator,
  306|  20.7k|                                                      ranges::end(range)},
  307|  20.7k|                                     prefix_result.parsed_base));
  308|       |
  309|  20.7k|        auto buf = make_contiguous_buffer(
  310|  20.7k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  20.7k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  20.7k|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESH_i:
  120|   678k|{
  121|   678k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|   678k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   678k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   678k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   678k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 678k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   678k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   678k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|   678k|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|   678k|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|   678k|        parse_integer_base_prefix(
  126|   678k|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|   678k|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 0, False: 678k]
  ------------------
  129|      0|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 0, False: 0]
  ------------------
  130|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 0, False: 0]
  ------------------
  131|      0|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|      0|                digits_begin_it, ranges::begin(range));
  133|      0|        }
  134|      0|        else {
  135|      0|            parsed_zero = false;
  136|      0|        }
  137|      0|    }
  138|   678k|    else {
  139|   678k|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 8, False: 678k]
  ------------------
  140|   678k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 595k, False: 83.0k]
  ------------------
  141|   595k|            digits_begin_it = base_prefix_begin_it;
  142|   595k|        }
  143|   678k|    }
  144|       |
  145|   678k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 622k, False: 55.3k]
  ------------------
  146|   622k|        sign = sign_type::plus_sign;
  147|   622k|    }
  148|   678k|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|   678k|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|   678k|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEibEEEOSH_i:
   87|   678k|{
   88|   678k|    switch (base) {
   89|  83.0k|        case 2:
  ------------------
  |  Branch (89:9): [True: 83.0k, False: 595k]
  ------------------
   90|       |            // allow 0b/0B
   91|  83.0k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|  83.0k|                    false};
   93|       |
   94|  83.0k|        case 8: {
  ------------------
  |  Branch (94:9): [True: 83.0k, False: 595k]
  ------------------
   95|       |            // allow 0o/0O/0
   96|  83.0k|            bool zero_parsed = false;
   97|  83.0k|            auto it = apply_opt(
   98|  83.0k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|  83.0k|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|   138k|        case 16:
  ------------------
  |  Branch (102:9): [True: 138k, False: 539k]
  ------------------
  103|       |            // allow 0x/0X
  104|   138k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|   138k|                    false};
  106|       |
  107|   290k|        case 0:
  ------------------
  |  Branch (107:9): [True: 290k, False: 387k]
  ------------------
  108|       |            // detect base
  109|   290k|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  248|   290k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|  83.0k|        default:
  ------------------
  |  Branch (111:9): [True: 83.0k, False: 595k]
  ------------------
  112|       |            // no base prefix allowed
  113|  83.0k|            return {ranges::begin(range), base, false};
  114|   678k|    }
  115|   678k|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   37|   373k|{
   38|   373k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  248|   373k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|   373k|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_Rb:
   52|   373k|{
   53|   373k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 0, False: 373k]
  ------------------
   54|      0|        return *r;
   55|      0|    }
   56|       |
   57|   373k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 0, False: 373k]
  ------------------
   58|      0|        zero_parsed = true;
   59|      0|        return *r;
   60|      0|    }
   61|       |
   62|   373k|    return unexpected(parse_error::error);
   63|   373k|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   44|   429k|{
   45|   429k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|   429k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|   429k|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEibEEEOSH_:
   68|   290k|{
   69|   290k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 0, False: 290k]
  ------------------
   70|      0|        return {*r, 16, false};
   71|      0|    }
   72|   290k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 0, False: 290k]
  ------------------
   73|      0|        return {*r, 2, false};
   74|      0|    }
   75|   290k|    {
   76|   290k|        bool zero_parsed{false};
   77|   290k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 0, False: 290k]
  ------------------
   78|      0|            return {*r, 8, zero_parsed};
   79|      0|        }
   80|   290k|    }
   81|   290k|    return {ranges::begin(range), 10, false};
   82|   290k|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESG_i:
  155|   595k|{
  156|   595k|    using char_type = detail::char_t<Range>;
  157|       |
  158|   595k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|   595k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  160|   595k|            return unexpected_scan_error(
  161|   595k|                scan_error::invalid_scanned_value,
  162|   595k|                "Failed to parse integer: No digits found");
  163|   595k|        }
  164|   595k|        return ranges::end(range);
  165|   595k|    }
  166|   595k|    else {
  167|   595k|        return read_while1_code_unit(
  168|   595k|                   range, [&](char_type ch)
  169|   595k|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|   595k|            .transform_error(map_parse_error_to_scan_error(
  171|   595k|                scan_error::invalid_scanned_value,
  172|   595k|                "Failed to parse integer: No digits found"));
  173|   595k|    }
  174|   595k|}
_ZZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESG_iENKUlwE_clEw:
  169|   844k|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  20.7k|    {
  324|  20.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  20.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  20.7k|        return read_default_with_base(range, value, 0);
  326|  20.7k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  20.7k|    {
  287|  20.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  20.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  20.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  20.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  20.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 20.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  20.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  20.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  20.7k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  20.7k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  20.7k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  20.7k|                return unexpected_scan_error(
  293|  20.7k|                    scan_error::invalid_scanned_value,
  294|  20.7k|                    "Unexpected '-' sign when parsing an "
  295|  20.7k|                    "unsigned value");
  296|  20.7k|            }
  297|  20.7k|        }
  298|       |
  299|  20.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 20.7k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  20.7k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  20.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  20.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  20.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  20.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 20.7k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  20.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  20.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  20.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  20.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  20.7k|    }                                                  \
  |  |  |  |   70|  20.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  20.7k|                                     ranges::subrange{prefix_result.iterator,
  306|  20.7k|                                                      ranges::end(range)},
  307|  20.7k|                                     prefix_result.parsed_base));
  308|       |
  309|  20.7k|        auto buf = make_contiguous_buffer(
  310|  20.7k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  20.7k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  20.7k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  20.7k|    {
  324|  20.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  20.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  20.7k|        return read_default_with_base(range, value, 0);
  326|  20.7k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  20.7k|    {
  287|  20.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  20.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  20.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  20.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  20.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 20.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  20.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  20.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  20.7k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  20.7k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  20.7k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  20.7k|                return unexpected_scan_error(
  293|  20.7k|                    scan_error::invalid_scanned_value,
  294|  20.7k|                    "Unexpected '-' sign when parsing an "
  295|  20.7k|                    "unsigned value");
  296|  20.7k|            }
  297|  20.7k|        }
  298|       |
  299|  20.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 20.7k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  20.7k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  20.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  20.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  20.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  20.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 20.7k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  20.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  20.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  20.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  20.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  20.7k|    }                                                  \
  |  |  |  |   70|  20.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  20.7k|                                     ranges::subrange{prefix_result.iterator,
  306|  20.7k|                                                      ranges::end(range)},
  307|  20.7k|                                     prefix_result.parsed_base));
  308|       |
  309|  20.7k|        auto buf = make_contiguous_buffer(
  310|  20.7k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  20.7k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  20.7k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  20.7k|    {
  324|  20.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  20.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  20.7k|        return read_default_with_base(range, value, 0);
  326|  20.7k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  20.7k|    {
  287|  20.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  20.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  20.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  20.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  20.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 20.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  20.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  20.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  20.7k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  20.7k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  20.7k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 20.7k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  20.7k|        }
  298|       |
  299|  20.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 20.7k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  20.7k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  20.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  20.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  20.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  20.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 20.7k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  20.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  20.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  20.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  20.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  20.7k|    }                                                  \
  |  |  |  |   70|  20.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  20.7k|                                     ranges::subrange{prefix_result.iterator,
  306|  20.7k|                                                      ranges::end(range)},
  307|  20.7k|                                     prefix_result.parsed_base));
  308|       |
  309|  20.7k|        auto buf = make_contiguous_buffer(
  310|  20.7k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  20.7k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  20.7k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  20.7k|    {
  324|  20.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  20.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  20.7k|        return read_default_with_base(range, value, 0);
  326|  20.7k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  20.7k|    {
  287|  20.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  20.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  20.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  20.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  20.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 20.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  20.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  20.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  20.7k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  20.7k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  20.7k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 20.7k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  20.7k|        }
  298|       |
  299|  20.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 20.7k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  20.7k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  20.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  20.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  20.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  20.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 20.7k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  20.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  20.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  20.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  20.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  20.7k|    }                                                  \
  |  |  |  |   70|  20.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  20.7k|                                     ranges::subrange{prefix_result.iterator,
  306|  20.7k|                                                      ranges::end(range)},
  307|  20.7k|                                     prefix_result.parsed_base));
  308|       |
  309|  20.7k|        auto buf = make_contiguous_buffer(
  310|  20.7k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  20.7k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  20.7k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  20.7k|    {
  324|  20.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  20.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  20.7k|        return read_default_with_base(range, value, 0);
  326|  20.7k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  20.7k|    {
  287|  20.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  20.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  20.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  20.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  20.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 20.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  20.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  20.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  20.7k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  20.7k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  20.7k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 20.7k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  20.7k|        }
  298|       |
  299|  20.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 20.7k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  20.7k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  20.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  20.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  20.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  20.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 20.7k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  20.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  20.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  20.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  20.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  20.7k|    }                                                  \
  |  |  |  |   70|  20.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  20.7k|                                     ranges::subrange{prefix_result.iterator,
  306|  20.7k|                                                      ranges::end(range)},
  307|  20.7k|                                     prefix_result.parsed_base));
  308|       |
  309|  20.7k|        auto buf = make_contiguous_buffer(
  310|  20.7k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  20.7k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  20.7k|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSF_12basic_stringIT0_NSF_11char_traitsISM_EENSF_9allocatorISM_EEEENSL_IcNSN_IcEENSP_IcEEEEEEEEESI_iRKNS1_35localized_number_formatting_optionsISM_EE:
  184|  83.0k|{
  185|  83.0k|    std::basic_string<CharT> output;
  186|  83.0k|    std::string thsep_indices;
  187|  83.0k|    auto it = ranges::begin(range);
  188|  83.0k|    bool digit_matched = false;
  189|  83.0k|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 83.0k, False: 0]
  ------------------
  190|  83.0k|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 0, False: 83.0k]
  ------------------
  191|      0|            thsep_indices.push_back(static_cast<char>(
  192|      0|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|      0|        }
  194|  83.0k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 83.0k, False: 0]
  ------------------
  195|  83.0k|            break;
  196|  83.0k|        }
  197|      0|        else {
  198|      0|            output.push_back(*it);
  199|      0|            digit_matched = true;
  200|      0|        }
  201|  83.0k|    }
  202|  83.0k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  153|  83.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 83.0k, False: 0]
  |  |  ------------------
  ------------------
  203|  83.0k|        return unexpected_scan_error(
  204|  83.0k|            scan_error::invalid_scanned_value,
  205|  83.0k|            "Failed to parse integer: No digits found");
  206|  83.0k|    }
  207|      0|    return std::tuple{it, output, thsep_indices};
  208|  83.0k|}
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  83.0k|    {
  335|  83.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  83.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  83.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  83.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  83.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 83.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  83.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  83.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  83.0k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  83.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 83.0k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  83.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 83.0k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  83.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  83.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 69.2k, False: 13.8k]
  |  |  ------------------
  ------------------
  361|  69.2k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  69.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  69.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  69.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  69.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 55.3k, False: 13.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  55.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  55.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  55.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  55.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  55.3k|    }                                                  \
  |  |  |  |   70|  69.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  13.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  13.8k|                    parse_integer_digits_without_thsep(
  363|  13.8k|                        ranges::subrange{prefix_result.iterator,
  364|  13.8k|                                         ranges::end(range)},
  365|  13.8k|                        prefix_result.parsed_base));
  366|       |
  367|  13.8k|            auto buf = make_contiguous_buffer(
  368|  13.8k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  13.8k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  13.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  13.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  13.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 13.8k, False: 2]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  13.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  13.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  13.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  13.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  13.8k|    }                                                  \
  |  |  |  |   70|  13.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      2|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      2|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      2|                                        prefix_result.parsed_base));
  372|       |
  373|      2|            return ranges_polyfill::batch_next(
  374|      2|                prefix_result.iterator,
  375|      2|                ranges::distance(buf.view().begin(), result_it));
  376|  13.8k|        }
  377|       |
  378|  13.8k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  13.8k|            localized_number_formatting_options<CharT>{loc};
  383|  13.8k|#endif
  384|       |
  385|  13.8k|        SCN_TRY(
  ------------------
  |  |   71|  13.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  13.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  13.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 13.8k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  13.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  13.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  13.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  13.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  13.8k|    }                                                  \
  |  |  |  |   70|  13.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  96.8k|    {
  335|  96.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  96.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  96.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  96.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  96.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 96.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  96.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  96.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  96.8k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  96.8k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 96.8k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  96.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 96.8k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  96.8k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  96.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 83.0k, False: 13.8k]
  |  |  ------------------
  ------------------
  361|  83.0k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  83.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  83.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  83.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  83.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 69.2k, False: 13.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  69.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  69.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  69.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  69.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  69.2k|    }                                                  \
  |  |  |  |   70|  83.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  13.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  13.8k|                    parse_integer_digits_without_thsep(
  363|  13.8k|                        ranges::subrange{prefix_result.iterator,
  364|  13.8k|                                         ranges::end(range)},
  365|  13.8k|                        prefix_result.parsed_base));
  366|       |
  367|  13.8k|            auto buf = make_contiguous_buffer(
  368|  13.8k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  13.8k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  13.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  13.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  13.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 13.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  13.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  13.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  13.8k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  13.8k|                                        prefix_result.parsed_base));
  372|       |
  373|  13.8k|            return ranges_polyfill::batch_next(
  374|  13.8k|                prefix_result.iterator,
  375|  13.8k|                ranges::distance(buf.view().begin(), result_it));
  376|  13.8k|        }
  377|       |
  378|  13.8k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  13.8k|            localized_number_formatting_options<CharT>{loc};
  383|  13.8k|#endif
  384|       |
  385|  13.8k|        SCN_TRY(
  ------------------
  |  |   71|  13.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  13.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  13.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 13.8k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  13.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  13.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  13.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  13.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  13.8k|    }                                                  \
  |  |  |  |   70|  13.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  96.8k|    {
  335|  96.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  96.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  96.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  96.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  96.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 96.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  96.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  96.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  96.8k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  96.8k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 96.8k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  96.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 96.8k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  96.8k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  96.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 83.0k, False: 13.8k]
  |  |  ------------------
  ------------------
  361|  83.0k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  83.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  83.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  83.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  83.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 69.2k, False: 13.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  69.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  69.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  69.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  69.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  69.2k|    }                                                  \
  |  |  |  |   70|  83.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  13.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  13.8k|                    parse_integer_digits_without_thsep(
  363|  13.8k|                        ranges::subrange{prefix_result.iterator,
  364|  13.8k|                                         ranges::end(range)},
  365|  13.8k|                        prefix_result.parsed_base));
  366|       |
  367|  13.8k|            auto buf = make_contiguous_buffer(
  368|  13.8k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  13.8k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  13.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  13.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  13.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 13.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  13.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  13.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  13.8k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  13.8k|                                        prefix_result.parsed_base));
  372|       |
  373|  13.8k|            return ranges_polyfill::batch_next(
  374|  13.8k|                prefix_result.iterator,
  375|  13.8k|                ranges::distance(buf.view().begin(), result_it));
  376|  13.8k|        }
  377|       |
  378|  13.8k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  13.8k|            localized_number_formatting_options<CharT>{loc};
  383|  13.8k|#endif
  384|       |
  385|  13.8k|        SCN_TRY(
  ------------------
  |  |   71|  13.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  13.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  13.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 13.8k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  13.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  13.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  13.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  13.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  13.8k|    }                                                  \
  |  |  |  |   70|  13.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  83.0k|    {
  335|  83.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  83.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  83.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  83.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  83.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 83.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  83.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  83.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  83.0k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  83.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 83.0k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  83.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 83.0k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  83.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  83.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 69.2k, False: 13.8k]
  |  |  ------------------
  ------------------
  361|  69.2k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  69.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  69.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  69.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  69.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 55.3k, False: 13.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  55.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  55.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  55.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  55.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  55.3k|    }                                                  \
  |  |  |  |   70|  69.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  13.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  13.8k|                    parse_integer_digits_without_thsep(
  363|  13.8k|                        ranges::subrange{prefix_result.iterator,
  364|  13.8k|                                         ranges::end(range)},
  365|  13.8k|                        prefix_result.parsed_base));
  366|       |
  367|  13.8k|            auto buf = make_contiguous_buffer(
  368|  13.8k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  13.8k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  13.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  13.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  13.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 13.8k, False: 4]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  13.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  13.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  13.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  13.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  13.8k|    }                                                  \
  |  |  |  |   70|  13.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      4|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      4|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      4|                                        prefix_result.parsed_base));
  372|       |
  373|      4|            return ranges_polyfill::batch_next(
  374|      4|                prefix_result.iterator,
  375|      4|                ranges::distance(buf.view().begin(), result_it));
  376|  13.8k|        }
  377|       |
  378|  13.8k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  13.8k|            localized_number_formatting_options<CharT>{loc};
  383|  13.8k|#endif
  384|       |
  385|  13.8k|        SCN_TRY(
  ------------------
  |  |   71|  13.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  13.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  13.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 13.8k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  13.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  13.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  13.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  13.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  13.8k|    }                                                  \
  |  |  |  |   70|  13.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  96.8k|    {
  335|  96.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  96.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  96.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  96.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  96.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 96.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  96.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  96.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  96.8k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  96.8k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 96.8k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  96.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 96.8k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  96.8k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  96.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 83.0k, False: 13.8k]
  |  |  ------------------
  ------------------
  361|  83.0k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  83.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  83.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  83.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  83.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 69.2k, False: 13.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  69.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  69.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  69.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  69.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  69.2k|    }                                                  \
  |  |  |  |   70|  83.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  13.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  13.8k|                    parse_integer_digits_without_thsep(
  363|  13.8k|                        ranges::subrange{prefix_result.iterator,
  364|  13.8k|                                         ranges::end(range)},
  365|  13.8k|                        prefix_result.parsed_base));
  366|       |
  367|  13.8k|            auto buf = make_contiguous_buffer(
  368|  13.8k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  13.8k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  13.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  13.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  13.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 13.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  13.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  13.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  13.8k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  13.8k|                                        prefix_result.parsed_base));
  372|       |
  373|  13.8k|            return ranges_polyfill::batch_next(
  374|  13.8k|                prefix_result.iterator,
  375|  13.8k|                ranges::distance(buf.view().begin(), result_it));
  376|  13.8k|        }
  377|       |
  378|  13.8k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  13.8k|            localized_number_formatting_options<CharT>{loc};
  383|  13.8k|#endif
  384|       |
  385|  13.8k|        SCN_TRY(
  ------------------
  |  |   71|  13.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  13.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  13.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 13.8k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  13.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  13.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  13.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  13.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  13.8k|    }                                                  \
  |  |  |  |   70|  13.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  96.8k|    {
  335|  96.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  96.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  96.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  96.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  96.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 96.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  96.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  96.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  96.8k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  96.8k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 96.8k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  96.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 96.8k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  96.8k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  96.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 83.0k, False: 13.8k]
  |  |  ------------------
  ------------------
  361|  83.0k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  83.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  83.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  83.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  83.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 69.2k, False: 13.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  69.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  69.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  69.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  69.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  69.2k|    }                                                  \
  |  |  |  |   70|  83.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  13.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  13.8k|                    parse_integer_digits_without_thsep(
  363|  13.8k|                        ranges::subrange{prefix_result.iterator,
  364|  13.8k|                                         ranges::end(range)},
  365|  13.8k|                        prefix_result.parsed_base));
  366|       |
  367|  13.8k|            auto buf = make_contiguous_buffer(
  368|  13.8k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  13.8k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  13.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  13.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  13.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 13.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  13.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  13.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  13.8k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  13.8k|                                        prefix_result.parsed_base));
  372|       |
  373|  13.8k|            return ranges_polyfill::batch_next(
  374|  13.8k|                prefix_result.iterator,
  375|  13.8k|                ranges::distance(buf.view().begin(), result_it));
  376|  13.8k|        }
  377|       |
  378|  13.8k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  13.8k|            localized_number_formatting_options<CharT>{loc};
  383|  13.8k|#endif
  384|       |
  385|  13.8k|        SCN_TRY(
  ------------------
  |  |   71|  13.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  13.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  13.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 13.8k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  13.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  13.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  13.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  13.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  13.8k|    }                                                  \
  |  |  |  |   70|  13.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }

_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_9sign_typeEEEEEOSG_:
   68|  5.67M|{
   69|  5.67M|    auto r = read_one_of_code_unit(range, "+-");
   70|  5.67M|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 5.36M, False: 310k]
  ------------------
   71|  5.36M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 5.36M, False: 0]
  ------------------
   72|  5.36M|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  5.36M|        }
   74|      0|        return unexpected(eof_error::eof);
   75|  5.36M|    }
   76|       |
   77|   310k|    auto& it = *r;
   78|   310k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 248k, False: 61.9k]
  ------------------
   79|   248k|        return std::pair{it, sign_type::minus_sign};
   80|   248k|    }
   81|  61.9k|    return std::pair{it, sign_type::plus_sign};
   82|   310k|}
_ZN3scn2v24impl11char_to_intEc:
   50|  44.7M|{
   51|  44.7M|    return char_to_int_table[static_cast<unsigned char>(ch)];
   52|  44.7M|}
_ZN3scn2v24impl20check_thsep_groupingIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEELPv0EEENS0_10scan_errorEOT_NSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEENSF_17basic_string_viewIcSI_EE:
  139|  2.81k|{
  140|  2.81k|    SCN_EXPECT(!thsep_indices.empty());
  ------------------
  |  |  242|  2.81k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.81k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  141|       |
  142|  2.81k|    if (!check_thsep_grouping_impl(range, thsep_indices, grouping)) {
  ------------------
  |  Branch (142:9): [True: 2.77k, False: 38]
  ------------------
  143|  2.77k|        SCN_UNLIKELY_ATTR
  144|  2.77k|        return {scan_error::invalid_scanned_value,
  145|  2.77k|                "Invalid thousands separator grouping"};
  146|  2.77k|    }
  147|       |
  148|     38|    return {};
  149|  2.81k|}
_ZN3scn2v24impl25check_thsep_grouping_implIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEbRT_RNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEENSD_17basic_string_viewIcSG_EE:
  100|  2.81k|{
  101|  2.81k|    transform_thsep_indices(
  102|  2.81k|        thsep_indices,
  103|  2.81k|        ranges::distance(ranges::begin(range), ranges::end(range)));
  104|       |
  105|  2.81k|    auto thsep_it = thsep_indices.rbegin();
  106|  2.81k|    for (auto grouping_it = grouping.begin();
  107|  2.81k|         grouping_it != grouping.end() && thsep_it != thsep_indices.rend() - 1;
  ------------------
  |  Branch (107:10): [True: 0, False: 2.81k]
  |  Branch (107:10): [True: 0, False: 2.81k]
  |  Branch (107:43): [True: 0, False: 0]
  ------------------
  108|  2.81k|         ++grouping_it, (void)++thsep_it) {
  109|      0|        if (*thsep_it != *grouping_it) {
  ------------------
  |  Branch (109:13): [True: 0, False: 0]
  ------------------
  110|      0|            return false;
  111|      0|        }
  112|      0|    }
  113|       |
  114|  2.81k|    SCN_CLANG_PUSH
  115|       |    // false positive
  116|  2.81k|    SCN_CLANG_IGNORE("-Wzero-as-null-pointer-constant")
  117|       |
  118|  11.9k|    for (; thsep_it < thsep_indices.rend() - 1; ++thsep_it) {
  ------------------
  |  Branch (118:12): [True: 10.4k, False: 1.46k]
  ------------------
  119|  10.4k|        if (*thsep_it != grouping.back()) {
  ------------------
  |  Branch (119:13): [True: 1.34k, False: 9.14k]
  ------------------
  120|  1.34k|            return false;
  121|  1.34k|        }
  122|  10.4k|    }
  123|       |
  124|  1.46k|    if (thsep_it == thsep_indices.rend() - 1) {
  ------------------
  |  Branch (124:9): [True: 1.46k, False: 0]
  ------------------
  125|  1.46k|        if (*thsep_it > grouping.back()) {
  ------------------
  |  Branch (125:13): [True: 1.42k, False: 38]
  ------------------
  126|  1.42k|            return false;
  127|  1.42k|        }
  128|  1.46k|    }
  129|       |
  130|     38|    SCN_CLANG_POP
  131|       |
  132|     38|    return true;
  133|  1.46k|}
_ZN3scn2v24impl23transform_thsep_indicesERNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEl:
   86|  5.96k|{
   87|  59.0k|    for (auto thsep_it = indices.rbegin(); thsep_it != indices.rend();
  ------------------
  |  Branch (87:44): [True: 53.1k, False: 5.96k]
  ------------------
   88|  53.1k|         ++thsep_it) {
   89|  53.1k|        const auto tmp = *thsep_it;
   90|  53.1k|        *thsep_it = static_cast<char>(last_thsep_index - tmp - 1);
   91|  53.1k|        last_thsep_index = static_cast<std::ptrdiff_t>(tmp);
   92|  53.1k|    }
   93|  5.96k|    indices.insert(indices.begin(), static_cast<char>(last_thsep_index));
   94|  5.96k|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeENS1_9sign_typeEEEEEOSJ_:
   68|   235k|{
   69|   235k|    auto r = read_one_of_code_unit(range, "+-");
   70|   235k|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 207k, False: 27.6k]
  ------------------
   71|   207k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 207k, False: 0]
  ------------------
   72|   207k|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|   207k|        }
   74|      0|        return unexpected(eof_error::eof);
   75|   207k|    }
   76|       |
   77|  27.6k|    auto& it = *r;
   78|  27.6k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 0, False: 27.6k]
  ------------------
   79|      0|        return std::pair{it, sign_type::minus_sign};
   80|      0|    }
   81|  27.6k|    return std::pair{it, sign_type::plus_sign};
   82|  27.6k|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_9sign_typeEEEEEOSG_:
   68|  5.38M|{
   69|  5.38M|    auto r = read_one_of_code_unit(range, "+-");
   70|  5.38M|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 5.15M, False: 228k]
  ------------------
   71|  5.15M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 5.15M, False: 0]
  ------------------
   72|  5.15M|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  5.15M|        }
   74|      0|        return unexpected(eof_error::eof);
   75|  5.15M|    }
   76|       |
   77|   228k|    auto& it = *r;
   78|   228k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 172k, False: 55.8k]
  ------------------
   79|   172k|        return std::pair{it, sign_type::minus_sign};
   80|   172k|    }
   81|  55.8k|    return std::pair{it, sign_type::plus_sign};
   82|   228k|}
_ZN3scn2v24impl11char_to_intEw:
   54|  22.6M|{
   55|  22.6M|#if WCHAR_MIN < 0
   56|  22.6M|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (56:9): [True: 22.5M, False: 48.9k]
  |  Branch (56:20): [True: 21.7M, False: 817k]
  ------------------
   57|       |#else
   58|       |    if (ch <= 255) {
   59|       |#endif
   60|  21.7M|        return char_to_int(static_cast<char>(ch));
   61|  21.7M|    }
   62|   866k|    return 255;
   63|  22.6M|}
_ZN3scn2v24impl20check_thsep_groupingIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEELPv0EEENS0_10scan_errorEOT_NSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEENSF_17basic_string_viewIcSI_EE:
  139|  3.15k|{
  140|  3.15k|    SCN_EXPECT(!thsep_indices.empty());
  ------------------
  |  |  242|  3.15k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.15k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  141|       |
  142|  3.15k|    if (!check_thsep_grouping_impl(range, thsep_indices, grouping)) {
  ------------------
  |  Branch (142:9): [True: 3.11k, False: 38]
  ------------------
  143|  3.11k|        SCN_UNLIKELY_ATTR
  144|  3.11k|        return {scan_error::invalid_scanned_value,
  145|  3.11k|                "Invalid thousands separator grouping"};
  146|  3.11k|    }
  147|       |
  148|     38|    return {};
  149|  3.15k|}
_ZN3scn2v24impl25check_thsep_grouping_implIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEbRT_RNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEENSD_17basic_string_viewIcSG_EE:
  100|  3.15k|{
  101|  3.15k|    transform_thsep_indices(
  102|  3.15k|        thsep_indices,
  103|  3.15k|        ranges::distance(ranges::begin(range), ranges::end(range)));
  104|       |
  105|  3.15k|    auto thsep_it = thsep_indices.rbegin();
  106|  3.15k|    for (auto grouping_it = grouping.begin();
  107|  3.15k|         grouping_it != grouping.end() && thsep_it != thsep_indices.rend() - 1;
  ------------------
  |  Branch (107:10): [True: 0, False: 3.15k]
  |  Branch (107:10): [True: 0, False: 3.15k]
  |  Branch (107:43): [True: 0, False: 0]
  ------------------
  108|  3.15k|         ++grouping_it, (void)++thsep_it) {
  109|      0|        if (*thsep_it != *grouping_it) {
  ------------------
  |  Branch (109:13): [True: 0, False: 0]
  ------------------
  110|      0|            return false;
  111|      0|        }
  112|      0|    }
  113|       |
  114|  3.15k|    SCN_CLANG_PUSH
  115|       |    // false positive
  116|  3.15k|    SCN_CLANG_IGNORE("-Wzero-as-null-pointer-constant")
  117|       |
  118|  15.3k|    for (; thsep_it < thsep_indices.rend() - 1; ++thsep_it) {
  ------------------
  |  Branch (118:12): [True: 13.4k, False: 1.91k]
  ------------------
  119|  13.4k|        if (*thsep_it != grouping.back()) {
  ------------------
  |  Branch (119:13): [True: 1.24k, False: 12.2k]
  ------------------
  120|  1.24k|            return false;
  121|  1.24k|        }
  122|  13.4k|    }
  123|       |
  124|  1.91k|    if (thsep_it == thsep_indices.rend() - 1) {
  ------------------
  |  Branch (124:9): [True: 1.91k, False: 0]
  ------------------
  125|  1.91k|        if (*thsep_it > grouping.back()) {
  ------------------
  |  Branch (125:13): [True: 1.87k, False: 38]
  ------------------
  126|  1.87k|            return false;
  127|  1.87k|        }
  128|  1.91k|    }
  129|       |
  130|     38|    SCN_CLANG_POP
  131|       |
  132|     38|    return true;
  133|  1.91k|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeENS1_9sign_typeEEEEEOSJ_:
   68|   678k|{
   69|   678k|    auto r = read_one_of_code_unit(range, "+-");
   70|   678k|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 622k, False: 55.3k]
  ------------------
   71|   622k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 622k, False: 0]
  ------------------
   72|   622k|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|   622k|        }
   74|      0|        return unexpected(eof_error::eof);
   75|   622k|    }
   76|       |
   77|  55.3k|    auto& it = *r;
   78|  55.3k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 0, False: 55.3k]
  ------------------
   79|      0|        return std::pair{it, sign_type::minus_sign};
   80|      0|    }
   81|  55.3k|    return std::pair{it, sign_type::plus_sign};
   82|  55.3k|}

_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIaEENS0_13scan_expectedIPKcEERT_:
  121|   231k|    {
  122|   231k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   231k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   231k|                          basic_contiguous_scan_context<char_type>>) {
  126|   231k|            auto rd = make_reader<T, char_type>();
  127|   231k|            return impl(rd, range, value);
  128|   231k|        }
  129|   231k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   231k|            auto rd = make_reader<T, char_type>();
  131|   231k|            if (!is_segment_contiguous(range)) {
  132|   231k|                return impl(rd, range, value);
  133|   231k|            }
  134|   231k|            auto crange = get_as_contiguous(range);
  135|   231k|            SCN_TRY(it, impl(rd, crange, value));
  136|   231k|            return ranges_polyfill::batch_next(
  137|   231k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   231k|        }
  139|   231k|        else {
  140|   231k|            SCN_EXPECT(false);
  141|   231k|            SCN_UNREACHABLE;
  142|   231k|        }
  143|   231k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   231k|    {
  112|   231k|        SCN_TRY(it,
  ------------------
  |  |   71|   231k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   231k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   231k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   231k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 822, False: 230k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    822|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    822|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    822|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    822|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    822|    }                                                  \
  |  |  |  |   70|   231k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   230k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   230k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   230k|                    .transform_error(make_eof_scan_error));
  115|   230k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   230k|                               loc);
  117|   231k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEbOSF_NS0_6detail10locale_refE:
   42|  5.70M|{
   43|  5.70M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  5.70M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 23.5k, False: 5.67M]
  |  |  ------------------
  ------------------
   44|  23.5k|        return unexpected(e);
   45|  23.5k|    }
   46|       |
   47|  5.67M|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 5.67M]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|  5.67M|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|  5.67M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|  5.67M|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
  121|   311k|    {
  122|   311k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   311k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   311k|                          basic_contiguous_scan_context<char_type>>) {
  126|   311k|            auto rd = make_reader<T, char_type>();
  127|   311k|            return impl(rd, range, value);
  128|   311k|        }
  129|   311k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   311k|            auto rd = make_reader<T, char_type>();
  131|   311k|            if (!is_segment_contiguous(range)) {
  132|   311k|                return impl(rd, range, value);
  133|   311k|            }
  134|   311k|            auto crange = get_as_contiguous(range);
  135|   311k|            SCN_TRY(it, impl(rd, crange, value));
  136|   311k|            return ranges_polyfill::batch_next(
  137|   311k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   311k|        }
  139|   311k|        else {
  140|   311k|            SCN_EXPECT(false);
  141|   311k|            SCN_UNREACHABLE;
  142|   311k|        }
  143|   311k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   311k|    {
  112|   311k|        SCN_TRY(it,
  ------------------
  |  |   71|   311k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   311k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   311k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   311k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.53k, False: 309k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.53k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.53k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.53k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.53k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.53k|    }                                                  \
  |  |  |  |   70|   311k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   309k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   309k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   309k|                    .transform_error(make_eof_scan_error));
  115|   309k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   309k|                               loc);
  117|   311k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIxEENS0_13scan_expectedIPKcEERT_:
  121|   327k|    {
  122|   327k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   327k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   327k|                          basic_contiguous_scan_context<char_type>>) {
  126|   327k|            auto rd = make_reader<T, char_type>();
  127|   327k|            return impl(rd, range, value);
  128|   327k|        }
  129|   327k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   327k|            auto rd = make_reader<T, char_type>();
  131|   327k|            if (!is_segment_contiguous(range)) {
  132|   327k|                return impl(rd, range, value);
  133|   327k|            }
  134|   327k|            auto crange = get_as_contiguous(range);
  135|   327k|            SCN_TRY(it, impl(rd, crange, value));
  136|   327k|            return ranges_polyfill::batch_next(
  137|   327k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   327k|        }
  139|   327k|        else {
  140|   327k|            SCN_EXPECT(false);
  141|   327k|            SCN_UNREACHABLE;
  142|   327k|        }
  143|   327k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   327k|    {
  112|   327k|        SCN_TRY(it,
  ------------------
  |  |   71|   327k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   327k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   327k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   327k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.68k, False: 326k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.68k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.68k|    }                                                  \
  |  |  |  |   70|   327k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   326k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   326k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   326k|                    .transform_error(make_eof_scan_error));
  115|   326k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   326k|                               loc);
  117|   327k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIhEENS0_13scan_expectedIPKcEERT_:
  121|   229k|    {
  122|   229k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   229k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   229k|                          basic_contiguous_scan_context<char_type>>) {
  126|   229k|            auto rd = make_reader<T, char_type>();
  127|   229k|            return impl(rd, range, value);
  128|   229k|        }
  129|   229k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   229k|            auto rd = make_reader<T, char_type>();
  131|   229k|            if (!is_segment_contiguous(range)) {
  132|   229k|                return impl(rd, range, value);
  133|   229k|            }
  134|   229k|            auto crange = get_as_contiguous(range);
  135|   229k|            SCN_TRY(it, impl(rd, crange, value));
  136|   229k|            return ranges_polyfill::batch_next(
  137|   229k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   229k|        }
  139|   229k|        else {
  140|   229k|            SCN_EXPECT(false);
  141|   229k|            SCN_UNREACHABLE;
  142|   229k|        }
  143|   229k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   229k|    {
  112|   229k|        SCN_TRY(it,
  ------------------
  |  |   71|   229k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   229k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   229k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   229k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 702, False: 229k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    702|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    702|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    702|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    702|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    702|    }                                                  \
  |  |  |  |   70|   229k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   229k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   229k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   229k|                    .transform_error(make_eof_scan_error));
  115|   229k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   229k|                               loc);
  117|   229k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
  121|   261k|    {
  122|   261k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   261k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   261k|                          basic_contiguous_scan_context<char_type>>) {
  126|   261k|            auto rd = make_reader<T, char_type>();
  127|   261k|            return impl(rd, range, value);
  128|   261k|        }
  129|   261k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   261k|            auto rd = make_reader<T, char_type>();
  131|   261k|            if (!is_segment_contiguous(range)) {
  132|   261k|                return impl(rd, range, value);
  133|   261k|            }
  134|   261k|            auto crange = get_as_contiguous(range);
  135|   261k|            SCN_TRY(it, impl(rd, crange, value));
  136|   261k|            return ranges_polyfill::batch_next(
  137|   261k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   261k|        }
  139|   261k|        else {
  140|   261k|            SCN_EXPECT(false);
  141|   261k|            SCN_UNREACHABLE;
  142|   261k|        }
  143|   261k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   261k|    {
  112|   261k|        SCN_TRY(it,
  ------------------
  |  |   71|   261k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   261k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   261k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   261k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.14k, False: 260k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.14k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.14k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.14k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.14k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.14k|    }                                                  \
  |  |  |  |   70|   261k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   260k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   260k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   260k|                    .transform_error(make_eof_scan_error));
  115|   260k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   260k|                               loc);
  117|   261k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIyEENS0_13scan_expectedIPKcEERT_:
  121|   271k|    {
  122|   271k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   271k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   271k|                          basic_contiguous_scan_context<char_type>>) {
  126|   271k|            auto rd = make_reader<T, char_type>();
  127|   271k|            return impl(rd, range, value);
  128|   271k|        }
  129|   271k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   271k|            auto rd = make_reader<T, char_type>();
  131|   271k|            if (!is_segment_contiguous(range)) {
  132|   271k|                return impl(rd, range, value);
  133|   271k|            }
  134|   271k|            auto crange = get_as_contiguous(range);
  135|   271k|            SCN_TRY(it, impl(rd, crange, value));
  136|   271k|            return ranges_polyfill::batch_next(
  137|   271k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   271k|        }
  139|   271k|        else {
  140|   271k|            SCN_EXPECT(false);
  141|   271k|            SCN_UNREACHABLE;
  142|   271k|        }
  143|   271k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   271k|    {
  112|   271k|        SCN_TRY(it,
  ------------------
  |  |   71|   271k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   271k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   271k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   271k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.21k, False: 270k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.21k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.21k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.21k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.21k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.21k|    }                                                  \
  |  |  |  |   70|   271k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   270k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   270k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   270k|                    .transform_error(make_eof_scan_error));
  115|   270k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   270k|                               loc);
  117|   271k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  6.92k|    {
  122|  6.92k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  6.92k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  6.92k|            auto rd = make_reader<T, char_type>();
  127|  6.92k|            return impl(rd, range, value);
  128|  6.92k|        }
  129|  6.92k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  6.92k|            auto rd = make_reader<T, char_type>();
  131|  6.92k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 6.92k, False: 0]
  ------------------
  132|  6.92k|                return impl(rd, range, value);
  133|  6.92k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  6.92k|        else {
  140|  6.92k|            SCN_EXPECT(false);
  141|  6.92k|            SCN_UNREACHABLE;
  142|  6.92k|        }
  143|  6.92k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  6.92k|    {
  112|  6.92k|        SCN_TRY(it,
  ------------------
  |  |   71|  6.92k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.92k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.92k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.92k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.92k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  6.92k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  6.92k|                    .transform_error(make_eof_scan_error));
  115|  6.92k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  6.92k|                               loc);
  117|  6.92k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEbOSI_NS7_10locale_refE:
   42|   235k|{
   43|   235k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   235k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 12, False: 235k]
  |  |  ------------------
  ------------------
   44|     12|        return unexpected(e);
   45|     12|    }
   46|       |
   47|   235k|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 235k]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|   235k|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|   235k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|   235k|}
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  6.92k|    {
  122|  6.92k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  6.92k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  6.92k|            auto rd = make_reader<T, char_type>();
  127|  6.92k|            return impl(rd, range, value);
  128|  6.92k|        }
  129|  6.92k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  6.92k|            auto rd = make_reader<T, char_type>();
  131|  6.92k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 6.92k, False: 0]
  ------------------
  132|  6.92k|                return impl(rd, range, value);
  133|  6.92k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  6.92k|        else {
  140|  6.92k|            SCN_EXPECT(false);
  141|  6.92k|            SCN_UNREACHABLE;
  142|  6.92k|        }
  143|  6.92k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  6.92k|    {
  112|  6.92k|        SCN_TRY(it,
  ------------------
  |  |   71|  6.92k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.92k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.92k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.92k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.92k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  6.92k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  6.92k|                    .transform_error(make_eof_scan_error));
  115|  6.92k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  6.92k|                               loc);
  117|  6.92k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  6.92k|    {
  122|  6.92k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  6.92k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  6.92k|            auto rd = make_reader<T, char_type>();
  127|  6.92k|            return impl(rd, range, value);
  128|  6.92k|        }
  129|  6.92k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  6.92k|            auto rd = make_reader<T, char_type>();
  131|  6.92k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 6.92k, False: 0]
  ------------------
  132|  6.92k|                return impl(rd, range, value);
  133|  6.92k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  6.92k|        else {
  140|  6.92k|            SCN_EXPECT(false);
  141|  6.92k|            SCN_UNREACHABLE;
  142|  6.92k|        }
  143|  6.92k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  6.92k|    {
  112|  6.92k|        SCN_TRY(it,
  ------------------
  |  |   71|  6.92k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.92k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.92k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.92k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.92k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  6.92k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  6.92k|                    .transform_error(make_eof_scan_error));
  115|  6.92k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  6.92k|                               loc);
  117|  6.92k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  6.92k|    {
  122|  6.92k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  6.92k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  6.92k|            auto rd = make_reader<T, char_type>();
  127|  6.92k|            return impl(rd, range, value);
  128|  6.92k|        }
  129|  6.92k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  6.92k|            auto rd = make_reader<T, char_type>();
  131|  6.92k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 6.92k, False: 0]
  ------------------
  132|  6.92k|                return impl(rd, range, value);
  133|  6.92k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  6.92k|        else {
  140|  6.92k|            SCN_EXPECT(false);
  141|  6.92k|            SCN_UNREACHABLE;
  142|  6.92k|        }
  143|  6.92k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  6.92k|    {
  112|  6.92k|        SCN_TRY(it,
  ------------------
  |  |   71|  6.92k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.92k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.92k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.92k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.92k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  6.92k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  6.92k|                    .transform_error(make_eof_scan_error));
  115|  6.92k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  6.92k|                               loc);
  117|  6.92k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  6.92k|    {
  122|  6.92k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  6.92k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  6.92k|            auto rd = make_reader<T, char_type>();
  127|  6.92k|            return impl(rd, range, value);
  128|  6.92k|        }
  129|  6.92k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  6.92k|            auto rd = make_reader<T, char_type>();
  131|  6.92k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 6.92k, False: 0]
  ------------------
  132|  6.92k|                return impl(rd, range, value);
  133|  6.92k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  6.92k|        else {
  140|  6.92k|            SCN_EXPECT(false);
  141|  6.92k|            SCN_UNREACHABLE;
  142|  6.92k|        }
  143|  6.92k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  6.92k|    {
  112|  6.92k|        SCN_TRY(it,
  ------------------
  |  |   71|  6.92k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.92k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.92k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.92k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.92k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  6.92k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  6.92k|                    .transform_error(make_eof_scan_error));
  115|  6.92k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  6.92k|                               loc);
  117|  6.92k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  6.92k|    {
  122|  6.92k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  6.92k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  6.92k|            auto rd = make_reader<T, char_type>();
  127|  6.92k|            return impl(rd, range, value);
  128|  6.92k|        }
  129|  6.92k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  6.92k|            auto rd = make_reader<T, char_type>();
  131|  6.92k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 6.92k, False: 0]
  ------------------
  132|  6.92k|                return impl(rd, range, value);
  133|  6.92k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  6.92k|        else {
  140|  6.92k|            SCN_EXPECT(false);
  141|  6.92k|            SCN_UNREACHABLE;
  142|  6.92k|        }
  143|  6.92k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  6.92k|    {
  112|  6.92k|        SCN_TRY(it,
  ------------------
  |  |   71|  6.92k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.92k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.92k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.92k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.92k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  6.92k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  6.92k|                    .transform_error(make_eof_scan_error));
  115|  6.92k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  6.92k|                               loc);
  117|  6.92k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIaEENS0_13scan_expectedIPKcEERT_:
  222|   515k|    {
  223|   515k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   515k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   515k|                          basic_contiguous_scan_context<char_type>>) {
  227|   515k|            auto rd = make_reader<T, char_type>();
  228|   515k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   515k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 515k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   515k|            return impl(rd, range, value);
  233|   515k|        }
  234|   515k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   515k|            auto rd = make_reader<T, char_type>();
  236|   515k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   515k|                return unexpected(e);
  238|   515k|            }
  239|       |
  240|   515k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   515k|                return impl(rd, range, value);
  242|   515k|            }
  243|       |
  244|   515k|            auto crange = get_as_contiguous(range);
  245|   515k|            SCN_TRY(it, impl(rd, crange, value));
  246|   515k|            return ranges_polyfill::batch_next(
  247|   515k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   515k|        }
  249|   515k|        else {
  250|   515k|            SCN_EXPECT(false);
  251|   515k|            SCN_UNREACHABLE;
  252|   515k|        }
  253|   515k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   515k|    {
  205|   515k|        SCN_TRY(it,
  ------------------
  |  |   71|   515k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   515k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   515k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   515k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.23k, False: 513k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.23k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.23k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.23k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.23k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.23k|    }                                                  \
  |  |  |  |   70|   515k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   513k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   513k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   513k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   513k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   513k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 513k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   513k|        return rd.read_specs(subr, specs, value, loc);
  218|   513k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
  222|   807k|    {
  223|   807k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   807k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   807k|                          basic_contiguous_scan_context<char_type>>) {
  227|   807k|            auto rd = make_reader<T, char_type>();
  228|   807k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   807k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 807k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   807k|            return impl(rd, range, value);
  233|   807k|        }
  234|   807k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   807k|            auto rd = make_reader<T, char_type>();
  236|   807k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   807k|                return unexpected(e);
  238|   807k|            }
  239|       |
  240|   807k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   807k|                return impl(rd, range, value);
  242|   807k|            }
  243|       |
  244|   807k|            auto crange = get_as_contiguous(range);
  245|   807k|            SCN_TRY(it, impl(rd, crange, value));
  246|   807k|            return ranges_polyfill::batch_next(
  247|   807k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   807k|        }
  249|   807k|        else {
  250|   807k|            SCN_EXPECT(false);
  251|   807k|            SCN_UNREACHABLE;
  252|   807k|        }
  253|   807k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   807k|    {
  205|   807k|        SCN_TRY(it,
  ------------------
  |  |   71|   807k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   807k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   807k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   807k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.40k, False: 803k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.40k|    }                                                  \
  |  |  |  |   70|   807k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   803k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   803k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   803k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   803k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   803k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 803k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   803k|        return rd.read_specs(subr, specs, value, loc);
  218|   803k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIxEENS0_13scan_expectedIPKcEERT_:
  222|   845k|    {
  223|   845k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   845k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   845k|                          basic_contiguous_scan_context<char_type>>) {
  227|   845k|            auto rd = make_reader<T, char_type>();
  228|   845k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   845k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 845k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   845k|            return impl(rd, range, value);
  233|   845k|        }
  234|   845k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   845k|            auto rd = make_reader<T, char_type>();
  236|   845k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   845k|                return unexpected(e);
  238|   845k|            }
  239|       |
  240|   845k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   845k|                return impl(rd, range, value);
  242|   845k|            }
  243|       |
  244|   845k|            auto crange = get_as_contiguous(range);
  245|   845k|            SCN_TRY(it, impl(rd, crange, value));
  246|   845k|            return ranges_polyfill::batch_next(
  247|   845k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   845k|        }
  249|   845k|        else {
  250|   845k|            SCN_EXPECT(false);
  251|   845k|            SCN_UNREACHABLE;
  252|   845k|        }
  253|   845k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   845k|    {
  205|   845k|        SCN_TRY(it,
  ------------------
  |  |   71|   845k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   845k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   845k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   845k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.83k, False: 840k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.83k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.83k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.83k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.83k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.83k|    }                                                  \
  |  |  |  |   70|   845k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   840k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   840k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   840k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   840k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   840k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 840k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   840k|        return rd.read_specs(subr, specs, value, loc);
  218|   840k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIhEENS0_13scan_expectedIPKcEERT_:
  222|   531k|    {
  223|   531k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   531k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   531k|                          basic_contiguous_scan_context<char_type>>) {
  227|   531k|            auto rd = make_reader<T, char_type>();
  228|   531k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   531k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 531k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   531k|            return impl(rd, range, value);
  233|   531k|        }
  234|   531k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   531k|            auto rd = make_reader<T, char_type>();
  236|   531k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   531k|                return unexpected(e);
  238|   531k|            }
  239|       |
  240|   531k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   531k|                return impl(rd, range, value);
  242|   531k|            }
  243|       |
  244|   531k|            auto crange = get_as_contiguous(range);
  245|   531k|            SCN_TRY(it, impl(rd, crange, value));
  246|   531k|            return ranges_polyfill::batch_next(
  247|   531k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   531k|        }
  249|   531k|        else {
  250|   531k|            SCN_EXPECT(false);
  251|   531k|            SCN_UNREACHABLE;
  252|   531k|        }
  253|   531k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   531k|    {
  205|   531k|        SCN_TRY(it,
  ------------------
  |  |   71|   531k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   531k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   531k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   531k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.93k, False: 529k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.93k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.93k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.93k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.93k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.93k|    }                                                  \
  |  |  |  |   70|   531k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   529k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   529k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   529k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   529k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   529k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 529k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   529k|        return rd.read_specs(subr, specs, value, loc);
  218|   529k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
  222|   672k|    {
  223|   672k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   672k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   672k|                          basic_contiguous_scan_context<char_type>>) {
  227|   672k|            auto rd = make_reader<T, char_type>();
  228|   672k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   672k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 672k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   672k|            return impl(rd, range, value);
  233|   672k|        }
  234|   672k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   672k|            auto rd = make_reader<T, char_type>();
  236|   672k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   672k|                return unexpected(e);
  238|   672k|            }
  239|       |
  240|   672k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   672k|                return impl(rd, range, value);
  242|   672k|            }
  243|       |
  244|   672k|            auto crange = get_as_contiguous(range);
  245|   672k|            SCN_TRY(it, impl(rd, crange, value));
  246|   672k|            return ranges_polyfill::batch_next(
  247|   672k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   672k|        }
  249|   672k|        else {
  250|   672k|            SCN_EXPECT(false);
  251|   672k|            SCN_UNREACHABLE;
  252|   672k|        }
  253|   672k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   672k|    {
  205|   672k|        SCN_TRY(it,
  ------------------
  |  |   71|   672k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   672k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   672k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   672k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.24k, False: 668k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.24k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.24k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.24k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.24k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.24k|    }                                                  \
  |  |  |  |   70|   672k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   668k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   668k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   668k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   668k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   668k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 668k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   668k|        return rd.read_specs(subr, specs, value, loc);
  218|   668k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIyEENS0_13scan_expectedIPKcEERT_:
  222|   696k|    {
  223|   696k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   696k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   696k|                          basic_contiguous_scan_context<char_type>>) {
  227|   696k|            auto rd = make_reader<T, char_type>();
  228|   696k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   696k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 696k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   696k|            return impl(rd, range, value);
  233|   696k|        }
  234|   696k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   696k|            auto rd = make_reader<T, char_type>();
  236|   696k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   696k|                return unexpected(e);
  238|   696k|            }
  239|       |
  240|   696k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   696k|                return impl(rd, range, value);
  242|   696k|            }
  243|       |
  244|   696k|            auto crange = get_as_contiguous(range);
  245|   696k|            SCN_TRY(it, impl(rd, crange, value));
  246|   696k|            return ranges_polyfill::batch_next(
  247|   696k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   696k|        }
  249|   696k|        else {
  250|   696k|            SCN_EXPECT(false);
  251|   696k|            SCN_UNREACHABLE;
  252|   696k|        }
  253|   696k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   696k|    {
  205|   696k|        SCN_TRY(it,
  ------------------
  |  |   71|   696k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   696k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   696k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   696k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.44k, False: 692k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.44k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.44k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.44k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.44k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.44k|    }                                                  \
  |  |  |  |   70|   696k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   692k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   692k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   692k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   692k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   692k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 692k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   692k|        return rd.read_specs(subr, specs, value, loc);
  218|   692k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  32.2k|    {
  223|  32.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  32.2k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  32.2k|            auto rd = make_reader<T, char_type>();
  228|  32.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  32.2k|                return unexpected(e);
  230|  32.2k|            }
  231|       |
  232|  32.2k|            return impl(rd, range, value);
  233|  32.2k|        }
  234|  32.2k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  32.2k|            auto rd = make_reader<T, char_type>();
  236|  32.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  32.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 32.2k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  32.2k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 32.2k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  32.2k|                return impl(rd, range, value);
  242|  32.2k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  32.2k|        else {
  250|  32.2k|            SCN_EXPECT(false);
  251|  32.2k|            SCN_UNREACHABLE;
  252|  32.2k|        }
  253|  32.2k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  32.2k|    {
  205|  32.2k|        SCN_TRY(it,
  ------------------
  |  |   71|  32.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  32.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  32.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  32.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2, False: 32.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      2|    }                                                  \
  |  |  |  |   70|  32.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  32.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  32.2k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  32.2k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  32.2k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  32.2k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 32.2k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  32.2k|        return rd.read_specs(subr, specs, value, loc);
  218|  32.2k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  32.2k|    {
  223|  32.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  32.2k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  32.2k|            auto rd = make_reader<T, char_type>();
  228|  32.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  32.2k|                return unexpected(e);
  230|  32.2k|            }
  231|       |
  232|  32.2k|            return impl(rd, range, value);
  233|  32.2k|        }
  234|  32.2k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  32.2k|            auto rd = make_reader<T, char_type>();
  236|  32.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  32.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 32.2k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  32.2k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 32.2k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  32.2k|                return impl(rd, range, value);
  242|  32.2k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  32.2k|        else {
  250|  32.2k|            SCN_EXPECT(false);
  251|  32.2k|            SCN_UNREACHABLE;
  252|  32.2k|        }
  253|  32.2k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  32.2k|    {
  205|  32.2k|        SCN_TRY(it,
  ------------------
  |  |   71|  32.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  32.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  32.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  32.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2, False: 32.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      2|    }                                                  \
  |  |  |  |   70|  32.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  32.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  32.2k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  32.2k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  32.2k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  32.2k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 32.2k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  32.2k|        return rd.read_specs(subr, specs, value, loc);
  218|  32.2k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  32.2k|    {
  223|  32.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  32.2k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  32.2k|            auto rd = make_reader<T, char_type>();
  228|  32.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  32.2k|                return unexpected(e);
  230|  32.2k|            }
  231|       |
  232|  32.2k|            return impl(rd, range, value);
  233|  32.2k|        }
  234|  32.2k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  32.2k|            auto rd = make_reader<T, char_type>();
  236|  32.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  32.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 32.2k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  32.2k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 32.2k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  32.2k|                return impl(rd, range, value);
  242|  32.2k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  32.2k|        else {
  250|  32.2k|            SCN_EXPECT(false);
  251|  32.2k|            SCN_UNREACHABLE;
  252|  32.2k|        }
  253|  32.2k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  32.2k|    {
  205|  32.2k|        SCN_TRY(it,
  ------------------
  |  |   71|  32.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  32.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  32.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  32.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2, False: 32.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      2|    }                                                  \
  |  |  |  |   70|  32.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  32.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  32.2k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  32.2k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  32.2k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  32.2k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 32.2k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  32.2k|        return rd.read_specs(subr, specs, value, loc);
  218|  32.2k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  32.2k|    {
  223|  32.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  32.2k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  32.2k|            auto rd = make_reader<T, char_type>();
  228|  32.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  32.2k|                return unexpected(e);
  230|  32.2k|            }
  231|       |
  232|  32.2k|            return impl(rd, range, value);
  233|  32.2k|        }
  234|  32.2k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  32.2k|            auto rd = make_reader<T, char_type>();
  236|  32.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  32.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 32.2k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  32.2k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 32.2k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  32.2k|                return impl(rd, range, value);
  242|  32.2k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  32.2k|        else {
  250|  32.2k|            SCN_EXPECT(false);
  251|  32.2k|            SCN_UNREACHABLE;
  252|  32.2k|        }
  253|  32.2k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  32.2k|    {
  205|  32.2k|        SCN_TRY(it,
  ------------------
  |  |   71|  32.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  32.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  32.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  32.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2, False: 32.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      2|    }                                                  \
  |  |  |  |   70|  32.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  32.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  32.2k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  32.2k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  32.2k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  32.2k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 32.2k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  32.2k|        return rd.read_specs(subr, specs, value, loc);
  218|  32.2k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  32.2k|    {
  223|  32.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  32.2k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  32.2k|            auto rd = make_reader<T, char_type>();
  228|  32.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  32.2k|                return unexpected(e);
  230|  32.2k|            }
  231|       |
  232|  32.2k|            return impl(rd, range, value);
  233|  32.2k|        }
  234|  32.2k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  32.2k|            auto rd = make_reader<T, char_type>();
  236|  32.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  32.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 32.2k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  32.2k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 32.2k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  32.2k|                return impl(rd, range, value);
  242|  32.2k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  32.2k|        else {
  250|  32.2k|            SCN_EXPECT(false);
  251|  32.2k|            SCN_UNREACHABLE;
  252|  32.2k|        }
  253|  32.2k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  32.2k|    {
  205|  32.2k|        SCN_TRY(it,
  ------------------
  |  |   71|  32.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  32.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  32.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  32.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2, False: 32.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      2|    }                                                  \
  |  |  |  |   70|  32.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  32.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  32.2k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  32.2k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  32.2k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  32.2k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 32.2k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  32.2k|        return rd.read_specs(subr, specs, value, loc);
  218|  32.2k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  32.2k|    {
  223|  32.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  32.2k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  32.2k|            auto rd = make_reader<T, char_type>();
  228|  32.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  32.2k|                return unexpected(e);
  230|  32.2k|            }
  231|       |
  232|  32.2k|            return impl(rd, range, value);
  233|  32.2k|        }
  234|  32.2k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  32.2k|            auto rd = make_reader<T, char_type>();
  236|  32.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  32.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 32.2k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  32.2k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 32.2k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  32.2k|                return impl(rd, range, value);
  242|  32.2k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  32.2k|        else {
  250|  32.2k|            SCN_EXPECT(false);
  251|  32.2k|            SCN_UNREACHABLE;
  252|  32.2k|        }
  253|  32.2k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  32.2k|    {
  205|  32.2k|        SCN_TRY(it,
  ------------------
  |  |   71|  32.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  32.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  32.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  32.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2, False: 32.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      2|    }                                                  \
  |  |  |  |   70|  32.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  32.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  32.2k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  32.2k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  32.2k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  32.2k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 32.2k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  32.2k|        return rd.read_specs(subr, specs, value, loc);
  218|  32.2k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIaEENS0_13scan_expectedIPKwEERT_:
  121|   215k|    {
  122|   215k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   215k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   215k|                          basic_contiguous_scan_context<char_type>>) {
  126|   215k|            auto rd = make_reader<T, char_type>();
  127|   215k|            return impl(rd, range, value);
  128|   215k|        }
  129|   215k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   215k|            auto rd = make_reader<T, char_type>();
  131|   215k|            if (!is_segment_contiguous(range)) {
  132|   215k|                return impl(rd, range, value);
  133|   215k|            }
  134|   215k|            auto crange = get_as_contiguous(range);
  135|   215k|            SCN_TRY(it, impl(rd, crange, value));
  136|   215k|            return ranges_polyfill::batch_next(
  137|   215k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   215k|        }
  139|   215k|        else {
  140|   215k|            SCN_EXPECT(false);
  141|   215k|            SCN_UNREACHABLE;
  142|   215k|        }
  143|   215k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   215k|    {
  112|   215k|        SCN_TRY(it,
  ------------------
  |  |   71|   215k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   215k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   215k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   215k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.10k, False: 214k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.10k|    }                                                  \
  |  |  |  |   70|   215k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   214k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   214k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   214k|                    .transform_error(make_eof_scan_error));
  115|   214k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   214k|                               loc);
  117|   215k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEbOSF_NS0_6detail10locale_refE:
   42|  5.42M|{
   43|  5.42M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  5.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 28.7k, False: 5.39M]
  |  |  ------------------
  ------------------
   44|  28.7k|        return unexpected(e);
   45|  28.7k|    }
   46|       |
   47|  5.39M|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 5.39M]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|  5.39M|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|  5.39M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|  5.39M|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
  121|   281k|    {
  122|   281k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   281k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   281k|                          basic_contiguous_scan_context<char_type>>) {
  126|   281k|            auto rd = make_reader<T, char_type>();
  127|   281k|            return impl(rd, range, value);
  128|   281k|        }
  129|   281k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   281k|            auto rd = make_reader<T, char_type>();
  131|   281k|            if (!is_segment_contiguous(range)) {
  132|   281k|                return impl(rd, range, value);
  133|   281k|            }
  134|   281k|            auto crange = get_as_contiguous(range);
  135|   281k|            SCN_TRY(it, impl(rd, crange, value));
  136|   281k|            return ranges_polyfill::batch_next(
  137|   281k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   281k|        }
  139|   281k|        else {
  140|   281k|            SCN_EXPECT(false);
  141|   281k|            SCN_UNREACHABLE;
  142|   281k|        }
  143|   281k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   281k|    {
  112|   281k|        SCN_TRY(it,
  ------------------
  |  |   71|   281k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   281k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   281k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   281k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.83k, False: 279k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.83k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.83k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.83k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.83k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.83k|    }                                                  \
  |  |  |  |   70|   281k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   279k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   279k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   279k|                    .transform_error(make_eof_scan_error));
  115|   279k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   279k|                               loc);
  117|   281k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIxEENS0_13scan_expectedIPKwEERT_:
  121|   296k|    {
  122|   296k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   296k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   296k|                          basic_contiguous_scan_context<char_type>>) {
  126|   296k|            auto rd = make_reader<T, char_type>();
  127|   296k|            return impl(rd, range, value);
  128|   296k|        }
  129|   296k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   296k|            auto rd = make_reader<T, char_type>();
  131|   296k|            if (!is_segment_contiguous(range)) {
  132|   296k|                return impl(rd, range, value);
  133|   296k|            }
  134|   296k|            auto crange = get_as_contiguous(range);
  135|   296k|            SCN_TRY(it, impl(rd, crange, value));
  136|   296k|            return ranges_polyfill::batch_next(
  137|   296k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   296k|        }
  139|   296k|        else {
  140|   296k|            SCN_EXPECT(false);
  141|   296k|            SCN_UNREACHABLE;
  142|   296k|        }
  143|   296k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   296k|    {
  112|   296k|        SCN_TRY(it,
  ------------------
  |  |   71|   296k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   296k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   296k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   296k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.98k, False: 294k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.98k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.98k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.98k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.98k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.98k|    }                                                  \
  |  |  |  |   70|   296k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   294k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   294k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   294k|                    .transform_error(make_eof_scan_error));
  115|   294k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   294k|                               loc);
  117|   296k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIhEENS0_13scan_expectedIPKwEERT_:
  121|   219k|    {
  122|   219k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   219k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   219k|                          basic_contiguous_scan_context<char_type>>) {
  126|   219k|            auto rd = make_reader<T, char_type>();
  127|   219k|            return impl(rd, range, value);
  128|   219k|        }
  129|   219k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   219k|            auto rd = make_reader<T, char_type>();
  131|   219k|            if (!is_segment_contiguous(range)) {
  132|   219k|                return impl(rd, range, value);
  133|   219k|            }
  134|   219k|            auto crange = get_as_contiguous(range);
  135|   219k|            SCN_TRY(it, impl(rd, crange, value));
  136|   219k|            return ranges_polyfill::batch_next(
  137|   219k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   219k|        }
  139|   219k|        else {
  140|   219k|            SCN_EXPECT(false);
  141|   219k|            SCN_UNREACHABLE;
  142|   219k|        }
  143|   219k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   219k|    {
  112|   219k|        SCN_TRY(it,
  ------------------
  |  |   71|   219k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   219k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   219k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   219k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 981, False: 218k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    981|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    981|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    981|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    981|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    981|    }                                                  \
  |  |  |  |   70|   219k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   218k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   218k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   218k|                    .transform_error(make_eof_scan_error));
  115|   218k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   218k|                               loc);
  117|   219k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
  121|   246k|    {
  122|   246k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   246k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   246k|                          basic_contiguous_scan_context<char_type>>) {
  126|   246k|            auto rd = make_reader<T, char_type>();
  127|   246k|            return impl(rd, range, value);
  128|   246k|        }
  129|   246k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   246k|            auto rd = make_reader<T, char_type>();
  131|   246k|            if (!is_segment_contiguous(range)) {
  132|   246k|                return impl(rd, range, value);
  133|   246k|            }
  134|   246k|            auto crange = get_as_contiguous(range);
  135|   246k|            SCN_TRY(it, impl(rd, crange, value));
  136|   246k|            return ranges_polyfill::batch_next(
  137|   246k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   246k|        }
  139|   246k|        else {
  140|   246k|            SCN_EXPECT(false);
  141|   246k|            SCN_UNREACHABLE;
  142|   246k|        }
  143|   246k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   246k|    {
  112|   246k|        SCN_TRY(it,
  ------------------
  |  |   71|   246k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   246k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   246k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   246k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.43k, False: 245k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.43k|    }                                                  \
  |  |  |  |   70|   246k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   245k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   245k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   245k|                    .transform_error(make_eof_scan_error));
  115|   245k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   245k|                               loc);
  117|   246k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIyEENS0_13scan_expectedIPKwEERT_:
  121|   256k|    {
  122|   256k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   256k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   256k|                          basic_contiguous_scan_context<char_type>>) {
  126|   256k|            auto rd = make_reader<T, char_type>();
  127|   256k|            return impl(rd, range, value);
  128|   256k|        }
  129|   256k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   256k|            auto rd = make_reader<T, char_type>();
  131|   256k|            if (!is_segment_contiguous(range)) {
  132|   256k|                return impl(rd, range, value);
  133|   256k|            }
  134|   256k|            auto crange = get_as_contiguous(range);
  135|   256k|            SCN_TRY(it, impl(rd, crange, value));
  136|   256k|            return ranges_polyfill::batch_next(
  137|   256k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   256k|        }
  139|   256k|        else {
  140|   256k|            SCN_EXPECT(false);
  141|   256k|            SCN_UNREACHABLE;
  142|   256k|        }
  143|   256k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   256k|    {
  112|   256k|        SCN_TRY(it,
  ------------------
  |  |   71|   256k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   256k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   256k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   256k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.50k, False: 254k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.50k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.50k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.50k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.50k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.50k|    }                                                  \
  |  |  |  |   70|   256k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   254k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   254k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   254k|                    .transform_error(make_eof_scan_error));
  115|   254k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   254k|                               loc);
  117|   256k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIaEENS0_13scan_expectedIPKwEERT_:
  222|   500k|    {
  223|   500k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   500k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   500k|                          basic_contiguous_scan_context<char_type>>) {
  227|   500k|            auto rd = make_reader<T, char_type>();
  228|   500k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   500k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 500k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   500k|            return impl(rd, range, value);
  233|   500k|        }
  234|   500k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   500k|            auto rd = make_reader<T, char_type>();
  236|   500k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   500k|                return unexpected(e);
  238|   500k|            }
  239|       |
  240|   500k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   500k|                return impl(rd, range, value);
  242|   500k|            }
  243|       |
  244|   500k|            auto crange = get_as_contiguous(range);
  245|   500k|            SCN_TRY(it, impl(rd, crange, value));
  246|   500k|            return ranges_polyfill::batch_next(
  247|   500k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   500k|        }
  249|   500k|        else {
  250|   500k|            SCN_EXPECT(false);
  251|   500k|            SCN_UNREACHABLE;
  252|   500k|        }
  253|   500k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   500k|    {
  205|   500k|        SCN_TRY(it,
  ------------------
  |  |   71|   500k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   500k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   500k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   500k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.34k, False: 497k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.34k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.34k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.34k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.34k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.34k|    }                                                  \
  |  |  |  |   70|   500k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   497k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   497k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   497k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   497k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   497k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 497k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   497k|        return rd.read_specs(subr, specs, value, loc);
  218|   497k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
  222|   752k|    {
  223|   752k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   752k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   752k|                          basic_contiguous_scan_context<char_type>>) {
  227|   752k|            auto rd = make_reader<T, char_type>();
  228|   752k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   752k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 752k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   752k|            return impl(rd, range, value);
  233|   752k|        }
  234|   752k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   752k|            auto rd = make_reader<T, char_type>();
  236|   752k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   752k|                return unexpected(e);
  238|   752k|            }
  239|       |
  240|   752k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   752k|                return impl(rd, range, value);
  242|   752k|            }
  243|       |
  244|   752k|            auto crange = get_as_contiguous(range);
  245|   752k|            SCN_TRY(it, impl(rd, crange, value));
  246|   752k|            return ranges_polyfill::batch_next(
  247|   752k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   752k|        }
  249|   752k|        else {
  250|   752k|            SCN_EXPECT(false);
  251|   752k|            SCN_UNREACHABLE;
  252|   752k|        }
  253|   752k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   752k|    {
  205|   752k|        SCN_TRY(it,
  ------------------
  |  |   71|   752k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   752k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   752k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   752k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.56k, False: 747k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.56k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.56k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.56k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.56k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.56k|    }                                                  \
  |  |  |  |   70|   752k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   747k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   747k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   747k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   747k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   747k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 747k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   747k|        return rd.read_specs(subr, specs, value, loc);
  218|   747k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIxEENS0_13scan_expectedIPKwEERT_:
  222|   785k|    {
  223|   785k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   785k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   785k|                          basic_contiguous_scan_context<char_type>>) {
  227|   785k|            auto rd = make_reader<T, char_type>();
  228|   785k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   785k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 785k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   785k|            return impl(rd, range, value);
  233|   785k|        }
  234|   785k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   785k|            auto rd = make_reader<T, char_type>();
  236|   785k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   785k|                return unexpected(e);
  238|   785k|            }
  239|       |
  240|   785k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   785k|                return impl(rd, range, value);
  242|   785k|            }
  243|       |
  244|   785k|            auto crange = get_as_contiguous(range);
  245|   785k|            SCN_TRY(it, impl(rd, crange, value));
  246|   785k|            return ranges_polyfill::batch_next(
  247|   785k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   785k|        }
  249|   785k|        else {
  250|   785k|            SCN_EXPECT(false);
  251|   785k|            SCN_UNREACHABLE;
  252|   785k|        }
  253|   785k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   785k|    {
  205|   785k|        SCN_TRY(it,
  ------------------
  |  |   71|   785k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   785k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   785k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   785k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.99k, False: 779k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.99k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.99k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.99k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.99k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.99k|    }                                                  \
  |  |  |  |   70|   785k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   779k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   779k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   779k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   779k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   779k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 779k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   779k|        return rd.read_specs(subr, specs, value, loc);
  218|   779k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIhEENS0_13scan_expectedIPKwEERT_:
  222|   529k|    {
  223|   529k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   529k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   529k|                          basic_contiguous_scan_context<char_type>>) {
  227|   529k|            auto rd = make_reader<T, char_type>();
  228|   529k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   529k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 529k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   529k|            return impl(rd, range, value);
  233|   529k|        }
  234|   529k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   529k|            auto rd = make_reader<T, char_type>();
  236|   529k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   529k|                return unexpected(e);
  238|   529k|            }
  239|       |
  240|   529k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   529k|                return impl(rd, range, value);
  242|   529k|            }
  243|       |
  244|   529k|            auto crange = get_as_contiguous(range);
  245|   529k|            SCN_TRY(it, impl(rd, crange, value));
  246|   529k|            return ranges_polyfill::batch_next(
  247|   529k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   529k|        }
  249|   529k|        else {
  250|   529k|            SCN_EXPECT(false);
  251|   529k|            SCN_UNREACHABLE;
  252|   529k|        }
  253|   529k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   529k|    {
  205|   529k|        SCN_TRY(it,
  ------------------
  |  |   71|   529k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   529k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   529k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   529k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.02k, False: 526k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.02k|    }                                                  \
  |  |  |  |   70|   529k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   526k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   526k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   526k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   526k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   526k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 526k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   526k|        return rd.read_specs(subr, specs, value, loc);
  218|   526k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
  222|   656k|    {
  223|   656k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   656k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   656k|                          basic_contiguous_scan_context<char_type>>) {
  227|   656k|            auto rd = make_reader<T, char_type>();
  228|   656k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   656k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 656k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   656k|            return impl(rd, range, value);
  233|   656k|        }
  234|   656k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   656k|            auto rd = make_reader<T, char_type>();
  236|   656k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   656k|                return unexpected(e);
  238|   656k|            }
  239|       |
  240|   656k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   656k|                return impl(rd, range, value);
  242|   656k|            }
  243|       |
  244|   656k|            auto crange = get_as_contiguous(range);
  245|   656k|            SCN_TRY(it, impl(rd, crange, value));
  246|   656k|            return ranges_polyfill::batch_next(
  247|   656k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   656k|        }
  249|   656k|        else {
  250|   656k|            SCN_EXPECT(false);
  251|   656k|            SCN_UNREACHABLE;
  252|   656k|        }
  253|   656k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   656k|    {
  205|   656k|        SCN_TRY(it,
  ------------------
  |  |   71|   656k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   656k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   656k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   656k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.37k, False: 652k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.37k|    }                                                  \
  |  |  |  |   70|   656k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   652k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   652k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   652k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   652k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   652k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 652k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   652k|        return rd.read_specs(subr, specs, value, loc);
  218|   652k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIyEENS0_13scan_expectedIPKwEERT_:
  222|   679k|    {
  223|   679k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   679k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   679k|                          basic_contiguous_scan_context<char_type>>) {
  227|   679k|            auto rd = make_reader<T, char_type>();
  228|   679k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   679k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 679k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   679k|            return impl(rd, range, value);
  233|   679k|        }
  234|   679k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   679k|            auto rd = make_reader<T, char_type>();
  236|   679k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   679k|                return unexpected(e);
  238|   679k|            }
  239|       |
  240|   679k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   679k|                return impl(rd, range, value);
  242|   679k|            }
  243|       |
  244|   679k|            auto crange = get_as_contiguous(range);
  245|   679k|            SCN_TRY(it, impl(rd, crange, value));
  246|   679k|            return ranges_polyfill::batch_next(
  247|   679k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   679k|        }
  249|   679k|        else {
  250|   679k|            SCN_EXPECT(false);
  251|   679k|            SCN_UNREACHABLE;
  252|   679k|        }
  253|   679k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   679k|    {
  205|   679k|        SCN_TRY(it,
  ------------------
  |  |   71|   679k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   679k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   679k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   679k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.57k, False: 674k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.57k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.57k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.57k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.57k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.57k|    }                                                  \
  |  |  |  |   70|   679k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   674k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   674k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   674k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   674k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   674k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 674k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   674k|        return rd.read_specs(subr, specs, value, loc);
  218|   674k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  20.7k|    {
  122|  20.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  20.7k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  20.7k|            auto rd = make_reader<T, char_type>();
  127|  20.7k|            return impl(rd, range, value);
  128|  20.7k|        }
  129|  20.7k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  20.7k|            auto rd = make_reader<T, char_type>();
  131|  20.7k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 20.7k, False: 0]
  ------------------
  132|  20.7k|                return impl(rd, range, value);
  133|  20.7k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  20.7k|        else {
  140|  20.7k|            SCN_EXPECT(false);
  141|  20.7k|            SCN_UNREACHABLE;
  142|  20.7k|        }
  143|  20.7k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  20.7k|    {
  112|  20.7k|        SCN_TRY(it,
  ------------------
  |  |   71|  20.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  20.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  20.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  20.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 20.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  20.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  20.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  20.7k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  20.7k|                    .transform_error(make_eof_scan_error));
  115|  20.7k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  20.7k|                               loc);
  117|  20.7k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEbOSI_NS7_10locale_refE:
   42|   678k|{
   43|   678k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   678k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 30, False: 678k]
  |  |  ------------------
  ------------------
   44|     30|        return unexpected(e);
   45|     30|    }
   46|       |
   47|   678k|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 678k]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|   678k|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|   678k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|   678k|}
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  20.7k|    {
  122|  20.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  20.7k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  20.7k|            auto rd = make_reader<T, char_type>();
  127|  20.7k|            return impl(rd, range, value);
  128|  20.7k|        }
  129|  20.7k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  20.7k|            auto rd = make_reader<T, char_type>();
  131|  20.7k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 20.7k, False: 0]
  ------------------
  132|  20.7k|                return impl(rd, range, value);
  133|  20.7k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  20.7k|        else {
  140|  20.7k|            SCN_EXPECT(false);
  141|  20.7k|            SCN_UNREACHABLE;
  142|  20.7k|        }
  143|  20.7k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  20.7k|    {
  112|  20.7k|        SCN_TRY(it,
  ------------------
  |  |   71|  20.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  20.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  20.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  20.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 20.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  20.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  20.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  20.7k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  20.7k|                    .transform_error(make_eof_scan_error));
  115|  20.7k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  20.7k|                               loc);
  117|  20.7k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  20.7k|    {
  122|  20.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  20.7k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  20.7k|            auto rd = make_reader<T, char_type>();
  127|  20.7k|            return impl(rd, range, value);
  128|  20.7k|        }
  129|  20.7k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  20.7k|            auto rd = make_reader<T, char_type>();
  131|  20.7k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 20.7k, False: 0]
  ------------------
  132|  20.7k|                return impl(rd, range, value);
  133|  20.7k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  20.7k|        else {
  140|  20.7k|            SCN_EXPECT(false);
  141|  20.7k|            SCN_UNREACHABLE;
  142|  20.7k|        }
  143|  20.7k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  20.7k|    {
  112|  20.7k|        SCN_TRY(it,
  ------------------
  |  |   71|  20.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  20.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  20.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  20.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 20.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  20.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  20.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  20.7k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  20.7k|                    .transform_error(make_eof_scan_error));
  115|  20.7k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  20.7k|                               loc);
  117|  20.7k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  20.7k|    {
  122|  20.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  20.7k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  20.7k|            auto rd = make_reader<T, char_type>();
  127|  20.7k|            return impl(rd, range, value);
  128|  20.7k|        }
  129|  20.7k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  20.7k|            auto rd = make_reader<T, char_type>();
  131|  20.7k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 20.7k, False: 0]
  ------------------
  132|  20.7k|                return impl(rd, range, value);
  133|  20.7k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  20.7k|        else {
  140|  20.7k|            SCN_EXPECT(false);
  141|  20.7k|            SCN_UNREACHABLE;
  142|  20.7k|        }
  143|  20.7k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  20.7k|    {
  112|  20.7k|        SCN_TRY(it,
  ------------------
  |  |   71|  20.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  20.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  20.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  20.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 20.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  20.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  20.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  20.7k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  20.7k|                    .transform_error(make_eof_scan_error));
  115|  20.7k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  20.7k|                               loc);
  117|  20.7k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  20.7k|    {
  122|  20.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  20.7k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  20.7k|            auto rd = make_reader<T, char_type>();
  127|  20.7k|            return impl(rd, range, value);
  128|  20.7k|        }
  129|  20.7k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  20.7k|            auto rd = make_reader<T, char_type>();
  131|  20.7k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 20.7k, False: 0]
  ------------------
  132|  20.7k|                return impl(rd, range, value);
  133|  20.7k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  20.7k|        else {
  140|  20.7k|            SCN_EXPECT(false);
  141|  20.7k|            SCN_UNREACHABLE;
  142|  20.7k|        }
  143|  20.7k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  20.7k|    {
  112|  20.7k|        SCN_TRY(it,
  ------------------
  |  |   71|  20.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  20.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  20.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  20.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 20.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  20.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  20.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  20.7k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  20.7k|                    .transform_error(make_eof_scan_error));
  115|  20.7k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  20.7k|                               loc);
  117|  20.7k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  20.7k|    {
  122|  20.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  20.7k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  20.7k|            auto rd = make_reader<T, char_type>();
  127|  20.7k|            return impl(rd, range, value);
  128|  20.7k|        }
  129|  20.7k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  20.7k|            auto rd = make_reader<T, char_type>();
  131|  20.7k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 20.7k, False: 0]
  ------------------
  132|  20.7k|                return impl(rd, range, value);
  133|  20.7k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  20.7k|        else {
  140|  20.7k|            SCN_EXPECT(false);
  141|  20.7k|            SCN_UNREACHABLE;
  142|  20.7k|        }
  143|  20.7k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  20.7k|    {
  112|  20.7k|        SCN_TRY(it,
  ------------------
  |  |   71|  20.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  20.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  20.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  20.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 20.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  20.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  20.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  20.7k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  20.7k|                    .transform_error(make_eof_scan_error));
  115|  20.7k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  20.7k|                               loc);
  117|  20.7k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  83.0k|    {
  223|  83.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  83.0k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  83.0k|            auto rd = make_reader<T, char_type>();
  228|  83.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  83.0k|                return unexpected(e);
  230|  83.0k|            }
  231|       |
  232|  83.0k|            return impl(rd, range, value);
  233|  83.0k|        }
  234|  83.0k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  83.0k|            auto rd = make_reader<T, char_type>();
  236|  83.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  83.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 83.0k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  83.0k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 83.0k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  83.0k|                return impl(rd, range, value);
  242|  83.0k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  83.0k|        else {
  250|  83.0k|            SCN_EXPECT(false);
  251|  83.0k|            SCN_UNREACHABLE;
  252|  83.0k|        }
  253|  83.0k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  83.0k|    {
  205|  83.0k|        SCN_TRY(it,
  ------------------
  |  |   71|  83.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  83.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  83.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  83.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2, False: 83.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      2|    }                                                  \
  |  |  |  |   70|  83.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  83.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  83.0k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  83.0k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  83.0k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  83.0k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 83.0k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  83.0k|        return rd.read_specs(subr, specs, value, loc);
  218|  83.0k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  96.8k|    {
  223|  96.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  96.8k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  96.8k|            auto rd = make_reader<T, char_type>();
  228|  96.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  96.8k|                return unexpected(e);
  230|  96.8k|            }
  231|       |
  232|  96.8k|            return impl(rd, range, value);
  233|  96.8k|        }
  234|  96.8k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  96.8k|            auto rd = make_reader<T, char_type>();
  236|  96.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  96.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 96.8k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  96.8k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 96.8k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  96.8k|                return impl(rd, range, value);
  242|  96.8k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  96.8k|        else {
  250|  96.8k|            SCN_EXPECT(false);
  251|  96.8k|            SCN_UNREACHABLE;
  252|  96.8k|        }
  253|  96.8k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  96.8k|    {
  205|  96.8k|        SCN_TRY(it,
  ------------------
  |  |   71|  96.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  96.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  96.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  96.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6, False: 96.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|  96.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  96.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  96.8k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  96.8k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  96.8k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  96.8k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 96.8k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  96.8k|        return rd.read_specs(subr, specs, value, loc);
  218|  96.8k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  96.8k|    {
  223|  96.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  96.8k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  96.8k|            auto rd = make_reader<T, char_type>();
  228|  96.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  96.8k|                return unexpected(e);
  230|  96.8k|            }
  231|       |
  232|  96.8k|            return impl(rd, range, value);
  233|  96.8k|        }
  234|  96.8k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  96.8k|            auto rd = make_reader<T, char_type>();
  236|  96.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  96.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 96.8k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  96.8k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 96.8k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  96.8k|                return impl(rd, range, value);
  242|  96.8k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  96.8k|        else {
  250|  96.8k|            SCN_EXPECT(false);
  251|  96.8k|            SCN_UNREACHABLE;
  252|  96.8k|        }
  253|  96.8k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  96.8k|    {
  205|  96.8k|        SCN_TRY(it,
  ------------------
  |  |   71|  96.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  96.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  96.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  96.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6, False: 96.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|  96.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  96.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  96.8k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  96.8k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  96.8k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  96.8k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 96.8k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  96.8k|        return rd.read_specs(subr, specs, value, loc);
  218|  96.8k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  83.0k|    {
  223|  83.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  83.0k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  83.0k|            auto rd = make_reader<T, char_type>();
  228|  83.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  83.0k|                return unexpected(e);
  230|  83.0k|            }
  231|       |
  232|  83.0k|            return impl(rd, range, value);
  233|  83.0k|        }
  234|  83.0k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  83.0k|            auto rd = make_reader<T, char_type>();
  236|  83.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  83.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 83.0k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  83.0k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 83.0k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  83.0k|                return impl(rd, range, value);
  242|  83.0k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  83.0k|        else {
  250|  83.0k|            SCN_EXPECT(false);
  251|  83.0k|            SCN_UNREACHABLE;
  252|  83.0k|        }
  253|  83.0k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  83.0k|    {
  205|  83.0k|        SCN_TRY(it,
  ------------------
  |  |   71|  83.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  83.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  83.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  83.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4, False: 83.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      4|    }                                                  \
  |  |  |  |   70|  83.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  83.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  83.0k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  83.0k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  83.0k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  83.0k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 83.0k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  83.0k|        return rd.read_specs(subr, specs, value, loc);
  218|  83.0k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  96.8k|    {
  223|  96.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  96.8k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  96.8k|            auto rd = make_reader<T, char_type>();
  228|  96.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  96.8k|                return unexpected(e);
  230|  96.8k|            }
  231|       |
  232|  96.8k|            return impl(rd, range, value);
  233|  96.8k|        }
  234|  96.8k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  96.8k|            auto rd = make_reader<T, char_type>();
  236|  96.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  96.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 96.8k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  96.8k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 96.8k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  96.8k|                return impl(rd, range, value);
  242|  96.8k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  96.8k|        else {
  250|  96.8k|            SCN_EXPECT(false);
  251|  96.8k|            SCN_UNREACHABLE;
  252|  96.8k|        }
  253|  96.8k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  96.8k|    {
  205|  96.8k|        SCN_TRY(it,
  ------------------
  |  |   71|  96.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  96.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  96.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  96.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6, False: 96.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|  96.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  96.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  96.8k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  96.8k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  96.8k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  96.8k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 96.8k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  96.8k|        return rd.read_specs(subr, specs, value, loc);
  218|  96.8k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  96.8k|    {
  223|  96.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  96.8k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  96.8k|            auto rd = make_reader<T, char_type>();
  228|  96.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  96.8k|                return unexpected(e);
  230|  96.8k|            }
  231|       |
  232|  96.8k|            return impl(rd, range, value);
  233|  96.8k|        }
  234|  96.8k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  96.8k|            auto rd = make_reader<T, char_type>();
  236|  96.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  96.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 96.8k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  96.8k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 96.8k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  96.8k|                return impl(rd, range, value);
  242|  96.8k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  96.8k|        else {
  250|  96.8k|            SCN_EXPECT(false);
  251|  96.8k|            SCN_UNREACHABLE;
  252|  96.8k|        }
  253|  96.8k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  96.8k|    {
  205|  96.8k|        SCN_TRY(it,
  ------------------
  |  |   71|  96.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  96.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  96.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  96.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6, False: 96.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|  96.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  96.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  96.8k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  96.8k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  96.8k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  96.8k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 96.8k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  96.8k|        return rd.read_specs(subr, specs, value, loc);
  218|  96.8k|    }

_ZN3scn2v24impl39code_point_length_by_starting_code_unitIcEEmT_:
  109|   154k|{
  110|   154k|    return detail::utf_code_point_length_by_starting_code_unit(ch);
  111|   154k|}
_ZN3scn2v24impl19get_next_code_pointIcEENS1_21iterator_value_resultIDTclL_ZN4nano6ranges16function_objects5beginEEclsr3stdE7declvalIRNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEEEEDiEESC_:
  262|  79.8k|{
  263|  79.8k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  242|  79.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  79.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  264|       |
  265|      0|    const auto len = code_point_length_by_starting_code_unit(input[0]);
  266|  79.8k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|  79.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.77k, False: 75.0k]
  |  |  ------------------
  ------------------
  267|  4.77k|        return {get_start_of_next_code_point(input),
  268|  4.77k|                detail::invalid_code_point};
  269|  4.77k|    }
  270|  75.0k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  153|  75.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 667, False: 74.3k]
  |  |  ------------------
  ------------------
  271|    667|        return {input.end(), detail::invalid_code_point};
  272|    667|    }
  273|       |
  274|  74.3k|    constexpr auto enc = get_encoding<CharT>();
  275|  74.3k|    std::size_t result{1};
  276|  74.3k|    char32_t output{};
  277|  74.3k|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (277:19): [Folded - Ignored]
  ------------------
  278|  74.3k|        result = simdutf::convert_utf8_to_utf32(
  279|  74.3k|            reinterpret_cast<const char*>(input.data()), len, &output);
  280|  74.3k|    }
  281|  74.3k|    else if constexpr (enc == encoding::utf16) {
  282|  74.3k|        result = simdutf::convert_utf16_to_utf32(
  283|  74.3k|            reinterpret_cast<const char16_t*>(input.data()), len, &output);
  284|  74.3k|    }
  285|  74.3k|    else if constexpr (enc == encoding::utf32) {
  286|  74.3k|        SCN_EXPECT(len == 1);
  287|  74.3k|        output = static_cast<char32_t>(input[0]);
  288|  74.3k|    }
  289|       |
  290|  74.3k|    if (SCN_UNLIKELY(result != 1)) {
  ------------------
  |  |  153|  74.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.26k, False: 70.1k]
  |  |  ------------------
  ------------------
  291|  4.26k|        return {get_start_of_next_code_point(input.substr(1)),
  292|  4.26k|                detail::invalid_code_point};
  293|  4.26k|    }
  294|       |
  295|  70.1k|    return {input.begin() + len, output};
  296|  74.3k|}
_ZN3scn2v24impl28get_start_of_next_code_pointIcEEDTclL_ZN4nano6ranges16function_objects5beginEEclsr3stdE7declvalIRNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEEESB_:
  247|  9.03k|{
  248|  9.03k|    auto it = input.begin();
  249|  76.5k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (249:12): [True: 74.4k, False: 2.12k]
  ------------------
  250|  74.4k|        if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (250:13): [True: 6.91k, False: 67.5k]
  ------------------
  251|  6.91k|            break;
  252|  6.91k|        }
  253|  74.4k|    }
  254|       |
  255|  9.03k|    return it;
  256|  9.03k|}
_ZN3scn2v24impl39code_point_length_by_starting_code_unitIwEEmT_:
  109|  82.7M|{
  110|  82.7M|    return detail::utf_code_point_length_by_starting_code_unit(ch);
  111|  82.7M|}
_ZN3scn2v24impl26transcode_possibly_invalidIwDiEENSt3__18optionalImEENS3_17basic_string_viewIT_NS3_11char_traitsIS7_EEEENS0_4spanIT0_EE:
  448|  6.08M|{
  449|  6.08M|    if (input.empty()) {
  ------------------
  |  Branch (449:9): [True: 0, False: 6.08M]
  ------------------
  450|      0|        return 0;
  451|      0|    }
  452|       |
  453|  6.08M|    if constexpr (get_encoding<SourceCharT>() == get_encoding<DestCharT>()) {
  ------------------
  |  Branch (453:19): [Folded - Ignored]
  ------------------
  454|  6.08M|        SCN_EXPECT(output.size() >= input.size());
  ------------------
  |  |  242|  6.08M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.08M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|        std::memcpy(output.data(), input.data(),
  456|  6.08M|                    input.size() * sizeof(SourceCharT));
  457|  6.08M|        return input.size();
  458|  6.08M|    }
  459|       |
  460|      0|    const auto result = [&]() {
  461|      0|        constexpr auto src_enc = get_encoding<SourceCharT>();
  462|      0|        constexpr auto dest_enc = get_encoding<DestCharT>();
  463|       |
  464|      0|        if constexpr (src_enc == encoding::utf8) {
  465|      0|            if constexpr (dest_enc == encoding::utf16) {
  466|      0|                return simdutf::convert_utf8_to_utf16_with_errors(
  467|      0|                    input.data(), input.size(),
  468|      0|                    reinterpret_cast<char16_t*>(output.data()));
  469|      0|            }
  470|      0|            else {
  471|      0|                return simdutf::convert_utf8_to_utf32_with_errors(
  472|      0|                    input.data(), input.size(),
  473|      0|                    reinterpret_cast<char32_t*>(output.data()));
  474|      0|            }
  475|      0|        }
  476|      0|        else if constexpr (src_enc == encoding::utf16) {
  477|      0|            if constexpr (dest_enc == encoding::utf8) {
  478|      0|                return simdutf::convert_utf16_to_utf8_with_errors(
  479|      0|                    reinterpret_cast<const char16_t*>(input.data()),
  480|      0|                    input.size(), output.data());
  481|      0|            }
  482|      0|            else {
  483|      0|                return simdutf::convert_utf16_to_utf32_with_errors(
  484|      0|                    reinterpret_cast<const char16_t*>(input.data()),
  485|      0|                    input.size(), reinterpret_cast<char32_t*>(output.data()));
  486|      0|            }
  487|      0|        }
  488|      0|        else if constexpr (src_enc == encoding::utf32) {
  489|      0|            if constexpr (dest_enc == encoding::utf8) {
  490|      0|                return simdutf::convert_utf32_to_utf8_with_errors(
  491|      0|                    reinterpret_cast<const char32_t*>(input.data()),
  492|      0|                    input.size(), output.data());
  493|      0|            }
  494|      0|            else {
  495|      0|                return simdutf::convert_utf32_to_utf16_with_errors(
  496|      0|                    reinterpret_cast<const char32_t*>(input.data()),
  497|      0|                    input.size(), reinterpret_cast<char16_t*>(output.data()));
  498|      0|            }
  499|      0|        }
  500|      0|    }();
  501|       |
  502|      0|    if (SCN_UNLIKELY(result.error != simdutf::SUCCESS)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  503|      0|        return std::nullopt;
  504|      0|    }
  505|      0|    SCN_ENSURE(result.count <= output.size());
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  506|      0|    return result.count;
  507|      0|}

_ZN3scn2v24impl11is_cp_spaceEDi:
   28|  11.9M|{
   29|       |    // Pattern_White_Space property
   30|  11.9M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (30:13): [True: 11.9M, False: 26.1k]
  |  Branch (30:27): [True: 5.74M, False: 6.16M]
  ------------------
   31|  11.9M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (31:12): [True: 55.7k, False: 6.13M]
  ------------------
   32|  11.9M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (32:12): [True: 3.93k, False: 6.12M]
  ------------------
   33|  11.9M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (33:12): [True: 2.88k, False: 6.12M]
  ------------------
   34|  11.9M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (34:12): [True: 2.58k, False: 6.12M]
  ------------------
   35|  11.9M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (35:12): [True: 3.06k, False: 6.11M]
  ------------------
   36|  11.9M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (36:12): [True: 0, False: 6.11M]
  ------------------
   37|  11.9M|}

_ZN3scn2v24impl14is_ascii_spaceEc:
   57|  12.3M|{
   58|  12.3M|    return is_ascii_space_lookup[static_cast<size_t>(
   59|  12.3M|        static_cast<unsigned char>(ch))];
   60|  12.3M|}

_ZN3scn2v24impl16has_byte_greaterEmh:
   91|  5.99M|{
   92|  5.99M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
   93|  5.99M|}

_ZN3scn2v24impl29basic_contiguous_scan_contextIcEC2IRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
   56|  4.15M|    {
   57|  4.15M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE5beginEv:
   60|  12.1M|    {
   61|  12.1M|        return m_current;
   62|  12.1M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE3endEv:
   65|  7.97M|    {
   66|  7.97M|        return m_range.end();
   67|  7.97M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
   80|  3.90M|    {
   81|  3.90M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  242|  3.90M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.90M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   82|  3.90M|        if constexpr (detail::is_comparable_with_nullptr<iterator>::value) {
  ------------------
  |  Branch (82:23): [Folded - Ignored]
  ------------------
   83|  3.90M|            if (it == nullptr) {
  ------------------
  |  Branch (83:17): [True: 0, False: 3.90M]
  ------------------
   84|      0|                it = end();
   85|      0|            }
   86|  3.90M|        }
   87|  3.90M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|  3.90M|    static_cast<    \
  |  |  247|  3.90M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   88|  3.90M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE5rangeEv:
   70|  4.06M|    {
   71|  4.06M|        return ranges::subrange{begin(), end()};
   72|  4.06M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIwEC2IRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
   56|  4.15M|    {
   57|  4.15M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE5beginEv:
   60|  11.4M|    {
   61|  11.4M|        return m_current;
   62|  11.4M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE3endEv:
   65|  7.30M|    {
   66|  7.30M|        return m_range.end();
   67|  7.30M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
   80|  3.40M|    {
   81|  3.40M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  242|  3.40M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.40M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   82|  3.40M|        if constexpr (detail::is_comparable_with_nullptr<iterator>::value) {
  ------------------
  |  Branch (82:23): [Folded - Ignored]
  ------------------
   83|  3.40M|            if (it == nullptr) {
  ------------------
  |  Branch (83:17): [True: 0, False: 3.40M]
  ------------------
   84|      0|                it = end();
   85|      0|            }
   86|  3.40M|        }
   87|  3.40M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|  3.40M|    static_cast<    \
  |  |  247|  3.40M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   88|  3.40M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE5rangeEv:
   70|  3.90M|    {
   71|  3.90M|        return ranges::subrange{begin(), end()};
   72|  3.90M|    }

_ZNK3scn2v24impl12function_refIFbcES3_EclEc:
  204|   470k|    {
  205|   470k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|   470k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|   470k|    }
_ZN3scn2v24impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|   207k|    {
  196|   207k|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  185|   235k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   235k|              cvref<T> obj = *get<T>(fn);
  187|   235k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   235k|                  obj(static_cast<decltype(args)>(args)...);
  189|   235k|              }
  190|   235k|              else {
  191|   235k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   235k|              }
  193|   235k|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  125|   235k|    {
  126|   235k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   235k|            return static_cast<T*>(s.m_cp);
  128|   235k|        }
  129|   235k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   235k|            return static_cast<T*>(s.m_p);
  131|   235k|        }
  132|   235k|        else {
  133|   235k|            return reinterpret_cast<T*>(s.m_fp);
  134|   235k|        }
  135|   235k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  103|   207k|        {
  104|   207k|        }
_ZNK3scn2v24impl12function_refIFbDiES3_EclEDi:
  204|  23.7M|    {
  205|  23.7M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  23.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  23.7M|    }
_ZN3scn2v24impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|  6.06M|    {
  196|  6.06M|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  185|  11.8M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  11.8M|              cvref<T> obj = *get<T>(fn);
  187|  11.8M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  11.8M|                  obj(static_cast<decltype(args)>(args)...);
  189|  11.8M|              }
  190|  11.8M|              else {
  191|  11.8M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  11.8M|              }
  193|  11.8M|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  125|  11.8M|    {
  126|  11.8M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  11.8M|            return static_cast<T*>(s.m_cp);
  128|  11.8M|        }
  129|  11.8M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  11.8M|            return static_cast<T*>(s.m_p);
  131|  11.8M|        }
  132|  11.8M|        else {
  133|  11.8M|            return reinterpret_cast<T*>(s.m_fp);
  134|  11.8M|        }
  135|  11.8M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  103|  6.06M|        {
  104|  6.06M|        }
_ZN3scn2v24impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlcE_SO_LPv0EEEOSK_:
  195|   207k|    {
  196|   207k|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlcE_SO_LPv0EEEOSK_ENKUlNS1_12fnref_detail4base7storageEcE_clEST_c:
  185|   235k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   235k|              cvref<T> obj = *get<T>(fn);
  187|   235k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   235k|                  obj(static_cast<decltype(args)>(args)...);
  189|   235k|              }
  190|   235k|              else {
  191|   235k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   235k|              }
  193|   235k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESJ_iEUlcE_EEDaNS3_7storageE:
  125|   235k|    {
  126|   235k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   235k|            return static_cast<T*>(s.m_cp);
  128|   235k|        }
  129|   235k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   235k|            return static_cast<T*>(s.m_p);
  131|   235k|        }
  132|   235k|        else {
  133|   235k|            return reinterpret_cast<T*>(s.m_fp);
  134|   235k|        }
  135|   235k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlcE_LPv0EEEPSK_:
  103|   207k|        {
  104|   207k|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_SM_LPv0EEESL_:
  195|  5.39M|    {
  196|  5.39M|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_SM_LPv0EEESL_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  185|  11.1M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  11.1M|              cvref<T> obj = *get<T>(fn);
  187|  11.1M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  11.1M|                  obj(static_cast<decltype(args)>(args)...);
  189|  11.1M|              }
  190|  11.1M|              else {
  191|  11.1M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  11.1M|              }
  193|  11.1M|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_EUlDiE_EEDaNS3_7storageE:
  125|  11.1M|    {
  126|  11.1M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  11.1M|            return static_cast<T*>(s.m_cp);
  128|  11.1M|        }
  129|  11.1M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  11.1M|            return static_cast<T*>(s.m_p);
  131|  11.1M|        }
  132|  11.1M|        else {
  133|  11.1M|            return reinterpret_cast<T*>(s.m_fp);
  134|  11.1M|        }
  135|  11.1M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_LPv0EEEPSI_:
  103|  5.39M|        {
  104|  5.39M|        }
_ZNK3scn2v24impl12function_refIFbwES3_EclEw:
  204|  1.68M|    {
  205|  1.68M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  1.68M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  1.68M|    }
_ZN3scn2v24impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|   595k|    {
  196|   595k|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  185|   844k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   844k|              cvref<T> obj = *get<T>(fn);
  187|   844k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   844k|                  obj(static_cast<decltype(args)>(args)...);
  189|   844k|              }
  190|   844k|              else {
  191|   844k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   844k|              }
  193|   844k|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  125|   844k|    {
  126|   844k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   844k|            return static_cast<T*>(s.m_cp);
  128|   844k|        }
  129|   844k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   844k|            return static_cast<T*>(s.m_p);
  131|   844k|        }
  132|   844k|        else {
  133|   844k|            return reinterpret_cast<T*>(s.m_fp);
  134|   844k|        }
  135|   844k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  103|   595k|        {
  104|   595k|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_SP_LPv0EEESO_:
  195|   678k|    {
  196|   678k|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_SP_LPv0EEESO_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  185|   678k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   678k|              cvref<T> obj = *get<T>(fn);
  187|   678k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   678k|                  obj(static_cast<decltype(args)>(args)...);
  189|   678k|              }
  190|   678k|              else {
  191|   678k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   678k|              }
  193|   678k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEOSK_EUlDiE_EEDaNS3_7storageE:
  125|   678k|    {
  126|   678k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   678k|            return static_cast<T*>(s.m_cp);
  128|   678k|        }
  129|   678k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   678k|            return static_cast<T*>(s.m_p);
  131|   678k|        }
  132|   678k|        else {
  133|   678k|            return reinterpret_cast<T*>(s.m_fp);
  134|   678k|        }
  135|   678k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_LPv0EEEPSL_:
  103|   678k|        {
  104|   678k|        }
_ZN3scn2v24impl12function_refIFbwES3_EC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlwE_SO_LPv0EEEOSK_:
  195|   595k|    {
  196|   595k|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlwE_SO_LPv0EEEOSK_ENKUlNS1_12fnref_detail4base7storageEwE_clEST_w:
  185|   844k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   844k|              cvref<T> obj = *get<T>(fn);
  187|   844k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   844k|                  obj(static_cast<decltype(args)>(args)...);
  189|   844k|              }
  190|   844k|              else {
  191|   844k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   844k|              }
  193|   844k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESJ_iEUlwE_EEDaNS3_7storageE:
  125|   844k|    {
  126|   844k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   844k|            return static_cast<T*>(s.m_cp);
  128|   844k|        }
  129|   844k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   844k|            return static_cast<T*>(s.m_p);
  131|   844k|        }
  132|   844k|        else {
  133|   844k|            return reinterpret_cast<T*>(s.m_fp);
  134|   844k|        }
  135|   844k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlwE_LPv0EEEPSK_:
  103|   595k|        {
  104|   595k|        }

_ZN3scn2v24impl19make_eof_scan_errorENS1_9eof_errorE:
   43|  62.9k|{
   44|  62.9k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  242|  62.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  62.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   45|      0|    return scan_error{scan_error::end_of_range, "EOF"};
   46|  62.9k|}
_ZN3scn2v24implntENS1_9eof_errorE:
   29|  50.9M|{
   30|  50.9M|    return e != eof_error::good;
   31|  50.9M|}
_ZN3scn2v24impl20make_eof_parse_errorENS1_9eof_errorE:
   90|   169k|{
   91|   169k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  242|   169k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   169k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   92|      0|    return parse_error::eof;
   93|   169k|}
_ZN3scn2v24impleqENS1_11parse_errorES2_:
   68|  12.7M|    {
   69|  12.7M|        return a.m_code == b.m_code;
   70|  12.7M|    }
_ZN3scn2v24impl11parse_errorC2ENS2_4codeE:
   54|  57.8M|    {
   55|  57.8M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  227|  57.8M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   56|  57.8M|    }
_ZZN3scn2v24impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  114|   692k|    return [code, msg](parse_error err) {
  115|   692k|        return make_scan_error_from_parse_error(err, code, msg);
  116|   692k|    };
_ZN3scn2v24impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
   99|   692k|{
  100|   692k|    if (err == parse_error::good) {
  ------------------
  |  Branch (100:9): [True: 0, False: 692k]
  ------------------
  101|      0|        return {};
  102|      0|    }
  103|       |
  104|   692k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (104:9): [True: 0, False: 692k]
  ------------------
  105|      0|        return scan_error{scan_error::end_of_range, "EOF"};
  106|      0|    }
  107|       |
  108|   692k|    return scan_error{code, msg};
  109|   692k|}
_ZN3scn2v24impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  113|   802k|{
  114|   802k|    return [code, msg](parse_error err) {
  115|   802k|        return make_scan_error_from_parse_error(err, code, msg);
  116|   802k|    };
  117|   802k|}

_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  586|  2.62M|{
  587|  2.62M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
  588|  2.62M|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  594|   152k|{
  595|   152k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
  596|   152k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   152k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 13.8k, False: 138k]
  |  |  ------------------
  ------------------
  597|  13.8k|        source.sync(*n);
  598|  13.8k|    }
  599|   138k|    else {
  600|   138k|        source.sync_all();
  601|   138k|    }
  602|   152k|    return n;
  603|   152k|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  610|  2.58M|{
  611|  2.58M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
  612|  2.58M|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  618|   442k|{
  619|   442k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
  620|   442k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   442k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 27.6k, False: 415k]
  |  |  ------------------
  ------------------
  621|  27.6k|        source.sync(*n);
  622|  27.6k|    }
  623|   415k|    else {
  624|   415k|        source.sync_all();
  625|   415k|    }
  626|   442k|    return n;
  627|   442k|}
_ZN3scn2v26detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  543|  2.62M|{
  544|  2.62M|    return vscan_internal(source, format, args);
  545|  2.62M|}
_ZN3scn2v26detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  549|   152k|{
  550|   152k|    auto n = vscan_internal(source, format, args);
  551|   152k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   152k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 13.8k, False: 138k]
  |  |  ------------------
  ------------------
  552|  13.8k|        source.sync(*n);
  553|  13.8k|    }
  554|   138k|    else {
  555|   138k|        source.sync_all();
  556|   138k|    }
  557|   152k|    return n;
  558|   152k|}
_ZN3scn2v26detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  563|  2.58M|{
  564|  2.58M|    return vscan_internal(source, format, args);
  565|  2.58M|}
_ZN3scn2v26detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  569|   442k|{
  570|   442k|    auto n = vscan_internal(source, format, args);
  571|   442k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   442k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 27.6k, False: 415k]
  |  |  ------------------
  ------------------
  572|  27.6k|        source.sync(*n);
  573|  27.6k|    }
  574|   415k|    else {
  575|   415k|        source.sync_all();
  576|   415k|    }
  577|   442k|    return n;
  578|   442k|}
_ZN3scn2v26detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  653|   544k|{
  654|   544k|    return vscan_value_internal(source, arg);
  655|   544k|}
_ZN3scn2v26detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  658|  13.8k|{
  659|  13.8k|    auto n = vscan_value_internal(source, arg);
  660|  13.8k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|  13.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 13.8k]
  |  |  ------------------
  ------------------
  661|      0|        source.sync(*n);
  662|      0|    }
  663|  13.8k|    else {
  664|  13.8k|        source.sync_all();
  665|  13.8k|    }
  666|  13.8k|    return n;
  667|  13.8k|}
_ZN3scn2v26detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  672|   505k|{
  673|   505k|    return vscan_value_internal(source, arg);
  674|   505k|}
_ZN3scn2v26detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  678|  41.5k|{
  679|  41.5k|    auto n = vscan_value_internal(source, arg);
  680|  41.5k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|  41.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 41.5k]
  |  |  ------------------
  ------------------
  681|      0|        source.sync(*n);
  682|      0|    }
  683|  41.5k|    else {
  684|  41.5k|        source.sync_all();
  685|  41.5k|    }
  686|  41.5k|    return n;
  687|  41.5k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
  475|   304k|{
  476|   304k|    const auto argcount = args.size();
  477|   304k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (477:9): [True: 27.6k, False: 276k]
  |  Branch (477:60): [True: 27.6k, False: 0]
  ------------------
  478|  27.6k|        auto arg = args.get(0);
  479|  27.6k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  246|  27.6k|    static_cast<    \
  |  |  247|  27.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  480|  27.6k|    }
  481|       |
  482|   276k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (482:9): [True: 0, False: 276k]
  ------------------
  483|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
  484|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  485|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  486|      0|        return vscan_parse_format_string(format, handler);
  487|      0|    }
  488|       |
  489|   276k|    SCN_UNLIKELY_ATTR
  490|   276k|    {
  491|   276k|        auto handler = format_handler<false, CharT>{
  492|   276k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   276k|    static_cast<    \
  |  |  247|   276k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   276k|    static_cast<    \
  |  |  247|   276k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  493|   276k|        return vscan_parse_format_string(format, handler);
  494|   276k|    }
  495|   276k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   35|  5.54M|{
   36|  5.54M|    if (format.size() != 2) {
  ------------------
  |  Branch (36:9): [True: 4.42M, False: 1.11M]
  ------------------
   37|  4.42M|        return false;
   38|  4.42M|    }
   39|  1.11M|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (39:12): [True: 1.11M, False: 0]
  |  Branch (39:39): [True: 1.11M, False: 0]
  ------------------
   40|  5.54M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
   68|  41.5k|{
   69|  41.5k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  41.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 41.5k]
  |  |  ------------------
  ------------------
   70|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   71|      0|                                     "Argument #0 not found");
   72|      0|    }
   73|       |
   74|  41.5k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  152|  41.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 41.5k]
  |  |  ------------------
  ------------------
   75|      0|        auto reader = impl::default_arg_reader<
   76|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
   77|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   78|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   79|      0|        return ranges::distance(source.get_contiguous().begin(), it);
   80|      0|    }
   81|       |
   82|  41.5k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
   83|  41.5k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  246|  41.5k|    static_cast<    \
  |  |  247|  41.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   84|  41.5k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|  41.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  41.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  41.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  41.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 41.5k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  41.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  41.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  41.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  41.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  41.5k|    }                                                  \
  |  |  |  |   70|  41.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   85|      0|    return it.position();
   86|  41.5k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcEC2IN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEOT_NSt3__117basic_string_viewIcNSF_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
  313|  4.15M|    {
  314|  4.15M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_baseC2Em:
  132|  9.38M|    {
  133|  9.38M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  153|  9.38M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 9.38M]
  |  |  ------------------
  ------------------
  134|      0|            visited_args_upper.resize((args_count - 64) / 8);
  135|      0|        }
  136|  9.38M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIcEC2EN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
  263|  4.15M|    {
  264|  4.15M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|  4.15M|{
  441|  4.15M|    const auto beg = handler.get_ctx().begin();
  442|  4.15M|    detail::parse_format_string<false>(format, handler);
  443|  4.15M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  4.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 249k, False: 3.90M]
  |  |  ------------------
  ------------------
  444|   249k|        return unexpected(handler.error);
  445|   249k|    }
  446|  3.90M|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|  4.15M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
  424|  28.3M|    {
  425|  28.3M|        return ctx.get();
  426|  28.3M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
  267|  28.3M|    {
  268|  28.3M|        return contiguous_ctx;
  269|  28.3M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
  317|  8.05M|    {
  318|  8.05M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 8.05M]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|  8.05M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
   91|  4.15M|{
   92|  4.15M|    auto arg = ctx.arg(id);
   93|  4.15M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  4.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.15M]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|  4.15M|    return arg;
   97|  4.15M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
  207|  9.38M|    {
  208|  9.38M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  153|  9.38M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 9.38M]
  |  |  ------------------
  ------------------
  209|      0|            on_error("Invalid out-of-range argument ID");
  210|      0|            return;
  211|      0|        }
  212|       |
  213|  9.38M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  153|  9.38M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 9.38M]
  |  |  ------------------
  ------------------
  214|      0|            return on_error("Argument with this ID has already been scanned");
  215|      0|        }
  216|       |
  217|  9.38M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  152|  9.38M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 9.38M, False: 0]
  |  |  ------------------
  ------------------
  218|  9.38M|            visited_args_lower64 |= (1ull << id);
  219|  9.38M|            return;
  220|  9.38M|        }
  221|       |
  222|      0|        id -= 64;
  223|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
  224|      0|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
  192|  9.38M|    {
  193|  9.38M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  153|  9.38M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 9.38M]
  |  |  ------------------
  ------------------
  194|      0|            on_error("Invalid out-of-range argument ID");
  195|      0|            return false;
  196|      0|        }
  197|       |
  198|  9.38M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  152|  9.38M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 9.38M, False: 0]
  |  |  ------------------
  ------------------
  199|  9.38M|            return (visited_args_lower64 >> id) & 1ull;
  200|  9.38M|        }
  201|       |
  202|      0|        id -= 64;
  203|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
  204|  9.38M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
  176|  1.32M|    {
  177|  1.32M|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  153|  1.32M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.32M, False: 0]
  |  |  ------------------
  ------------------
  178|  1.32M|            error = err;
  179|  1.32M|        }
  180|  1.32M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
  346|  4.15M|    {
  347|  4.15M|        return parse_ctx.next_arg_id();
  348|  4.15M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
  387|  4.15M|    {
  388|  4.15M|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|  4.15M|        set_arg_as_visited(arg_id);
  390|       |
  391|  4.15M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 4.15M]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|  4.15M|        auto specs = detail::format_specs{};
  401|  4.15M|        detail::specs_checker<specs_handler<context_type>> handler{
  402|  4.15M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|  4.15M|            arg.type()};
  404|       |
  405|  4.15M|        begin = detail::parse_format_specs(begin, end, handler);
  406|  4.15M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 4.15M]
  |  Branch (406:29): [True: 55.3k, False: 4.09M]
  ------------------
  407|  55.3k|            SCN_UNLIKELY_ATTR
  408|  55.3k|            on_error("Missing '}' in format string");
  409|  55.3k|            return parse_ctx.begin();
  410|  55.3k|        }
  411|  4.09M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  4.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 27.6k, False: 4.06M]
  |  |  ------------------
  ------------------
  412|  27.6k|            return parse_ctx.begin();
  413|  27.6k|        }
  414|  4.06M|        parse_ctx.advance_to(begin);
  415|       |
  416|  4.06M|        on_visit_scan_arg(
  417|  4.06M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|  4.06M|                                           get_ctx().locale()},
  419|  4.06M|            arg);
  420|  4.06M|        return parse_ctx.begin();
  421|  4.09M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
  111|  4.15M|    {
  112|  4.15M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  358|  4.06M|    {
  359|  4.06M|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 4.06M]
  |  Branch (359:23): [True: 0, False: 4.06M]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|  4.06M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|  4.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|  4.06M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  4.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 166k, False: 3.90M]
  |  |  ------------------
  ------------------
  366|   166k|            on_error(r.error());
  367|   166k|        }
  368|  3.90M|        else {
  369|  3.90M|            get_ctx().advance_to(*r);
  370|  3.90M|        }
  371|  4.06M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base8on_errorEPKc:
  171|  1.10M|    {
  172|  1.10M|        SCN_UNLIKELY_ATTR
  173|  1.10M|        error = scan_error{scan_error::invalid_format_string, msg};
  174|  1.10M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
  139|  9.38M|    {
  140|  9.38M|        {
  141|  9.38M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (141:45): [True: 0, False: 9.38M]
  ------------------
  142|  9.38M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (142:35): [True: 0, False: 9.38M]
  ------------------
  143|  9.38M|                                      ? std::numeric_limits<uint64_t>::max()
  144|  9.38M|                                      : (1ull << args_count_lower64) - 1;
  145|       |
  146|  9.38M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (146:17): [True: 0, False: 9.38M]
  ------------------
  147|      0|                return on_error("Argument list not exhausted");
  148|      0|            }
  149|  9.38M|        }
  150|       |
  151|  9.38M|        if (args_count < 64) {
  ------------------
  |  Branch (151:13): [True: 9.38M, False: 0]
  ------------------
  152|  9.38M|            return;
  153|  9.38M|        }
  154|       |
  155|      0|        auto last_args_count = args_count - 64;
  156|      0|        for (auto it = visited_args_upper.begin();
  157|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (157:14): [True: 0, False: 0]
  ------------------
  158|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (158:17): [True: 0, False: 0]
  ------------------
  159|      0|                return on_error("Argument list not exhausted");
  160|      0|            }
  161|      0|            last_args_count -= 8;
  162|      0|        }
  163|       |
  164|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
  165|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (165:13): [True: 0, False: 0]
  ------------------
  166|      0|            return on_error("Argument list not exhausted");
  167|      0|        }
  168|      0|    }
vscan.cpp:_ZNK3scn2v212_GLOBAL__N_119format_handler_base9get_errorEv:
  187|  9.38M|    {
  188|  9.38M|        return error;
  189|  9.38M|    }
vscan.cpp:_ZNK3scn2v212_GLOBAL__N_119format_handler_basecvbEv:
  183|  27.4M|    {
  184|  27.4M|        return static_cast<bool>(error);
  185|  27.4M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
  313|   276k|    {
  314|   276k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
  240|   276k|    {
  241|   276k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|   276k|{
  441|   276k|    const auto beg = handler.get_ctx().begin();
  442|   276k|    detail::parse_format_string<false>(format, handler);
  443|   276k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   276k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 249k, False: 27.6k]
  |  |  ------------------
  ------------------
  444|   249k|        return unexpected(handler.error);
  445|   249k|    }
  446|  27.6k|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|   276k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
  424|  1.27M|    {
  425|  1.27M|        return ctx.get();
  426|  1.27M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIcE3getEv:
  244|  1.27M|    {
  245|  1.27M|        return ctx;
  246|  1.27M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
  317|   304k|    {
  318|   304k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 304k]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|   304k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
   91|   276k|{
   92|   276k|    auto arg = ctx.arg(id);
   93|   276k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   276k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 276k]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|   276k|    return arg;
   97|   276k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
  346|   276k|    {
  347|   276k|        return parse_ctx.next_arg_id();
  348|   276k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
  387|   276k|    {
  388|   276k|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|   276k|        set_arg_as_visited(arg_id);
  390|       |
  391|   276k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 276k]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|   276k|        auto specs = detail::format_specs{};
  401|   276k|        detail::specs_checker<specs_handler<context_type>> handler{
  402|   276k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|   276k|            arg.type()};
  404|       |
  405|   276k|        begin = detail::parse_format_specs(begin, end, handler);
  406|   276k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 276k]
  |  Branch (406:29): [True: 55.3k, False: 221k]
  ------------------
  407|  55.3k|            SCN_UNLIKELY_ATTR
  408|  55.3k|            on_error("Missing '}' in format string");
  409|  55.3k|            return parse_ctx.begin();
  410|  55.3k|        }
  411|   221k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   221k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 27.6k, False: 193k]
  |  |  ------------------
  ------------------
  412|  27.6k|            return parse_ctx.begin();
  413|  27.6k|        }
  414|   193k|        parse_ctx.advance_to(begin);
  415|       |
  416|   193k|        on_visit_scan_arg(
  417|   193k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|   193k|                                           get_ctx().locale()},
  419|   193k|            arg);
  420|   193k|        return parse_ctx.begin();
  421|   221k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
  111|   276k|    {
  112|   276k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
  358|   193k|    {
  359|   193k|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 193k]
  |  Branch (359:23): [True: 0, False: 193k]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|   193k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|   193k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|   193k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   193k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 166k, False: 27.6k]
  |  |  ------------------
  ------------------
  366|   166k|            on_error(r.error());
  367|   166k|        }
  368|  27.6k|        else {
  369|  27.6k|            get_ctx().advance_to(*r);
  370|  27.6k|        }
  371|   193k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
  455|  5.24M|{
  456|  5.24M|    const auto argcount = args.size();
  457|  5.24M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (457:9): [True: 1.08M, False: 4.15M]
  |  Branch (457:60): [True: 1.08M, False: 0]
  ------------------
  458|  1.08M|        auto arg = args.get(0);
  459|  1.08M|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  246|  1.08M|    static_cast<    \
  |  |  247|  1.08M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  460|  1.08M|    }
  461|       |
  462|  4.15M|    auto handler = format_handler<true, CharT>{
  463|  4.15M|        ranges::subrange<const CharT*>{source.data(),
  464|  4.15M|                                       source.data() + source.size()},
  465|  4.15M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  4.15M|    static_cast<    \
  |  |  247|  4.15M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  4.15M|    static_cast<    \
  |  |  247|  4.15M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  466|  4.15M|    return vscan_parse_format_string(format, handler);
  467|  5.24M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
   48|  1.63M|{
   49|  1.63M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  1.63M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.63M]
  |  |  ------------------
  ------------------
   50|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   51|      0|                                     "Argument #0 not found");
   52|      0|    }
   53|       |
   54|  1.63M|    auto reader =
   55|  1.63M|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
   56|  1.63M|            ranges::subrange<const CharT*>{source.data(),
   57|  1.63M|                                           source.data() + source.size()},
   58|  1.63M|            SCN_MOVE(args), loc};
  ------------------
  |  |  246|  1.63M|    static_cast<    \
  |  |  247|  1.63M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  1.63M|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|  1.63M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.63M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.63M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.63M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 41.5k, False: 1.59M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  41.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  41.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  41.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  41.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  41.5k|    }                                                  \
  |  |  |  |   70|  1.63M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.59M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   60|  1.59M|    return ranges::distance(source.data(), it);
   61|  1.63M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
  455|  5.16M|{
  456|  5.16M|    const auto argcount = args.size();
  457|  5.16M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (457:9): [True: 1.01M, False: 4.15M]
  |  Branch (457:60): [True: 1.01M, False: 0]
  ------------------
  458|  1.01M|        auto arg = args.get(0);
  459|  1.01M|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  246|  1.01M|    static_cast<    \
  |  |  247|  1.01M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  460|  1.01M|    }
  461|       |
  462|  4.15M|    auto handler = format_handler<true, CharT>{
  463|  4.15M|        ranges::subrange<const CharT*>{source.data(),
  464|  4.15M|                                       source.data() + source.size()},
  465|  4.15M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  4.15M|    static_cast<    \
  |  |  247|  4.15M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  4.15M|    static_cast<    \
  |  |  247|  4.15M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  466|  4.15M|    return vscan_parse_format_string(format, handler);
  467|  5.16M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   35|  6.04M|{
   36|  6.04M|    if (format.size() != 2) {
  ------------------
  |  Branch (36:9): [True: 4.95M, False: 1.09M]
  ------------------
   37|  4.95M|        return false;
   38|  4.95M|    }
   39|  1.09M|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (39:12): [True: 1.09M, False: 0]
  |  Branch (39:39): [True: 1.09M, False: 0]
  ------------------
   40|  6.04M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
   48|  1.51M|{
   49|  1.51M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  1.51M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.51M]
  |  |  ------------------
  ------------------
   50|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   51|      0|                                     "Argument #0 not found");
   52|      0|    }
   53|       |
   54|  1.51M|    auto reader =
   55|  1.51M|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
   56|  1.51M|            ranges::subrange<const CharT*>{source.data(),
   57|  1.51M|                                           source.data() + source.size()},
   58|  1.51M|            SCN_MOVE(args), loc};
  ------------------
  |  |  246|  1.51M|    static_cast<    \
  |  |  247|  1.51M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  1.51M|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|  1.51M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.51M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.51M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.51M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 124k, False: 1.39M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|   124k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|   124k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|   124k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|   124k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|   124k|    }                                                  \
  |  |  |  |   70|  1.51M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.39M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   60|  1.39M|    return ranges::distance(source.data(), it);
   61|  1.51M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwEC2IN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEOT_NSt3__117basic_string_viewIwNSF_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
  313|  4.15M|    {
  314|  4.15M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIwEC2EN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
  263|  4.15M|    {
  264|  4.15M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|  4.15M|{
  441|  4.15M|    const auto beg = handler.get_ctx().begin();
  442|  4.15M|    detail::parse_format_string<false>(format, handler);
  443|  4.15M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  4.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 747k, False: 3.40M]
  |  |  ------------------
  ------------------
  444|   747k|        return unexpected(handler.error);
  445|   747k|    }
  446|  3.40M|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|  4.15M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
  424|  27.0M|    {
  425|  27.0M|        return ctx.get();
  426|  27.0M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
  267|  27.0M|    {
  268|  27.0M|        return contiguous_ctx;
  269|  27.0M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
  317|  7.55M|    {
  318|  7.55M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 7.55M]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|  7.55M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
   91|  4.15M|{
   92|  4.15M|    auto arg = ctx.arg(id);
   93|  4.15M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  4.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.15M]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|  4.15M|    return arg;
   97|  4.15M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
  346|  4.15M|    {
  347|  4.15M|        return parse_ctx.next_arg_id();
  348|  4.15M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
  387|  4.15M|    {
  388|  4.15M|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|  4.15M|        set_arg_as_visited(arg_id);
  390|       |
  391|  4.15M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 4.15M]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|  4.15M|        auto specs = detail::format_specs{};
  401|  4.15M|        detail::specs_checker<specs_handler<context_type>> handler{
  402|  4.15M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|  4.15M|            arg.type()};
  404|       |
  405|  4.15M|        begin = detail::parse_format_specs(begin, end, handler);
  406|  4.15M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 4.15M]
  |  Branch (406:29): [True: 166k, False: 3.98M]
  ------------------
  407|   166k|            SCN_UNLIKELY_ATTR
  408|   166k|            on_error("Missing '}' in format string");
  409|   166k|            return parse_ctx.begin();
  410|   166k|        }
  411|  3.98M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  3.98M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 83.0k, False: 3.90M]
  |  |  ------------------
  ------------------
  412|  83.0k|            return parse_ctx.begin();
  413|  83.0k|        }
  414|  3.90M|        parse_ctx.advance_to(begin);
  415|       |
  416|  3.90M|        on_visit_scan_arg(
  417|  3.90M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|  3.90M|                                           get_ctx().locale()},
  419|  3.90M|            arg);
  420|  3.90M|        return parse_ctx.begin();
  421|  3.98M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
  111|  4.15M|    {
  112|  4.15M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  358|  3.90M|    {
  359|  3.90M|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 3.90M]
  |  Branch (359:23): [True: 0, False: 3.90M]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|  3.90M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|  3.90M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|  3.90M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  3.90M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 498k, False: 3.40M]
  |  |  ------------------
  ------------------
  366|   498k|            on_error(r.error());
  367|   498k|        }
  368|  3.40M|        else {
  369|  3.40M|            get_ctx().advance_to(*r);
  370|  3.40M|        }
  371|  3.90M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
  475|   885k|{
  476|   885k|    const auto argcount = args.size();
  477|   885k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (477:9): [True: 83.0k, False: 802k]
  |  Branch (477:60): [True: 83.0k, False: 0]
  ------------------
  478|  83.0k|        auto arg = args.get(0);
  479|  83.0k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  246|  83.0k|    static_cast<    \
  |  |  247|  83.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  480|  83.0k|    }
  481|       |
  482|   802k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (482:9): [True: 0, False: 802k]
  ------------------
  483|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
  484|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  485|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  486|      0|        return vscan_parse_format_string(format, handler);
  487|      0|    }
  488|       |
  489|   802k|    SCN_UNLIKELY_ATTR
  490|   802k|    {
  491|   802k|        auto handler = format_handler<false, CharT>{
  492|   802k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   802k|    static_cast<    \
  |  |  247|   802k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   802k|    static_cast<    \
  |  |  247|   802k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  493|   802k|        return vscan_parse_format_string(format, handler);
  494|   802k|    }
  495|   802k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
   68|   124k|{
   69|   124k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 124k]
  |  |  ------------------
  ------------------
   70|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   71|      0|                                     "Argument #0 not found");
   72|      0|    }
   73|       |
   74|   124k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  152|   124k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 124k]
  |  |  ------------------
  ------------------
   75|      0|        auto reader = impl::default_arg_reader<
   76|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
   77|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   78|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   79|      0|        return ranges::distance(source.get_contiguous().begin(), it);
   80|      0|    }
   81|       |
   82|   124k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
   83|   124k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  246|   124k|    static_cast<    \
  |  |  247|   124k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   84|   124k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|   124k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   124k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   124k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 124k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|   124k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|   124k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|   124k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|   124k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|   124k|    }                                                  \
  |  |  |  |   70|   124k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   85|      0|    return it.position();
   86|   124k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
  313|   802k|    {
  314|   802k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
  240|   802k|    {
  241|   802k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|   802k|{
  441|   802k|    const auto beg = handler.get_ctx().begin();
  442|   802k|    detail::parse_format_string<false>(format, handler);
  443|   802k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   802k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 747k, False: 55.3k]
  |  |  ------------------
  ------------------
  444|   747k|        return unexpected(handler.error);
  445|   747k|    }
  446|  55.3k|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|   802k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
  424|  3.62M|    {
  425|  3.62M|        return ctx.get();
  426|  3.62M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIwE3getEv:
  244|  3.62M|    {
  245|  3.62M|        return ctx;
  246|  3.62M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
  317|   858k|    {
  318|   858k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 858k]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|   858k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
   91|   802k|{
   92|   802k|    auto arg = ctx.arg(id);
   93|   802k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   802k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 802k]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|   802k|    return arg;
   97|   802k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
  346|   802k|    {
  347|   802k|        return parse_ctx.next_arg_id();
  348|   802k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
  387|   802k|    {
  388|   802k|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|   802k|        set_arg_as_visited(arg_id);
  390|       |
  391|   802k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 802k]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|   802k|        auto specs = detail::format_specs{};
  401|   802k|        detail::specs_checker<specs_handler<context_type>> handler{
  402|   802k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|   802k|            arg.type()};
  404|       |
  405|   802k|        begin = detail::parse_format_specs(begin, end, handler);
  406|   802k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 802k]
  |  Branch (406:29): [True: 166k, False: 636k]
  ------------------
  407|   166k|            SCN_UNLIKELY_ATTR
  408|   166k|            on_error("Missing '}' in format string");
  409|   166k|            return parse_ctx.begin();
  410|   166k|        }
  411|   636k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   636k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 83.0k, False: 553k]
  |  |  ------------------
  ------------------
  412|  83.0k|            return parse_ctx.begin();
  413|  83.0k|        }
  414|   553k|        parse_ctx.advance_to(begin);
  415|       |
  416|   553k|        on_visit_scan_arg(
  417|   553k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|   553k|                                           get_ctx().locale()},
  419|   553k|            arg);
  420|   553k|        return parse_ctx.begin();
  421|   636k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
  111|   802k|    {
  112|   802k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
  358|   553k|    {
  359|   553k|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 553k]
  |  Branch (359:23): [True: 0, False: 553k]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|   553k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|   553k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|   553k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   553k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 498k, False: 55.3k]
  |  |  ------------------
  ------------------
  366|   498k|            on_error(r.error());
  367|   498k|        }
  368|  55.3k|        else {
  369|  55.3k|            get_ctx().advance_to(*r);
  370|  55.3k|        }
  371|   553k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|   544k|{
  502|   544k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|   544k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|   544k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|  13.8k|{
  502|  13.8k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|  13.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|  13.8k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|   505k|{
  502|   505k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|   505k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|   505k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|  41.5k|{
  502|  41.5k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|  41.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|  41.5k|}

_ZN3scn4fuzz16make_input_viewsENS_2v24spanIKhEE:
   53|  2.30k|{
   54|  2.30k|    SCN_EXPECT(data.size() <= max_input_bytes);
  ------------------
  |  |  242|  2.30k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.30k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   55|       |
   56|       |    // narrow
   57|      0|    string_buffer.resize(data.size());
   58|  2.30k|    std::copy(data.begin(), data.end(),
   59|  2.30k|              reinterpret_cast<uint8_t*>(&string_buffer[0]));
   60|  2.30k|    auto sv = std::string_view{string_buffer};
   61|       |
   62|       |    // wide, direct copy
   63|  2.30k|    wstring_buffer_direct.resize(data.size());
   64|  2.30k|    std::copy(data.begin(), data.end(),
   65|  2.30k|              reinterpret_cast<uint8_t*>(&wstring_buffer_direct[0]));
   66|  2.30k|    auto wsv_direct = std::wstring_view{wstring_buffer_direct};
   67|       |
   68|       |    // wide, bitwise reinterpret
   69|  2.30k|    const auto wsv_reinterpret_size =
   70|  2.30k|        data.size() < sizeof(wchar_t) ? 1 : (data.size() / sizeof(wchar_t));
  ------------------
  |  Branch (70:9): [True: 126, False: 2.18k]
  ------------------
   71|  2.30k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   72|  2.30k|    std::memcpy(wstring_buffer_reinterpreted.data(), data.data(), data.size());
   73|  2.30k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   74|       |
   75|       |    // wide, transcode to correct encoding (utf16 or utf32)
   76|  2.30k|    std::wstring_view wsv_transcoded;
   77|  2.30k|    if (!simdutf::validate_utf8(sv.data(), sv.size())) {
  ------------------
  |  Branch (77:9): [True: 515, False: 1.79k]
  ------------------
   78|    515|        wsv_transcoded = {wstring_buffer_direct};
   79|    515|    }
   80|  1.79k|    else {
   81|  1.79k|        if constexpr (sizeof(wchar_t) == 2) {
  ------------------
  |  Branch (81:23): [Folded - Ignored]
  ------------------
   82|      0|            auto size = simdutf::utf16_length_from_utf8(sv.data(), sv.size());
   83|      0|            wstring_buffer_transcoded_wide.resize(size);
   84|      0|            (void)simdutf::convert_valid_utf8_to_utf16(
   85|      0|                sv.data(), sv.size(),
   86|      0|                reinterpret_cast<char16_t*>(
   87|      0|                    wstring_buffer_transcoded_wide.data()));
   88|      0|        }
   89|  1.79k|        else {
   90|  1.79k|            auto size = simdutf::utf32_length_from_utf8(sv.data(), sv.size());
   91|  1.79k|            wstring_buffer_transcoded_wide.resize(size);
   92|  1.79k|            (void)simdutf::convert_valid_utf8_to_utf32(
   93|  1.79k|                sv.data(), sv.size(),
   94|  1.79k|                reinterpret_cast<char32_t*>(
   95|  1.79k|                    wstring_buffer_transcoded_wide.data()));
   96|  1.79k|        }
   97|  1.79k|        wsv_transcoded = {wstring_buffer_transcoded_wide};
   98|  1.79k|    }
   99|       |
  100|  2.30k|    return std::make_tuple(sv, wsv_direct, wsv_reintepreted, wsv_transcoded);
  101|  2.30k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_S3_S3_S3_S3_EEENS_2v24spanIKNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEDpT0_:
  150|  2.30k|{
  151|  2.30k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  152|  2.30k|    auto& buf = get_format_string_view_buffer<CharT>();
  153|  2.30k|    buf.resize(sizeof...(Args));
  154|  2.30k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  155|  2.30k|    return {buf.data(), buf.size()};
  156|  2.30k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  136|  2.30k|{
  137|  2.30k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (137:19): [Folded - Ignored]
  ------------------
  138|  2.30k|        return format_string_view_buffer;
  139|  2.30k|    }
  140|  2.30k|    else {
  141|  2.30k|        return wformat_string_view_buffer;
  142|  2.30k|    }
  143|  2.30k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_NS_2v24spanIKNS3_IT_NS4_ISA_EEEEEE:
  210|  2.30k|{
  211|  2.30k|    do_basic_run_for_source<CharT>(data, format_strings);
  212|  2.30k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  213|  2.30k|                                   format_strings);
  214|  2.30k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcaNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  2.30k|{
  162|       |    // Regular scan
  163|  23.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 23.0k, False: 2.30k]
  ------------------
  164|  23.0k|        auto it = scn::ranges::begin(source);
  165|   341k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   341k|            auto result = scn::scan<T>(
  167|   341k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   341k|                scn::runtime_format(f));
  169|   341k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 23.0k, False: 318k]
  ------------------
  170|  23.0k|                break;
  171|  23.0k|            }
  172|   318k|            it = result->begin();
  173|   318k|        }
  174|  23.0k|    }
  175|       |
  176|       |    // scan localized
  177|  23.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 23.0k, False: 2.30k]
  ------------------
  178|  23.0k|        auto it = scn::ranges::begin(source);
  179|   341k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   341k|            auto result = scn::scan<T>(
  181|   341k|                global_locale,
  182|   341k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   341k|                scn::runtime_format(f));
  184|   341k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 23.0k, False: 318k]
  ------------------
  185|  23.0k|                break;
  186|  23.0k|            }
  187|   318k|            it = result->begin();
  188|   318k|        }
  189|  23.0k|    }
  190|       |
  191|       |    // scan_value
  192|  2.30k|    {
  193|  2.30k|        auto it = scn::ranges::begin(source);
  194|  77.0k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  77.0k|            auto result = scn::scan_value<T>(
  196|  77.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  77.0k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 2.30k, False: 74.7k]
  ------------------
  198|  2.30k|                break;
  199|  2.30k|            }
  200|  74.7k|            it = result->begin();
  201|  74.7k|        }
  202|  2.30k|    }
  203|  2.30k|}
_ZN3scn4fuzz21do_basic_run_for_typeIchNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  2.30k|{
  162|       |    // Regular scan
  163|  23.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 23.0k, False: 2.30k]
  ------------------
  164|  23.0k|        auto it = scn::ranges::begin(source);
  165|   349k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   349k|            auto result = scn::scan<T>(
  167|   349k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   349k|                scn::runtime_format(f));
  169|   349k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 23.0k, False: 326k]
  ------------------
  170|  23.0k|                break;
  171|  23.0k|            }
  172|   326k|            it = result->begin();
  173|   326k|        }
  174|  23.0k|    }
  175|       |
  176|       |    // scan localized
  177|  23.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 23.0k, False: 2.30k]
  ------------------
  178|  23.0k|        auto it = scn::ranges::begin(source);
  179|   349k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   349k|            auto result = scn::scan<T>(
  181|   349k|                global_locale,
  182|   349k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   349k|                scn::runtime_format(f));
  184|   349k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 23.0k, False: 326k]
  ------------------
  185|  23.0k|                break;
  186|  23.0k|            }
  187|   326k|            it = result->begin();
  188|   326k|        }
  189|  23.0k|    }
  190|       |
  191|       |    // scan_value
  192|  2.30k|    {
  193|  2.30k|        auto it = scn::ranges::begin(source);
  194|  76.6k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  76.6k|            auto result = scn::scan_value<T>(
  196|  76.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  76.6k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 2.30k, False: 74.3k]
  ------------------
  198|  2.30k|                break;
  199|  2.30k|            }
  200|  74.3k|            it = result->begin();
  201|  74.3k|        }
  202|  2.30k|    }
  203|  2.30k|}
_ZN3scn4fuzz21do_basic_run_for_typeIciNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  2.30k|{
  162|       |    // Regular scan
  163|  23.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 23.0k, False: 2.30k]
  ------------------
  164|  23.0k|        auto it = scn::ranges::begin(source);
  165|   514k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   514k|            auto result = scn::scan<T>(
  167|   514k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   514k|                scn::runtime_format(f));
  169|   514k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 23.0k, False: 491k]
  ------------------
  170|  23.0k|                break;
  171|  23.0k|            }
  172|   491k|            it = result->begin();
  173|   491k|        }
  174|  23.0k|    }
  175|       |
  176|       |    // scan localized
  177|  23.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 23.0k, False: 2.30k]
  ------------------
  178|  23.0k|        auto it = scn::ranges::begin(source);
  179|   514k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   514k|            auto result = scn::scan<T>(
  181|   514k|                global_locale,
  182|   514k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   514k|                scn::runtime_format(f));
  184|   514k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 23.0k, False: 491k]
  ------------------
  185|  23.0k|                break;
  186|  23.0k|            }
  187|   491k|            it = result->begin();
  188|   491k|        }
  189|  23.0k|    }
  190|       |
  191|       |    // scan_value
  192|  2.30k|    {
  193|  2.30k|        auto it = scn::ranges::begin(source);
  194|   103k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|   103k|            auto result = scn::scan_value<T>(
  196|   103k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|   103k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 2.30k, False: 101k]
  ------------------
  198|  2.30k|                break;
  199|  2.30k|            }
  200|   101k|            it = result->begin();
  201|   101k|        }
  202|  2.30k|    }
  203|  2.30k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcjNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  2.30k|{
  162|       |    // Regular scan
  163|  23.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 23.0k, False: 2.30k]
  ------------------
  164|  23.0k|        auto it = scn::ranges::begin(source);
  165|   430k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   430k|            auto result = scn::scan<T>(
  167|   430k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   430k|                scn::runtime_format(f));
  169|   430k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 23.0k, False: 407k]
  ------------------
  170|  23.0k|                break;
  171|  23.0k|            }
  172|   407k|            it = result->begin();
  173|   407k|        }
  174|  23.0k|    }
  175|       |
  176|       |    // scan localized
  177|  23.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 23.0k, False: 2.30k]
  ------------------
  178|  23.0k|        auto it = scn::ranges::begin(source);
  179|   430k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   430k|            auto result = scn::scan<T>(
  181|   430k|                global_locale,
  182|   430k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   430k|                scn::runtime_format(f));
  184|   430k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 23.0k, False: 407k]
  ------------------
  185|  23.0k|                break;
  186|  23.0k|            }
  187|   407k|            it = result->begin();
  188|   407k|        }
  189|  23.0k|    }
  190|       |
  191|       |    // scan_value
  192|  2.30k|    {
  193|  2.30k|        auto it = scn::ranges::begin(source);
  194|  87.1k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  87.1k|            auto result = scn::scan_value<T>(
  196|  87.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  87.1k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 2.30k, False: 84.8k]
  ------------------
  198|  2.30k|                break;
  199|  2.30k|            }
  200|  84.8k|            it = result->begin();
  201|  84.8k|        }
  202|  2.30k|    }
  203|  2.30k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcxNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  2.30k|{
  162|       |    // Regular scan
  163|  23.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 23.0k, False: 2.30k]
  ------------------
  164|  23.0k|        auto it = scn::ranges::begin(source);
  165|   538k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   538k|            auto result = scn::scan<T>(
  167|   538k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   538k|                scn::runtime_format(f));
  169|   538k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 23.0k, False: 515k]
  ------------------
  170|  23.0k|                break;
  171|  23.0k|            }
  172|   515k|            it = result->begin();
  173|   515k|        }
  174|  23.0k|    }
  175|       |
  176|       |    // scan localized
  177|  23.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 23.0k, False: 2.30k]
  ------------------
  178|  23.0k|        auto it = scn::ranges::begin(source);
  179|   538k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   538k|            auto result = scn::scan<T>(
  181|   538k|                global_locale,
  182|   538k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   538k|                scn::runtime_format(f));
  184|   538k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 23.0k, False: 515k]
  ------------------
  185|  23.0k|                break;
  186|  23.0k|            }
  187|   515k|            it = result->begin();
  188|   515k|        }
  189|  23.0k|    }
  190|       |
  191|       |    // scan_value
  192|  2.30k|    {
  193|  2.30k|        auto it = scn::ranges::begin(source);
  194|   109k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|   109k|            auto result = scn::scan_value<T>(
  196|   109k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|   109k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 2.30k, False: 106k]
  ------------------
  198|  2.30k|                break;
  199|  2.30k|            }
  200|   106k|            it = result->begin();
  201|   106k|        }
  202|  2.30k|    }
  203|  2.30k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcyNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  2.30k|{
  162|       |    // Regular scan
  163|  23.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 23.0k, False: 2.30k]
  ------------------
  164|  23.0k|        auto it = scn::ranges::begin(source);
  165|   445k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   445k|            auto result = scn::scan<T>(
  167|   445k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   445k|                scn::runtime_format(f));
  169|   445k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 23.0k, False: 422k]
  ------------------
  170|  23.0k|                break;
  171|  23.0k|            }
  172|   422k|            it = result->begin();
  173|   422k|        }
  174|  23.0k|    }
  175|       |
  176|       |    // scan localized
  177|  23.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 23.0k, False: 2.30k]
  ------------------
  178|  23.0k|        auto it = scn::ranges::begin(source);
  179|   445k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   445k|            auto result = scn::scan<T>(
  181|   445k|                global_locale,
  182|   445k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   445k|                scn::runtime_format(f));
  184|   445k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 23.0k, False: 422k]
  ------------------
  185|  23.0k|                break;
  186|  23.0k|            }
  187|   422k|            it = result->begin();
  188|   422k|        }
  189|  23.0k|    }
  190|       |
  191|       |    // scan_value
  192|  2.30k|    {
  193|  2.30k|        auto it = scn::ranges::begin(source);
  194|  90.4k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  90.4k|            auto result = scn::scan_value<T>(
  196|  90.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  90.4k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 2.30k, False: 88.1k]
  ------------------
  198|  2.30k|                break;
  199|  2.30k|            }
  200|  88.1k|            it = result->begin();
  201|  88.1k|        }
  202|  2.30k|    }
  203|  2.30k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcaKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  2.30k|{
  162|       |    // Regular scan
  163|  23.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 23.0k, False: 2.30k]
  ------------------
  164|  23.0k|        auto it = scn::ranges::begin(source);
  165|  25.3k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  25.3k|            auto result = scn::scan<T>(
  167|  25.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  25.3k|                scn::runtime_format(f));
  169|  25.3k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 23.0k, False: 2.30k]
  ------------------
  170|  23.0k|                break;
  171|  23.0k|            }
  172|  2.30k|            it = result->begin();
  173|  2.30k|        }
  174|  23.0k|    }
  175|       |
  176|       |    // scan localized
  177|  23.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 23.0k, False: 2.30k]
  ------------------
  178|  23.0k|        auto it = scn::ranges::begin(source);
  179|  25.3k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  25.3k|            auto result = scn::scan<T>(
  181|  25.3k|                global_locale,
  182|  25.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  25.3k|                scn::runtime_format(f));
  184|  25.3k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 23.0k, False: 2.30k]
  ------------------
  185|  23.0k|                break;
  186|  23.0k|            }
  187|  2.30k|            it = result->begin();
  188|  2.30k|        }
  189|  23.0k|    }
  190|       |
  191|       |    // scan_value
  192|  2.30k|    {
  193|  2.30k|        auto it = scn::ranges::begin(source);
  194|  2.30k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  2.30k|            auto result = scn::scan_value<T>(
  196|  2.30k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  2.30k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 2.30k, False: 0]
  ------------------
  198|  2.30k|                break;
  199|  2.30k|            }
  200|      0|            it = result->begin();
  201|      0|        }
  202|  2.30k|    }
  203|  2.30k|}
_ZN3scn4fuzz21do_basic_run_for_typeIchKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  2.30k|{
  162|       |    // Regular scan
  163|  23.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 23.0k, False: 2.30k]
  ------------------
  164|  23.0k|        auto it = scn::ranges::begin(source);
  165|  25.3k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  25.3k|            auto result = scn::scan<T>(
  167|  25.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  25.3k|                scn::runtime_format(f));
  169|  25.3k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 23.0k, False: 2.30k]
  ------------------
  170|  23.0k|                break;
  171|  23.0k|            }
  172|  2.30k|            it = result->begin();
  173|  2.30k|        }
  174|  23.0k|    }
  175|       |
  176|       |    // scan localized
  177|  23.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 23.0k, False: 2.30k]
  ------------------
  178|  23.0k|        auto it = scn::ranges::begin(source);
  179|  25.3k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  25.3k|            auto result = scn::scan<T>(
  181|  25.3k|                global_locale,
  182|  25.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  25.3k|                scn::runtime_format(f));
  184|  25.3k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 23.0k, False: 2.30k]
  ------------------
  185|  23.0k|                break;
  186|  23.0k|            }
  187|  2.30k|            it = result->begin();
  188|  2.30k|        }
  189|  23.0k|    }
  190|       |
  191|       |    // scan_value
  192|  2.30k|    {
  193|  2.30k|        auto it = scn::ranges::begin(source);
  194|  2.30k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  2.30k|            auto result = scn::scan_value<T>(
  196|  2.30k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  2.30k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 2.30k, False: 0]
  ------------------
  198|  2.30k|                break;
  199|  2.30k|            }
  200|      0|            it = result->begin();
  201|      0|        }
  202|  2.30k|    }
  203|  2.30k|}
_ZN3scn4fuzz21do_basic_run_for_typeIciKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  2.30k|{
  162|       |    // Regular scan
  163|  23.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 23.0k, False: 2.30k]
  ------------------
  164|  23.0k|        auto it = scn::ranges::begin(source);
  165|  25.3k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  25.3k|            auto result = scn::scan<T>(
  167|  25.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  25.3k|                scn::runtime_format(f));
  169|  25.3k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 23.0k, False: 2.30k]
  ------------------
  170|  23.0k|                break;
  171|  23.0k|            }
  172|  2.30k|            it = result->begin();
  173|  2.30k|        }
  174|  23.0k|    }
  175|       |
  176|       |    // scan localized
  177|  23.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 23.0k, False: 2.30k]
  ------------------
  178|  23.0k|        auto it = scn::ranges::begin(source);
  179|  25.3k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  25.3k|            auto result = scn::scan<T>(
  181|  25.3k|                global_locale,
  182|  25.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  25.3k|                scn::runtime_format(f));
  184|  25.3k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 23.0k, False: 2.30k]
  ------------------
  185|  23.0k|                break;
  186|  23.0k|            }
  187|  2.30k|            it = result->begin();
  188|  2.30k|        }
  189|  23.0k|    }
  190|       |
  191|       |    // scan_value
  192|  2.30k|    {
  193|  2.30k|        auto it = scn::ranges::begin(source);
  194|  2.30k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  2.30k|            auto result = scn::scan_value<T>(
  196|  2.30k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  2.30k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 2.30k, False: 0]
  ------------------
  198|  2.30k|                break;
  199|  2.30k|            }
  200|      0|            it = result->begin();
  201|      0|        }
  202|  2.30k|    }
  203|  2.30k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcjKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  2.30k|{
  162|       |    // Regular scan
  163|  23.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 23.0k, False: 2.30k]
  ------------------
  164|  23.0k|        auto it = scn::ranges::begin(source);
  165|  25.3k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  25.3k|            auto result = scn::scan<T>(
  167|  25.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  25.3k|                scn::runtime_format(f));
  169|  25.3k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 23.0k, False: 2.30k]
  ------------------
  170|  23.0k|                break;
  171|  23.0k|            }
  172|  2.30k|            it = result->begin();
  173|  2.30k|        }
  174|  23.0k|    }
  175|       |
  176|       |    // scan localized
  177|  23.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 23.0k, False: 2.30k]
  ------------------
  178|  23.0k|        auto it = scn::ranges::begin(source);
  179|  25.3k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  25.3k|            auto result = scn::scan<T>(
  181|  25.3k|                global_locale,
  182|  25.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  25.3k|                scn::runtime_format(f));
  184|  25.3k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 23.0k, False: 2.30k]
  ------------------
  185|  23.0k|                break;
  186|  23.0k|            }
  187|  2.30k|            it = result->begin();
  188|  2.30k|        }
  189|  23.0k|    }
  190|       |
  191|       |    // scan_value
  192|  2.30k|    {
  193|  2.30k|        auto it = scn::ranges::begin(source);
  194|  2.30k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  2.30k|            auto result = scn::scan_value<T>(
  196|  2.30k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  2.30k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 2.30k, False: 0]
  ------------------
  198|  2.30k|                break;
  199|  2.30k|            }
  200|      0|            it = result->begin();
  201|      0|        }
  202|  2.30k|    }
  203|  2.30k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcxKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  2.30k|{
  162|       |    // Regular scan
  163|  23.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 23.0k, False: 2.30k]
  ------------------
  164|  23.0k|        auto it = scn::ranges::begin(source);
  165|  25.3k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  25.3k|            auto result = scn::scan<T>(
  167|  25.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  25.3k|                scn::runtime_format(f));
  169|  25.3k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 23.0k, False: 2.30k]
  ------------------
  170|  23.0k|                break;
  171|  23.0k|            }
  172|  2.30k|            it = result->begin();
  173|  2.30k|        }
  174|  23.0k|    }
  175|       |
  176|       |    // scan localized
  177|  23.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 23.0k, False: 2.30k]
  ------------------
  178|  23.0k|        auto it = scn::ranges::begin(source);
  179|  25.3k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  25.3k|            auto result = scn::scan<T>(
  181|  25.3k|                global_locale,
  182|  25.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  25.3k|                scn::runtime_format(f));
  184|  25.3k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 23.0k, False: 2.30k]
  ------------------
  185|  23.0k|                break;
  186|  23.0k|            }
  187|  2.30k|            it = result->begin();
  188|  2.30k|        }
  189|  23.0k|    }
  190|       |
  191|       |    // scan_value
  192|  2.30k|    {
  193|  2.30k|        auto it = scn::ranges::begin(source);
  194|  2.30k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  2.30k|            auto result = scn::scan_value<T>(
  196|  2.30k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  2.30k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 2.30k, False: 0]
  ------------------
  198|  2.30k|                break;
  199|  2.30k|            }
  200|      0|            it = result->begin();
  201|      0|        }
  202|  2.30k|    }
  203|  2.30k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcyKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  2.30k|{
  162|       |    // Regular scan
  163|  23.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 23.0k, False: 2.30k]
  ------------------
  164|  23.0k|        auto it = scn::ranges::begin(source);
  165|  25.3k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  25.3k|            auto result = scn::scan<T>(
  167|  25.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  25.3k|                scn::runtime_format(f));
  169|  25.3k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 23.0k, False: 2.30k]
  ------------------
  170|  23.0k|                break;
  171|  23.0k|            }
  172|  2.30k|            it = result->begin();
  173|  2.30k|        }
  174|  23.0k|    }
  175|       |
  176|       |    // scan localized
  177|  23.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 23.0k, False: 2.30k]
  ------------------
  178|  23.0k|        auto it = scn::ranges::begin(source);
  179|  25.3k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  25.3k|            auto result = scn::scan<T>(
  181|  25.3k|                global_locale,
  182|  25.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  25.3k|                scn::runtime_format(f));
  184|  25.3k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 23.0k, False: 2.30k]
  ------------------
  185|  23.0k|                break;
  186|  23.0k|            }
  187|  2.30k|            it = result->begin();
  188|  2.30k|        }
  189|  23.0k|    }
  190|       |
  191|       |    // scan_value
  192|  2.30k|    {
  193|  2.30k|        auto it = scn::ranges::begin(source);
  194|  2.30k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  2.30k|            auto result = scn::scan_value<T>(
  196|  2.30k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  2.30k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 2.30k, False: 0]
  ------------------
  198|  2.30k|                break;
  199|  2.30k|            }
  200|      0|            it = result->begin();
  201|      0|        }
  202|  2.30k|    }
  203|  2.30k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
  119|  2.30k|{
  120|  2.30k|    using char_type = ranges::range_value_t<Source>;
  121|  2.30k|    auto& deque = get_noncontiguous_buffer<char_type>();
  122|  2.30k|    std::copy(ranges::begin(source), ranges::end(source),
  123|  2.30k|              std::back_inserter(deque));
  124|  2.30k|    return deque;
  125|  2.30k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
  108|  2.30k|{
  109|  2.30k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (109:19): [Folded - Ignored]
  ------------------
  110|  2.30k|        return noncontiguous_buffer;
  111|  2.30k|    }
  112|  2.30k|    else {
  113|  2.30k|        return wnoncontiguous_buffer;
  114|  2.30k|    }
  115|  2.30k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_S3_S3_S3_S3_EEENS_2v24spanIKNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEDpT0_:
  150|  2.30k|{
  151|  2.30k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  152|  2.30k|    auto& buf = get_format_string_view_buffer<CharT>();
  153|  2.30k|    buf.resize(sizeof...(Args));
  154|  2.30k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  155|  2.30k|    return {buf.data(), buf.size()};
  156|  2.30k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  136|  2.30k|{
  137|  2.30k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (137:19): [Folded - Ignored]
  ------------------
  138|  2.30k|        return format_string_view_buffer;
  139|  2.30k|    }
  140|  2.30k|    else {
  141|  2.30k|        return wformat_string_view_buffer;
  142|  2.30k|    }
  143|  2.30k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_NS_2v24spanIKNS3_IT_NS4_ISA_EEEEEE:
  210|  6.92k|{
  211|  6.92k|    do_basic_run_for_source<CharT>(data, format_strings);
  212|  6.92k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  213|  6.92k|                                   format_strings);
  214|  6.92k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwaNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  6.92k|{
  162|       |    // Regular scan
  163|  69.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 69.2k, False: 6.92k]
  ------------------
  164|  69.2k|        auto it = scn::ranges::begin(source);
  165|   342k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   342k|            auto result = scn::scan<T>(
  167|   342k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   342k|                scn::runtime_format(f));
  169|   342k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 69.2k, False: 273k]
  ------------------
  170|  69.2k|                break;
  171|  69.2k|            }
  172|   273k|            it = result->begin();
  173|   273k|        }
  174|  69.2k|    }
  175|       |
  176|       |    // scan localized
  177|  69.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 69.2k, False: 6.92k]
  ------------------
  178|  69.2k|        auto it = scn::ranges::begin(source);
  179|   342k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   342k|            auto result = scn::scan<T>(
  181|   342k|                global_locale,
  182|   342k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   342k|                scn::runtime_format(f));
  184|   342k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 69.2k, False: 273k]
  ------------------
  185|  69.2k|                break;
  186|  69.2k|            }
  187|   273k|            it = result->begin();
  188|   273k|        }
  189|  69.2k|    }
  190|       |
  191|       |    // scan_value
  192|  6.92k|    {
  193|  6.92k|        auto it = scn::ranges::begin(source);
  194|  71.7k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  71.7k|            auto result = scn::scan_value<T>(
  196|  71.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  71.7k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 6.92k, False: 64.7k]
  ------------------
  198|  6.92k|                break;
  199|  6.92k|            }
  200|  64.7k|            it = result->begin();
  201|  64.7k|        }
  202|  6.92k|    }
  203|  6.92k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwhNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  6.92k|{
  162|       |    // Regular scan
  163|  69.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 69.2k, False: 6.92k]
  ------------------
  164|  69.2k|        auto it = scn::ranges::begin(source);
  165|   358k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   358k|            auto result = scn::scan<T>(
  167|   358k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   358k|                scn::runtime_format(f));
  169|   358k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 69.2k, False: 289k]
  ------------------
  170|  69.2k|                break;
  171|  69.2k|            }
  172|   289k|            it = result->begin();
  173|   289k|        }
  174|  69.2k|    }
  175|       |
  176|       |    // scan localized
  177|  69.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 69.2k, False: 6.92k]
  ------------------
  178|  69.2k|        auto it = scn::ranges::begin(source);
  179|   358k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   358k|            auto result = scn::scan<T>(
  181|   358k|                global_locale,
  182|   358k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   358k|                scn::runtime_format(f));
  184|   358k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 69.2k, False: 289k]
  ------------------
  185|  69.2k|                break;
  186|  69.2k|            }
  187|   289k|            it = result->begin();
  188|   289k|        }
  189|  69.2k|    }
  190|       |
  191|       |    // scan_value
  192|  6.92k|    {
  193|  6.92k|        auto it = scn::ranges::begin(source);
  194|  73.1k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  73.1k|            auto result = scn::scan_value<T>(
  196|  73.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  73.1k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 6.92k, False: 66.2k]
  ------------------
  198|  6.92k|                break;
  199|  6.92k|            }
  200|  66.2k|            it = result->begin();
  201|  66.2k|        }
  202|  6.92k|    }
  203|  6.92k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwiNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  6.92k|{
  162|       |    // Regular scan
  163|  69.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 69.2k, False: 6.92k]
  ------------------
  164|  69.2k|        auto it = scn::ranges::begin(source);
  165|   490k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   490k|            auto result = scn::scan<T>(
  167|   490k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   490k|                scn::runtime_format(f));
  169|   490k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 69.2k, False: 421k]
  ------------------
  170|  69.2k|                break;
  171|  69.2k|            }
  172|   421k|            it = result->begin();
  173|   421k|        }
  174|  69.2k|    }
  175|       |
  176|       |    // scan localized
  177|  69.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 69.2k, False: 6.92k]
  ------------------
  178|  69.2k|        auto it = scn::ranges::begin(source);
  179|   490k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   490k|            auto result = scn::scan<T>(
  181|   490k|                global_locale,
  182|   490k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   490k|                scn::runtime_format(f));
  184|   490k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 69.2k, False: 421k]
  ------------------
  185|  69.2k|                break;
  186|  69.2k|            }
  187|   421k|            it = result->begin();
  188|   421k|        }
  189|  69.2k|    }
  190|       |
  191|       |    // scan_value
  192|  6.92k|    {
  193|  6.92k|        auto it = scn::ranges::begin(source);
  194|  93.8k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  93.8k|            auto result = scn::scan_value<T>(
  196|  93.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  93.8k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 6.92k, False: 86.9k]
  ------------------
  198|  6.92k|                break;
  199|  6.92k|            }
  200|  86.9k|            it = result->begin();
  201|  86.9k|        }
  202|  6.92k|    }
  203|  6.92k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwjNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  6.92k|{
  162|       |    // Regular scan
  163|  69.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 69.2k, False: 6.92k]
  ------------------
  164|  69.2k|        auto it = scn::ranges::begin(source);
  165|   431k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   431k|            auto result = scn::scan<T>(
  167|   431k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   431k|                scn::runtime_format(f));
  169|   431k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 69.2k, False: 362k]
  ------------------
  170|  69.2k|                break;
  171|  69.2k|            }
  172|   362k|            it = result->begin();
  173|   362k|        }
  174|  69.2k|    }
  175|       |
  176|       |    // scan localized
  177|  69.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 69.2k, False: 6.92k]
  ------------------
  178|  69.2k|        auto it = scn::ranges::begin(source);
  179|   431k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   431k|            auto result = scn::scan<T>(
  181|   431k|                global_locale,
  182|   431k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   431k|                scn::runtime_format(f));
  184|   431k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 69.2k, False: 362k]
  ------------------
  185|  69.2k|                break;
  186|  69.2k|            }
  187|   362k|            it = result->begin();
  188|   362k|        }
  189|  69.2k|    }
  190|       |
  191|       |    // scan_value
  192|  6.92k|    {
  193|  6.92k|        auto it = scn::ranges::begin(source);
  194|  82.3k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  82.3k|            auto result = scn::scan_value<T>(
  196|  82.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  82.3k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 6.92k, False: 75.3k]
  ------------------
  198|  6.92k|                break;
  199|  6.92k|            }
  200|  75.3k|            it = result->begin();
  201|  75.3k|        }
  202|  6.92k|    }
  203|  6.92k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwxNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  6.92k|{
  162|       |    // Regular scan
  163|  69.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 69.2k, False: 6.92k]
  ------------------
  164|  69.2k|        auto it = scn::ranges::begin(source);
  165|   512k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   512k|            auto result = scn::scan<T>(
  167|   512k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   512k|                scn::runtime_format(f));
  169|   512k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 69.2k, False: 443k]
  ------------------
  170|  69.2k|                break;
  171|  69.2k|            }
  172|   443k|            it = result->begin();
  173|   443k|        }
  174|  69.2k|    }
  175|       |
  176|       |    // scan localized
  177|  69.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 69.2k, False: 6.92k]
  ------------------
  178|  69.2k|        auto it = scn::ranges::begin(source);
  179|   512k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   512k|            auto result = scn::scan<T>(
  181|   512k|                global_locale,
  182|   512k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   512k|                scn::runtime_format(f));
  184|   512k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 69.2k, False: 443k]
  ------------------
  185|  69.2k|                break;
  186|  69.2k|            }
  187|   443k|            it = result->begin();
  188|   443k|        }
  189|  69.2k|    }
  190|       |
  191|       |    // scan_value
  192|  6.92k|    {
  193|  6.92k|        auto it = scn::ranges::begin(source);
  194|  98.9k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  98.9k|            auto result = scn::scan_value<T>(
  196|  98.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  98.9k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 6.92k, False: 92.0k]
  ------------------
  198|  6.92k|                break;
  199|  6.92k|            }
  200|  92.0k|            it = result->begin();
  201|  92.0k|        }
  202|  6.92k|    }
  203|  6.92k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwyNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  6.92k|{
  162|       |    // Regular scan
  163|  69.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 69.2k, False: 6.92k]
  ------------------
  164|  69.2k|        auto it = scn::ranges::begin(source);
  165|   445k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   445k|            auto result = scn::scan<T>(
  167|   445k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   445k|                scn::runtime_format(f));
  169|   445k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 69.2k, False: 376k]
  ------------------
  170|  69.2k|                break;
  171|  69.2k|            }
  172|   376k|            it = result->begin();
  173|   376k|        }
  174|  69.2k|    }
  175|       |
  176|       |    // scan localized
  177|  69.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 69.2k, False: 6.92k]
  ------------------
  178|  69.2k|        auto it = scn::ranges::begin(source);
  179|   445k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   445k|            auto result = scn::scan<T>(
  181|   445k|                global_locale,
  182|   445k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   445k|                scn::runtime_format(f));
  184|   445k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 69.2k, False: 376k]
  ------------------
  185|  69.2k|                break;
  186|  69.2k|            }
  187|   376k|            it = result->begin();
  188|   376k|        }
  189|  69.2k|    }
  190|       |
  191|       |    // scan_value
  192|  6.92k|    {
  193|  6.92k|        auto it = scn::ranges::begin(source);
  194|  85.4k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  85.4k|            auto result = scn::scan_value<T>(
  196|  85.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  85.4k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 6.92k, False: 78.5k]
  ------------------
  198|  6.92k|                break;
  199|  6.92k|            }
  200|  78.5k|            it = result->begin();
  201|  78.5k|        }
  202|  6.92k|    }
  203|  6.92k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwaKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  6.92k|{
  162|       |    // Regular scan
  163|  69.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 69.2k, False: 6.92k]
  ------------------
  164|  69.2k|        auto it = scn::ranges::begin(source);
  165|  69.2k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  69.2k|            auto result = scn::scan<T>(
  167|  69.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  69.2k|                scn::runtime_format(f));
  169|  69.2k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 69.2k, False: 1]
  ------------------
  170|  69.2k|                break;
  171|  69.2k|            }
  172|      1|            it = result->begin();
  173|      1|        }
  174|  69.2k|    }
  175|       |
  176|       |    // scan localized
  177|  69.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 69.2k, False: 6.92k]
  ------------------
  178|  69.2k|        auto it = scn::ranges::begin(source);
  179|  69.2k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  69.2k|            auto result = scn::scan<T>(
  181|  69.2k|                global_locale,
  182|  69.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  69.2k|                scn::runtime_format(f));
  184|  69.2k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 69.2k, False: 1]
  ------------------
  185|  69.2k|                break;
  186|  69.2k|            }
  187|      1|            it = result->begin();
  188|      1|        }
  189|  69.2k|    }
  190|       |
  191|       |    // scan_value
  192|  6.92k|    {
  193|  6.92k|        auto it = scn::ranges::begin(source);
  194|  6.92k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  6.92k|            auto result = scn::scan_value<T>(
  196|  6.92k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  6.92k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 6.92k, False: 0]
  ------------------
  198|  6.92k|                break;
  199|  6.92k|            }
  200|      0|            it = result->begin();
  201|      0|        }
  202|  6.92k|    }
  203|  6.92k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwhKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  6.92k|{
  162|       |    // Regular scan
  163|  69.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 69.2k, False: 6.92k]
  ------------------
  164|  69.2k|        auto it = scn::ranges::begin(source);
  165|  69.2k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  69.2k|            auto result = scn::scan<T>(
  167|  69.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  69.2k|                scn::runtime_format(f));
  169|  69.2k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 69.2k, False: 2]
  ------------------
  170|  69.2k|                break;
  171|  69.2k|            }
  172|      2|            it = result->begin();
  173|      2|        }
  174|  69.2k|    }
  175|       |
  176|       |    // scan localized
  177|  69.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 69.2k, False: 6.92k]
  ------------------
  178|  69.2k|        auto it = scn::ranges::begin(source);
  179|  69.2k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  69.2k|            auto result = scn::scan<T>(
  181|  69.2k|                global_locale,
  182|  69.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  69.2k|                scn::runtime_format(f));
  184|  69.2k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 69.2k, False: 2]
  ------------------
  185|  69.2k|                break;
  186|  69.2k|            }
  187|      2|            it = result->begin();
  188|      2|        }
  189|  69.2k|    }
  190|       |
  191|       |    // scan_value
  192|  6.92k|    {
  193|  6.92k|        auto it = scn::ranges::begin(source);
  194|  6.92k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  6.92k|            auto result = scn::scan_value<T>(
  196|  6.92k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  6.92k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 6.92k, False: 0]
  ------------------
  198|  6.92k|                break;
  199|  6.92k|            }
  200|      0|            it = result->begin();
  201|      0|        }
  202|  6.92k|    }
  203|  6.92k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwiKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  6.92k|{
  162|       |    // Regular scan
  163|  69.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 69.2k, False: 6.92k]
  ------------------
  164|  69.2k|        auto it = scn::ranges::begin(source);
  165|  76.1k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  76.1k|            auto result = scn::scan<T>(
  167|  76.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  76.1k|                scn::runtime_format(f));
  169|  76.1k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 69.2k, False: 6.92k]
  ------------------
  170|  69.2k|                break;
  171|  69.2k|            }
  172|  6.92k|            it = result->begin();
  173|  6.92k|        }
  174|  69.2k|    }
  175|       |
  176|       |    // scan localized
  177|  69.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 69.2k, False: 6.92k]
  ------------------
  178|  69.2k|        auto it = scn::ranges::begin(source);
  179|  76.1k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  76.1k|            auto result = scn::scan<T>(
  181|  76.1k|                global_locale,
  182|  76.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  76.1k|                scn::runtime_format(f));
  184|  76.1k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 69.2k, False: 6.92k]
  ------------------
  185|  69.2k|                break;
  186|  69.2k|            }
  187|  6.92k|            it = result->begin();
  188|  6.92k|        }
  189|  69.2k|    }
  190|       |
  191|       |    // scan_value
  192|  6.92k|    {
  193|  6.92k|        auto it = scn::ranges::begin(source);
  194|  6.92k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  6.92k|            auto result = scn::scan_value<T>(
  196|  6.92k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  6.92k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 6.92k, False: 0]
  ------------------
  198|  6.92k|                break;
  199|  6.92k|            }
  200|      0|            it = result->begin();
  201|      0|        }
  202|  6.92k|    }
  203|  6.92k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwjKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  6.92k|{
  162|       |    // Regular scan
  163|  69.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 69.2k, False: 6.92k]
  ------------------
  164|  69.2k|        auto it = scn::ranges::begin(source);
  165|  76.1k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  76.1k|            auto result = scn::scan<T>(
  167|  76.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  76.1k|                scn::runtime_format(f));
  169|  76.1k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 69.2k, False: 6.92k]
  ------------------
  170|  69.2k|                break;
  171|  69.2k|            }
  172|  6.92k|            it = result->begin();
  173|  6.92k|        }
  174|  69.2k|    }
  175|       |
  176|       |    // scan localized
  177|  69.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 69.2k, False: 6.92k]
  ------------------
  178|  69.2k|        auto it = scn::ranges::begin(source);
  179|  76.1k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  76.1k|            auto result = scn::scan<T>(
  181|  76.1k|                global_locale,
  182|  76.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  76.1k|                scn::runtime_format(f));
  184|  76.1k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 69.2k, False: 6.92k]
  ------------------
  185|  69.2k|                break;
  186|  69.2k|            }
  187|  6.92k|            it = result->begin();
  188|  6.92k|        }
  189|  69.2k|    }
  190|       |
  191|       |    // scan_value
  192|  6.92k|    {
  193|  6.92k|        auto it = scn::ranges::begin(source);
  194|  6.92k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  6.92k|            auto result = scn::scan_value<T>(
  196|  6.92k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  6.92k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 6.92k, False: 0]
  ------------------
  198|  6.92k|                break;
  199|  6.92k|            }
  200|      0|            it = result->begin();
  201|      0|        }
  202|  6.92k|    }
  203|  6.92k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwxKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  6.92k|{
  162|       |    // Regular scan
  163|  69.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 69.2k, False: 6.92k]
  ------------------
  164|  69.2k|        auto it = scn::ranges::begin(source);
  165|  76.1k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  76.1k|            auto result = scn::scan<T>(
  167|  76.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  76.1k|                scn::runtime_format(f));
  169|  76.1k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 69.2k, False: 6.92k]
  ------------------
  170|  69.2k|                break;
  171|  69.2k|            }
  172|  6.92k|            it = result->begin();
  173|  6.92k|        }
  174|  69.2k|    }
  175|       |
  176|       |    // scan localized
  177|  69.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 69.2k, False: 6.92k]
  ------------------
  178|  69.2k|        auto it = scn::ranges::begin(source);
  179|  76.1k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  76.1k|            auto result = scn::scan<T>(
  181|  76.1k|                global_locale,
  182|  76.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  76.1k|                scn::runtime_format(f));
  184|  76.1k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 69.2k, False: 6.92k]
  ------------------
  185|  69.2k|                break;
  186|  69.2k|            }
  187|  6.92k|            it = result->begin();
  188|  6.92k|        }
  189|  69.2k|    }
  190|       |
  191|       |    // scan_value
  192|  6.92k|    {
  193|  6.92k|        auto it = scn::ranges::begin(source);
  194|  6.92k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  6.92k|            auto result = scn::scan_value<T>(
  196|  6.92k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  6.92k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 6.92k, False: 0]
  ------------------
  198|  6.92k|                break;
  199|  6.92k|            }
  200|      0|            it = result->begin();
  201|      0|        }
  202|  6.92k|    }
  203|  6.92k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwyKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  6.92k|{
  162|       |    // Regular scan
  163|  69.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 69.2k, False: 6.92k]
  ------------------
  164|  69.2k|        auto it = scn::ranges::begin(source);
  165|  76.1k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  76.1k|            auto result = scn::scan<T>(
  167|  76.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  76.1k|                scn::runtime_format(f));
  169|  76.1k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 69.2k, False: 6.92k]
  ------------------
  170|  69.2k|                break;
  171|  69.2k|            }
  172|  6.92k|            it = result->begin();
  173|  6.92k|        }
  174|  69.2k|    }
  175|       |
  176|       |    // scan localized
  177|  69.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 69.2k, False: 6.92k]
  ------------------
  178|  69.2k|        auto it = scn::ranges::begin(source);
  179|  76.1k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  76.1k|            auto result = scn::scan<T>(
  181|  76.1k|                global_locale,
  182|  76.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  76.1k|                scn::runtime_format(f));
  184|  76.1k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 69.2k, False: 6.92k]
  ------------------
  185|  69.2k|                break;
  186|  69.2k|            }
  187|  6.92k|            it = result->begin();
  188|  6.92k|        }
  189|  69.2k|    }
  190|       |
  191|       |    // scan_value
  192|  6.92k|    {
  193|  6.92k|        auto it = scn::ranges::begin(source);
  194|  6.92k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  6.92k|            auto result = scn::scan_value<T>(
  196|  6.92k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  6.92k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 6.92k, False: 0]
  ------------------
  198|  6.92k|                break;
  199|  6.92k|            }
  200|      0|            it = result->begin();
  201|      0|        }
  202|  6.92k|    }
  203|  6.92k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
  119|  6.92k|{
  120|  6.92k|    using char_type = ranges::range_value_t<Source>;
  121|  6.92k|    auto& deque = get_noncontiguous_buffer<char_type>();
  122|  6.92k|    std::copy(ranges::begin(source), ranges::end(source),
  123|  6.92k|              std::back_inserter(deque));
  124|  6.92k|    return deque;
  125|  6.92k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
  108|  6.92k|{
  109|  6.92k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (109:19): [Folded - Ignored]
  ------------------
  110|  6.92k|        return noncontiguous_buffer;
  111|  6.92k|    }
  112|  6.92k|    else {
  113|  6.92k|        return wnoncontiguous_buffer;
  114|  6.92k|    }
  115|  6.92k|}

LLVMFuzzerTestOneInput:
   59|  2.30k|{
   60|  2.30k|    scn::fuzz::run({data, size});
   61|  2.30k|    return 0;
   62|  2.30k|}
int_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runENS_2v24spanIKhEE:
   35|  2.30k|{
   36|  2.30k|    if (data.size() > max_input_bytes || data.size() == 0) {
  ------------------
  |  Branch (36:9): [True: 0, False: 2.30k]
  |  Branch (36:42): [True: 0, False: 2.30k]
  ------------------
   37|      0|        return;
   38|      0|    }
   39|       |
   40|  2.30k|    auto [sv, wsv_direct, wsv_reinterpret, wsv_transcode] =
   41|  2.30k|        make_input_views(data);
   42|       |
   43|  2.30k|    auto f =
   44|  2.30k|        get_format_strings<char>("{}", "{:i}", "{:d}", "{:L}", "{:x}", "{:b}",
   45|  2.30k|                                 "{:o}", "{:B36}", "{:'}", "{:'L}");
   46|  2.30k|    do_basic_run(sv, f);
   47|       |
   48|  2.30k|    auto wf = get_format_strings<wchar_t>(L"{}", L"{:i}", L"{:d}", L"{:L}",
   49|  2.30k|                                          L"{:x}", L"{:b}", L"{:o}", L"{:B36}",
   50|  2.30k|                                          L"{:'}", L"{:'L}");
   51|  2.30k|    do_basic_run(wsv_direct, wf);
   52|  2.30k|    do_basic_run(wsv_reinterpret, wf);
   53|  2.30k|    do_basic_run(wsv_transcode, wf);
   54|  2.30k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
   24|  2.30k|{
   25|  2.30k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  2.30k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  2.30k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  2.30k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  2.30k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  2.30k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  2.30k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
   24|  2.30k|{
   25|  2.30k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  2.30k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  2.30k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  2.30k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  2.30k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  2.30k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  2.30k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
   24|  6.92k|{
   25|  6.92k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  6.92k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  6.92k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  6.92k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  6.92k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  6.92k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  6.92k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
   24|  6.92k|{
   25|  6.92k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  6.92k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  6.92k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  6.92k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  6.92k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  6.92k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  6.92k|}

