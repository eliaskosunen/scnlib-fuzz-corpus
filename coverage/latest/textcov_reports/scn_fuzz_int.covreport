_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIccEEDaSG_SQ_:
  865|   461k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIwcEEDaSG_SQ_:
  865|  82.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  865|  82.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v46detail39code_point_length_by_starting_code_unitIcEEmT_:
 4067|   862k|{
 4068|   862k|    if constexpr (sizeof(U) == 1) {
 4069|   862k|        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|       |    else {
 4075|       |        // utf-32
 4076|       |        static_assert(sizeof(U) == 4);
 4077|       |        SCN_UNUSED(ch);
 4078|       |        return 1;
 4079|       |    }
 4080|   862k|}
_ZN3scn2v46detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 4031|   862k|{
 4032|   862k|    static_assert(sizeof(U8) == 1);
 4033|       |
 4034|   862k|    SCN_GCC_COMPAT_PUSH
 4035|   862k|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 4036|   862k|    constexpr char lengths[] =
 4037|   862k|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 4038|   862k|        "\1\1\1\1\1\1\1\1"
 4039|   862k|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 4040|       |                            // byte
 4041|   862k|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 4042|   862k|        "\3\3"              // highest bits 1110 -> 3-byte cp
 4043|   862k|        "\4";               // highest bits 11110 -> 4-byte cp
 4044|   862k|    return lengths[static_cast<unsigned char>(ch) >> 3];
 4045|   862k|    SCN_GCC_COMPAT_POP
 4046|   862k|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|   845k|{
 4274|   845k|    if constexpr (sizeof(CharT) == 1) {
 4275|   845k|        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|       |    else {
 4281|       |        SCN_EXPECT(input.size() == 1);
 4282|       |        auto cp = static_cast<char32_t>(input.front());
 4283|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4284|       |            return invalid_code_point;
 4285|       |        }
 4286|       |        return cp;
 4287|       |    }
 4288|   845k|}
_ZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4086|   845k|{
 4087|   845k|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  930|   845k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   845k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4088|       |
 4089|   845k|    const auto is_trailing_code_unit = [](char ch) {
 4090|   845k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|   845k|    };
 4092|       |
 4093|   845k|    if (input.size() == 1) {
  ------------------
  |  Branch (4093:9): [True: 836k, False: 8.97k]
  ------------------
 4094|   836k|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (4094:13): [True: 1.01k, False: 835k]
  ------------------
 4095|  1.01k|            SCN_UNLIKELY_ATTR
 4096|  1.01k|            return invalid_code_point;
 4097|  1.01k|        }
 4098|   835k|        return static_cast<char32_t>(input[0]);
 4099|   836k|    }
 4100|       |
 4101|  8.97k|    if (input.size() == 2) {
  ------------------
  |  Branch (4101:9): [True: 3.65k, False: 5.31k]
  ------------------
 4102|  3.65k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (4102:13): [True: 44, False: 3.61k]
  ------------------
 4103|     44|            SCN_UNLIKELY_ATTR
 4104|     44|            return invalid_code_point;
 4105|     44|        }
 4106|  3.61k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (4106:13): [True: 830, False: 2.78k]
  ------------------
 4107|    830|            SCN_UNLIKELY_ATTR
 4108|    830|            return invalid_code_point;
 4109|    830|        }
 4110|       |
 4111|  2.78k|        char32_t cp{};
 4112|  2.78k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4113|  2.78k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4114|  2.78k|        return cp;
 4115|  3.61k|    }
 4116|       |
 4117|  5.31k|    if (input.size() == 3) {
  ------------------
  |  Branch (4117:9): [True: 4.14k, False: 1.17k]
  ------------------
 4118|  4.14k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (4118:13): [True: 53, False: 4.08k]
  ------------------
 4119|     53|            SCN_UNLIKELY_ATTR
 4120|     53|            return invalid_code_point;
 4121|     53|        }
 4122|  4.08k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4122:13): [True: 613, False: 3.47k]
  ------------------
 4123|  4.08k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (4123:13): [True: 260, False: 3.21k]
  ------------------
 4124|    873|            SCN_UNLIKELY_ATTR
 4125|    873|            return invalid_code_point;
 4126|    873|        }
 4127|       |
 4128|  3.21k|        char32_t cp{};
 4129|  3.21k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4130|  3.21k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4131|  3.21k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4132|  3.21k|        return cp;
 4133|  4.08k|    }
 4134|       |
 4135|  1.17k|    if (input.size() == 4) {
  ------------------
  |  Branch (4135:9): [True: 1.17k, False: 0]
  ------------------
 4136|  1.17k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (4136:13): [True: 0, False: 1.17k]
  ------------------
 4137|      0|            SCN_UNLIKELY_ATTR
 4138|      0|            return invalid_code_point;
 4139|      0|        }
 4140|  1.17k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (4140:13): [True: 275, False: 901]
  ------------------
 4141|    275|            SCN_UNLIKELY_ATTR
 4142|    275|            return invalid_code_point;
 4143|    275|        }
 4144|    901|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4144:13): [True: 391, False: 510]
  ------------------
 4145|    901|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (4145:13): [True: 13, False: 497]
  ------------------
 4146|    901|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (4146:13): [True: 10, False: 487]
  ------------------
 4147|    414|            SCN_UNLIKELY_ATTR
 4148|    414|            return invalid_code_point;
 4149|    414|        }
 4150|       |
 4151|    487|        char32_t cp{};
 4152|    487|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4153|    487|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4154|    487|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4155|    487|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4156|    487|        return cp;
 4157|    901|    }
 4158|       |
 4159|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4160|       |    // gcc 7 thinks we'll get here, even when we won't
 4161|      0|    SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4162|      0|#endif
 4163|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4164|      0|}
_ZZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4089|  13.0k|    const auto is_trailing_code_unit = [](char ch) {
 4090|  13.0k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|  13.0k|    };
_ZN3scn2v46detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3959|   593k|{
 3960|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3961|       |                                          decltype(first), decltype(last)> &&
 3962|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3963|       |        return {first, last};
 3964|       |    }
 3965|   593k|    else {
 3966|   593k|        return {to_address(first), static_cast<size_t>(std::distance(
 3967|   593k|                                       to_address(first), to_address(last)))};
 3968|   593k|    }
 3969|   593k|}
_ZN3scn2v46detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  1.78M|{
  316|  1.78M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|  1.78M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  1.78M|}
_ZN3scn2v46detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  293|  4.57M|{
  294|  4.57M|    return p;
  295|  4.57M|}
_ZN3scn2v46detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3990|  1.37M|{
 3991|       |    if constexpr (std::is_constructible_v<
 3992|       |                      typename std::basic_string_view<CharT>::iterator,
 3993|       |                      decltype(it)> &&
 3994|  1.37M|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3995|  1.37M|        SCN_UNUSED(sv);
  ------------------
  |  |  915|  1.37M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3996|  1.37M|        return it;
 3997|       |    }
 3998|       |    else {
 3999|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 4000|       |    }
 4001|  1.37M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  87.3k|    {
 2869|  87.3k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  87.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  87.3k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  87.3k|    {
 2850|  87.3k|        return decay_copy(t.begin());
 2851|  87.3k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 2093|  4.29M|{
 2094|  4.29M|    return SCN_FWD(t);
  ------------------
  |  |  936|  4.29M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  4.29M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   901k|    {
 2926|   901k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   901k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   901k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   901k|    {
 2908|   901k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   901k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   901k|    }
_ZN3scn2v44scanIJaENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9704|  33.9k|{
 9705|  33.9k|    auto result = make_scan_result<Source, Args...>();
 9706|  33.9k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  33.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|  33.9k|                                   make_scan_args(result->values())));
 9708|  33.9k|    return result;
 9709|  33.9k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJaEEEDav:
 9660|  73.2k|{
 9661|  73.2k|    return scan_result_type<Source, Args...>();
 9662|  73.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEC2Ev:
 1551|  73.2k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EEC2Ev:
  426|  73.2k|        : m_value(T{}), m_has_value(true)
  427|  73.2k|    {
  428|  73.2k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJaEEC2Ev:
 6610|  73.2k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2Ev:
 6453|   450k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2Ev:
 3459|   450k|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJaEEC2Ev:
 6384|   205k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9645|  73.2k|{
 9646|  73.2k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  73.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.4k, False: 58.7k]
  |  |  ------------------
  ------------------
 9647|  14.4k|        out = unexpected(in.error());
 9648|  14.4k|    }
 9649|  58.7k|    else {
 9650|  58.7k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  58.7k|    static_cast<    \
  |  |  935|  58.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|  58.7k|    }
 9652|  73.2k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1739|   450k|    {
 1740|   450k|        return has_value();
 1741|   450k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   900k|    {
  490|   900k|        return m_has_value;
  491|   900k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1745|  86.6k|    {
 1746|  86.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  86.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  86.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  86.6k|        return this->get_unexpected().error();
 1748|  86.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  86.6k|    {
  473|  86.6k|        return m_unexpected;
  474|  86.6k|    }
_ZNR3scn2v410unexpectedINS0_10scan_errorEE5errorEv:
  364|  5.85M|    {
  365|  5.85M|        return m_unexpected;
  366|  5.85M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  349|  2.61M|        : m_unexpected(std::forward<Err>(e))
  350|  2.61M|    {
  351|  2.61M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  2.61M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  2.61M|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  14.4k|        : base(unexpect, std::move(e.error())),
 1616|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  14.4k|    {
 1618|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.4k|          m_has_value(false)
  451|  14.4k|    {
  452|  14.4k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  358|  3.36M|        : m_unexpected(std::forward<Args>(args)...)
  359|  3.36M|    {
  360|  3.36M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  3.36M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  3.36M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  14.4k|    {
 1316|  14.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEaSEOSC_:
 1556|  14.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorEvEaSEOSD_:
  902|  14.4k|    {
  903|  14.4k|        assign_common(std::move(other));
  904|  14.4k|        return *this;
  905|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  14.4k|    {
  950|  14.4k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 14.4k, False: 0]
  ------------------
  951|  14.4k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 14.4k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  14.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  14.4k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   292k|    {
  490|   292k|        return m_has_value;
  491|   292k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   190k|    {
  456|   190k|        return m_value;
  457|   190k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  14.4k|    {
 1046|  14.4k|        this->destroy_value();
 1047|  14.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  14.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  14.4k|    {
  504|  14.4k|        scn::detail::construct_at(&get_unexpected(),
  505|  14.4k|                                  std::forward<Args>(args)...);
  506|  14.4k|        m_has_value = false;
  507|  14.4k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJS5_EEEPT_S7_DpOT0_:
  395|   520k|{
  396|   520k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   520k|        T(std::forward<Args>(args)...);
  398|   520k|}
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.4k|    {
  473|  14.4k|        return m_unexpected;
  474|  14.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  14.4k|    {
  481|  14.4k|        return std::move(m_unexpected);
  482|  14.4k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE9set_rangeIS9_EEvOT_:
 6484|   363k|    {
 6485|   363k|        m_range = std::forward<Other>(r);
 6486|   363k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1794|   363k|    {
 1795|   363k|        return value();
 1796|   363k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|   363k|    {
 1769|   363k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   363k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   363k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   363k|        return this->get_value();
 1771|   363k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|   363k|    {
  456|   363k|        return m_value;
  457|   363k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9484|   209k|{
 9485|   209k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  936|   209k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9486|   209k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9421|   209k|{
 9422|   209k|    auto buffer = make_scan_buffer(range);
 9423|       |
 9424|   209k|    auto result = vscan_impl(buffer, format, args);
 9425|   209k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   209k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 41.2k, False: 167k]
  |  |  ------------------
  ------------------
 9426|  41.2k|        return unexpected(result.error());
 9427|  41.2k|    }
 9428|   167k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9429|   209k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 5380|   450k|{
 5381|   450k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|   450k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|   450k|                  "\n"
 5385|   450k|                  "Unsupported range type given as input to a scanning "
 5386|   450k|                  "function.\n"
 5387|   450k|                  "A range needs to have a character type (value type) "
 5388|   450k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|   450k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|   450k|                  "to be included.\n"
 5391|   450k|                  "See the scnlib documentation for more details.");
 5392|   450k|    static_assert(
 5393|   450k|        !std::is_same_v<T, custom_char_traits>,
 5394|   450k|        "\n"
 5395|   450k|        "Unsupported range type given as input to a scanning "
 5396|   450k|        "function.\n"
 5397|   450k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|   450k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|   450k|        "not supported.");
 5400|   450k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|   450k|                  "\n"
 5402|   450k|                  "Unsupported range type given as input to a scanning "
 5403|   450k|                  "function.\n"
 5404|   450k|                  "file_marker_found cannot be used as an "
 5405|   450k|                  "source range type to scn::scan.\n"
 5406|   450k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|   450k|                  "and do not provide an explicit source range, "
 5408|   450k|                  "or use scn::scan with a FILE* directly.");
 5409|   450k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|   450k|                  "\n"
 5411|   450k|                  "Unsupported range type given as input to a scanning "
 5412|   450k|                  "function.\n"
 5413|   450k|                  "In order to be scannable, a range needs to satisfy "
 5414|   450k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|   450k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|   450k|                  "\n"
 5417|   450k|                  "Unsupported range type given as input to a scanning "
 5418|   450k|                  "function.\n"
 5419|   450k|                  "A range needs to model forward_range and have a valid "
 5420|   450k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|   450k|                  "Examples of scannable ranges are std::string, "
 5422|   450k|                  "std::string_view, "
 5423|   450k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|   450k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|   450k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|   450k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5319|   450k|{
 5320|   450k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5321|   450k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5322|       |    }
 5323|       |    else {
 5324|       |        return invalid_char_type{};
 5325|       |    }
 5326|   450k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   450k|    {
 3000|   450k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   450k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   450k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   450k|    {
 2981|   450k|        return t.data();
 2982|   450k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3382|   450k|    {
 3383|   450k|        return detail::to_address(ranges::begin(derived()));
 3384|   450k|    }
_ZN3scn2v46detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  2.78M|{
  316|  2.78M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|  2.78M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  2.78M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   814k|    {
 2869|   814k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   814k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   814k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   814k|    {
 2850|   814k|        return decay_copy(t.begin());
 2851|   814k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3479|  8.00M|    {
 3480|  8.00M|        return m_iterator;
 3481|  8.00M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3338|   450k|    {
 3339|   450k|        return static_cast<const D&>(*this);
 3340|   450k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3074|   450k|    {
 3075|   450k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   450k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3040|   450k|    {
 3041|   450k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|   450k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   450k|    }
_ZN3scn2v46ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 2093|  1.26M|{
 2094|  1.26M|    return SCN_FWD(t);
  ------------------
  |  |  936|  1.26M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  1.26M|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3495|  1.87M|    {
 3496|  1.87M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3497|  1.87M|    }
_ZNK3scn2v48expectedIlNS0_10scan_errorEEcvbEv:
 1739|  1.89M|    {
 1740|  1.89M|        return has_value();
 1741|  1.89M|    }
_ZNK3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  489|  3.53M|    {
  490|  3.53M|        return m_has_value;
  491|  3.53M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5errorEv:
 1745|   520k|    {
 1746|   520k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   520k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   520k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   520k|        return this->get_unexpected().error();
 1748|   520k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   520k|    {
  473|   520k|        return m_unexpected;
  474|   520k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|  86.6k|        : base(unexpect, std::move(e.error())),
 1616|  86.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  86.6k|    {
 1618|  86.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|  86.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  86.6k|          m_has_value(false)
  451|  86.6k|    {
  452|  86.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   450k|    {
 1316|   450k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6714|   363k|{
 6715|       |    if constexpr (ranges::random_access_iterator<
 6716|   363k|                      ranges::iterator_t<SourceRange>>) {
 6717|   363k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6718|       |    }
 6719|       |    else {
 6720|       |        auto it = ranges::begin(source);
 6721|       |        while (n > 0) {
 6722|       |            --n;
 6723|       |            ++it;
 6724|       |        }
 6725|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6726|       |    }
 6727|   363k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  2.13M|    {
 2869|  2.13M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  2.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  2.13M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  2.13M|    {
 2850|  2.13M|        return decay_copy(t.begin());
 2851|  2.13M|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 6701|   363k|{
 6702|   363k|    return ranges::end(source);
 6703|   363k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   363k|    {
 2926|   363k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   363k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   363k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   363k|    {
 2908|   363k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   363k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   363k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3483|  5.55M|    {
 3484|  5.55M|        return m_sentinel;
 3485|  5.55M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1794|  1.11M|    {
 1795|  1.11M|        return value();
 1796|  1.11M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1768|  1.11M|    {
 1769|  1.11M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.11M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.11M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.11M|        return this->get_value();
 1771|  1.11M|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  455|  1.11M|    {
  456|  1.11M|        return m_value;
  457|  1.11M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   363k|        : base(std::in_place, std::forward<U>(val)),
 1570|   363k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   363k|    {
 1572|   363k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|   363k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   363k|    {
  442|   363k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJaEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8782|  67.9k|    {
 8783|  67.9k|        return m_str;
 8784|  67.9k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJaEEEDaRNSt3__15tupleIJDpT0_EEE:
 6114|   135k|{
 6115|   135k|    detail::check_scan_arg_types<Args...>();
 6116|   135k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|   135k|}
_ZN3scn2v46detail20check_scan_arg_typesIJaEEEbv:
 5829|   205k|{
 5830|   205k|    constexpr bool default_constructible_constraint =
 5831|   205k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5832|   205k|    static_assert(default_constructible_constraint,
 5833|   205k|                  "Scan argument types must be default constructible");
 5834|       |
 5835|   205k|    constexpr bool destructible_constraint =
 5836|   205k|        std::conjunction_v<std::is_destructible<Args>...>;
 5837|   205k|    static_assert(destructible_constraint,
 5838|   205k|                  "Scan argument types must be Destructible");
 5839|       |
 5840|   205k|    constexpr bool non_reference_constraint =
 5841|   205k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5842|   205k|    static_assert(non_reference_constraint,
 5843|   205k|                  "Scan argument types must not be references");
 5844|       |
 5845|   205k|    constexpr bool movable_constraint =
 5846|   205k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5847|   205k|    static_assert(movable_constraint,
 5848|   205k|                  "Scan argument types must be move constructible");
 5849|       |
 5850|   205k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5850:12): [Folded - Ignored]
  |  Branch (5850:48): [Folded - Ignored]
  ------------------
 5851|   205k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5851:12): [Folded - Ignored]
  |  Branch (5851:40): [Folded - Ignored]
  ------------------
 5852|   205k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJaEEC2ERNSt3__15tupleIJaEEE:
 6090|   135k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|   135k|    {
 6092|   135k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJaEE12make_argptrsIJaEEENSt3__15arrayIPvLm1EEEDpRT_:
 6099|   135k|    {
 6100|   135k|        return {detail::make_arg<
 6101|   135k|            kind, Context,
 6102|   135k|            mapped_type_constant<remove_cvref_t<A>,
 6103|   135k|                                 typename Context::char_type>::value>(args)...};
 6104|   135k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE1EavEEPvRT2_:
 5879|   135k|{
 5880|   135k|    return make_value<Context>(value).ref_value;
 5881|   135k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEaEEDaRT0_:
 5814|   146k|{
 5815|   146k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|   146k|                                  needs_context_tag>) {
 5819|   146k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   146k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|   146k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERa:
 5653|   146k|    {                                                                        \
 5654|   146k|        return val;                                                          \
 5655|   146k|    }
_ZN3scn2v46detail15make_value_implIaRaEEDaOT0_:
 5783|   205k|{
 5784|   205k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5785|   205k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5786|       |
 5787|   205k|    constexpr bool scannable_char =
 5788|   205k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5789|   205k|    static_assert(scannable_char,
 5790|   205k|                  "Cannot scan an argument of an unsupported character "
 5791|   205k|                  "type (i.e. char from a wchar_t source)");
 5792|       |
 5793|   205k|    constexpr bool scannable_const =
 5794|   205k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5795|   205k|    static_assert(scannable_const, "Cannot scan a const argument");
 5796|       |
 5797|   205k|    constexpr bool scannable_disabled =
 5798|   205k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5799|   205k|    static_assert(scannable_disabled,
 5800|   205k|                  "Cannot scan an argument that has been disabled by "
 5801|   205k|                  "flag (SCN_DISABLE_TYPE_*)");
 5802|       |
 5803|   205k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5804|   205k|    static_assert(
 5805|   205k|        scannable,
 5806|   205k|        "Cannot scan an argument. To make a type T scannable, provide "
 5807|   205k|        "a scn::scanner<T, CharT> specialization.");
 5808|       |
 5809|   205k|    return arg_value{arg};
 5810|   205k|}
_ZN3scn2v46detail9arg_valueC2IaEERT_:
 5596|   205k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5597|   205k|    {
 5598|   205k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJaEE6valuesEv:
 6393|   191k|    {
 6394|   191k|        return m_values;
 6395|   191k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJaEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|   135k|        : basic_scan_args(store.desc, store.args.data())
 6141|   135k|    {
 6142|   135k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2EmPKPv:
 6192|   836k|        : m_desc(desc), m_builtin_values(data)
 6193|   836k|    {
 6194|   836k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3464|  4.15M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  4.15M|    static_cast<    \
  |  |  935|  4.15M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  4.15M|    static_cast<    \
  |  |  935|  4.15M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  4.15M|    {
 3466|  4.15M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 8443|   836k|{
 8444|   836k|    return s;
 8445|   836k|}
_ZN3scn2v46detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 8420|   836k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJaEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|  67.9k|        : m_str(r.str)
 8778|  67.9k|    {
 8779|  67.9k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEcvbEv:
 1739|  73.2k|    {
 1740|  73.2k|        return has_value();
 1741|  73.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEptEv:
 1814|   190k|    {
 1815|   190k|        return &value();
 1816|   190k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|   190k|    {
 1769|   190k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   190k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   190k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   190k|        return this->get_value();
 1771|   190k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 6473|   363k|    {
 6474|   363k|        return ranges::begin(m_range);
 6475|   363k|    }
_ZN3scn2v44scanIJaENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9773|  33.9k|{
 9774|  33.9k|    auto result = make_scan_result<Source, Args...>();
 9775|  33.9k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  33.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|  33.9k|                                   make_scan_args(result->values())));
 9777|  33.9k|    return result;
 9778|  33.9k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSI_16buffer_range_tagEcEEEE:
 9502|   209k|{
 9503|   209k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  936|   209k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9504|   209k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9437|   209k|{
 9438|   209k|#if !SCN_DISABLE_LOCALE
 9439|   209k|    auto buffer = detail::make_scan_buffer(range);
 9440|       |
 9441|   209k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9442|   209k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9443|   209k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9444|       |
 9445|   209k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   209k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 41.2k, False: 167k]
  |  |  ------------------
  ------------------
 9446|  41.2k|        return unexpected(result.error());
 9447|  41.2k|    }
 9448|   167k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9449|       |#else
 9450|       |    static_assert(dependent_false<Locale>::value,
 9451|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9452|       |
 9453|       |    return {};
 9454|       |#endif
 9455|   209k|}
_ZN3scn2v410scan_valueIaNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 9814|  5.29k|{
 9815|  5.29k|    auto result = make_scan_result<Source, T>();
 9816|  5.29k|    fill_scan_result(
 9817|  5.29k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  5.29k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9818|  5.29k|                            detail::make_arg<scan_context>(result->value())));
 9819|  5.29k|    return result;
 9820|  5.29k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9515|  31.8k|{
 9516|  31.8k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  936|  31.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9517|  31.8k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9461|  31.8k|{
 9462|  31.8k|    auto buffer = detail::make_scan_buffer(range);
 9463|       |
 9464|  31.8k|    auto result = detail::vscan_value_impl(buffer, arg);
 9465|  31.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  31.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.12k, False: 27.6k]
  |  |  ------------------
  ------------------
 9466|  4.12k|        return unexpected(result.error());
 9467|  4.12k|    }
 9468|  27.6k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  27.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9469|  31.8k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEaEENS0_14basic_scan_argIT_EERT0_:
 5864|  10.5k|{
 5865|  10.5k|    check_scan_arg_types<T>();
 5866|       |
 5867|  10.5k|    basic_scan_arg<Context> arg;
 5868|  10.5k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|  10.5k|    arg.m_value = make_value<Context>(value);
 5870|  10.5k|    return arg;
 5871|  10.5k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 5959|   899k|    constexpr basic_scan_arg() = default;
_ZN3scn2v46detail9arg_valueC2Ev:
 5593|  1.26M|    arg_value() = default;
_ZNR3scn2v46detail25scan_result_value_storageIJaEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6415|  13.4k|    {
 6416|  13.4k|        return std::get<0>(m_values);
 6417|  13.4k|    }
_ZN3scn2v44scanIJhENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9704|  29.9k|{
 9705|  29.9k|    auto result = make_scan_result<Source, Args...>();
 9706|  29.9k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|  29.9k|                                   make_scan_args(result->values())));
 9708|  29.9k|    return result;
 9709|  29.9k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJhEEEDav:
 9660|  64.2k|{
 9661|  64.2k|    return scan_result_type<Source, Args...>();
 9662|  64.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEC2Ev:
 1551|  64.2k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EEC2Ev:
  426|  64.2k|        : m_value(T{}), m_has_value(true)
  427|  64.2k|    {
  428|  64.2k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJhEEC2Ev:
 6610|  64.2k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJhEEC2Ev:
 6384|   187k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9645|  64.2k|{
 9646|  64.2k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  64.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.4k, False: 49.7k]
  |  |  ------------------
  ------------------
 9647|  14.4k|        out = unexpected(in.error());
 9648|  14.4k|    }
 9649|  49.7k|    else {
 9650|  49.7k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  49.7k|    static_cast<    \
  |  |  935|  49.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|  49.7k|    }
 9652|  64.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  14.4k|        : base(unexpect, std::move(e.error())),
 1616|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  14.4k|    {
 1618|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.4k|          m_has_value(false)
  451|  14.4k|    {
  452|  14.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  14.4k|    {
 1316|  14.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEaSEOSC_:
 1556|  14.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorEvEaSEOSD_:
  902|  14.4k|    {
  903|  14.4k|        assign_common(std::move(other));
  904|  14.4k|        return *this;
  905|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  14.4k|    {
  950|  14.4k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 14.4k, False: 0]
  ------------------
  951|  14.4k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 14.4k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  14.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  14.4k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   256k|    {
  490|   256k|        return m_has_value;
  491|   256k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   163k|    {
  456|   163k|        return m_value;
  457|   163k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  14.4k|    {
 1046|  14.4k|        this->destroy_value();
 1047|  14.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  14.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  14.4k|    {
  504|  14.4k|        scn::detail::construct_at(&get_unexpected(),
  505|  14.4k|                                  std::forward<Args>(args)...);
  506|  14.4k|        m_has_value = false;
  507|  14.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.4k|    {
  473|  14.4k|        return m_unexpected;
  474|  14.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  14.4k|    {
  481|  14.4k|        return std::move(m_unexpected);
  482|  14.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJhEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8782|  59.8k|    {
 8783|  59.8k|        return m_str;
 8784|  59.8k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJhEEEDaRNSt3__15tupleIJDpT0_EEE:
 6114|   119k|{
 6115|   119k|    detail::check_scan_arg_types<Args...>();
 6116|   119k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|   119k|}
_ZN3scn2v46detail20check_scan_arg_typesIJhEEEbv:
 5829|   187k|{
 5830|   187k|    constexpr bool default_constructible_constraint =
 5831|   187k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5832|   187k|    static_assert(default_constructible_constraint,
 5833|   187k|                  "Scan argument types must be default constructible");
 5834|       |
 5835|   187k|    constexpr bool destructible_constraint =
 5836|   187k|        std::conjunction_v<std::is_destructible<Args>...>;
 5837|   187k|    static_assert(destructible_constraint,
 5838|   187k|                  "Scan argument types must be Destructible");
 5839|       |
 5840|   187k|    constexpr bool non_reference_constraint =
 5841|   187k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5842|   187k|    static_assert(non_reference_constraint,
 5843|   187k|                  "Scan argument types must not be references");
 5844|       |
 5845|   187k|    constexpr bool movable_constraint =
 5846|   187k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5847|   187k|    static_assert(movable_constraint,
 5848|   187k|                  "Scan argument types must be move constructible");
 5849|       |
 5850|   187k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5850:12): [Folded - Ignored]
  |  Branch (5850:48): [Folded - Ignored]
  ------------------
 5851|   187k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5851:12): [Folded - Ignored]
  |  Branch (5851:40): [Folded - Ignored]
  ------------------
 5852|   187k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJhEEC2ERNSt3__15tupleIJhEEE:
 6090|   119k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|   119k|    {
 6092|   119k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJhEE12make_argptrsIJhEEENSt3__15arrayIPvLm1EEEDpRT_:
 6099|   119k|    {
 6100|   119k|        return {detail::make_arg<
 6101|   119k|            kind, Context,
 6102|   119k|            mapped_type_constant<remove_cvref_t<A>,
 6103|   119k|                                 typename Context::char_type>::value>(args)...};
 6104|   119k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE6EhvEEPvRT2_:
 5879|   119k|{
 5880|   119k|    return make_value<Context>(value).ref_value;
 5881|   119k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEhEEDaRT0_:
 5814|   128k|{
 5815|   128k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|   128k|                                  needs_context_tag>) {
 5819|   128k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|   128k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERh:
 5653|   128k|    {                                                                        \
 5654|   128k|        return val;                                                          \
 5655|   128k|    }
_ZN3scn2v46detail15make_value_implIhRhEEDaOT0_:
 5783|   187k|{
 5784|   187k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5785|   187k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5786|       |
 5787|   187k|    constexpr bool scannable_char =
 5788|   187k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5789|   187k|    static_assert(scannable_char,
 5790|   187k|                  "Cannot scan an argument of an unsupported character "
 5791|   187k|                  "type (i.e. char from a wchar_t source)");
 5792|       |
 5793|   187k|    constexpr bool scannable_const =
 5794|   187k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5795|   187k|    static_assert(scannable_const, "Cannot scan a const argument");
 5796|       |
 5797|   187k|    constexpr bool scannable_disabled =
 5798|   187k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5799|   187k|    static_assert(scannable_disabled,
 5800|   187k|                  "Cannot scan an argument that has been disabled by "
 5801|   187k|                  "flag (SCN_DISABLE_TYPE_*)");
 5802|       |
 5803|   187k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5804|   187k|    static_assert(
 5805|   187k|        scannable,
 5806|   187k|        "Cannot scan an argument. To make a type T scannable, provide "
 5807|   187k|        "a scn::scanner<T, CharT> specialization.");
 5808|       |
 5809|   187k|    return arg_value{arg};
 5810|   187k|}
_ZN3scn2v46detail9arg_valueC2IhEERT_:
 5596|   187k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5597|   187k|    {
 5598|   187k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJhEE6valuesEv:
 6393|   175k|    {
 6394|   175k|        return m_values;
 6395|   175k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJhEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|   119k|        : basic_scan_args(store.desc, store.args.data())
 6141|   119k|    {
 6142|   119k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJhEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|  59.8k|        : m_str(r.str)
 8778|  59.8k|    {
 8779|  59.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEcvbEv:
 1739|  64.2k|    {
 1740|  64.2k|        return has_value();
 1741|  64.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEptEv:
 1814|   163k|    {
 1815|   163k|        return &value();
 1816|   163k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|   163k|    {
 1769|   163k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   163k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   163k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   163k|        return this->get_value();
 1771|   163k|    }
_ZN3scn2v44scanIJhENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9773|  29.9k|{
 9774|  29.9k|    auto result = make_scan_result<Source, Args...>();
 9775|  29.9k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|  29.9k|                                   make_scan_args(result->values())));
 9777|  29.9k|    return result;
 9778|  29.9k|}
_ZN3scn2v410scan_valueIhNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 9814|  4.41k|{
 9815|  4.41k|    auto result = make_scan_result<Source, T>();
 9816|  4.41k|    fill_scan_result(
 9817|  4.41k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  4.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9818|  4.41k|                            detail::make_arg<scan_context>(result->value())));
 9819|  4.41k|    return result;
 9820|  4.41k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEhEENS0_14basic_scan_argIT_EERT0_:
 5864|  8.82k|{
 5865|  8.82k|    check_scan_arg_types<T>();
 5866|       |
 5867|  8.82k|    basic_scan_arg<Context> arg;
 5868|  8.82k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|  8.82k|    arg.m_value = make_value<Context>(value);
 5870|  8.82k|    return arg;
 5871|  8.82k|}
_ZNR3scn2v46detail25scan_result_value_storageIJhEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6415|  11.6k|    {
 6416|  11.6k|        return std::get<0>(m_values);
 6417|  11.6k|    }
_ZN3scn2v44scanIJiENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9704|  39.7k|{
 9705|  39.7k|    auto result = make_scan_result<Source, Args...>();
 9706|  39.7k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  39.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|  39.7k|                                   make_scan_args(result->values())));
 9708|  39.7k|    return result;
 9709|  39.7k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEEDav:
 9660|  85.6k|{
 9661|  85.6k|    return scan_result_type<Source, Args...>();
 9662|  85.6k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2Ev:
 1551|  85.6k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2Ev:
  426|  85.6k|        : m_value(T{}), m_has_value(true)
  427|  85.6k|    {
  428|  85.6k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEC2Ev:
 6610|  85.6k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJiEEC2Ev:
 6384|   232k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9645|  85.6k|{
 9646|  85.6k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  85.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.4k, False: 71.1k]
  |  |  ------------------
  ------------------
 9647|  14.4k|        out = unexpected(in.error());
 9648|  14.4k|    }
 9649|  71.1k|    else {
 9650|  71.1k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  71.1k|    static_cast<    \
  |  |  935|  71.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|  71.1k|    }
 9652|  85.6k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  14.4k|        : base(unexpect, std::move(e.error())),
 1616|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  14.4k|    {
 1618|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.4k|          m_has_value(false)
  451|  14.4k|    {
  452|  14.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  14.4k|    {
 1316|  14.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEaSEOSC_:
 1556|  14.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorEvEaSEOSD_:
  902|  14.4k|    {
  903|  14.4k|        assign_common(std::move(other));
  904|  14.4k|        return *this;
  905|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  14.4k|    {
  950|  14.4k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 14.4k, False: 0]
  ------------------
  951|  14.4k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 14.4k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  14.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  14.4k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   342k|    {
  490|   342k|        return m_has_value;
  491|   342k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   228k|    {
  456|   228k|        return m_value;
  457|   228k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  14.4k|    {
 1046|  14.4k|        this->destroy_value();
 1047|  14.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  14.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  14.4k|    {
  504|  14.4k|        scn::detail::construct_at(&get_unexpected(),
  505|  14.4k|                                  std::forward<Args>(args)...);
  506|  14.4k|        m_has_value = false;
  507|  14.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.4k|    {
  473|  14.4k|        return m_unexpected;
  474|  14.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  14.4k|    {
  481|  14.4k|        return std::move(m_unexpected);
  482|  14.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8782|  79.5k|    {
 8783|  79.5k|        return m_str;
 8784|  79.5k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJiEEEDaRNSt3__15tupleIJDpT0_EEE:
 6114|   158k|{
 6115|   158k|    detail::check_scan_arg_types<Args...>();
 6116|   158k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|   158k|}
_ZN3scn2v46detail20check_scan_arg_typesIJiEEEbv:
 5829|   232k|{
 5830|   232k|    constexpr bool default_constructible_constraint =
 5831|   232k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5832|   232k|    static_assert(default_constructible_constraint,
 5833|   232k|                  "Scan argument types must be default constructible");
 5834|       |
 5835|   232k|    constexpr bool destructible_constraint =
 5836|   232k|        std::conjunction_v<std::is_destructible<Args>...>;
 5837|   232k|    static_assert(destructible_constraint,
 5838|   232k|                  "Scan argument types must be Destructible");
 5839|       |
 5840|   232k|    constexpr bool non_reference_constraint =
 5841|   232k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5842|   232k|    static_assert(non_reference_constraint,
 5843|   232k|                  "Scan argument types must not be references");
 5844|       |
 5845|   232k|    constexpr bool movable_constraint =
 5846|   232k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5847|   232k|    static_assert(movable_constraint,
 5848|   232k|                  "Scan argument types must be move constructible");
 5849|       |
 5850|   232k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5850:12): [Folded - Ignored]
  |  Branch (5850:48): [Folded - Ignored]
  ------------------
 5851|   232k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5851:12): [Folded - Ignored]
  |  Branch (5851:40): [Folded - Ignored]
  ------------------
 5852|   232k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJiEEC2ERNSt3__15tupleIJiEEE:
 6090|   158k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|   158k|    {
 6092|   158k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 6099|   158k|    {
 6100|   158k|        return {detail::make_arg<
 6101|   158k|            kind, Context,
 6102|   158k|            mapped_type_constant<remove_cvref_t<A>,
 6103|   158k|                                 typename Context::char_type>::value>(args)...};
 6104|   158k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE3EivEEPvRT2_:
 5879|   158k|{
 5880|   158k|    return make_value<Context>(value).ref_value;
 5881|   158k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEiEEDaRT0_:
 5814|   170k|{
 5815|   170k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|   170k|                                  needs_context_tag>) {
 5819|   170k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   170k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|   170k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERi:
 5653|   170k|    {                                                                        \
 5654|   170k|        return val;                                                          \
 5655|   170k|    }
_ZN3scn2v46detail15make_value_implIiRiEEDaOT0_:
 5783|   232k|{
 5784|   232k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5785|   232k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5786|       |
 5787|   232k|    constexpr bool scannable_char =
 5788|   232k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5789|   232k|    static_assert(scannable_char,
 5790|   232k|                  "Cannot scan an argument of an unsupported character "
 5791|   232k|                  "type (i.e. char from a wchar_t source)");
 5792|       |
 5793|   232k|    constexpr bool scannable_const =
 5794|   232k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5795|   232k|    static_assert(scannable_const, "Cannot scan a const argument");
 5796|       |
 5797|   232k|    constexpr bool scannable_disabled =
 5798|   232k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5799|   232k|    static_assert(scannable_disabled,
 5800|   232k|                  "Cannot scan an argument that has been disabled by "
 5801|   232k|                  "flag (SCN_DISABLE_TYPE_*)");
 5802|       |
 5803|   232k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5804|   232k|    static_assert(
 5805|   232k|        scannable,
 5806|   232k|        "Cannot scan an argument. To make a type T scannable, provide "
 5807|   232k|        "a scn::scanner<T, CharT> specialization.");
 5808|       |
 5809|   232k|    return arg_value{arg};
 5810|   232k|}
_ZN3scn2v46detail9arg_valueC2IiEERT_:
 5596|   232k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5597|   232k|    {
 5598|   232k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJiEE6valuesEv:
 6393|   217k|    {
 6394|   217k|        return m_values;
 6395|   217k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJiEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|   158k|        : basic_scan_args(store.desc, store.args.data())
 6141|   158k|    {
 6142|   158k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|  79.5k|        : m_str(r.str)
 8778|  79.5k|    {
 8779|  79.5k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEcvbEv:
 1739|  85.6k|    {
 1740|  85.6k|        return has_value();
 1741|  85.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEptEv:
 1814|   228k|    {
 1815|   228k|        return &value();
 1816|   228k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|   228k|    {
 1769|   228k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   228k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   228k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   228k|        return this->get_value();
 1771|   228k|    }
_ZN3scn2v44scanIJiENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9773|  39.7k|{
 9774|  39.7k|    auto result = make_scan_result<Source, Args...>();
 9775|  39.7k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  39.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|  39.7k|                                   make_scan_args(result->values())));
 9777|  39.7k|    return result;
 9778|  39.7k|}
_ZN3scn2v410scan_valueIiNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 9814|  6.11k|{
 9815|  6.11k|    auto result = make_scan_result<Source, T>();
 9816|  6.11k|    fill_scan_result(
 9817|  6.11k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  6.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9818|  6.11k|                            detail::make_arg<scan_context>(result->value())));
 9819|  6.11k|    return result;
 9820|  6.11k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEiEENS0_14basic_scan_argIT_EERT0_:
 5864|  12.0k|{
 5865|  12.0k|    check_scan_arg_types<T>();
 5866|       |
 5867|  12.0k|    basic_scan_arg<Context> arg;
 5868|  12.0k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|  12.0k|    arg.m_value = make_value<Context>(value);
 5870|  12.0k|    return arg;
 5871|  12.0k|}
_ZNR3scn2v46detail25scan_result_value_storageIJiEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6415|  14.8k|    {
 6416|  14.8k|        return std::get<0>(m_values);
 6417|  14.8k|    }
_ZN3scn2v44scanIJjENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9704|  32.4k|{
 9705|  32.4k|    auto result = make_scan_result<Source, Args...>();
 9706|  32.4k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  32.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|  32.4k|                                   make_scan_args(result->values())));
 9708|  32.4k|    return result;
 9709|  32.4k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEEDav:
 9660|  69.6k|{
 9661|  69.6k|    return scan_result_type<Source, Args...>();
 9662|  69.6k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2Ev:
 1551|  69.6k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2Ev:
  426|  69.6k|        : m_value(T{}), m_has_value(true)
  427|  69.6k|    {
  428|  69.6k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEC2Ev:
 6610|  69.6k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJjEEC2Ev:
 6384|   200k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9645|  69.6k|{
 9646|  69.6k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  69.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.4k, False: 55.2k]
  |  |  ------------------
  ------------------
 9647|  14.4k|        out = unexpected(in.error());
 9648|  14.4k|    }
 9649|  55.2k|    else {
 9650|  55.2k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  55.2k|    static_cast<    \
  |  |  935|  55.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|  55.2k|    }
 9652|  69.6k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  14.4k|        : base(unexpect, std::move(e.error())),
 1616|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  14.4k|    {
 1618|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.4k|          m_has_value(false)
  451|  14.4k|    {
  452|  14.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  14.4k|    {
 1316|  14.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEaSEOSC_:
 1556|  14.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorEvEaSEOSD_:
  902|  14.4k|    {
  903|  14.4k|        assign_common(std::move(other));
  904|  14.4k|        return *this;
  905|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  14.4k|    {
  950|  14.4k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 14.4k, False: 0]
  ------------------
  951|  14.4k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 14.4k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  14.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  14.4k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   278k|    {
  490|   278k|        return m_has_value;
  491|   278k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   180k|    {
  456|   180k|        return m_value;
  457|   180k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  14.4k|    {
 1046|  14.4k|        this->destroy_value();
 1047|  14.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  14.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  14.4k|    {
  504|  14.4k|        scn::detail::construct_at(&get_unexpected(),
  505|  14.4k|                                  std::forward<Args>(args)...);
  506|  14.4k|        m_has_value = false;
  507|  14.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.4k|    {
  473|  14.4k|        return m_unexpected;
  474|  14.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  14.4k|    {
  481|  14.4k|        return std::move(m_unexpected);
  482|  14.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8782|  64.8k|    {
 8783|  64.8k|        return m_str;
 8784|  64.8k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJjEEEDaRNSt3__15tupleIJDpT0_EEE:
 6114|   129k|{
 6115|   129k|    detail::check_scan_arg_types<Args...>();
 6116|   129k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|   129k|}
_ZN3scn2v46detail20check_scan_arg_typesIJjEEEbv:
 5829|   200k|{
 5830|   200k|    constexpr bool default_constructible_constraint =
 5831|   200k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5832|   200k|    static_assert(default_constructible_constraint,
 5833|   200k|                  "Scan argument types must be default constructible");
 5834|       |
 5835|   200k|    constexpr bool destructible_constraint =
 5836|   200k|        std::conjunction_v<std::is_destructible<Args>...>;
 5837|   200k|    static_assert(destructible_constraint,
 5838|   200k|                  "Scan argument types must be Destructible");
 5839|       |
 5840|   200k|    constexpr bool non_reference_constraint =
 5841|   200k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5842|   200k|    static_assert(non_reference_constraint,
 5843|   200k|                  "Scan argument types must not be references");
 5844|       |
 5845|   200k|    constexpr bool movable_constraint =
 5846|   200k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5847|   200k|    static_assert(movable_constraint,
 5848|   200k|                  "Scan argument types must be move constructible");
 5849|       |
 5850|   200k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5850:12): [Folded - Ignored]
  |  Branch (5850:48): [Folded - Ignored]
  ------------------
 5851|   200k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5851:12): [Folded - Ignored]
  |  Branch (5851:40): [Folded - Ignored]
  ------------------
 5852|   200k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJjEEC2ERNSt3__15tupleIJjEEE:
 6090|   129k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|   129k|    {
 6092|   129k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 6099|   129k|    {
 6100|   129k|        return {detail::make_arg<
 6101|   129k|            kind, Context,
 6102|   129k|            mapped_type_constant<remove_cvref_t<A>,
 6103|   129k|                                 typename Context::char_type>::value>(args)...};
 6104|   129k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE8EjvEEPvRT2_:
 5879|   129k|{
 5880|   129k|    return make_value<Context>(value).ref_value;
 5881|   129k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEjEEDaRT0_:
 5814|   139k|{
 5815|   139k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|   139k|                                  needs_context_tag>) {
 5819|   139k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   139k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|   139k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERj:
 5653|   139k|    {                                                                        \
 5654|   139k|        return val;                                                          \
 5655|   139k|    }
_ZN3scn2v46detail15make_value_implIjRjEEDaOT0_:
 5783|   200k|{
 5784|   200k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5785|   200k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5786|       |
 5787|   200k|    constexpr bool scannable_char =
 5788|   200k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5789|   200k|    static_assert(scannable_char,
 5790|   200k|                  "Cannot scan an argument of an unsupported character "
 5791|   200k|                  "type (i.e. char from a wchar_t source)");
 5792|       |
 5793|   200k|    constexpr bool scannable_const =
 5794|   200k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5795|   200k|    static_assert(scannable_const, "Cannot scan a const argument");
 5796|       |
 5797|   200k|    constexpr bool scannable_disabled =
 5798|   200k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5799|   200k|    static_assert(scannable_disabled,
 5800|   200k|                  "Cannot scan an argument that has been disabled by "
 5801|   200k|                  "flag (SCN_DISABLE_TYPE_*)");
 5802|       |
 5803|   200k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5804|   200k|    static_assert(
 5805|   200k|        scannable,
 5806|   200k|        "Cannot scan an argument. To make a type T scannable, provide "
 5807|   200k|        "a scn::scanner<T, CharT> specialization.");
 5808|       |
 5809|   200k|    return arg_value{arg};
 5810|   200k|}
_ZN3scn2v46detail9arg_valueC2IjEERT_:
 5596|   200k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5597|   200k|    {
 5598|   200k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJjEE6valuesEv:
 6393|   188k|    {
 6394|   188k|        return m_values;
 6395|   188k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJjEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|   129k|        : basic_scan_args(store.desc, store.args.data())
 6141|   129k|    {
 6142|   129k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|  64.8k|        : m_str(r.str)
 8778|  64.8k|    {
 8779|  64.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEcvbEv:
 1739|  69.6k|    {
 1740|  69.6k|        return has_value();
 1741|  69.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEptEv:
 1814|   180k|    {
 1815|   180k|        return &value();
 1816|   180k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|   180k|    {
 1769|   180k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   180k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   180k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   180k|        return this->get_value();
 1771|   180k|    }
_ZN3scn2v44scanIJjENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9773|  32.4k|{
 9774|  32.4k|    auto result = make_scan_result<Source, Args...>();
 9775|  32.4k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  32.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|  32.4k|                                   make_scan_args(result->values())));
 9777|  32.4k|    return result;
 9778|  32.4k|}
_ZN3scn2v410scan_valueIjNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 9814|  4.85k|{
 9815|  4.85k|    auto result = make_scan_result<Source, T>();
 9816|  4.85k|    fill_scan_result(
 9817|  4.85k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  4.85k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9818|  4.85k|                            detail::make_arg<scan_context>(result->value())));
 9819|  4.85k|    return result;
 9820|  4.85k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEjEENS0_14basic_scan_argIT_EERT0_:
 5864|  9.68k|{
 5865|  9.68k|    check_scan_arg_types<T>();
 5866|       |
 5867|  9.68k|    basic_scan_arg<Context> arg;
 5868|  9.68k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|  9.68k|    arg.m_value = make_value<Context>(value);
 5870|  9.68k|    return arg;
 5871|  9.68k|}
_ZNR3scn2v46detail25scan_result_value_storageIJjEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6415|  12.5k|    {
 6416|  12.5k|        return std::get<0>(m_values);
 6417|  12.5k|    }
_ZN3scn2v44scanIJxENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9704|  40.4k|{
 9705|  40.4k|    auto result = make_scan_result<Source, Args...>();
 9706|  40.4k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  40.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|  40.4k|                                   make_scan_args(result->values())));
 9708|  40.4k|    return result;
 9709|  40.4k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJxEEEDav:
 9660|  87.1k|{
 9661|  87.1k|    return scan_result_type<Source, Args...>();
 9662|  87.1k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEC2Ev:
 1551|  87.1k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EEC2Ev:
  426|  87.1k|        : m_value(T{}), m_has_value(true)
  427|  87.1k|    {
  428|  87.1k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJxEEC2Ev:
 6610|  87.1k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJxEEC2Ev:
 6384|   235k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9645|  87.1k|{
 9646|  87.1k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  87.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.4k, False: 72.6k]
  |  |  ------------------
  ------------------
 9647|  14.4k|        out = unexpected(in.error());
 9648|  14.4k|    }
 9649|  72.6k|    else {
 9650|  72.6k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  72.6k|    static_cast<    \
  |  |  935|  72.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|  72.6k|    }
 9652|  87.1k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  14.4k|        : base(unexpect, std::move(e.error())),
 1616|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  14.4k|    {
 1618|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.4k|          m_has_value(false)
  451|  14.4k|    {
  452|  14.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  14.4k|    {
 1316|  14.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEaSEOSC_:
 1556|  14.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorEvEaSEOSD_:
  902|  14.4k|    {
  903|  14.4k|        assign_common(std::move(other));
  904|  14.4k|        return *this;
  905|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  14.4k|    {
  950|  14.4k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 14.4k, False: 0]
  ------------------
  951|  14.4k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 14.4k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  14.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  14.4k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   348k|    {
  490|   348k|        return m_has_value;
  491|   348k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   232k|    {
  456|   232k|        return m_value;
  457|   232k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  14.4k|    {
 1046|  14.4k|        this->destroy_value();
 1047|  14.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  14.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  14.4k|    {
  504|  14.4k|        scn::detail::construct_at(&get_unexpected(),
  505|  14.4k|                                  std::forward<Args>(args)...);
  506|  14.4k|        m_has_value = false;
  507|  14.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.4k|    {
  473|  14.4k|        return m_unexpected;
  474|  14.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  14.4k|    {
  481|  14.4k|        return std::move(m_unexpected);
  482|  14.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJxEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8782|  80.8k|    {
 8783|  80.8k|        return m_str;
 8784|  80.8k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJxEEEDaRNSt3__15tupleIJDpT0_EEE:
 6114|   161k|{
 6115|   161k|    detail::check_scan_arg_types<Args...>();
 6116|   161k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|   161k|}
_ZN3scn2v46detail20check_scan_arg_typesIJxEEEbv:
 5829|   235k|{
 5830|   235k|    constexpr bool default_constructible_constraint =
 5831|   235k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5832|   235k|    static_assert(default_constructible_constraint,
 5833|   235k|                  "Scan argument types must be default constructible");
 5834|       |
 5835|   235k|    constexpr bool destructible_constraint =
 5836|   235k|        std::conjunction_v<std::is_destructible<Args>...>;
 5837|   235k|    static_assert(destructible_constraint,
 5838|   235k|                  "Scan argument types must be Destructible");
 5839|       |
 5840|   235k|    constexpr bool non_reference_constraint =
 5841|   235k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5842|   235k|    static_assert(non_reference_constraint,
 5843|   235k|                  "Scan argument types must not be references");
 5844|       |
 5845|   235k|    constexpr bool movable_constraint =
 5846|   235k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5847|   235k|    static_assert(movable_constraint,
 5848|   235k|                  "Scan argument types must be move constructible");
 5849|       |
 5850|   235k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5850:12): [Folded - Ignored]
  |  Branch (5850:48): [Folded - Ignored]
  ------------------
 5851|   235k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5851:12): [Folded - Ignored]
  |  Branch (5851:40): [Folded - Ignored]
  ------------------
 5852|   235k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJxEEC2ERNSt3__15tupleIJxEEE:
 6090|   161k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|   161k|    {
 6092|   161k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJxEE12make_argptrsIJxEEENSt3__15arrayIPvLm1EEEDpRT_:
 6099|   161k|    {
 6100|   161k|        return {detail::make_arg<
 6101|   161k|            kind, Context,
 6102|   161k|            mapped_type_constant<remove_cvref_t<A>,
 6103|   161k|                                 typename Context::char_type>::value>(args)...};
 6104|   161k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE5ExvEEPvRT2_:
 5879|   161k|{
 5880|   161k|    return make_value<Context>(value).ref_value;
 5881|   161k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEExEEDaRT0_:
 5814|   173k|{
 5815|   173k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|   173k|                                  needs_context_tag>) {
 5819|   173k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   173k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|   173k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERx:
 5653|   173k|    {                                                                        \
 5654|   173k|        return val;                                                          \
 5655|   173k|    }
_ZN3scn2v46detail15make_value_implIxRxEEDaOT0_:
 5783|   235k|{
 5784|   235k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5785|   235k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5786|       |
 5787|   235k|    constexpr bool scannable_char =
 5788|   235k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5789|   235k|    static_assert(scannable_char,
 5790|   235k|                  "Cannot scan an argument of an unsupported character "
 5791|   235k|                  "type (i.e. char from a wchar_t source)");
 5792|       |
 5793|   235k|    constexpr bool scannable_const =
 5794|   235k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5795|   235k|    static_assert(scannable_const, "Cannot scan a const argument");
 5796|       |
 5797|   235k|    constexpr bool scannable_disabled =
 5798|   235k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5799|   235k|    static_assert(scannable_disabled,
 5800|   235k|                  "Cannot scan an argument that has been disabled by "
 5801|   235k|                  "flag (SCN_DISABLE_TYPE_*)");
 5802|       |
 5803|   235k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5804|   235k|    static_assert(
 5805|   235k|        scannable,
 5806|   235k|        "Cannot scan an argument. To make a type T scannable, provide "
 5807|   235k|        "a scn::scanner<T, CharT> specialization.");
 5808|       |
 5809|   235k|    return arg_value{arg};
 5810|   235k|}
_ZN3scn2v46detail9arg_valueC2IxEERT_:
 5596|   235k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5597|   235k|    {
 5598|   235k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJxEE6valuesEv:
 6393|   220k|    {
 6394|   220k|        return m_values;
 6395|   220k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJxEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|   161k|        : basic_scan_args(store.desc, store.args.data())
 6141|   161k|    {
 6142|   161k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJxEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|  80.8k|        : m_str(r.str)
 8778|  80.8k|    {
 8779|  80.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEcvbEv:
 1739|  87.1k|    {
 1740|  87.1k|        return has_value();
 1741|  87.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEptEv:
 1814|   232k|    {
 1815|   232k|        return &value();
 1816|   232k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|   232k|    {
 1769|   232k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   232k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   232k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   232k|        return this->get_value();
 1771|   232k|    }
_ZN3scn2v44scanIJxENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9773|  40.4k|{
 9774|  40.4k|    auto result = make_scan_result<Source, Args...>();
 9775|  40.4k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  40.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|  40.4k|                                   make_scan_args(result->values())));
 9777|  40.4k|    return result;
 9778|  40.4k|}
_ZN3scn2v410scan_valueIxNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 9814|  6.22k|{
 9815|  6.22k|    auto result = make_scan_result<Source, T>();
 9816|  6.22k|    fill_scan_result(
 9817|  6.22k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  6.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9818|  6.22k|                            detail::make_arg<scan_context>(result->value())));
 9819|  6.22k|    return result;
 9820|  6.22k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEExEENS0_14basic_scan_argIT_EERT0_:
 5864|  12.2k|{
 5865|  12.2k|    check_scan_arg_types<T>();
 5866|       |
 5867|  12.2k|    basic_scan_arg<Context> arg;
 5868|  12.2k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|  12.2k|    arg.m_value = make_value<Context>(value);
 5870|  12.2k|    return arg;
 5871|  12.2k|}
_ZNR3scn2v46detail25scan_result_value_storageIJxEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6415|  15.1k|    {
 6416|  15.1k|        return std::get<0>(m_values);
 6417|  15.1k|    }
_ZN3scn2v44scanIJyENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9704|  32.7k|{
 9705|  32.7k|    auto result = make_scan_result<Source, Args...>();
 9706|  32.7k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  32.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|  32.7k|                                   make_scan_args(result->values())));
 9708|  32.7k|    return result;
 9709|  32.7k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJyEEEDav:
 9660|  70.4k|{
 9661|  70.4k|    return scan_result_type<Source, Args...>();
 9662|  70.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEC2Ev:
 1551|  70.4k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EEC2Ev:
  426|  70.4k|        : m_value(T{}), m_has_value(true)
  427|  70.4k|    {
  428|  70.4k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJyEEC2Ev:
 6610|  70.4k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJyEEC2Ev:
 6384|   202k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9645|  70.4k|{
 9646|  70.4k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  70.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.4k, False: 56.0k]
  |  |  ------------------
  ------------------
 9647|  14.4k|        out = unexpected(in.error());
 9648|  14.4k|    }
 9649|  56.0k|    else {
 9650|  56.0k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  56.0k|    static_cast<    \
  |  |  935|  56.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|  56.0k|    }
 9652|  70.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  14.4k|        : base(unexpect, std::move(e.error())),
 1616|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  14.4k|    {
 1618|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.4k|          m_has_value(false)
  451|  14.4k|    {
  452|  14.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  14.4k|    {
 1316|  14.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEaSEOSC_:
 1556|  14.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorEvEaSEOSD_:
  902|  14.4k|    {
  903|  14.4k|        assign_common(std::move(other));
  904|  14.4k|        return *this;
  905|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  14.4k|    {
  950|  14.4k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 14.4k, False: 0]
  ------------------
  951|  14.4k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 14.4k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  14.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  14.4k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   281k|    {
  490|   281k|        return m_has_value;
  491|   281k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   182k|    {
  456|   182k|        return m_value;
  457|   182k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  14.4k|    {
 1046|  14.4k|        this->destroy_value();
 1047|  14.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  14.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  14.4k|    {
  504|  14.4k|        scn::detail::construct_at(&get_unexpected(),
  505|  14.4k|                                  std::forward<Args>(args)...);
  506|  14.4k|        m_has_value = false;
  507|  14.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.4k|    {
  473|  14.4k|        return m_unexpected;
  474|  14.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  14.4k|    {
  481|  14.4k|        return std::move(m_unexpected);
  482|  14.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJyEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8782|  65.5k|    {
 8783|  65.5k|        return m_str;
 8784|  65.5k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJyEEEDaRNSt3__15tupleIJDpT0_EEE:
 6114|   131k|{
 6115|   131k|    detail::check_scan_arg_types<Args...>();
 6116|   131k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|   131k|}
_ZN3scn2v46detail20check_scan_arg_typesIJyEEEbv:
 5829|   202k|{
 5830|   202k|    constexpr bool default_constructible_constraint =
 5831|   202k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5832|   202k|    static_assert(default_constructible_constraint,
 5833|   202k|                  "Scan argument types must be default constructible");
 5834|       |
 5835|   202k|    constexpr bool destructible_constraint =
 5836|   202k|        std::conjunction_v<std::is_destructible<Args>...>;
 5837|   202k|    static_assert(destructible_constraint,
 5838|   202k|                  "Scan argument types must be Destructible");
 5839|       |
 5840|   202k|    constexpr bool non_reference_constraint =
 5841|   202k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5842|   202k|    static_assert(non_reference_constraint,
 5843|   202k|                  "Scan argument types must not be references");
 5844|       |
 5845|   202k|    constexpr bool movable_constraint =
 5846|   202k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5847|   202k|    static_assert(movable_constraint,
 5848|   202k|                  "Scan argument types must be move constructible");
 5849|       |
 5850|   202k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5850:12): [Folded - Ignored]
  |  Branch (5850:48): [Folded - Ignored]
  ------------------
 5851|   202k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5851:12): [Folded - Ignored]
  |  Branch (5851:40): [Folded - Ignored]
  ------------------
 5852|   202k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJyEEC2ERNSt3__15tupleIJyEEE:
 6090|   131k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|   131k|    {
 6092|   131k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJyEE12make_argptrsIJyEEENSt3__15arrayIPvLm1EEEDpRT_:
 6099|   131k|    {
 6100|   131k|        return {detail::make_arg<
 6101|   131k|            kind, Context,
 6102|   131k|            mapped_type_constant<remove_cvref_t<A>,
 6103|   131k|                                 typename Context::char_type>::value>(args)...};
 6104|   131k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE10EyvEEPvRT2_:
 5879|   131k|{
 5880|   131k|    return make_value<Context>(value).ref_value;
 5881|   131k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEyEEDaRT0_:
 5814|   140k|{
 5815|   140k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|   140k|                                  needs_context_tag>) {
 5819|   140k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   140k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|   140k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERy:
 5653|   140k|    {                                                                        \
 5654|   140k|        return val;                                                          \
 5655|   140k|    }
_ZN3scn2v46detail15make_value_implIyRyEEDaOT0_:
 5783|   202k|{
 5784|   202k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5785|   202k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5786|       |
 5787|   202k|    constexpr bool scannable_char =
 5788|   202k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5789|   202k|    static_assert(scannable_char,
 5790|   202k|                  "Cannot scan an argument of an unsupported character "
 5791|   202k|                  "type (i.e. char from a wchar_t source)");
 5792|       |
 5793|   202k|    constexpr bool scannable_const =
 5794|   202k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5795|   202k|    static_assert(scannable_const, "Cannot scan a const argument");
 5796|       |
 5797|   202k|    constexpr bool scannable_disabled =
 5798|   202k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5799|   202k|    static_assert(scannable_disabled,
 5800|   202k|                  "Cannot scan an argument that has been disabled by "
 5801|   202k|                  "flag (SCN_DISABLE_TYPE_*)");
 5802|       |
 5803|   202k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5804|   202k|    static_assert(
 5805|   202k|        scannable,
 5806|   202k|        "Cannot scan an argument. To make a type T scannable, provide "
 5807|   202k|        "a scn::scanner<T, CharT> specialization.");
 5808|       |
 5809|   202k|    return arg_value{arg};
 5810|   202k|}
_ZN3scn2v46detail9arg_valueC2IyEERT_:
 5596|   202k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5597|   202k|    {
 5598|   202k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJyEE6valuesEv:
 6393|   189k|    {
 6394|   189k|        return m_values;
 6395|   189k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJyEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|   131k|        : basic_scan_args(store.desc, store.args.data())
 6141|   131k|    {
 6142|   131k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJyEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|  65.5k|        : m_str(r.str)
 8778|  65.5k|    {
 8779|  65.5k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEcvbEv:
 1739|  70.4k|    {
 1740|  70.4k|        return has_value();
 1741|  70.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEptEv:
 1814|   182k|    {
 1815|   182k|        return &value();
 1816|   182k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|   182k|    {
 1769|   182k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   182k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   182k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   182k|        return this->get_value();
 1771|   182k|    }
_ZN3scn2v44scanIJyENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9773|  32.7k|{
 9774|  32.7k|    auto result = make_scan_result<Source, Args...>();
 9775|  32.7k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  32.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|  32.7k|                                   make_scan_args(result->values())));
 9777|  32.7k|    return result;
 9778|  32.7k|}
_ZN3scn2v410scan_valueIyNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 9814|  4.91k|{
 9815|  4.91k|    auto result = make_scan_result<Source, T>();
 9816|  4.91k|    fill_scan_result(
 9817|  4.91k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  4.91k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9818|  4.91k|                            detail::make_arg<scan_context>(result->value())));
 9819|  4.91k|    return result;
 9820|  4.91k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEyEENS0_14basic_scan_argIT_EERT0_:
 5864|  9.81k|{
 5865|  9.81k|    check_scan_arg_types<T>();
 5866|       |
 5867|  9.81k|    basic_scan_arg<Context> arg;
 5868|  9.81k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|  9.81k|    arg.m_value = make_value<Context>(value);
 5870|  9.81k|    return arg;
 5871|  9.81k|}
_ZNR3scn2v46detail25scan_result_value_storageIJyEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6415|  12.6k|    {
 6416|  12.6k|        return std::get<0>(m_values);
 6417|  12.6k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  86.6k|    {
 2869|  86.6k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  86.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  86.6k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  86.6k|    {
 2850|  86.6k|        return decay_copy(t.begin());
 2851|  86.6k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 2093|  9.22M|{
 2094|  9.22M|    return SCN_FWD(t);
  ------------------
  |  |  936|  9.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  9.22M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   898k|    {
 2926|   898k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   898k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   898k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   898k|    {
 2908|   898k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   898k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   898k|    }
_ZN3scn2v44scanIJaENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9704|  33.9k|{
 9705|  33.9k|    auto result = make_scan_result<Source, Args...>();
 9706|  33.9k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  33.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|  33.9k|                                   make_scan_args(result->values())));
 9708|  33.9k|    return result;
 9709|  33.9k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJaEEEDav:
 9660|  73.2k|{
 9661|  73.2k|    return scan_result_type<Source, Args...>();
 9662|  73.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEC2Ev:
 1551|  73.2k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EEC2Ev:
  426|  73.2k|        : m_value(T{}), m_has_value(true)
  427|  73.2k|    {
  428|  73.2k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJaEEC2Ev:
 6610|  73.2k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2Ev:
 6453|   449k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2Ev:
 3459|   449k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9645|  73.2k|{
 9646|  73.2k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  73.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.4k, False: 58.7k]
  |  |  ------------------
  ------------------
 9647|  14.4k|        out = unexpected(in.error());
 9648|  14.4k|    }
 9649|  58.7k|    else {
 9650|  58.7k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  58.7k|    static_cast<    \
  |  |  935|  58.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|  58.7k|    }
 9652|  73.2k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1739|   449k|    {
 1740|   449k|        return has_value();
 1741|   449k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   898k|    {
  490|   898k|        return m_has_value;
  491|   898k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1745|  86.6k|    {
 1746|  86.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  86.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  86.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  86.6k|        return this->get_unexpected().error();
 1748|  86.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  86.6k|    {
  473|  86.6k|        return m_unexpected;
  474|  86.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  14.4k|        : base(unexpect, std::move(e.error())),
 1616|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  14.4k|    {
 1618|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.4k|          m_has_value(false)
  451|  14.4k|    {
  452|  14.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  14.4k|    {
 1316|  14.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEaSEOSI_:
 1556|  14.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorEvEaSEOSJ_:
  902|  14.4k|    {
  903|  14.4k|        assign_common(std::move(other));
  904|  14.4k|        return *this;
  905|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  14.4k|    {
  950|  14.4k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 14.4k, False: 0]
  ------------------
  951|  14.4k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 14.4k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  14.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  14.4k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   292k|    {
  490|   292k|        return m_has_value;
  491|   292k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   190k|    {
  456|   190k|        return m_value;
  457|   190k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  14.4k|    {
 1046|  14.4k|        this->destroy_value();
 1047|  14.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  14.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  14.4k|    {
  504|  14.4k|        scn::detail::construct_at(&get_unexpected(),
  505|  14.4k|                                  std::forward<Args>(args)...);
  506|  14.4k|        m_has_value = false;
  507|  14.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.4k|    {
  473|  14.4k|        return m_unexpected;
  474|  14.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  14.4k|    {
  481|  14.4k|        return std::move(m_unexpected);
  482|  14.4k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE9set_rangeISF_EEvOT_:
 6484|   362k|    {
 6485|   362k|        m_range = std::forward<Other>(r);
 6486|   362k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1794|   362k|    {
 1795|   362k|        return value();
 1796|   362k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1768|   362k|    {
 1769|   362k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   362k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   362k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   362k|        return this->get_value();
 1771|   362k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  455|   362k|    {
  456|   362k|        return m_value;
  457|   362k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9484|   209k|{
 9485|   209k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  936|   209k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9486|   209k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9421|   209k|{
 9422|   209k|    auto buffer = make_scan_buffer(range);
 9423|       |
 9424|   209k|    auto result = vscan_impl(buffer, format, args);
 9425|   209k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   209k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 41.2k, False: 167k]
  |  |  ------------------
  ------------------
 9426|  41.2k|        return unexpected(result.error());
 9427|  41.2k|    }
 9428|   167k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9429|   209k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5380|   449k|{
 5381|   449k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|   449k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|   449k|                  "\n"
 5385|   449k|                  "Unsupported range type given as input to a scanning "
 5386|   449k|                  "function.\n"
 5387|   449k|                  "A range needs to have a character type (value type) "
 5388|   449k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|   449k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|   449k|                  "to be included.\n"
 5391|   449k|                  "See the scnlib documentation for more details.");
 5392|   449k|    static_assert(
 5393|   449k|        !std::is_same_v<T, custom_char_traits>,
 5394|   449k|        "\n"
 5395|   449k|        "Unsupported range type given as input to a scanning "
 5396|   449k|        "function.\n"
 5397|   449k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|   449k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|   449k|        "not supported.");
 5400|   449k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|   449k|                  "\n"
 5402|   449k|                  "Unsupported range type given as input to a scanning "
 5403|   449k|                  "function.\n"
 5404|   449k|                  "file_marker_found cannot be used as an "
 5405|   449k|                  "source range type to scn::scan.\n"
 5406|   449k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|   449k|                  "and do not provide an explicit source range, "
 5408|   449k|                  "or use scn::scan with a FILE* directly.");
 5409|   449k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|   449k|                  "\n"
 5411|   449k|                  "Unsupported range type given as input to a scanning "
 5412|   449k|                  "function.\n"
 5413|   449k|                  "In order to be scannable, a range needs to satisfy "
 5414|   449k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|   449k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|   449k|                  "\n"
 5417|   449k|                  "Unsupported range type given as input to a scanning "
 5418|   449k|                  "function.\n"
 5419|   449k|                  "A range needs to model forward_range and have a valid "
 5420|   449k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|   449k|                  "Examples of scannable ranges are std::string, "
 5422|   449k|                  "std::string_view, "
 5423|   449k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|   449k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|   449k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|   449k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5350|   449k|{
 5351|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5352|       |        return file_marker_found{};
 5353|       |    }
 5354|       |    else if constexpr (!ranges::forward_range<Range>) {
 5355|       |        if constexpr (ranges::range<Range>) {
 5356|       |            return insufficient_range{};
 5357|       |        }
 5358|       |        else {
 5359|       |            return invalid_input_range{};
 5360|       |        }
 5361|       |    }
 5362|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5363|       |        return invalid_char_type{};
 5364|       |    }
 5365|   449k|    else {
 5366|   449k|        return make_forward_scan_buffer(r);
 5367|   449k|    }
 5368|   449k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5184|   449k|{
 5185|   449k|    return basic_scan_forward_buffer_impl(range);
 5186|   449k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4764|   449k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  936|   449k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4765|   449k|          m_cursor(ranges::begin(*m_range))
 4766|   449k|    {
 4767|   449k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4736|   449k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4737|   449k|    {
 4738|   449k|    }
_ZN3scn2v46detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4427|   449k|        : m_current_view(sv), m_is_contiguous(false)
 4428|   449k|    {
 4429|   449k|    }
_ZN3scn2v46detail17basic_scan_bufferIcED2Ev:
 4340|   449k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   812k|    {
 2869|   812k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   812k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   812k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   812k|    {
 2850|   812k|        return decay_copy(t.begin());
 2851|   812k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3479|  1.17M|    {
 3480|  1.17M|        return m_iterator;
 3481|  1.17M|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4770|  2.32M|    {
 4771|  2.32M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4771:13): [True: 143k, False: 2.18M]
  ------------------
 4772|   143k|            return false;
 4773|   143k|        }
 4774|  2.18M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4775|  2.18M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  930|  2.18M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.18M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4776|  2.18M|        }
 4777|  2.18M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4777:13): [True: 1.76M, False: 416k]
  ------------------
 4778|  1.76M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4779|  1.76M|                                          this->m_current_view.begin(),
 4780|  1.76M|                                          this->m_current_view.end());
 4781|  1.76M|        }
 4782|  2.18M|        m_latest = *m_cursor;
 4783|  2.18M|        ++m_cursor;
 4784|  2.18M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4785|  2.18M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4786|  2.18M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  930|  2.18M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.18M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4787|  2.18M|        }
 4788|  2.18M|        return true;
 4789|  2.32M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  6.69M|    {
 2926|  6.69M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  6.69M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  6.69M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  6.69M|    {
 2908|  6.69M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  6.69M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  6.69M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3483|  7.05M|    {
 3484|  7.05M|        return m_sentinel;
 3485|  7.05M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE4syncEl:
 4345|   449k|    {
 4346|   449k|        SCN_UNUSED(position);
  ------------------
  |  |  915|   449k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4347|   449k|        return true;
 4348|   449k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1615|  86.6k|        : base(unexpect, std::move(e.error())),
 1616|  86.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  86.6k|    {
 1618|  86.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  449|  86.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  86.6k|          m_has_value(false)
  451|  86.6k|    {
  452|  86.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   449k|    {
 1316|   449k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6714|   362k|{
 6715|       |    if constexpr (ranges::random_access_iterator<
 6716|   362k|                      ranges::iterator_t<SourceRange>>) {
 6717|   362k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6718|       |    }
 6719|       |    else {
 6720|       |        auto it = ranges::begin(source);
 6721|       |        while (n > 0) {
 6722|       |            --n;
 6723|       |            ++it;
 6724|       |        }
 6725|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6726|       |    }
 6727|   362k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   362k|    {
 2869|   362k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   362k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   362k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   362k|    {
 2850|   362k|        return decay_copy(t.begin());
 2851|   362k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 6701|   362k|{
 6702|   362k|    return ranges::end(source);
 6703|   362k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   362k|    {
 2926|   362k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   362k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   362k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   362k|    {
 2908|   362k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   362k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   362k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1569|   362k|        : base(std::in_place, std::forward<U>(val)),
 1570|   362k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   362k|    {
 1572|   362k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  440|   362k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   362k|    {
  442|   362k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJaEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8782|  67.9k|    {
 8783|  67.9k|        return m_str;
 8784|  67.9k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3464|   812k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   812k|    static_cast<    \
  |  |  935|   812k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   812k|    static_cast<    \
  |  |  935|   812k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   812k|    {
 3466|   812k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJaEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|  67.9k|        : m_str(r.str)
 8778|  67.9k|    {
 8779|  67.9k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEcvbEv:
 1739|  73.2k|    {
 1740|  73.2k|        return has_value();
 1741|  73.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEptEv:
 1814|   190k|    {
 1815|   190k|        return &value();
 1816|   190k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|   190k|    {
 1769|   190k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   190k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   190k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   190k|        return this->get_value();
 1771|   190k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 6473|   362k|    {
 6474|   362k|        return ranges::begin(m_range);
 6475|   362k|    }
_ZN3scn2v44scanIJaENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9773|  33.9k|{
 9774|  33.9k|    auto result = make_scan_result<Source, Args...>();
 9775|  33.9k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  33.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|  33.9k|                                   make_scan_args(result->values())));
 9777|  33.9k|    return result;
 9778|  33.9k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSN_16buffer_range_tagEcEEEE:
 9502|   209k|{
 9503|   209k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  936|   209k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9504|   209k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9437|   209k|{
 9438|   209k|#if !SCN_DISABLE_LOCALE
 9439|   209k|    auto buffer = detail::make_scan_buffer(range);
 9440|       |
 9441|   209k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9442|   209k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9443|   209k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9444|       |
 9445|   209k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   209k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 41.2k, False: 167k]
  |  |  ------------------
  ------------------
 9446|  41.2k|        return unexpected(result.error());
 9447|  41.2k|    }
 9448|   167k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9449|       |#else
 9450|       |    static_assert(dependent_false<Locale>::value,
 9451|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9452|       |
 9453|       |    return {};
 9454|       |#endif
 9455|   209k|}
_ZN3scn2v410scan_valueIaNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 9814|  5.28k|{
 9815|  5.28k|    auto result = make_scan_result<Source, T>();
 9816|  5.28k|    fill_scan_result(
 9817|  5.28k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  5.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9818|  5.28k|                            detail::make_arg<scan_context>(result->value())));
 9819|  5.28k|    return result;
 9820|  5.28k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9515|  31.3k|{
 9516|  31.3k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  936|  31.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9517|  31.3k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9461|  31.3k|{
 9462|  31.3k|    auto buffer = detail::make_scan_buffer(range);
 9463|       |
 9464|  31.3k|    auto result = detail::vscan_value_impl(buffer, arg);
 9465|  31.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  31.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.12k, False: 27.2k]
  |  |  ------------------
  ------------------
 9466|  4.12k|        return unexpected(result.error());
 9467|  4.12k|    }
 9468|  27.2k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  27.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9469|  31.3k|}
_ZN3scn2v44scanIJhENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9704|  29.9k|{
 9705|  29.9k|    auto result = make_scan_result<Source, Args...>();
 9706|  29.9k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|  29.9k|                                   make_scan_args(result->values())));
 9708|  29.9k|    return result;
 9709|  29.9k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJhEEEDav:
 9660|  64.2k|{
 9661|  64.2k|    return scan_result_type<Source, Args...>();
 9662|  64.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEC2Ev:
 1551|  64.2k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EEC2Ev:
  426|  64.2k|        : m_value(T{}), m_has_value(true)
  427|  64.2k|    {
  428|  64.2k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJhEEC2Ev:
 6610|  64.2k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9645|  64.2k|{
 9646|  64.2k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  64.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.4k, False: 49.7k]
  |  |  ------------------
  ------------------
 9647|  14.4k|        out = unexpected(in.error());
 9648|  14.4k|    }
 9649|  49.7k|    else {
 9650|  49.7k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  49.7k|    static_cast<    \
  |  |  935|  49.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|  49.7k|    }
 9652|  64.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  14.4k|        : base(unexpect, std::move(e.error())),
 1616|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  14.4k|    {
 1618|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.4k|          m_has_value(false)
  451|  14.4k|    {
  452|  14.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  14.4k|    {
 1316|  14.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEaSEOSI_:
 1556|  14.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorEvEaSEOSJ_:
  902|  14.4k|    {
  903|  14.4k|        assign_common(std::move(other));
  904|  14.4k|        return *this;
  905|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  14.4k|    {
  950|  14.4k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 14.4k, False: 0]
  ------------------
  951|  14.4k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 14.4k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  14.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  14.4k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   256k|    {
  490|   256k|        return m_has_value;
  491|   256k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   163k|    {
  456|   163k|        return m_value;
  457|   163k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  14.4k|    {
 1046|  14.4k|        this->destroy_value();
 1047|  14.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  14.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  14.4k|    {
  504|  14.4k|        scn::detail::construct_at(&get_unexpected(),
  505|  14.4k|                                  std::forward<Args>(args)...);
  506|  14.4k|        m_has_value = false;
  507|  14.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.4k|    {
  473|  14.4k|        return m_unexpected;
  474|  14.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  14.4k|    {
  481|  14.4k|        return std::move(m_unexpected);
  482|  14.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJhEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8782|  59.8k|    {
 8783|  59.8k|        return m_str;
 8784|  59.8k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJhEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|  59.8k|        : m_str(r.str)
 8778|  59.8k|    {
 8779|  59.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEcvbEv:
 1739|  64.2k|    {
 1740|  64.2k|        return has_value();
 1741|  64.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEptEv:
 1814|   163k|    {
 1815|   163k|        return &value();
 1816|   163k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|   163k|    {
 1769|   163k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   163k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   163k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   163k|        return this->get_value();
 1771|   163k|    }
_ZN3scn2v44scanIJhENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9773|  29.9k|{
 9774|  29.9k|    auto result = make_scan_result<Source, Args...>();
 9775|  29.9k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|  29.9k|                                   make_scan_args(result->values())));
 9777|  29.9k|    return result;
 9778|  29.9k|}
_ZN3scn2v410scan_valueIhNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 9814|  4.40k|{
 9815|  4.40k|    auto result = make_scan_result<Source, T>();
 9816|  4.40k|    fill_scan_result(
 9817|  4.40k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  4.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9818|  4.40k|                            detail::make_arg<scan_context>(result->value())));
 9819|  4.40k|    return result;
 9820|  4.40k|}
_ZN3scn2v44scanIJiENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9704|  39.6k|{
 9705|  39.6k|    auto result = make_scan_result<Source, Args...>();
 9706|  39.6k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  39.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|  39.6k|                                   make_scan_args(result->values())));
 9708|  39.6k|    return result;
 9709|  39.6k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJiEEEDav:
 9660|  85.1k|{
 9661|  85.1k|    return scan_result_type<Source, Args...>();
 9662|  85.1k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEC2Ev:
 1551|  85.1k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EEC2Ev:
  426|  85.1k|        : m_value(T{}), m_has_value(true)
  427|  85.1k|    {
  428|  85.1k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJiEEC2Ev:
 6610|  85.1k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9645|  85.1k|{
 9646|  85.1k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  85.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.4k, False: 70.7k]
  |  |  ------------------
  ------------------
 9647|  14.4k|        out = unexpected(in.error());
 9648|  14.4k|    }
 9649|  70.7k|    else {
 9650|  70.7k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  70.7k|    static_cast<    \
  |  |  935|  70.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|  70.7k|    }
 9652|  85.1k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  14.4k|        : base(unexpect, std::move(e.error())),
 1616|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  14.4k|    {
 1618|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.4k|          m_has_value(false)
  451|  14.4k|    {
  452|  14.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  14.4k|    {
 1316|  14.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEaSEOSI_:
 1556|  14.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorEvEaSEOSJ_:
  902|  14.4k|    {
  903|  14.4k|        assign_common(std::move(other));
  904|  14.4k|        return *this;
  905|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  14.4k|    {
  950|  14.4k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 14.4k, False: 0]
  ------------------
  951|  14.4k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 14.4k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  14.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  14.4k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   340k|    {
  490|   340k|        return m_has_value;
  491|   340k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   226k|    {
  456|   226k|        return m_value;
  457|   226k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  14.4k|    {
 1046|  14.4k|        this->destroy_value();
 1047|  14.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  14.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  14.4k|    {
  504|  14.4k|        scn::detail::construct_at(&get_unexpected(),
  505|  14.4k|                                  std::forward<Args>(args)...);
  506|  14.4k|        m_has_value = false;
  507|  14.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.4k|    {
  473|  14.4k|        return m_unexpected;
  474|  14.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  14.4k|    {
  481|  14.4k|        return std::move(m_unexpected);
  482|  14.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJiEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8782|  79.2k|    {
 8783|  79.2k|        return m_str;
 8784|  79.2k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|  79.2k|        : m_str(r.str)
 8778|  79.2k|    {
 8779|  79.2k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEcvbEv:
 1739|  85.1k|    {
 1740|  85.1k|        return has_value();
 1741|  85.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEptEv:
 1814|   226k|    {
 1815|   226k|        return &value();
 1816|   226k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|   226k|    {
 1769|   226k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   226k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   226k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   226k|        return this->get_value();
 1771|   226k|    }
_ZN3scn2v44scanIJiENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9773|  39.6k|{
 9774|  39.6k|    auto result = make_scan_result<Source, Args...>();
 9775|  39.6k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  39.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|  39.6k|                                   make_scan_args(result->values())));
 9777|  39.6k|    return result;
 9778|  39.6k|}
_ZN3scn2v410scan_valueIiNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 9814|  5.92k|{
 9815|  5.92k|    auto result = make_scan_result<Source, T>();
 9816|  5.92k|    fill_scan_result(
 9817|  5.92k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  5.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9818|  5.92k|                            detail::make_arg<scan_context>(result->value())));
 9819|  5.92k|    return result;
 9820|  5.92k|}
_ZN3scn2v44scanIJjENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9704|  32.4k|{
 9705|  32.4k|    auto result = make_scan_result<Source, Args...>();
 9706|  32.4k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  32.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|  32.4k|                                   make_scan_args(result->values())));
 9708|  32.4k|    return result;
 9709|  32.4k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJjEEEDav:
 9660|  69.7k|{
 9661|  69.7k|    return scan_result_type<Source, Args...>();
 9662|  69.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEC2Ev:
 1551|  69.7k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EEC2Ev:
  426|  69.7k|        : m_value(T{}), m_has_value(true)
  427|  69.7k|    {
  428|  69.7k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJjEEC2Ev:
 6610|  69.7k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9645|  69.7k|{
 9646|  69.7k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  69.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.4k, False: 55.2k]
  |  |  ------------------
  ------------------
 9647|  14.4k|        out = unexpected(in.error());
 9648|  14.4k|    }
 9649|  55.2k|    else {
 9650|  55.2k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  55.2k|    static_cast<    \
  |  |  935|  55.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|  55.2k|    }
 9652|  69.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  14.4k|        : base(unexpect, std::move(e.error())),
 1616|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  14.4k|    {
 1618|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.4k|          m_has_value(false)
  451|  14.4k|    {
  452|  14.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  14.4k|    {
 1316|  14.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEaSEOSI_:
 1556|  14.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorEvEaSEOSJ_:
  902|  14.4k|    {
  903|  14.4k|        assign_common(std::move(other));
  904|  14.4k|        return *this;
  905|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  14.4k|    {
  950|  14.4k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 14.4k, False: 0]
  ------------------
  951|  14.4k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 14.4k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  14.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  14.4k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   278k|    {
  490|   278k|        return m_has_value;
  491|   278k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   180k|    {
  456|   180k|        return m_value;
  457|   180k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  14.4k|    {
 1046|  14.4k|        this->destroy_value();
 1047|  14.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  14.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  14.4k|    {
  504|  14.4k|        scn::detail::construct_at(&get_unexpected(),
  505|  14.4k|                                  std::forward<Args>(args)...);
  506|  14.4k|        m_has_value = false;
  507|  14.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.4k|    {
  473|  14.4k|        return m_unexpected;
  474|  14.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  14.4k|    {
  481|  14.4k|        return std::move(m_unexpected);
  482|  14.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJjEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8782|  64.9k|    {
 8783|  64.9k|        return m_str;
 8784|  64.9k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|  64.9k|        : m_str(r.str)
 8778|  64.9k|    {
 8779|  64.9k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEcvbEv:
 1739|  69.7k|    {
 1740|  69.7k|        return has_value();
 1741|  69.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEptEv:
 1814|   180k|    {
 1815|   180k|        return &value();
 1816|   180k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|   180k|    {
 1769|   180k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   180k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   180k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   180k|        return this->get_value();
 1771|   180k|    }
_ZN3scn2v44scanIJjENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9773|  32.4k|{
 9774|  32.4k|    auto result = make_scan_result<Source, Args...>();
 9775|  32.4k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  32.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|  32.4k|                                   make_scan_args(result->values())));
 9777|  32.4k|    return result;
 9778|  32.4k|}
_ZN3scn2v410scan_valueIjNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 9814|  4.83k|{
 9815|  4.83k|    auto result = make_scan_result<Source, T>();
 9816|  4.83k|    fill_scan_result(
 9817|  4.83k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  4.83k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9818|  4.83k|                            detail::make_arg<scan_context>(result->value())));
 9819|  4.83k|    return result;
 9820|  4.83k|}
_ZN3scn2v44scanIJxENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9704|  40.3k|{
 9705|  40.3k|    auto result = make_scan_result<Source, Args...>();
 9706|  40.3k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  40.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|  40.3k|                                   make_scan_args(result->values())));
 9708|  40.3k|    return result;
 9709|  40.3k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJxEEEDav:
 9660|  86.6k|{
 9661|  86.6k|    return scan_result_type<Source, Args...>();
 9662|  86.6k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEC2Ev:
 1551|  86.6k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EEC2Ev:
  426|  86.6k|        : m_value(T{}), m_has_value(true)
  427|  86.6k|    {
  428|  86.6k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJxEEC2Ev:
 6610|  86.6k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9645|  86.6k|{
 9646|  86.6k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  86.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.4k, False: 72.1k]
  |  |  ------------------
  ------------------
 9647|  14.4k|        out = unexpected(in.error());
 9648|  14.4k|    }
 9649|  72.1k|    else {
 9650|  72.1k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  72.1k|    static_cast<    \
  |  |  935|  72.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|  72.1k|    }
 9652|  86.6k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  14.4k|        : base(unexpect, std::move(e.error())),
 1616|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  14.4k|    {
 1618|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.4k|          m_has_value(false)
  451|  14.4k|    {
  452|  14.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  14.4k|    {
 1316|  14.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEaSEOSI_:
 1556|  14.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorEvEaSEOSJ_:
  902|  14.4k|    {
  903|  14.4k|        assign_common(std::move(other));
  904|  14.4k|        return *this;
  905|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  14.4k|    {
  950|  14.4k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 14.4k, False: 0]
  ------------------
  951|  14.4k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 14.4k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  14.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  14.4k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   346k|    {
  490|   346k|        return m_has_value;
  491|   346k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   230k|    {
  456|   230k|        return m_value;
  457|   230k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  14.4k|    {
 1046|  14.4k|        this->destroy_value();
 1047|  14.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  14.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  14.4k|    {
  504|  14.4k|        scn::detail::construct_at(&get_unexpected(),
  505|  14.4k|                                  std::forward<Args>(args)...);
  506|  14.4k|        m_has_value = false;
  507|  14.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.4k|    {
  473|  14.4k|        return m_unexpected;
  474|  14.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  14.4k|    {
  481|  14.4k|        return std::move(m_unexpected);
  482|  14.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJxEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8782|  80.6k|    {
 8783|  80.6k|        return m_str;
 8784|  80.6k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJxEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|  80.6k|        : m_str(r.str)
 8778|  80.6k|    {
 8779|  80.6k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEcvbEv:
 1739|  86.6k|    {
 1740|  86.6k|        return has_value();
 1741|  86.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEptEv:
 1814|   230k|    {
 1815|   230k|        return &value();
 1816|   230k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|   230k|    {
 1769|   230k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   230k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   230k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   230k|        return this->get_value();
 1771|   230k|    }
_ZN3scn2v44scanIJxENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9773|  40.3k|{
 9774|  40.3k|    auto result = make_scan_result<Source, Args...>();
 9775|  40.3k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  40.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|  40.3k|                                   make_scan_args(result->values())));
 9777|  40.3k|    return result;
 9778|  40.3k|}
_ZN3scn2v410scan_valueIxNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 9814|  6.02k|{
 9815|  6.02k|    auto result = make_scan_result<Source, T>();
 9816|  6.02k|    fill_scan_result(
 9817|  6.02k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  6.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9818|  6.02k|                            detail::make_arg<scan_context>(result->value())));
 9819|  6.02k|    return result;
 9820|  6.02k|}
_ZN3scn2v44scanIJyENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9704|  32.8k|{
 9705|  32.8k|    auto result = make_scan_result<Source, Args...>();
 9706|  32.8k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  32.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|  32.8k|                                   make_scan_args(result->values())));
 9708|  32.8k|    return result;
 9709|  32.8k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJyEEEDav:
 9660|  70.4k|{
 9661|  70.4k|    return scan_result_type<Source, Args...>();
 9662|  70.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEC2Ev:
 1551|  70.4k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EEC2Ev:
  426|  70.4k|        : m_value(T{}), m_has_value(true)
  427|  70.4k|    {
  428|  70.4k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJyEEC2Ev:
 6610|  70.4k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9645|  70.4k|{
 9646|  70.4k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  70.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.4k, False: 56.0k]
  |  |  ------------------
  ------------------
 9647|  14.4k|        out = unexpected(in.error());
 9648|  14.4k|    }
 9649|  56.0k|    else {
 9650|  56.0k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  56.0k|    static_cast<    \
  |  |  935|  56.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|  56.0k|    }
 9652|  70.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  14.4k|        : base(unexpect, std::move(e.error())),
 1616|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  14.4k|    {
 1618|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.4k|          m_has_value(false)
  451|  14.4k|    {
  452|  14.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  14.4k|    {
 1316|  14.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEaSEOSI_:
 1556|  14.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorEvEaSEOSJ_:
  902|  14.4k|    {
  903|  14.4k|        assign_common(std::move(other));
  904|  14.4k|        return *this;
  905|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  14.4k|    {
  950|  14.4k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 14.4k, False: 0]
  ------------------
  951|  14.4k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 14.4k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  14.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  14.4k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   281k|    {
  490|   281k|        return m_has_value;
  491|   281k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   182k|    {
  456|   182k|        return m_value;
  457|   182k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  14.4k|    {
 1046|  14.4k|        this->destroy_value();
 1047|  14.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  14.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  14.4k|    {
  504|  14.4k|        scn::detail::construct_at(&get_unexpected(),
  505|  14.4k|                                  std::forward<Args>(args)...);
  506|  14.4k|        m_has_value = false;
  507|  14.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.4k|    {
  473|  14.4k|        return m_unexpected;
  474|  14.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  14.4k|    {
  481|  14.4k|        return std::move(m_unexpected);
  482|  14.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJyEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8782|  65.6k|    {
 8783|  65.6k|        return m_str;
 8784|  65.6k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJyEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|  65.6k|        : m_str(r.str)
 8778|  65.6k|    {
 8779|  65.6k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEcvbEv:
 1739|  70.4k|    {
 1740|  70.4k|        return has_value();
 1741|  70.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEptEv:
 1814|   182k|    {
 1815|   182k|        return &value();
 1816|   182k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|   182k|    {
 1769|   182k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   182k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   182k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   182k|        return this->get_value();
 1771|   182k|    }
_ZN3scn2v44scanIJyENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9773|  32.8k|{
 9774|  32.8k|    auto result = make_scan_result<Source, Args...>();
 9775|  32.8k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  32.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|  32.8k|                                   make_scan_args(result->values())));
 9777|  32.8k|    return result;
 9778|  32.8k|}
_ZN3scn2v410scan_valueIyNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 9814|  4.89k|{
 9815|  4.89k|    auto result = make_scan_result<Source, T>();
 9816|  4.89k|    fill_scan_result(
 9817|  4.89k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  4.89k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9818|  4.89k|                            detail::make_arg<scan_context>(result->value())));
 9819|  4.89k|    return result;
 9820|  4.89k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   174k|    {
 2869|   174k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   174k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   174k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   174k|    {
 2850|   174k|        return decay_copy(t.begin());
 2851|   174k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 2093|  1.16M|{
 2094|  1.16M|    return SCN_FWD(t);
  ------------------
  |  |  936|  1.16M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  1.16M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   365k|    {
 2926|   365k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   365k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   365k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   365k|    {
 2908|   365k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   365k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   365k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJaEEEDav:
 9660|  29.3k|{
 9661|  29.3k|    return scan_result_type<Source, Args...>();
 9662|  29.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEC2Ev:
 1551|  29.3k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EEC2Ev:
  426|  29.3k|        : m_value(T{}), m_has_value(true)
  427|  29.3k|    {
  428|  29.3k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJaEEC2Ev:
 6610|  29.3k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2Ev:
 6453|   181k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2Ev:
 3459|   181k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9645|  29.3k|{
 9646|  29.3k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  29.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 28.8k, False: 470]
  |  |  ------------------
  ------------------
 9647|  28.8k|        out = unexpected(in.error());
 9648|  28.8k|    }
 9649|    470|    else {
 9650|    470|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    470|    static_cast<    \
  |  |  935|    470|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|    470|    }
 9652|  29.3k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1739|   181k|    {
 1740|   181k|        return has_value();
 1741|   181k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   363k|    {
  490|   363k|        return m_has_value;
  491|   363k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1745|   173k|    {
 1746|   173k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   173k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   173k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   173k|        return this->get_unexpected().error();
 1748|   173k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   173k|    {
  473|   173k|        return m_unexpected;
  474|   173k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  28.8k|        : base(unexpect, std::move(e.error())),
 1616|  28.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  28.8k|    {
 1618|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  28.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  28.8k|          m_has_value(false)
  451|  28.8k|    {
  452|  28.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  28.8k|    {
 1316|  28.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEaSEOSC_:
 1556|  28.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorEvEaSEOSD_:
  902|  28.8k|    {
  903|  28.8k|        assign_common(std::move(other));
  904|  28.8k|        return *this;
  905|  28.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  28.8k|    {
  950|  28.8k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 28.8k, False: 0]
  ------------------
  951|  28.8k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 28.8k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  28.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  28.8k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   117k|    {
  490|   117k|        return m_has_value;
  491|   117k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  30.3k|    {
  456|  30.3k|        return m_value;
  457|  30.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  28.8k|    {
 1046|  28.8k|        this->destroy_value();
 1047|  28.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  28.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  28.8k|    {
  504|  28.8k|        scn::detail::construct_at(&get_unexpected(),
  505|  28.8k|                                  std::forward<Args>(args)...);
  506|  28.8k|        m_has_value = false;
  507|  28.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  28.8k|    {
  473|  28.8k|        return m_unexpected;
  474|  28.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  28.8k|    {
  481|  28.8k|        return std::move(m_unexpected);
  482|  28.8k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE9set_rangeIS9_EEvOT_:
 6484|  8.59k|    {
 6485|  8.59k|        m_range = std::forward<Other>(r);
 6486|  8.59k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1794|  8.59k|    {
 1795|  8.59k|        return value();
 1796|  8.59k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|  8.59k|    {
 1769|  8.59k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  8.59k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  8.59k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  8.59k|        return this->get_value();
 1771|  8.59k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  8.59k|    {
  456|  8.59k|        return m_value;
  457|  8.59k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9421|  86.7k|{
 9422|  86.7k|    auto buffer = make_scan_buffer(range);
 9423|       |
 9424|  86.7k|    auto result = vscan_impl(buffer, format, args);
 9425|  86.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  86.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 82.5k, False: 4.18k]
  |  |  ------------------
  ------------------
 9426|  82.5k|        return unexpected(result.error());
 9427|  82.5k|    }
 9428|  4.18k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  4.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9429|  86.7k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 5380|   181k|{
 5381|   181k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|   181k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|   181k|                  "\n"
 5385|   181k|                  "Unsupported range type given as input to a scanning "
 5386|   181k|                  "function.\n"
 5387|   181k|                  "A range needs to have a character type (value type) "
 5388|   181k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|   181k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|   181k|                  "to be included.\n"
 5391|   181k|                  "See the scnlib documentation for more details.");
 5392|   181k|    static_assert(
 5393|   181k|        !std::is_same_v<T, custom_char_traits>,
 5394|   181k|        "\n"
 5395|   181k|        "Unsupported range type given as input to a scanning "
 5396|   181k|        "function.\n"
 5397|   181k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|   181k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|   181k|        "not supported.");
 5400|   181k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|   181k|                  "\n"
 5402|   181k|                  "Unsupported range type given as input to a scanning "
 5403|   181k|                  "function.\n"
 5404|   181k|                  "file_marker_found cannot be used as an "
 5405|   181k|                  "source range type to scn::scan.\n"
 5406|   181k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|   181k|                  "and do not provide an explicit source range, "
 5408|   181k|                  "or use scn::scan with a FILE* directly.");
 5409|   181k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|   181k|                  "\n"
 5411|   181k|                  "Unsupported range type given as input to a scanning "
 5412|   181k|                  "function.\n"
 5413|   181k|                  "In order to be scannable, a range needs to satisfy "
 5414|   181k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|   181k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|   181k|                  "\n"
 5417|   181k|                  "Unsupported range type given as input to a scanning "
 5418|   181k|                  "function.\n"
 5419|   181k|                  "A range needs to model forward_range and have a valid "
 5420|   181k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|   181k|                  "Examples of scannable ranges are std::string, "
 5422|   181k|                  "std::string_view, "
 5423|   181k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|   181k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|   181k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|   181k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5319|   181k|{
 5320|   181k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5321|   181k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5322|       |    }
 5323|       |    else {
 5324|       |        return invalid_char_type{};
 5325|       |    }
 5326|   181k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   181k|    {
 3000|   181k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   181k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   181k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   181k|    {
 2981|   181k|        return t.data();
 2982|   181k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3382|   181k|    {
 3383|   181k|        return detail::to_address(ranges::begin(derived()));
 3384|   181k|    }
_ZN3scn2v46detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|   607k|{
  316|   607k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|   607k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|   607k|}
_ZN3scn2v46detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  293|   607k|{
  294|   607k|    return p;
  295|   607k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   190k|    {
 2869|   190k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   190k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   190k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   190k|    {
 2850|   190k|        return decay_copy(t.begin());
 2851|   190k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3479|  36.7M|    {
 3480|  36.7M|        return m_iterator;
 3481|  36.7M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3338|   181k|    {
 3339|   181k|        return static_cast<const D&>(*this);
 3340|   181k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3074|   181k|    {
 3075|   181k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   181k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3040|   181k|    {
 3041|   181k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|   181k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   181k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3495|   546k|    {
 3496|   546k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3497|   546k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|   173k|        : base(unexpect, std::move(e.error())),
 1616|   173k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   173k|    {
 1618|   173k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|   173k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   173k|          m_has_value(false)
  451|   173k|    {
  452|   173k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   181k|    {
 1316|   181k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6714|  8.59k|{
 6715|       |    if constexpr (ranges::random_access_iterator<
 6716|  8.59k|                      ranges::iterator_t<SourceRange>>) {
 6717|  8.59k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6718|       |    }
 6719|       |    else {
 6720|       |        auto it = ranges::begin(source);
 6721|       |        while (n > 0) {
 6722|       |            --n;
 6723|       |            ++it;
 6724|       |        }
 6725|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6726|       |    }
 6727|  8.59k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   429k|    {
 2869|   429k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   429k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   429k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   429k|    {
 2850|   429k|        return decay_copy(t.begin());
 2851|   429k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 6701|  8.59k|{
 6702|  8.59k|    return ranges::end(source);
 6703|  8.59k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  8.59k|    {
 2926|  8.59k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  8.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  8.59k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  8.59k|    {
 2908|  8.59k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  8.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  8.59k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3483|  35.6M|    {
 3484|  35.6M|        return m_sentinel;
 3485|  35.6M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|  8.59k|        : base(std::in_place, std::forward<U>(val)),
 1570|  8.59k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  8.59k|    {
 1572|  8.59k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|  8.59k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  8.59k|    {
  442|  8.59k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJaEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8782|  27.9k|    {
 8783|  27.9k|        return m_str;
 8784|  27.9k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJaEEEDaRNSt3__15tupleIJDpT0_EEE:
 6114|  55.9k|{
 6115|  55.9k|    detail::check_scan_arg_types<Args...>();
 6116|  55.9k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|  55.9k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJaEEC2ERNSt3__15tupleIJaEEE:
 6090|  55.9k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|  55.9k|    {
 6092|  55.9k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJaEE12make_argptrsIJaEEENSt3__15arrayIPvLm1EEEDpRT_:
 6099|  55.9k|    {
 6100|  55.9k|        return {detail::make_arg<
 6101|  55.9k|            kind, Context,
 6102|  55.9k|            mapped_type_constant<remove_cvref_t<A>,
 6103|  55.9k|                                 typename Context::char_type>::value>(args)...};
 6104|  55.9k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE1EavEEPvRT2_:
 5879|  55.9k|{
 5880|  55.9k|    return make_value<Context>(value).ref_value;
 5881|  55.9k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEaEEDaRT0_:
 5814|  58.7k|{
 5815|  58.7k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|  58.7k|                                  needs_context_tag>) {
 5819|  58.7k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  58.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|  58.7k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERa:
 5653|  58.7k|    {                                                                        \
 5654|  58.7k|        return val;                                                          \
 5655|  58.7k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJaEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|  55.9k|        : basic_scan_args(store.desc, store.args.data())
 6141|  55.9k|    {
 6142|  55.9k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2EmPKPv:
 6192|   346k|        : m_desc(desc), m_builtin_values(data)
 6193|   346k|    {
 6194|   346k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3464|  1.40M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.40M|    static_cast<    \
  |  |  935|  1.40M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.40M|    static_cast<    \
  |  |  935|  1.40M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  1.40M|    {
 3466|  1.40M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 8448|   346k|{
 8449|   346k|    return s;
 8450|   346k|}
_ZN3scn2v46detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 8420|   346k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJaEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|  27.9k|        : m_str(r.str)
 8778|  27.9k|    {
 8779|  27.9k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEcvbEv:
 1739|  29.3k|    {
 1740|  29.3k|        return has_value();
 1741|  29.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEptEv:
 1814|  30.3k|    {
 1815|  30.3k|        return &value();
 1816|  30.3k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  30.3k|    {
 1769|  30.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  30.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  30.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  30.3k|        return this->get_value();
 1771|  30.3k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 6473|  8.59k|    {
 6474|  8.59k|        return ranges::begin(m_range);
 6475|  8.59k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9437|  86.7k|{
 9438|  86.7k|#if !SCN_DISABLE_LOCALE
 9439|  86.7k|    auto buffer = detail::make_scan_buffer(range);
 9440|       |
 9441|  86.7k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9442|  86.7k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9443|  86.7k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9444|       |
 9445|  86.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  86.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 82.5k, False: 4.18k]
  |  |  ------------------
  ------------------
 9446|  82.5k|        return unexpected(result.error());
 9447|  82.5k|    }
 9448|  4.18k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  4.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9449|       |#else
 9450|       |    static_assert(dependent_false<Locale>::value,
 9451|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9452|       |
 9453|       |    return {};
 9454|       |#endif
 9455|  86.7k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9461|  8.48k|{
 9462|  8.48k|    auto buffer = detail::make_scan_buffer(range);
 9463|       |
 9464|  8.48k|    auto result = detail::vscan_value_impl(buffer, arg);
 9465|  8.48k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  8.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.25k, False: 230]
  |  |  ------------------
  ------------------
 9466|  8.25k|        return unexpected(result.error());
 9467|  8.25k|    }
 9468|    230|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|    230|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9469|  8.48k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEaEENS0_14basic_scan_argIT_EERT0_:
 5864|  2.82k|{
 5865|  2.82k|    check_scan_arg_types<T>();
 5866|       |
 5867|  2.82k|    basic_scan_arg<Context> arg;
 5868|  2.82k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|  2.82k|    arg.m_value = make_value<Context>(value);
 5870|  2.82k|    return arg;
 5871|  2.82k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 5959|   363k|    constexpr basic_scan_arg() = default;
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJhEEEDav:
 9660|  29.2k|{
 9661|  29.2k|    return scan_result_type<Source, Args...>();
 9662|  29.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEC2Ev:
 1551|  29.2k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EEC2Ev:
  426|  29.2k|        : m_value(T{}), m_has_value(true)
  427|  29.2k|    {
  428|  29.2k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJhEEC2Ev:
 6610|  29.2k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9645|  29.2k|{
 9646|  29.2k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  29.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 28.8k, False: 395]
  |  |  ------------------
  ------------------
 9647|  28.8k|        out = unexpected(in.error());
 9648|  28.8k|    }
 9649|    395|    else {
 9650|    395|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    395|    static_cast<    \
  |  |  935|    395|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|    395|    }
 9652|  29.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  28.8k|        : base(unexpect, std::move(e.error())),
 1616|  28.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  28.8k|    {
 1618|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  28.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  28.8k|          m_has_value(false)
  451|  28.8k|    {
  452|  28.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  28.8k|    {
 1316|  28.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEaSEOSC_:
 1556|  28.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorEvEaSEOSD_:
  902|  28.8k|    {
  903|  28.8k|        assign_common(std::move(other));
  904|  28.8k|        return *this;
  905|  28.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  28.8k|    {
  950|  28.8k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 28.8k, False: 0]
  ------------------
  951|  28.8k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 28.8k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  28.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  28.8k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   117k|    {
  490|   117k|        return m_has_value;
  491|   117k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  30.0k|    {
  456|  30.0k|        return m_value;
  457|  30.0k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  28.8k|    {
 1046|  28.8k|        this->destroy_value();
 1047|  28.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  28.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  28.8k|    {
  504|  28.8k|        scn::detail::construct_at(&get_unexpected(),
  505|  28.8k|                                  std::forward<Args>(args)...);
  506|  28.8k|        m_has_value = false;
  507|  28.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  28.8k|    {
  473|  28.8k|        return m_unexpected;
  474|  28.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  28.8k|    {
  481|  28.8k|        return std::move(m_unexpected);
  482|  28.8k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJhEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8782|  27.8k|    {
 8783|  27.8k|        return m_str;
 8784|  27.8k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJhEEEDaRNSt3__15tupleIJDpT0_EEE:
 6114|  55.7k|{
 6115|  55.7k|    detail::check_scan_arg_types<Args...>();
 6116|  55.7k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|  55.7k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJhEEC2ERNSt3__15tupleIJhEEE:
 6090|  55.7k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|  55.7k|    {
 6092|  55.7k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJhEE12make_argptrsIJhEEENSt3__15arrayIPvLm1EEEDpRT_:
 6099|  55.7k|    {
 6100|  55.7k|        return {detail::make_arg<
 6101|  55.7k|            kind, Context,
 6102|  55.7k|            mapped_type_constant<remove_cvref_t<A>,
 6103|  55.7k|                                 typename Context::char_type>::value>(args)...};
 6104|  55.7k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE6EhvEEPvRT2_:
 5879|  55.7k|{
 5880|  55.7k|    return make_value<Context>(value).ref_value;
 5881|  55.7k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEhEEDaRT0_:
 5814|  58.5k|{
 5815|  58.5k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|  58.5k|                                  needs_context_tag>) {
 5819|  58.5k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  58.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|  58.5k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERh:
 5653|  58.5k|    {                                                                        \
 5654|  58.5k|        return val;                                                          \
 5655|  58.5k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJhEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|  55.7k|        : basic_scan_args(store.desc, store.args.data())
 6141|  55.7k|    {
 6142|  55.7k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJhEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|  27.8k|        : m_str(r.str)
 8778|  27.8k|    {
 8779|  27.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEcvbEv:
 1739|  29.2k|    {
 1740|  29.2k|        return has_value();
 1741|  29.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEptEv:
 1814|  30.0k|    {
 1815|  30.0k|        return &value();
 1816|  30.0k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  30.0k|    {
 1769|  30.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  30.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  30.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  30.0k|        return this->get_value();
 1771|  30.0k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEhEENS0_14basic_scan_argIT_EERT0_:
 5864|  2.80k|{
 5865|  2.80k|    check_scan_arg_types<T>();
 5866|       |
 5867|  2.80k|    basic_scan_arg<Context> arg;
 5868|  2.80k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|  2.80k|    arg.m_value = make_value<Context>(value);
 5870|  2.80k|    return arg;
 5871|  2.80k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEEDav:
 9660|  30.8k|{
 9661|  30.8k|    return scan_result_type<Source, Args...>();
 9662|  30.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2Ev:
 1551|  30.8k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2Ev:
  426|  30.8k|        : m_value(T{}), m_has_value(true)
  427|  30.8k|    {
  428|  30.8k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEC2Ev:
 6610|  30.8k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9645|  30.8k|{
 9646|  30.8k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  30.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 28.8k, False: 1.93k]
  |  |  ------------------
  ------------------
 9647|  28.8k|        out = unexpected(in.error());
 9648|  28.8k|    }
 9649|  1.93k|    else {
 9650|  1.93k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  1.93k|    static_cast<    \
  |  |  935|  1.93k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|  1.93k|    }
 9652|  30.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  28.8k|        : base(unexpect, std::move(e.error())),
 1616|  28.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  28.8k|    {
 1618|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  28.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  28.8k|          m_has_value(false)
  451|  28.8k|    {
  452|  28.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  28.8k|    {
 1316|  28.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEaSEOSC_:
 1556|  28.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorEvEaSEOSD_:
  902|  28.8k|    {
  903|  28.8k|        assign_common(std::move(other));
  904|  28.8k|        return *this;
  905|  28.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  28.8k|    {
  950|  28.8k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 28.8k, False: 0]
  ------------------
  951|  28.8k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 28.8k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  28.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  28.8k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   123k|    {
  490|   123k|        return m_has_value;
  491|   123k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  34.6k|    {
  456|  34.6k|        return m_value;
  457|  34.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  28.8k|    {
 1046|  28.8k|        this->destroy_value();
 1047|  28.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  28.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  28.8k|    {
  504|  28.8k|        scn::detail::construct_at(&get_unexpected(),
  505|  28.8k|                                  std::forward<Args>(args)...);
  506|  28.8k|        m_has_value = false;
  507|  28.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  28.8k|    {
  473|  28.8k|        return m_unexpected;
  474|  28.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  28.8k|    {
  481|  28.8k|        return std::move(m_unexpected);
  482|  28.8k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8782|  29.4k|    {
 8783|  29.4k|        return m_str;
 8784|  29.4k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJiEEEDaRNSt3__15tupleIJDpT0_EEE:
 6114|  58.8k|{
 6115|  58.8k|    detail::check_scan_arg_types<Args...>();
 6116|  58.8k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|  58.8k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJiEEC2ERNSt3__15tupleIJiEEE:
 6090|  58.8k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|  58.8k|    {
 6092|  58.8k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 6099|  58.8k|    {
 6100|  58.8k|        return {detail::make_arg<
 6101|  58.8k|            kind, Context,
 6102|  58.8k|            mapped_type_constant<remove_cvref_t<A>,
 6103|  58.8k|                                 typename Context::char_type>::value>(args)...};
 6104|  58.8k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE3EivEEPvRT2_:
 5879|  58.8k|{
 5880|  58.8k|    return make_value<Context>(value).ref_value;
 5881|  58.8k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEiEEDaRT0_:
 5814|  61.6k|{
 5815|  61.6k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|  61.6k|                                  needs_context_tag>) {
 5819|  61.6k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  61.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|  61.6k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERi:
 5653|  61.6k|    {                                                                        \
 5654|  61.6k|        return val;                                                          \
 5655|  61.6k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJiEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|  58.8k|        : basic_scan_args(store.desc, store.args.data())
 6141|  58.8k|    {
 6142|  58.8k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|  29.4k|        : m_str(r.str)
 8778|  29.4k|    {
 8779|  29.4k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEcvbEv:
 1739|  30.8k|    {
 1740|  30.8k|        return has_value();
 1741|  30.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEptEv:
 1814|  34.6k|    {
 1815|  34.6k|        return &value();
 1816|  34.6k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  34.6k|    {
 1769|  34.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  34.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  34.6k|        return this->get_value();
 1771|  34.6k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEiEENS0_14basic_scan_argIT_EERT0_:
 5864|  2.83k|{
 5865|  2.83k|    check_scan_arg_types<T>();
 5866|       |
 5867|  2.83k|    basic_scan_arg<Context> arg;
 5868|  2.83k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|  2.83k|    arg.m_value = make_value<Context>(value);
 5870|  2.83k|    return arg;
 5871|  2.83k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEEDav:
 9660|  30.7k|{
 9661|  30.7k|    return scan_result_type<Source, Args...>();
 9662|  30.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2Ev:
 1551|  30.7k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2Ev:
  426|  30.7k|        : m_value(T{}), m_has_value(true)
  427|  30.7k|    {
  428|  30.7k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEC2Ev:
 6610|  30.7k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9645|  30.7k|{
 9646|  30.7k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  30.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 28.8k, False: 1.82k]
  |  |  ------------------
  ------------------
 9647|  28.8k|        out = unexpected(in.error());
 9648|  28.8k|    }
 9649|  1.82k|    else {
 9650|  1.82k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  1.82k|    static_cast<    \
  |  |  935|  1.82k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|  1.82k|    }
 9652|  30.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  28.8k|        : base(unexpect, std::move(e.error())),
 1616|  28.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  28.8k|    {
 1618|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  28.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  28.8k|          m_has_value(false)
  451|  28.8k|    {
  452|  28.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  28.8k|    {
 1316|  28.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEaSEOSC_:
 1556|  28.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorEvEaSEOSD_:
  902|  28.8k|    {
  903|  28.8k|        assign_common(std::move(other));
  904|  28.8k|        return *this;
  905|  28.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  28.8k|    {
  950|  28.8k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 28.8k, False: 0]
  ------------------
  951|  28.8k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 28.8k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  28.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  28.8k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   122k|    {
  490|   122k|        return m_has_value;
  491|   122k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  34.3k|    {
  456|  34.3k|        return m_value;
  457|  34.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  28.8k|    {
 1046|  28.8k|        this->destroy_value();
 1047|  28.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  28.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  28.8k|    {
  504|  28.8k|        scn::detail::construct_at(&get_unexpected(),
  505|  28.8k|                                  std::forward<Args>(args)...);
  506|  28.8k|        m_has_value = false;
  507|  28.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  28.8k|    {
  473|  28.8k|        return m_unexpected;
  474|  28.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  28.8k|    {
  481|  28.8k|        return std::move(m_unexpected);
  482|  28.8k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8782|  29.3k|    {
 8783|  29.3k|        return m_str;
 8784|  29.3k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJjEEEDaRNSt3__15tupleIJDpT0_EEE:
 6114|  58.6k|{
 6115|  58.6k|    detail::check_scan_arg_types<Args...>();
 6116|  58.6k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|  58.6k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJjEEC2ERNSt3__15tupleIJjEEE:
 6090|  58.6k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|  58.6k|    {
 6092|  58.6k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 6099|  58.6k|    {
 6100|  58.6k|        return {detail::make_arg<
 6101|  58.6k|            kind, Context,
 6102|  58.6k|            mapped_type_constant<remove_cvref_t<A>,
 6103|  58.6k|                                 typename Context::char_type>::value>(args)...};
 6104|  58.6k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE8EjvEEPvRT2_:
 5879|  58.6k|{
 5880|  58.6k|    return make_value<Context>(value).ref_value;
 5881|  58.6k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEjEEDaRT0_:
 5814|  61.4k|{
 5815|  61.4k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|  61.4k|                                  needs_context_tag>) {
 5819|  61.4k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  61.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|  61.4k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERj:
 5653|  61.4k|    {                                                                        \
 5654|  61.4k|        return val;                                                          \
 5655|  61.4k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJjEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|  58.6k|        : basic_scan_args(store.desc, store.args.data())
 6141|  58.6k|    {
 6142|  58.6k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|  29.3k|        : m_str(r.str)
 8778|  29.3k|    {
 8779|  29.3k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEcvbEv:
 1739|  30.7k|    {
 1740|  30.7k|        return has_value();
 1741|  30.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEptEv:
 1814|  34.3k|    {
 1815|  34.3k|        return &value();
 1816|  34.3k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  34.3k|    {
 1769|  34.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  34.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  34.3k|        return this->get_value();
 1771|  34.3k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEjEENS0_14basic_scan_argIT_EERT0_:
 5864|  2.81k|{
 5865|  2.81k|    check_scan_arg_types<T>();
 5866|       |
 5867|  2.81k|    basic_scan_arg<Context> arg;
 5868|  2.81k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|  2.81k|    arg.m_value = make_value<Context>(value);
 5870|  2.81k|    return arg;
 5871|  2.81k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJxEEEDav:
 9660|  30.9k|{
 9661|  30.9k|    return scan_result_type<Source, Args...>();
 9662|  30.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEC2Ev:
 1551|  30.9k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EEC2Ev:
  426|  30.9k|        : m_value(T{}), m_has_value(true)
  427|  30.9k|    {
  428|  30.9k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJxEEC2Ev:
 6610|  30.9k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9645|  30.9k|{
 9646|  30.9k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  30.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 28.8k, False: 2.05k]
  |  |  ------------------
  ------------------
 9647|  28.8k|        out = unexpected(in.error());
 9648|  28.8k|    }
 9649|  2.05k|    else {
 9650|  2.05k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  2.05k|    static_cast<    \
  |  |  935|  2.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|  2.05k|    }
 9652|  30.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  28.8k|        : base(unexpect, std::move(e.error())),
 1616|  28.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  28.8k|    {
 1618|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  28.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  28.8k|          m_has_value(false)
  451|  28.8k|    {
  452|  28.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  28.8k|    {
 1316|  28.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEaSEOSC_:
 1556|  28.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorEvEaSEOSD_:
  902|  28.8k|    {
  903|  28.8k|        assign_common(std::move(other));
  904|  28.8k|        return *this;
  905|  28.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  28.8k|    {
  950|  28.8k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 28.8k, False: 0]
  ------------------
  951|  28.8k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 28.8k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  28.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  28.8k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   123k|    {
  490|   123k|        return m_has_value;
  491|   123k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  35.0k|    {
  456|  35.0k|        return m_value;
  457|  35.0k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  28.8k|    {
 1046|  28.8k|        this->destroy_value();
 1047|  28.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  28.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  28.8k|    {
  504|  28.8k|        scn::detail::construct_at(&get_unexpected(),
  505|  28.8k|                                  std::forward<Args>(args)...);
  506|  28.8k|        m_has_value = false;
  507|  28.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  28.8k|    {
  473|  28.8k|        return m_unexpected;
  474|  28.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  28.8k|    {
  481|  28.8k|        return std::move(m_unexpected);
  482|  28.8k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJxEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8782|  29.5k|    {
 8783|  29.5k|        return m_str;
 8784|  29.5k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJxEEEDaRNSt3__15tupleIJDpT0_EEE:
 6114|  59.0k|{
 6115|  59.0k|    detail::check_scan_arg_types<Args...>();
 6116|  59.0k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|  59.0k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJxEEC2ERNSt3__15tupleIJxEEE:
 6090|  59.0k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|  59.0k|    {
 6092|  59.0k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJxEE12make_argptrsIJxEEENSt3__15arrayIPvLm1EEEDpRT_:
 6099|  59.0k|    {
 6100|  59.0k|        return {detail::make_arg<
 6101|  59.0k|            kind, Context,
 6102|  59.0k|            mapped_type_constant<remove_cvref_t<A>,
 6103|  59.0k|                                 typename Context::char_type>::value>(args)...};
 6104|  59.0k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE5ExvEEPvRT2_:
 5879|  59.0k|{
 5880|  59.0k|    return make_value<Context>(value).ref_value;
 5881|  59.0k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEExEEDaRT0_:
 5814|  61.8k|{
 5815|  61.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|  61.8k|                                  needs_context_tag>) {
 5819|  61.8k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  61.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|  61.8k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERx:
 5653|  61.8k|    {                                                                        \
 5654|  61.8k|        return val;                                                          \
 5655|  61.8k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJxEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|  59.0k|        : basic_scan_args(store.desc, store.args.data())
 6141|  59.0k|    {
 6142|  59.0k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJxEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|  29.5k|        : m_str(r.str)
 8778|  29.5k|    {
 8779|  29.5k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEcvbEv:
 1739|  30.9k|    {
 1740|  30.9k|        return has_value();
 1741|  30.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEptEv:
 1814|  35.0k|    {
 1815|  35.0k|        return &value();
 1816|  35.0k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  35.0k|    {
 1769|  35.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  35.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  35.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  35.0k|        return this->get_value();
 1771|  35.0k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEExEENS0_14basic_scan_argIT_EERT0_:
 5864|  2.85k|{
 5865|  2.85k|    check_scan_arg_types<T>();
 5866|       |
 5867|  2.85k|    basic_scan_arg<Context> arg;
 5868|  2.85k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|  2.85k|    arg.m_value = make_value<Context>(value);
 5870|  2.85k|    return arg;
 5871|  2.85k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJyEEEDav:
 9660|  30.8k|{
 9661|  30.8k|    return scan_result_type<Source, Args...>();
 9662|  30.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEC2Ev:
 1551|  30.8k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EEC2Ev:
  426|  30.8k|        : m_value(T{}), m_has_value(true)
  427|  30.8k|    {
  428|  30.8k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJyEEC2Ev:
 6610|  30.8k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9645|  30.8k|{
 9646|  30.8k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  30.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 28.8k, False: 1.91k]
  |  |  ------------------
  ------------------
 9647|  28.8k|        out = unexpected(in.error());
 9648|  28.8k|    }
 9649|  1.91k|    else {
 9650|  1.91k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  1.91k|    static_cast<    \
  |  |  935|  1.91k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|  1.91k|    }
 9652|  30.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  28.8k|        : base(unexpect, std::move(e.error())),
 1616|  28.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  28.8k|    {
 1618|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  28.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  28.8k|          m_has_value(false)
  451|  28.8k|    {
  452|  28.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  28.8k|    {
 1316|  28.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEaSEOSC_:
 1556|  28.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorEvEaSEOSD_:
  902|  28.8k|    {
  903|  28.8k|        assign_common(std::move(other));
  904|  28.8k|        return *this;
  905|  28.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  28.8k|    {
  950|  28.8k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 28.8k, False: 0]
  ------------------
  951|  28.8k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 28.8k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  28.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  28.8k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   123k|    {
  490|   123k|        return m_has_value;
  491|   123k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  34.6k|    {
  456|  34.6k|        return m_value;
  457|  34.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  28.8k|    {
 1046|  28.8k|        this->destroy_value();
 1047|  28.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  28.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  28.8k|    {
  504|  28.8k|        scn::detail::construct_at(&get_unexpected(),
  505|  28.8k|                                  std::forward<Args>(args)...);
  506|  28.8k|        m_has_value = false;
  507|  28.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  28.8k|    {
  473|  28.8k|        return m_unexpected;
  474|  28.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  28.8k|    {
  481|  28.8k|        return std::move(m_unexpected);
  482|  28.8k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJyEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8782|  29.3k|    {
 8783|  29.3k|        return m_str;
 8784|  29.3k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJyEEEDaRNSt3__15tupleIJDpT0_EEE:
 6114|  58.7k|{
 6115|  58.7k|    detail::check_scan_arg_types<Args...>();
 6116|  58.7k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|  58.7k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJyEEC2ERNSt3__15tupleIJyEEE:
 6090|  58.7k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|  58.7k|    {
 6092|  58.7k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJyEE12make_argptrsIJyEEENSt3__15arrayIPvLm1EEEDpRT_:
 6099|  58.7k|    {
 6100|  58.7k|        return {detail::make_arg<
 6101|  58.7k|            kind, Context,
 6102|  58.7k|            mapped_type_constant<remove_cvref_t<A>,
 6103|  58.7k|                                 typename Context::char_type>::value>(args)...};
 6104|  58.7k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE10EyvEEPvRT2_:
 5879|  58.7k|{
 5880|  58.7k|    return make_value<Context>(value).ref_value;
 5881|  58.7k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEyEEDaRT0_:
 5814|  61.6k|{
 5815|  61.6k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|  61.6k|                                  needs_context_tag>) {
 5819|  61.6k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  61.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|  61.6k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERy:
 5653|  61.6k|    {                                                                        \
 5654|  61.6k|        return val;                                                          \
 5655|  61.6k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJyEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|  58.7k|        : basic_scan_args(store.desc, store.args.data())
 6141|  58.7k|    {
 6142|  58.7k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJyEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|  29.3k|        : m_str(r.str)
 8778|  29.3k|    {
 8779|  29.3k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEcvbEv:
 1739|  30.8k|    {
 1740|  30.8k|        return has_value();
 1741|  30.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEptEv:
 1814|  34.6k|    {
 1815|  34.6k|        return &value();
 1816|  34.6k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  34.6k|    {
 1769|  34.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  34.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  34.6k|        return this->get_value();
 1771|  34.6k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEyEENS0_14basic_scan_argIT_EERT0_:
 5864|  2.83k|{
 5865|  2.83k|    check_scan_arg_types<T>();
 5866|       |
 5867|  2.83k|    basic_scan_arg<Context> arg;
 5868|  2.83k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|  2.83k|    arg.m_value = make_value<Context>(value);
 5870|  2.83k|    return arg;
 5871|  2.83k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   173k|    {
 2869|   173k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   173k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   173k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   173k|    {
 2850|   173k|        return decay_copy(t.begin());
 2851|   173k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 2093|   103M|{
 2094|   103M|    return SCN_FWD(t);
  ------------------
  |  |  936|   103M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|   103M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   363k|    {
 2926|   363k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   363k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   363k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   363k|    {
 2908|   363k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   363k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   363k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJaEEEDav:
 9660|  29.3k|{
 9661|  29.3k|    return scan_result_type<Source, Args...>();
 9662|  29.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEC2Ev:
 1551|  29.3k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EEC2Ev:
  426|  29.3k|        : m_value(T{}), m_has_value(true)
  427|  29.3k|    {
  428|  29.3k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJaEEC2Ev:
 6610|  29.3k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2Ev:
 6453|   181k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2Ev:
 3459|   181k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9645|  29.3k|{
 9646|  29.3k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  29.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 28.8k, False: 470]
  |  |  ------------------
  ------------------
 9647|  28.8k|        out = unexpected(in.error());
 9648|  28.8k|    }
 9649|    470|    else {
 9650|    470|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    470|    static_cast<    \
  |  |  935|    470|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|    470|    }
 9652|  29.3k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1739|   181k|    {
 1740|   181k|        return has_value();
 1741|   181k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   363k|    {
  490|   363k|        return m_has_value;
  491|   363k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1745|   173k|    {
 1746|   173k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   173k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   173k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   173k|        return this->get_unexpected().error();
 1748|   173k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   173k|    {
  473|   173k|        return m_unexpected;
  474|   173k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  28.8k|        : base(unexpect, std::move(e.error())),
 1616|  28.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  28.8k|    {
 1618|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  28.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  28.8k|          m_has_value(false)
  451|  28.8k|    {
  452|  28.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  28.8k|    {
 1316|  28.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEaSEOSI_:
 1556|  28.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorEvEaSEOSJ_:
  902|  28.8k|    {
  903|  28.8k|        assign_common(std::move(other));
  904|  28.8k|        return *this;
  905|  28.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  28.8k|    {
  950|  28.8k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 28.8k, False: 0]
  ------------------
  951|  28.8k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 28.8k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  28.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  28.8k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   117k|    {
  490|   117k|        return m_has_value;
  491|   117k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  30.3k|    {
  456|  30.3k|        return m_value;
  457|  30.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  28.8k|    {
 1046|  28.8k|        this->destroy_value();
 1047|  28.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  28.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  28.8k|    {
  504|  28.8k|        scn::detail::construct_at(&get_unexpected(),
  505|  28.8k|                                  std::forward<Args>(args)...);
  506|  28.8k|        m_has_value = false;
  507|  28.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  28.8k|    {
  473|  28.8k|        return m_unexpected;
  474|  28.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  28.8k|    {
  481|  28.8k|        return std::move(m_unexpected);
  482|  28.8k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE9set_rangeISF_EEvOT_:
 6484|  8.59k|    {
 6485|  8.59k|        m_range = std::forward<Other>(r);
 6486|  8.59k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1794|  8.59k|    {
 1795|  8.59k|        return value();
 1796|  8.59k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1768|  8.59k|    {
 1769|  8.59k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  8.59k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  8.59k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  8.59k|        return this->get_value();
 1771|  8.59k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  8.59k|    {
  456|  8.59k|        return m_value;
  457|  8.59k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9421|  86.7k|{
 9422|  86.7k|    auto buffer = make_scan_buffer(range);
 9423|       |
 9424|  86.7k|    auto result = vscan_impl(buffer, format, args);
 9425|  86.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  86.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 82.5k, False: 4.18k]
  |  |  ------------------
  ------------------
 9426|  82.5k|        return unexpected(result.error());
 9427|  82.5k|    }
 9428|  4.18k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  4.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9429|  86.7k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5380|   181k|{
 5381|   181k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|   181k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|   181k|                  "\n"
 5385|   181k|                  "Unsupported range type given as input to a scanning "
 5386|   181k|                  "function.\n"
 5387|   181k|                  "A range needs to have a character type (value type) "
 5388|   181k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|   181k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|   181k|                  "to be included.\n"
 5391|   181k|                  "See the scnlib documentation for more details.");
 5392|   181k|    static_assert(
 5393|   181k|        !std::is_same_v<T, custom_char_traits>,
 5394|   181k|        "\n"
 5395|   181k|        "Unsupported range type given as input to a scanning "
 5396|   181k|        "function.\n"
 5397|   181k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|   181k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|   181k|        "not supported.");
 5400|   181k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|   181k|                  "\n"
 5402|   181k|                  "Unsupported range type given as input to a scanning "
 5403|   181k|                  "function.\n"
 5404|   181k|                  "file_marker_found cannot be used as an "
 5405|   181k|                  "source range type to scn::scan.\n"
 5406|   181k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|   181k|                  "and do not provide an explicit source range, "
 5408|   181k|                  "or use scn::scan with a FILE* directly.");
 5409|   181k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|   181k|                  "\n"
 5411|   181k|                  "Unsupported range type given as input to a scanning "
 5412|   181k|                  "function.\n"
 5413|   181k|                  "In order to be scannable, a range needs to satisfy "
 5414|   181k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|   181k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|   181k|                  "\n"
 5417|   181k|                  "Unsupported range type given as input to a scanning "
 5418|   181k|                  "function.\n"
 5419|   181k|                  "A range needs to model forward_range and have a valid "
 5420|   181k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|   181k|                  "Examples of scannable ranges are std::string, "
 5422|   181k|                  "std::string_view, "
 5423|   181k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|   181k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|   181k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|   181k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5350|   181k|{
 5351|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5352|       |        return file_marker_found{};
 5353|       |    }
 5354|       |    else if constexpr (!ranges::forward_range<Range>) {
 5355|       |        if constexpr (ranges::range<Range>) {
 5356|       |            return insufficient_range{};
 5357|       |        }
 5358|       |        else {
 5359|       |            return invalid_input_range{};
 5360|       |        }
 5361|       |    }
 5362|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5363|       |        return invalid_char_type{};
 5364|       |    }
 5365|   181k|    else {
 5366|   181k|        return make_forward_scan_buffer(r);
 5367|   181k|    }
 5368|   181k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5184|   181k|{
 5185|   181k|    return basic_scan_forward_buffer_impl(range);
 5186|   181k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4764|   181k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  936|   181k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4765|   181k|          m_cursor(ranges::begin(*m_range))
 4766|   181k|    {
 4767|   181k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4736|   181k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4737|   181k|    {
 4738|   181k|    }
_ZN3scn2v46detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4427|   181k|        : m_current_view(sv), m_is_contiguous(false)
 4428|   181k|    {
 4429|   181k|    }
_ZN3scn2v46detail17basic_scan_bufferIwED2Ev:
 4340|   181k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   190k|    {
 2869|   190k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   190k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   190k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   190k|    {
 2850|   190k|        return decay_copy(t.begin());
 2851|   190k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3479|   199k|    {
 3480|   199k|        return m_iterator;
 3481|   199k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4770|  34.2M|    {
 4771|  34.2M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4771:13): [True: 104k, False: 34.1M]
  ------------------
 4772|   104k|            return false;
 4773|   104k|        }
 4774|  34.1M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4775|  34.1M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  930|  34.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4776|  34.1M|        }
 4777|  34.1M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4777:13): [True: 34.0M, False: 131k]
  ------------------
 4778|  34.0M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4779|  34.0M|                                          this->m_current_view.begin(),
 4780|  34.0M|                                          this->m_current_view.end());
 4781|  34.0M|        }
 4782|  34.1M|        m_latest = *m_cursor;
 4783|  34.1M|        ++m_cursor;
 4784|  34.1M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4785|  34.1M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4786|  34.1M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  930|  34.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4787|  34.1M|        }
 4788|  34.1M|        return true;
 4789|  34.2M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   102M|    {
 2926|   102M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   102M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   102M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   102M|    {
 2908|   102M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   102M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   102M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3483|   102M|    {
 3484|   102M|        return m_sentinel;
 3485|   102M|    }
_ZN3scn2v46detail17basic_scan_bufferIwE4syncEl:
 4345|   181k|    {
 4346|   181k|        SCN_UNUSED(position);
  ------------------
  |  |  915|   181k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4347|   181k|        return true;
 4348|   181k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1615|   173k|        : base(unexpect, std::move(e.error())),
 1616|   173k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   173k|    {
 1618|   173k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  449|   173k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   173k|          m_has_value(false)
  451|   173k|    {
  452|   173k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   181k|    {
 1316|   181k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6714|  8.59k|{
 6715|       |    if constexpr (ranges::random_access_iterator<
 6716|  8.59k|                      ranges::iterator_t<SourceRange>>) {
 6717|  8.59k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6718|       |    }
 6719|       |    else {
 6720|       |        auto it = ranges::begin(source);
 6721|       |        while (n > 0) {
 6722|       |            --n;
 6723|       |            ++it;
 6724|       |        }
 6725|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6726|       |    }
 6727|  8.59k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  8.59k|    {
 2869|  8.59k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  8.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  8.59k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  8.59k|    {
 2850|  8.59k|        return decay_copy(t.begin());
 2851|  8.59k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 6701|  8.59k|{
 6702|  8.59k|    return ranges::end(source);
 6703|  8.59k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  8.59k|    {
 2926|  8.59k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  8.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  8.59k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  8.59k|    {
 2908|  8.59k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  8.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  8.59k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1569|  8.59k|        : base(std::in_place, std::forward<U>(val)),
 1570|  8.59k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  8.59k|    {
 1572|  8.59k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  440|  8.59k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  8.59k|    {
  442|  8.59k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJaEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8782|  27.9k|    {
 8783|  27.9k|        return m_str;
 8784|  27.9k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3464|   190k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   190k|    static_cast<    \
  |  |  935|   190k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   190k|    static_cast<    \
  |  |  935|   190k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   190k|    {
 3466|   190k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJaEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|  27.9k|        : m_str(r.str)
 8778|  27.9k|    {
 8779|  27.9k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEcvbEv:
 1739|  29.3k|    {
 1740|  29.3k|        return has_value();
 1741|  29.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEptEv:
 1814|  30.3k|    {
 1815|  30.3k|        return &value();
 1816|  30.3k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|  30.3k|    {
 1769|  30.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  30.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  30.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  30.3k|        return this->get_value();
 1771|  30.3k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 6473|  8.59k|    {
 6474|  8.59k|        return ranges::begin(m_range);
 6475|  8.59k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9437|  86.7k|{
 9438|  86.7k|#if !SCN_DISABLE_LOCALE
 9439|  86.7k|    auto buffer = detail::make_scan_buffer(range);
 9440|       |
 9441|  86.7k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9442|  86.7k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9443|  86.7k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9444|       |
 9445|  86.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  86.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 82.5k, False: 4.18k]
  |  |  ------------------
  ------------------
 9446|  82.5k|        return unexpected(result.error());
 9447|  82.5k|    }
 9448|  4.18k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  4.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9449|       |#else
 9450|       |    static_assert(dependent_false<Locale>::value,
 9451|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9452|       |
 9453|       |    return {};
 9454|       |#endif
 9455|  86.7k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9461|  8.48k|{
 9462|  8.48k|    auto buffer = detail::make_scan_buffer(range);
 9463|       |
 9464|  8.48k|    auto result = detail::vscan_value_impl(buffer, arg);
 9465|  8.48k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  8.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.25k, False: 230]
  |  |  ------------------
  ------------------
 9466|  8.25k|        return unexpected(result.error());
 9467|  8.25k|    }
 9468|    230|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|    230|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9469|  8.48k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJhEEEDav:
 9660|  29.2k|{
 9661|  29.2k|    return scan_result_type<Source, Args...>();
 9662|  29.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEC2Ev:
 1551|  29.2k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EEC2Ev:
  426|  29.2k|        : m_value(T{}), m_has_value(true)
  427|  29.2k|    {
  428|  29.2k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJhEEC2Ev:
 6610|  29.2k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9645|  29.2k|{
 9646|  29.2k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  29.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 28.8k, False: 395]
  |  |  ------------------
  ------------------
 9647|  28.8k|        out = unexpected(in.error());
 9648|  28.8k|    }
 9649|    395|    else {
 9650|    395|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    395|    static_cast<    \
  |  |  935|    395|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|    395|    }
 9652|  29.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  28.8k|        : base(unexpect, std::move(e.error())),
 1616|  28.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  28.8k|    {
 1618|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  28.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  28.8k|          m_has_value(false)
  451|  28.8k|    {
  452|  28.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  28.8k|    {
 1316|  28.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEaSEOSI_:
 1556|  28.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorEvEaSEOSJ_:
  902|  28.8k|    {
  903|  28.8k|        assign_common(std::move(other));
  904|  28.8k|        return *this;
  905|  28.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  28.8k|    {
  950|  28.8k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 28.8k, False: 0]
  ------------------
  951|  28.8k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 28.8k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  28.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  28.8k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   117k|    {
  490|   117k|        return m_has_value;
  491|   117k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  30.0k|    {
  456|  30.0k|        return m_value;
  457|  30.0k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  28.8k|    {
 1046|  28.8k|        this->destroy_value();
 1047|  28.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  28.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  28.8k|    {
  504|  28.8k|        scn::detail::construct_at(&get_unexpected(),
  505|  28.8k|                                  std::forward<Args>(args)...);
  506|  28.8k|        m_has_value = false;
  507|  28.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  28.8k|    {
  473|  28.8k|        return m_unexpected;
  474|  28.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  28.8k|    {
  481|  28.8k|        return std::move(m_unexpected);
  482|  28.8k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJhEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8782|  27.8k|    {
 8783|  27.8k|        return m_str;
 8784|  27.8k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJhEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|  27.8k|        : m_str(r.str)
 8778|  27.8k|    {
 8779|  27.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEcvbEv:
 1739|  29.2k|    {
 1740|  29.2k|        return has_value();
 1741|  29.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEptEv:
 1814|  30.0k|    {
 1815|  30.0k|        return &value();
 1816|  30.0k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|  30.0k|    {
 1769|  30.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  30.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  30.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  30.0k|        return this->get_value();
 1771|  30.0k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJiEEEDav:
 9660|  30.8k|{
 9661|  30.8k|    return scan_result_type<Source, Args...>();
 9662|  30.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEC2Ev:
 1551|  30.8k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EEC2Ev:
  426|  30.8k|        : m_value(T{}), m_has_value(true)
  427|  30.8k|    {
  428|  30.8k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJiEEC2Ev:
 6610|  30.8k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9645|  30.8k|{
 9646|  30.8k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  30.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 28.8k, False: 1.93k]
  |  |  ------------------
  ------------------
 9647|  28.8k|        out = unexpected(in.error());
 9648|  28.8k|    }
 9649|  1.93k|    else {
 9650|  1.93k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  1.93k|    static_cast<    \
  |  |  935|  1.93k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|  1.93k|    }
 9652|  30.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  28.8k|        : base(unexpect, std::move(e.error())),
 1616|  28.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  28.8k|    {
 1618|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  28.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  28.8k|          m_has_value(false)
  451|  28.8k|    {
  452|  28.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  28.8k|    {
 1316|  28.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEaSEOSI_:
 1556|  28.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorEvEaSEOSJ_:
  902|  28.8k|    {
  903|  28.8k|        assign_common(std::move(other));
  904|  28.8k|        return *this;
  905|  28.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  28.8k|    {
  950|  28.8k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 28.8k, False: 0]
  ------------------
  951|  28.8k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 28.8k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  28.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  28.8k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   123k|    {
  490|   123k|        return m_has_value;
  491|   123k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  34.6k|    {
  456|  34.6k|        return m_value;
  457|  34.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  28.8k|    {
 1046|  28.8k|        this->destroy_value();
 1047|  28.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  28.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  28.8k|    {
  504|  28.8k|        scn::detail::construct_at(&get_unexpected(),
  505|  28.8k|                                  std::forward<Args>(args)...);
  506|  28.8k|        m_has_value = false;
  507|  28.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  28.8k|    {
  473|  28.8k|        return m_unexpected;
  474|  28.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  28.8k|    {
  481|  28.8k|        return std::move(m_unexpected);
  482|  28.8k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJiEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8782|  29.4k|    {
 8783|  29.4k|        return m_str;
 8784|  29.4k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|  29.4k|        : m_str(r.str)
 8778|  29.4k|    {
 8779|  29.4k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEcvbEv:
 1739|  30.8k|    {
 1740|  30.8k|        return has_value();
 1741|  30.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEptEv:
 1814|  34.6k|    {
 1815|  34.6k|        return &value();
 1816|  34.6k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|  34.6k|    {
 1769|  34.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  34.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  34.6k|        return this->get_value();
 1771|  34.6k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJjEEEDav:
 9660|  30.7k|{
 9661|  30.7k|    return scan_result_type<Source, Args...>();
 9662|  30.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEC2Ev:
 1551|  30.7k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EEC2Ev:
  426|  30.7k|        : m_value(T{}), m_has_value(true)
  427|  30.7k|    {
  428|  30.7k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJjEEC2Ev:
 6610|  30.7k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9645|  30.7k|{
 9646|  30.7k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  30.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 28.8k, False: 1.82k]
  |  |  ------------------
  ------------------
 9647|  28.8k|        out = unexpected(in.error());
 9648|  28.8k|    }
 9649|  1.82k|    else {
 9650|  1.82k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  1.82k|    static_cast<    \
  |  |  935|  1.82k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|  1.82k|    }
 9652|  30.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  28.8k|        : base(unexpect, std::move(e.error())),
 1616|  28.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  28.8k|    {
 1618|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  28.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  28.8k|          m_has_value(false)
  451|  28.8k|    {
  452|  28.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  28.8k|    {
 1316|  28.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEaSEOSI_:
 1556|  28.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorEvEaSEOSJ_:
  902|  28.8k|    {
  903|  28.8k|        assign_common(std::move(other));
  904|  28.8k|        return *this;
  905|  28.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  28.8k|    {
  950|  28.8k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 28.8k, False: 0]
  ------------------
  951|  28.8k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 28.8k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  28.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  28.8k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   122k|    {
  490|   122k|        return m_has_value;
  491|   122k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  34.3k|    {
  456|  34.3k|        return m_value;
  457|  34.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  28.8k|    {
 1046|  28.8k|        this->destroy_value();
 1047|  28.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  28.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  28.8k|    {
  504|  28.8k|        scn::detail::construct_at(&get_unexpected(),
  505|  28.8k|                                  std::forward<Args>(args)...);
  506|  28.8k|        m_has_value = false;
  507|  28.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  28.8k|    {
  473|  28.8k|        return m_unexpected;
  474|  28.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  28.8k|    {
  481|  28.8k|        return std::move(m_unexpected);
  482|  28.8k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJjEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8782|  29.3k|    {
 8783|  29.3k|        return m_str;
 8784|  29.3k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|  29.3k|        : m_str(r.str)
 8778|  29.3k|    {
 8779|  29.3k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEcvbEv:
 1739|  30.7k|    {
 1740|  30.7k|        return has_value();
 1741|  30.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEptEv:
 1814|  34.3k|    {
 1815|  34.3k|        return &value();
 1816|  34.3k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|  34.3k|    {
 1769|  34.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  34.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  34.3k|        return this->get_value();
 1771|  34.3k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJxEEEDav:
 9660|  30.9k|{
 9661|  30.9k|    return scan_result_type<Source, Args...>();
 9662|  30.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEC2Ev:
 1551|  30.9k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EEC2Ev:
  426|  30.9k|        : m_value(T{}), m_has_value(true)
  427|  30.9k|    {
  428|  30.9k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJxEEC2Ev:
 6610|  30.9k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9645|  30.9k|{
 9646|  30.9k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  30.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 28.8k, False: 2.05k]
  |  |  ------------------
  ------------------
 9647|  28.8k|        out = unexpected(in.error());
 9648|  28.8k|    }
 9649|  2.05k|    else {
 9650|  2.05k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  2.05k|    static_cast<    \
  |  |  935|  2.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|  2.05k|    }
 9652|  30.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  28.8k|        : base(unexpect, std::move(e.error())),
 1616|  28.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  28.8k|    {
 1618|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  28.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  28.8k|          m_has_value(false)
  451|  28.8k|    {
  452|  28.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  28.8k|    {
 1316|  28.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEaSEOSI_:
 1556|  28.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorEvEaSEOSJ_:
  902|  28.8k|    {
  903|  28.8k|        assign_common(std::move(other));
  904|  28.8k|        return *this;
  905|  28.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  28.8k|    {
  950|  28.8k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 28.8k, False: 0]
  ------------------
  951|  28.8k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 28.8k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  28.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  28.8k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   123k|    {
  490|   123k|        return m_has_value;
  491|   123k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  35.0k|    {
  456|  35.0k|        return m_value;
  457|  35.0k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  28.8k|    {
 1046|  28.8k|        this->destroy_value();
 1047|  28.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  28.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  28.8k|    {
  504|  28.8k|        scn::detail::construct_at(&get_unexpected(),
  505|  28.8k|                                  std::forward<Args>(args)...);
  506|  28.8k|        m_has_value = false;
  507|  28.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  28.8k|    {
  473|  28.8k|        return m_unexpected;
  474|  28.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  28.8k|    {
  481|  28.8k|        return std::move(m_unexpected);
  482|  28.8k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJxEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8782|  29.5k|    {
 8783|  29.5k|        return m_str;
 8784|  29.5k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJxEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|  29.5k|        : m_str(r.str)
 8778|  29.5k|    {
 8779|  29.5k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEcvbEv:
 1739|  30.9k|    {
 1740|  30.9k|        return has_value();
 1741|  30.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEptEv:
 1814|  35.0k|    {
 1815|  35.0k|        return &value();
 1816|  35.0k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|  35.0k|    {
 1769|  35.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  35.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  35.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  35.0k|        return this->get_value();
 1771|  35.0k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJyEEEDav:
 9660|  30.8k|{
 9661|  30.8k|    return scan_result_type<Source, Args...>();
 9662|  30.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEC2Ev:
 1551|  30.8k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EEC2Ev:
  426|  30.8k|        : m_value(T{}), m_has_value(true)
  427|  30.8k|    {
  428|  30.8k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJyEEC2Ev:
 6610|  30.8k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9645|  30.8k|{
 9646|  30.8k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  30.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 28.8k, False: 1.91k]
  |  |  ------------------
  ------------------
 9647|  28.8k|        out = unexpected(in.error());
 9648|  28.8k|    }
 9649|  1.91k|    else {
 9650|  1.91k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  1.91k|    static_cast<    \
  |  |  935|  1.91k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|  1.91k|    }
 9652|  30.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  28.8k|        : base(unexpect, std::move(e.error())),
 1616|  28.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  28.8k|    {
 1618|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  28.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  28.8k|          m_has_value(false)
  451|  28.8k|    {
  452|  28.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  28.8k|    {
 1316|  28.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEaSEOSI_:
 1556|  28.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorEvEaSEOSJ_:
  902|  28.8k|    {
  903|  28.8k|        assign_common(std::move(other));
  904|  28.8k|        return *this;
  905|  28.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  28.8k|    {
  950|  28.8k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 28.8k, False: 0]
  ------------------
  951|  28.8k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 28.8k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  28.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  28.8k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   123k|    {
  490|   123k|        return m_has_value;
  491|   123k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  34.6k|    {
  456|  34.6k|        return m_value;
  457|  34.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  28.8k|    {
 1046|  28.8k|        this->destroy_value();
 1047|  28.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  28.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  28.8k|    {
  504|  28.8k|        scn::detail::construct_at(&get_unexpected(),
  505|  28.8k|                                  std::forward<Args>(args)...);
  506|  28.8k|        m_has_value = false;
  507|  28.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  28.8k|    {
  473|  28.8k|        return m_unexpected;
  474|  28.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  28.8k|    {
  481|  28.8k|        return std::move(m_unexpected);
  482|  28.8k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJyEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8782|  29.3k|    {
 8783|  29.3k|        return m_str;
 8784|  29.3k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJyEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|  29.3k|        : m_str(r.str)
 8778|  29.3k|    {
 8779|  29.3k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEcvbEv:
 1739|  30.8k|    {
 1740|  30.8k|        return has_value();
 1741|  30.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEptEv:
 1814|  34.6k|    {
 1815|  34.6k|        return &value();
 1816|  34.6k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|  34.6k|    {
 1769|  34.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  34.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  34.6k|        return this->get_value();
 1771|  34.6k|    }
_ZN3scn2v410scan_errorC2ENS1_4codeEPKc:
 3740|   718k|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3741|   718k|    {
 3742|   718k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  915|   718k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3743|   718k|    }
_ZN3scn2v46detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3975|   592k|{
 3976|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3977|       |                                          const CharT*, const CharT*>) {
 3978|       |        return {first, last};
 3979|       |    }
 3980|   592k|    else {
 3981|   592k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3982|   592k|    }
 3983|   592k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3479|  10.5M|    {
 3480|  10.5M|        return m_iterator;
 3481|  10.5M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3479|  36.6M|    {
 3480|  36.6M|        return m_iterator;
 3481|  36.6M|    }
_ZNK3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE9has_valueEv:
  571|  5.87M|    {
  572|  5.87M|        return m_has_value;
  573|  5.87M|    }
_ZNR3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE14get_unexpectedEv:
  554|   578k|    {
  555|   578k|        return m_unexpected;
  556|   578k|    }
_ZNR3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1745|   445k|    {
 1746|   445k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   445k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   445k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   445k|        return this->get_unexpected().error();
 1748|   445k|    }
_ZNK3scn2v46detail12format_specs8get_baseEv:
 6976|   853k|    {
 6977|   853k|        SCN_GCC_COMPAT_PUSH
 6978|   853k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 6979|   853k|        switch (type) {
 6980|   169k|            case presentation_type::none:
  ------------------
  |  Branch (6980:13): [True: 169k, False: 684k]
  ------------------
 6981|   169k|                return 10;
 6982|   175k|            case presentation_type::int_generic:
  ------------------
  |  Branch (6982:13): [True: 175k, False: 678k]
  ------------------
 6983|   175k|                return 0;
 6984|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (6984:13): [True: 0, False: 853k]
  ------------------
 6985|      0|                return arbitrary_base;
 6986|       |
 6987|  76.7k|            case presentation_type::int_binary:
  ------------------
  |  Branch (6987:13): [True: 76.7k, False: 776k]
  ------------------
 6988|  76.7k|                return 2;
 6989|   110k|            case presentation_type::int_octal:
  ------------------
  |  Branch (6989:13): [True: 110k, False: 742k]
  ------------------
 6990|   110k|                return 8;
 6991|   157k|            case presentation_type::int_decimal:
  ------------------
  |  Branch (6991:13): [True: 157k, False: 695k]
  ------------------
 6992|   157k|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (6992:13): [True: 0, False: 853k]
  ------------------
 6993|   157k|                return 10;
 6994|   164k|            case presentation_type::int_hex:
  ------------------
  |  Branch (6994:13): [True: 164k, False: 689k]
  ------------------
 6995|   164k|                return 16;
 6996|       |
 6997|      0|            default:
  ------------------
  |  Branch (6997:13): [True: 0, False: 853k]
  ------------------
 6998|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6999|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7000|   853k|        }
 7001|   853k|        SCN_GCC_COMPAT_POP
 7002|   853k|    }
_ZN3scn2v46detail12specs_setterC2ERNS1_12format_specsE:
 7014|  1.02M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v46detail12specs_setter7on_typeENS1_17presentation_typeE:
 7058|   750k|    {
 7059|   750k|        m_specs.type = type;
 7060|   750k|    }
_ZN3scn2v46detail12specs_setter8on_errorEPKc:
 7120|  99.0k|    {
 7121|  99.0k|        SCN_UNLIKELY_ATTR
 7122|  99.0k|        m_error = unexpected_scan_error(scan_error::invalid_format_string, msg);
 7123|  99.0k|    }
_ZNK3scn2v46detail12specs_setter9get_errorEv:
 7131|   924k|    {
 7132|   924k|        return m_error;
 7133|   924k|    }
_ZN3scn2v46detail21unexpected_scan_errorENS0_10scan_error4codeEPKc:
 3917|   592k|{
 3918|   592k|    return unexpected(scan_error{c, m});
 3919|   592k|}
_ZN3scn2v46detail11is_cp_spaceEDi:
 4307|  1.07M|{
 4308|       |    // Pattern_White_Space property
 4309|  1.07M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4309:13): [True: 939k, False: 130k]
  |  Branch (4309:27): [True: 378k, False: 561k]
  ------------------
 4310|  1.07M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4310:12): [True: 9.25k, False: 682k]
  ------------------
 4311|  1.07M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4311:12): [True: 3.48k, False: 678k]
  ------------------
 4312|  1.07M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4312:12): [True: 1.56k, False: 677k]
  ------------------
 4313|  1.07M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4313:12): [True: 2.08k, False: 675k]
  ------------------
 4314|  1.07M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4314:12): [True: 2.41k, False: 672k]
  ------------------
 4315|  1.07M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4315:12): [True: 0, False: 672k]
  ------------------
 4316|  1.07M|}
_ZN3scn2v46detail25get_category_for_arg_typeENS1_8arg_typeE:
 7814|   173k|{
 7815|   173k|    switch (type) {
 7816|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7816:9): [True: 0, False: 173k]
  ------------------
 7817|      0|            return arg_type_category::none;
 7818|       |
 7819|  27.0k|        case arg_type::schar_type:
  ------------------
  |  Branch (7819:9): [True: 27.0k, False: 146k]
  ------------------
 7820|  27.0k|        case arg_type::short_type:
  ------------------
  |  Branch (7820:9): [True: 0, False: 173k]
  ------------------
 7821|  60.2k|        case arg_type::int_type:
  ------------------
  |  Branch (7821:9): [True: 33.2k, False: 140k]
  ------------------
 7822|  60.2k|        case arg_type::long_type:
  ------------------
  |  Branch (7822:9): [True: 0, False: 173k]
  ------------------
 7823|  94.0k|        case arg_type::llong_type:
  ------------------
  |  Branch (7823:9): [True: 33.7k, False: 140k]
  ------------------
 7824|  94.0k|            return arg_type_category::integer;
 7825|       |
 7826|  23.4k|        case arg_type::uchar_type:
  ------------------
  |  Branch (7826:9): [True: 23.4k, False: 150k]
  ------------------
 7827|  23.4k|        case arg_type::ushort_type:
  ------------------
  |  Branch (7827:9): [True: 0, False: 173k]
  ------------------
 7828|  51.4k|        case arg_type::uint_type:
  ------------------
  |  Branch (7828:9): [True: 28.0k, False: 145k]
  ------------------
 7829|  51.4k|        case arg_type::ulong_type:
  ------------------
  |  Branch (7829:9): [True: 0, False: 173k]
  ------------------
 7830|  79.8k|        case arg_type::ullong_type:
  ------------------
  |  Branch (7830:9): [True: 28.3k, False: 145k]
  ------------------
 7831|  79.8k|            return arg_type_category::unsigned_integer;
 7832|       |
 7833|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7833:9): [True: 0, False: 173k]
  ------------------
 7834|      0|            return arg_type_category::pointer;
 7835|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7835:9): [True: 0, False: 173k]
  ------------------
 7836|      0|            return arg_type_category::boolean;
 7837|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7837:9): [True: 0, False: 173k]
  ------------------
 7838|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7838:9): [True: 0, False: 173k]
  ------------------
 7839|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7839:9): [True: 0, False: 173k]
  ------------------
 7840|      0|            return arg_type_category::character;
 7841|       |
 7842|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7842:9): [True: 0, False: 173k]
  ------------------
 7843|      0|        case arg_type::double_type:
  ------------------
  |  Branch (7843:9): [True: 0, False: 173k]
  ------------------
 7844|      0|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7844:9): [True: 0, False: 173k]
  ------------------
 7845|      0|            return arg_type_category::floating;
 7846|       |
 7847|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7847:9): [True: 0, False: 173k]
  ------------------
 7848|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7848:9): [True: 0, False: 173k]
  ------------------
 7849|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7849:9): [True: 0, False: 173k]
  ------------------
 7850|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7850:9): [True: 0, False: 173k]
  ------------------
 7851|      0|            return arg_type_category::string;
 7852|       |
 7853|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7853:9): [True: 0, False: 173k]
  ------------------
 7854|      0|            return arg_type_category::custom;
 7855|       |
 7856|      0|            SCN_CLANG_PUSH
 7857|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7858|      0|        default:
  ------------------
  |  Branch (7858:9): [True: 0, False: 173k]
  ------------------
 7859|      0|            SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7860|   173k|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7861|   173k|            SCN_CLANG_POP
 7862|   173k|    }
 7863|       |
 7864|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7865|   173k|}
_ZNO3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1755|   133k|    {
 1756|   133k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   133k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   133k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|   133k|        return std::move(this->get_unexpected().error());
 1758|   133k|    }
_ZN3scn2v46detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7900|   874k|{
 7901|   874k|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  |  865|   874k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 874k]
  |  |  ------------------
  ------------------
 7902|      0|        return handler.on_error("Invalid type specifier for integer type");
 7903|      0|    }
 7904|   874k|    if (specs.localized) {
  ------------------
  |  Branch (7904:9): [True: 173k, False: 700k]
  ------------------
 7905|   173k|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  |  865|   173k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 173k]
  |  |  ------------------
  ------------------
 7906|       |            // clang-format off
 7907|      0|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 7908|       |            // clang-format on
 7909|      0|            return;
 7910|      0|        }
 7911|   173k|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  |  865|   173k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 173k]
  |  |  ------------------
  ------------------
 7912|       |            // clang-format off
 7913|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 7914|       |            // clang-format on
 7915|      0|        }
 7916|   173k|    }
 7917|   874k|}
_ZNK3scn2v48expectedIvNS0_10scan_errorEEcvbEv:
 1739|  5.29M|    {
 1740|  5.29M|        return has_value();
 1741|  5.29M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4472|  62.0M|    {
 4473|  62.0M|        assert(m_begin);
 4474|  62.0M|        return m_end == nullptr;
 4475|  62.0M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4489|  1.41M|    {
 4490|  1.41M|        if (!stores_parent()) {
  ------------------
  |  Branch (4490:13): [True: 0, False: 1.41M]
  ------------------
 4491|      0|            return make_string_view_from_pointers(
 4492|      0|                static_cast<const CharT*>(m_begin) + position(),
 4493|      0|                static_cast<const CharT*>(m_end));
 4494|      0|        }
 4495|  1.41M|        return parent()->get_segment_starting_at(position());
 4496|  1.41M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4483|  34.1M|    {
 4484|  34.1M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|  34.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4485|  34.1M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4486|  34.1M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4376|  1.41M|    {
 4377|  1.41M|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  1.41M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 377k, False: 1.03M]
  |  |  ------------------
  ------------------
 4378|  1.41M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4379|   377k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4380|   377k|        }
 4381|  1.03M|        const auto start = pos - m_putback_buffer.size();
 4382|  1.03M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  930|  1.03M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.03M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4383|  1.03M|        return m_current_view.substr(start);
 4384|  1.03M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4478|   336k|    {
 4479|   336k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|   336k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   336k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4480|   336k|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4481|   336k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4467|  2.18M|    {
 4468|  2.18M|        return m_position;
 4469|  2.18M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE13is_contiguousEv:
 4398|  1.34M|    {
 4399|  1.34M|        return m_is_contiguous;
 4400|  1.34M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4472|   139G|    {
 4473|   139G|        assert(m_begin);
 4474|   139G|        return m_end == nullptr;
 4475|   139G|    }
_ZN3scn2v46detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3975|  21.9k|{
 3976|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3977|       |                                          const CharT*, const CharT*>) {
 3978|       |        return {first, last};
 3979|       |    }
 3980|  21.9k|    else {
 3981|  21.9k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3982|  21.9k|    }
 3983|  21.9k|}
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4489|   137k|    {
 4490|   137k|        if (!stores_parent()) {
  ------------------
  |  Branch (4490:13): [True: 0, False: 137k]
  ------------------
 4491|      0|            return make_string_view_from_pointers(
 4492|      0|                static_cast<const CharT*>(m_begin) + position(),
 4493|      0|                static_cast<const CharT*>(m_end));
 4494|      0|        }
 4495|   137k|        return parent()->get_segment_starting_at(position());
 4496|   137k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4483|  69.5G|    {
 4484|  69.5G|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|  69.5G|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  69.5G|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4485|  69.5G|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4486|  69.5G|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4376|   137k|    {
 4377|   137k|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.71k, False: 135k]
  |  |  ------------------
  ------------------
 4378|   137k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4379|  2.71k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4380|  2.71k|        }
 4381|   135k|        const auto start = pos - m_putback_buffer.size();
 4382|   135k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  930|   135k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   135k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4383|   135k|        return m_current_view.substr(start);
 4384|   135k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4478|   100k|    {
 4479|   100k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|   100k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   100k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4480|   100k|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4481|   100k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4467|   242k|    {
 4468|   242k|        return m_position;
 4469|   242k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE13is_contiguousEv:
 4398|   545k|    {
 4399|   545k|        return m_is_contiguous;
 4400|   545k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3333|  1.76M|    {
 3334|  1.76M|        return static_cast<D&>(*this);
 3335|  1.76M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3374|  1.76M|    {
 3375|  1.76M|        return detail::to_address(ranges::begin(derived()));
 3376|  1.76M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3333|   420k|    {
 3334|   420k|        return static_cast<D&>(*this);
 3335|   420k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3374|   420k|    {
 3375|   420k|        return detail::to_address(ranges::begin(derived()));
 3376|   420k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5rangeEv:
 8979|   330k|    {
 8980|   330k|        return ranges::subrange{begin(), end()};
 8981|   330k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE3endEv:
 8971|   330k|    {
 8972|   330k|        return ranges::default_sentinel;
 8973|   330k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3464|  3.44M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  3.44M|    static_cast<    \
  |  |  935|  3.44M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  3.44M|    static_cast<    \
  |  |  935|  3.44M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  3.44M|    {
 3466|  3.44M|    }
_ZN3scn2v46detail10locale_refC2Ev:
 8798|   832k|    constexpr locale_ref() = default;
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|   424k|    {
 1979|   424k|        return detail::transform_error_impl(std::move(*this),
 1980|   424k|                                            std::forward<F>(f));
 1981|   424k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|   424k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   424k|    else {
 1472|   424k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   424k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   424k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 412k, False: 12.0k]
  |  |  ------------------
  ------------------
 1474|   424k|                   ? result(*std::forward<Exp>(exp))
 1475|   424k|                   : result(unexpect,
 1476|  12.0k|                            trivial_invoke(std::forward<F>(f),
 1477|  12.0k|                                           std::forward<Exp>(exp).error()));
 1478|   424k|    }
 1479|   424k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  2.14M|    {
  490|  2.14M|        return m_has_value;
  491|  2.14M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|   738k|    {
 1805|   738k|        return std::move(value());
 1806|   738k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|   834k|    {
 1769|   834k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   834k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   834k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   834k|        return this->get_value();
 1771|   834k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  455|   834k|    {
  456|   834k|        return m_value;
  457|   834k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1569|  1.33M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.33M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.33M|    {
 1572|  1.33M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  1.33M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.33M|    {
  442|  1.33M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.48M|    {
 1316|  1.48M|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1349|  26.7k|{
 1350|  26.7k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|  26.7k|}
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1755|  23.4k|    {
 1756|  23.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  23.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  23.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  23.4k|        return std::move(this->get_unexpected().error());
 1758|  23.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  23.8k|    {
  473|  23.8k|        return m_unexpected;
  474|  23.8k|    }
_ZNR3scn2v410unexpectedINS0_4impl9eof_errorEE5errorEv:
  364|   153k|    {
  365|   153k|        return m_unexpected;
  366|   153k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1625|  40.2k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  40.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  40.2k|    {
 1628|  40.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|   142k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   142k|          m_has_value(false)
  451|   142k|    {
  452|   142k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5rangeEv:
 8979|   106k|    {
 8980|   106k|        return ranges::subrange{begin(), end()};
 8981|   106k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE3endEv:
 8971|   106k|    {
 8972|   106k|        return ranges::default_sentinel;
 8973|   106k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3464|   949k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   949k|    static_cast<    \
  |  |  935|   949k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   949k|    static_cast<    \
  |  |  935|   949k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   949k|    {
 3466|   949k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|   132k|    {
 1979|   132k|        return detail::transform_error_impl(std::move(*this),
 1980|   132k|                                            std::forward<F>(f));
 1981|   132k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|   132k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   132k|    else {
 1472|   132k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   132k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   132k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 130k, False: 1.78k]
  |  |  ------------------
  ------------------
 1474|   132k|                   ? result(*std::forward<Exp>(exp))
 1475|   132k|                   : result(unexpect,
 1476|  1.78k|                            trivial_invoke(std::forward<F>(f),
 1477|  1.78k|                                           std::forward<Exp>(exp).error()));
 1478|   132k|    }
 1479|   132k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  489|   636k|    {
  490|   636k|        return m_has_value;
  491|   636k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|   211k|    {
 1805|   211k|        return std::move(value());
 1806|   211k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|   219k|    {
 1769|   219k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   219k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   219k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   219k|        return this->get_value();
 1771|   219k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  455|   219k|    {
  456|   219k|        return m_value;
  457|   219k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1569|   149k|        : base(std::in_place, std::forward<U>(val)),
 1570|   149k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   149k|    {
 1572|   149k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|   149k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   149k|    {
  442|   149k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   478k|    {
 1316|   478k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1755|  20.6k|    {
 1756|  20.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  20.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  20.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  20.6k|        return std::move(this->get_unexpected().error());
 1758|  20.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  20.7k|    {
  473|  20.7k|        return m_unexpected;
  474|  20.7k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1625|   106k|        : base(unexpect, std::forward<Args>(args)...),
 1626|   106k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|   106k|    {
 1628|   106k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|   328k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   328k|          m_has_value(false)
  451|   328k|    {
  452|   328k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  349|   592k|        : m_unexpected(std::forward<Err>(e))
  350|   592k|    {
  351|   592k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|   592k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|   592k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1615|   520k|        : base(unexpect, std::move(e.error())),
 1616|   520k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   520k|    {
 1618|   520k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  449|   520k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   520k|          m_has_value(false)
  451|   520k|    {
  452|   520k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.26M|    {
 1316|  1.26M|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1615|   159k|        : base(unexpect, std::move(e.error())),
 1616|   159k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   159k|    {
 1618|   159k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|   171k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   171k|          m_has_value(false)
  451|   171k|    {
  452|   171k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  2.67M|    {
 1316|  2.67M|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1569|  2.50M|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.50M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.50M|    {
 1572|  2.50M|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  2.50M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.50M|    {
  442|  2.50M|    }
_ZNK3scn2v48expectedIPKcNS0_10scan_errorEEcvbEv:
 1739|  2.67M|    {
 1740|  2.67M|        return has_value();
 1741|  2.67M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  489|  5.35M|    {
  490|  5.35M|        return m_has_value;
  491|  5.35M|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5errorEv:
 1745|   171k|    {
 1746|   171k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   171k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   171k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   171k|        return this->get_unexpected().error();
 1748|   171k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   171k|    {
  473|   171k|        return m_unexpected;
  474|   171k|    }
_ZNO3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|  2.22M|    {
 1805|  2.22M|        return std::move(value());
 1806|  2.22M|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|  2.50M|    {
 1769|  2.50M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.50M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.50M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.50M|        return this->get_value();
 1771|  2.50M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  455|  2.50M|    {
  456|  2.50M|        return m_value;
  457|  2.50M|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1615|   339k|        : base(unexpect, std::move(e.error())),
 1616|   339k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   339k|    {
 1618|   339k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|   340k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   340k|          m_has_value(false)
  451|   340k|    {
  452|   340k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   627k|    {
 1316|   627k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1569|   286k|        : base(std::in_place, std::forward<U>(val)),
 1570|   286k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   286k|    {
 1572|   286k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|   286k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   286k|    {
  442|   286k|    }
_ZNK3scn2v48expectedIPKwNS0_10scan_errorEEcvbEv:
 1739|   627k|    {
 1740|   627k|        return has_value();
 1741|   627k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  489|  1.25M|    {
  490|  1.25M|        return m_has_value;
  491|  1.25M|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5errorEv:
 1745|   340k|    {
 1746|   340k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   340k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   340k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   340k|        return this->get_unexpected().error();
 1748|   340k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   340k|    {
  473|   340k|        return m_unexpected;
  474|   340k|    }
_ZNO3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|   278k|    {
 1805|   278k|        return std::move(value());
 1806|   278k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|   286k|    {
 1769|   286k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   286k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   286k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   286k|        return this->get_value();
 1771|   286k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  455|   286k|    {
  456|   286k|        return m_value;
  457|   286k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|   425k|    {
 1979|   425k|        return detail::transform_error_impl(std::move(*this),
 1980|   425k|                                            std::forward<F>(f));
 1981|   425k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|   425k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   425k|    else {
 1472|   425k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   425k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   425k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 414k, False: 11.1k]
  |  |  ------------------
  ------------------
 1474|   425k|                   ? result(*std::forward<Exp>(exp))
 1475|   425k|                   : result(unexpect,
 1476|  11.1k|                            trivial_invoke(std::forward<F>(f),
 1477|  11.1k|                                           std::forward<Exp>(exp).error()));
 1478|   425k|    }
 1479|   425k|}
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  1.47M|    {
  490|  1.47M|        return m_has_value;
  491|  1.47M|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|   414k|    {
 1805|   414k|        return std::move(value());
 1806|   414k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|   510k|    {
 1769|   510k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   510k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   510k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   510k|        return this->get_value();
 1771|   510k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|   510k|    {
  456|   510k|        return m_value;
  457|   510k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1755|  11.1k|    {
 1756|  11.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  11.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  11.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  11.1k|        return std::move(this->get_unexpected().error());
 1758|  11.1k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  11.5k|    {
  473|  11.5k|        return m_unexpected;
  474|  11.5k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1625|  11.1k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  11.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  11.1k|    {
 1628|  11.1k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5beginEv:
 8963|   967k|    {
 8964|   967k|        return m_current;
 8965|   967k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE6localeEv:
 8856|   660k|    {
 8857|   660k|        return m_locale;
 8858|   660k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2ES7_NS1_10locale_refE:
 8862|   710k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   710k|    static_cast<    \
  |  |  935|   710k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   710k|    static_cast<    \
  |  |  935|   710k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8863|   710k|    {
 8864|   710k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|   101k|        : base(unexpect, std::move(e.error())),
 1616|   101k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   101k|    {
 1618|   101k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5beginEv:
 8963|   271k|    {
 8964|   271k|        return m_current;
 8965|   271k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE6localeEv:
 8856|   213k|    {
 8857|   213k|        return m_locale;
 8858|   213k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2ES7_NS1_10locale_refE:
 8862|   313k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   313k|    static_cast<    \
  |  |  935|   313k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   313k|    static_cast<    \
  |  |  935|   313k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8863|   313k|    {
 8864|   313k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|   221k|        : base(unexpect, std::move(e.error())),
 1616|   221k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   221k|    {
 1618|   221k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1615|   777k|        : base(unexpect, std::move(e.error())),
 1616|   777k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   777k|    {
 1618|   777k|    }
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  548|   777k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  549|   777k|          m_has_value(false)
  550|   777k|    {
  551|   777k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIvNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   777k|    {
 1316|   777k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2Ev:
 1551|  4.52M|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2Ev:
  528|  4.52M|        : m_deferred_init(), m_has_value(true)
  529|  4.52M|    {
  530|  4.52M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4558|  2.29M|    {
 4559|  2.29M|        return x.is_at_end();
 4560|  2.29M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4602|  4.86M|    {
 4603|  4.86M|        if (m_end) {
  ------------------
  |  Branch (4603:13): [True: 0, False: 4.86M]
  ------------------
 4604|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4605|      0|        }
 4606|  4.86M|        if (!m_begin) {
  ------------------
  |  Branch (4606:13): [True: 0, False: 4.86M]
  ------------------
 4607|      0|            return true;
 4608|      0|        }
 4609|  4.86M|        return !read_at_position();
 4610|  4.86M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4582|  19.7M|    {
 4583|  19.7M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  19.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  19.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4584|       |
 4585|  19.7M|        if (!stores_parent()) {
  ------------------
  |  Branch (4585:13): [True: 0, False: 19.7M]
  ------------------
 4586|      0|            return true;
 4587|      0|        }
 4588|       |
 4589|  19.7M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  864|  19.7M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 17.3M, False: 2.32M]
  |  |  ------------------
  ------------------
 4590|  17.3M|            return true;
 4591|  17.3M|        }
 4592|       |
 4593|  4.51M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4593:16): [True: 2.32M, False: 2.18M]
  ------------------
 4594|  2.32M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4594:17): [True: 143k, False: 2.18M]
  ------------------
 4595|   143k|                return false;
 4596|   143k|            }
 4597|  2.32M|        }
 4598|  2.18M|        return true;
 4599|  2.32M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4517|  6.15M|    {
 4518|  6.15M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  6.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4519|       |
 4520|  6.15M|        if (!stores_parent()) {
  ------------------
  |  Branch (4520:13): [True: 0, False: 6.15M]
  ------------------
 4521|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4522|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4523|      0|            return *ptr;
 4524|      0|        }
 4525|       |
 4526|  6.15M|        auto res = read_at_position();
 4527|  6.15M|        SCN_EXPECT(res);
  ------------------
  |  |  930|  6.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4528|  6.15M|        return parent()->get_character_at(m_position);
 4529|  6.15M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16get_character_atEl:
 4387|  6.15M|    {
 4388|  6.15M|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  6.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.91M, False: 2.24M]
  |  |  ------------------
  ------------------
 4389|  6.15M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4390|  3.91M|            return m_putback_buffer[pos];
 4391|  3.91M|        }
 4392|  2.24M|        const auto start = pos - m_putback_buffer.size();
 4393|  2.24M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  930|  2.24M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.24M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4394|  2.24M|        return m_current_view[start];
 4395|  2.24M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1569|  1.25M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.25M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.25M|    {
 1572|  1.25M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  1.25M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.25M|    {
  442|  1.25M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.28M|    {
 1316|  1.28M|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  349|  49.1k|        : m_unexpected(std::forward<Err>(e))
  350|  49.1k|    {
  351|  49.1k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  49.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  49.1k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|  23.8k|        : base(unexpect, std::move(e.error())),
 1616|  23.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  23.8k|    {
 1618|  23.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  23.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  23.8k|          m_has_value(false)
  451|  23.8k|    {
  452|  23.8k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  358|  76.8k|        : m_unexpected(std::forward<Args>(args)...)
  359|  76.8k|    {
  360|  76.8k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  76.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  76.8k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4503|  8.68M|    {
 4504|  8.68M|        ++m_position;
 4505|  8.68M|        (void)read_at_position();
 4506|  8.68M|        return *this;
 4507|  8.68M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1739|   520k|    {
 1740|   520k|        return has_value();
 1741|   520k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1794|  96.3k|    {
 1795|  96.3k|        return value();
 1796|  96.3k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4552|  5.46M|    {
 4553|  5.46M|        return !(lhs == rhs);
 4554|  5.46M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4547|  5.77M|    {
 4548|  5.77M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4548:16): [True: 5.77M, False: 0]
  |  Branch (4548:46): [True: 531k, False: 5.24M]
  ------------------
 4549|  5.77M|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  349|  27.6k|        : m_unexpected(std::forward<Err>(e))
  350|  27.6k|    {
  351|  27.6k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  27.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  27.6k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|  9.70k|        : base(unexpect, std::move(e.error())),
 1616|  9.70k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  9.70k|    {
 1618|  9.70k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|  9.70k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  9.70k|          m_has_value(false)
  451|  9.70k|    {
  452|  9.70k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   604k|    {
 1316|   604k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   595k|        : base(std::in_place, std::forward<U>(val)),
 1570|   595k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   595k|    {
 1572|   595k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  440|   595k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   595k|    {
  442|   595k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1739|   604k|    {
 1740|   604k|        return has_value();
 1741|   604k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.20M|    {
  490|  1.20M|        return m_has_value;
  491|  1.20M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1745|  9.70k|    {
 1746|  9.70k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  9.70k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.70k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  9.70k|        return this->get_unexpected().error();
 1748|  9.70k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  9.70k|    {
  473|  9.70k|        return m_unexpected;
  474|  9.70k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|   595k|    {
 1805|   595k|        return std::move(value());
 1806|   595k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|   595k|    {
 1769|   595k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   595k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   595k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   595k|        return this->get_value();
 1771|   595k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  455|   595k|    {
  456|   595k|        return m_value;
  457|   595k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3483|  7.52M|    {
 3484|  7.52M|        return m_sentinel;
 3485|  7.52M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  349|  12.5k|        : m_unexpected(std::forward<Err>(e))
  350|  12.5k|    {
  351|  12.5k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  12.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  12.5k|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_errorEE5errorEv:
  364|  1.20M|    {
  365|  1.20M|        return m_unexpected;
  366|  1.20M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  358|   110k|        : m_unexpected(std::forward<Args>(args)...)
  359|   110k|    {
  360|   110k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|   110k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|   110k|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  349|  2.30M|        : m_unexpected(std::forward<Err>(e))
  350|  2.30M|    {
  351|  2.30M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  2.30M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  2.30M|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  364|  2.30M|    {
  365|  2.30M|        return m_unexpected;
  366|  2.30M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  358|  2.30M|        : m_unexpected(std::forward<Args>(args)...)
  359|  2.30M|    {
  360|  2.30M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  2.30M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  2.30M|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1349|  49.1k|{
 1350|  49.1k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|  49.1k|}
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  349|  49.1k|        : m_unexpected(std::forward<Err>(e))
  350|  49.1k|    {
  351|  49.1k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  49.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  49.1k|    }
_ZN3scn2v46detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JS8_EvEEDcOT_DpOT0_:
 1349|   133k|{
 1350|   133k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|   133k|}
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  395|  27.7k|{
  396|  27.7k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  27.7k|        T(std::forward<Args>(args)...);
  398|  27.7k|}
_ZNK3scn2v46ranges6detail6ssize_2fnclIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSF_:
 3106|   124k|    {
 3107|   124k|        return fn::impl(std::forward<T>(t));
 3108|   124k|    }
_ZN3scn2v46ranges6detail6ssize_2fn4implIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISF_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSF_EEEEE15difference_typeEE4typeELm8EElSO_E4typeE_EEOSF_:
 3097|   124k|    {
 3098|   124k|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 3099|   124k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSF_:
 3074|   124k|    {
 3075|   124k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   124k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESG_E4typeEOSH_NS0_6detail12priority_tagILm2EEE:
 3040|   124k|    {
 3041|   124k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   124k|    }
_ZN3scn2v46detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  401|  27.7k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  27.7k|    else {
  408|  27.7k|        p->~T();
  409|  27.7k|    }
  410|  27.7k|}
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1745|    360|    {
 1746|    360|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    360|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    360|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|    360|        return this->get_unexpected().error();
 1748|    360|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|  11.8k|        : base(unexpect, std::move(e.error())),
 1616|  11.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  11.8k|    {
 1618|  11.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  23.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  23.2k|          m_has_value(false)
  451|  23.2k|    {
  452|  23.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.61M|    {
 1316|  1.61M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1569|   139k|        : base(std::in_place, std::forward<U>(val)),
 1570|   139k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   139k|    {
 1572|   139k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  440|   139k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   139k|    {
  442|   139k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|   840k|        : base(unexpect, std::move(e.error())),
 1616|   840k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   840k|    {
 1618|   840k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|   840k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   840k|          m_has_value(false)
  451|   840k|    {
  452|   840k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1739|  1.30M|    {
 1740|  1.30M|        return has_value();
 1741|  1.30M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  489|  2.75M|    {
  490|  2.75M|        return m_has_value;
  491|  2.75M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1745|   369k|    {
 1746|   369k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   369k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   369k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   369k|        return this->get_unexpected().error();
 1748|   369k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|   397k|    {
  473|   397k|        return m_unexpected;
  474|   397k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1569|   412k|        : base(std::in_place, std::forward<U>(val)),
 1570|   412k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   412k|    {
 1572|   412k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  440|   412k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   412k|    {
  442|   412k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   412k|    {
 1316|   412k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1794|   141k|    {
 1795|   141k|        return value();
 1796|   141k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|   748k|    {
 1769|   748k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   748k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   748k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   748k|        return this->get_value();
 1771|   748k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  455|   748k|    {
  456|   748k|        return m_value;
  457|   748k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1739|   412k|    {
 1740|   412k|        return has_value();
 1741|   412k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  489|   825k|    {
  490|   825k|        return m_has_value;
  491|   825k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   412k|    {
 1316|   412k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|   412k|    {
 1805|   412k|        return std::move(value());
 1806|   412k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|   412k|    {
 1769|   412k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   412k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   412k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   412k|        return this->get_value();
 1771|   412k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  455|   412k|    {
  456|   412k|        return m_value;
  457|   412k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|   336k|    {
 1979|   336k|        return detail::transform_error_impl(std::move(*this),
 1980|   336k|                                            std::forward<F>(f));
 1981|   336k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|   336k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   336k|    else {
 1472|   336k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   336k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   336k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 325k, False: 11.4k]
  |  |  ------------------
  ------------------
 1474|   336k|                   ? result(*std::forward<Exp>(exp))
 1475|   336k|                   : result(unexpect,
 1476|  11.4k|                            trivial_invoke(std::forward<F>(f),
 1477|  11.4k|                                           std::forward<Exp>(exp).error()));
 1478|   336k|    }
 1479|   336k|}
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1569|   609k|        : base(std::in_place, std::forward<U>(val)),
 1570|   609k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   609k|    {
 1572|   609k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|   609k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   609k|    {
  442|   609k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1625|  11.4k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  11.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  11.4k|    {
 1628|  11.4k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|   607k|    {
 1805|   607k|        return std::move(value());
 1806|   607k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEEC2IS8_vEEOT_:
 1569|   412k|        : base(std::in_place, std::forward<U>(val)),
 1570|   412k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   412k|    {
 1572|   412k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|   412k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   412k|    {
  442|   412k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1978|   412k|    {
 1979|   412k|        return detail::transform_error_impl(std::move(*this),
 1980|   412k|                                            std::forward<F>(f));
 1981|   412k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS4_9eof_errorEEERFNS0_10scan_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1461|   412k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   412k|    else {
 1472|   412k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   412k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   412k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 412k, False: 0]
  |  |  ------------------
  ------------------
 1474|   412k|                   ? result(*std::forward<Exp>(exp))
 1475|   412k|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|   412k|    }
 1479|   412k|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EE9has_valueEv:
  489|   825k|    {
  490|   825k|        return m_has_value;
  491|   825k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1804|   412k|    {
 1805|   412k|        return std::move(value());
 1806|   412k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|   412k|    {
 1769|   412k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   412k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   412k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   412k|        return this->get_value();
 1771|   412k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EE9get_valueEv:
  455|   412k|    {
  456|   412k|        return m_value;
  457|   412k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   412k|        : base(std::in_place, std::forward<U>(val)),
 1570|   412k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   412k|    {
 1572|   412k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|   412k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   412k|    {
  442|   412k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   412k|    {
 1316|   412k|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEcvbEv:
 1739|   412k|    {
 1740|   412k|        return has_value();
 1741|   412k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   825k|    {
  490|   825k|        return m_has_value;
  491|   825k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1804|   412k|    {
 1805|   412k|        return std::move(value());
 1806|   412k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|   412k|    {
 1769|   412k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   412k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   412k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   412k|        return this->get_value();
 1771|   412k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   412k|    {
  456|   412k|        return m_value;
  457|   412k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1978|   309k|    {
 1979|   309k|        return detail::transform_error_impl(std::move(*this),
 1980|   309k|                                            std::forward<F>(f));
 1981|   309k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1461|   309k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   309k|    else {
 1472|   309k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   309k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   309k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 281k, False: 28.2k]
  |  |  ------------------
  ------------------
 1474|   309k|                   ? result(*std::forward<Exp>(exp))
 1475|   309k|                   : result(unexpect,
 1476|  28.2k|                            trivial_invoke(std::forward<F>(f),
 1477|  28.2k|                                           std::forward<Exp>(exp).error()));
 1478|   309k|    }
 1479|   309k|}
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1755|  28.2k|    {
 1756|  28.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  28.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  28.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  28.2k|        return std::move(this->get_unexpected().error());
 1758|  28.2k|    }
_ZN3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEC2ISF_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1615|  3.25k|        : base(unexpect, std::move(e.error())),
 1616|  3.25k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  3.25k|    {
 1618|  3.25k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EEC2IJSF_EvEENS0_10unexpect_tEDpOT_:
  636|  3.25k|        : m_has_value(false)
  637|  3.25k|    {
  638|  3.25k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  3.25k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESF_EEEvDpOT_:
  700|  3.25k|    {
  701|  3.25k|        scn::detail::construct_at(unexpected_ptr(),
  702|  3.25k|                                  std::forward<Args>(args)...);
  703|  3.25k|        m_has_value = false;
  704|  3.25k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  9.77k|    {
  730|  9.77k|        return reinterpret_cast<unexpected<E>*>(
  731|  9.77k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  9.77k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  9.77k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  60.6k|    {
 1316|  60.6k|    }
_ZN3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEC2ISE_vEEOT_:
 1569|  57.4k|        : base(std::in_place, std::forward<U>(val)),
 1570|  57.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  57.4k|    {
 1572|  57.4k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS3_10in_place_tEDpOT_:
  626|  57.4k|        : m_has_value(true)
  627|  57.4k|    {
  628|  57.4k|        construct(std::forward<Args>(args)...);
  629|  57.4k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9constructIJSE_EEEvDpOT_:
  693|  57.4k|    {
  694|  57.4k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  57.4k|        m_has_value = true;
  696|  57.4k|    }
_ZN3scn2v46detail12construct_atINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEEJSE_EEEPT_SG_DpOT0_:
  395|  57.4k|{
  396|  57.4k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  57.4k|        T(std::forward<Args>(args)...);
  398|  57.4k|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   172k|    {
  718|   172k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|   172k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   172k|    }
_ZNK3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEcvbEv:
 1739|  60.6k|    {
 1740|  60.6k|        return has_value();
 1741|  60.6k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9has_valueEv:
  686|   182k|    {
  687|   182k|        return m_has_value;
  688|   182k|    }
_ZNR3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEE5errorEv:
 1745|  3.25k|    {
 1746|  3.25k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  3.25k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.25k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  3.25k|        return this->get_unexpected().error();
 1748|  3.25k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  669|  3.25k|    {
  670|  3.25k|        return *unexpected_ptr();
  671|  3.25k|    }
_ZNO3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEdeISE_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSJ_v:
 1804|  57.4k|    {
 1805|  57.4k|        return std::move(value());
 1806|  57.4k|    }
_ZNR3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEE5valueISE_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1768|  57.4k|    {
 1769|  57.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  57.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  57.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  57.4k|        return this->get_value();
 1771|  57.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9get_valueEv:
  652|  57.4k|    {
  653|  57.4k|        return *value_ptr();
  654|  57.4k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EED2Ev:
  642|  60.6k|    {
  643|  60.6k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 57.4k, False: 3.25k]
  ------------------
  644|  57.4k|            destroy_value();
  645|  57.4k|        }
  646|  3.25k|        else {
  647|  3.25k|            destroy_unexpected();
  648|  3.25k|        }
  649|  60.6k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  57.4k|    {
  708|  57.4k|        scn::detail::destroy_at(value_ptr());
  709|  57.4k|    }
_ZN3scn2v46detail10destroy_atINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEEEEvPT_:
  401|  57.4k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  57.4k|    else {
  408|  57.4k|        p->~T();
  409|  57.4k|    }
  410|  57.4k|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  3.25k|    {
  712|  3.25k|        scn::detail::destroy_at(unexpected_ptr());
  713|  3.25k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1739|  1.48M|    {
 1740|  1.48M|        return has_value();
 1741|  1.48M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  489|  2.96M|    {
  490|  2.96M|        return m_has_value;
  491|  2.96M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1745|   142k|    {
 1746|   142k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   142k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   142k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   142k|        return this->get_unexpected().error();
 1748|   142k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   142k|    {
  473|   142k|        return m_unexpected;
  474|   142k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|  1.05M|    {
 1805|  1.05M|        return std::move(value());
 1806|  1.05M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|  1.33M|    {
 1769|  1.33M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.33M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.33M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.33M|        return this->get_value();
 1771|  1.33M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.33M|    {
  456|  1.33M|        return m_value;
  457|  1.33M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3479|   637k|    {
 3480|   637k|        return m_iterator;
 3481|   637k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3483|   637k|    {
 3484|   637k|        return m_sentinel;
 3485|   637k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3464|   281k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   281k|    static_cast<    \
  |  |  935|   281k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   281k|    static_cast<    \
  |  |  935|   281k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   281k|    {
 3466|   281k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4569|  2.57M|    {
 4570|  2.57M|        return !x.is_at_end();
 4571|  2.57M|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|  11.5k|        : base(unexpect, std::move(e.error())),
 1616|  11.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  11.5k|    {
 1618|  11.5k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  11.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  11.5k|          m_has_value(false)
  451|  11.5k|    {
  452|  11.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   947k|    {
 1316|   947k|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1569|   936k|        : base(std::in_place, std::forward<U>(val)),
 1570|   936k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   936k|    {
 1572|   936k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|   936k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   936k|    {
  442|   936k|    }
_ZNK3scn2v48expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1739|   522k|    {
 1740|   522k|        return has_value();
 1741|   522k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1794|  96.4k|    {
 1795|  96.4k|        return value();
 1796|  96.4k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  8.74k|        : base(unexpect, std::move(e.error())),
 1616|  8.74k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  8.74k|    {
 1618|  8.74k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  449|  8.74k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  8.74k|          m_has_value(false)
  451|  8.74k|    {
  452|  8.74k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   604k|    {
 1316|   604k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|   595k|        : base(std::in_place, std::forward<U>(val)),
 1570|   595k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   595k|    {
 1572|   595k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  440|   595k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   595k|    {
  442|   595k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1739|   604k|    {
 1740|   604k|        return has_value();
 1741|   604k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.20M|    {
  490|  1.20M|        return m_has_value;
  491|  1.20M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1745|  8.74k|    {
 1746|  8.74k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  8.74k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  8.74k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  8.74k|        return this->get_unexpected().error();
 1748|  8.74k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  8.74k|    {
  473|  8.74k|        return m_unexpected;
  474|  8.74k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|   595k|    {
 1805|   595k|        return std::move(value());
 1806|   595k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|   595k|    {
 1769|   595k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   595k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   595k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   595k|        return this->get_value();
 1771|   595k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  455|   595k|    {
  456|   595k|        return m_value;
  457|   595k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1745|    360|    {
 1746|    360|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    360|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    360|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|    360|        return this->get_unexpected().error();
 1748|    360|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|  12.0k|        : base(unexpect, std::move(e.error())),
 1616|  12.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  12.0k|    {
 1618|  12.0k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  12.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  12.0k|          m_has_value(false)
  451|  12.0k|    {
  452|  12.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   968k|    {
 1316|   968k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1569|   139k|        : base(std::in_place, std::forward<U>(val)),
 1570|   139k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   139k|    {
 1572|   139k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  440|   139k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   139k|    {
  442|   139k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|   814k|        : base(unexpect, std::move(e.error())),
 1616|   814k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   814k|    {
 1618|   814k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|   814k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   814k|          m_has_value(false)
  451|   814k|    {
  452|   814k|    }
_ZNK3scn2v48expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1739|   968k|    {
 1740|   968k|        return has_value();
 1741|   968k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  489|  1.47M|    {
  490|  1.47M|        return m_has_value;
  491|  1.47M|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1745|   359k|    {
 1746|   359k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   359k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   359k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   359k|        return this->get_unexpected().error();
 1748|   359k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|   359k|    {
  473|   359k|        return m_unexpected;
  474|   359k|    }
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1569|   414k|        : base(std::in_place, std::forward<U>(val)),
 1570|   414k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   414k|    {
 1572|   414k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|   414k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   414k|    {
  442|   414k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   414k|    {
 1316|   414k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1794|   141k|    {
 1795|   141k|        return value();
 1796|   141k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|   141k|    {
 1769|   141k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   141k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   141k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   141k|        return this->get_value();
 1771|   141k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  455|   141k|    {
  456|   141k|        return m_value;
  457|   141k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1739|   414k|    {
 1740|   414k|        return has_value();
 1741|   414k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  489|   828k|    {
  490|   828k|        return m_has_value;
  491|   828k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   414k|    {
 1316|   414k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|   414k|    {
 1805|   414k|        return std::move(value());
 1806|   414k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|   414k|    {
 1769|   414k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   414k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   414k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   414k|        return this->get_value();
 1771|   414k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  455|   414k|    {
  456|   414k|        return m_value;
  457|   414k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1569|  2.59k|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.59k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.59k|    {
 1572|  2.59k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  2.59k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.59k|    {
  442|  2.59k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1569|   414k|        : base(std::in_place, std::forward<U>(val)),
 1570|   414k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   414k|    {
 1572|   414k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  440|   414k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   414k|    {
  442|   414k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|   414k|    {
 1979|   414k|        return detail::transform_error_impl(std::move(*this),
 1980|   414k|                                            std::forward<F>(f));
 1981|   414k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1461|   414k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   414k|    else {
 1472|   414k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   414k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   414k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 414k, False: 0]
  |  |  ------------------
  ------------------
 1474|   414k|                   ? result(*std::forward<Exp>(exp))
 1475|   414k|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|   414k|    }
 1479|   414k|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  489|   828k|    {
  490|   828k|        return m_has_value;
  491|   828k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|   414k|    {
 1805|   414k|        return std::move(value());
 1806|   414k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|   414k|    {
 1769|   414k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   414k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   414k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   414k|        return this->get_value();
 1771|   414k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  455|   414k|    {
  456|   414k|        return m_value;
  457|   414k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|   414k|        : base(std::in_place, std::forward<U>(val)),
 1570|   414k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   414k|    {
 1572|   414k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  440|   414k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   414k|    {
  442|   414k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   414k|    {
 1316|   414k|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1739|   414k|    {
 1740|   414k|        return has_value();
 1741|   414k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  489|   828k|    {
  490|   828k|        return m_has_value;
  491|   828k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|   414k|    {
 1805|   414k|        return std::move(value());
 1806|   414k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|   414k|    {
 1769|   414k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   414k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   414k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   414k|        return this->get_value();
 1771|   414k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  455|   414k|    {
  456|   414k|        return m_value;
  457|   414k|    }
_ZN3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISD_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISD_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SD_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1615|  3.49k|        : base(unexpect, std::move(e.error())),
 1616|  3.49k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  3.49k|    {
 1618|  3.49k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  636|  3.49k|        : m_has_value(false)
  637|  3.49k|    {
  638|  3.49k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  3.49k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESE_EEEvDpOT_:
  700|  3.49k|    {
  701|  3.49k|        scn::detail::construct_at(unexpected_ptr(),
  702|  3.49k|                                  std::forward<Args>(args)...);
  703|  3.49k|        m_has_value = false;
  704|  3.49k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  10.4k|    {
  730|  10.4k|        return reinterpret_cast<unexpected<E>*>(
  731|  10.4k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  10.4k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  10.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  60.8k|    {
 1316|  60.8k|    }
_ZN3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISC_vEEOT_:
 1569|  57.3k|        : base(std::in_place, std::forward<U>(val)),
 1570|  57.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  57.3k|    {
 1572|  57.3k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSD_EvEENS3_10in_place_tEDpOT_:
  626|  57.3k|        : m_has_value(true)
  627|  57.3k|    {
  628|  57.3k|        construct(std::forward<Args>(args)...);
  629|  57.3k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9constructIJSD_EEEvDpOT_:
  693|  57.3k|    {
  694|  57.3k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  57.3k|        m_has_value = true;
  696|  57.3k|    }
_ZN3scn2v46detail12construct_atINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEEJSD_EEEPT_SF_DpOT0_:
  395|  57.3k|{
  396|  57.3k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  57.3k|        T(std::forward<Args>(args)...);
  398|  57.3k|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   172k|    {
  718|   172k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|   172k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   172k|    }
_ZNK3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEcvbEv:
 1739|  60.8k|    {
 1740|  60.8k|        return has_value();
 1741|  60.8k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9has_valueEv:
  686|   182k|    {
  687|   182k|        return m_has_value;
  688|   182k|    }
_ZNR3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5errorEv:
 1745|  3.49k|    {
 1746|  3.49k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  3.49k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.49k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  3.49k|        return this->get_unexpected().error();
 1748|  3.49k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  669|  3.49k|    {
  670|  3.49k|        return *unexpected_ptr();
  671|  3.49k|    }
_ZNO3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEdeISC_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSH_v:
 1804|  57.3k|    {
 1805|  57.3k|        return std::move(value());
 1806|  57.3k|    }
_ZNR3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5valueISC_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1768|  57.3k|    {
 1769|  57.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  57.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  57.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  57.3k|        return this->get_value();
 1771|  57.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9get_valueEv:
  652|  57.3k|    {
  653|  57.3k|        return *value_ptr();
  654|  57.3k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EED2Ev:
  642|  60.8k|    {
  643|  60.8k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 57.3k, False: 3.49k]
  ------------------
  644|  57.3k|            destroy_value();
  645|  57.3k|        }
  646|  3.49k|        else {
  647|  3.49k|            destroy_unexpected();
  648|  3.49k|        }
  649|  60.8k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  57.3k|    {
  708|  57.3k|        scn::detail::destroy_at(value_ptr());
  709|  57.3k|    }
_ZN3scn2v46detail10destroy_atINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEEEEvPT_:
  401|  57.3k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  57.3k|    else {
  408|  57.3k|        p->~T();
  409|  57.3k|    }
  410|  57.3k|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  3.49k|    {
  712|  3.49k|        scn::detail::destroy_at(unexpected_ptr());
  713|  3.49k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|  1.44M|    {
 3000|  1.44M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|  1.44M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|  1.44M|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|  1.44M|    {
 2981|  1.44M|        return t.data();
 2982|  1.44M|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1569|   743k|        : base(std::in_place, std::forward<U>(val)),
 1570|   743k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   743k|    {
 1572|   743k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  440|   743k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   743k|    {
  442|   743k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1794|   281k|    {
 1795|   281k|        return value();
 1796|   281k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1794|   280k|    {
 1795|   280k|        return value();
 1796|   280k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3910|   309k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|   309k|    static_cast<    \
  |  |  935|   309k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|   309k|    {
 3912|   309k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4558|   624k|    {
 4559|   624k|        return x.is_at_end();
 4560|   624k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4602|  34.7M|    {
 4603|  34.7M|        if (m_end) {
  ------------------
  |  Branch (4603:13): [True: 0, False: 34.7M]
  ------------------
 4604|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4605|      0|        }
 4606|  34.7M|        if (!m_begin) {
  ------------------
  |  Branch (4606:13): [True: 0, False: 34.7M]
  ------------------
 4607|      0|            return true;
 4608|      0|        }
 4609|  34.7M|        return !read_at_position();
 4610|  34.7M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4582|  69.4G|    {
 4583|  69.4G|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  69.4G|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  69.4G|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4584|       |
 4585|  69.4G|        if (!stores_parent()) {
  ------------------
  |  Branch (4585:13): [True: 0, False: 69.4G]
  ------------------
 4586|      0|            return true;
 4587|      0|        }
 4588|       |
 4589|  69.4G|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  864|  69.4G|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 69.3G, False: 34.2M]
  |  |  ------------------
  ------------------
 4590|  69.3G|            return true;
 4591|  69.3G|        }
 4592|       |
 4593|  68.4M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4593:16): [True: 34.2M, False: 34.1M]
  ------------------
 4594|  34.2M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4594:17): [True: 104k, False: 34.1M]
  ------------------
 4595|   104k|                return false;
 4596|   104k|            }
 4597|  34.2M|        }
 4598|  34.1M|        return true;
 4599|  34.2M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE15chars_availableEv:
 4356|  69.4G|    {
 4357|  69.4G|        return m_putback_buffer.size() + m_current_view.size();
 4358|  69.4G|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4517|  34.8M|    {
 4518|  34.8M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  34.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4519|       |
 4520|  34.8M|        if (!stores_parent()) {
  ------------------
  |  Branch (4520:13): [True: 0, False: 34.8M]
  ------------------
 4521|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4522|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4523|      0|            return *ptr;
 4524|      0|        }
 4525|       |
 4526|  34.8M|        auto res = read_at_position();
 4527|  34.8M|        SCN_EXPECT(res);
  ------------------
  |  |  930|  34.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4528|  34.8M|        return parent()->get_character_at(m_position);
 4529|  34.8M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16get_character_atEl:
 4387|  34.8M|    {
 4388|  34.8M|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  34.8M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 654k, False: 34.2M]
  |  |  ------------------
  ------------------
 4389|  34.8M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4390|   654k|            return m_putback_buffer[pos];
 4391|   654k|        }
 4392|  34.2M|        const auto start = pos - m_putback_buffer.size();
 4393|  34.2M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  930|  34.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4394|  34.2M|        return m_current_view[start];
 4395|  34.2M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1569|   375k|        : base(std::in_place, std::forward<U>(val)),
 1570|   375k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   375k|    {
 1572|   375k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|   375k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   375k|    {
  442|   375k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   396k|    {
 1316|   396k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|  20.7k|        : base(unexpect, std::move(e.error())),
 1616|  20.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  20.7k|    {
 1618|  20.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  20.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  20.7k|          m_has_value(false)
  451|  20.7k|    {
  452|  20.7k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4503|  69.3G|    {
 4504|  69.3G|        ++m_position;
 4505|  69.3G|        (void)read_at_position();
 4506|  69.3G|        return *this;
 4507|  69.3G|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1739|   163k|    {
 1740|   163k|        return has_value();
 1741|   163k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1794|  7.55k|    {
 1795|  7.55k|        return value();
 1796|  7.55k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4552|  69.3G|    {
 4553|  69.3G|        return !(lhs == rhs);
 4554|  69.3G|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4547|  69.3G|    {
 4548|  69.3G|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4548:16): [True: 69.3G, False: 0]
  |  Branch (4548:46): [True: 33.9M, False: 69.2G]
  ------------------
 4549|  69.3G|    }
_ZN3scn2v46detail39code_point_length_by_starting_code_unitIwEEmT_:
 4067|   266k|{
 4068|       |    if constexpr (sizeof(U) == 1) {
 4069|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|   266k|    else {
 4075|       |        // utf-32
 4076|   266k|        static_assert(sizeof(U) == 4);
 4077|   266k|        SCN_UNUSED(ch);
  ------------------
  |  |  915|   266k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4078|   266k|        return 1;
 4079|   266k|    }
 4080|   266k|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|   266k|{
 4274|       |    if constexpr (sizeof(CharT) == 1) {
 4275|       |        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|   266k|    else {
 4281|   266k|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  930|   266k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   266k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4282|   266k|        auto cp = static_cast<char32_t>(input.front());
 4283|   266k|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|   266k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 105k, False: 160k]
  |  |  ------------------
  ------------------
 4284|   105k|            return invalid_code_point;
 4285|   105k|        }
 4286|   160k|        return cp;
 4287|   266k|    }
 4288|   266k|}
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|  1.45k|        : base(unexpect, std::move(e.error())),
 1616|  1.45k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.45k|    {
 1618|  1.45k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|  1.45k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.45k|          m_has_value(false)
  451|  1.45k|    {
  452|  1.45k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   114k|    {
 1316|   114k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   112k|        : base(std::in_place, std::forward<U>(val)),
 1570|   112k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   112k|    {
 1572|   112k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  440|   112k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   112k|    {
  442|   112k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1739|   114k|    {
 1740|   114k|        return has_value();
 1741|   114k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  489|   228k|    {
  490|   228k|        return m_has_value;
  491|   228k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1745|  1.45k|    {
 1746|  1.45k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  1.45k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.45k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  1.45k|        return this->get_unexpected().error();
 1748|  1.45k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  1.45k|    {
  473|  1.45k|        return m_unexpected;
  474|  1.45k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|   112k|    {
 1805|   112k|        return std::move(value());
 1806|   112k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|   112k|    {
 1769|   112k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   112k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   112k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   112k|        return this->get_value();
 1771|   112k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  455|   112k|    {
  456|   112k|        return m_value;
  457|   112k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3483|  35.4M|    {
 3484|  35.4M|        return m_sentinel;
 3485|  35.4M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1745|     72|    {
 1746|     72|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|     72|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     72|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|     72|        return this->get_unexpected().error();
 1748|     72|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|  18.9k|        : base(unexpect, std::move(e.error())),
 1616|  18.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  18.9k|    {
 1618|  18.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  37.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  37.8k|          m_has_value(false)
  451|  37.8k|    {
  452|  37.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   505k|    {
 1316|   505k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1569|  7.88k|        : base(std::in_place, std::forward<U>(val)),
 1570|  7.88k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  7.88k|    {
 1572|  7.88k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  440|  7.88k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  7.88k|    {
  442|  7.88k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|   375k|        : base(unexpect, std::move(e.error())),
 1616|   375k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   375k|    {
 1618|   375k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|   375k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   375k|          m_has_value(false)
  451|   375k|    {
  452|   375k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1739|   397k|    {
 1740|   397k|        return has_value();
 1741|   397k|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  489|   844k|    {
  490|   844k|        return m_has_value;
  491|   844k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1745|   142k|    {
 1746|   142k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   142k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   142k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   142k|        return this->get_unexpected().error();
 1748|   142k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|   247k|    {
  473|   247k|        return m_unexpected;
  474|   247k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1569|   130k|        : base(std::in_place, std::forward<U>(val)),
 1570|   130k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   130k|    {
 1572|   130k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  440|   130k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   130k|    {
  442|   130k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   130k|    {
 1316|   130k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1794|  7.88k|    {
 1795|  7.88k|        return value();
 1796|  7.88k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  91.9k|    {
 1769|  91.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  91.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  91.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  91.9k|        return this->get_value();
 1771|  91.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  455|  91.9k|    {
  456|  91.9k|        return m_value;
  457|  91.9k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1739|   130k|    {
 1740|   130k|        return has_value();
 1741|   130k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  489|   261k|    {
  490|   261k|        return m_has_value;
  491|   261k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   130k|    {
 1316|   130k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|   130k|    {
 1805|   130k|        return std::move(value());
 1806|   130k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|   130k|    {
 1769|   130k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   130k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   130k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   130k|        return this->get_value();
 1771|   130k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  455|   130k|    {
  456|   130k|        return m_value;
  457|   130k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|   100k|    {
 1979|   100k|        return detail::transform_error_impl(std::move(*this),
 1980|   100k|                                            std::forward<F>(f));
 1981|   100k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|   100k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   100k|    else {
 1472|   100k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   100k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   100k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 81.2k, False: 18.8k]
  |  |  ------------------
  ------------------
 1474|   100k|                   ? result(*std::forward<Exp>(exp))
 1475|   100k|                   : result(unexpect,
 1476|  18.8k|                            trivial_invoke(std::forward<F>(f),
 1477|  18.8k|                                           std::forward<Exp>(exp).error()));
 1478|   100k|    }
 1479|   100k|}
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1569|  84.0k|        : base(std::in_place, std::forward<U>(val)),
 1570|  84.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  84.0k|    {
 1572|  84.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  84.0k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  84.0k|    {
  442|  84.0k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1625|  18.8k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  18.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  18.8k|    {
 1628|  18.8k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  84.0k|    {
 1805|  84.0k|        return std::move(value());
 1806|  84.0k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEEC2IS8_vEEOT_:
 1569|   130k|        : base(std::in_place, std::forward<U>(val)),
 1570|   130k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   130k|    {
 1572|   130k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|   130k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   130k|    {
  442|   130k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1978|   130k|    {
 1979|   130k|        return detail::transform_error_impl(std::move(*this),
 1980|   130k|                                            std::forward<F>(f));
 1981|   130k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS4_9eof_errorEEERFNS0_10scan_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1461|   130k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   130k|    else {
 1472|   130k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   130k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   130k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 130k, False: 0]
  |  |  ------------------
  ------------------
 1474|   130k|                   ? result(*std::forward<Exp>(exp))
 1475|   130k|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|   130k|    }
 1479|   130k|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EE9has_valueEv:
  489|   261k|    {
  490|   261k|        return m_has_value;
  491|   261k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1804|   130k|    {
 1805|   130k|        return std::move(value());
 1806|   130k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|   130k|    {
 1769|   130k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   130k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   130k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   130k|        return this->get_value();
 1771|   130k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EE9get_valueEv:
  455|   130k|    {
  456|   130k|        return m_value;
  457|   130k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   130k|        : base(std::in_place, std::forward<U>(val)),
 1570|   130k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   130k|    {
 1572|   130k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|   130k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   130k|    {
  442|   130k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   130k|    {
 1316|   130k|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEcvbEv:
 1739|   130k|    {
 1740|   130k|        return has_value();
 1741|   130k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   261k|    {
  490|   261k|        return m_has_value;
  491|   261k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1804|   130k|    {
 1805|   130k|        return std::move(value());
 1806|   130k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|   130k|    {
 1769|   130k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   130k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   130k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   130k|        return this->get_value();
 1771|   130k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   130k|    {
  456|   130k|        return m_value;
  457|   130k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1978|   107k|    {
 1979|   107k|        return detail::transform_error_impl(std::move(*this),
 1980|   107k|                                            std::forward<F>(f));
 1981|   107k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1461|   107k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   107k|    else {
 1472|   107k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   107k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   107k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 2.75k, False: 104k]
  |  |  ------------------
  ------------------
 1474|   107k|                   ? result(*std::forward<Exp>(exp))
 1475|   107k|                   : result(unexpect,
 1476|   104k|                            trivial_invoke(std::forward<F>(f),
 1477|   104k|                                           std::forward<Exp>(exp).error()));
 1478|   107k|    }
 1479|   107k|}
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1755|   104k|    {
 1756|   104k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   104k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   104k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|   104k|        return std::move(this->get_unexpected().error());
 1758|   104k|    }
_ZN3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEC2ISI_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  10.5k|        : base(unexpect, std::move(e.error())),
 1616|  10.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  10.5k|    {
 1618|  10.5k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  636|  10.5k|        : m_has_value(false)
  637|  10.5k|    {
  638|  10.5k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  10.5k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESI_EEEvDpOT_:
  700|  10.5k|    {
  701|  10.5k|        scn::detail::construct_at(unexpected_ptr(),
  702|  10.5k|                                  std::forward<Args>(args)...);
  703|  10.5k|        m_has_value = false;
  704|  10.5k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  31.5k|    {
  730|  31.5k|        return reinterpret_cast<unexpected<E>*>(
  731|  31.5k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  31.5k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  31.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  19.3k|    {
 1316|  19.3k|    }
_ZN3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1569|  8.79k|        : base(std::in_place, std::forward<U>(val)),
 1570|  8.79k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  8.79k|    {
 1572|  8.79k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS3_10in_place_tEDpOT_:
  626|  8.79k|        : m_has_value(true)
  627|  8.79k|    {
  628|  8.79k|        construct(std::forward<Args>(args)...);
  629|  8.79k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9constructIJSH_EEEvDpOT_:
  693|  8.79k|    {
  694|  8.79k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  8.79k|        m_has_value = true;
  696|  8.79k|    }
_ZN3scn2v46detail12construct_atINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEEJSH_EEEPT_SJ_DpOT0_:
  395|  8.79k|{
  396|  8.79k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  8.79k|        T(std::forward<Args>(args)...);
  398|  8.79k|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  26.3k|    {
  718|  26.3k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|  26.3k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  26.3k|    }
_ZNK3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1739|  19.3k|    {
 1740|  19.3k|        return has_value();
 1741|  19.3k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|  57.9k|    {
  687|  57.9k|        return m_has_value;
  688|  57.9k|    }
_ZNR3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1745|  10.5k|    {
 1746|  10.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  10.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  10.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  10.5k|        return this->get_unexpected().error();
 1748|  10.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  669|  10.5k|    {
  670|  10.5k|        return *unexpected_ptr();
  671|  10.5k|    }
_ZNO3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEdeISH_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSM_v:
 1804|  8.79k|    {
 1805|  8.79k|        return std::move(value());
 1806|  8.79k|    }
_ZNR3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEE5valueISH_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  8.79k|    {
 1769|  8.79k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  8.79k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  8.79k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  8.79k|        return this->get_value();
 1771|  8.79k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  8.79k|    {
  653|  8.79k|        return *value_ptr();
  654|  8.79k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|  19.3k|    {
  643|  19.3k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 8.79k, False: 10.5k]
  ------------------
  644|  8.79k|            destroy_value();
  645|  8.79k|        }
  646|  10.5k|        else {
  647|  10.5k|            destroy_unexpected();
  648|  10.5k|        }
  649|  19.3k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  8.79k|    {
  708|  8.79k|        scn::detail::destroy_at(value_ptr());
  709|  8.79k|    }
_ZN3scn2v46detail10destroy_atINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEEEEvPT_:
  401|  8.79k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  8.79k|    else {
  408|  8.79k|        p->~T();
  409|  8.79k|    }
  410|  8.79k|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  10.5k|    {
  712|  10.5k|        scn::detail::destroy_at(unexpected_ptr());
  713|  10.5k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1739|   478k|    {
 1740|   478k|        return has_value();
 1741|   478k|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  489|   956k|    {
  490|   956k|        return m_has_value;
  491|   956k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1745|   328k|    {
 1746|   328k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   328k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   328k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   328k|        return this->get_unexpected().error();
 1748|   328k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   328k|    {
  473|   328k|        return m_unexpected;
  474|   328k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|   142k|    {
 1805|   142k|        return std::move(value());
 1806|   142k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|   149k|    {
 1769|   149k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   149k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   149k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   149k|        return this->get_value();
 1771|   149k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  455|   149k|    {
  456|   149k|        return m_value;
  457|   149k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3479|  6.83k|    {
 3480|  6.83k|        return m_iterator;
 3481|  6.83k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3483|  6.83k|    {
 3484|  6.83k|        return m_sentinel;
 3485|  6.83k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3464|  2.75k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  2.75k|    static_cast<    \
  |  |  935|  2.75k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  2.75k|    static_cast<    \
  |  |  935|  2.75k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  2.75k|    {
 3466|  2.75k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4569|  34.1M|    {
 4570|  34.1M|        return !x.is_at_end();
 4571|  34.1M|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|  20.7k|        : base(unexpect, std::move(e.error())),
 1616|  20.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  20.7k|    {
 1618|  20.7k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  20.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  20.7k|          m_has_value(false)
  451|  20.7k|    {
  452|  20.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   396k|    {
 1316|   396k|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1569|   375k|        : base(std::in_place, std::forward<U>(val)),
 1570|   375k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   375k|    {
 1572|   375k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|   375k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   375k|    {
  442|   375k|    }
_ZNK3scn2v48expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1739|   163k|    {
 1740|   163k|        return has_value();
 1741|   163k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|   636k|    {
  490|   636k|        return m_has_value;
  491|   636k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1794|  7.55k|    {
 1795|  7.55k|        return value();
 1796|  7.55k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|   219k|    {
 1769|   219k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   219k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   219k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   219k|        return this->get_value();
 1771|   219k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|   219k|    {
  456|   219k|        return m_value;
  457|   219k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  1.45k|        : base(unexpect, std::move(e.error())),
 1616|  1.45k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.45k|    {
 1618|  1.45k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  449|  1.45k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.45k|          m_has_value(false)
  451|  1.45k|    {
  452|  1.45k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   114k|    {
 1316|   114k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|   112k|        : base(std::in_place, std::forward<U>(val)),
 1570|   112k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   112k|    {
 1572|   112k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  440|   112k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   112k|    {
  442|   112k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|   132k|    {
 1979|   132k|        return detail::transform_error_impl(std::move(*this),
 1980|   132k|                                            std::forward<F>(f));
 1981|   132k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|   132k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   132k|    else {
 1472|   132k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   132k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   132k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 130k, False: 1.78k]
  |  |  ------------------
  ------------------
 1474|   132k|                   ? result(*std::forward<Exp>(exp))
 1475|   132k|                   : result(unexpect,
 1476|  1.78k|                            trivial_invoke(std::forward<F>(f),
 1477|  1.78k|                                           std::forward<Exp>(exp).error()));
 1478|   132k|    }
 1479|   132k|}
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|   211k|    {
 1805|   211k|        return std::move(value());
 1806|   211k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1755|  20.6k|    {
 1756|  20.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  20.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  20.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  20.6k|        return std::move(this->get_unexpected().error());
 1758|  20.6k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  20.7k|    {
  473|  20.7k|        return m_unexpected;
  474|  20.7k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1625|  1.78k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  1.78k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  1.78k|    {
 1628|  1.78k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1739|   114k|    {
 1740|   114k|        return has_value();
 1741|   114k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  489|   228k|    {
  490|   228k|        return m_has_value;
  491|   228k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1745|  1.45k|    {
 1746|  1.45k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  1.45k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.45k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  1.45k|        return this->get_unexpected().error();
 1748|  1.45k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  1.45k|    {
  473|  1.45k|        return m_unexpected;
  474|  1.45k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|   112k|    {
 1805|   112k|        return std::move(value());
 1806|   112k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|   112k|    {
 1769|   112k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   112k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   112k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   112k|        return this->get_value();
 1771|   112k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  455|   112k|    {
  456|   112k|        return m_value;
  457|   112k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1745|     72|    {
 1746|     72|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|     72|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     72|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|     72|        return this->get_unexpected().error();
 1748|     72|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|  18.9k|        : base(unexpect, std::move(e.error())),
 1616|  18.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  18.9k|    {
 1618|  18.9k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  37.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  37.8k|          m_has_value(false)
  451|  37.8k|    {
  452|  37.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   397k|    {
 1316|   397k|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1569|  7.88k|        : base(std::in_place, std::forward<U>(val)),
 1570|  7.88k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  7.88k|    {
 1572|  7.88k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  440|  7.88k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  7.88k|    {
  442|  7.88k|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|   270k|        : base(unexpect, std::move(e.error())),
 1616|   270k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   270k|    {
 1618|   270k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|   270k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   270k|          m_has_value(false)
  451|   270k|    {
  452|   270k|    }
_ZNK3scn2v48expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1739|   397k|    {
 1740|   397k|        return has_value();
 1741|   397k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  489|   629k|    {
  490|   629k|        return m_has_value;
  491|   629k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1745|   142k|    {
 1746|   142k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   142k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   142k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   142k|        return this->get_unexpected().error();
 1748|   142k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|   142k|    {
  473|   142k|        return m_unexpected;
  474|   142k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1569|   130k|        : base(std::in_place, std::forward<U>(val)),
 1570|   130k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   130k|    {
 1572|   130k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|   130k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   130k|    {
  442|   130k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   130k|    {
 1316|   130k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1794|  7.88k|    {
 1795|  7.88k|        return value();
 1796|  7.88k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  89.1k|    {
 1769|  89.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  89.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  89.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  89.1k|        return this->get_value();
 1771|  89.1k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  455|  89.1k|    {
  456|  89.1k|        return m_value;
  457|  89.1k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1739|   130k|    {
 1740|   130k|        return has_value();
 1741|   130k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  489|   261k|    {
  490|   261k|        return m_has_value;
  491|   261k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   130k|    {
 1316|   130k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|   130k|    {
 1805|   130k|        return std::move(value());
 1806|   130k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|   130k|    {
 1769|   130k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   130k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   130k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   130k|        return this->get_value();
 1771|   130k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  455|   130k|    {
  456|   130k|        return m_value;
  457|   130k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|   100k|    {
 1979|   100k|        return detail::transform_error_impl(std::move(*this),
 1980|   100k|                                            std::forward<F>(f));
 1981|   100k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|   100k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   100k|    else {
 1472|   100k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   100k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   100k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 81.2k, False: 18.8k]
  |  |  ------------------
  ------------------
 1474|   100k|                   ? result(*std::forward<Exp>(exp))
 1475|   100k|                   : result(unexpect,
 1476|  18.8k|                            trivial_invoke(std::forward<F>(f),
 1477|  18.8k|                                           std::forward<Exp>(exp).error()));
 1478|   100k|    }
 1479|   100k|}
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1569|  81.2k|        : base(std::in_place, std::forward<U>(val)),
 1570|  81.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  81.2k|    {
 1572|  81.2k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  81.2k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  81.2k|    {
  442|  81.2k|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1625|  18.8k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  18.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  18.8k|    {
 1628|  18.8k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|  81.2k|    {
 1805|  81.2k|        return std::move(value());
 1806|  81.2k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1569|   130k|        : base(std::in_place, std::forward<U>(val)),
 1570|   130k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   130k|    {
 1572|   130k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  440|   130k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   130k|    {
  442|   130k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|   130k|    {
 1979|   130k|        return detail::transform_error_impl(std::move(*this),
 1980|   130k|                                            std::forward<F>(f));
 1981|   130k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1461|   130k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   130k|    else {
 1472|   130k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   130k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   130k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 130k, False: 0]
  |  |  ------------------
  ------------------
 1474|   130k|                   ? result(*std::forward<Exp>(exp))
 1475|   130k|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|   130k|    }
 1479|   130k|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  489|   261k|    {
  490|   261k|        return m_has_value;
  491|   261k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|   130k|    {
 1805|   130k|        return std::move(value());
 1806|   130k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|   130k|    {
 1769|   130k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   130k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   130k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   130k|        return this->get_value();
 1771|   130k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  455|   130k|    {
  456|   130k|        return m_value;
  457|   130k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|   130k|        : base(std::in_place, std::forward<U>(val)),
 1570|   130k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   130k|    {
 1572|   130k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  440|   130k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   130k|    {
  442|   130k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   130k|    {
 1316|   130k|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1739|   130k|    {
 1740|   130k|        return has_value();
 1741|   130k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  489|   261k|    {
  490|   261k|        return m_has_value;
  491|   261k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|   130k|    {
 1805|   130k|        return std::move(value());
 1806|   130k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|   130k|    {
 1769|   130k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   130k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   130k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   130k|        return this->get_value();
 1771|   130k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  455|   130k|    {
  456|   130k|        return m_value;
  457|   130k|    }
_ZN3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISG_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1615|  10.5k|        : base(unexpect, std::move(e.error())),
 1616|  10.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  10.5k|    {
 1618|  10.5k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  636|  10.5k|        : m_has_value(false)
  637|  10.5k|    {
  638|  10.5k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  10.5k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESH_EEEvDpOT_:
  700|  10.5k|    {
  701|  10.5k|        scn::detail::construct_at(unexpected_ptr(),
  702|  10.5k|                                  std::forward<Args>(args)...);
  703|  10.5k|        m_has_value = false;
  704|  10.5k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  31.5k|    {
  730|  31.5k|        return reinterpret_cast<unexpected<E>*>(
  731|  31.5k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  31.5k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  31.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  19.3k|    {
 1316|  19.3k|    }
_ZN3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1569|  8.79k|        : base(std::in_place, std::forward<U>(val)),
 1570|  8.79k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  8.79k|    {
 1572|  8.79k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSG_EvEENS3_10in_place_tEDpOT_:
  626|  8.79k|        : m_has_value(true)
  627|  8.79k|    {
  628|  8.79k|        construct(std::forward<Args>(args)...);
  629|  8.79k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9constructIJSG_EEEvDpOT_:
  693|  8.79k|    {
  694|  8.79k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  8.79k|        m_has_value = true;
  696|  8.79k|    }
_ZN3scn2v46detail12construct_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEJSG_EEEPT_SI_DpOT0_:
  395|  8.79k|{
  396|  8.79k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  8.79k|        T(std::forward<Args>(args)...);
  398|  8.79k|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  26.3k|    {
  718|  26.3k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|  26.3k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  26.3k|    }
_ZNK3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1739|  19.3k|    {
 1740|  19.3k|        return has_value();
 1741|  19.3k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|  57.9k|    {
  687|  57.9k|        return m_has_value;
  688|  57.9k|    }
_ZNR3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1745|  10.5k|    {
 1746|  10.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  10.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  10.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  10.5k|        return this->get_unexpected().error();
 1748|  10.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  669|  10.5k|    {
  670|  10.5k|        return *unexpected_ptr();
  671|  10.5k|    }
_ZNO3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEdeISF_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSK_v:
 1804|  8.79k|    {
 1805|  8.79k|        return std::move(value());
 1806|  8.79k|    }
_ZNR3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5valueISF_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1768|  8.79k|    {
 1769|  8.79k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  8.79k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  8.79k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  8.79k|        return this->get_value();
 1771|  8.79k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  8.79k|    {
  653|  8.79k|        return *value_ptr();
  654|  8.79k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|  19.3k|    {
  643|  19.3k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 8.79k, False: 10.5k]
  ------------------
  644|  8.79k|            destroy_value();
  645|  8.79k|        }
  646|  10.5k|        else {
  647|  10.5k|            destroy_unexpected();
  648|  10.5k|        }
  649|  19.3k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  8.79k|    {
  708|  8.79k|        scn::detail::destroy_at(value_ptr());
  709|  8.79k|    }
_ZN3scn2v46detail10destroy_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEEEvPT_:
  401|  8.79k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  8.79k|    else {
  408|  8.79k|        p->~T();
  409|  8.79k|    }
  410|  8.79k|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  10.5k|    {
  712|  10.5k|        scn::detail::destroy_at(unexpected_ptr());
  713|  10.5k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   420k|    {
 3000|   420k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   420k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   420k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   420k|    {
 2981|   420k|        return t.data();
 2982|   420k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1794|  7.90k|    {
 1795|  7.90k|        return value();
 1796|  7.90k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1794|  7.90k|    {
 1795|  7.90k|        return value();
 1796|  7.90k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3910|   107k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|   107k|    static_cast<    \
  |  |  935|   107k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|   107k|    {
 3912|   107k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE15chars_availableEv:
 4356|  24.5M|    {
 4357|  24.5M|        return m_putback_buffer.size() + m_current_view.size();
 4358|  24.5M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4sizeEv:
 6181|   836k|    {
 6182|   836k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|   836k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 836k]
  |  |  ------------------
  ------------------
 6183|      0|            return max_size();
 6184|      0|        }
 6185|       |
 6186|   836k|        return static_cast<std::size_t>(m_desc &
 6187|   836k|                                        ((1 << detail::packed_arg_bits) - 1));
 6188|   836k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE9is_packedEv:
 6207|  1.67M|    {
 6208|  1.67M|        return (m_desc & detail::is_unpacked_bit) == 0;
 6209|  1.67M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE3getEm:
 6149|   836k|    {
 6150|   836k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|   836k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 836k]
  |  |  ------------------
  ------------------
 6151|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6152|      0|                return m_args[id];
 6153|      0|            }
 6154|      0|            return {};
 6155|      0|        }
 6156|       |
 6157|   836k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  865|   836k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 836k]
  |  |  ------------------
  ------------------
 6158|      0|            return {};
 6159|      0|        }
 6160|       |
 6161|   836k|        const auto t = type(id);
 6162|   836k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  865|   836k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 836k]
  |  |  ------------------
  ------------------
 6163|      0|            return {};
 6164|      0|        }
 6165|       |
 6166|   836k|        basic_scan_arg<Context> arg;
 6167|   836k|        arg.m_type = t;
 6168|   836k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6168:13): [True: 836k, False: 0]
  ------------------
 6169|   836k|            arg.m_value.ref_value = m_builtin_values[id];
 6170|   836k|        }
 6171|      0|        else {
 6172|      0|            arg.m_value = m_values[id];
 6173|      0|        }
 6174|   836k|        return arg;
 6175|   836k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4typeEm:
 6216|   836k|    {
 6217|       |        // First (0th) index is size, types start after that
 6218|   836k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6219|   836k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6220|   836k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6221|   836k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15is_only_builtinEv:
 6211|   836k|    {
 6212|   836k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6213|   836k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEcvbEv:
 5965|  1.56M|    {
 5966|  1.56M|        return m_type != detail::arg_type::none_type;
 5967|  1.56M|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9323|  95.4k|{
 9324|  95.4k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  95.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|  95.4k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|  95.4k|{
 9225|  95.4k|#define SCN_VISIT(Type)                                                \
 9226|  95.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|  95.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|  95.4k|    }                                                                  \
 9229|  95.4k|    else {                                                             \
 9230|  95.4k|        return vis(monostate_val);                                     \
 9231|  95.4k|    }
 9232|       |
 9233|  95.4k|    monostate monostate_val{};
 9234|       |
 9235|  95.4k|    switch (get_arg_type(arg)) {
 9236|  15.8k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 15.8k, False: 79.5k]
  ------------------
 9237|  15.8k|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|  15.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  15.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  15.8k|    }                                                                  \
  |  | 9229|  15.8k|    else {                                                             \
  |  | 9230|  15.8k|        return vis(monostate_val);                                     \
  |  | 9231|  15.8k|    }
  ------------------
 9238|  15.8k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 95.4k]
  ------------------
 9239|  15.8k|            SCN_VISIT(short);
  ------------------
  |  | 9226|  15.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  15.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  15.8k|    }                                                                  \
  |  | 9229|  15.8k|    else {                                                             \
  |  | 9230|  15.8k|        return vis(monostate_val);                                     \
  |  | 9231|  15.8k|    }
  ------------------
 9240|  34.2k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 18.3k, False: 77.1k]
  ------------------
 9241|  34.2k|            SCN_VISIT(int);
  ------------------
  |  | 9226|  34.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  34.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  34.2k|    }                                                                  \
  |  | 9229|  34.2k|    else {                                                             \
  |  | 9230|  34.2k|        return vis(monostate_val);                                     \
  |  | 9231|  34.2k|    }
  ------------------
 9242|  34.2k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 95.4k]
  ------------------
 9243|  34.2k|            SCN_VISIT(long);
  ------------------
  |  | 9226|  34.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  34.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  34.2k|    }                                                                  \
  |  | 9229|  34.2k|    else {                                                             \
  |  | 9230|  34.2k|        return vis(monostate_val);                                     \
  |  | 9231|  34.2k|    }
  ------------------
 9244|  52.9k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 18.6k, False: 76.7k]
  ------------------
 9245|  52.9k|            SCN_VISIT(long long);
  ------------------
  |  | 9226|  52.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  52.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  52.9k|    }                                                                  \
  |  | 9229|  52.9k|    else {                                                             \
  |  | 9230|  52.9k|        return vis(monostate_val);                                     \
  |  | 9231|  52.9k|    }
  ------------------
 9246|  66.1k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 13.2k, False: 82.2k]
  ------------------
 9247|  66.1k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|  66.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  66.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  66.1k|    }                                                                  \
  |  | 9229|  66.1k|    else {                                                             \
  |  | 9230|  66.1k|        return vis(monostate_val);                                     \
  |  | 9231|  66.1k|    }
  ------------------
 9248|  66.1k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 95.4k]
  ------------------
 9249|  66.1k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|  66.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  66.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  66.1k|    }                                                                  \
  |  | 9229|  66.1k|    else {                                                             \
  |  | 9230|  66.1k|        return vis(monostate_val);                                     \
  |  | 9231|  66.1k|    }
  ------------------
 9250|  80.7k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 14.5k, False: 80.9k]
  ------------------
 9251|  80.7k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|  80.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  80.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  80.7k|    }                                                                  \
  |  | 9229|  80.7k|    else {                                                             \
  |  | 9230|  80.7k|        return vis(monostate_val);                                     \
  |  | 9231|  80.7k|    }
  ------------------
 9252|  80.7k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 95.4k]
  ------------------
 9253|  80.7k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|  80.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  80.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  80.7k|    }                                                                  \
  |  | 9229|  80.7k|    else {                                                             \
  |  | 9230|  80.7k|        return vis(monostate_val);                                     \
  |  | 9231|  80.7k|    }
  ------------------
 9254|  95.4k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 14.7k, False: 80.7k]
  ------------------
 9255|  95.4k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|  95.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  95.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  95.4k|    }                                                                  \
  |  | 9229|  95.4k|    else {                                                             \
  |  | 9230|  95.4k|        return vis(monostate_val);                                     \
  |  | 9231|  95.4k|    }
  ------------------
 9256|  95.4k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 95.4k]
  ------------------
 9257|  95.4k|            SCN_VISIT(void*);
  ------------------
  |  | 9226|  95.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  95.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  95.4k|    }                                                                  \
  |  | 9229|  95.4k|    else {                                                             \
  |  | 9230|  95.4k|        return vis(monostate_val);                                     \
  |  | 9231|  95.4k|    }
  ------------------
 9258|  95.4k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 95.4k]
  ------------------
 9259|  95.4k|            SCN_VISIT(bool);
  ------------------
  |  | 9226|  95.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  95.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  95.4k|    }                                                                  \
  |  | 9229|  95.4k|    else {                                                             \
  |  | 9230|  95.4k|        return vis(monostate_val);                                     \
  |  | 9231|  95.4k|    }
  ------------------
 9260|  95.4k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 95.4k]
  ------------------
 9261|  95.4k|            SCN_VISIT(char);
  ------------------
  |  | 9226|  95.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  95.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  95.4k|    }                                                                  \
  |  | 9229|  95.4k|    else {                                                             \
  |  | 9230|  95.4k|        return vis(monostate_val);                                     \
  |  | 9231|  95.4k|    }
  ------------------
 9262|  95.4k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 95.4k]
  ------------------
 9263|  95.4k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|  95.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  95.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  95.4k|    }                                                                  \
  |  | 9229|  95.4k|    else {                                                             \
  |  | 9230|  95.4k|        return vis(monostate_val);                                     \
  |  | 9231|  95.4k|    }
  ------------------
 9264|  95.4k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 95.4k]
  ------------------
 9265|  95.4k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|  95.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  95.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  95.4k|    }                                                                  \
  |  | 9229|  95.4k|    else {                                                             \
  |  | 9230|  95.4k|        return vis(monostate_val);                                     \
  |  | 9231|  95.4k|    }
  ------------------
 9266|  95.4k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 95.4k]
  ------------------
 9267|  95.4k|            SCN_VISIT(float);
  ------------------
  |  | 9226|  95.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  95.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  95.4k|    }                                                                  \
  |  | 9229|  95.4k|    else {                                                             \
  |  | 9230|  95.4k|        return vis(monostate_val);                                     \
  |  | 9231|  95.4k|    }
  ------------------
 9268|  95.4k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 95.4k]
  ------------------
 9269|  95.4k|            SCN_VISIT(double);
  ------------------
  |  | 9226|  95.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  95.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  95.4k|    }                                                                  \
  |  | 9229|  95.4k|    else {                                                             \
  |  | 9230|  95.4k|        return vis(monostate_val);                                     \
  |  | 9231|  95.4k|    }
  ------------------
 9270|  95.4k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 95.4k]
  ------------------
 9271|  95.4k|            SCN_VISIT(long double);
  ------------------
  |  | 9226|  95.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  95.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  95.4k|    }                                                                  \
  |  | 9229|  95.4k|    else {                                                             \
  |  | 9230|  95.4k|        return vis(monostate_val);                                     \
  |  | 9231|  95.4k|    }
  ------------------
 9272|  95.4k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 95.4k]
  ------------------
 9273|  95.4k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|  95.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  95.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  95.4k|    }                                                                  \
  |  | 9229|  95.4k|    else {                                                             \
  |  | 9230|  95.4k|        return vis(monostate_val);                                     \
  |  | 9231|  95.4k|    }
  ------------------
 9274|  95.4k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 95.4k]
  ------------------
 9275|  95.4k|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|  95.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  95.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  95.4k|    }                                                                  \
  |  | 9229|  95.4k|    else {                                                             \
  |  | 9230|  95.4k|        return vis(monostate_val);                                     \
  |  | 9231|  95.4k|    }
  ------------------
 9276|  95.4k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 95.4k]
  ------------------
 9277|  95.4k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|  95.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  95.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  95.4k|    }                                                                  \
  |  | 9229|  95.4k|    else {                                                             \
  |  | 9230|  95.4k|        return vis(monostate_val);                                     \
  |  | 9231|  95.4k|    }
  ------------------
 9278|  95.4k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 95.4k]
  ------------------
 9279|  95.4k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|  95.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  95.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  95.4k|    }                                                                  \
  |  | 9229|  95.4k|    else {                                                             \
  |  | 9230|  95.4k|        return vis(monostate_val);                                     \
  |  | 9231|  95.4k|    }
  ------------------
 9280|  95.4k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 95.4k]
  ------------------
 9281|  95.4k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|  95.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  95.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  95.4k|    }                                                                  \
  |  | 9229|  95.4k|    else {                                                             \
  |  | 9230|  95.4k|        return vis(monostate_val);                                     \
  |  | 9231|  95.4k|    }
  ------------------
 9282|  95.4k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 95.4k]
  ------------------
 9283|  95.4k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|  95.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  95.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  95.4k|    }                                                                  \
  |  | 9229|  95.4k|    else {                                                             \
  |  | 9230|  95.4k|        return vis(monostate_val);                                     \
  |  | 9231|  95.4k|    }
  ------------------
 9284|       |
 9285|  95.4k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 95.4k]
  ------------------
 9286|  95.4k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|  95.4k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|  95.4k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 95.4k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 95.4k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|  95.4k|            SCN_CLANG_POP
 9303|  95.4k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6010|  2.27M|{
 6011|  2.27M|    return arg.m_type;
 6012|  2.27M|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6022|   850k|{
 6023|   850k|    return arg.m_value;
 6024|   850k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcEC2ENS2_17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 8947|   355k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  934|   355k|    static_cast<    \
  |  |  935|   355k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|   355k|    {
 8949|   355k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE3getEv:
 4690|   449k|{
 4691|   449k|    if (is_contiguous()) {
  ------------------
  |  Branch (4691:9): [True: 0, False: 449k]
  ------------------
 4692|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4693|      0|                                ranges::default_sentinel};
 4694|      0|    }
 4695|   449k|    return ranges::subrange{forward_iterator{this, 0},
 4696|   449k|                            ranges::default_sentinel};
 4697|   449k|}
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4453|   449k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4454|   449k|    {
 4455|   449k|        SCN_EXPECT(parent);
  ------------------
  |  |  930|   449k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   449k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|   449k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  930|   449k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   449k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4457|   449k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9323|  94.1k|{
 9324|  94.1k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  94.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|  94.1k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|  94.1k|{
 9225|  94.1k|#define SCN_VISIT(Type)                                                \
 9226|  94.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|  94.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|  94.1k|    }                                                                  \
 9229|  94.1k|    else {                                                             \
 9230|  94.1k|        return vis(monostate_val);                                     \
 9231|  94.1k|    }
 9232|       |
 9233|  94.1k|    monostate monostate_val{};
 9234|       |
 9235|  94.1k|    switch (get_arg_type(arg)) {
 9236|  15.8k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 15.8k, False: 78.2k]
  ------------------
 9237|  15.8k|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|  15.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  15.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  15.8k|    }                                                                  \
  |  | 9229|  15.8k|    else {                                                             \
  |  | 9230|  15.8k|        return vis(monostate_val);                                     \
  |  | 9231|  15.8k|    }
  ------------------
 9238|  15.8k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 94.1k]
  ------------------
 9239|  15.8k|            SCN_VISIT(short);
  ------------------
  |  | 9226|  15.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  15.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  15.8k|    }                                                                  \
  |  | 9229|  15.8k|    else {                                                             \
  |  | 9230|  15.8k|        return vis(monostate_val);                                     \
  |  | 9231|  15.8k|    }
  ------------------
 9240|  33.6k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 17.7k, False: 76.3k]
  ------------------
 9241|  33.6k|            SCN_VISIT(int);
  ------------------
  |  | 9226|  33.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  33.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  33.6k|    }                                                                  \
  |  | 9229|  33.6k|    else {                                                             \
  |  | 9230|  33.6k|        return vis(monostate_val);                                     \
  |  | 9231|  33.6k|    }
  ------------------
 9242|  33.6k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 94.1k]
  ------------------
 9243|  33.6k|            SCN_VISIT(long);
  ------------------
  |  | 9226|  33.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  33.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  33.6k|    }                                                                  \
  |  | 9229|  33.6k|    else {                                                             \
  |  | 9230|  33.6k|        return vis(monostate_val);                                     \
  |  | 9231|  33.6k|    }
  ------------------
 9244|  51.7k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 18.0k, False: 76.0k]
  ------------------
 9245|  51.7k|            SCN_VISIT(long long);
  ------------------
  |  | 9226|  51.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  51.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  51.7k|    }                                                                  \
  |  | 9229|  51.7k|    else {                                                             \
  |  | 9230|  51.7k|        return vis(monostate_val);                                     \
  |  | 9231|  51.7k|    }
  ------------------
 9246|  64.9k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 13.2k, False: 80.9k]
  ------------------
 9247|  64.9k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|  64.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  64.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  64.9k|    }                                                                  \
  |  | 9229|  64.9k|    else {                                                             \
  |  | 9230|  64.9k|        return vis(monostate_val);                                     \
  |  | 9231|  64.9k|    }
  ------------------
 9248|  64.9k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 94.1k]
  ------------------
 9249|  64.9k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|  64.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  64.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  64.9k|    }                                                                  \
  |  | 9229|  64.9k|    else {                                                             \
  |  | 9230|  64.9k|        return vis(monostate_val);                                     \
  |  | 9231|  64.9k|    }
  ------------------
 9250|  79.4k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 14.5k, False: 79.6k]
  ------------------
 9251|  79.4k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|  79.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  79.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  79.4k|    }                                                                  \
  |  | 9229|  79.4k|    else {                                                             \
  |  | 9230|  79.4k|        return vis(monostate_val);                                     \
  |  | 9231|  79.4k|    }
  ------------------
 9252|  79.4k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 94.1k]
  ------------------
 9253|  79.4k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|  79.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  79.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  79.4k|    }                                                                  \
  |  | 9229|  79.4k|    else {                                                             \
  |  | 9230|  79.4k|        return vis(monostate_val);                                     \
  |  | 9231|  79.4k|    }
  ------------------
 9254|  94.1k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 14.6k, False: 79.4k]
  ------------------
 9255|  94.1k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|  94.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  94.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  94.1k|    }                                                                  \
  |  | 9229|  94.1k|    else {                                                             \
  |  | 9230|  94.1k|        return vis(monostate_val);                                     \
  |  | 9231|  94.1k|    }
  ------------------
 9256|  94.1k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 94.1k]
  ------------------
 9257|  94.1k|            SCN_VISIT(void*);
  ------------------
  |  | 9226|  94.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  94.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  94.1k|    }                                                                  \
  |  | 9229|  94.1k|    else {                                                             \
  |  | 9230|  94.1k|        return vis(monostate_val);                                     \
  |  | 9231|  94.1k|    }
  ------------------
 9258|  94.1k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 94.1k]
  ------------------
 9259|  94.1k|            SCN_VISIT(bool);
  ------------------
  |  | 9226|  94.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  94.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  94.1k|    }                                                                  \
  |  | 9229|  94.1k|    else {                                                             \
  |  | 9230|  94.1k|        return vis(monostate_val);                                     \
  |  | 9231|  94.1k|    }
  ------------------
 9260|  94.1k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 94.1k]
  ------------------
 9261|  94.1k|            SCN_VISIT(char);
  ------------------
  |  | 9226|  94.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  94.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  94.1k|    }                                                                  \
  |  | 9229|  94.1k|    else {                                                             \
  |  | 9230|  94.1k|        return vis(monostate_val);                                     \
  |  | 9231|  94.1k|    }
  ------------------
 9262|  94.1k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 94.1k]
  ------------------
 9263|  94.1k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|  94.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  94.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  94.1k|    }                                                                  \
  |  | 9229|  94.1k|    else {                                                             \
  |  | 9230|  94.1k|        return vis(monostate_val);                                     \
  |  | 9231|  94.1k|    }
  ------------------
 9264|  94.1k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 94.1k]
  ------------------
 9265|  94.1k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|  94.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  94.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  94.1k|    }                                                                  \
  |  | 9229|  94.1k|    else {                                                             \
  |  | 9230|  94.1k|        return vis(monostate_val);                                     \
  |  | 9231|  94.1k|    }
  ------------------
 9266|  94.1k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 94.1k]
  ------------------
 9267|  94.1k|            SCN_VISIT(float);
  ------------------
  |  | 9226|  94.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  94.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  94.1k|    }                                                                  \
  |  | 9229|  94.1k|    else {                                                             \
  |  | 9230|  94.1k|        return vis(monostate_val);                                     \
  |  | 9231|  94.1k|    }
  ------------------
 9268|  94.1k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 94.1k]
  ------------------
 9269|  94.1k|            SCN_VISIT(double);
  ------------------
  |  | 9226|  94.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  94.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  94.1k|    }                                                                  \
  |  | 9229|  94.1k|    else {                                                             \
  |  | 9230|  94.1k|        return vis(monostate_val);                                     \
  |  | 9231|  94.1k|    }
  ------------------
 9270|  94.1k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 94.1k]
  ------------------
 9271|  94.1k|            SCN_VISIT(long double);
  ------------------
  |  | 9226|  94.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  94.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  94.1k|    }                                                                  \
  |  | 9229|  94.1k|    else {                                                             \
  |  | 9230|  94.1k|        return vis(monostate_val);                                     \
  |  | 9231|  94.1k|    }
  ------------------
 9272|  94.1k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 94.1k]
  ------------------
 9273|  94.1k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|  94.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  94.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  94.1k|    }                                                                  \
  |  | 9229|  94.1k|    else {                                                             \
  |  | 9230|  94.1k|        return vis(monostate_val);                                     \
  |  | 9231|  94.1k|    }
  ------------------
 9274|  94.1k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 94.1k]
  ------------------
 9275|  94.1k|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|  94.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  94.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  94.1k|    }                                                                  \
  |  | 9229|  94.1k|    else {                                                             \
  |  | 9230|  94.1k|        return vis(monostate_val);                                     \
  |  | 9231|  94.1k|    }
  ------------------
 9276|  94.1k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 94.1k]
  ------------------
 9277|  94.1k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|  94.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  94.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  94.1k|    }                                                                  \
  |  | 9229|  94.1k|    else {                                                             \
  |  | 9230|  94.1k|        return vis(monostate_val);                                     \
  |  | 9231|  94.1k|    }
  ------------------
 9278|  94.1k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 94.1k]
  ------------------
 9279|  94.1k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|  94.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  94.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  94.1k|    }                                                                  \
  |  | 9229|  94.1k|    else {                                                             \
  |  | 9230|  94.1k|        return vis(monostate_val);                                     \
  |  | 9231|  94.1k|    }
  ------------------
 9280|  94.1k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 94.1k]
  ------------------
 9281|  94.1k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|  94.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  94.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  94.1k|    }                                                                  \
  |  | 9229|  94.1k|    else {                                                             \
  |  | 9230|  94.1k|        return vis(monostate_val);                                     \
  |  | 9231|  94.1k|    }
  ------------------
 9282|  94.1k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 94.1k]
  ------------------
 9283|  94.1k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|  94.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  94.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  94.1k|    }                                                                  \
  |  | 9229|  94.1k|    else {                                                             \
  |  | 9230|  94.1k|        return vis(monostate_val);                                     \
  |  | 9231|  94.1k|    }
  ------------------
 9284|       |
 9285|  94.1k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 94.1k]
  ------------------
 9286|  94.1k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|  94.1k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|  94.1k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 94.1k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 94.1k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|  94.1k|            SCN_CLANG_POP
 9303|  94.1k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v424basic_scan_parse_contextIcEC2IONS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSF_11char_traitsIcEEEEi:
 6279|   354k|        : m_format{format},
 6280|   354k|          m_next_arg_id{next_arg_id},
 6281|   354k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6281:27): [Folded - Ignored]
  ------------------
 6282|   354k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6282:27): [Folded - Ignored]
  ------------------
 6283|       |          m_is_borrowed(
 6284|   354k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6284:16): [Folded - Ignored]
  |  Branch (6284:41): [Folded - Ignored]
  ------------------
 6285|   354k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6285:15): [Folded - Ignored]
  ------------------
 6286|   354k|    {
 6287|   354k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|   354k|    {
 3075|   354k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   354k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|   354k|    {
 3041|   354k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|   354k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   354k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7795|   354k|{
 7796|   354k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7797|   354k|    handler.check_args_exhausted();
 7798|   354k|    return handler.get_error();
 7799|   354k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7760|   354k|{
 7761|       |    // TODO: memchr fast path with a larger (> 32) format string
 7762|       |
 7763|   354k|    auto begin = format.data();
 7764|   354k|    auto it = begin;
 7765|   354k|    const auto end = format.data() + format.size();
 7766|       |
 7767|   635k|    while (it != end) {
  ------------------
  |  Branch (7767:12): [True: 354k, False: 280k]
  ------------------
 7768|   354k|        const auto ch = *it++;
 7769|   354k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7769:13): [True: 354k, False: 0]
  ------------------
 7770|   354k|            handler.on_literal_text(begin, it - 1);
 7771|       |
 7772|   354k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7773|   354k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7773:17): [True: 74.3k, False: 280k]
  ------------------
 7774|  74.3k|                return;
 7775|  74.3k|            }
 7776|   354k|        }
 7777|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7777:18): [True: 0, False: 0]
  ------------------
 7778|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7779|      0|                handler.on_error("Unmatched '}' in format string");
 7780|      0|                return;
 7781|      0|            }
 7782|       |
 7783|      0|            handler.on_literal_text(begin, it);
 7784|      0|            begin = ++it;
 7785|      0|        }
 7786|   354k|    }
 7787|       |
 7788|   280k|    handler.on_literal_text(begin, end);
 7789|   280k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 7692|   354k|{
 7693|   354k|    struct id_adapter {
 7694|   354k|        constexpr void operator()()
 7695|   354k|        {
 7696|   354k|            arg_id = handler.on_arg_id();
 7697|   354k|        }
 7698|   354k|        constexpr void operator()(std::size_t id)
 7699|   354k|        {
 7700|   354k|            arg_id = handler.on_arg_id(id);
 7701|   354k|        }
 7702|       |
 7703|   354k|        constexpr void on_error(const char* msg)
 7704|   354k|        {
 7705|   354k|            SCN_UNLIKELY_ATTR
 7706|   354k|            handler.on_error(msg);
 7707|   354k|        }
 7708|       |
 7709|   354k|        Handler& handler;
 7710|   354k|        std::size_t arg_id;
 7711|   354k|    };
 7712|       |
 7713|   354k|    ++begin;
 7714|   354k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   354k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 354k]
  |  |  ------------------
  ------------------
 7715|      0|        handler.on_error("Unexpected end of replacement field");
 7716|      0|        return begin;
 7717|      0|    }
 7718|       |
 7719|   354k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7719:9): [True: 0, False: 354k]
  ------------------
 7720|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7721|      0|    }
 7722|   354k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7722:14): [True: 0, False: 354k]
  ------------------
 7723|      0|        handler.on_literal_text(begin, begin + 1);
 7724|      0|    }
 7725|   354k|    else {
 7726|   354k|        auto adapter = id_adapter{handler, 0};
 7727|   354k|        begin = parse_arg_id(begin, end, adapter);
 7728|       |
 7729|   354k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   354k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 354k]
  |  |  ------------------
  ------------------
 7730|      0|            handler.on_error("Missing '}' in format string");
 7731|      0|            return begin;
 7732|      0|        }
 7733|       |
 7734|   354k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7734:13): [True: 0, False: 354k]
  ------------------
 7735|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7736|      0|        }
 7737|   354k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7737:18): [True: 354k, False: 0]
  ------------------
 7738|   354k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|   354k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 354k]
  |  |  ------------------
  ------------------
 7739|      0|                handler.on_error("Unexpected end of replacement field");
 7740|      0|                return begin;
 7741|      0|            }
 7742|   354k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7743|   354k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   709k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 24.7k, False: 330k]
  |  |  |  Branch (865:45): [True: 0, False: 354k]
  |  |  |  Branch (865:45): [True: 24.7k, False: 330k]
  |  |  ------------------
  ------------------
 7744|  24.7k|                handler.on_error("Unknown format specifier");
 7745|  24.7k|                return begin;
 7746|  24.7k|            }
 7747|   354k|        }
 7748|      0|        else {
 7749|      0|            SCN_UNLIKELY_ATTR
 7750|      0|            handler.on_error("Missing '}' in format string");
 7751|      0|            return begin;
 7752|      0|        }
 7753|   354k|    }
 7754|   330k|    return begin + 1;
 7755|   354k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE3argEm:
 8846|   710k|    {
 8847|   710k|        return m_args.get(id);
 8848|   710k|    }
_ZN3scn2v424basic_scan_parse_contextIcE11next_arg_idEv:
 6314|   710k|    {
 6315|   710k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  865|   710k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 710k]
  |  |  ------------------
  ------------------
 6316|      0|            on_error(
 6317|      0|                "Cannot switch from manual to automatic argument indexing");
 6318|      0|            return 0;
 6319|      0|        }
 6320|       |
 6321|   710k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6322|   710k|        do_check_arg_id(id);
 6323|   710k|        return id;
 6324|   710k|    }
_ZN3scn2v424basic_scan_parse_contextIcE15do_check_arg_idEm:
 6808|   710k|{
 6809|   710k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6809:9): [Folded - Ignored]
  ------------------
 6810|   710k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6810:10): [Folded - Ignored]
  |  Branch (6810:22): [Folded - Ignored]
  ------------------
 6811|       |        // The cast below will cause an error on gcc pre-12
 6812|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6813|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6813:13): [True: 0, False: 0]
  ------------------
 6814|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6815|      0|            SCN_UNLIKELY_ATTR
 6816|      0|            on_error("Argument not found");
 6817|      0|        }
 6818|      0|    }
 6819|   710k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7193|   354k|{
 7194|   354k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   354k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   354k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7195|   354k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7195:9): [True: 354k, False: 0]
  |  Branch (7195:26): [True: 0, False: 354k]
  ------------------
 7196|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7197|      0|    }
 7198|       |
 7199|   354k|    handler();
 7200|   354k|    return begin;
 7201|   354k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7695|   354k|        {
 7696|   354k|            arg_id = handler.on_arg_id();
 7697|   354k|        }
_ZN3scn2v424basic_scan_parse_contextIcE10advance_toEPKc:
 6309|   660k|    {
 6310|   660k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6311|   660k|    }
_ZNK3scn2v424basic_scan_parse_contextIcE5beginEv:
 6298|  1.37M|    {
 6299|  1.37M|        return m_format.data();
 6300|  1.37M|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7872|   354k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|   354k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7873|   354k|    {
 7874|   354k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|   354k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   354k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7875|   354k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7608|   354k|{
 7609|   354k|    auto do_presentation = [&]() -> const CharT* {
 7610|   354k|        if (*begin == CharT{'['}) {
 7611|   354k|            auto set = parse_presentation_set(begin, end, handler);
 7612|   354k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7613|       |                // clang-format off
 7614|   354k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|   354k|                return begin;
 7617|   354k|            }
 7618|   354k|            handler.on_character_set_string(set);
 7619|   354k|            return begin;
 7620|   354k|        }
 7621|   354k|        if (*begin == CharT{'/'}) {
 7622|   354k|            return parse_presentation_regex(begin, end, handler);
 7623|   354k|        }
 7624|   354k|        presentation_type type = parse_presentation_type(*begin++);
 7625|   354k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7626|   354k|            handler.on_error("Invalid type specifier in format string");
 7627|   354k|            return begin;
 7628|   354k|        }
 7629|   354k|        handler.on_type(type);
 7630|   354k|        return begin;
 7631|   354k|    };
 7632|       |
 7633|   354k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7633:9): [True: 354k, False: 0]
  |  Branch (7633:28): [True: 338k, False: 16.5k]
  ------------------
 7634|   354k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7634:9): [True: 330k, False: 8.25k]
  |  Branch (7634:36): [True: 265k, False: 64.4k]
  ------------------
 7635|   265k|        return do_presentation();
 7636|   265k|    }
 7637|       |
 7638|  89.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  89.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 89.1k]
  |  |  ------------------
  ------------------
 7639|      0|        handler.on_error("Unexpected end of format string");
 7640|      0|        return begin;
 7641|      0|    }
 7642|       |
 7643|  89.1k|    begin = parse_align(begin, end, handler);
 7644|  89.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  89.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 89.1k]
  |  |  ------------------
  ------------------
 7645|      0|        handler.on_error("Unexpected end of format string");
 7646|      0|        return begin;
 7647|      0|    }
 7648|       |
 7649|  89.1k|    begin = parse_width(begin, end, handler);
 7650|  89.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  89.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 89.1k]
  |  |  ------------------
  ------------------
 7651|      0|        handler.on_error("Unexpected end of format string");
 7652|      0|        return begin;
 7653|      0|    }
 7654|       |
 7655|  89.1k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7655:9): [True: 0, False: 89.1k]
  ------------------
 7656|      0|        ++begin;
 7657|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7658|      0|            handler.on_error("Unexpected end of format string");
 7659|      0|            return begin;
 7660|      0|        }
 7661|      0|        begin = parse_precision(begin, end, handler);
 7662|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7663|      0|            handler.on_error("Unexpected end of format string");
 7664|      0|            return begin;
 7665|      0|        }
 7666|      0|    }
 7667|       |
 7668|  89.1k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7668:9): [True: 64.4k, False: 24.7k]
  ------------------
 7669|  64.4k|        handler.on_localized();
 7670|  64.4k|        ++begin;
 7671|  64.4k|    }
 7672|  89.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  89.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 89.1k]
  |  |  ------------------
  ------------------
 7673|      0|        handler.on_error("Unexpected end of format string");
 7674|      0|        return begin;
 7675|      0|    }
 7676|       |
 7677|  89.1k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7677:9): [True: 89.1k, False: 0]
  |  Branch (7677:25): [True: 24.7k, False: 64.4k]
  ------------------
 7678|  24.7k|        do_presentation();
 7679|  24.7k|    }
 7680|  89.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  89.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 89.1k]
  |  |  ------------------
  ------------------
 7681|      0|        handler.on_error("Unexpected end of format string");
 7682|      0|        return begin;
 7683|      0|    }
 7684|       |
 7685|  89.1k|    return begin;
 7686|  89.1k|}
_ZN3scn2v46detail15is_ascii_letterIcEEbT_:
 7257|   677k|{
 7258|   677k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7258:13): [True: 531k, False: 145k]
  |  Branch (7258:33): [True: 531k, False: 0]
  ------------------
 7259|   677k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7259:13): [True: 128k, False: 16.5k]
  |  Branch (7259:33): [True: 128k, False: 0]
  ------------------
 7260|   677k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7609|   290k|    auto do_presentation = [&]() -> const CharT* {
 7610|   290k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7610:13): [True: 0, False: 290k]
  ------------------
 7611|      0|            auto set = parse_presentation_set(begin, end, handler);
 7612|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7613|       |                // clang-format off
 7614|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|      0|                return begin;
 7617|      0|            }
 7618|      0|            handler.on_character_set_string(set);
 7619|      0|            return begin;
 7620|      0|        }
 7621|   290k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7621:13): [True: 0, False: 290k]
  ------------------
 7622|      0|            return parse_presentation_regex(begin, end, handler);
 7623|      0|        }
 7624|   290k|        presentation_type type = parse_presentation_type(*begin++);
 7625|   290k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|   290k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 16.5k, False: 273k]
  |  |  ------------------
  ------------------
 7626|  16.5k|            handler.on_error("Invalid type specifier in format string");
 7627|  16.5k|            return begin;
 7628|  16.5k|        }
 7629|   273k|        handler.on_type(type);
 7630|   273k|        return begin;
 7631|   290k|    };
_ZN3scn2v46detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 7205|   581k|{
 7206|   581k|    switch (type) {
 7207|  44.7k|        case 'b':
  ------------------
  |  Branch (7207:9): [True: 44.7k, False: 536k]
  ------------------
 7208|  61.2k|        case 'B':
  ------------------
  |  Branch (7208:9): [True: 16.5k, False: 564k]
  ------------------
 7209|  61.2k|            return presentation_type::int_binary;
 7210|   127k|        case 'd':
  ------------------
  |  Branch (7210:9): [True: 127k, False: 454k]
  ------------------
 7211|   127k|            return presentation_type::int_decimal;
 7212|   145k|        case 'i':
  ------------------
  |  Branch (7212:9): [True: 145k, False: 436k]
  ------------------
 7213|   145k|            return presentation_type::int_generic;
 7214|      0|        case 'u':
  ------------------
  |  Branch (7214:9): [True: 0, False: 581k]
  ------------------
 7215|      0|            return presentation_type::int_unsigned_decimal;
 7216|  79.4k|        case 'o':
  ------------------
  |  Branch (7216:9): [True: 79.4k, False: 501k]
  ------------------
 7217|  79.4k|            return presentation_type::int_octal;
 7218|   134k|        case 'x':
  ------------------
  |  Branch (7218:9): [True: 134k, False: 446k]
  ------------------
 7219|   134k|        case 'X':
  ------------------
  |  Branch (7219:9): [True: 0, False: 581k]
  ------------------
 7220|   134k|            return presentation_type::int_hex;
 7221|      0|        case 'r':
  ------------------
  |  Branch (7221:9): [True: 0, False: 581k]
  ------------------
 7222|      0|        case 'R':
  ------------------
  |  Branch (7222:9): [True: 0, False: 581k]
  ------------------
 7223|      0|            return presentation_type::int_arbitrary_base;
 7224|      0|        case 'a':
  ------------------
  |  Branch (7224:9): [True: 0, False: 581k]
  ------------------
 7225|      0|        case 'A':
  ------------------
  |  Branch (7225:9): [True: 0, False: 581k]
  ------------------
 7226|      0|            return presentation_type::float_hex;
 7227|      0|        case 'e':
  ------------------
  |  Branch (7227:9): [True: 0, False: 581k]
  ------------------
 7228|      0|        case 'E':
  ------------------
  |  Branch (7228:9): [True: 0, False: 581k]
  ------------------
 7229|      0|            return presentation_type::float_scientific;
 7230|      0|        case 'f':
  ------------------
  |  Branch (7230:9): [True: 0, False: 581k]
  ------------------
 7231|      0|        case 'F':
  ------------------
  |  Branch (7231:9): [True: 0, False: 581k]
  ------------------
 7232|      0|            return presentation_type::float_fixed;
 7233|      0|        case 'g':
  ------------------
  |  Branch (7233:9): [True: 0, False: 581k]
  ------------------
 7234|      0|        case 'G':
  ------------------
  |  Branch (7234:9): [True: 0, False: 581k]
  ------------------
 7235|      0|            return presentation_type::float_general;
 7236|      0|        case 's':
  ------------------
  |  Branch (7236:9): [True: 0, False: 581k]
  ------------------
 7237|      0|            return presentation_type::string;
 7238|      0|        case 'c':
  ------------------
  |  Branch (7238:9): [True: 0, False: 581k]
  ------------------
 7239|      0|            return presentation_type::character;
 7240|      0|        case '?':
  ------------------
  |  Branch (7240:9): [True: 0, False: 581k]
  ------------------
 7241|      0|            return presentation_type::escaped_character;
 7242|      0|        case 'p':
  ------------------
  |  Branch (7242:9): [True: 0, False: 581k]
  ------------------
 7243|      0|            return presentation_type::pointer;
 7244|      0|        case '[':
  ------------------
  |  Branch (7244:9): [True: 0, False: 581k]
  ------------------
 7245|      0|        case '/':
  ------------------
  |  Branch (7245:9): [True: 0, False: 581k]
  ------------------
 7246|       |            // Should be handled by parse_presentation_set and
 7247|       |            // parse_presentation_regex
 7248|      0|            SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7249|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7250|  33.0k|        default:
  ------------------
  |  Branch (7250:9): [True: 33.0k, False: 548k]
  ------------------
 7251|  33.0k|            return presentation_type::none;
 7252|   581k|    }
 7253|   581k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7282|  89.1k|{
 7283|  89.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  89.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  89.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7284|       |
 7285|  89.1k|    auto check_align = [](wchar_t ch) {
 7286|  89.1k|        switch (ch) {
 7287|  89.1k|            case L'<':
 7288|  89.1k|                return align_type::left;
 7289|  89.1k|            case L'>':
 7290|  89.1k|                return align_type::right;
 7291|  89.1k|            case L'^':
 7292|  89.1k|                return align_type::center;
 7293|  89.1k|            default:
 7294|  89.1k|                return align_type::none;
 7295|  89.1k|        }
 7296|  89.1k|    };
 7297|       |
 7298|  89.1k|    auto potential_fill_len = code_point_length(begin, end);
 7299|  89.1k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|   178k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 89.1k]
  |  |  |  Branch (865:45): [True: 0, False: 89.1k]
  |  |  |  Branch (865:45): [True: 0, False: 89.1k]
  |  |  ------------------
  ------------------
 7300|  89.1k|                     std::distance(begin, end) < potential_fill_len)) {
 7301|      0|        handler.on_error("Invalid encoding in fill character");
 7302|      0|        return begin;
 7303|      0|    }
 7304|       |
 7305|  89.1k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7306|       |
 7307|  89.1k|    auto potential_fill = std::basic_string_view<CharT>{
 7308|  89.1k|        begin, static_cast<size_t>(potential_fill_len)};
 7309|  89.1k|    const auto begin_before_fill = begin;
 7310|  89.1k|    begin += potential_fill_len;
 7311|       |
 7312|  89.1k|    if (begin == end) {
  ------------------
  |  Branch (7312:9): [True: 0, False: 89.1k]
  ------------------
 7313|      0|        return begin_before_fill;
 7314|      0|    }
 7315|       |
 7316|  89.1k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7317|  89.1k|    const auto begin_after_fill = begin;
 7318|  89.1k|    ++begin;
 7319|       |
 7320|  89.1k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7320:9): [True: 89.1k, False: 0]
  ------------------
 7321|  89.1k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|  89.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 89.1k]
  |  |  ------------------
  ------------------
 7322|      0|            handler.on_error("Invalid fill character '{' in format string");
 7323|      0|            return begin;
 7324|      0|        }
 7325|  89.1k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7325:13): [True: 0, False: 89.1k]
  ------------------
 7326|      0|            return begin_before_fill;
 7327|      0|        }
 7328|  89.1k|    }
 7329|       |
 7330|  89.1k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7330:9): [True: 89.1k, False: 0]
  ------------------
 7331|  89.1k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7331:13): [True: 0, False: 89.1k]
  ------------------
 7332|      0|            handler.on_align(potential_align_on_fill);
 7333|      0|            return begin_after_fill;
 7334|      0|        }
 7335|  89.1k|        return begin_before_fill;
 7336|  89.1k|    }
 7337|       |
 7338|      0|    handler.on_fill(potential_fill);
 7339|      0|    handler.on_align(potential_align_after_fill);
 7340|      0|    return begin;
 7341|  89.1k|}
_ZN3scn2v46detail17code_point_lengthIcEEiPKT_S5_:
 7264|   178k|{
 7265|   178k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   178k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   178k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7266|       |    if constexpr (sizeof(CharT) != 1) {
 7267|       |        return 1;
 7268|       |    }
 7269|   178k|    else {
 7270|   178k|        const auto lengths =
 7271|   178k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7272|   178k|            "\3\4";
 7273|   178k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7274|   178k|        return len;
 7275|   178k|    }
 7276|   178k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7285|   178k|    auto check_align = [](wchar_t ch) {
 7286|   178k|        switch (ch) {
 7287|      0|            case L'<':
  ------------------
  |  Branch (7287:13): [True: 0, False: 178k]
  ------------------
 7288|      0|                return align_type::left;
 7289|      0|            case L'>':
  ------------------
  |  Branch (7289:13): [True: 0, False: 178k]
  ------------------
 7290|      0|                return align_type::right;
 7291|      0|            case L'^':
  ------------------
  |  Branch (7291:13): [True: 0, False: 178k]
  ------------------
 7292|      0|                return align_type::center;
 7293|   178k|            default:
  ------------------
  |  Branch (7293:13): [True: 178k, False: 0]
  ------------------
 7294|   178k|                return align_type::none;
 7295|   178k|        }
 7296|   178k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7347|  89.1k|{
 7348|  89.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  89.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  89.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7349|       |
 7350|  89.1k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7350:9): [True: 72.6k, False: 16.5k]
  |  Branch (7350:33): [True: 0, False: 72.6k]
  ------------------
 7351|      0|        int width = parse_simple_int(begin, end);
 7352|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7353|      0|            handler.on_width(width);
 7354|      0|        }
 7355|      0|        else {
 7356|      0|            handler.on_error("Invalid field width");
 7357|      0|            return begin;
 7358|      0|        }
 7359|      0|    }
 7360|  89.1k|    return begin;
 7361|  89.1k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEE12on_localizedEv:
 7878|  64.4k|    {
 7879|  64.4k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7880|  64.4k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7880:13): [True: 28.6k, False: 35.7k]
  ------------------
 7881|  64.4k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7881:13): [True: 0, False: 28.6k]
  ------------------
 7882|  64.4k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7882:13): [True: 0, False: 0]
  ------------------
 7883|  64.4k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7883:13): [True: 0, False: 0]
  ------------------
 7884|      0|            SCN_UNLIKELY_ATTR
 7885|       |            // clang-format off
 7886|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7887|       |            // clang-format on
 7888|      0|        }
 7889|       |
 7890|  64.4k|        Handler::on_localized();
 7891|  64.4k|    }
_ZN3scn2v46detail12specs_setter12on_localizedILb1EEEvv:
 7027|   173k|    {
 7028|   173k|        if constexpr (!SCN_DISABLE_LOCALE) {
 7029|   173k|            m_specs.localized = true;
 7030|       |        }
 7031|       |        else {
 7032|       |            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 7033|       |        }
 7034|   173k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9323|   330k|{
 9324|   330k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   330k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|   330k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|   330k|{
 9225|   330k|#define SCN_VISIT(Type)                                                \
 9226|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|   330k|    }                                                                  \
 9229|   330k|    else {                                                             \
 9230|   330k|        return vis(monostate_val);                                     \
 9231|   330k|    }
 9232|       |
 9233|   330k|    monostate monostate_val{};
 9234|       |
 9235|   330k|    switch (get_arg_type(arg)) {
 9236|  53.2k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 53.2k, False: 276k]
  ------------------
 9237|  53.2k|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|  53.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  53.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  53.2k|    }                                                                  \
  |  | 9229|  53.2k|    else {                                                             \
  |  | 9230|  53.2k|        return vis(monostate_val);                                     \
  |  | 9231|  53.2k|    }
  ------------------
 9238|  53.2k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 330k]
  ------------------
 9239|  53.2k|            SCN_VISIT(short);
  ------------------
  |  | 9226|  53.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  53.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  53.2k|    }                                                                  \
  |  | 9229|  53.2k|    else {                                                             \
  |  | 9230|  53.2k|        return vis(monostate_val);                                     \
  |  | 9231|  53.2k|    }
  ------------------
 9240|   116k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 63.1k, False: 266k]
  ------------------
 9241|   116k|            SCN_VISIT(int);
  ------------------
  |  | 9226|   116k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   116k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   116k|    }                                                                  \
  |  | 9229|   116k|    else {                                                             \
  |  | 9230|   116k|        return vis(monostate_val);                                     \
  |  | 9231|   116k|    }
  ------------------
 9242|   116k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 330k]
  ------------------
 9243|   116k|            SCN_VISIT(long);
  ------------------
  |  | 9226|   116k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   116k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   116k|    }                                                                  \
  |  | 9229|   116k|    else {                                                             \
  |  | 9230|   116k|        return vis(monostate_val);                                     \
  |  | 9231|   116k|    }
  ------------------
 9244|   180k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 64.3k, False: 265k]
  ------------------
 9245|   180k|            SCN_VISIT(long long);
  ------------------
  |  | 9226|   180k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   180k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   180k|    }                                                                  \
  |  | 9229|   180k|    else {                                                             \
  |  | 9230|   180k|        return vis(monostate_val);                                     \
  |  | 9231|   180k|    }
  ------------------
 9246|   227k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 46.8k, False: 283k]
  ------------------
 9247|   227k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|   227k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   227k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   227k|    }                                                                  \
  |  | 9229|   227k|    else {                                                             \
  |  | 9230|   227k|        return vis(monostate_val);                                     \
  |  | 9231|   227k|    }
  ------------------
 9248|   227k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 330k]
  ------------------
 9249|   227k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|   227k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   227k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   227k|    }                                                                  \
  |  | 9229|   227k|    else {                                                             \
  |  | 9230|   227k|        return vis(monostate_val);                                     \
  |  | 9231|   227k|    }
  ------------------
 9250|   278k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 51.0k, False: 279k]
  ------------------
 9251|   278k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|   278k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   278k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   278k|    }                                                                  \
  |  | 9229|   278k|    else {                                                             \
  |  | 9230|   278k|        return vis(monostate_val);                                     \
  |  | 9231|   278k|    }
  ------------------
 9252|   278k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 330k]
  ------------------
 9253|   278k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|   278k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   278k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   278k|    }                                                                  \
  |  | 9229|   278k|    else {                                                             \
  |  | 9230|   278k|        return vis(monostate_val);                                     \
  |  | 9231|   278k|    }
  ------------------
 9254|   330k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 51.5k, False: 278k]
  ------------------
 9255|   330k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   330k|    }                                                                  \
  |  | 9229|   330k|    else {                                                             \
  |  | 9230|   330k|        return vis(monostate_val);                                     \
  |  | 9231|   330k|    }
  ------------------
 9256|   330k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 330k]
  ------------------
 9257|   330k|            SCN_VISIT(void*);
  ------------------
  |  | 9226|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   330k|    }                                                                  \
  |  | 9229|   330k|    else {                                                             \
  |  | 9230|   330k|        return vis(monostate_val);                                     \
  |  | 9231|   330k|    }
  ------------------
 9258|   330k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 330k]
  ------------------
 9259|   330k|            SCN_VISIT(bool);
  ------------------
  |  | 9226|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   330k|    }                                                                  \
  |  | 9229|   330k|    else {                                                             \
  |  | 9230|   330k|        return vis(monostate_val);                                     \
  |  | 9231|   330k|    }
  ------------------
 9260|   330k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 330k]
  ------------------
 9261|   330k|            SCN_VISIT(char);
  ------------------
  |  | 9226|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   330k|    }                                                                  \
  |  | 9229|   330k|    else {                                                             \
  |  | 9230|   330k|        return vis(monostate_val);                                     \
  |  | 9231|   330k|    }
  ------------------
 9262|   330k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 330k]
  ------------------
 9263|   330k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   330k|    }                                                                  \
  |  | 9229|   330k|    else {                                                             \
  |  | 9230|   330k|        return vis(monostate_val);                                     \
  |  | 9231|   330k|    }
  ------------------
 9264|   330k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 330k]
  ------------------
 9265|   330k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   330k|    }                                                                  \
  |  | 9229|   330k|    else {                                                             \
  |  | 9230|   330k|        return vis(monostate_val);                                     \
  |  | 9231|   330k|    }
  ------------------
 9266|   330k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 330k]
  ------------------
 9267|   330k|            SCN_VISIT(float);
  ------------------
  |  | 9226|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   330k|    }                                                                  \
  |  | 9229|   330k|    else {                                                             \
  |  | 9230|   330k|        return vis(monostate_val);                                     \
  |  | 9231|   330k|    }
  ------------------
 9268|   330k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 330k]
  ------------------
 9269|   330k|            SCN_VISIT(double);
  ------------------
  |  | 9226|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   330k|    }                                                                  \
  |  | 9229|   330k|    else {                                                             \
  |  | 9230|   330k|        return vis(monostate_val);                                     \
  |  | 9231|   330k|    }
  ------------------
 9270|   330k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 330k]
  ------------------
 9271|   330k|            SCN_VISIT(long double);
  ------------------
  |  | 9226|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   330k|    }                                                                  \
  |  | 9229|   330k|    else {                                                             \
  |  | 9230|   330k|        return vis(monostate_val);                                     \
  |  | 9231|   330k|    }
  ------------------
 9272|   330k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 330k]
  ------------------
 9273|   330k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   330k|    }                                                                  \
  |  | 9229|   330k|    else {                                                             \
  |  | 9230|   330k|        return vis(monostate_val);                                     \
  |  | 9231|   330k|    }
  ------------------
 9274|   330k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 330k]
  ------------------
 9275|   330k|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   330k|    }                                                                  \
  |  | 9229|   330k|    else {                                                             \
  |  | 9230|   330k|        return vis(monostate_val);                                     \
  |  | 9231|   330k|    }
  ------------------
 9276|   330k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 330k]
  ------------------
 9277|   330k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   330k|    }                                                                  \
  |  | 9229|   330k|    else {                                                             \
  |  | 9230|   330k|        return vis(monostate_val);                                     \
  |  | 9231|   330k|    }
  ------------------
 9278|   330k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 330k]
  ------------------
 9279|   330k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   330k|    }                                                                  \
  |  | 9229|   330k|    else {                                                             \
  |  | 9230|   330k|        return vis(monostate_val);                                     \
  |  | 9231|   330k|    }
  ------------------
 9280|   330k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 330k]
  ------------------
 9281|   330k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   330k|    }                                                                  \
  |  | 9229|   330k|    else {                                                             \
  |  | 9230|   330k|        return vis(monostate_val);                                     \
  |  | 9231|   330k|    }
  ------------------
 9282|   330k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 330k]
  ------------------
 9283|   330k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   330k|    }                                                                  \
  |  | 9229|   330k|    else {                                                             \
  |  | 9230|   330k|        return vis(monostate_val);                                     \
  |  | 9231|   330k|    }
  ------------------
 9284|       |
 9285|   330k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 330k]
  ------------------
 9286|   330k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|   330k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|   330k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 330k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 330k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|   330k|            SCN_CLANG_POP
 9303|   330k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v424basic_scan_parse_contextIcEC2IRNS0_6detail17basic_scan_bufferIcEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEi:
 6279|   355k|        : m_format{format},
 6280|   355k|          m_next_arg_id{next_arg_id},
 6281|   355k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6281:27): [Folded - Ignored]
  ------------------
 6282|   355k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6282:27): [Folded - Ignored]
  ------------------
 6283|       |          m_is_borrowed(
 6284|   355k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6284:16): [Folded - Ignored]
  |  Branch (6284:41): [Folded - Ignored]
  ------------------
 6285|   355k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6285:15): [Folded - Ignored]
  ------------------
 6286|   355k|    {
 6287|   355k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7795|   355k|{
 7796|   355k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7797|   355k|    handler.check_args_exhausted();
 7798|   355k|    return handler.get_error();
 7799|   355k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7760|   355k|{
 7761|       |    // TODO: memchr fast path with a larger (> 32) format string
 7762|       |
 7763|   355k|    auto begin = format.data();
 7764|   355k|    auto it = begin;
 7765|   355k|    const auto end = format.data() + format.size();
 7766|       |
 7767|   636k|    while (it != end) {
  ------------------
  |  Branch (7767:12): [True: 355k, False: 281k]
  ------------------
 7768|   355k|        const auto ch = *it++;
 7769|   355k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7769:13): [True: 355k, False: 0]
  ------------------
 7770|   355k|            handler.on_literal_text(begin, it - 1);
 7771|       |
 7772|   355k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7773|   355k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7773:17): [True: 74.3k, False: 281k]
  ------------------
 7774|  74.3k|                return;
 7775|  74.3k|            }
 7776|   355k|        }
 7777|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7777:18): [True: 0, False: 0]
  ------------------
 7778|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7779|      0|                handler.on_error("Unmatched '}' in format string");
 7780|      0|                return;
 7781|      0|            }
 7782|       |
 7783|      0|            handler.on_literal_text(begin, it);
 7784|      0|            begin = ++it;
 7785|      0|        }
 7786|   355k|    }
 7787|       |
 7788|   281k|    handler.on_literal_text(begin, end);
 7789|   281k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE10advance_toENS2_17basic_scan_bufferIcE16forward_iteratorE:
 8985|   281k|    {
 8986|   281k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|   281k|    static_cast<    \
  |  |  935|   281k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8987|   281k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 7692|   355k|{
 7693|   355k|    struct id_adapter {
 7694|   355k|        constexpr void operator()()
 7695|   355k|        {
 7696|   355k|            arg_id = handler.on_arg_id();
 7697|   355k|        }
 7698|   355k|        constexpr void operator()(std::size_t id)
 7699|   355k|        {
 7700|   355k|            arg_id = handler.on_arg_id(id);
 7701|   355k|        }
 7702|       |
 7703|   355k|        constexpr void on_error(const char* msg)
 7704|   355k|        {
 7705|   355k|            SCN_UNLIKELY_ATTR
 7706|   355k|            handler.on_error(msg);
 7707|   355k|        }
 7708|       |
 7709|   355k|        Handler& handler;
 7710|   355k|        std::size_t arg_id;
 7711|   355k|    };
 7712|       |
 7713|   355k|    ++begin;
 7714|   355k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   355k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 355k]
  |  |  ------------------
  ------------------
 7715|      0|        handler.on_error("Unexpected end of replacement field");
 7716|      0|        return begin;
 7717|      0|    }
 7718|       |
 7719|   355k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7719:9): [True: 0, False: 355k]
  ------------------
 7720|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7721|      0|    }
 7722|   355k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7722:14): [True: 0, False: 355k]
  ------------------
 7723|      0|        handler.on_literal_text(begin, begin + 1);
 7724|      0|    }
 7725|   355k|    else {
 7726|   355k|        auto adapter = id_adapter{handler, 0};
 7727|   355k|        begin = parse_arg_id(begin, end, adapter);
 7728|       |
 7729|   355k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   355k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 355k]
  |  |  ------------------
  ------------------
 7730|      0|            handler.on_error("Missing '}' in format string");
 7731|      0|            return begin;
 7732|      0|        }
 7733|       |
 7734|   355k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7734:13): [True: 0, False: 355k]
  ------------------
 7735|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7736|      0|        }
 7737|   355k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7737:18): [True: 355k, False: 0]
  ------------------
 7738|   355k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|   355k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 355k]
  |  |  ------------------
  ------------------
 7739|      0|                handler.on_error("Unexpected end of replacement field");
 7740|      0|                return begin;
 7741|      0|            }
 7742|   355k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7743|   355k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   710k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 24.7k, False: 330k]
  |  |  |  Branch (865:45): [True: 0, False: 355k]
  |  |  |  Branch (865:45): [True: 24.7k, False: 330k]
  |  |  ------------------
  ------------------
 7744|  24.7k|                handler.on_error("Unknown format specifier");
 7745|  24.7k|                return begin;
 7746|  24.7k|            }
 7747|   355k|        }
 7748|      0|        else {
 7749|      0|            SCN_UNLIKELY_ATTR
 7750|      0|            handler.on_error("Missing '}' in format string");
 7751|      0|            return begin;
 7752|      0|        }
 7753|   355k|    }
 7754|   330k|    return begin + 1;
 7755|   355k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7193|   355k|{
 7194|   355k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   355k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   355k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7195|   355k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7195:9): [True: 355k, False: 0]
  |  Branch (7195:26): [True: 0, False: 355k]
  ------------------
 7196|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7197|      0|    }
 7198|       |
 7199|   355k|    handler();
 7200|   355k|    return begin;
 7201|   355k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7695|   355k|        {
 7696|   355k|            arg_id = handler.on_arg_id();
 7697|   355k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7872|   355k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|   355k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7873|   355k|    {
 7874|   355k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|   355k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   355k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7875|   355k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7608|   355k|{
 7609|   355k|    auto do_presentation = [&]() -> const CharT* {
 7610|   355k|        if (*begin == CharT{'['}) {
 7611|   355k|            auto set = parse_presentation_set(begin, end, handler);
 7612|   355k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7613|       |                // clang-format off
 7614|   355k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|   355k|                return begin;
 7617|   355k|            }
 7618|   355k|            handler.on_character_set_string(set);
 7619|   355k|            return begin;
 7620|   355k|        }
 7621|   355k|        if (*begin == CharT{'/'}) {
 7622|   355k|            return parse_presentation_regex(begin, end, handler);
 7623|   355k|        }
 7624|   355k|        presentation_type type = parse_presentation_type(*begin++);
 7625|   355k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7626|   355k|            handler.on_error("Invalid type specifier in format string");
 7627|   355k|            return begin;
 7628|   355k|        }
 7629|   355k|        handler.on_type(type);
 7630|   355k|        return begin;
 7631|   355k|    };
 7632|       |
 7633|   355k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7633:9): [True: 355k, False: 0]
  |  Branch (7633:28): [True: 338k, False: 16.5k]
  ------------------
 7634|   355k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7634:9): [True: 330k, False: 8.25k]
  |  Branch (7634:36): [True: 266k, False: 64.4k]
  ------------------
 7635|   266k|        return do_presentation();
 7636|   266k|    }
 7637|       |
 7638|  89.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  89.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 89.2k]
  |  |  ------------------
  ------------------
 7639|      0|        handler.on_error("Unexpected end of format string");
 7640|      0|        return begin;
 7641|      0|    }
 7642|       |
 7643|  89.2k|    begin = parse_align(begin, end, handler);
 7644|  89.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  89.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 89.2k]
  |  |  ------------------
  ------------------
 7645|      0|        handler.on_error("Unexpected end of format string");
 7646|      0|        return begin;
 7647|      0|    }
 7648|       |
 7649|  89.2k|    begin = parse_width(begin, end, handler);
 7650|  89.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  89.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 89.2k]
  |  |  ------------------
  ------------------
 7651|      0|        handler.on_error("Unexpected end of format string");
 7652|      0|        return begin;
 7653|      0|    }
 7654|       |
 7655|  89.2k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7655:9): [True: 0, False: 89.2k]
  ------------------
 7656|      0|        ++begin;
 7657|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7658|      0|            handler.on_error("Unexpected end of format string");
 7659|      0|            return begin;
 7660|      0|        }
 7661|      0|        begin = parse_precision(begin, end, handler);
 7662|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7663|      0|            handler.on_error("Unexpected end of format string");
 7664|      0|            return begin;
 7665|      0|        }
 7666|      0|    }
 7667|       |
 7668|  89.2k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7668:9): [True: 64.4k, False: 24.7k]
  ------------------
 7669|  64.4k|        handler.on_localized();
 7670|  64.4k|        ++begin;
 7671|  64.4k|    }
 7672|  89.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  89.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 89.2k]
  |  |  ------------------
  ------------------
 7673|      0|        handler.on_error("Unexpected end of format string");
 7674|      0|        return begin;
 7675|      0|    }
 7676|       |
 7677|  89.2k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7677:9): [True: 89.2k, False: 0]
  |  Branch (7677:25): [True: 24.7k, False: 64.4k]
  ------------------
 7678|  24.7k|        do_presentation();
 7679|  24.7k|    }
 7680|  89.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  89.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 89.2k]
  |  |  ------------------
  ------------------
 7681|      0|        handler.on_error("Unexpected end of format string");
 7682|      0|        return begin;
 7683|      0|    }
 7684|       |
 7685|  89.2k|    return begin;
 7686|  89.2k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7609|   290k|    auto do_presentation = [&]() -> const CharT* {
 7610|   290k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7610:13): [True: 0, False: 290k]
  ------------------
 7611|      0|            auto set = parse_presentation_set(begin, end, handler);
 7612|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7613|       |                // clang-format off
 7614|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|      0|                return begin;
 7617|      0|            }
 7618|      0|            handler.on_character_set_string(set);
 7619|      0|            return begin;
 7620|      0|        }
 7621|   290k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7621:13): [True: 0, False: 290k]
  ------------------
 7622|      0|            return parse_presentation_regex(begin, end, handler);
 7623|      0|        }
 7624|   290k|        presentation_type type = parse_presentation_type(*begin++);
 7625|   290k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|   290k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 16.5k, False: 274k]
  |  |  ------------------
  ------------------
 7626|  16.5k|            handler.on_error("Invalid type specifier in format string");
 7627|  16.5k|            return begin;
 7628|  16.5k|        }
 7629|   274k|        handler.on_type(type);
 7630|   274k|        return begin;
 7631|   290k|    };
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7282|  89.2k|{
 7283|  89.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  89.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  89.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7284|       |
 7285|  89.2k|    auto check_align = [](wchar_t ch) {
 7286|  89.2k|        switch (ch) {
 7287|  89.2k|            case L'<':
 7288|  89.2k|                return align_type::left;
 7289|  89.2k|            case L'>':
 7290|  89.2k|                return align_type::right;
 7291|  89.2k|            case L'^':
 7292|  89.2k|                return align_type::center;
 7293|  89.2k|            default:
 7294|  89.2k|                return align_type::none;
 7295|  89.2k|        }
 7296|  89.2k|    };
 7297|       |
 7298|  89.2k|    auto potential_fill_len = code_point_length(begin, end);
 7299|  89.2k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|   178k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 89.2k]
  |  |  |  Branch (865:45): [True: 0, False: 89.2k]
  |  |  |  Branch (865:45): [True: 0, False: 89.2k]
  |  |  ------------------
  ------------------
 7300|  89.2k|                     std::distance(begin, end) < potential_fill_len)) {
 7301|      0|        handler.on_error("Invalid encoding in fill character");
 7302|      0|        return begin;
 7303|      0|    }
 7304|       |
 7305|  89.2k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7306|       |
 7307|  89.2k|    auto potential_fill = std::basic_string_view<CharT>{
 7308|  89.2k|        begin, static_cast<size_t>(potential_fill_len)};
 7309|  89.2k|    const auto begin_before_fill = begin;
 7310|  89.2k|    begin += potential_fill_len;
 7311|       |
 7312|  89.2k|    if (begin == end) {
  ------------------
  |  Branch (7312:9): [True: 0, False: 89.2k]
  ------------------
 7313|      0|        return begin_before_fill;
 7314|      0|    }
 7315|       |
 7316|  89.2k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7317|  89.2k|    const auto begin_after_fill = begin;
 7318|  89.2k|    ++begin;
 7319|       |
 7320|  89.2k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7320:9): [True: 89.2k, False: 0]
  ------------------
 7321|  89.2k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|  89.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 89.2k]
  |  |  ------------------
  ------------------
 7322|      0|            handler.on_error("Invalid fill character '{' in format string");
 7323|      0|            return begin;
 7324|      0|        }
 7325|  89.2k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7325:13): [True: 0, False: 89.2k]
  ------------------
 7326|      0|            return begin_before_fill;
 7327|      0|        }
 7328|  89.2k|    }
 7329|       |
 7330|  89.2k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7330:9): [True: 89.2k, False: 0]
  ------------------
 7331|  89.2k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7331:13): [True: 0, False: 89.2k]
  ------------------
 7332|      0|            handler.on_align(potential_align_on_fill);
 7333|      0|            return begin_after_fill;
 7334|      0|        }
 7335|  89.2k|        return begin_before_fill;
 7336|  89.2k|    }
 7337|       |
 7338|      0|    handler.on_fill(potential_fill);
 7339|      0|    handler.on_align(potential_align_after_fill);
 7340|      0|    return begin;
 7341|  89.2k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 7285|   178k|    auto check_align = [](wchar_t ch) {
 7286|   178k|        switch (ch) {
 7287|      0|            case L'<':
  ------------------
  |  Branch (7287:13): [True: 0, False: 178k]
  ------------------
 7288|      0|                return align_type::left;
 7289|      0|            case L'>':
  ------------------
  |  Branch (7289:13): [True: 0, False: 178k]
  ------------------
 7290|      0|                return align_type::right;
 7291|      0|            case L'^':
  ------------------
  |  Branch (7291:13): [True: 0, False: 178k]
  ------------------
 7292|      0|                return align_type::center;
 7293|   178k|            default:
  ------------------
  |  Branch (7293:13): [True: 178k, False: 0]
  ------------------
 7294|   178k|                return align_type::none;
 7295|   178k|        }
 7296|   178k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7347|  89.2k|{
 7348|  89.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  89.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  89.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7349|       |
 7350|  89.2k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7350:9): [True: 72.7k, False: 16.5k]
  |  Branch (7350:33): [True: 0, False: 72.7k]
  ------------------
 7351|      0|        int width = parse_simple_int(begin, end);
 7352|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7353|      0|            handler.on_width(width);
 7354|      0|        }
 7355|      0|        else {
 7356|      0|            handler.on_error("Invalid field width");
 7357|      0|            return begin;
 7358|      0|        }
 7359|      0|    }
 7360|  89.2k|    return begin;
 7361|  89.2k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE12on_localizedEv:
 7878|  64.4k|    {
 7879|  64.4k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7880|  64.4k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7880:13): [True: 28.7k, False: 35.7k]
  ------------------
 7881|  64.4k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7881:13): [True: 0, False: 28.7k]
  ------------------
 7882|  64.4k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7882:13): [True: 0, False: 0]
  ------------------
 7883|  64.4k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7883:13): [True: 0, False: 0]
  ------------------
 7884|      0|            SCN_UNLIKELY_ATTR
 7885|       |            // clang-format off
 7886|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7887|       |            // clang-format on
 7888|      0|        }
 7889|       |
 7890|  64.4k|        Handler::on_localized();
 7891|  64.4k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 9323|   330k|{
 9324|   330k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   330k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|   330k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|   330k|{
 9225|   330k|#define SCN_VISIT(Type)                                                \
 9226|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|   330k|    }                                                                  \
 9229|   330k|    else {                                                             \
 9230|   330k|        return vis(monostate_val);                                     \
 9231|   330k|    }
 9232|       |
 9233|   330k|    monostate monostate_val{};
 9234|       |
 9235|   330k|    switch (get_arg_type(arg)) {
 9236|  53.2k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 53.2k, False: 277k]
  ------------------
 9237|  53.2k|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|  53.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  53.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  53.2k|    }                                                                  \
  |  | 9229|  53.2k|    else {                                                             \
  |  | 9230|  53.2k|        return vis(monostate_val);                                     \
  |  | 9231|  53.2k|    }
  ------------------
 9238|  53.2k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 330k]
  ------------------
 9239|  53.2k|            SCN_VISIT(short);
  ------------------
  |  | 9226|  53.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  53.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  53.2k|    }                                                                  \
  |  | 9229|  53.2k|    else {                                                             \
  |  | 9230|  53.2k|        return vis(monostate_val);                                     \
  |  | 9231|  53.2k|    }
  ------------------
 9240|   116k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 63.2k, False: 267k]
  ------------------
 9241|   116k|            SCN_VISIT(int);
  ------------------
  |  | 9226|   116k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   116k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   116k|    }                                                                  \
  |  | 9229|   116k|    else {                                                             \
  |  | 9230|   116k|        return vis(monostate_val);                                     \
  |  | 9231|   116k|    }
  ------------------
 9242|   116k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 330k]
  ------------------
 9243|   116k|            SCN_VISIT(long);
  ------------------
  |  | 9226|   116k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   116k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   116k|    }                                                                  \
  |  | 9229|   116k|    else {                                                             \
  |  | 9230|   116k|        return vis(monostate_val);                                     \
  |  | 9231|   116k|    }
  ------------------
 9244|   180k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 64.4k, False: 266k]
  ------------------
 9245|   180k|            SCN_VISIT(long long);
  ------------------
  |  | 9226|   180k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   180k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   180k|    }                                                                  \
  |  | 9229|   180k|    else {                                                             \
  |  | 9230|   180k|        return vis(monostate_val);                                     \
  |  | 9231|   180k|    }
  ------------------
 9246|   227k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 46.8k, False: 283k]
  ------------------
 9247|   227k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|   227k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   227k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   227k|    }                                                                  \
  |  | 9229|   227k|    else {                                                             \
  |  | 9230|   227k|        return vis(monostate_val);                                     \
  |  | 9231|   227k|    }
  ------------------
 9248|   227k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 330k]
  ------------------
 9249|   227k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|   227k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   227k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   227k|    }                                                                  \
  |  | 9229|   227k|    else {                                                             \
  |  | 9230|   227k|        return vis(monostate_val);                                     \
  |  | 9231|   227k|    }
  ------------------
 9250|   278k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 51.1k, False: 279k]
  ------------------
 9251|   278k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|   278k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   278k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   278k|    }                                                                  \
  |  | 9229|   278k|    else {                                                             \
  |  | 9230|   278k|        return vis(monostate_val);                                     \
  |  | 9231|   278k|    }
  ------------------
 9252|   278k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 330k]
  ------------------
 9253|   278k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|   278k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   278k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   278k|    }                                                                  \
  |  | 9229|   278k|    else {                                                             \
  |  | 9230|   278k|        return vis(monostate_val);                                     \
  |  | 9231|   278k|    }
  ------------------
 9254|   330k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 51.6k, False: 278k]
  ------------------
 9255|   330k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   330k|    }                                                                  \
  |  | 9229|   330k|    else {                                                             \
  |  | 9230|   330k|        return vis(monostate_val);                                     \
  |  | 9231|   330k|    }
  ------------------
 9256|   330k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 330k]
  ------------------
 9257|   330k|            SCN_VISIT(void*);
  ------------------
  |  | 9226|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   330k|    }                                                                  \
  |  | 9229|   330k|    else {                                                             \
  |  | 9230|   330k|        return vis(monostate_val);                                     \
  |  | 9231|   330k|    }
  ------------------
 9258|   330k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 330k]
  ------------------
 9259|   330k|            SCN_VISIT(bool);
  ------------------
  |  | 9226|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   330k|    }                                                                  \
  |  | 9229|   330k|    else {                                                             \
  |  | 9230|   330k|        return vis(monostate_val);                                     \
  |  | 9231|   330k|    }
  ------------------
 9260|   330k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 330k]
  ------------------
 9261|   330k|            SCN_VISIT(char);
  ------------------
  |  | 9226|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   330k|    }                                                                  \
  |  | 9229|   330k|    else {                                                             \
  |  | 9230|   330k|        return vis(monostate_val);                                     \
  |  | 9231|   330k|    }
  ------------------
 9262|   330k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 330k]
  ------------------
 9263|   330k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   330k|    }                                                                  \
  |  | 9229|   330k|    else {                                                             \
  |  | 9230|   330k|        return vis(monostate_val);                                     \
  |  | 9231|   330k|    }
  ------------------
 9264|   330k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 330k]
  ------------------
 9265|   330k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   330k|    }                                                                  \
  |  | 9229|   330k|    else {                                                             \
  |  | 9230|   330k|        return vis(monostate_val);                                     \
  |  | 9231|   330k|    }
  ------------------
 9266|   330k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 330k]
  ------------------
 9267|   330k|            SCN_VISIT(float);
  ------------------
  |  | 9226|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   330k|    }                                                                  \
  |  | 9229|   330k|    else {                                                             \
  |  | 9230|   330k|        return vis(monostate_val);                                     \
  |  | 9231|   330k|    }
  ------------------
 9268|   330k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 330k]
  ------------------
 9269|   330k|            SCN_VISIT(double);
  ------------------
  |  | 9226|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   330k|    }                                                                  \
  |  | 9229|   330k|    else {                                                             \
  |  | 9230|   330k|        return vis(monostate_val);                                     \
  |  | 9231|   330k|    }
  ------------------
 9270|   330k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 330k]
  ------------------
 9271|   330k|            SCN_VISIT(long double);
  ------------------
  |  | 9226|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   330k|    }                                                                  \
  |  | 9229|   330k|    else {                                                             \
  |  | 9230|   330k|        return vis(monostate_val);                                     \
  |  | 9231|   330k|    }
  ------------------
 9272|   330k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 330k]
  ------------------
 9273|   330k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   330k|    }                                                                  \
  |  | 9229|   330k|    else {                                                             \
  |  | 9230|   330k|        return vis(monostate_val);                                     \
  |  | 9231|   330k|    }
  ------------------
 9274|   330k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 330k]
  ------------------
 9275|   330k|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   330k|    }                                                                  \
  |  | 9229|   330k|    else {                                                             \
  |  | 9230|   330k|        return vis(monostate_val);                                     \
  |  | 9231|   330k|    }
  ------------------
 9276|   330k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 330k]
  ------------------
 9277|   330k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   330k|    }                                                                  \
  |  | 9229|   330k|    else {                                                             \
  |  | 9230|   330k|        return vis(monostate_val);                                     \
  |  | 9231|   330k|    }
  ------------------
 9278|   330k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 330k]
  ------------------
 9279|   330k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   330k|    }                                                                  \
  |  | 9229|   330k|    else {                                                             \
  |  | 9230|   330k|        return vis(monostate_val);                                     \
  |  | 9231|   330k|    }
  ------------------
 9280|   330k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 330k]
  ------------------
 9281|   330k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   330k|    }                                                                  \
  |  | 9229|   330k|    else {                                                             \
  |  | 9230|   330k|        return vis(monostate_val);                                     \
  |  | 9231|   330k|    }
  ------------------
 9282|   330k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 330k]
  ------------------
 9283|   330k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   330k|    }                                                                  \
  |  | 9229|   330k|    else {                                                             \
  |  | 9230|   330k|        return vis(monostate_val);                                     \
  |  | 9231|   330k|    }
  ------------------
 9284|       |
 9285|   330k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 330k]
  ------------------
 9286|   330k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|   330k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|   330k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 330k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 330k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|   330k|            SCN_CLANG_POP
 9303|   330k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v46detail17basic_scan_bufferIcE8sync_allEv:
 4351|  86.6k|    {
 4352|  86.6k|        return sync(0);
 4353|  86.6k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4sizeEv:
 6181|   346k|    {
 6182|   346k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|   346k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 346k]
  |  |  ------------------
  ------------------
 6183|      0|            return max_size();
 6184|      0|        }
 6185|       |
 6186|   346k|        return static_cast<std::size_t>(m_desc &
 6187|   346k|                                        ((1 << detail::packed_arg_bits) - 1));
 6188|   346k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE9is_packedEv:
 6207|   693k|    {
 6208|   693k|        return (m_desc & detail::is_unpacked_bit) == 0;
 6209|   693k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE3getEm:
 6149|   346k|    {
 6150|   346k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|   346k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 346k]
  |  |  ------------------
  ------------------
 6151|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6152|      0|                return m_args[id];
 6153|      0|            }
 6154|      0|            return {};
 6155|      0|        }
 6156|       |
 6157|   346k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  865|   346k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 346k]
  |  |  ------------------
  ------------------
 6158|      0|            return {};
 6159|      0|        }
 6160|       |
 6161|   346k|        const auto t = type(id);
 6162|   346k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  865|   346k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 346k]
  |  |  ------------------
  ------------------
 6163|      0|            return {};
 6164|      0|        }
 6165|       |
 6166|   346k|        basic_scan_arg<Context> arg;
 6167|   346k|        arg.m_type = t;
 6168|   346k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6168:13): [True: 346k, False: 0]
  ------------------
 6169|   346k|            arg.m_value.ref_value = m_builtin_values[id];
 6170|   346k|        }
 6171|      0|        else {
 6172|      0|            arg.m_value = m_values[id];
 6173|      0|        }
 6174|   346k|        return arg;
 6175|   346k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4typeEm:
 6216|   346k|    {
 6217|       |        // First (0th) index is size, types start after that
 6218|   346k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6219|   346k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6220|   346k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6221|   346k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15is_only_builtinEv:
 6211|   346k|    {
 6212|   346k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6213|   346k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEcvbEv:
 5965|   577k|    {
 5966|   577k|        return m_type != detail::arg_type::none_type;
 5967|   577k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9323|  25.4k|{
 9324|  25.4k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  25.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|  25.4k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|  25.4k|{
 9225|  25.4k|#define SCN_VISIT(Type)                                                \
 9226|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|  25.4k|    }                                                                  \
 9229|  25.4k|    else {                                                             \
 9230|  25.4k|        return vis(monostate_val);                                     \
 9231|  25.4k|    }
 9232|       |
 9233|  25.4k|    monostate monostate_val{};
 9234|       |
 9235|  25.4k|    switch (get_arg_type(arg)) {
 9236|  4.23k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 4.23k, False: 21.2k]
  ------------------
 9237|  4.23k|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|  4.23k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  4.23k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  4.23k|    }                                                                  \
  |  | 9229|  4.23k|    else {                                                             \
  |  | 9230|  4.23k|        return vis(monostate_val);                                     \
  |  | 9231|  4.23k|    }
  ------------------
 9238|  4.23k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 25.4k]
  ------------------
 9239|  4.23k|            SCN_VISIT(short);
  ------------------
  |  | 9226|  4.23k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  4.23k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  4.23k|    }                                                                  \
  |  | 9229|  4.23k|    else {                                                             \
  |  | 9230|  4.23k|        return vis(monostate_val);                                     \
  |  | 9231|  4.23k|    }
  ------------------
 9240|  8.48k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 4.25k, False: 21.2k]
  ------------------
 9241|  8.48k|            SCN_VISIT(int);
  ------------------
  |  | 9226|  8.48k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  8.48k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  8.48k|    }                                                                  \
  |  | 9229|  8.48k|    else {                                                             \
  |  | 9230|  8.48k|        return vis(monostate_val);                                     \
  |  | 9231|  8.48k|    }
  ------------------
 9242|  8.48k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 25.4k]
  ------------------
 9243|  8.48k|            SCN_VISIT(long);
  ------------------
  |  | 9226|  8.48k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  8.48k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  8.48k|    }                                                                  \
  |  | 9229|  8.48k|    else {                                                             \
  |  | 9230|  8.48k|        return vis(monostate_val);                                     \
  |  | 9231|  8.48k|    }
  ------------------
 9244|  12.7k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 4.28k, False: 21.1k]
  ------------------
 9245|  12.7k|            SCN_VISIT(long long);
  ------------------
  |  | 9226|  12.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  12.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  12.7k|    }                                                                  \
  |  | 9229|  12.7k|    else {                                                             \
  |  | 9230|  12.7k|        return vis(monostate_val);                                     \
  |  | 9231|  12.7k|    }
  ------------------
 9246|  16.9k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 4.20k, False: 21.2k]
  ------------------
 9247|  16.9k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|  16.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  16.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  16.9k|    }                                                                  \
  |  | 9229|  16.9k|    else {                                                             \
  |  | 9230|  16.9k|        return vis(monostate_val);                                     \
  |  | 9231|  16.9k|    }
  ------------------
 9248|  16.9k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 25.4k]
  ------------------
 9249|  16.9k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|  16.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  16.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  16.9k|    }                                                                  \
  |  | 9229|  16.9k|    else {                                                             \
  |  | 9230|  16.9k|        return vis(monostate_val);                                     \
  |  | 9231|  16.9k|    }
  ------------------
 9250|  21.2k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 4.22k, False: 21.2k]
  ------------------
 9251|  21.2k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|  21.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  21.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  21.2k|    }                                                                  \
  |  | 9229|  21.2k|    else {                                                             \
  |  | 9230|  21.2k|        return vis(monostate_val);                                     \
  |  | 9231|  21.2k|    }
  ------------------
 9252|  21.2k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 25.4k]
  ------------------
 9253|  21.2k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|  21.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  21.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  21.2k|    }                                                                  \
  |  | 9229|  21.2k|    else {                                                             \
  |  | 9230|  21.2k|        return vis(monostate_val);                                     \
  |  | 9231|  21.2k|    }
  ------------------
 9254|  25.4k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 4.25k, False: 21.2k]
  ------------------
 9255|  25.4k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  25.4k|    }                                                                  \
  |  | 9229|  25.4k|    else {                                                             \
  |  | 9230|  25.4k|        return vis(monostate_val);                                     \
  |  | 9231|  25.4k|    }
  ------------------
 9256|  25.4k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 25.4k]
  ------------------
 9257|  25.4k|            SCN_VISIT(void*);
  ------------------
  |  | 9226|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  25.4k|    }                                                                  \
  |  | 9229|  25.4k|    else {                                                             \
  |  | 9230|  25.4k|        return vis(monostate_val);                                     \
  |  | 9231|  25.4k|    }
  ------------------
 9258|  25.4k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 25.4k]
  ------------------
 9259|  25.4k|            SCN_VISIT(bool);
  ------------------
  |  | 9226|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  25.4k|    }                                                                  \
  |  | 9229|  25.4k|    else {                                                             \
  |  | 9230|  25.4k|        return vis(monostate_val);                                     \
  |  | 9231|  25.4k|    }
  ------------------
 9260|  25.4k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 25.4k]
  ------------------
 9261|  25.4k|            SCN_VISIT(char);
  ------------------
  |  | 9226|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  25.4k|    }                                                                  \
  |  | 9229|  25.4k|    else {                                                             \
  |  | 9230|  25.4k|        return vis(monostate_val);                                     \
  |  | 9231|  25.4k|    }
  ------------------
 9262|  25.4k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 25.4k]
  ------------------
 9263|  25.4k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  25.4k|    }                                                                  \
  |  | 9229|  25.4k|    else {                                                             \
  |  | 9230|  25.4k|        return vis(monostate_val);                                     \
  |  | 9231|  25.4k|    }
  ------------------
 9264|  25.4k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 25.4k]
  ------------------
 9265|  25.4k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  25.4k|    }                                                                  \
  |  | 9229|  25.4k|    else {                                                             \
  |  | 9230|  25.4k|        return vis(monostate_val);                                     \
  |  | 9231|  25.4k|    }
  ------------------
 9266|  25.4k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 25.4k]
  ------------------
 9267|  25.4k|            SCN_VISIT(float);
  ------------------
  |  | 9226|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  25.4k|    }                                                                  \
  |  | 9229|  25.4k|    else {                                                             \
  |  | 9230|  25.4k|        return vis(monostate_val);                                     \
  |  | 9231|  25.4k|    }
  ------------------
 9268|  25.4k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 25.4k]
  ------------------
 9269|  25.4k|            SCN_VISIT(double);
  ------------------
  |  | 9226|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  25.4k|    }                                                                  \
  |  | 9229|  25.4k|    else {                                                             \
  |  | 9230|  25.4k|        return vis(monostate_val);                                     \
  |  | 9231|  25.4k|    }
  ------------------
 9270|  25.4k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 25.4k]
  ------------------
 9271|  25.4k|            SCN_VISIT(long double);
  ------------------
  |  | 9226|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  25.4k|    }                                                                  \
  |  | 9229|  25.4k|    else {                                                             \
  |  | 9230|  25.4k|        return vis(monostate_val);                                     \
  |  | 9231|  25.4k|    }
  ------------------
 9272|  25.4k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 25.4k]
  ------------------
 9273|  25.4k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  25.4k|    }                                                                  \
  |  | 9229|  25.4k|    else {                                                             \
  |  | 9230|  25.4k|        return vis(monostate_val);                                     \
  |  | 9231|  25.4k|    }
  ------------------
 9274|  25.4k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 25.4k]
  ------------------
 9275|  25.4k|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  25.4k|    }                                                                  \
  |  | 9229|  25.4k|    else {                                                             \
  |  | 9230|  25.4k|        return vis(monostate_val);                                     \
  |  | 9231|  25.4k|    }
  ------------------
 9276|  25.4k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 25.4k]
  ------------------
 9277|  25.4k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  25.4k|    }                                                                  \
  |  | 9229|  25.4k|    else {                                                             \
  |  | 9230|  25.4k|        return vis(monostate_val);                                     \
  |  | 9231|  25.4k|    }
  ------------------
 9278|  25.4k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 25.4k]
  ------------------
 9279|  25.4k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  25.4k|    }                                                                  \
  |  | 9229|  25.4k|    else {                                                             \
  |  | 9230|  25.4k|        return vis(monostate_val);                                     \
  |  | 9231|  25.4k|    }
  ------------------
 9280|  25.4k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 25.4k]
  ------------------
 9281|  25.4k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  25.4k|    }                                                                  \
  |  | 9229|  25.4k|    else {                                                             \
  |  | 9230|  25.4k|        return vis(monostate_val);                                     \
  |  | 9231|  25.4k|    }
  ------------------
 9282|  25.4k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 25.4k]
  ------------------
 9283|  25.4k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  25.4k|    }                                                                  \
  |  | 9229|  25.4k|    else {                                                             \
  |  | 9230|  25.4k|        return vis(monostate_val);                                     \
  |  | 9231|  25.4k|    }
  ------------------
 9284|       |
 9285|  25.4k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 25.4k]
  ------------------
 9286|  25.4k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|  25.4k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|  25.4k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 25.4k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 25.4k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|  25.4k|            SCN_CLANG_POP
 9303|  25.4k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6010|   890k|{
 6011|   890k|    return arg.m_type;
 6012|   890k|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6022|   264k|{
 6023|   264k|    return arg.m_value;
 6024|   264k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwEC2ENS2_17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 8947|   156k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  934|   156k|    static_cast<    \
  |  |  935|   156k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|   156k|    {
 8949|   156k|    }
_ZN3scn2v424basic_scan_parse_contextIwEC2IONS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSF_11char_traitsIwEEEEi:
 6279|   156k|        : m_format{format},
 6280|   156k|          m_next_arg_id{next_arg_id},
 6281|   156k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6281:27): [Folded - Ignored]
  ------------------
 6282|   156k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6282:27): [Folded - Ignored]
  ------------------
 6283|       |          m_is_borrowed(
 6284|   156k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6284:16): [Folded - Ignored]
  |  Branch (6284:41): [Folded - Ignored]
  ------------------
 6285|   156k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6285:15): [Folded - Ignored]
  ------------------
 6286|   156k|    {
 6287|   156k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|   156k|    {
 3075|   156k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   156k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|   156k|    {
 3041|   156k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|   156k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   156k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7795|   156k|{
 7796|   156k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7797|   156k|    handler.check_args_exhausted();
 7798|   156k|    return handler.get_error();
 7799|   156k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7760|   156k|{
 7761|       |    // TODO: memchr fast path with a larger (> 32) format string
 7762|       |
 7763|   156k|    auto begin = format.data();
 7764|   156k|    auto it = begin;
 7765|   156k|    const auto end = format.data() + format.size();
 7766|       |
 7767|   164k|    while (it != end) {
  ------------------
  |  Branch (7767:12): [True: 156k, False: 7.90k]
  ------------------
 7768|   156k|        const auto ch = *it++;
 7769|   156k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7769:13): [True: 156k, False: 0]
  ------------------
 7770|   156k|            handler.on_literal_text(begin, it - 1);
 7771|       |
 7772|   156k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7773|   156k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7773:17): [True: 148k, False: 7.90k]
  ------------------
 7774|   148k|                return;
 7775|   148k|            }
 7776|   156k|        }
 7777|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7777:18): [True: 0, False: 0]
  ------------------
 7778|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7779|      0|                handler.on_error("Unmatched '}' in format string");
 7780|      0|                return;
 7781|      0|            }
 7782|       |
 7783|      0|            handler.on_literal_text(begin, it);
 7784|      0|            begin = ++it;
 7785|      0|        }
 7786|   156k|    }
 7787|       |
 7788|  7.90k|    handler.on_literal_text(begin, end);
 7789|  7.90k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 7692|   156k|{
 7693|   156k|    struct id_adapter {
 7694|   156k|        constexpr void operator()()
 7695|   156k|        {
 7696|   156k|            arg_id = handler.on_arg_id();
 7697|   156k|        }
 7698|   156k|        constexpr void operator()(std::size_t id)
 7699|   156k|        {
 7700|   156k|            arg_id = handler.on_arg_id(id);
 7701|   156k|        }
 7702|       |
 7703|   156k|        constexpr void on_error(const char* msg)
 7704|   156k|        {
 7705|   156k|            SCN_UNLIKELY_ATTR
 7706|   156k|            handler.on_error(msg);
 7707|   156k|        }
 7708|       |
 7709|   156k|        Handler& handler;
 7710|   156k|        std::size_t arg_id;
 7711|   156k|    };
 7712|       |
 7713|   156k|    ++begin;
 7714|   156k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 156k]
  |  |  ------------------
  ------------------
 7715|      0|        handler.on_error("Unexpected end of replacement field");
 7716|      0|        return begin;
 7717|      0|    }
 7718|       |
 7719|   156k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7719:9): [True: 0, False: 156k]
  ------------------
 7720|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7721|      0|    }
 7722|   156k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7722:14): [True: 0, False: 156k]
  ------------------
 7723|      0|        handler.on_literal_text(begin, begin + 1);
 7724|      0|    }
 7725|   156k|    else {
 7726|   156k|        auto adapter = id_adapter{handler, 0};
 7727|   156k|        begin = parse_arg_id(begin, end, adapter);
 7728|       |
 7729|   156k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 156k]
  |  |  ------------------
  ------------------
 7730|      0|            handler.on_error("Missing '}' in format string");
 7731|      0|            return begin;
 7732|      0|        }
 7733|       |
 7734|   156k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7734:13): [True: 0, False: 156k]
  ------------------
 7735|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7736|      0|        }
 7737|   156k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7737:18): [True: 156k, False: 0]
  ------------------
 7738|   156k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 156k]
  |  |  ------------------
  ------------------
 7739|      0|                handler.on_error("Unexpected end of replacement field");
 7740|      0|                return begin;
 7741|      0|            }
 7742|   156k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7743|   156k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   313k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 49.5k, False: 106k]
  |  |  |  Branch (865:45): [True: 0, False: 156k]
  |  |  |  Branch (865:45): [True: 49.5k, False: 106k]
  |  |  ------------------
  ------------------
 7744|  49.5k|                handler.on_error("Unknown format specifier");
 7745|  49.5k|                return begin;
 7746|  49.5k|            }
 7747|   156k|        }
 7748|      0|        else {
 7749|      0|            SCN_UNLIKELY_ATTR
 7750|      0|            handler.on_error("Missing '}' in format string");
 7751|      0|            return begin;
 7752|      0|        }
 7753|   156k|    }
 7754|   106k|    return begin + 1;
 7755|   156k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE3argEm:
 8846|   313k|    {
 8847|   313k|        return m_args.get(id);
 8848|   313k|    }
_ZN3scn2v424basic_scan_parse_contextIwE11next_arg_idEv:
 6314|   313k|    {
 6315|   313k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  865|   313k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 313k]
  |  |  ------------------
  ------------------
 6316|      0|            on_error(
 6317|      0|                "Cannot switch from manual to automatic argument indexing");
 6318|      0|            return 0;
 6319|      0|        }
 6320|       |
 6321|   313k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6322|   313k|        do_check_arg_id(id);
 6323|   313k|        return id;
 6324|   313k|    }
_ZN3scn2v424basic_scan_parse_contextIwE15do_check_arg_idEm:
 6808|   313k|{
 6809|   313k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6809:9): [Folded - Ignored]
  ------------------
 6810|   313k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6810:10): [Folded - Ignored]
  |  Branch (6810:22): [Folded - Ignored]
  ------------------
 6811|       |        // The cast below will cause an error on gcc pre-12
 6812|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6813|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6813:13): [True: 0, False: 0]
  ------------------
 6814|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6815|      0|            SCN_UNLIKELY_ATTR
 6816|      0|            on_error("Argument not found");
 6817|      0|        }
 6818|      0|    }
 6819|   313k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7193|   156k|{
 7194|   156k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   156k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   156k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7195|   156k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7195:9): [True: 156k, False: 0]
  |  Branch (7195:26): [True: 0, False: 156k]
  ------------------
 7196|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7197|      0|    }
 7198|       |
 7199|   156k|    handler();
 7200|   156k|    return begin;
 7201|   156k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7695|   156k|        {
 7696|   156k|            arg_id = handler.on_arg_id();
 7697|   156k|        }
_ZN3scn2v424basic_scan_parse_contextIwE10advance_toEPKw:
 6309|   213k|    {
 6310|   213k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6311|   213k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE3getEv:
 4690|   181k|{
 4691|   181k|    if (is_contiguous()) {
  ------------------
  |  Branch (4691:9): [True: 0, False: 181k]
  ------------------
 4692|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4693|      0|                                ranges::default_sentinel};
 4694|      0|    }
 4695|   181k|    return ranges::subrange{forward_iterator{this, 0},
 4696|   181k|                            ranges::default_sentinel};
 4697|   181k|}
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4453|   181k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4454|   181k|    {
 4455|   181k|        SCN_EXPECT(parent);
  ------------------
  |  |  930|   181k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   181k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|   181k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  930|   181k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   181k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4457|   181k|    }
_ZNK3scn2v424basic_scan_parse_contextIwE5beginEv:
 6298|   526k|    {
 6299|   526k|        return m_format.data();
 6300|   526k|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7872|   156k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|   156k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7873|   156k|    {
 7874|   156k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|   156k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   156k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7875|   156k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7608|   156k|{
 7609|   156k|    auto do_presentation = [&]() -> const CharT* {
 7610|   156k|        if (*begin == CharT{'['}) {
 7611|   156k|            auto set = parse_presentation_set(begin, end, handler);
 7612|   156k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7613|       |                // clang-format off
 7614|   156k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|   156k|                return begin;
 7617|   156k|            }
 7618|   156k|            handler.on_character_set_string(set);
 7619|   156k|            return begin;
 7620|   156k|        }
 7621|   156k|        if (*begin == CharT{'/'}) {
 7622|   156k|            return parse_presentation_regex(begin, end, handler);
 7623|   156k|        }
 7624|   156k|        presentation_type type = parse_presentation_type(*begin++);
 7625|   156k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7626|   156k|            handler.on_error("Invalid type specifier in format string");
 7627|   156k|            return begin;
 7628|   156k|        }
 7629|   156k|        handler.on_type(type);
 7630|   156k|        return begin;
 7631|   156k|    };
 7632|       |
 7633|   156k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7633:9): [True: 156k, False: 0]
  |  Branch (7633:28): [True: 123k, False: 33.0k]
  ------------------
 7634|   156k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7634:9): [True: 106k, False: 16.5k]
  |  Branch (7634:36): [True: 84.4k, False: 22.4k]
  ------------------
 7635|  84.4k|        return do_presentation();
 7636|  84.4k|    }
 7637|       |
 7638|  72.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  72.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 72.0k]
  |  |  ------------------
  ------------------
 7639|      0|        handler.on_error("Unexpected end of format string");
 7640|      0|        return begin;
 7641|      0|    }
 7642|       |
 7643|  72.0k|    begin = parse_align(begin, end, handler);
 7644|  72.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  72.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 72.0k]
  |  |  ------------------
  ------------------
 7645|      0|        handler.on_error("Unexpected end of format string");
 7646|      0|        return begin;
 7647|      0|    }
 7648|       |
 7649|  72.0k|    begin = parse_width(begin, end, handler);
 7650|  72.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  72.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 72.0k]
  |  |  ------------------
  ------------------
 7651|      0|        handler.on_error("Unexpected end of format string");
 7652|      0|        return begin;
 7653|      0|    }
 7654|       |
 7655|  72.0k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7655:9): [True: 0, False: 72.0k]
  ------------------
 7656|      0|        ++begin;
 7657|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7658|      0|            handler.on_error("Unexpected end of format string");
 7659|      0|            return begin;
 7660|      0|        }
 7661|      0|        begin = parse_precision(begin, end, handler);
 7662|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7663|      0|            handler.on_error("Unexpected end of format string");
 7664|      0|            return begin;
 7665|      0|        }
 7666|      0|    }
 7667|       |
 7668|  72.0k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7668:9): [True: 22.4k, False: 49.5k]
  ------------------
 7669|  22.4k|        handler.on_localized();
 7670|  22.4k|        ++begin;
 7671|  22.4k|    }
 7672|  72.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  72.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 72.0k]
  |  |  ------------------
  ------------------
 7673|      0|        handler.on_error("Unexpected end of format string");
 7674|      0|        return begin;
 7675|      0|    }
 7676|       |
 7677|  72.0k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7677:9): [True: 72.0k, False: 0]
  |  Branch (7677:25): [True: 49.5k, False: 22.4k]
  ------------------
 7678|  49.5k|        do_presentation();
 7679|  49.5k|    }
 7680|  72.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  72.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 72.0k]
  |  |  ------------------
  ------------------
 7681|      0|        handler.on_error("Unexpected end of format string");
 7682|      0|        return begin;
 7683|      0|    }
 7684|       |
 7685|  72.0k|    return begin;
 7686|  72.0k|}
_ZN3scn2v46detail15is_ascii_letterIwEEbT_:
 7257|   246k|{
 7258|   246k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7258:13): [True: 168k, False: 78.0k]
  |  Branch (7258:33): [True: 168k, False: 0]
  ------------------
 7259|   246k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7259:13): [True: 44.9k, False: 33.0k]
  |  Branch (7259:33): [True: 44.9k, False: 0]
  ------------------
 7260|   246k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7609|   134k|    auto do_presentation = [&]() -> const CharT* {
 7610|   134k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7610:13): [True: 0, False: 134k]
  ------------------
 7611|      0|            auto set = parse_presentation_set(begin, end, handler);
 7612|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7613|       |                // clang-format off
 7614|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|      0|                return begin;
 7617|      0|            }
 7618|      0|            handler.on_character_set_string(set);
 7619|      0|            return begin;
 7620|      0|        }
 7621|   134k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7621:13): [True: 0, False: 134k]
  ------------------
 7622|      0|            return parse_presentation_regex(begin, end, handler);
 7623|      0|        }
 7624|   134k|        presentation_type type = parse_presentation_type(*begin++);
 7625|   134k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 33.0k, False: 100k]
  |  |  ------------------
  ------------------
 7626|  33.0k|            handler.on_error("Invalid type specifier in format string");
 7627|  33.0k|            return begin;
 7628|  33.0k|        }
 7629|   100k|        handler.on_type(type);
 7630|   100k|        return begin;
 7631|   134k|    };
_ZN3scn2v46detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 7205|   268k|{
 7206|   268k|    switch (type) {
 7207|  33.4k|        case 'b':
  ------------------
  |  Branch (7207:9): [True: 33.4k, False: 234k]
  ------------------
 7208|  66.4k|        case 'B':
  ------------------
  |  Branch (7208:9): [True: 33.0k, False: 235k]
  ------------------
 7209|  66.4k|            return presentation_type::int_binary;
 7210|  33.9k|        case 'd':
  ------------------
  |  Branch (7210:9): [True: 33.9k, False: 234k]
  ------------------
 7211|  33.9k|            return presentation_type::int_decimal;
 7212|  33.9k|        case 'i':
  ------------------
  |  Branch (7212:9): [True: 33.9k, False: 234k]
  ------------------
 7213|  33.9k|            return presentation_type::int_generic;
 7214|      0|        case 'u':
  ------------------
  |  Branch (7214:9): [True: 0, False: 268k]
  ------------------
 7215|      0|            return presentation_type::int_unsigned_decimal;
 7216|  33.5k|        case 'o':
  ------------------
  |  Branch (7216:9): [True: 33.5k, False: 234k]
  ------------------
 7217|  33.5k|            return presentation_type::int_octal;
 7218|  34.0k|        case 'x':
  ------------------
  |  Branch (7218:9): [True: 34.0k, False: 234k]
  ------------------
 7219|  34.0k|        case 'X':
  ------------------
  |  Branch (7219:9): [True: 0, False: 268k]
  ------------------
 7220|  34.0k|            return presentation_type::int_hex;
 7221|      0|        case 'r':
  ------------------
  |  Branch (7221:9): [True: 0, False: 268k]
  ------------------
 7222|      0|        case 'R':
  ------------------
  |  Branch (7222:9): [True: 0, False: 268k]
  ------------------
 7223|      0|            return presentation_type::int_arbitrary_base;
 7224|      0|        case 'a':
  ------------------
  |  Branch (7224:9): [True: 0, False: 268k]
  ------------------
 7225|      0|        case 'A':
  ------------------
  |  Branch (7225:9): [True: 0, False: 268k]
  ------------------
 7226|      0|            return presentation_type::float_hex;
 7227|      0|        case 'e':
  ------------------
  |  Branch (7227:9): [True: 0, False: 268k]
  ------------------
 7228|      0|        case 'E':
  ------------------
  |  Branch (7228:9): [True: 0, False: 268k]
  ------------------
 7229|      0|            return presentation_type::float_scientific;
 7230|      0|        case 'f':
  ------------------
  |  Branch (7230:9): [True: 0, False: 268k]
  ------------------
 7231|      0|        case 'F':
  ------------------
  |  Branch (7231:9): [True: 0, False: 268k]
  ------------------
 7232|      0|            return presentation_type::float_fixed;
 7233|      0|        case 'g':
  ------------------
  |  Branch (7233:9): [True: 0, False: 268k]
  ------------------
 7234|      0|        case 'G':
  ------------------
  |  Branch (7234:9): [True: 0, False: 268k]
  ------------------
 7235|      0|            return presentation_type::float_general;
 7236|      0|        case 's':
  ------------------
  |  Branch (7236:9): [True: 0, False: 268k]
  ------------------
 7237|      0|            return presentation_type::string;
 7238|      0|        case 'c':
  ------------------
  |  Branch (7238:9): [True: 0, False: 268k]
  ------------------
 7239|      0|            return presentation_type::character;
 7240|      0|        case '?':
  ------------------
  |  Branch (7240:9): [True: 0, False: 268k]
  ------------------
 7241|      0|            return presentation_type::escaped_character;
 7242|      0|        case 'p':
  ------------------
  |  Branch (7242:9): [True: 0, False: 268k]
  ------------------
 7243|      0|            return presentation_type::pointer;
 7244|      0|        case '[':
  ------------------
  |  Branch (7244:9): [True: 0, False: 268k]
  ------------------
 7245|      0|        case '/':
  ------------------
  |  Branch (7245:9): [True: 0, False: 268k]
  ------------------
 7246|       |            // Should be handled by parse_presentation_set and
 7247|       |            // parse_presentation_regex
 7248|      0|            SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7249|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7250|  66.0k|        default:
  ------------------
  |  Branch (7250:9): [True: 66.0k, False: 201k]
  ------------------
 7251|  66.0k|            return presentation_type::none;
 7252|   268k|    }
 7253|   268k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7282|  72.0k|{
 7283|  72.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  72.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  72.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7284|       |
 7285|  72.0k|    auto check_align = [](wchar_t ch) {
 7286|  72.0k|        switch (ch) {
 7287|  72.0k|            case L'<':
 7288|  72.0k|                return align_type::left;
 7289|  72.0k|            case L'>':
 7290|  72.0k|                return align_type::right;
 7291|  72.0k|            case L'^':
 7292|  72.0k|                return align_type::center;
 7293|  72.0k|            default:
 7294|  72.0k|                return align_type::none;
 7295|  72.0k|        }
 7296|  72.0k|    };
 7297|       |
 7298|  72.0k|    auto potential_fill_len = code_point_length(begin, end);
 7299|  72.0k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|   144k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 72.0k]
  |  |  |  Branch (865:45): [True: 0, False: 72.0k]
  |  |  |  Branch (865:45): [True: 0, False: 72.0k]
  |  |  ------------------
  ------------------
 7300|  72.0k|                     std::distance(begin, end) < potential_fill_len)) {
 7301|      0|        handler.on_error("Invalid encoding in fill character");
 7302|      0|        return begin;
 7303|      0|    }
 7304|       |
 7305|  72.0k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7306|       |
 7307|  72.0k|    auto potential_fill = std::basic_string_view<CharT>{
 7308|  72.0k|        begin, static_cast<size_t>(potential_fill_len)};
 7309|  72.0k|    const auto begin_before_fill = begin;
 7310|  72.0k|    begin += potential_fill_len;
 7311|       |
 7312|  72.0k|    if (begin == end) {
  ------------------
  |  Branch (7312:9): [True: 0, False: 72.0k]
  ------------------
 7313|      0|        return begin_before_fill;
 7314|      0|    }
 7315|       |
 7316|  72.0k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7317|  72.0k|    const auto begin_after_fill = begin;
 7318|  72.0k|    ++begin;
 7319|       |
 7320|  72.0k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7320:9): [True: 72.0k, False: 0]
  ------------------
 7321|  72.0k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|  72.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 72.0k]
  |  |  ------------------
  ------------------
 7322|      0|            handler.on_error("Invalid fill character '{' in format string");
 7323|      0|            return begin;
 7324|      0|        }
 7325|  72.0k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7325:13): [True: 0, False: 72.0k]
  ------------------
 7326|      0|            return begin_before_fill;
 7327|      0|        }
 7328|  72.0k|    }
 7329|       |
 7330|  72.0k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7330:9): [True: 72.0k, False: 0]
  ------------------
 7331|  72.0k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7331:13): [True: 0, False: 72.0k]
  ------------------
 7332|      0|            handler.on_align(potential_align_on_fill);
 7333|      0|            return begin_after_fill;
 7334|      0|        }
 7335|  72.0k|        return begin_before_fill;
 7336|  72.0k|    }
 7337|       |
 7338|      0|    handler.on_fill(potential_fill);
 7339|      0|    handler.on_align(potential_align_after_fill);
 7340|      0|    return begin;
 7341|  72.0k|}
_ZN3scn2v46detail17code_point_lengthIwEEiPKT_S5_:
 7264|   144k|{
 7265|   144k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   144k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   144k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7266|   144k|    if constexpr (sizeof(CharT) != 1) {
 7267|   144k|        return 1;
 7268|       |    }
 7269|       |    else {
 7270|       |        const auto lengths =
 7271|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7272|       |            "\3\4";
 7273|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7274|       |        return len;
 7275|       |    }
 7276|   144k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7285|   144k|    auto check_align = [](wchar_t ch) {
 7286|   144k|        switch (ch) {
 7287|      0|            case L'<':
  ------------------
  |  Branch (7287:13): [True: 0, False: 144k]
  ------------------
 7288|      0|                return align_type::left;
 7289|      0|            case L'>':
  ------------------
  |  Branch (7289:13): [True: 0, False: 144k]
  ------------------
 7290|      0|                return align_type::right;
 7291|      0|            case L'^':
  ------------------
  |  Branch (7291:13): [True: 0, False: 144k]
  ------------------
 7292|      0|                return align_type::center;
 7293|   144k|            default:
  ------------------
  |  Branch (7293:13): [True: 144k, False: 0]
  ------------------
 7294|   144k|                return align_type::none;
 7295|   144k|        }
 7296|   144k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7347|  72.0k|{
 7348|  72.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  72.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  72.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7349|       |
 7350|  72.0k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7350:9): [True: 39.0k, False: 33.0k]
  |  Branch (7350:33): [True: 0, False: 39.0k]
  ------------------
 7351|      0|        int width = parse_simple_int(begin, end);
 7352|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7353|      0|            handler.on_width(width);
 7354|      0|        }
 7355|      0|        else {
 7356|      0|            handler.on_error("Invalid field width");
 7357|      0|            return begin;
 7358|      0|        }
 7359|      0|    }
 7360|  72.0k|    return begin;
 7361|  72.0k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEE12on_localizedEv:
 7878|  22.4k|    {
 7879|  22.4k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7880|  22.4k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7880:13): [True: 11.2k, False: 11.2k]
  ------------------
 7881|  22.4k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7881:13): [True: 0, False: 11.2k]
  ------------------
 7882|  22.4k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7882:13): [True: 0, False: 0]
  ------------------
 7883|  22.4k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7883:13): [True: 0, False: 0]
  ------------------
 7884|      0|            SCN_UNLIKELY_ATTR
 7885|       |            // clang-format off
 7886|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7887|       |            // clang-format on
 7888|      0|        }
 7889|       |
 7890|  22.4k|        Handler::on_localized();
 7891|  22.4k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9323|   106k|{
 9324|   106k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   106k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|   106k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|   106k|{
 9225|   106k|#define SCN_VISIT(Type)                                                \
 9226|   106k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|   106k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|   106k|    }                                                                  \
 9229|   106k|    else {                                                             \
 9230|   106k|        return vis(monostate_val);                                     \
 9231|   106k|    }
 9232|       |
 9233|   106k|    monostate monostate_val{};
 9234|       |
 9235|   106k|    switch (get_arg_type(arg)) {
 9236|  16.8k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 16.8k, False: 90.1k]
  ------------------
 9237|  16.8k|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|  16.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  16.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  16.8k|    }                                                                  \
  |  | 9229|  16.8k|    else {                                                             \
  |  | 9230|  16.8k|        return vis(monostate_val);                                     \
  |  | 9231|  16.8k|    }
  ------------------
 9238|  16.8k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 106k]
  ------------------
 9239|  16.8k|            SCN_VISIT(short);
  ------------------
  |  | 9226|  16.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  16.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  16.8k|    }                                                                  \
  |  | 9229|  16.8k|    else {                                                             \
  |  | 9230|  16.8k|        return vis(monostate_val);                                     \
  |  | 9231|  16.8k|    }
  ------------------
 9240|  35.2k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 18.3k, False: 88.6k]
  ------------------
 9241|  35.2k|            SCN_VISIT(int);
  ------------------
  |  | 9226|  35.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  35.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  35.2k|    }                                                                  \
  |  | 9229|  35.2k|    else {                                                             \
  |  | 9230|  35.2k|        return vis(monostate_val);                                     \
  |  | 9231|  35.2k|    }
  ------------------
 9242|  35.2k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 106k]
  ------------------
 9243|  35.2k|            SCN_VISIT(long);
  ------------------
  |  | 9226|  35.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  35.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  35.2k|    }                                                                  \
  |  | 9229|  35.2k|    else {                                                             \
  |  | 9230|  35.2k|        return vis(monostate_val);                                     \
  |  | 9231|  35.2k|    }
  ------------------
 9244|  53.6k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 18.4k, False: 88.5k]
  ------------------
 9245|  53.6k|            SCN_VISIT(long long);
  ------------------
  |  | 9226|  53.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  53.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  53.6k|    }                                                                  \
  |  | 9229|  53.6k|    else {                                                             \
  |  | 9230|  53.6k|        return vis(monostate_val);                                     \
  |  | 9231|  53.6k|    }
  ------------------
 9246|  70.4k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 16.8k, False: 90.1k]
  ------------------
 9247|  70.4k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|  70.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  70.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  70.4k|    }                                                                  \
  |  | 9229|  70.4k|    else {                                                             \
  |  | 9230|  70.4k|        return vis(monostate_val);                                     \
  |  | 9231|  70.4k|    }
  ------------------
 9248|  70.4k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 106k]
  ------------------
 9249|  70.4k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|  70.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  70.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  70.4k|    }                                                                  \
  |  | 9229|  70.4k|    else {                                                             \
  |  | 9230|  70.4k|        return vis(monostate_val);                                     \
  |  | 9231|  70.4k|    }
  ------------------
 9250|  88.6k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 18.2k, False: 88.7k]
  ------------------
 9251|  88.6k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|  88.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  88.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  88.6k|    }                                                                  \
  |  | 9229|  88.6k|    else {                                                             \
  |  | 9230|  88.6k|        return vis(monostate_val);                                     \
  |  | 9231|  88.6k|    }
  ------------------
 9252|  88.6k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 106k]
  ------------------
 9253|  88.6k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|  88.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  88.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  88.6k|    }                                                                  \
  |  | 9229|  88.6k|    else {                                                             \
  |  | 9230|  88.6k|        return vis(monostate_val);                                     \
  |  | 9231|  88.6k|    }
  ------------------
 9254|   106k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 18.3k, False: 88.6k]
  ------------------
 9255|   106k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|   106k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   106k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   106k|    }                                                                  \
  |  | 9229|   106k|    else {                                                             \
  |  | 9230|   106k|        return vis(monostate_val);                                     \
  |  | 9231|   106k|    }
  ------------------
 9256|   106k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 106k]
  ------------------
 9257|   106k|            SCN_VISIT(void*);
  ------------------
  |  | 9226|   106k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   106k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   106k|    }                                                                  \
  |  | 9229|   106k|    else {                                                             \
  |  | 9230|   106k|        return vis(monostate_val);                                     \
  |  | 9231|   106k|    }
  ------------------
 9258|   106k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 106k]
  ------------------
 9259|   106k|            SCN_VISIT(bool);
  ------------------
  |  | 9226|   106k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   106k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   106k|    }                                                                  \
  |  | 9229|   106k|    else {                                                             \
  |  | 9230|   106k|        return vis(monostate_val);                                     \
  |  | 9231|   106k|    }
  ------------------
 9260|   106k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 106k]
  ------------------
 9261|   106k|            SCN_VISIT(char);
  ------------------
  |  | 9226|   106k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   106k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   106k|    }                                                                  \
  |  | 9229|   106k|    else {                                                             \
  |  | 9230|   106k|        return vis(monostate_val);                                     \
  |  | 9231|   106k|    }
  ------------------
 9262|   106k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 106k]
  ------------------
 9263|   106k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|   106k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   106k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   106k|    }                                                                  \
  |  | 9229|   106k|    else {                                                             \
  |  | 9230|   106k|        return vis(monostate_val);                                     \
  |  | 9231|   106k|    }
  ------------------
 9264|   106k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 106k]
  ------------------
 9265|   106k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|   106k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   106k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   106k|    }                                                                  \
  |  | 9229|   106k|    else {                                                             \
  |  | 9230|   106k|        return vis(monostate_val);                                     \
  |  | 9231|   106k|    }
  ------------------
 9266|   106k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 106k]
  ------------------
 9267|   106k|            SCN_VISIT(float);
  ------------------
  |  | 9226|   106k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   106k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   106k|    }                                                                  \
  |  | 9229|   106k|    else {                                                             \
  |  | 9230|   106k|        return vis(monostate_val);                                     \
  |  | 9231|   106k|    }
  ------------------
 9268|   106k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 106k]
  ------------------
 9269|   106k|            SCN_VISIT(double);
  ------------------
  |  | 9226|   106k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   106k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   106k|    }                                                                  \
  |  | 9229|   106k|    else {                                                             \
  |  | 9230|   106k|        return vis(monostate_val);                                     \
  |  | 9231|   106k|    }
  ------------------
 9270|   106k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 106k]
  ------------------
 9271|   106k|            SCN_VISIT(long double);
  ------------------
  |  | 9226|   106k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   106k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   106k|    }                                                                  \
  |  | 9229|   106k|    else {                                                             \
  |  | 9230|   106k|        return vis(monostate_val);                                     \
  |  | 9231|   106k|    }
  ------------------
 9272|   106k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 106k]
  ------------------
 9273|   106k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|   106k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   106k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   106k|    }                                                                  \
  |  | 9229|   106k|    else {                                                             \
  |  | 9230|   106k|        return vis(monostate_val);                                     \
  |  | 9231|   106k|    }
  ------------------
 9274|   106k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 106k]
  ------------------
 9275|   106k|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|   106k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   106k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   106k|    }                                                                  \
  |  | 9229|   106k|    else {                                                             \
  |  | 9230|   106k|        return vis(monostate_val);                                     \
  |  | 9231|   106k|    }
  ------------------
 9276|   106k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 106k]
  ------------------
 9277|   106k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|   106k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   106k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   106k|    }                                                                  \
  |  | 9229|   106k|    else {                                                             \
  |  | 9230|   106k|        return vis(monostate_val);                                     \
  |  | 9231|   106k|    }
  ------------------
 9278|   106k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 106k]
  ------------------
 9279|   106k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|   106k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   106k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   106k|    }                                                                  \
  |  | 9229|   106k|    else {                                                             \
  |  | 9230|   106k|        return vis(monostate_val);                                     \
  |  | 9231|   106k|    }
  ------------------
 9280|   106k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 106k]
  ------------------
 9281|   106k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|   106k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   106k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   106k|    }                                                                  \
  |  | 9229|   106k|    else {                                                             \
  |  | 9230|   106k|        return vis(monostate_val);                                     \
  |  | 9231|   106k|    }
  ------------------
 9282|   106k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 106k]
  ------------------
 9283|   106k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|   106k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   106k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   106k|    }                                                                  \
  |  | 9229|   106k|    else {                                                             \
  |  | 9230|   106k|        return vis(monostate_val);                                     \
  |  | 9231|   106k|    }
  ------------------
 9284|       |
 9285|   106k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 106k]
  ------------------
 9286|   106k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|   106k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|   106k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 106k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 106k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|   106k|            SCN_CLANG_POP
 9303|   106k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9323|  25.4k|{
 9324|  25.4k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  25.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|  25.4k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|  25.4k|{
 9225|  25.4k|#define SCN_VISIT(Type)                                                \
 9226|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|  25.4k|    }                                                                  \
 9229|  25.4k|    else {                                                             \
 9230|  25.4k|        return vis(monostate_val);                                     \
 9231|  25.4k|    }
 9232|       |
 9233|  25.4k|    monostate monostate_val{};
 9234|       |
 9235|  25.4k|    switch (get_arg_type(arg)) {
 9236|  4.23k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 4.23k, False: 21.2k]
  ------------------
 9237|  4.23k|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|  4.23k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  4.23k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  4.23k|    }                                                                  \
  |  | 9229|  4.23k|    else {                                                             \
  |  | 9230|  4.23k|        return vis(monostate_val);                                     \
  |  | 9231|  4.23k|    }
  ------------------
 9238|  4.23k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 25.4k]
  ------------------
 9239|  4.23k|            SCN_VISIT(short);
  ------------------
  |  | 9226|  4.23k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  4.23k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  4.23k|    }                                                                  \
  |  | 9229|  4.23k|    else {                                                             \
  |  | 9230|  4.23k|        return vis(monostate_val);                                     \
  |  | 9231|  4.23k|    }
  ------------------
 9240|  8.48k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 4.25k, False: 21.2k]
  ------------------
 9241|  8.48k|            SCN_VISIT(int);
  ------------------
  |  | 9226|  8.48k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  8.48k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  8.48k|    }                                                                  \
  |  | 9229|  8.48k|    else {                                                             \
  |  | 9230|  8.48k|        return vis(monostate_val);                                     \
  |  | 9231|  8.48k|    }
  ------------------
 9242|  8.48k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 25.4k]
  ------------------
 9243|  8.48k|            SCN_VISIT(long);
  ------------------
  |  | 9226|  8.48k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  8.48k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  8.48k|    }                                                                  \
  |  | 9229|  8.48k|    else {                                                             \
  |  | 9230|  8.48k|        return vis(monostate_val);                                     \
  |  | 9231|  8.48k|    }
  ------------------
 9244|  12.7k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 4.28k, False: 21.1k]
  ------------------
 9245|  12.7k|            SCN_VISIT(long long);
  ------------------
  |  | 9226|  12.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  12.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  12.7k|    }                                                                  \
  |  | 9229|  12.7k|    else {                                                             \
  |  | 9230|  12.7k|        return vis(monostate_val);                                     \
  |  | 9231|  12.7k|    }
  ------------------
 9246|  16.9k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 4.20k, False: 21.2k]
  ------------------
 9247|  16.9k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|  16.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  16.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  16.9k|    }                                                                  \
  |  | 9229|  16.9k|    else {                                                             \
  |  | 9230|  16.9k|        return vis(monostate_val);                                     \
  |  | 9231|  16.9k|    }
  ------------------
 9248|  16.9k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 25.4k]
  ------------------
 9249|  16.9k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|  16.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  16.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  16.9k|    }                                                                  \
  |  | 9229|  16.9k|    else {                                                             \
  |  | 9230|  16.9k|        return vis(monostate_val);                                     \
  |  | 9231|  16.9k|    }
  ------------------
 9250|  21.2k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 4.22k, False: 21.2k]
  ------------------
 9251|  21.2k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|  21.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  21.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  21.2k|    }                                                                  \
  |  | 9229|  21.2k|    else {                                                             \
  |  | 9230|  21.2k|        return vis(monostate_val);                                     \
  |  | 9231|  21.2k|    }
  ------------------
 9252|  21.2k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 25.4k]
  ------------------
 9253|  21.2k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|  21.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  21.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  21.2k|    }                                                                  \
  |  | 9229|  21.2k|    else {                                                             \
  |  | 9230|  21.2k|        return vis(monostate_val);                                     \
  |  | 9231|  21.2k|    }
  ------------------
 9254|  25.4k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 4.25k, False: 21.2k]
  ------------------
 9255|  25.4k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  25.4k|    }                                                                  \
  |  | 9229|  25.4k|    else {                                                             \
  |  | 9230|  25.4k|        return vis(monostate_val);                                     \
  |  | 9231|  25.4k|    }
  ------------------
 9256|  25.4k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 25.4k]
  ------------------
 9257|  25.4k|            SCN_VISIT(void*);
  ------------------
  |  | 9226|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  25.4k|    }                                                                  \
  |  | 9229|  25.4k|    else {                                                             \
  |  | 9230|  25.4k|        return vis(monostate_val);                                     \
  |  | 9231|  25.4k|    }
  ------------------
 9258|  25.4k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 25.4k]
  ------------------
 9259|  25.4k|            SCN_VISIT(bool);
  ------------------
  |  | 9226|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  25.4k|    }                                                                  \
  |  | 9229|  25.4k|    else {                                                             \
  |  | 9230|  25.4k|        return vis(monostate_val);                                     \
  |  | 9231|  25.4k|    }
  ------------------
 9260|  25.4k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 25.4k]
  ------------------
 9261|  25.4k|            SCN_VISIT(char);
  ------------------
  |  | 9226|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  25.4k|    }                                                                  \
  |  | 9229|  25.4k|    else {                                                             \
  |  | 9230|  25.4k|        return vis(monostate_val);                                     \
  |  | 9231|  25.4k|    }
  ------------------
 9262|  25.4k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 25.4k]
  ------------------
 9263|  25.4k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  25.4k|    }                                                                  \
  |  | 9229|  25.4k|    else {                                                             \
  |  | 9230|  25.4k|        return vis(monostate_val);                                     \
  |  | 9231|  25.4k|    }
  ------------------
 9264|  25.4k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 25.4k]
  ------------------
 9265|  25.4k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  25.4k|    }                                                                  \
  |  | 9229|  25.4k|    else {                                                             \
  |  | 9230|  25.4k|        return vis(monostate_val);                                     \
  |  | 9231|  25.4k|    }
  ------------------
 9266|  25.4k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 25.4k]
  ------------------
 9267|  25.4k|            SCN_VISIT(float);
  ------------------
  |  | 9226|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  25.4k|    }                                                                  \
  |  | 9229|  25.4k|    else {                                                             \
  |  | 9230|  25.4k|        return vis(monostate_val);                                     \
  |  | 9231|  25.4k|    }
  ------------------
 9268|  25.4k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 25.4k]
  ------------------
 9269|  25.4k|            SCN_VISIT(double);
  ------------------
  |  | 9226|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  25.4k|    }                                                                  \
  |  | 9229|  25.4k|    else {                                                             \
  |  | 9230|  25.4k|        return vis(monostate_val);                                     \
  |  | 9231|  25.4k|    }
  ------------------
 9270|  25.4k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 25.4k]
  ------------------
 9271|  25.4k|            SCN_VISIT(long double);
  ------------------
  |  | 9226|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  25.4k|    }                                                                  \
  |  | 9229|  25.4k|    else {                                                             \
  |  | 9230|  25.4k|        return vis(monostate_val);                                     \
  |  | 9231|  25.4k|    }
  ------------------
 9272|  25.4k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 25.4k]
  ------------------
 9273|  25.4k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  25.4k|    }                                                                  \
  |  | 9229|  25.4k|    else {                                                             \
  |  | 9230|  25.4k|        return vis(monostate_val);                                     \
  |  | 9231|  25.4k|    }
  ------------------
 9274|  25.4k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 25.4k]
  ------------------
 9275|  25.4k|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  25.4k|    }                                                                  \
  |  | 9229|  25.4k|    else {                                                             \
  |  | 9230|  25.4k|        return vis(monostate_val);                                     \
  |  | 9231|  25.4k|    }
  ------------------
 9276|  25.4k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 25.4k]
  ------------------
 9277|  25.4k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  25.4k|    }                                                                  \
  |  | 9229|  25.4k|    else {                                                             \
  |  | 9230|  25.4k|        return vis(monostate_val);                                     \
  |  | 9231|  25.4k|    }
  ------------------
 9278|  25.4k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 25.4k]
  ------------------
 9279|  25.4k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  25.4k|    }                                                                  \
  |  | 9229|  25.4k|    else {                                                             \
  |  | 9230|  25.4k|        return vis(monostate_val);                                     \
  |  | 9231|  25.4k|    }
  ------------------
 9280|  25.4k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 25.4k]
  ------------------
 9281|  25.4k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  25.4k|    }                                                                  \
  |  | 9229|  25.4k|    else {                                                             \
  |  | 9230|  25.4k|        return vis(monostate_val);                                     \
  |  | 9231|  25.4k|    }
  ------------------
 9282|  25.4k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 25.4k]
  ------------------
 9283|  25.4k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  25.4k|    }                                                                  \
  |  | 9229|  25.4k|    else {                                                             \
  |  | 9230|  25.4k|        return vis(monostate_val);                                     \
  |  | 9231|  25.4k|    }
  ------------------
 9284|       |
 9285|  25.4k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 25.4k]
  ------------------
 9286|  25.4k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|  25.4k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|  25.4k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 25.4k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 25.4k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|  25.4k|            SCN_CLANG_POP
 9303|  25.4k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v424basic_scan_parse_contextIwEC2IRNS0_6detail17basic_scan_bufferIwEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEi:
 6279|   156k|        : m_format{format},
 6280|   156k|          m_next_arg_id{next_arg_id},
 6281|   156k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6281:27): [Folded - Ignored]
  ------------------
 6282|   156k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6282:27): [Folded - Ignored]
  ------------------
 6283|       |          m_is_borrowed(
 6284|   156k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6284:16): [Folded - Ignored]
  |  Branch (6284:41): [Folded - Ignored]
  ------------------
 6285|   156k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6285:15): [Folded - Ignored]
  ------------------
 6286|   156k|    {
 6287|   156k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7795|   156k|{
 7796|   156k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7797|   156k|    handler.check_args_exhausted();
 7798|   156k|    return handler.get_error();
 7799|   156k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7760|   156k|{
 7761|       |    // TODO: memchr fast path with a larger (> 32) format string
 7762|       |
 7763|   156k|    auto begin = format.data();
 7764|   156k|    auto it = begin;
 7765|   156k|    const auto end = format.data() + format.size();
 7766|       |
 7767|   164k|    while (it != end) {
  ------------------
  |  Branch (7767:12): [True: 156k, False: 7.90k]
  ------------------
 7768|   156k|        const auto ch = *it++;
 7769|   156k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7769:13): [True: 156k, False: 0]
  ------------------
 7770|   156k|            handler.on_literal_text(begin, it - 1);
 7771|       |
 7772|   156k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7773|   156k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7773:17): [True: 148k, False: 7.90k]
  ------------------
 7774|   148k|                return;
 7775|   148k|            }
 7776|   156k|        }
 7777|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7777:18): [True: 0, False: 0]
  ------------------
 7778|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7779|      0|                handler.on_error("Unmatched '}' in format string");
 7780|      0|                return;
 7781|      0|            }
 7782|       |
 7783|      0|            handler.on_literal_text(begin, it);
 7784|      0|            begin = ++it;
 7785|      0|        }
 7786|   156k|    }
 7787|       |
 7788|  7.90k|    handler.on_literal_text(begin, end);
 7789|  7.90k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE10advance_toENS2_17basic_scan_bufferIwE16forward_iteratorE:
 8985|  7.90k|    {
 8986|  7.90k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|  7.90k|    static_cast<    \
  |  |  935|  7.90k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8987|  7.90k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 7692|   156k|{
 7693|   156k|    struct id_adapter {
 7694|   156k|        constexpr void operator()()
 7695|   156k|        {
 7696|   156k|            arg_id = handler.on_arg_id();
 7697|   156k|        }
 7698|   156k|        constexpr void operator()(std::size_t id)
 7699|   156k|        {
 7700|   156k|            arg_id = handler.on_arg_id(id);
 7701|   156k|        }
 7702|       |
 7703|   156k|        constexpr void on_error(const char* msg)
 7704|   156k|        {
 7705|   156k|            SCN_UNLIKELY_ATTR
 7706|   156k|            handler.on_error(msg);
 7707|   156k|        }
 7708|       |
 7709|   156k|        Handler& handler;
 7710|   156k|        std::size_t arg_id;
 7711|   156k|    };
 7712|       |
 7713|   156k|    ++begin;
 7714|   156k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 156k]
  |  |  ------------------
  ------------------
 7715|      0|        handler.on_error("Unexpected end of replacement field");
 7716|      0|        return begin;
 7717|      0|    }
 7718|       |
 7719|   156k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7719:9): [True: 0, False: 156k]
  ------------------
 7720|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7721|      0|    }
 7722|   156k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7722:14): [True: 0, False: 156k]
  ------------------
 7723|      0|        handler.on_literal_text(begin, begin + 1);
 7724|      0|    }
 7725|   156k|    else {
 7726|   156k|        auto adapter = id_adapter{handler, 0};
 7727|   156k|        begin = parse_arg_id(begin, end, adapter);
 7728|       |
 7729|   156k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 156k]
  |  |  ------------------
  ------------------
 7730|      0|            handler.on_error("Missing '}' in format string");
 7731|      0|            return begin;
 7732|      0|        }
 7733|       |
 7734|   156k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7734:13): [True: 0, False: 156k]
  ------------------
 7735|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7736|      0|        }
 7737|   156k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7737:18): [True: 156k, False: 0]
  ------------------
 7738|   156k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 156k]
  |  |  ------------------
  ------------------
 7739|      0|                handler.on_error("Unexpected end of replacement field");
 7740|      0|                return begin;
 7741|      0|            }
 7742|   156k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7743|   156k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   313k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 49.5k, False: 106k]
  |  |  |  Branch (865:45): [True: 0, False: 156k]
  |  |  |  Branch (865:45): [True: 49.5k, False: 106k]
  |  |  ------------------
  ------------------
 7744|  49.5k|                handler.on_error("Unknown format specifier");
 7745|  49.5k|                return begin;
 7746|  49.5k|            }
 7747|   156k|        }
 7748|      0|        else {
 7749|      0|            SCN_UNLIKELY_ATTR
 7750|      0|            handler.on_error("Missing '}' in format string");
 7751|      0|            return begin;
 7752|      0|        }
 7753|   156k|    }
 7754|   106k|    return begin + 1;
 7755|   156k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7193|   156k|{
 7194|   156k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   156k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   156k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7195|   156k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7195:9): [True: 156k, False: 0]
  |  Branch (7195:26): [True: 0, False: 156k]
  ------------------
 7196|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7197|      0|    }
 7198|       |
 7199|   156k|    handler();
 7200|   156k|    return begin;
 7201|   156k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7695|   156k|        {
 7696|   156k|            arg_id = handler.on_arg_id();
 7697|   156k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7872|   156k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|   156k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7873|   156k|    {
 7874|   156k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|   156k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   156k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7875|   156k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7608|   156k|{
 7609|   156k|    auto do_presentation = [&]() -> const CharT* {
 7610|   156k|        if (*begin == CharT{'['}) {
 7611|   156k|            auto set = parse_presentation_set(begin, end, handler);
 7612|   156k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7613|       |                // clang-format off
 7614|   156k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|   156k|                return begin;
 7617|   156k|            }
 7618|   156k|            handler.on_character_set_string(set);
 7619|   156k|            return begin;
 7620|   156k|        }
 7621|   156k|        if (*begin == CharT{'/'}) {
 7622|   156k|            return parse_presentation_regex(begin, end, handler);
 7623|   156k|        }
 7624|   156k|        presentation_type type = parse_presentation_type(*begin++);
 7625|   156k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7626|   156k|            handler.on_error("Invalid type specifier in format string");
 7627|   156k|            return begin;
 7628|   156k|        }
 7629|   156k|        handler.on_type(type);
 7630|   156k|        return begin;
 7631|   156k|    };
 7632|       |
 7633|   156k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7633:9): [True: 156k, False: 0]
  |  Branch (7633:28): [True: 123k, False: 33.0k]
  ------------------
 7634|   156k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7634:9): [True: 106k, False: 16.5k]
  |  Branch (7634:36): [True: 84.4k, False: 22.4k]
  ------------------
 7635|  84.4k|        return do_presentation();
 7636|  84.4k|    }
 7637|       |
 7638|  72.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  72.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 72.0k]
  |  |  ------------------
  ------------------
 7639|      0|        handler.on_error("Unexpected end of format string");
 7640|      0|        return begin;
 7641|      0|    }
 7642|       |
 7643|  72.0k|    begin = parse_align(begin, end, handler);
 7644|  72.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  72.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 72.0k]
  |  |  ------------------
  ------------------
 7645|      0|        handler.on_error("Unexpected end of format string");
 7646|      0|        return begin;
 7647|      0|    }
 7648|       |
 7649|  72.0k|    begin = parse_width(begin, end, handler);
 7650|  72.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  72.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 72.0k]
  |  |  ------------------
  ------------------
 7651|      0|        handler.on_error("Unexpected end of format string");
 7652|      0|        return begin;
 7653|      0|    }
 7654|       |
 7655|  72.0k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7655:9): [True: 0, False: 72.0k]
  ------------------
 7656|      0|        ++begin;
 7657|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7658|      0|            handler.on_error("Unexpected end of format string");
 7659|      0|            return begin;
 7660|      0|        }
 7661|      0|        begin = parse_precision(begin, end, handler);
 7662|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7663|      0|            handler.on_error("Unexpected end of format string");
 7664|      0|            return begin;
 7665|      0|        }
 7666|      0|    }
 7667|       |
 7668|  72.0k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7668:9): [True: 22.4k, False: 49.5k]
  ------------------
 7669|  22.4k|        handler.on_localized();
 7670|  22.4k|        ++begin;
 7671|  22.4k|    }
 7672|  72.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  72.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 72.0k]
  |  |  ------------------
  ------------------
 7673|      0|        handler.on_error("Unexpected end of format string");
 7674|      0|        return begin;
 7675|      0|    }
 7676|       |
 7677|  72.0k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7677:9): [True: 72.0k, False: 0]
  |  Branch (7677:25): [True: 49.5k, False: 22.4k]
  ------------------
 7678|  49.5k|        do_presentation();
 7679|  49.5k|    }
 7680|  72.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  72.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 72.0k]
  |  |  ------------------
  ------------------
 7681|      0|        handler.on_error("Unexpected end of format string");
 7682|      0|        return begin;
 7683|      0|    }
 7684|       |
 7685|  72.0k|    return begin;
 7686|  72.0k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7609|   134k|    auto do_presentation = [&]() -> const CharT* {
 7610|   134k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7610:13): [True: 0, False: 134k]
  ------------------
 7611|      0|            auto set = parse_presentation_set(begin, end, handler);
 7612|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7613|       |                // clang-format off
 7614|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|      0|                return begin;
 7617|      0|            }
 7618|      0|            handler.on_character_set_string(set);
 7619|      0|            return begin;
 7620|      0|        }
 7621|   134k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7621:13): [True: 0, False: 134k]
  ------------------
 7622|      0|            return parse_presentation_regex(begin, end, handler);
 7623|      0|        }
 7624|   134k|        presentation_type type = parse_presentation_type(*begin++);
 7625|   134k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 33.0k, False: 100k]
  |  |  ------------------
  ------------------
 7626|  33.0k|            handler.on_error("Invalid type specifier in format string");
 7627|  33.0k|            return begin;
 7628|  33.0k|        }
 7629|   100k|        handler.on_type(type);
 7630|   100k|        return begin;
 7631|   134k|    };
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7282|  72.0k|{
 7283|  72.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  72.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  72.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7284|       |
 7285|  72.0k|    auto check_align = [](wchar_t ch) {
 7286|  72.0k|        switch (ch) {
 7287|  72.0k|            case L'<':
 7288|  72.0k|                return align_type::left;
 7289|  72.0k|            case L'>':
 7290|  72.0k|                return align_type::right;
 7291|  72.0k|            case L'^':
 7292|  72.0k|                return align_type::center;
 7293|  72.0k|            default:
 7294|  72.0k|                return align_type::none;
 7295|  72.0k|        }
 7296|  72.0k|    };
 7297|       |
 7298|  72.0k|    auto potential_fill_len = code_point_length(begin, end);
 7299|  72.0k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|   144k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 72.0k]
  |  |  |  Branch (865:45): [True: 0, False: 72.0k]
  |  |  |  Branch (865:45): [True: 0, False: 72.0k]
  |  |  ------------------
  ------------------
 7300|  72.0k|                     std::distance(begin, end) < potential_fill_len)) {
 7301|      0|        handler.on_error("Invalid encoding in fill character");
 7302|      0|        return begin;
 7303|      0|    }
 7304|       |
 7305|  72.0k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7306|       |
 7307|  72.0k|    auto potential_fill = std::basic_string_view<CharT>{
 7308|  72.0k|        begin, static_cast<size_t>(potential_fill_len)};
 7309|  72.0k|    const auto begin_before_fill = begin;
 7310|  72.0k|    begin += potential_fill_len;
 7311|       |
 7312|  72.0k|    if (begin == end) {
  ------------------
  |  Branch (7312:9): [True: 0, False: 72.0k]
  ------------------
 7313|      0|        return begin_before_fill;
 7314|      0|    }
 7315|       |
 7316|  72.0k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7317|  72.0k|    const auto begin_after_fill = begin;
 7318|  72.0k|    ++begin;
 7319|       |
 7320|  72.0k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7320:9): [True: 72.0k, False: 0]
  ------------------
 7321|  72.0k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|  72.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 72.0k]
  |  |  ------------------
  ------------------
 7322|      0|            handler.on_error("Invalid fill character '{' in format string");
 7323|      0|            return begin;
 7324|      0|        }
 7325|  72.0k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7325:13): [True: 0, False: 72.0k]
  ------------------
 7326|      0|            return begin_before_fill;
 7327|      0|        }
 7328|  72.0k|    }
 7329|       |
 7330|  72.0k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7330:9): [True: 72.0k, False: 0]
  ------------------
 7331|  72.0k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7331:13): [True: 0, False: 72.0k]
  ------------------
 7332|      0|            handler.on_align(potential_align_on_fill);
 7333|      0|            return begin_after_fill;
 7334|      0|        }
 7335|  72.0k|        return begin_before_fill;
 7336|  72.0k|    }
 7337|       |
 7338|      0|    handler.on_fill(potential_fill);
 7339|      0|    handler.on_align(potential_align_after_fill);
 7340|      0|    return begin;
 7341|  72.0k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 7285|   144k|    auto check_align = [](wchar_t ch) {
 7286|   144k|        switch (ch) {
 7287|      0|            case L'<':
  ------------------
  |  Branch (7287:13): [True: 0, False: 144k]
  ------------------
 7288|      0|                return align_type::left;
 7289|      0|            case L'>':
  ------------------
  |  Branch (7289:13): [True: 0, False: 144k]
  ------------------
 7290|      0|                return align_type::right;
 7291|      0|            case L'^':
  ------------------
  |  Branch (7291:13): [True: 0, False: 144k]
  ------------------
 7292|      0|                return align_type::center;
 7293|   144k|            default:
  ------------------
  |  Branch (7293:13): [True: 144k, False: 0]
  ------------------
 7294|   144k|                return align_type::none;
 7295|   144k|        }
 7296|   144k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7347|  72.0k|{
 7348|  72.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  72.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  72.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7349|       |
 7350|  72.0k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7350:9): [True: 39.0k, False: 33.0k]
  |  Branch (7350:33): [True: 0, False: 39.0k]
  ------------------
 7351|      0|        int width = parse_simple_int(begin, end);
 7352|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7353|      0|            handler.on_width(width);
 7354|      0|        }
 7355|      0|        else {
 7356|      0|            handler.on_error("Invalid field width");
 7357|      0|            return begin;
 7358|      0|        }
 7359|      0|    }
 7360|  72.0k|    return begin;
 7361|  72.0k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE12on_localizedEv:
 7878|  22.4k|    {
 7879|  22.4k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7880|  22.4k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7880:13): [True: 11.2k, False: 11.2k]
  ------------------
 7881|  22.4k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7881:13): [True: 0, False: 11.2k]
  ------------------
 7882|  22.4k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7882:13): [True: 0, False: 0]
  ------------------
 7883|  22.4k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7883:13): [True: 0, False: 0]
  ------------------
 7884|      0|            SCN_UNLIKELY_ATTR
 7885|       |            // clang-format off
 7886|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7887|       |            // clang-format on
 7888|      0|        }
 7889|       |
 7890|  22.4k|        Handler::on_localized();
 7891|  22.4k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 9323|   106k|{
 9324|   106k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   106k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|   106k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|   106k|{
 9225|   106k|#define SCN_VISIT(Type)                                                \
 9226|   106k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|   106k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|   106k|    }                                                                  \
 9229|   106k|    else {                                                             \
 9230|   106k|        return vis(monostate_val);                                     \
 9231|   106k|    }
 9232|       |
 9233|   106k|    monostate monostate_val{};
 9234|       |
 9235|   106k|    switch (get_arg_type(arg)) {
 9236|  16.8k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 16.8k, False: 90.1k]
  ------------------
 9237|  16.8k|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|  16.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  16.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  16.8k|    }                                                                  \
  |  | 9229|  16.8k|    else {                                                             \
  |  | 9230|  16.8k|        return vis(monostate_val);                                     \
  |  | 9231|  16.8k|    }
  ------------------
 9238|  16.8k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 106k]
  ------------------
 9239|  16.8k|            SCN_VISIT(short);
  ------------------
  |  | 9226|  16.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  16.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  16.8k|    }                                                                  \
  |  | 9229|  16.8k|    else {                                                             \
  |  | 9230|  16.8k|        return vis(monostate_val);                                     \
  |  | 9231|  16.8k|    }
  ------------------
 9240|  35.2k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 18.3k, False: 88.6k]
  ------------------
 9241|  35.2k|            SCN_VISIT(int);
  ------------------
  |  | 9226|  35.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  35.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  35.2k|    }                                                                  \
  |  | 9229|  35.2k|    else {                                                             \
  |  | 9230|  35.2k|        return vis(monostate_val);                                     \
  |  | 9231|  35.2k|    }
  ------------------
 9242|  35.2k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 106k]
  ------------------
 9243|  35.2k|            SCN_VISIT(long);
  ------------------
  |  | 9226|  35.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  35.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  35.2k|    }                                                                  \
  |  | 9229|  35.2k|    else {                                                             \
  |  | 9230|  35.2k|        return vis(monostate_val);                                     \
  |  | 9231|  35.2k|    }
  ------------------
 9244|  53.6k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 18.4k, False: 88.5k]
  ------------------
 9245|  53.6k|            SCN_VISIT(long long);
  ------------------
  |  | 9226|  53.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  53.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  53.6k|    }                                                                  \
  |  | 9229|  53.6k|    else {                                                             \
  |  | 9230|  53.6k|        return vis(monostate_val);                                     \
  |  | 9231|  53.6k|    }
  ------------------
 9246|  70.4k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 16.8k, False: 90.1k]
  ------------------
 9247|  70.4k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|  70.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  70.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  70.4k|    }                                                                  \
  |  | 9229|  70.4k|    else {                                                             \
  |  | 9230|  70.4k|        return vis(monostate_val);                                     \
  |  | 9231|  70.4k|    }
  ------------------
 9248|  70.4k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 106k]
  ------------------
 9249|  70.4k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|  70.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  70.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  70.4k|    }                                                                  \
  |  | 9229|  70.4k|    else {                                                             \
  |  | 9230|  70.4k|        return vis(monostate_val);                                     \
  |  | 9231|  70.4k|    }
  ------------------
 9250|  88.6k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 18.2k, False: 88.7k]
  ------------------
 9251|  88.6k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|  88.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  88.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  88.6k|    }                                                                  \
  |  | 9229|  88.6k|    else {                                                             \
  |  | 9230|  88.6k|        return vis(monostate_val);                                     \
  |  | 9231|  88.6k|    }
  ------------------
 9252|  88.6k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 106k]
  ------------------
 9253|  88.6k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|  88.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  88.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  88.6k|    }                                                                  \
  |  | 9229|  88.6k|    else {                                                             \
  |  | 9230|  88.6k|        return vis(monostate_val);                                     \
  |  | 9231|  88.6k|    }
  ------------------
 9254|   106k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 18.3k, False: 88.6k]
  ------------------
 9255|   106k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|   106k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   106k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   106k|    }                                                                  \
  |  | 9229|   106k|    else {                                                             \
  |  | 9230|   106k|        return vis(monostate_val);                                     \
  |  | 9231|   106k|    }
  ------------------
 9256|   106k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 106k]
  ------------------
 9257|   106k|            SCN_VISIT(void*);
  ------------------
  |  | 9226|   106k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   106k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   106k|    }                                                                  \
  |  | 9229|   106k|    else {                                                             \
  |  | 9230|   106k|        return vis(monostate_val);                                     \
  |  | 9231|   106k|    }
  ------------------
 9258|   106k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 106k]
  ------------------
 9259|   106k|            SCN_VISIT(bool);
  ------------------
  |  | 9226|   106k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   106k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   106k|    }                                                                  \
  |  | 9229|   106k|    else {                                                             \
  |  | 9230|   106k|        return vis(monostate_val);                                     \
  |  | 9231|   106k|    }
  ------------------
 9260|   106k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 106k]
  ------------------
 9261|   106k|            SCN_VISIT(char);
  ------------------
  |  | 9226|   106k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   106k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   106k|    }                                                                  \
  |  | 9229|   106k|    else {                                                             \
  |  | 9230|   106k|        return vis(monostate_val);                                     \
  |  | 9231|   106k|    }
  ------------------
 9262|   106k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 106k]
  ------------------
 9263|   106k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|   106k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   106k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   106k|    }                                                                  \
  |  | 9229|   106k|    else {                                                             \
  |  | 9230|   106k|        return vis(monostate_val);                                     \
  |  | 9231|   106k|    }
  ------------------
 9264|   106k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 106k]
  ------------------
 9265|   106k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|   106k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   106k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   106k|    }                                                                  \
  |  | 9229|   106k|    else {                                                             \
  |  | 9230|   106k|        return vis(monostate_val);                                     \
  |  | 9231|   106k|    }
  ------------------
 9266|   106k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 106k]
  ------------------
 9267|   106k|            SCN_VISIT(float);
  ------------------
  |  | 9226|   106k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   106k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   106k|    }                                                                  \
  |  | 9229|   106k|    else {                                                             \
  |  | 9230|   106k|        return vis(monostate_val);                                     \
  |  | 9231|   106k|    }
  ------------------
 9268|   106k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 106k]
  ------------------
 9269|   106k|            SCN_VISIT(double);
  ------------------
  |  | 9226|   106k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   106k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   106k|    }                                                                  \
  |  | 9229|   106k|    else {                                                             \
  |  | 9230|   106k|        return vis(monostate_val);                                     \
  |  | 9231|   106k|    }
  ------------------
 9270|   106k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 106k]
  ------------------
 9271|   106k|            SCN_VISIT(long double);
  ------------------
  |  | 9226|   106k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   106k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   106k|    }                                                                  \
  |  | 9229|   106k|    else {                                                             \
  |  | 9230|   106k|        return vis(monostate_val);                                     \
  |  | 9231|   106k|    }
  ------------------
 9272|   106k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 106k]
  ------------------
 9273|   106k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|   106k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   106k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   106k|    }                                                                  \
  |  | 9229|   106k|    else {                                                             \
  |  | 9230|   106k|        return vis(monostate_val);                                     \
  |  | 9231|   106k|    }
  ------------------
 9274|   106k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 106k]
  ------------------
 9275|   106k|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|   106k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   106k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   106k|    }                                                                  \
  |  | 9229|   106k|    else {                                                             \
  |  | 9230|   106k|        return vis(monostate_val);                                     \
  |  | 9231|   106k|    }
  ------------------
 9276|   106k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 106k]
  ------------------
 9277|   106k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|   106k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   106k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   106k|    }                                                                  \
  |  | 9229|   106k|    else {                                                             \
  |  | 9230|   106k|        return vis(monostate_val);                                     \
  |  | 9231|   106k|    }
  ------------------
 9278|   106k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 106k]
  ------------------
 9279|   106k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|   106k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   106k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   106k|    }                                                                  \
  |  | 9229|   106k|    else {                                                             \
  |  | 9230|   106k|        return vis(monostate_val);                                     \
  |  | 9231|   106k|    }
  ------------------
 9280|   106k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 106k]
  ------------------
 9281|   106k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|   106k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   106k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   106k|    }                                                                  \
  |  | 9229|   106k|    else {                                                             \
  |  | 9230|   106k|        return vis(monostate_val);                                     \
  |  | 9231|   106k|    }
  ------------------
 9282|   106k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 106k]
  ------------------
 9283|   106k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|   106k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   106k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   106k|    }                                                                  \
  |  | 9229|   106k|    else {                                                             \
  |  | 9230|   106k|        return vis(monostate_val);                                     \
  |  | 9231|   106k|    }
  ------------------
 9284|       |
 9285|   106k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 106k]
  ------------------
 9286|   106k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|   106k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|   106k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 106k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 106k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|   106k|            SCN_CLANG_POP
 9303|   106k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v46detail17basic_scan_bufferIwE8sync_allEv:
 4351|   173k|    {
 4352|   173k|        return sync(0);
 4353|   173k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 6135|  63.1k|    constexpr basic_scan_args() = default;
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 6135|  16.9k|    constexpr basic_scan_args() = default;

_ZN3scn2v44scanIJaENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  13.9k|{
   89|  13.9k|    auto result = make_scan_result<Source, Args...>();
   90|  13.9k|    fill_scan_result(result,
   91|  13.9k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  13.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  13.9k|                           make_scan_args<wscan_context>(result->values())));
   93|  13.9k|    return result;
   94|  13.9k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   43|  86.7k|{
   44|  86.7k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  936|  86.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  86.7k|}
_ZN3scn2v44scanIJaENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  13.9k|{
  131|  13.9k|    auto result = make_scan_result<Source, Args...>();
  132|  13.9k|    fill_scan_result(result,
  133|  13.9k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  13.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  13.9k|                           make_scan_args<wscan_context>(result->values())));
  135|  13.9k|    return result;
  136|  13.9k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSK_16buffer_range_tagEwEEEE:
   59|  86.7k|{
   60|  86.7k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  936|  86.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  86.7k|}
_ZN3scn2v410scan_valueIaNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  1.41k|{
  171|  1.41k|    auto result = make_scan_result<Source, T>();
  172|  1.41k|    fill_scan_result(
  173|  1.41k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.41k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.41k|    return result;
  176|  1.41k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   71|  8.48k|{
   72|  8.48k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  936|  8.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  8.48k|}
_ZN3scn2v44scanIJhENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  13.9k|{
   89|  13.9k|    auto result = make_scan_result<Source, Args...>();
   90|  13.9k|    fill_scan_result(result,
   91|  13.9k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  13.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  13.9k|                           make_scan_args<wscan_context>(result->values())));
   93|  13.9k|    return result;
   94|  13.9k|}
_ZN3scn2v44scanIJhENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  13.9k|{
  131|  13.9k|    auto result = make_scan_result<Source, Args...>();
  132|  13.9k|    fill_scan_result(result,
  133|  13.9k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  13.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  13.9k|                           make_scan_args<wscan_context>(result->values())));
  135|  13.9k|    return result;
  136|  13.9k|}
_ZN3scn2v410scan_valueIhNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  1.40k|{
  171|  1.40k|    auto result = make_scan_result<Source, T>();
  172|  1.40k|    fill_scan_result(
  173|  1.40k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.40k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.40k|    return result;
  176|  1.40k|}
_ZN3scn2v44scanIJiENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  14.7k|{
   89|  14.7k|    auto result = make_scan_result<Source, Args...>();
   90|  14.7k|    fill_scan_result(result,
   91|  14.7k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.7k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.7k|    return result;
   94|  14.7k|}
_ZN3scn2v44scanIJiENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  14.7k|{
  131|  14.7k|    auto result = make_scan_result<Source, Args...>();
  132|  14.7k|    fill_scan_result(result,
  133|  14.7k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.7k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.7k|    return result;
  136|  14.7k|}
_ZN3scn2v410scan_valueIiNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  1.41k|{
  171|  1.41k|    auto result = make_scan_result<Source, T>();
  172|  1.41k|    fill_scan_result(
  173|  1.41k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.41k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.41k|    return result;
  176|  1.41k|}
_ZN3scn2v44scanIJjENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  14.6k|{
   89|  14.6k|    auto result = make_scan_result<Source, Args...>();
   90|  14.6k|    fill_scan_result(result,
   91|  14.6k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.6k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.6k|    return result;
   94|  14.6k|}
_ZN3scn2v44scanIJjENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  14.6k|{
  131|  14.6k|    auto result = make_scan_result<Source, Args...>();
  132|  14.6k|    fill_scan_result(result,
  133|  14.6k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.6k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.6k|    return result;
  136|  14.6k|}
_ZN3scn2v410scan_valueIjNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  1.40k|{
  171|  1.40k|    auto result = make_scan_result<Source, T>();
  172|  1.40k|    fill_scan_result(
  173|  1.40k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.40k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.40k|    return result;
  176|  1.40k|}
_ZN3scn2v44scanIJxENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  14.7k|{
   89|  14.7k|    auto result = make_scan_result<Source, Args...>();
   90|  14.7k|    fill_scan_result(result,
   91|  14.7k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.7k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.7k|    return result;
   94|  14.7k|}
_ZN3scn2v44scanIJxENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  14.7k|{
  131|  14.7k|    auto result = make_scan_result<Source, Args...>();
  132|  14.7k|    fill_scan_result(result,
  133|  14.7k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.7k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.7k|    return result;
  136|  14.7k|}
_ZN3scn2v410scan_valueIxNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  1.42k|{
  171|  1.42k|    auto result = make_scan_result<Source, T>();
  172|  1.42k|    fill_scan_result(
  173|  1.42k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.42k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.42k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.42k|    return result;
  176|  1.42k|}
_ZN3scn2v44scanIJyENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  14.6k|{
   89|  14.6k|    auto result = make_scan_result<Source, Args...>();
   90|  14.6k|    fill_scan_result(result,
   91|  14.6k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.6k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.6k|    return result;
   94|  14.6k|}
_ZN3scn2v44scanIJyENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  14.6k|{
  131|  14.6k|    auto result = make_scan_result<Source, Args...>();
  132|  14.6k|    fill_scan_result(result,
  133|  14.6k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.6k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.6k|    return result;
  136|  14.6k|}
_ZN3scn2v410scan_valueIyNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  1.41k|{
  171|  1.41k|    auto result = make_scan_result<Source, T>();
  172|  1.41k|    fill_scan_result(
  173|  1.41k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.41k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.41k|    return result;
  176|  1.41k|}
_ZN3scn2v44scanIJaENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  13.9k|{
   89|  13.9k|    auto result = make_scan_result<Source, Args...>();
   90|  13.9k|    fill_scan_result(result,
   91|  13.9k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  13.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  13.9k|                           make_scan_args<wscan_context>(result->values())));
   93|  13.9k|    return result;
   94|  13.9k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   43|  86.7k|{
   44|  86.7k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  936|  86.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  86.7k|}
_ZN3scn2v44scanIJaENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  13.9k|{
  131|  13.9k|    auto result = make_scan_result<Source, Args...>();
  132|  13.9k|    fill_scan_result(result,
  133|  13.9k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  13.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  13.9k|                           make_scan_args<wscan_context>(result->values())));
  135|  13.9k|    return result;
  136|  13.9k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSP_16buffer_range_tagEwEEEE:
   59|  86.7k|{
   60|  86.7k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  936|  86.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  86.7k|}
_ZN3scn2v410scan_valueIaNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  1.41k|{
  171|  1.41k|    auto result = make_scan_result<Source, T>();
  172|  1.41k|    fill_scan_result(
  173|  1.41k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.41k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.41k|    return result;
  176|  1.41k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   71|  8.48k|{
   72|  8.48k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  936|  8.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  8.48k|}
_ZN3scn2v44scanIJhENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  13.9k|{
   89|  13.9k|    auto result = make_scan_result<Source, Args...>();
   90|  13.9k|    fill_scan_result(result,
   91|  13.9k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  13.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  13.9k|                           make_scan_args<wscan_context>(result->values())));
   93|  13.9k|    return result;
   94|  13.9k|}
_ZN3scn2v44scanIJhENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  13.9k|{
  131|  13.9k|    auto result = make_scan_result<Source, Args...>();
  132|  13.9k|    fill_scan_result(result,
  133|  13.9k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  13.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  13.9k|                           make_scan_args<wscan_context>(result->values())));
  135|  13.9k|    return result;
  136|  13.9k|}
_ZN3scn2v410scan_valueIhNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  1.40k|{
  171|  1.40k|    auto result = make_scan_result<Source, T>();
  172|  1.40k|    fill_scan_result(
  173|  1.40k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.40k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.40k|    return result;
  176|  1.40k|}
_ZN3scn2v44scanIJiENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  14.7k|{
   89|  14.7k|    auto result = make_scan_result<Source, Args...>();
   90|  14.7k|    fill_scan_result(result,
   91|  14.7k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.7k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.7k|    return result;
   94|  14.7k|}
_ZN3scn2v44scanIJiENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  14.7k|{
  131|  14.7k|    auto result = make_scan_result<Source, Args...>();
  132|  14.7k|    fill_scan_result(result,
  133|  14.7k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.7k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.7k|    return result;
  136|  14.7k|}
_ZN3scn2v410scan_valueIiNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  1.41k|{
  171|  1.41k|    auto result = make_scan_result<Source, T>();
  172|  1.41k|    fill_scan_result(
  173|  1.41k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.41k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.41k|    return result;
  176|  1.41k|}
_ZN3scn2v44scanIJjENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  14.6k|{
   89|  14.6k|    auto result = make_scan_result<Source, Args...>();
   90|  14.6k|    fill_scan_result(result,
   91|  14.6k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.6k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.6k|    return result;
   94|  14.6k|}
_ZN3scn2v44scanIJjENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  14.6k|{
  131|  14.6k|    auto result = make_scan_result<Source, Args...>();
  132|  14.6k|    fill_scan_result(result,
  133|  14.6k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.6k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.6k|    return result;
  136|  14.6k|}
_ZN3scn2v410scan_valueIjNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  1.40k|{
  171|  1.40k|    auto result = make_scan_result<Source, T>();
  172|  1.40k|    fill_scan_result(
  173|  1.40k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.40k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.40k|    return result;
  176|  1.40k|}
_ZN3scn2v44scanIJxENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  14.7k|{
   89|  14.7k|    auto result = make_scan_result<Source, Args...>();
   90|  14.7k|    fill_scan_result(result,
   91|  14.7k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.7k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.7k|    return result;
   94|  14.7k|}
_ZN3scn2v44scanIJxENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  14.7k|{
  131|  14.7k|    auto result = make_scan_result<Source, Args...>();
  132|  14.7k|    fill_scan_result(result,
  133|  14.7k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.7k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.7k|    return result;
  136|  14.7k|}
_ZN3scn2v410scan_valueIxNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  1.42k|{
  171|  1.42k|    auto result = make_scan_result<Source, T>();
  172|  1.42k|    fill_scan_result(
  173|  1.42k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.42k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.42k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.42k|    return result;
  176|  1.42k|}
_ZN3scn2v44scanIJyENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  14.6k|{
   89|  14.6k|    auto result = make_scan_result<Source, Args...>();
   90|  14.6k|    fill_scan_result(result,
   91|  14.6k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.6k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.6k|    return result;
   94|  14.6k|}
_ZN3scn2v44scanIJyENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  14.6k|{
  131|  14.6k|    auto result = make_scan_result<Source, Args...>();
  132|  14.6k|    fill_scan_result(result,
  133|  14.6k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.6k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.6k|    return result;
  136|  14.6k|}
_ZN3scn2v410scan_valueIyNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  1.41k|{
  171|  1.41k|    auto result = make_scan_result<Source, T>();
  172|  1.41k|    fill_scan_result(
  173|  1.41k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.41k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.41k|    return result;
  176|  1.41k|}

_ZN3scn2v46detail10locale_refC2INSt3__16localeEEERKT_:
  307|   591k|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  308|   591k|{
  309|   591k|    static_assert(std::is_same_v<Locale, std::locale>);
  310|   591k|}
_ZNK3scn2v46detail10locale_ref3getINSt3__16localeEEET_v:
  314|   160k|{
  315|   160k|    static_assert(std::is_same_v<Locale, std::locale>);
  316|   160k|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (316:12): [True: 80.0k, False: 80.0k]
  ------------------
  317|   160k|                    : std::locale{};
  318|   160k|}
_ZN3scn2v44impl19parse_integer_valueIcaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|   117k|{
 1153|   117k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|   117k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   117k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|   117k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|   117k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   117k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|   117k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|   117k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   117k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|   117k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|   117k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   117k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|   117k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 5.09k, False: 112k]
  ------------------
 1159|  5.09k|        SCN_UNLIKELY_ATTR
 1160|  5.09k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|  5.09k|                                             "Invalid integer value");
 1162|  5.09k|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|   112k|    auto start = source.data();
 1166|   112k|    const auto end = source.data() + source.size();
 1167|   112k|    {
 1168|   302k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 284k, False: 18.4k]
  ------------------
 1169|   284k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 94.0k, False: 190k]
  ------------------
 1170|  94.0k|                break;
 1171|  94.0k|            }
 1172|   284k|        }
 1173|   112k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|   206k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 30.5k, False: 81.9k]
  |  |  |  Branch (865:45): [True: 18.4k, False: 94.0k]
  |  |  |  Branch (865:45): [True: 12.1k, False: 81.9k]
  |  |  ------------------
  ------------------
 1174|  30.5k|            value = 0;
 1175|  30.5k|            return ranges::next(source.begin(),
 1176|  30.5k|                                ranges::distance(source.data(), start));
 1177|  30.5k|        }
 1178|   112k|    }
 1179|       |
 1180|  81.9k|    if constexpr (std::is_same_v<CharT, char>) {
 1181|  81.9k|        if (base == 10) {
  ------------------
  |  Branch (1181:13): [True: 61.3k, False: 20.5k]
  ------------------
 1182|  61.3k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3940|  61.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  61.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  61.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  61.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.44k, False: 57.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.44k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.44k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.44k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.44k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.44k|    }                                                  \
  |  |  |  | 3939|  61.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  57.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1183|  57.9k|                             detail::make_string_view_from_pointers(start, end),
 1184|  57.9k|                             value, sign == sign_type::minus_sign));
 1185|  57.9k|            return ranges::next(source.begin(),
 1186|  57.9k|                                ranges::distance(source.data(), ptr));
 1187|  61.3k|        }
 1188|  81.9k|    }
 1189|       |
 1190|  80.0k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|  81.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  81.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  81.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  81.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.94k, False: 80.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.94k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.94k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.94k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.94k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.94k|    }                                                  \
  |  |  |  | 3939|  81.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  80.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|  80.0k|                     detail::make_string_view_from_pointers(start, end), value,
 1192|  80.0k|                     base, sign == sign_type::minus_sign));
 1193|  80.0k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|  81.9k|}
_ZN3scn2v44impl19parse_integer_valueIwaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|  21.3k|{
 1153|  21.3k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|  21.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|  21.3k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|  21.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|  21.3k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|  21.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|  21.3k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|  21.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|  21.3k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 17.4k, False: 3.91k]
  ------------------
 1159|  17.4k|        SCN_UNLIKELY_ATTR
 1160|  17.4k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|  17.4k|                                             "Invalid integer value");
 1162|  17.4k|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|  3.91k|    auto start = source.data();
 1166|  3.91k|    const auto end = source.data() + source.size();
 1167|  3.91k|    {
 1168|  4.31k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 4.12k, False: 190]
  ------------------
 1169|  4.12k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 3.72k, False: 398]
  ------------------
 1170|  3.72k|                break;
 1171|  3.72k|            }
 1172|  4.12k|        }
 1173|  3.91k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|  7.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 310, False: 3.60k]
  |  |  |  Branch (865:45): [True: 190, False: 3.72k]
  |  |  |  Branch (865:45): [True: 120, False: 3.60k]
  |  |  ------------------
  ------------------
 1174|    310|            value = 0;
 1175|    310|            return ranges::next(source.begin(),
 1176|    310|                                ranges::distance(source.data(), start));
 1177|    310|        }
 1178|  3.91k|    }
 1179|       |
 1180|       |    if constexpr (std::is_same_v<CharT, char>) {
 1181|       |        if (base == 10) {
 1182|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1183|       |                             detail::make_string_view_from_pointers(start, end),
 1184|       |                             value, sign == sign_type::minus_sign));
 1185|       |            return ranges::next(source.begin(),
 1186|       |                                ranges::distance(source.data(), ptr));
 1187|       |        }
 1188|       |    }
 1189|       |
 1190|  3.60k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|  3.60k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  3.60k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  3.60k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  3.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.05k, False: 554]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.05k|    }                                                  \
  |  |  |  | 3939|  3.60k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    554|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|    554|                     detail::make_string_view_from_pointers(start, end), value,
 1192|    554|                     base, sign == sign_type::minus_sign));
 1193|    554|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|  3.60k|}
_ZN3scn2v44impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|   139k|{
 1153|   139k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|   139k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   139k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|   139k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|   139k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   139k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|   139k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|   139k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   139k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|   139k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|   139k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   139k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|   139k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 5.71k, False: 133k]
  ------------------
 1159|  5.71k|        SCN_UNLIKELY_ATTR
 1160|  5.71k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|  5.71k|                                             "Invalid integer value");
 1162|  5.71k|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|   133k|    auto start = source.data();
 1166|   133k|    const auto end = source.data() + source.size();
 1167|   133k|    {
 1168|   337k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 317k, False: 20.4k]
  ------------------
 1169|   317k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 113k, False: 204k]
  ------------------
 1170|   113k|                break;
 1171|   113k|            }
 1172|   317k|        }
 1173|   133k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|   246k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34.1k, False: 99.3k]
  |  |  |  Branch (865:45): [True: 20.4k, False: 113k]
  |  |  |  Branch (865:45): [True: 13.6k, False: 99.3k]
  |  |  ------------------
  ------------------
 1174|  34.1k|            value = 0;
 1175|  34.1k|            return ranges::next(source.begin(),
 1176|  34.1k|                                ranges::distance(source.data(), start));
 1177|  34.1k|        }
 1178|   133k|    }
 1179|       |
 1180|  99.3k|    if constexpr (std::is_same_v<CharT, char>) {
 1181|  99.3k|        if (base == 10) {
  ------------------
  |  Branch (1181:13): [True: 71.4k, False: 27.9k]
  ------------------
 1182|  71.4k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3940|  71.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  71.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  71.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  71.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.69k, False: 69.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.69k|    }                                                  \
  |  |  |  | 3939|  71.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  69.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1183|  69.7k|                             detail::make_string_view_from_pointers(start, end),
 1184|  69.7k|                             value, sign == sign_type::minus_sign));
 1185|  69.7k|            return ranges::next(source.begin(),
 1186|  69.7k|                                ranges::distance(source.data(), ptr));
 1187|  71.4k|        }
 1188|  99.3k|    }
 1189|       |
 1190|  98.4k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|  99.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  99.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  99.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  99.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 898, False: 98.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    898|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    898|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    898|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    898|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    898|    }                                                  \
  |  |  |  | 3939|  99.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  98.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|  98.4k|                     detail::make_string_view_from_pointers(start, end), value,
 1192|  98.4k|                     base, sign == sign_type::minus_sign));
 1193|  98.4k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|  99.3k|}
_ZN3scn2v44impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|  21.4k|{
 1153|  21.4k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|  21.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|  21.4k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|  21.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|  21.4k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|  21.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|  21.4k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|  21.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|  21.4k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 17.5k, False: 3.94k]
  ------------------
 1159|  17.5k|        SCN_UNLIKELY_ATTR
 1160|  17.5k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|  17.5k|                                             "Invalid integer value");
 1162|  17.5k|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|  3.94k|    auto start = source.data();
 1166|  3.94k|    const auto end = source.data() + source.size();
 1167|  3.94k|    {
 1168|  4.33k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 4.14k, False: 190]
  ------------------
 1169|  4.14k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 3.75k, False: 398]
  ------------------
 1170|  3.75k|                break;
 1171|  3.75k|            }
 1172|  4.14k|        }
 1173|  3.94k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|  7.69k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 310, False: 3.63k]
  |  |  |  Branch (865:45): [True: 190, False: 3.75k]
  |  |  |  Branch (865:45): [True: 120, False: 3.63k]
  |  |  ------------------
  ------------------
 1174|    310|            value = 0;
 1175|    310|            return ranges::next(source.begin(),
 1176|    310|                                ranges::distance(source.data(), start));
 1177|    310|        }
 1178|  3.94k|    }
 1179|       |
 1180|       |    if constexpr (std::is_same_v<CharT, char>) {
 1181|       |        if (base == 10) {
 1182|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1183|       |                             detail::make_string_view_from_pointers(start, end),
 1184|       |                             value, sign == sign_type::minus_sign));
 1185|       |            return ranges::next(source.begin(),
 1186|       |                                ranges::distance(source.data(), ptr));
 1187|       |        }
 1188|       |    }
 1189|       |
 1190|  3.63k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|  3.63k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  3.63k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  3.63k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  3.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 148, False: 3.48k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    148|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    148|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    148|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    148|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    148|    }                                                  \
  |  |  |  | 3939|  3.63k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  3.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|  3.48k|                     detail::make_string_view_from_pointers(start, end), value,
 1192|  3.48k|                     base, sign == sign_type::minus_sign));
 1193|  3.48k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|  3.63k|}
_ZN3scn2v44impl19parse_integer_valueIcxEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|   141k|{
 1153|   141k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|   141k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   141k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|   141k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|   141k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   141k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|   141k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|   141k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   141k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|   141k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|   141k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   141k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|   141k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 5.98k, False: 135k]
  ------------------
 1159|  5.98k|        SCN_UNLIKELY_ATTR
 1160|  5.98k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|  5.98k|                                             "Invalid integer value");
 1162|  5.98k|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|   135k|    auto start = source.data();
 1166|   135k|    const auto end = source.data() + source.size();
 1167|   135k|    {
 1168|   340k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 319k, False: 20.7k]
  ------------------
 1169|   319k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 114k, False: 204k]
  ------------------
 1170|   114k|                break;
 1171|   114k|            }
 1172|   319k|        }
 1173|   135k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|   249k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34.4k, False: 100k]
  |  |  |  Branch (865:45): [True: 20.7k, False: 114k]
  |  |  |  Branch (865:45): [True: 13.7k, False: 100k]
  |  |  ------------------
  ------------------
 1174|  34.4k|            value = 0;
 1175|  34.4k|            return ranges::next(source.begin(),
 1176|  34.4k|                                ranges::distance(source.data(), start));
 1177|  34.4k|        }
 1178|   135k|    }
 1179|       |
 1180|   100k|    if constexpr (std::is_same_v<CharT, char>) {
 1181|   100k|        if (base == 10) {
  ------------------
  |  Branch (1181:13): [True: 72.4k, False: 28.2k]
  ------------------
 1182|  72.4k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3940|  72.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  72.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  72.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  72.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 916, False: 71.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    916|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    916|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    916|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    916|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    916|    }                                                  \
  |  |  |  | 3939|  72.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  71.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1183|  71.4k|                             detail::make_string_view_from_pointers(start, end),
 1184|  71.4k|                             value, sign == sign_type::minus_sign));
 1185|  71.4k|            return ranges::next(source.begin(),
 1186|  71.4k|                                ranges::distance(source.data(), ptr));
 1187|  72.4k|        }
 1188|   100k|    }
 1189|       |
 1190|   100k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|   100k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   100k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   100k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 462, False: 100k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    462|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    462|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    462|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    462|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    462|    }                                                  \
  |  |  |  | 3939|   100k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|   100k|                     detail::make_string_view_from_pointers(start, end), value,
 1192|   100k|                     base, sign == sign_type::minus_sign));
 1193|   100k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|   100k|}
_ZN3scn2v44impl19parse_integer_valueIwxEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|  21.6k|{
 1153|  21.6k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|  21.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|  21.6k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|  21.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|  21.6k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|  21.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|  21.6k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|  21.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|  21.6k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 17.5k, False: 4.03k]
  ------------------
 1159|  17.5k|        SCN_UNLIKELY_ATTR
 1160|  17.5k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|  17.5k|                                             "Invalid integer value");
 1162|  17.5k|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|  4.03k|    auto start = source.data();
 1166|  4.03k|    const auto end = source.data() + source.size();
 1167|  4.03k|    {
 1168|  4.48k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 4.26k, False: 223]
  ------------------
 1169|  4.26k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 3.81k, False: 452]
  ------------------
 1170|  3.81k|                break;
 1171|  3.81k|            }
 1172|  4.26k|        }
 1173|  4.03k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|  7.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 364, False: 3.67k]
  |  |  |  Branch (865:45): [True: 223, False: 3.81k]
  |  |  |  Branch (865:45): [True: 141, False: 3.67k]
  |  |  ------------------
  ------------------
 1174|    364|            value = 0;
 1175|    364|            return ranges::next(source.begin(),
 1176|    364|                                ranges::distance(source.data(), start));
 1177|    364|        }
 1178|  4.03k|    }
 1179|       |
 1180|       |    if constexpr (std::is_same_v<CharT, char>) {
 1181|       |        if (base == 10) {
 1182|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1183|       |                             detail::make_string_view_from_pointers(start, end),
 1184|       |                             value, sign == sign_type::minus_sign));
 1185|       |            return ranges::next(source.begin(),
 1186|       |                                ranges::distance(source.data(), ptr));
 1187|       |        }
 1188|       |    }
 1189|       |
 1190|  3.67k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|  3.67k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  3.67k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  3.67k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  3.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 20, False: 3.65k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     20|    }                                                  \
  |  |  |  | 3939|  3.67k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  3.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|  3.65k|                     detail::make_string_view_from_pointers(start, end), value,
 1192|  3.65k|                     base, sign == sign_type::minus_sign));
 1193|  3.65k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|  3.67k|}
_ZN3scn2v44impl19parse_integer_valueIchEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|  96.2k|{
 1153|  96.2k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|  96.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  96.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|  96.2k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|  96.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  96.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|  96.2k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|  96.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  96.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|  96.2k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|  96.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  96.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|  96.2k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 3.53k, False: 92.7k]
  ------------------
 1159|  3.53k|        SCN_UNLIKELY_ATTR
 1160|  3.53k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|  3.53k|                                             "Invalid integer value");
 1162|  3.53k|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|  92.7k|    auto start = source.data();
 1166|  92.7k|    const auto end = source.data() + source.size();
 1167|  92.7k|    {
 1168|   274k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 256k, False: 17.3k]
  ------------------
 1169|   256k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 75.3k, False: 181k]
  ------------------
 1170|  75.3k|                break;
 1171|  75.3k|            }
 1172|   256k|        }
 1173|  92.7k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|   168k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 28.9k, False: 63.7k]
  |  |  |  Branch (865:45): [True: 17.3k, False: 75.3k]
  |  |  |  Branch (865:45): [True: 11.5k, False: 63.7k]
  |  |  ------------------
  ------------------
 1174|  28.9k|            value = 0;
 1175|  28.9k|            return ranges::next(source.begin(),
 1176|  28.9k|                                ranges::distance(source.data(), start));
 1177|  28.9k|        }
 1178|  92.7k|    }
 1179|       |
 1180|  63.7k|    if constexpr (std::is_same_v<CharT, char>) {
 1181|  63.7k|        if (base == 10) {
  ------------------
  |  Branch (1181:13): [True: 46.3k, False: 17.4k]
  ------------------
 1182|  46.3k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3940|  46.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  46.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  46.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  46.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.72k, False: 44.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.72k|    }                                                  \
  |  |  |  | 3939|  46.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  44.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1183|  44.6k|                             detail::make_string_view_from_pointers(start, end),
 1184|  44.6k|                             value, sign == sign_type::minus_sign));
 1185|  44.6k|            return ranges::next(source.begin(),
 1186|  44.6k|                                ranges::distance(source.data(), ptr));
 1187|  46.3k|        }
 1188|  63.7k|    }
 1189|       |
 1190|  62.7k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|  63.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  63.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  63.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  63.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.01k, False: 62.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.01k|    }                                                  \
  |  |  |  | 3939|  63.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  62.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|  62.7k|                     detail::make_string_view_from_pointers(start, end), value,
 1192|  62.7k|                     base, sign == sign_type::minus_sign));
 1193|  62.7k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|  63.7k|}
_ZN3scn2v44impl19parse_integer_valueIwhEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|  21.0k|{
 1153|  21.0k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|  21.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|  21.0k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|  21.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|  21.0k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|  21.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|  21.0k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|  21.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|  21.0k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 17.3k, False: 3.70k]
  ------------------
 1159|  17.3k|        SCN_UNLIKELY_ATTR
 1160|  17.3k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|  17.3k|                                             "Invalid integer value");
 1162|  17.3k|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|  3.70k|    auto start = source.data();
 1166|  3.70k|    const auto end = source.data() + source.size();
 1167|  3.70k|    {
 1168|  4.08k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 3.90k, False: 179]
  ------------------
 1169|  3.90k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 3.52k, False: 380]
  ------------------
 1170|  3.52k|                break;
 1171|  3.52k|            }
 1172|  3.90k|        }
 1173|  3.70k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|  7.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 292, False: 3.41k]
  |  |  |  Branch (865:45): [True: 179, False: 3.52k]
  |  |  |  Branch (865:45): [True: 113, False: 3.41k]
  |  |  ------------------
  ------------------
 1174|    292|            value = 0;
 1175|    292|            return ranges::next(source.begin(),
 1176|    292|                                ranges::distance(source.data(), start));
 1177|    292|        }
 1178|  3.70k|    }
 1179|       |
 1180|       |    if constexpr (std::is_same_v<CharT, char>) {
 1181|       |        if (base == 10) {
 1182|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1183|       |                             detail::make_string_view_from_pointers(start, end),
 1184|       |                             value, sign == sign_type::minus_sign));
 1185|       |            return ranges::next(source.begin(),
 1186|       |                                ranges::distance(source.data(), ptr));
 1187|       |        }
 1188|       |    }
 1189|       |
 1190|  3.41k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|  3.41k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  3.41k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  3.41k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  3.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.99k, False: 426]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.99k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.99k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.99k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.99k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.99k|    }                                                  \
  |  |  |  | 3939|  3.41k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    426|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|    426|                     detail::make_string_view_from_pointers(start, end), value,
 1192|    426|                     base, sign == sign_type::minus_sign));
 1193|    426|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|  3.41k|}
_ZN3scn2v44impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|   105k|{
 1153|   105k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|   105k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   105k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|   105k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|   105k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   105k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|   105k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|   105k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   105k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|   105k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|   105k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   105k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|   105k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 3.77k, False: 101k]
  ------------------
 1159|  3.77k|        SCN_UNLIKELY_ATTR
 1160|  3.77k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|  3.77k|                                             "Invalid integer value");
 1162|  3.77k|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|   101k|    auto start = source.data();
 1166|   101k|    const auto end = source.data() + source.size();
 1167|   101k|    {
 1168|   289k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 270k, False: 18.5k]
  ------------------
 1169|   270k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 83.4k, False: 187k]
  ------------------
 1170|  83.4k|                break;
 1171|  83.4k|            }
 1172|   270k|        }
 1173|   101k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|   185k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 30.9k, False: 70.9k]
  |  |  |  Branch (865:45): [True: 18.5k, False: 83.4k]
  |  |  |  Branch (865:45): [True: 12.4k, False: 70.9k]
  |  |  ------------------
  ------------------
 1174|  30.9k|            value = 0;
 1175|  30.9k|            return ranges::next(source.begin(),
 1176|  30.9k|                                ranges::distance(source.data(), start));
 1177|  30.9k|        }
 1178|   101k|    }
 1179|       |
 1180|  70.9k|    if constexpr (std::is_same_v<CharT, char>) {
 1181|  70.9k|        if (base == 10) {
  ------------------
  |  Branch (1181:13): [True: 51.5k, False: 19.4k]
  ------------------
 1182|  51.5k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3940|  51.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  51.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  51.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  51.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 906, False: 50.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    906|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    906|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    906|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    906|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    906|    }                                                  \
  |  |  |  | 3939|  51.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  50.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1183|  50.6k|                             detail::make_string_view_from_pointers(start, end),
 1184|  50.6k|                             value, sign == sign_type::minus_sign));
 1185|  50.6k|            return ranges::next(source.begin(),
 1186|  50.6k|                                ranges::distance(source.data(), ptr));
 1187|  51.5k|        }
 1188|  70.9k|    }
 1189|       |
 1190|  70.4k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|  70.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  70.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  70.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  70.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 478, False: 70.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    478|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    478|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    478|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    478|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    478|    }                                                  \
  |  |  |  | 3939|  70.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  70.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|  70.4k|                     detail::make_string_view_from_pointers(start, end), value,
 1192|  70.4k|                     base, sign == sign_type::minus_sign));
 1193|  70.4k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|  70.9k|}
_ZN3scn2v44impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|  21.1k|{
 1153|  21.1k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|  21.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|  21.1k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|  21.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|  21.1k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|  21.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|  21.1k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|  21.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|  21.1k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 17.3k, False: 3.73k]
  ------------------
 1159|  17.3k|        SCN_UNLIKELY_ATTR
 1160|  17.3k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|  17.3k|                                             "Invalid integer value");
 1162|  17.3k|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|  3.73k|    auto start = source.data();
 1166|  3.73k|    const auto end = source.data() + source.size();
 1167|  3.73k|    {
 1168|  4.11k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 3.93k, False: 179]
  ------------------
 1169|  3.93k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 3.55k, False: 380]
  ------------------
 1170|  3.55k|                break;
 1171|  3.55k|            }
 1172|  3.93k|        }
 1173|  3.73k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|  7.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 292, False: 3.43k]
  |  |  |  Branch (865:45): [True: 179, False: 3.55k]
  |  |  |  Branch (865:45): [True: 113, False: 3.43k]
  |  |  ------------------
  ------------------
 1174|    292|            value = 0;
 1175|    292|            return ranges::next(source.begin(),
 1176|    292|                                ranges::distance(source.data(), start));
 1177|    292|        }
 1178|  3.73k|    }
 1179|       |
 1180|       |    if constexpr (std::is_same_v<CharT, char>) {
 1181|       |        if (base == 10) {
 1182|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1183|       |                             detail::make_string_view_from_pointers(start, end),
 1184|       |                             value, sign == sign_type::minus_sign));
 1185|       |            return ranges::next(source.begin(),
 1186|       |                                ranges::distance(source.data(), ptr));
 1187|       |        }
 1188|       |    }
 1189|       |
 1190|  3.43k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|  3.43k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  3.43k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  3.43k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  3.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 144, False: 3.29k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    144|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    144|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    144|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    144|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    144|    }                                                  \
  |  |  |  | 3939|  3.43k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  3.29k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|  3.29k|                     detail::make_string_view_from_pointers(start, end), value,
 1192|  3.29k|                     base, sign == sign_type::minus_sign));
 1193|  3.29k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|  3.43k|}
_ZN3scn2v44impl19parse_integer_valueIcyEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|   106k|{
 1153|   106k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|   106k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   106k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|   106k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|   106k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   106k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|   106k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|   106k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   106k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|   106k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|   106k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   106k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|   106k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 3.84k, False: 102k]
  ------------------
 1159|  3.84k|        SCN_UNLIKELY_ATTR
 1160|  3.84k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|  3.84k|                                             "Invalid integer value");
 1162|  3.84k|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|   102k|    auto start = source.data();
 1166|   102k|    const auto end = source.data() + source.size();
 1167|   102k|    {
 1168|   290k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 271k, False: 18.5k]
  ------------------
 1169|   271k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 84.2k, False: 187k]
  ------------------
 1170|  84.2k|                break;
 1171|  84.2k|            }
 1172|   271k|        }
 1173|   102k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 31.0k, False: 71.7k]
  |  |  |  Branch (865:45): [True: 18.5k, False: 84.2k]
  |  |  |  Branch (865:45): [True: 12.4k, False: 71.7k]
  |  |  ------------------
  ------------------
 1174|  31.0k|            value = 0;
 1175|  31.0k|            return ranges::next(source.begin(),
 1176|  31.0k|                                ranges::distance(source.data(), start));
 1177|  31.0k|        }
 1178|   102k|    }
 1179|       |
 1180|  71.7k|    if constexpr (std::is_same_v<CharT, char>) {
 1181|  71.7k|        if (base == 10) {
  ------------------
  |  Branch (1181:13): [True: 52.1k, False: 19.6k]
  ------------------
 1182|  52.1k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3940|  52.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  52.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  52.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  52.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 456, False: 51.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    456|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    456|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    456|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    456|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    456|    }                                                  \
  |  |  |  | 3939|  52.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  51.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1183|  51.6k|                             detail::make_string_view_from_pointers(start, end),
 1184|  51.6k|                             value, sign == sign_type::minus_sign));
 1185|  51.6k|            return ranges::next(source.begin(),
 1186|  51.6k|                                ranges::distance(source.data(), ptr));
 1187|  52.1k|        }
 1188|  71.7k|    }
 1189|       |
 1190|  71.4k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|  71.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  71.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  71.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  71.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 258, False: 71.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    258|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    258|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    258|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    258|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    258|    }                                                  \
  |  |  |  | 3939|  71.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  71.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|  71.4k|                     detail::make_string_view_from_pointers(start, end), value,
 1192|  71.4k|                     base, sign == sign_type::minus_sign));
 1193|  71.4k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|  71.7k|}
_ZN3scn2v44impl19parse_integer_valueIwyEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|  21.1k|{
 1153|  21.1k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|  21.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|  21.1k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|  21.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|  21.1k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|  21.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|  21.1k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|  21.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|  21.1k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 17.4k, False: 3.77k]
  ------------------
 1159|  17.4k|        SCN_UNLIKELY_ATTR
 1160|  17.4k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|  17.4k|                                             "Invalid integer value");
 1162|  17.4k|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|  3.77k|    auto start = source.data();
 1166|  3.77k|    const auto end = source.data() + source.size();
 1167|  3.77k|    {
 1168|  4.15k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 3.97k, False: 179]
  ------------------
 1169|  3.97k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 3.59k, False: 380]
  ------------------
 1170|  3.59k|                break;
 1171|  3.59k|            }
 1172|  3.97k|        }
 1173|  3.77k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|  7.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 292, False: 3.48k]
  |  |  |  Branch (865:45): [True: 179, False: 3.59k]
  |  |  |  Branch (865:45): [True: 113, False: 3.48k]
  |  |  ------------------
  ------------------
 1174|    292|            value = 0;
 1175|    292|            return ranges::next(source.begin(),
 1176|    292|                                ranges::distance(source.data(), start));
 1177|    292|        }
 1178|  3.77k|    }
 1179|       |
 1180|       |    if constexpr (std::is_same_v<CharT, char>) {
 1181|       |        if (base == 10) {
 1182|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1183|       |                             detail::make_string_view_from_pointers(start, end),
 1184|       |                             value, sign == sign_type::minus_sign));
 1185|       |            return ranges::next(source.begin(),
 1186|       |                                ranges::distance(source.data(), ptr));
 1187|       |        }
 1188|       |    }
 1189|       |
 1190|  3.48k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|  3.48k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  3.48k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  3.48k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  3.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 8, False: 3.47k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      8|    }                                                  \
  |  |  |  | 3939|  3.48k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  3.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|  3.47k|                     detail::make_string_view_from_pointers(start, end), value,
 1192|  3.47k|                     base, sign == sign_type::minus_sign));
 1193|  3.47k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|  3.48k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1902|   209k|{
 1903|   209k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 1904|   209k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1910|   209k|{
 1911|   209k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 1912|   209k|    return sync_after_vscan(source, n);
 1913|   209k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1920|  86.7k|{
 1921|  86.7k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 1922|  86.7k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1928|  86.7k|{
 1929|  86.7k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 1930|  86.7k|    return sync_after_vscan(source, n);
 1931|  86.7k|}
_ZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  214|   846k|{
  215|   846k|    return find_classic_impl(
  216|   846k|        source, [](char ch) { return !is_ascii_space(ch); },
  217|   846k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  218|   846k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1871|   209k|{
 1872|   209k|    return vscan_internal(source, format, args);
 1873|   209k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1877|   209k|{
 1878|   209k|    auto n = vscan_internal(source, format, args);
 1879|   209k|    return sync_after_vscan(source, n);
 1880|   209k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1885|  86.7k|{
 1886|  86.7k|    return vscan_internal(source, format, args);
 1887|  86.7k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1891|  86.7k|{
 1892|  86.7k|    auto n = vscan_internal(source, format, args);
 1893|  86.7k|    return sync_after_vscan(source, n);
 1894|  86.7k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1957|  31.8k|{
 1958|  31.8k|    return vscan_value_internal(source, arg);
 1959|  31.8k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1962|  31.3k|{
 1963|  31.3k|    auto n = vscan_value_internal(source, arg);
 1964|  31.3k|    return sync_after_vscan(source, n);
 1965|  31.3k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1970|  8.48k|{
 1971|  8.48k|    return vscan_value_internal(source, arg);
 1972|  8.48k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1976|  8.48k|{
 1977|  8.48k|    auto n = vscan_value_internal(source, arg);
 1978|  8.48k|    return sync_after_vscan(source, n);
 1979|  8.48k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122check_integer_overflowIaEEbmmib:
 1056|  85.5k|{
 1057|  85.5k|    auto max_digits = maxdigits_u64(base);
 1058|  85.5k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1058:9): [True: 954, False: 84.6k]
  ------------------
 1059|    954|        return true;
 1060|    954|    }
 1061|  84.6k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1061:9): [True: 318, False: 84.2k]
  |  Branch (1061:39): [True: 106, False: 212]
  ------------------
 1062|    106|        return true;
 1063|    106|    }
 1064|  84.4k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1065|  84.4k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1065:13): [True: 7.37k, False: 77.1k]
  ------------------
 1066|  84.4k|                      static_cast<uint64_t>(is_negative)) {
 1067|  7.37k|            SCN_UNLIKELY_ATTR
 1068|  7.37k|            return true;
 1069|  7.37k|        }
 1070|  84.4k|    }
 1071|       |
 1072|  77.1k|    return false;
 1073|  84.6k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113maxdigits_u64Ei:
 1002|   509k|{
 1003|   509k|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  |  930|   509k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   509k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1004|   509k|    return maxdigits_u64_table[static_cast<size_t>(base)];
 1005|   509k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112min_safe_u64Ei:
 1046|  1.79k|{
 1047|  1.79k|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  |  930|  1.79k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.79k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1048|  1.79k|    return min_safe_u64_table[static_cast<size_t>(base)];
 1049|  1.79k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112store_resultIaEET_mb:
 1077|  77.1k|{
 1078|  77.1k|    if (is_negative) {
  ------------------
  |  Branch (1078:9): [True: 15.0k, False: 62.1k]
  ------------------
 1079|  15.0k|        SCN_MSVC_PUSH
 1080|  15.0k|        SCN_MSVC_IGNORE(4146)
 1081|  15.0k|        return static_cast<T>(
 1082|  15.0k|            -std::numeric_limits<T>::max() -
 1083|  15.0k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1084|  15.0k|        SCN_MSVC_POP
 1085|  15.0k|    }
 1086|       |
 1087|  62.1k|    return static_cast<T>(u64val);
 1088|  77.1k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122check_integer_overflowIiEEbmmib:
 1056|   102k|{
 1057|   102k|    auto max_digits = maxdigits_u64(base);
 1058|   102k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1058:9): [True: 1.02k, False: 101k]
  ------------------
 1059|  1.02k|        return true;
 1060|  1.02k|    }
 1061|   101k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1061:9): [True: 326, False: 101k]
  |  Branch (1061:39): [True: 106, False: 220]
  ------------------
 1062|    106|        return true;
 1063|    106|    }
 1064|   101k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1065|   101k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1065:13): [True: 1.61k, False: 100k]
  ------------------
 1066|   101k|                      static_cast<uint64_t>(is_negative)) {
 1067|  1.61k|            SCN_UNLIKELY_ATTR
 1068|  1.61k|            return true;
 1069|  1.61k|        }
 1070|   101k|    }
 1071|       |
 1072|   100k|    return false;
 1073|   101k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112store_resultIiEET_mb:
 1077|   100k|{
 1078|   100k|    if (is_negative) {
  ------------------
  |  Branch (1078:9): [True: 16.3k, False: 83.8k]
  ------------------
 1079|  16.3k|        SCN_MSVC_PUSH
 1080|  16.3k|        SCN_MSVC_IGNORE(4146)
 1081|  16.3k|        return static_cast<T>(
 1082|  16.3k|            -std::numeric_limits<T>::max() -
 1083|  16.3k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1084|  16.3k|        SCN_MSVC_POP
 1085|  16.3k|    }
 1086|       |
 1087|  83.8k|    return static_cast<T>(u64val);
 1088|   100k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122check_integer_overflowIxEEbmmib:
 1056|   104k|{
 1057|   104k|    auto max_digits = maxdigits_u64(base);
 1058|   104k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1058:9): [True: 1.10k, False: 103k]
  ------------------
 1059|  1.10k|        return true;
 1060|  1.10k|    }
 1061|   103k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1061:9): [True: 362, False: 102k]
  |  Branch (1061:39): [True: 106, False: 256]
  ------------------
 1062|    106|        return true;
 1063|    106|    }
 1064|   103k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1065|   103k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1065:13): [True: 184, False: 102k]
  ------------------
 1066|   103k|                      static_cast<uint64_t>(is_negative)) {
 1067|    184|            SCN_UNLIKELY_ATTR
 1068|    184|            return true;
 1069|    184|        }
 1070|   103k|    }
 1071|       |
 1072|   102k|    return false;
 1073|   103k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112store_resultIxEET_mb:
 1077|   102k|{
 1078|   102k|    if (is_negative) {
  ------------------
  |  Branch (1078:9): [True: 17.1k, False: 85.8k]
  ------------------
 1079|  17.1k|        SCN_MSVC_PUSH
 1080|  17.1k|        SCN_MSVC_IGNORE(4146)
 1081|  17.1k|        return static_cast<T>(
 1082|  17.1k|            -std::numeric_limits<T>::max() -
 1083|  17.1k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1084|  17.1k|        SCN_MSVC_POP
 1085|  17.1k|    }
 1086|       |
 1087|  85.8k|    return static_cast<T>(u64val);
 1088|   102k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122check_integer_overflowIhEEbmmib:
 1056|  67.1k|{
 1057|  67.1k|    auto max_digits = maxdigits_u64(base);
 1058|  67.1k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1058:9): [True: 650, False: 66.5k]
  ------------------
 1059|    650|        return true;
 1060|    650|    }
 1061|  66.5k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1061:9): [True: 224, False: 66.3k]
  |  Branch (1061:39): [True: 58, False: 166]
  ------------------
 1062|     58|        return true;
 1063|     58|    }
 1064|  66.4k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1065|  66.4k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1065:13): [True: 5.02k, False: 61.4k]
  ------------------
 1066|  66.4k|                      static_cast<uint64_t>(is_negative)) {
 1067|  5.02k|            SCN_UNLIKELY_ATTR
 1068|  5.02k|            return true;
 1069|  5.02k|        }
 1070|  66.4k|    }
 1071|       |
 1072|  61.4k|    return false;
 1073|  66.5k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112store_resultIhEET_mb:
 1077|  61.4k|{
 1078|  61.4k|    if (is_negative) {
  ------------------
  |  Branch (1078:9): [True: 0, False: 61.4k]
  ------------------
 1079|      0|        SCN_MSVC_PUSH
 1080|      0|        SCN_MSVC_IGNORE(4146)
 1081|      0|        return static_cast<T>(
 1082|      0|            -std::numeric_limits<T>::max() -
 1083|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1084|      0|        SCN_MSVC_POP
 1085|      0|    }
 1086|       |
 1087|  61.4k|    return static_cast<T>(u64val);
 1088|  61.4k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122check_integer_overflowIjEEbmmib:
 1056|  74.3k|{
 1057|  74.3k|    auto max_digits = maxdigits_u64(base);
 1058|  74.3k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1058:9): [True: 650, False: 73.7k]
  ------------------
 1059|    650|        return true;
 1060|    650|    }
 1061|  73.7k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1061:9): [True: 228, False: 73.5k]
  |  Branch (1061:39): [True: 58, False: 170]
  ------------------
 1062|     58|        return true;
 1063|     58|    }
 1064|  73.6k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1065|  73.6k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1065:13): [True: 820, False: 72.8k]
  ------------------
 1066|  73.6k|                      static_cast<uint64_t>(is_negative)) {
 1067|    820|            SCN_UNLIKELY_ATTR
 1068|    820|            return true;
 1069|    820|        }
 1070|  73.6k|    }
 1071|       |
 1072|  72.8k|    return false;
 1073|  73.7k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112store_resultIjEET_mb:
 1077|  72.8k|{
 1078|  72.8k|    if (is_negative) {
  ------------------
  |  Branch (1078:9): [True: 0, False: 72.8k]
  ------------------
 1079|      0|        SCN_MSVC_PUSH
 1080|      0|        SCN_MSVC_IGNORE(4146)
 1081|      0|        return static_cast<T>(
 1082|      0|            -std::numeric_limits<T>::max() -
 1083|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1084|      0|        SCN_MSVC_POP
 1085|      0|    }
 1086|       |
 1087|  72.8k|    return static_cast<T>(u64val);
 1088|  72.8k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122check_integer_overflowIyEEbmmib:
 1056|  75.2k|{
 1057|  75.2k|    auto max_digits = maxdigits_u64(base);
 1058|  75.2k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1058:9): [True: 664, False: 74.5k]
  ------------------
 1059|    664|        return true;
 1060|    664|    }
 1061|  74.5k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1061:9): [True: 336, False: 74.2k]
  |  Branch (1061:39): [True: 58, False: 278]
  ------------------
 1062|     58|        return true;
 1063|     58|    }
 1064|  74.5k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1065|  74.5k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1065:13): [True: 0, False: 74.5k]
  ------------------
 1066|  74.5k|                      static_cast<uint64_t>(is_negative)) {
 1067|      0|            SCN_UNLIKELY_ATTR
 1068|      0|            return true;
 1069|      0|        }
 1070|  74.5k|    }
 1071|       |
 1072|  74.5k|    return false;
 1073|  74.5k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112store_resultIyEET_mb:
 1077|  74.5k|{
 1078|  74.5k|    if (is_negative) {
  ------------------
  |  Branch (1078:9): [True: 0, False: 74.5k]
  ------------------
 1079|      0|        SCN_MSVC_PUSH
 1080|      0|        SCN_MSVC_IGNORE(4146)
 1081|      0|        return static_cast<T>(
 1082|      0|            -std::numeric_limits<T>::max() -
 1083|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1084|      0|        SCN_MSVC_POP
 1085|      0|    }
 1086|       |
 1087|  74.5k|    return static_cast<T>(u64val);
 1088|  74.5k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121get_eight_digits_wordEPKc:
  940|   187k|{
  941|   187k|    uint64_t val{};
  942|   187k|    std::memcpy(&val, input, sizeof(uint64_t));
  943|       |    if constexpr (SCN_IS_BIG_ENDIAN) {
  944|       |        val = byteswap(val);
  945|       |    }
  946|   187k|    return val;
  947|   187k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_140parse_eight_decimal_digits_unrolled_fastEm:
  950|  33.7k|{
  951|  33.7k|    constexpr uint64_t mask = 0x000000FF000000FF;
  952|  33.7k|    constexpr uint64_t mul1 = 0x000F424000000064;  // 100 + (1000000ULL << 32)
  953|  33.7k|    constexpr uint64_t mul2 = 0x0000271000000001;  // 1 + (10000ULL << 32)
  954|  33.7k|    word -= 0x3030303030303030;
  955|  33.7k|    word = (word * 10) + (word >> 8);  // val = (val * 2561) >> 8;
  956|  33.7k|    word = (((word & mask) * mul1) + (((word >> 16) & mask) * mul2)) >> 32;
  957|  33.7k|    return static_cast<uint32_t>(word);
  958|  33.7k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_141is_word_made_of_eight_decimal_digits_fastEm:
  961|   153k|{
  962|   153k|    return !((((word + 0x4646464646464646) | (word - 0x3030303030303030)) &
  963|   153k|              0x8080808080808080));
  964|   153k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  117|   516k|{
  118|   516k|    static_assert(sizeof(*source.data()) == 1);
  119|   516k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  930|   516k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   516k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  120|   516k|    uint64_t word{};
  121|   516k|    std::memcpy(&word, source.data(), source.size());
  122|       |
  123|   516k|    return has_byte_greater(word, 127) != 0;
  124|   516k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|   846k|{
  131|   846k|    auto it = source.begin();
  132|       |
  133|   925k|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 516k, False: 408k]
  ------------------
  134|   516k|        auto sv =
  135|   516k|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|   516k|                .substr(0, 8);
  137|       |
  138|   516k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 492k, False: 24.1k]
  ------------------
  139|   492k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|   492k|            it = detail::make_string_view_iterator(source, tmp_it);
  141|   492k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 415k, False: 76.8k]
  ------------------
  142|   415k|                break;
  143|   415k|            }
  144|  76.8k|            continue;
  145|   492k|        }
  146|       |
  147|  33.3k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 31.3k, False: 2.05k]
  ------------------
  148|  31.3k|            auto tmp =
  149|  31.3k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|  31.3k|            auto res = get_next_code_point(tmp);
  151|  31.3k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 22.0k, False: 9.25k]
  ------------------
  152|  22.0k|                return it;
  153|  22.0k|            }
  154|  9.25k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|  9.25k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  9.25k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  931|  9.25k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.25k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  9.25k|        }
  158|  24.1k|    }
  159|       |
  160|   824k|    return detail::make_string_view_iterator(source, it);
  161|   846k|}
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  216|   860k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  217|  31.3k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126parse_decimal_integer_fastIaEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1094|  61.3k|{
 1095|  61.3k|    uint64_t u64val{};
 1096|  61.3k|    auto ptr = parse_decimal_integer_fast_impl(
 1097|  61.3k|        input.data(), input.data() + input.size(), u64val);
 1098|       |
 1099|  61.3k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1100|  61.3k|    if (SCN_UNLIKELY(
  ------------------
  |  |  865|  61.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.44k, False: 57.9k]
  |  |  ------------------
  ------------------
 1101|  61.3k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1102|  3.44k|        return detail::unexpected_scan_error(
 1103|  3.44k|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1103:13): [True: 1.07k, False: 2.37k]
  ------------------
 1104|  3.44k|                        : scan_error::value_positive_overflow,
 1105|  3.44k|            "Integer overflow");
 1106|  3.44k|    }
 1107|       |
 1108|  57.9k|    val = store_result<T>(u64val, is_negative);
 1109|  57.9k|    return ptr;
 1110|  61.3k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_131parse_decimal_integer_fast_implEPKcS4_Rm:
  982|   355k|{
  983|   355k|    loop_parse_if_eight_decimal_digits(begin, end, val);
  984|       |
  985|   799k|    while (begin != end) {
  ------------------
  |  Branch (985:12): [True: 578k, False: 220k]
  ------------------
  986|   578k|        const auto digit = char_to_int(*begin);
  987|   578k|        if (digit >= 10) {
  ------------------
  |  Branch (987:13): [True: 134k, False: 443k]
  ------------------
  988|   134k|            break;
  989|   134k|        }
  990|   443k|        val = 10ull * val + static_cast<uint64_t>(digit);
  991|   443k|        ++begin;
  992|   443k|    }
  993|       |
  994|   355k|    return begin;
  995|   355k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_134loop_parse_if_eight_decimal_digitsERPKcS4_Rm:
  969|   355k|{
  970|   355k|    while (
  971|   388k|        std::distance(p, end) >= 8 &&
  ------------------
  |  Branch (971:9): [True: 153k, False: 235k]
  ------------------
  972|   388k|        is_word_made_of_eight_decimal_digits_fast(get_eight_digits_word(p))) {
  ------------------
  |  Branch (972:9): [True: 33.7k, False: 120k]
  ------------------
  973|  33.7k|        val = val * 100'000'000 + parse_eight_decimal_digits_unrolled_fast(
  974|  33.7k|                                      get_eight_digits_word(p));
  975|  33.7k|        p += 8;
  976|  33.7k|    }
  977|   355k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIcaEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1117|  20.5k|{
 1118|  20.5k|    uint64_t u64val{};
 1119|  20.5k|    const CharT* begin = input.data();
 1120|  20.5k|    const CharT* const end = input.data() + input.size();
 1121|       |
 1122|  72.9k|    while (begin != end) {
  ------------------
  |  Branch (1122:12): [True: 62.2k, False: 10.7k]
  ------------------
 1123|  62.2k|        const auto digit = char_to_int(*begin);
 1124|  62.2k|        if (digit >= base) {
  ------------------
  |  Branch (1124:13): [True: 9.84k, False: 52.3k]
  ------------------
 1125|  9.84k|            break;
 1126|  9.84k|        }
 1127|  52.3k|        u64val =
 1128|  52.3k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1129|  52.3k|        ++begin;
 1130|  52.3k|    }
 1131|       |
 1132|  20.5k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1133|  20.5k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  865|  20.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.94k, False: 18.6k]
  |  |  ------------------
  ------------------
 1134|  20.5k|                                               is_negative))) {
 1135|  1.94k|        return detail::unexpected_scan_error(
 1136|  1.94k|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1136:13): [True: 608, False: 1.33k]
  ------------------
 1137|  1.94k|                        : scan_error::value_positive_overflow,
 1138|  1.94k|            "Integer overflow");
 1139|  1.94k|    }
 1140|       |
 1141|  18.6k|    val = store_result<T>(u64val, is_negative);
 1142|  18.6k|    return begin;
 1143|  20.5k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIwaEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1117|  3.60k|{
 1118|  3.60k|    uint64_t u64val{};
 1119|  3.60k|    const CharT* begin = input.data();
 1120|  3.60k|    const CharT* const end = input.data() + input.size();
 1121|       |
 1122|  18.2k|    while (begin != end) {
  ------------------
  |  Branch (1122:12): [True: 14.8k, False: 3.33k]
  ------------------
 1123|  14.8k|        const auto digit = char_to_int(*begin);
 1124|  14.8k|        if (digit >= base) {
  ------------------
  |  Branch (1124:13): [True: 266, False: 14.6k]
  ------------------
 1125|    266|            break;
 1126|    266|        }
 1127|  14.6k|        u64val =
 1128|  14.6k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1129|  14.6k|        ++begin;
 1130|  14.6k|    }
 1131|       |
 1132|  3.60k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1133|  3.60k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  865|  3.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.05k, False: 554]
  |  |  ------------------
  ------------------
 1134|  3.60k|                                               is_negative))) {
 1135|  3.05k|        return detail::unexpected_scan_error(
 1136|  3.05k|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1136:13): [True: 34, False: 3.01k]
  ------------------
 1137|  3.05k|                        : scan_error::value_positive_overflow,
 1138|  3.05k|            "Integer overflow");
 1139|  3.05k|    }
 1140|       |
 1141|    554|    val = store_result<T>(u64val, is_negative);
 1142|    554|    return begin;
 1143|  3.60k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126parse_decimal_integer_fastIiEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1094|  71.4k|{
 1095|  71.4k|    uint64_t u64val{};
 1096|  71.4k|    auto ptr = parse_decimal_integer_fast_impl(
 1097|  71.4k|        input.data(), input.data() + input.size(), u64val);
 1098|       |
 1099|  71.4k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1100|  71.4k|    if (SCN_UNLIKELY(
  ------------------
  |  |  865|  71.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.69k, False: 69.7k]
  |  |  ------------------
  ------------------
 1101|  71.4k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1102|  1.69k|        return detail::unexpected_scan_error(
 1103|  1.69k|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1103:13): [True: 624, False: 1.07k]
  ------------------
 1104|  1.69k|                        : scan_error::value_positive_overflow,
 1105|  1.69k|            "Integer overflow");
 1106|  1.69k|    }
 1107|       |
 1108|  69.7k|    val = store_result<T>(u64val, is_negative);
 1109|  69.7k|    return ptr;
 1110|  71.4k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIciEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1117|  27.9k|{
 1118|  27.9k|    uint64_t u64val{};
 1119|  27.9k|    const CharT* begin = input.data();
 1120|  27.9k|    const CharT* const end = input.data() + input.size();
 1121|       |
 1122|  91.6k|    while (begin != end) {
  ------------------
  |  Branch (1122:12): [True: 77.1k, False: 14.4k]
  ------------------
 1123|  77.1k|        const auto digit = char_to_int(*begin);
 1124|  77.1k|        if (digit >= base) {
  ------------------
  |  Branch (1124:13): [True: 13.4k, False: 63.6k]
  ------------------
 1125|  13.4k|            break;
 1126|  13.4k|        }
 1127|  63.6k|        u64val =
 1128|  63.6k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1129|  63.6k|        ++begin;
 1130|  63.6k|    }
 1131|       |
 1132|  27.9k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1133|  27.9k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  865|  27.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 898, False: 27.0k]
  |  |  ------------------
  ------------------
 1134|  27.9k|                                               is_negative))) {
 1135|    898|        return detail::unexpected_scan_error(
 1136|    898|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1136:13): [True: 336, False: 562]
  ------------------
 1137|    898|                        : scan_error::value_positive_overflow,
 1138|    898|            "Integer overflow");
 1139|    898|    }
 1140|       |
 1141|  27.0k|    val = store_result<T>(u64val, is_negative);
 1142|  27.0k|    return begin;
 1143|  27.9k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIwiEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1117|  3.63k|{
 1118|  3.63k|    uint64_t u64val{};
 1119|  3.63k|    const CharT* begin = input.data();
 1120|  3.63k|    const CharT* const end = input.data() + input.size();
 1121|       |
 1122|  18.2k|    while (begin != end) {
  ------------------
  |  Branch (1122:12): [True: 14.9k, False: 3.35k]
  ------------------
 1123|  14.9k|        const auto digit = char_to_int(*begin);
 1124|  14.9k|        if (digit >= base) {
  ------------------
  |  Branch (1124:13): [True: 277, False: 14.6k]
  ------------------
 1125|    277|            break;
 1126|    277|        }
 1127|  14.6k|        u64val =
 1128|  14.6k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1129|  14.6k|        ++begin;
 1130|  14.6k|    }
 1131|       |
 1132|  3.63k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1133|  3.63k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  865|  3.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 148, False: 3.48k]
  |  |  ------------------
  ------------------
 1134|  3.63k|                                               is_negative))) {
 1135|    148|        return detail::unexpected_scan_error(
 1136|    148|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1136:13): [True: 0, False: 148]
  ------------------
 1137|    148|                        : scan_error::value_positive_overflow,
 1138|    148|            "Integer overflow");
 1139|    148|    }
 1140|       |
 1141|  3.48k|    val = store_result<T>(u64val, is_negative);
 1142|  3.48k|    return begin;
 1143|  3.63k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126parse_decimal_integer_fastIxEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1094|  72.4k|{
 1095|  72.4k|    uint64_t u64val{};
 1096|  72.4k|    auto ptr = parse_decimal_integer_fast_impl(
 1097|  72.4k|        input.data(), input.data() + input.size(), u64val);
 1098|       |
 1099|  72.4k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1100|  72.4k|    if (SCN_UNLIKELY(
  ------------------
  |  |  865|  72.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 916, False: 71.4k]
  |  |  ------------------
  ------------------
 1101|  72.4k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1102|    916|        return detail::unexpected_scan_error(
 1103|    916|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1103:13): [True: 284, False: 632]
  ------------------
 1104|    916|                        : scan_error::value_positive_overflow,
 1105|    916|            "Integer overflow");
 1106|    916|    }
 1107|       |
 1108|  71.4k|    val = store_result<T>(u64val, is_negative);
 1109|  71.4k|    return ptr;
 1110|  72.4k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIcxEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1117|  28.2k|{
 1118|  28.2k|    uint64_t u64val{};
 1119|  28.2k|    const CharT* begin = input.data();
 1120|  28.2k|    const CharT* const end = input.data() + input.size();
 1121|       |
 1122|  94.2k|    while (begin != end) {
  ------------------
  |  Branch (1122:12): [True: 79.6k, False: 14.6k]
  ------------------
 1123|  79.6k|        const auto digit = char_to_int(*begin);
 1124|  79.6k|        if (digit >= base) {
  ------------------
  |  Branch (1124:13): [True: 13.6k, False: 65.9k]
  ------------------
 1125|  13.6k|            break;
 1126|  13.6k|        }
 1127|  65.9k|        u64val =
 1128|  65.9k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1129|  65.9k|        ++begin;
 1130|  65.9k|    }
 1131|       |
 1132|  28.2k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1133|  28.2k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  865|  28.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 462, False: 27.8k]
  |  |  ------------------
  ------------------
 1134|  28.2k|                                               is_negative))) {
 1135|    462|        return detail::unexpected_scan_error(
 1136|    462|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1136:13): [True: 96, False: 366]
  ------------------
 1137|    462|                        : scan_error::value_positive_overflow,
 1138|    462|            "Integer overflow");
 1139|    462|    }
 1140|       |
 1141|  27.8k|    val = store_result<T>(u64val, is_negative);
 1142|  27.8k|    return begin;
 1143|  28.2k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIwxEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1117|  3.67k|{
 1118|  3.67k|    uint64_t u64val{};
 1119|  3.67k|    const CharT* begin = input.data();
 1120|  3.67k|    const CharT* const end = input.data() + input.size();
 1121|       |
 1122|  18.3k|    while (begin != end) {
  ------------------
  |  Branch (1122:12): [True: 14.9k, False: 3.37k]
  ------------------
 1123|  14.9k|        const auto digit = char_to_int(*begin);
 1124|  14.9k|        if (digit >= base) {
  ------------------
  |  Branch (1124:13): [True: 293, False: 14.6k]
  ------------------
 1125|    293|            break;
 1126|    293|        }
 1127|  14.6k|        u64val =
 1128|  14.6k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1129|  14.6k|        ++begin;
 1130|  14.6k|    }
 1131|       |
 1132|  3.67k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1133|  3.67k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  865|  3.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 20, False: 3.65k]
  |  |  ------------------
  ------------------
 1134|  3.67k|                                               is_negative))) {
 1135|     20|        return detail::unexpected_scan_error(
 1136|     20|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1136:13): [True: 0, False: 20]
  ------------------
 1137|     20|                        : scan_error::value_positive_overflow,
 1138|     20|            "Integer overflow");
 1139|     20|    }
 1140|       |
 1141|  3.65k|    val = store_result<T>(u64val, is_negative);
 1142|  3.65k|    return begin;
 1143|  3.67k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126parse_decimal_integer_fastIhEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1094|  46.3k|{
 1095|  46.3k|    uint64_t u64val{};
 1096|  46.3k|    auto ptr = parse_decimal_integer_fast_impl(
 1097|  46.3k|        input.data(), input.data() + input.size(), u64val);
 1098|       |
 1099|  46.3k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1100|  46.3k|    if (SCN_UNLIKELY(
  ------------------
  |  |  865|  46.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.72k, False: 44.6k]
  |  |  ------------------
  ------------------
 1101|  46.3k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1102|  1.72k|        return detail::unexpected_scan_error(
 1103|  1.72k|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1103:13): [True: 0, False: 1.72k]
  ------------------
 1104|  1.72k|                        : scan_error::value_positive_overflow,
 1105|  1.72k|            "Integer overflow");
 1106|  1.72k|    }
 1107|       |
 1108|  44.6k|    val = store_result<T>(u64val, is_negative);
 1109|  44.6k|    return ptr;
 1110|  46.3k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIchEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1117|  17.4k|{
 1118|  17.4k|    uint64_t u64val{};
 1119|  17.4k|    const CharT* begin = input.data();
 1120|  17.4k|    const CharT* const end = input.data() + input.size();
 1121|       |
 1122|  56.1k|    while (begin != end) {
  ------------------
  |  Branch (1122:12): [True: 47.1k, False: 9.06k]
  ------------------
 1123|  47.1k|        const auto digit = char_to_int(*begin);
 1124|  47.1k|        if (digit >= base) {
  ------------------
  |  Branch (1124:13): [True: 8.38k, False: 38.7k]
  ------------------
 1125|  8.38k|            break;
 1126|  8.38k|        }
 1127|  38.7k|        u64val =
 1128|  38.7k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1129|  38.7k|        ++begin;
 1130|  38.7k|    }
 1131|       |
 1132|  17.4k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1133|  17.4k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  865|  17.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.01k, False: 16.4k]
  |  |  ------------------
  ------------------
 1134|  17.4k|                                               is_negative))) {
 1135|  1.01k|        return detail::unexpected_scan_error(
 1136|  1.01k|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1136:13): [True: 0, False: 1.01k]
  ------------------
 1137|  1.01k|                        : scan_error::value_positive_overflow,
 1138|  1.01k|            "Integer overflow");
 1139|  1.01k|    }
 1140|       |
 1141|  16.4k|    val = store_result<T>(u64val, is_negative);
 1142|  16.4k|    return begin;
 1143|  17.4k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIwhEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1117|  3.41k|{
 1118|  3.41k|    uint64_t u64val{};
 1119|  3.41k|    const CharT* begin = input.data();
 1120|  3.41k|    const CharT* const end = input.data() + input.size();
 1121|       |
 1122|  17.7k|    while (begin != end) {
  ------------------
  |  Branch (1122:12): [True: 14.5k, False: 3.18k]
  ------------------
 1123|  14.5k|        const auto digit = char_to_int(*begin);
 1124|  14.5k|        if (digit >= base) {
  ------------------
  |  Branch (1124:13): [True: 230, False: 14.3k]
  ------------------
 1125|    230|            break;
 1126|    230|        }
 1127|  14.3k|        u64val =
 1128|  14.3k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1129|  14.3k|        ++begin;
 1130|  14.3k|    }
 1131|       |
 1132|  3.41k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1133|  3.41k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  865|  3.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.99k, False: 426]
  |  |  ------------------
  ------------------
 1134|  3.41k|                                               is_negative))) {
 1135|  2.99k|        return detail::unexpected_scan_error(
 1136|  2.99k|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1136:13): [True: 0, False: 2.99k]
  ------------------
 1137|  2.99k|                        : scan_error::value_positive_overflow,
 1138|  2.99k|            "Integer overflow");
 1139|  2.99k|    }
 1140|       |
 1141|    426|    val = store_result<T>(u64val, is_negative);
 1142|    426|    return begin;
 1143|  3.41k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126parse_decimal_integer_fastIjEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1094|  51.5k|{
 1095|  51.5k|    uint64_t u64val{};
 1096|  51.5k|    auto ptr = parse_decimal_integer_fast_impl(
 1097|  51.5k|        input.data(), input.data() + input.size(), u64val);
 1098|       |
 1099|  51.5k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1100|  51.5k|    if (SCN_UNLIKELY(
  ------------------
  |  |  865|  51.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 906, False: 50.6k]
  |  |  ------------------
  ------------------
 1101|  51.5k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1102|    906|        return detail::unexpected_scan_error(
 1103|    906|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1103:13): [True: 0, False: 906]
  ------------------
 1104|    906|                        : scan_error::value_positive_overflow,
 1105|    906|            "Integer overflow");
 1106|    906|    }
 1107|       |
 1108|  50.6k|    val = store_result<T>(u64val, is_negative);
 1109|  50.6k|    return ptr;
 1110|  51.5k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIcjEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1117|  19.4k|{
 1118|  19.4k|    uint64_t u64val{};
 1119|  19.4k|    const CharT* begin = input.data();
 1120|  19.4k|    const CharT* const end = input.data() + input.size();
 1121|       |
 1122|  61.4k|    while (begin != end) {
  ------------------
  |  Branch (1122:12): [True: 51.3k, False: 10.0k]
  ------------------
 1123|  51.3k|        const auto digit = char_to_int(*begin);
 1124|  51.3k|        if (digit >= base) {
  ------------------
  |  Branch (1124:13): [True: 9.35k, False: 41.9k]
  ------------------
 1125|  9.35k|            break;
 1126|  9.35k|        }
 1127|  41.9k|        u64val =
 1128|  41.9k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1129|  41.9k|        ++begin;
 1130|  41.9k|    }
 1131|       |
 1132|  19.4k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1133|  19.4k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  865|  19.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 478, False: 18.9k]
  |  |  ------------------
  ------------------
 1134|  19.4k|                                               is_negative))) {
 1135|    478|        return detail::unexpected_scan_error(
 1136|    478|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1136:13): [True: 0, False: 478]
  ------------------
 1137|    478|                        : scan_error::value_positive_overflow,
 1138|    478|            "Integer overflow");
 1139|    478|    }
 1140|       |
 1141|  18.9k|    val = store_result<T>(u64val, is_negative);
 1142|  18.9k|    return begin;
 1143|  19.4k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIwjEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1117|  3.43k|{
 1118|  3.43k|    uint64_t u64val{};
 1119|  3.43k|    const CharT* begin = input.data();
 1120|  3.43k|    const CharT* const end = input.data() + input.size();
 1121|       |
 1122|  17.7k|    while (begin != end) {
  ------------------
  |  Branch (1122:12): [True: 14.5k, False: 3.19k]
  ------------------
 1123|  14.5k|        const auto digit = char_to_int(*begin);
 1124|  14.5k|        if (digit >= base) {
  ------------------
  |  Branch (1124:13): [True: 239, False: 14.3k]
  ------------------
 1125|    239|            break;
 1126|    239|        }
 1127|  14.3k|        u64val =
 1128|  14.3k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1129|  14.3k|        ++begin;
 1130|  14.3k|    }
 1131|       |
 1132|  3.43k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1133|  3.43k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  865|  3.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 144, False: 3.29k]
  |  |  ------------------
  ------------------
 1134|  3.43k|                                               is_negative))) {
 1135|    144|        return detail::unexpected_scan_error(
 1136|    144|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1136:13): [True: 0, False: 144]
  ------------------
 1137|    144|                        : scan_error::value_positive_overflow,
 1138|    144|            "Integer overflow");
 1139|    144|    }
 1140|       |
 1141|  3.29k|    val = store_result<T>(u64val, is_negative);
 1142|  3.29k|    return begin;
 1143|  3.43k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126parse_decimal_integer_fastIyEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1094|  52.1k|{
 1095|  52.1k|    uint64_t u64val{};
 1096|  52.1k|    auto ptr = parse_decimal_integer_fast_impl(
 1097|  52.1k|        input.data(), input.data() + input.size(), u64val);
 1098|       |
 1099|  52.1k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1100|  52.1k|    if (SCN_UNLIKELY(
  ------------------
  |  |  865|  52.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 456, False: 51.6k]
  |  |  ------------------
  ------------------
 1101|  52.1k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1102|    456|        return detail::unexpected_scan_error(
 1103|    456|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1103:13): [True: 0, False: 456]
  ------------------
 1104|    456|                        : scan_error::value_positive_overflow,
 1105|    456|            "Integer overflow");
 1106|    456|    }
 1107|       |
 1108|  51.6k|    val = store_result<T>(u64val, is_negative);
 1109|  51.6k|    return ptr;
 1110|  52.1k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIcyEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1117|  19.6k|{
 1118|  19.6k|    uint64_t u64val{};
 1119|  19.6k|    const CharT* begin = input.data();
 1120|  19.6k|    const CharT* const end = input.data() + input.size();
 1121|       |
 1122|  62.8k|    while (begin != end) {
  ------------------
  |  Branch (1122:12): [True: 52.6k, False: 10.1k]
  ------------------
 1123|  52.6k|        const auto digit = char_to_int(*begin);
 1124|  52.6k|        if (digit >= base) {
  ------------------
  |  Branch (1124:13): [True: 9.43k, False: 43.2k]
  ------------------
 1125|  9.43k|            break;
 1126|  9.43k|        }
 1127|  43.2k|        u64val =
 1128|  43.2k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1129|  43.2k|        ++begin;
 1130|  43.2k|    }
 1131|       |
 1132|  19.6k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1133|  19.6k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  865|  19.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 258, False: 19.3k]
  |  |  ------------------
  ------------------
 1134|  19.6k|                                               is_negative))) {
 1135|    258|        return detail::unexpected_scan_error(
 1136|    258|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1136:13): [True: 0, False: 258]
  ------------------
 1137|    258|                        : scan_error::value_positive_overflow,
 1138|    258|            "Integer overflow");
 1139|    258|    }
 1140|       |
 1141|  19.3k|    val = store_result<T>(u64val, is_negative);
 1142|  19.3k|    return begin;
 1143|  19.6k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIwyEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1117|  3.48k|{
 1118|  3.48k|    uint64_t u64val{};
 1119|  3.48k|    const CharT* begin = input.data();
 1120|  3.48k|    const CharT* const end = input.data() + input.size();
 1121|       |
 1122|  17.8k|    while (begin != end) {
  ------------------
  |  Branch (1122:12): [True: 14.6k, False: 3.22k]
  ------------------
 1123|  14.6k|        const auto digit = char_to_int(*begin);
 1124|  14.6k|        if (digit >= base) {
  ------------------
  |  Branch (1124:13): [True: 257, False: 14.3k]
  ------------------
 1125|    257|            break;
 1126|    257|        }
 1127|  14.3k|        u64val =
 1128|  14.3k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1129|  14.3k|        ++begin;
 1130|  14.3k|    }
 1131|       |
 1132|  3.48k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1133|  3.48k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  865|  3.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8, False: 3.47k]
  |  |  ------------------
  ------------------
 1134|  3.48k|                                               is_negative))) {
 1135|      8|        return detail::unexpected_scan_error(
 1136|      8|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1136:13): [True: 0, False: 8]
  ------------------
 1137|      8|                        : scan_error::value_positive_overflow,
 1138|      8|            "Integer overflow");
 1139|      8|    }
 1140|       |
 1141|  3.47k|    val = store_result<T>(u64val, is_negative);
 1142|  3.47k|    return begin;
 1143|  3.48k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 1768|   418k|{
 1769|   418k|    const auto argcount = args.size();
 1770|   418k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1770:9): [True: 62.7k, False: 355k]
  |  Branch (1770:60): [True: 62.7k, False: 0]
  ------------------
 1771|  62.7k|        auto arg = args.get(0);
 1772|  62.7k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  934|  62.7k|    static_cast<    \
  |  |  935|  62.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1773|  62.7k|    }
 1774|       |
 1775|   355k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (1775:9): [True: 0, False: 355k]
  ------------------
 1776|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 1777|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1778|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1779|      0|        return vscan_parse_format_string(format, handler);
 1780|      0|    }
 1781|       |
 1782|   355k|    SCN_UNLIKELY_ATTR
 1783|   355k|    {
 1784|   355k|        auto handler = format_handler<false, CharT>{
 1785|   355k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   355k|    static_cast<    \
  |  |  935|   355k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   355k|    static_cast<    \
  |  |  935|   355k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1786|   355k|        return vscan_parse_format_string(format, handler);
 1787|   355k|    }
 1788|   355k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1316|   836k|{
 1317|   836k|    if (format.size() != 2) {
  ------------------
  |  Branch (1317:9): [True: 710k, False: 126k]
  ------------------
 1318|   710k|        return false;
 1319|   710k|    }
 1320|   126k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1320:12): [True: 126k, False: 0]
  |  Branch (1320:39): [True: 126k, False: 0]
  ------------------
 1321|   836k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 1349|  94.1k|{
 1350|  94.1k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  94.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 94.1k]
  |  |  ------------------
  ------------------
 1351|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1352|      0|                                             "Argument #0 not found");
 1353|      0|    }
 1354|       |
 1355|  94.1k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  864|  94.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 94.1k]
  |  |  ------------------
  ------------------
 1356|      0|        auto reader = impl::default_arg_reader<
 1357|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1358|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1359|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1360|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1361|      0|    }
 1362|       |
 1363|  94.1k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 1364|  94.1k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  934|  94.1k|    static_cast<    \
  |  |  935|  94.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1365|  94.1k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|  94.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  94.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  94.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  94.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12.3k, False: 81.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  12.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  12.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  12.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  12.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  12.3k|    }                                                  \
  |  |  |  | 3939|  94.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  81.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1366|  81.7k|    return it.position();
 1367|  94.1k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSL_10locale_refEm:
 1592|   354k|        : format_handler_base{argcount},
 1593|   354k|          parse_ctx{source_tag<Source&&>, format},
 1594|   354k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|   354k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   354k|    static_cast<    \
  |  |  935|   354k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   354k|    static_cast<    \
  |  |  935|   354k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|   354k|    {
 1596|   354k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_baseC2Em:
 1410|  1.02M|    format_handler_base(size_t argcount) : args_count(argcount)
 1411|  1.02M|    {
 1412|  1.02M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  865|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.02M]
  |  |  ------------------
  ------------------
 1413|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1414|      0|        }
 1415|  1.02M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSD_10locale_refE:
 1543|   354k|        : contiguous_ctx(source, args, loc)
 1544|   354k|    {
 1545|   354k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|   354k|{
 1734|   354k|    const auto beg = handler.get_ctx().begin();
 1735|   354k|    detail::parse_format_string<false>(format, handler);
 1736|   354k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|   354k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 74.3k, False: 280k]
  |  |  ------------------
  ------------------
 1737|  74.3k|        return unexpected(err.error());
 1738|  74.3k|    }
 1739|   280k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|   354k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 1717|  2.28M|    {
 1718|  2.28M|        return ctx.get();
 1719|  2.28M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1548|  2.28M|    {
 1549|  2.28M|        return contiguous_ctx;
 1550|  2.28M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1599|   635k|    {
 1600|   635k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 635k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|   635k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1459|   396k|    {
 1460|   396k|        error = unexpected(err);
 1461|   396k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEmNS1_14format_handlerILb1EcEEEEDaRT_T0_RT1_:
 1371|   354k|{
 1372|   354k|    auto arg = ctx.arg(id);
 1373|   354k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   354k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 354k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|   354k|    return arg;
 1377|   354k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1485|  1.02M|    {
 1486|  1.02M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  865|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.02M]
  |  |  ------------------
  ------------------
 1487|      0|            on_error({scan_error::invalid_format_string,
 1488|      0|                      "Argument ID out-of-range"});
 1489|      0|            return;
 1490|      0|        }
 1491|       |
 1492|  1.02M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  865|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.02M]
  |  |  ------------------
  ------------------
 1493|      0|            on_error({scan_error::invalid_format_string,
 1494|      0|                      "Argument with this ID has already been scanned"});
 1495|      0|        }
 1496|       |
 1497|  1.02M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  864|  1.02M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.02M, False: 0]
  |  |  ------------------
  ------------------
 1498|  1.02M|            visited_args_lower64 |= (1ull << id);
 1499|  1.02M|            return;
 1500|  1.02M|        }
 1501|       |
 1502|      0|        id -= 64;
 1503|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1504|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1469|  1.02M|    {
 1470|  1.02M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  865|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.02M]
  |  |  ------------------
  ------------------
 1471|      0|            on_error({scan_error::invalid_format_string,
 1472|      0|                      "Argument ID out-of-range"});
 1473|      0|            return false;
 1474|      0|        }
 1475|       |
 1476|  1.02M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  864|  1.02M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.02M, False: 0]
  |  |  ------------------
  ------------------
 1477|  1.02M|            return (visited_args_lower64 >> id) & 1ull;
 1478|  1.02M|        }
 1479|       |
 1480|      0|        id -= 64;
 1481|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1482|  1.02M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1639|   354k|    {
 1640|   354k|        return parse_ctx.next_arg_id();
 1641|   354k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1679|   354k|    {
 1680|   354k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|   354k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|   354k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 354k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|   354k|        auto specs = detail::format_specs{};
 1693|   354k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|   354k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|   354k|            detail::get_arg_type(arg)};
 1696|       |
 1697|   354k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|   354k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 354k]
  |  Branch (1698:29): [True: 16.5k, False: 338k]
  ------------------
 1699|  16.5k|            SCN_UNLIKELY_ATTR
 1700|  16.5k|            on_error({scan_error::invalid_format_string,
 1701|  16.5k|                      "Missing '}' in format string"});
 1702|  16.5k|            return parse_ctx.begin();
 1703|  16.5k|        }
 1704|   338k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|   338k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.25k, False: 330k]
  |  |  ------------------
  ------------------
 1705|  8.25k|            return parse_ctx.begin();
 1706|  8.25k|        }
 1707|   330k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|   330k|        on_visit_scan_arg(
 1710|   330k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|   330k|                                           get_ctx().locale()},
 1712|   330k|            arg);
 1713|   330k|        return parse_ctx.begin();
 1714|   338k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERSB_:
 1389|   354k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|   354k|    {
 1391|   354k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEcEEEE:
 1650|   330k|    {
 1651|   330k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 330k]
  |  Branch (1651:13): [True: 0, False: 330k]
  |  Branch (1651:29): [True: 0, False: 330k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|   330k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|   330k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|   330k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   330k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 49.5k, False: 280k]
  |  |  ------------------
  ------------------
 1658|  49.5k|            on_error(r.error());
 1659|  49.5k|        }
 1660|   280k|        else {
 1661|   280k|            get_ctx().advance_to(*r);
 1662|   280k|        }
 1663|   330k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1453|   148k|    {
 1454|   148k|        SCN_UNLIKELY_ATTR
 1455|   148k|        error = detail::unexpected_scan_error(scan_error::invalid_format_string,
 1456|   148k|                                              msg);
 1457|   148k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1418|  1.02M|    {
 1419|  1.02M|        {
 1420|  1.02M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1420:45): [True: 0, False: 1.02M]
  ------------------
 1421|  1.02M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1421:35): [True: 0, False: 1.02M]
  ------------------
 1422|  1.02M|                                      ? std::numeric_limits<uint64_t>::max()
 1423|  1.02M|                                      : (1ull << args_count_lower64) - 1;
 1424|       |
 1425|  1.02M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1425:17): [True: 0, False: 1.02M]
  ------------------
 1426|      0|                return on_error({scan_error::invalid_format_string,
 1427|      0|                                 "Argument list not exhausted"});
 1428|      0|            }
 1429|  1.02M|        }
 1430|       |
 1431|  1.02M|        if (args_count < 64) {
  ------------------
  |  Branch (1431:13): [True: 1.02M, False: 0]
  ------------------
 1432|  1.02M|            return;
 1433|  1.02M|        }
 1434|       |
 1435|      0|        auto last_args_count = args_count - 64;
 1436|      0|        for (auto it = visited_args_upper.begin();
 1437|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1437:14): [True: 0, False: 0]
  ------------------
 1438|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1438:17): [True: 0, False: 0]
  ------------------
 1439|      0|                return on_error({scan_error::invalid_format_string,
 1440|      0|                                 "Argument list not exhausted"});
 1441|      0|            }
 1442|      0|            last_args_count -= 8;
 1443|      0|        }
 1444|       |
 1445|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1446|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1446:13): [True: 0, False: 0]
  ------------------
 1447|      0|            return on_error({scan_error::invalid_format_string,
 1448|      0|                             "Argument list not exhausted"});
 1449|      0|        }
 1450|      0|    }
impl.cpp:_ZNK3scn2v412_GLOBAL__N_119format_handler_base9get_errorEv:
 1464|  3.94M|    {
 1465|  3.94M|        return error;
 1466|  3.94M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEcEEEENS5_10locale_refEm:
 1592|   355k|        : format_handler_base{argcount},
 1593|   355k|          parse_ctx{source_tag<Source&&>, format},
 1594|   355k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|   355k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   355k|    static_cast<    \
  |  |  935|   355k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   355k|    static_cast<    \
  |  |  935|   355k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|   355k|    {
 1596|   355k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEcEEEENS4_10locale_refE:
 1519|   355k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  934|   355k|    static_cast<    \
  |  |  935|   355k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1520|   355k|    {
 1521|   355k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|   355k|{
 1734|   355k|    const auto beg = handler.get_ctx().begin();
 1735|   355k|    detail::parse_format_string<false>(format, handler);
 1736|   355k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|   355k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 74.3k, False: 281k]
  |  |  ------------------
  ------------------
 1737|  74.3k|        return unexpected(err.error());
 1738|  74.3k|    }
 1739|   281k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|   355k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 1717|  2.28M|    {
 1718|  2.28M|        return ctx.get();
 1719|  2.28M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1524|  2.28M|    {
 1525|  2.28M|        return ctx;
 1526|  2.28M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1599|   636k|    {
 1600|   636k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 636k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|   636k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEmNS1_14format_handlerILb0EcEEEEDaRT_T0_RT1_:
 1371|   355k|{
 1372|   355k|    auto arg = ctx.arg(id);
 1373|   355k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   355k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 355k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|   355k|    return arg;
 1377|   355k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1639|   355k|    {
 1640|   355k|        return parse_ctx.next_arg_id();
 1641|   355k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1679|   355k|    {
 1680|   355k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|   355k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|   355k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 355k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|   355k|        auto specs = detail::format_specs{};
 1693|   355k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|   355k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|   355k|            detail::get_arg_type(arg)};
 1696|       |
 1697|   355k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|   355k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 355k]
  |  Branch (1698:29): [True: 16.5k, False: 338k]
  ------------------
 1699|  16.5k|            SCN_UNLIKELY_ATTR
 1700|  16.5k|            on_error({scan_error::invalid_format_string,
 1701|  16.5k|                      "Missing '}' in format string"});
 1702|  16.5k|            return parse_ctx.begin();
 1703|  16.5k|        }
 1704|   338k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|   338k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.25k, False: 330k]
  |  |  ------------------
  ------------------
 1705|  8.25k|            return parse_ctx.begin();
 1706|  8.25k|        }
 1707|   330k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|   330k|        on_visit_scan_arg(
 1710|   330k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|   330k|                                           get_ctx().locale()},
 1712|   330k|            arg);
 1713|   330k|        return parse_ctx.begin();
 1714|   338k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIcEERS6_:
 1389|   355k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|   355k|    {
 1391|   355k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1650|   330k|    {
 1651|   330k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 330k]
  |  Branch (1651:13): [True: 0, False: 330k]
  |  Branch (1651:29): [True: 0, False: 330k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|   330k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|   330k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|   330k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   330k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 49.5k, False: 281k]
  |  |  ------------------
  ------------------
 1658|  49.5k|            on_error(r.error());
 1659|  49.5k|        }
 1660|   281k|        else {
 1661|   281k|            get_ctx().advance_to(*r);
 1662|   281k|        }
 1663|   330k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 1748|   418k|{
 1749|   418k|    const auto argcount = args.size();
 1750|   418k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1750:9): [True: 63.6k, False: 354k]
  |  Branch (1750:60): [True: 63.6k, False: 0]
  ------------------
 1751|  63.6k|        auto arg = args.get(0);
 1752|  63.6k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  934|  63.6k|    static_cast<    \
  |  |  935|  63.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1753|  63.6k|    }
 1754|       |
 1755|   354k|    auto handler = format_handler<true, CharT>{
 1756|   354k|        ranges::subrange<const CharT*>{source.data(),
 1757|   354k|                                       source.data() + source.size()},
 1758|   354k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   354k|    static_cast<    \
  |  |  935|   354k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   354k|    static_cast<    \
  |  |  935|   354k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1759|   354k|    return vscan_parse_format_string(format, handler);
 1760|   418k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1329|  95.4k|{
 1330|  95.4k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  95.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 95.4k]
  |  |  ------------------
  ------------------
 1331|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1332|      0|                                             "Argument #0 not found");
 1333|      0|    }
 1334|       |
 1335|  95.4k|    auto reader =
 1336|  95.4k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1337|  95.4k|            ranges::subrange<const CharT*>{source.data(),
 1338|  95.4k|                                           source.data() + source.size()},
 1339|  95.4k|            SCN_MOVE(args), loc};
  ------------------
  |  |  934|  95.4k|    static_cast<    \
  |  |  935|  95.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1340|  95.4k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|  95.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  95.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  95.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  95.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12.3k, False: 83.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  12.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  12.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  12.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  12.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  12.3k|    }                                                  \
  |  |  |  | 3939|  95.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  83.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1341|  83.0k|    return ranges::distance(source.data(), it);
 1342|  95.4k|}
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIcEEEENS0_13scan_expectedIlEERT_S7_:
 1848|   449k|{
 1849|   449k|    if (SCN_LIKELY(result)) {
  ------------------
  |  |  864|   449k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 362k, False: 86.6k]
  |  |  ------------------
  ------------------
 1850|   362k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  |  865|   362k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 362k]
  |  |  ------------------
  ------------------
 1851|      0|            return detail::unexpected_scan_error(
 1852|      0|                scan_error::invalid_source_state,
 1853|      0|                "Failed to sync with underlying source");
 1854|      0|        }
 1855|   362k|    }
 1856|  86.6k|    else {
 1857|  86.6k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  |  865|  86.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 86.6k]
  |  |  ------------------
  ------------------
 1858|      0|            return detail::unexpected_scan_error(
 1859|      0|                scan_error::invalid_source_state,
 1860|      0|                "Failed to sync with underlying source");
 1861|      0|        }
 1862|  86.6k|    }
 1863|   449k|    return result;
 1864|   449k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 1748|   173k|{
 1749|   173k|    const auto argcount = args.size();
 1750|   173k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1750:9): [True: 16.9k, False: 156k]
  |  Branch (1750:60): [True: 16.9k, False: 0]
  ------------------
 1751|  16.9k|        auto arg = args.get(0);
 1752|  16.9k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  934|  16.9k|    static_cast<    \
  |  |  935|  16.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1753|  16.9k|    }
 1754|       |
 1755|   156k|    auto handler = format_handler<true, CharT>{
 1756|   156k|        ranges::subrange<const CharT*>{source.data(),
 1757|   156k|                                       source.data() + source.size()},
 1758|   156k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   156k|    static_cast<    \
  |  |  935|   156k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   156k|    static_cast<    \
  |  |  935|   156k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1759|   156k|    return vscan_parse_format_string(format, handler);
 1760|   173k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1316|   346k|{
 1317|   346k|    if (format.size() != 2) {
  ------------------
  |  Branch (1317:9): [True: 313k, False: 33.9k]
  ------------------
 1318|   313k|        return false;
 1319|   313k|    }
 1320|  33.9k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1320:12): [True: 33.9k, False: 0]
  |  Branch (1320:39): [True: 33.9k, False: 0]
  ------------------
 1321|   346k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1329|  25.4k|{
 1330|  25.4k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  25.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 25.4k]
  |  |  ------------------
  ------------------
 1331|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1332|      0|                                             "Argument #0 not found");
 1333|      0|    }
 1334|       |
 1335|  25.4k|    auto reader =
 1336|  25.4k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1337|  25.4k|            ranges::subrange<const CharT*>{source.data(),
 1338|  25.4k|                                           source.data() + source.size()},
 1339|  25.4k|            SCN_MOVE(args), loc};
  ------------------
  |  |  934|  25.4k|    static_cast<    \
  |  |  935|  25.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1340|  25.4k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|  25.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  25.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  25.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  25.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 24.7k, False: 690]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  24.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  24.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  24.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  24.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  24.7k|    }                                                  \
  |  |  |  | 3939|  25.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    690|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1341|    690|    return ranges::distance(source.data(), it);
 1342|  25.4k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSL_10locale_refEm:
 1592|   156k|        : format_handler_base{argcount},
 1593|   156k|          parse_ctx{source_tag<Source&&>, format},
 1594|   156k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|   156k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   156k|    static_cast<    \
  |  |  935|   156k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   156k|    static_cast<    \
  |  |  935|   156k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|   156k|    {
 1596|   156k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSD_10locale_refE:
 1543|   156k|        : contiguous_ctx(source, args, loc)
 1544|   156k|    {
 1545|   156k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|   156k|{
 1734|   156k|    const auto beg = handler.get_ctx().begin();
 1735|   156k|    detail::parse_format_string<false>(format, handler);
 1736|   156k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 148k, False: 7.90k]
  |  |  ------------------
  ------------------
 1737|   148k|        return unexpected(err.error());
 1738|   148k|    }
 1739|  7.90k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|   156k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 1717|   699k|    {
 1718|   699k|        return ctx.get();
 1719|   699k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1548|   699k|    {
 1549|   699k|        return contiguous_ctx;
 1550|   699k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1599|   164k|    {
 1600|   164k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 164k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|   164k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEmNS1_14format_handlerILb1EwEEEEDaRT_T0_RT1_:
 1371|   156k|{
 1372|   156k|    auto arg = ctx.arg(id);
 1373|   156k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 156k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|   156k|    return arg;
 1377|   156k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1639|   156k|    {
 1640|   156k|        return parse_ctx.next_arg_id();
 1641|   156k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1679|   156k|    {
 1680|   156k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|   156k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|   156k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 156k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|   156k|        auto specs = detail::format_specs{};
 1693|   156k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|   156k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|   156k|            detail::get_arg_type(arg)};
 1696|       |
 1697|   156k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|   156k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 156k]
  |  Branch (1698:29): [True: 33.0k, False: 123k]
  ------------------
 1699|  33.0k|            SCN_UNLIKELY_ATTR
 1700|  33.0k|            on_error({scan_error::invalid_format_string,
 1701|  33.0k|                      "Missing '}' in format string"});
 1702|  33.0k|            return parse_ctx.begin();
 1703|  33.0k|        }
 1704|   123k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|   123k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 16.5k, False: 106k]
  |  |  ------------------
  ------------------
 1705|  16.5k|            return parse_ctx.begin();
 1706|  16.5k|        }
 1707|   106k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|   106k|        on_visit_scan_arg(
 1710|   106k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|   106k|                                           get_ctx().locale()},
 1712|   106k|            arg);
 1713|   106k|        return parse_ctx.begin();
 1714|   123k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERSB_:
 1389|   156k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|   156k|    {
 1391|   156k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEwEEEE:
 1650|   106k|    {
 1651|   106k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 106k]
  |  Branch (1651:13): [True: 0, False: 106k]
  |  Branch (1651:29): [True: 0, False: 106k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|   106k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|   106k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|   106k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 99.0k, False: 7.90k]
  |  |  ------------------
  ------------------
 1658|  99.0k|            on_error(r.error());
 1659|  99.0k|        }
 1660|  7.90k|        else {
 1661|  7.90k|            get_ctx().advance_to(*r);
 1662|  7.90k|        }
 1663|   106k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 1768|   173k|{
 1769|   173k|    const auto argcount = args.size();
 1770|   173k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1770:9): [True: 16.9k, False: 156k]
  |  Branch (1770:60): [True: 16.9k, False: 0]
  ------------------
 1771|  16.9k|        auto arg = args.get(0);
 1772|  16.9k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  934|  16.9k|    static_cast<    \
  |  |  935|  16.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1773|  16.9k|    }
 1774|       |
 1775|   156k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (1775:9): [True: 0, False: 156k]
  ------------------
 1776|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 1777|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1778|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1779|      0|        return vscan_parse_format_string(format, handler);
 1780|      0|    }
 1781|       |
 1782|   156k|    SCN_UNLIKELY_ATTR
 1783|   156k|    {
 1784|   156k|        auto handler = format_handler<false, CharT>{
 1785|   156k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   156k|    static_cast<    \
  |  |  935|   156k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   156k|    static_cast<    \
  |  |  935|   156k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1786|   156k|        return vscan_parse_format_string(format, handler);
 1787|   156k|    }
 1788|   156k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 1349|  25.4k|{
 1350|  25.4k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  25.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 25.4k]
  |  |  ------------------
  ------------------
 1351|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1352|      0|                                             "Argument #0 not found");
 1353|      0|    }
 1354|       |
 1355|  25.4k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  864|  25.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 25.4k]
  |  |  ------------------
  ------------------
 1356|      0|        auto reader = impl::default_arg_reader<
 1357|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1358|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1359|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1360|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1361|      0|    }
 1362|       |
 1363|  25.4k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 1364|  25.4k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  934|  25.4k|    static_cast<    \
  |  |  935|  25.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1365|  25.4k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|  25.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  25.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  25.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  25.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 24.7k, False: 690]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  24.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  24.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  24.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  24.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  24.7k|    }                                                  \
  |  |  |  | 3939|  25.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    690|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1366|    690|    return it.position();
 1367|  25.4k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEwEEEENS5_10locale_refEm:
 1592|   156k|        : format_handler_base{argcount},
 1593|   156k|          parse_ctx{source_tag<Source&&>, format},
 1594|   156k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|   156k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   156k|    static_cast<    \
  |  |  935|   156k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   156k|    static_cast<    \
  |  |  935|   156k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|   156k|    {
 1596|   156k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEwEEEENS4_10locale_refE:
 1519|   156k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  934|   156k|    static_cast<    \
  |  |  935|   156k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1520|   156k|    {
 1521|   156k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|   156k|{
 1734|   156k|    const auto beg = handler.get_ctx().begin();
 1735|   156k|    detail::parse_format_string<false>(format, handler);
 1736|   156k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 148k, False: 7.90k]
  |  |  ------------------
  ------------------
 1737|   148k|        return unexpected(err.error());
 1738|   148k|    }
 1739|  7.90k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|   156k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 1717|   699k|    {
 1718|   699k|        return ctx.get();
 1719|   699k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1524|   699k|    {
 1525|   699k|        return ctx;
 1526|   699k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1599|   164k|    {
 1600|   164k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 164k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|   164k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEmNS1_14format_handlerILb0EwEEEEDaRT_T0_RT1_:
 1371|   156k|{
 1372|   156k|    auto arg = ctx.arg(id);
 1373|   156k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 156k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|   156k|    return arg;
 1377|   156k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1639|   156k|    {
 1640|   156k|        return parse_ctx.next_arg_id();
 1641|   156k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1679|   156k|    {
 1680|   156k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|   156k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|   156k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 156k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|   156k|        auto specs = detail::format_specs{};
 1693|   156k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|   156k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|   156k|            detail::get_arg_type(arg)};
 1696|       |
 1697|   156k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|   156k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 156k]
  |  Branch (1698:29): [True: 33.0k, False: 123k]
  ------------------
 1699|  33.0k|            SCN_UNLIKELY_ATTR
 1700|  33.0k|            on_error({scan_error::invalid_format_string,
 1701|  33.0k|                      "Missing '}' in format string"});
 1702|  33.0k|            return parse_ctx.begin();
 1703|  33.0k|        }
 1704|   123k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|   123k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 16.5k, False: 106k]
  |  |  ------------------
  ------------------
 1705|  16.5k|            return parse_ctx.begin();
 1706|  16.5k|        }
 1707|   106k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|   106k|        on_visit_scan_arg(
 1710|   106k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|   106k|                                           get_ctx().locale()},
 1712|   106k|            arg);
 1713|   106k|        return parse_ctx.begin();
 1714|   123k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIwEERS6_:
 1389|   156k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|   156k|    {
 1391|   156k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1650|   106k|    {
 1651|   106k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 106k]
  |  Branch (1651:13): [True: 0, False: 106k]
  |  Branch (1651:29): [True: 0, False: 106k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|   106k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|   106k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|   106k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 99.0k, False: 7.90k]
  |  |  ------------------
  ------------------
 1658|  99.0k|            on_error(r.error());
 1659|  99.0k|        }
 1660|  7.90k|        else {
 1661|  7.90k|            get_ctx().advance_to(*r);
 1662|  7.90k|        }
 1663|   106k|    }
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIwEEEENS0_13scan_expectedIlEERT_S7_:
 1848|   181k|{
 1849|   181k|    if (SCN_LIKELY(result)) {
  ------------------
  |  |  864|   181k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 8.59k, False: 173k]
  |  |  ------------------
  ------------------
 1850|  8.59k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  |  865|  8.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 8.59k]
  |  |  ------------------
  ------------------
 1851|      0|            return detail::unexpected_scan_error(
 1852|      0|                scan_error::invalid_source_state,
 1853|      0|                "Failed to sync with underlying source");
 1854|      0|        }
 1855|  8.59k|    }
 1856|   173k|    else {
 1857|   173k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  |  865|   173k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 173k]
  |  |  ------------------
  ------------------
 1858|      0|            return detail::unexpected_scan_error(
 1859|      0|                scan_error::invalid_source_state,
 1860|      0|                "Failed to sync with underlying source");
 1861|      0|        }
 1862|   173k|    }
 1863|   181k|    return result;
 1864|   181k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 1794|  31.8k|{
 1795|  31.8k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  31.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|  31.8k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 1794|  31.3k|{
 1795|  31.3k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  31.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|  31.3k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 1794|  8.48k|{
 1795|  8.48k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  8.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|  8.48k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 1794|  8.48k|{
 1795|  8.48k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  8.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|  8.48k|}

_ZN3scn2v44impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1461|    688|{
 1462|    688|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1463|       |
 1464|    688|    if constexpr (sizeof(SourceCharT) == 1) {
 1465|       |        if constexpr (sizeof(DestCharT) == 2) {
 1466|       |            std::u32string tmp;
 1467|       |            transcode_to_string_impl_to32(src, tmp);
 1468|       |            return transcode_to_string_impl_32to16<false>(
 1469|       |                std::u32string_view{tmp}, dest);
 1470|       |        }
 1471|    688|        else if constexpr (sizeof(DestCharT) == 4) {
 1472|    688|            return transcode_to_string_impl_to32(src, dest);
 1473|    688|        }
 1474|       |    }
 1475|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1476|       |        if constexpr (sizeof(DestCharT) == 1) {
 1477|       |            std::u32string tmp;
 1478|       |            transcode_to_string_impl_to32(src, tmp);
 1479|       |            return transcode_to_string_impl_32to8<false>(
 1480|       |                std::u32string_view{tmp}, dest);
 1481|       |        }
 1482|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1483|       |            return trasncode_to_string_impl_to32(src, dest);
 1484|       |        }
 1485|       |    }
 1486|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1487|       |        if constexpr (sizeof(DestCharT) == 1) {
 1488|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1489|       |        }
 1490|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1491|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1492|       |        }
 1493|       |    }
 1494|       |
 1495|    688|    SCN_EXPECT(false);
  ------------------
  |  |  930|    688|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    688|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1497|    688|}
_ZN3scn2v44impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1354|    688|{
 1355|    688|    static_assert(sizeof(DestCharT) == 4);
 1356|       |
 1357|    688|    auto it = src.begin();
 1358|  46.2k|    while (it != src.end()) {
  ------------------
  |  Branch (1358:12): [True: 45.5k, False: 688]
  ------------------
 1359|  45.5k|        auto res = get_next_code_point(
 1360|  45.5k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1361|  45.5k|                                                                 src.end()));
 1362|  45.5k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  865|  45.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 486, False: 45.0k]
  |  |  ------------------
  ------------------
 1363|    486|            dest.push_back(DestCharT{0xfffd});
 1364|    486|        }
 1365|  45.0k|        else {
 1366|  45.0k|            dest.push_back(res.value);
 1367|  45.0k|        }
 1368|  45.5k|        it = detail::make_string_view_iterator(src, res.iterator);
 1369|  45.5k|    }
 1370|    688|}
_ZN3scn2v44impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1278|  76.8k|{
 1279|  76.8k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  930|  76.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  76.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1280|       |
 1281|  76.8k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1282|  76.8k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  76.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.50k, False: 74.3k]
  |  |  ------------------
  ------------------
 1283|  2.50k|        return {get_start_for_next_code_point(input),
 1284|  2.50k|                detail::invalid_code_point};
 1285|  2.50k|    }
 1286|  74.3k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  865|  74.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.06k, False: 72.3k]
  |  |  ------------------
  ------------------
 1287|  2.06k|        return {input.end(), detail::invalid_code_point};
 1288|  2.06k|    }
 1289|       |
 1290|  72.3k|    return {input.begin() + len,
 1291|  72.3k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1292|  74.3k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1264|  2.50k|{
 1265|  2.50k|    auto it = input.begin();
 1266|  10.2k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 9.05k, False: 1.23k]
  ------------------
 1267|  9.05k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 1.27k, False: 7.78k]
  ------------------
 1268|  1.27k|            break;
 1269|  1.27k|        }
 1270|  9.05k|    }
 1271|  2.50k|    return it;
 1272|  2.50k|}
_ZN3scn2v44impl11parse_errorC2ENS2_4codeE:
  807|  3.72M|    constexpr parse_error(code c) : m_code(c)
  808|  3.72M|    {
  809|  3.72M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  915|  3.72M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  3.72M|    }
_ZN3scn2v44impleqENS1_11parse_errorES2_:
  822|  1.36M|    {
  823|  1.36M|        return a.m_code == b.m_code;
  824|  1.36M|    }
_ZN3scn2v44implneENS1_11parse_errorES2_:
  826|   133k|    {
  827|   133k|        return !(a == b);
  828|   133k|    }
_ZNK3scn2v44impl20reader_error_handlercvbEv:
 3050|   874k|    {
 3051|   874k|        return m_msg == nullptr;
 3052|   874k|    }
_ZN3scn2v44impl14is_ascii_spaceEc:
  457|   860k|{
  458|   860k|    return is_ascii_space_lookup[static_cast<size_t>(
  459|   860k|        static_cast<unsigned char>(ch))];
  460|   860k|}
_ZN3scn2v44impl16has_byte_greaterEmh:
  538|   516k|{
  539|   516k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|   516k|}
_ZN3scn2v44implntENS1_9eof_errorE:
  783|  3.14M|{
  784|  3.14M|    return e != eof_error::good;
  785|  3.14M|}
_ZN3scn2v44impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  26.7k|{
  798|  26.7k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  930|  26.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  26.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  26.7k|    return scan_error{scan_error::end_of_input, "EOF"};
  800|  26.7k|}
_ZN3scn2v44impl20make_eof_parse_errorENS1_9eof_errorE:
  844|  61.7k|{
  845|  61.7k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  930|  61.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  61.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|  61.7k|    return parse_error::eof;
  847|  61.7k|}
_ZN3scn2v44impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|   133k|{
  854|   133k|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 133k]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|   133k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 0, False: 133k]
  ------------------
  859|      0|        return detail::unexpected_scan_error(scan_error::end_of_input, "EOF");
  860|      0|    }
  861|       |
  862|   133k|    return detail::unexpected_scan_error(code, msg);
  863|   133k|}
_ZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|   417k|{
  868|   417k|    return [code, msg](parse_error err) {
  869|   417k|        assert(err != parse_error::good);
  870|   417k|        return make_scan_error_from_parse_error(err, code, msg).error();
  871|   417k|    };
  872|   417k|}
_ZN3scn2v44impl17fast_streq_nocaseEPKcS3_m:
 2319|   325k|{
 2320|   325k|    unsigned char running_diff{0};
 2321|   977k|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2321:24): [True: 651k, False: 325k]
  ------------------
 2322|   651k|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2323|   651k|    }
 2324|   325k|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2324:12): [True: 2.13k, False: 323k]
  |  Branch (2324:33): [True: 462, False: 323k]
  ------------------
 2325|   325k|}
_ZN3scn2v44impl11char_to_intEc:
 3239|  5.25M|{
 3240|  5.25M|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3241|  5.25M|}
_ZN3scn2v44impl11char_to_intEw:
 3243|   723k|{
 3244|   723k|#if WCHAR_MIN < 0
 3245|   723k|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3245:9): [True: 698k, False: 25.0k]
  |  Branch (3245:20): [True: 478k, False: 220k]
  ------------------
 3246|       |#else
 3247|       |    if (ch <= 255) {
 3248|       |#endif
 3249|   478k|        return char_to_int(static_cast<char>(ch));
 3250|   478k|    }
 3251|   245k|    return 255;
 3252|   723k|}
_ZN3scn2v44impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6046|   577k|{
 6047|   577k|    if (specs.width != 0) {
  ------------------
  |  Branch (6047:9): [True: 0, False: 577k]
  ------------------
 6048|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6048:13): [True: 0, False: 0]
  ------------------
 6049|      0|            return detail::unexpected_scan_error(
 6050|      0|                scan_error::length_too_short,
 6051|      0|                "Scanned value too narrow, width did not exceed what "
 6052|      0|                "was specified in the format string");
 6053|      0|        }
 6054|      0|    }
 6055|   577k|    if (specs.precision != 0) {
  ------------------
  |  Branch (6055:9): [True: 0, False: 577k]
  ------------------
 6056|       |        // Ensured by take_width_view
 6057|      0|        SCN_ENSURE(prefix_width + value_width + postfix_width <=
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6058|      0|                   specs.precision);
 6059|      0|    }
 6060|   577k|    return {};
 6061|   577k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  1.42M|    {
  304|  1.42M|        ranges::advance(x, n);
  305|  1.42M|        return x;
  306|  1.42M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  1.42M|    {
  268|  1.42M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.42M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  1.42M|    {
  151|  1.42M|        i += n;
  152|  1.42M|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  2.18M|    {
  108|  2.18M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  2.18M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  2.18M|    {
   87|  2.18M|        return s - i;
   88|  2.18M|    }
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|   106k|    {
  304|   106k|        ranges::advance(x, n);
  305|   106k|        return x;
  306|   106k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|   106k|    {
  268|   106k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   106k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   106k|    {
  151|   106k|        i += n;
  152|   106k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  33.8M|    {
  108|  33.8M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  33.8M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  33.8M|    {
   87|  33.8M|        return s - i;
   88|  33.8M|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5beginEv:
 2992|   965k|    {
 2993|   965k|        return m_current;
 2994|   965k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5beginEv:
 2992|   271k|    {
 2993|   271k|        return m_current;
 2994|   271k|    }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  981|   424k|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|       |                  ranges::sized_range<Range>) {
  984|       |        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|   424k|                               detail::char_t<Range>>::forward_iterator>) {
  990|   424k|        auto beg = r.begin();
  991|   424k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (991:13): [True: 424k, False: 0]
  ------------------
  992|   424k|            return false;
  993|   424k|        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|      0|        else {
  999|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (999:17): [True: 0, False: 0]
  ------------------
 1000|      0|                return beg.contiguous_segment().end() ==
 1001|      0|                       beg.parent()->current_view().end();
 1002|      0|            }
 1003|      0|            return true;
 1004|      0|        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|   424k|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1955|   336k|{
 1956|   336k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|   336k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   336k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|   336k|    else {
 1967|   336k|        auto it = range.begin();
 1968|   336k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 301k, False: 35.8k]
  ------------------
 1969|   301k|            return ranges::next(it, count);
 1970|   301k|        }
 1971|       |
 1972|  94.9k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 70.5k, False: 24.4k]
  ------------------
 1973|  70.5k|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 11.4k, False: 59.1k]
  ------------------
 1974|  11.4k|                return unexpected(eof_error::eof);
 1975|  11.4k|            }
 1976|  70.5k|        }
 1977|       |
 1978|  24.4k|        return it;
 1979|  35.8k|    }
 1980|   336k|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1095|   336k|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|   336k|                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|   336k|        else {
 1107|   336k|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1107:17): [True: 336k, False: 0]
  ------------------
 1108|   336k|                return static_cast<size_t>(
 1109|   336k|                    r.begin().parent()->chars_available() -
 1110|   336k|                    r.begin().position());
 1111|   336k|            }
 1112|      0|            return r.begin().contiguous_segment().size();
 1113|   336k|        }
 1114|       |    }
 1115|       |    else {
 1116|       |        return 0;
 1117|       |    }
 1118|   336k|}
_ZNK3scn2v44impl12function_refIFbcES3_EclEc:
  762|  2.30M|    {
  763|  2.30M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  2.30M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  2.30M|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|   309k|        : m_fptr([](storage fn,
  743|   309k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   309k|              cvref<T> obj = *get<T>(fn);
  745|   309k|              if constexpr (std::is_void_v<R>) {
  746|   309k|                  obj(static_cast<decltype(args)>(args)...);
  747|   309k|              }
  748|   309k|              else {
  749|   309k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   309k|              }
  751|   309k|          }),
  752|   309k|          m_storage(std::addressof(f))
  753|   309k|    {
  754|   309k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  1.15M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.15M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.15M|              else {
  749|  1.15M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.15M|              }
  751|  1.15M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  1.15M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.15M|        else if constexpr (std::is_object_v<T>) {
  688|  1.15M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.15M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|   309k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   309k|        {
  662|   309k|        }
_ZNK3scn2v44impl12function_refIFbDiES3_EclEDi:
  762|  2.07M|    {
  763|  2.07M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  2.07M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  2.07M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|   664k|        : m_fptr([](storage fn,
  743|   664k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   664k|              cvref<T> obj = *get<T>(fn);
  745|   664k|              if constexpr (std::is_void_v<R>) {
  746|   664k|                  obj(static_cast<decltype(args)>(args)...);
  747|   664k|              }
  748|   664k|              else {
  749|   664k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   664k|              }
  751|   664k|          }),
  752|   664k|          m_storage(std::addressof(f))
  753|   664k|    {
  754|   664k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|  1.03M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.03M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.03M|              else {
  749|  1.03M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.03M|              }
  751|  1.03M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  1.03M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.03M|        else if constexpr (std::is_object_v<T>) {
  688|  1.03M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.03M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|   664k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   664k|        {
  662|   664k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 6074|   330k|    {
 6075|   330k|        const bool need_skipped_width =
 6076|   330k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6076:13): [True: 0, False: 330k]
  |  Branch (6076:33): [True: 0, False: 330k]
  ------------------
 6077|   330k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6078|       |
 6079|       |        // Read prefix
 6080|   330k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6080:13): [True: 0, False: 330k]
  ------------------
 6081|   330k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6081:13): [True: 0, False: 330k]
  ------------------
 6082|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6083|      0|                             need_skipped_width);
 6084|      0|        }
 6085|   330k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6085:13): [True: 330k, False: 0]
  |  Branch (6085:56): [True: 330k, False: 0]
  ------------------
 6086|       |            // Default alignment:
 6087|       |            // Skip preceding whitespace, if required by the reader
 6088|   330k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6088:17): [True: 0, False: 330k]
  ------------------
 6089|      0|                auto max_width_view = take_width(rng, specs.precision);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6093|      0|            }
 6094|   651k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|   330k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   330k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   330k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   330k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 9.70k, False: 320k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  9.70k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  9.70k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  9.70k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  9.70k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  9.70k|    }                                                  \
  |  |  |  | 3939|   330k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   320k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|   651k|                            make_eof_scan_error));
 6096|       |
 6097|   651k|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 320k]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|   320k|            return result_type{it, 0};
 6105|   651k|        }
 6106|       |
 6107|      0|        return result_type{rng.begin(), 0};
 6108|   330k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|   309k|{
 2075|   309k|    return read_until_code_unit(range, std::not_fn(pred));
 2076|   309k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2055|   309k|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|   309k|    else {
 2060|   309k|        auto first = range.begin();
 2061|  1.16M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 1.15M, False: 9.05k]
  ------------------
 2062|  1.15M|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 300k, False: 852k]
  ------------------
 2063|   300k|                return first;
 2064|   300k|            }
 2065|  1.15M|        }
 2066|  9.05k|        return first;
 2067|   309k|    }
 2068|   309k|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   312k|    {
  108|   312k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   312k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   312k|    {
   94|   312k|        iter_difference_t<I> counter{0};
   95|  4.03M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 3.72M, False: 312k]
  ------------------
   96|  3.72M|            ++i;
   97|  3.72M|            ++counter;
   98|  3.72M|        }
   99|   312k|        return counter;
  100|   312k|    }
_ZZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|   133k|    return [code, msg](parse_error err) {
  869|   133k|        assert(err != parse_error::good);
  870|   133k|        return make_scan_error_from_parse_error(err, code, msg).error();
  871|   133k|    };
_ZN3scn2v44impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1878|   121k|    {
 1879|   121k|        auto stdloc = loc.get<std::locale>();
 1880|   121k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1881|   121k|        grouping = numpunct.grouping();
 1882|   121k|        thousands_sep =
 1883|   121k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1883:13): [True: 0, False: 121k]
  ------------------
 1884|   121k|        decimal_point = numpunct.decimal_point();
 1885|   121k|    }
_ZN3scn2v44impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1815|   121k|{
 1816|   121k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1816:9): [True: 121k, False: 0]
  ------------------
 1817|   121k|        return std::use_facet<Facet>(stdloc);
 1818|   121k|    }
 1819|      0|    stdloc = std::locale(stdloc, new Facet{});
 1820|      0|    return std::use_facet<Facet>(stdloc);
 1821|   121k|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1944|   520k|{
 1945|   520k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   520k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 360, False: 520k]
  |  |  ------------------
  ------------------
 1946|    360|        return unexpected(e);
 1947|    360|    }
 1948|       |
 1949|   520k|    return ranges::next(range.begin());
 1950|   520k|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|  1.03M|{
  951|  1.03M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.3k, False: 1.02M]
  |  |  ------------------
  ------------------
  952|  12.3k|        return eof_error::eof;
  953|  12.3k|    }
  954|  1.02M|    return eof_error::good;
  955|  1.03M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|  1.81M|{
  945|  1.81M|    return is_range_eof(r.begin(), r.end());
  946|  1.81M|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|  1.81M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  1.81M|    {
  938|  1.81M|        return begin == end;
  939|  1.81M|    }
  940|  1.81M|}
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|   520k|    {
  296|   520k|        ++x;
  297|   520k|        return x;
  298|   520k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3589|  51.7k|    {
 3590|  51.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  51.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  51.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  51.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  51.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 51.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  51.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  51.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  51.7k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  51.7k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 7.65k, False: 44.0k]
  ------------------
 3594|       |            if constexpr (!std::is_signed_v<T>) {
 3595|       |                return detail::unexpected_scan_error(
 3596|       |                    scan_error::invalid_scanned_value,
 3597|       |                    "Unexpected '-' sign when parsing an "
 3598|       |                    "unsigned value");
 3599|       |            }
 3600|  7.65k|            else {
 3601|  7.65k|                if (specs.type ==
  ------------------
  |  Branch (3601:21): [True: 0, False: 7.65k]
  ------------------
 3602|  7.65k|                    detail::presentation_type::int_unsigned_decimal) {
 3603|      0|                    return detail::unexpected_scan_error(
 3604|      0|                        scan_error::invalid_scanned_value,
 3605|      0|                        "'u'-option disallows negative values");
 3606|      0|                }
 3607|  7.65k|            }
 3608|  7.65k|        }
 3609|       |
 3610|  51.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 5.21k, False: 46.5k]
  ------------------
 3611|  5.21k|            value = T{0};
 3612|  5.21k|            return std::next(prefix_result.iterator);
 3613|  5.21k|        }
 3614|       |
 3615|  46.5k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  46.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 36.1k, False: 10.3k]
  |  |  ------------------
  ------------------
 3616|  36.1k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  36.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  36.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  36.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  36.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.05k, False: 32.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.05k|    }                                                  \
  |  |  |  | 3939|  36.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  32.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|  32.1k|                    parse_integer_digits_without_thsep(
 3618|  32.1k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|  32.1k|                        prefix_result.parsed_base));
 3620|       |
 3621|  32.1k|            auto buf = make_contiguous_buffer(
 3622|  32.1k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|  32.1k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  32.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  32.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  32.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  32.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.68k, False: 30.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.68k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.68k|    }                                                  \
  |  |  |  | 3939|  32.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  30.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|  30.4k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|  30.4k|                                        prefix_result.parsed_base));
 3626|       |
 3627|  30.4k|            return ranges::next(
 3628|  30.4k|                prefix_result.iterator,
 3629|  30.4k|                ranges::distance(buf.view().begin(), result_it));
 3630|  32.1k|        }
 3631|       |
 3632|  10.3k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  10.3k|            localized_number_formatting_options<CharT>{loc};
 3637|  10.3k|#endif
 3638|       |
 3639|  10.3k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  10.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  10.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  10.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  10.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 588, False: 9.77k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    588|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    588|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    588|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    588|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    588|    }                                                  \
  |  |  |  | 3939|  10.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  9.77k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  9.77k|                parse_integer_digits_with_thsep(
 3641|  9.77k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  9.77k|                    prefix_result.parsed_base, locale_options));
 3643|  9.77k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  9.77k|            parse_digits_result;
 3645|       |
 3646|  9.77k|        auto nothsep_source_view =
 3647|  9.77k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  9.77k|        SCN_TRY(
  ------------------
  |  | 3940|  9.77k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  9.77k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  9.77k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  9.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 434, False: 9.33k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    434|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    434|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    434|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    434|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    434|    }                                                  \
  |  |  |  | 3939|  9.77k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  9.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  9.33k|            nothsep_source_it,
 3650|  9.33k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  9.33k|                                prefix_result.parsed_base));
 3652|       |
 3653|  9.33k|        return ranges::next(
 3654|  9.33k|            prefix_result.iterator,
 3655|  9.33k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  9.33k|                ranges::ssize(thsep_indices));
 3657|  9.77k|    }
_ZN3scn2v44impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESH_i:
 3376|   412k|{
 3377|   412k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3940|   412k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   412k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   412k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   412k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 412k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   412k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   412k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3378|   412k|    auto [base_prefix_begin_it, sign] = sign_result;
 3379|       |
 3380|   412k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3381|   412k|        parse_integer_base_prefix(
 3382|   412k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3383|       |
 3384|   412k|    if (parsed_zero) {
  ------------------
  |  Branch (3384:9): [True: 41.8k, False: 370k]
  ------------------
 3385|  41.8k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3385:13): [True: 478, False: 41.3k]
  ------------------
 3386|  41.8k|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3386:13): [True: 30.7k, False: 10.6k]
  ------------------
 3387|  31.2k|            digits_begin_it = base_prefix_begin_it;
 3388|  31.2k|        }
 3389|  10.6k|        else {
 3390|  10.6k|            parsed_zero = false;
 3391|  10.6k|        }
 3392|  41.8k|    }
 3393|   370k|    else {
 3394|   370k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3394:13): [True: 2.15k, False: 368k]
  ------------------
 3395|   370k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3395:13): [True: 33.8k, False: 334k]
  ------------------
 3396|  35.9k|            digits_begin_it = base_prefix_begin_it;
 3397|  35.9k|        }
 3398|   370k|    }
 3399|       |
 3400|   412k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3400:9): [True: 358k, False: 54.5k]
  ------------------
 3401|   358k|        sign = sign_type::plus_sign;
 3402|   358k|    }
 3403|   412k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3404|   412k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3405|   412k|}
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3257|   412k|{
 3258|   412k|    auto r = read_one_of_code_unit(range, "+-");
 3259|   412k|    if (!r) {
  ------------------
  |  Branch (3259:9): [True: 358k, False: 54.5k]
  ------------------
 3260|   358k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3260:13): [True: 358k, False: 0]
  ------------------
 3261|   358k|            return std::pair{range.begin(), sign_type::default_sign};
 3262|   358k|        }
 3263|      0|        return unexpected(eof_error::eof);
 3264|   358k|    }
 3265|       |
 3266|  54.5k|    auto& it = *r;
 3267|  54.5k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3267:9): [True: 42.0k, False: 12.4k]
  ------------------
 3268|  42.0k|        return std::pair{it, sign_type::minus_sign};
 3269|  42.0k|    }
 3270|  12.4k|    return std::pair{it, sign_type::plus_sign};
 3271|  54.5k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2371|   412k|{
 2372|   412k|    auto it = read_code_unit(range);
 2373|   412k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|   412k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 412k]
  |  |  ------------------
  ------------------
 2374|      0|        return unexpected(make_eof_parse_error(it.error()));
 2375|      0|    }
 2376|       |
 2377|   812k|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 812k, False: 358k]
  ------------------
 2378|   812k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 54.5k, False: 758k]
  ------------------
 2379|  54.5k|            return *it;
 2380|  54.5k|        }
 2381|   812k|    }
 2382|       |
 2383|   358k|    return unexpected(parse_error::error);
 2384|   412k|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEEibEEESG_i:
 3343|   412k|{
 3344|   412k|    switch (base) {
 3345|  21.7k|        case 2:
  ------------------
  |  Branch (3345:9): [True: 21.7k, False: 390k]
  ------------------
 3346|       |            // allow 0b/0B
 3347|  21.7k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3348|  21.7k|                    false};
 3349|       |
 3350|  38.7k|        case 8: {
  ------------------
  |  Branch (3350:9): [True: 38.7k, False: 373k]
  ------------------
 3351|       |            // allow 0o/0O/0
 3352|  38.7k|            bool zero_parsed = false;
 3353|  38.7k|            auto it = apply_opt(
 3354|  38.7k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3355|  38.7k|            return {it, 8, zero_parsed};
 3356|      0|        }
 3357|       |
 3358|  65.3k|        case 16:
  ------------------
  |  Branch (3358:9): [True: 65.3k, False: 347k]
  ------------------
 3359|       |            // allow 0x/0X
 3360|  65.3k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3361|  65.3k|                    false};
 3362|       |
 3363|  70.8k|        case 0:
  ------------------
  |  Branch (3363:9): [True: 70.8k, False: 341k]
  ------------------
 3364|       |            // detect base
 3365|  70.8k|            return parse_integer_base_prefix_for_detection(range);
 3366|       |
 3367|   216k|        default:
  ------------------
  |  Branch (3367:9): [True: 216k, False: 196k]
  ------------------
 3368|       |            // no base prefix allowed
 3369|   216k|            return {range.begin(), base, false};
 3370|   412k|    }
 3371|   412k|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEENS1_14parse_expectedESA_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEE4typeEOSI_SK_:
 2390|   125k|{
 2391|   125k|    if (!result) {
  ------------------
  |  Branch (2391:9): [True: 108k, False: 17.4k]
  ------------------
 2392|   108k|        return range.begin();
 2393|   108k|    }
 2394|  17.4k|    return *result;
 2395|   125k|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 3294|  92.0k|{
 3295|  92.0k|    return read_matching_string_classic_nocase(range, "0b");
 3296|  92.0k|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2330|   336k|{
 2331|   336k|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|       |                  std::is_same_v<char_type, char>) {
 2335|       |        if (range.size() < str.size()) {
 2336|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|       |        }
 2338|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2339|       |            return unexpected(parse_error::error);
 2340|       |        }
 2341|       |        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|   336k|    else {
 2344|   336k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|   336k|            if (ch < 'A' || ch > 'Z') {
 2346|   336k|                return ch;
 2347|   336k|            }
 2348|   336k|            return static_cast<char_type>(ch +
 2349|   336k|                                          static_cast<char_type>('a' - 'A'));
 2350|   336k|        };
 2351|       |
 2352|   336k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|   336k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   336k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   336k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   336k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 11.4k, False: 325k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  11.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  11.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  11.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  11.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  11.4k|    }                                                  \
  |  |  |  | 3939|   336k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   325k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2353|   325k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|   325k|                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|   325k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  865|   325k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 322k, False: 2.59k]
  |  |  ------------------
  ------------------
 2357|   325k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|   325k|                    return ascii_tolower(a) ==
 2359|   325k|                           static_cast<detail::char_t<Range>>(b);
 2360|   325k|                }))) {
 2361|   322k|            return unexpected(parse_error::error);
 2362|   322k|        }
 2363|       |
 2364|  2.59k|        return it;
 2365|   325k|    }
 2366|   336k|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlcE_clEc:
 2344|   461k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|   461k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2345:17): [True: 447k, False: 13.6k]
  |  Branch (2345:29): [True: 7.59k, False: 6.10k]
  ------------------
 2346|   455k|                return ch;
 2347|   455k|            }
 2348|  6.10k|            return static_cast<char_type>(ch +
 2349|  6.10k|                                          static_cast<char_type>('a' - 'A'));
 2350|   461k|        };
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 3308|   108k|{
 3309|   108k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3309:14): [True: 952, False: 107k]
  ------------------
 3310|    952|        return *r;
 3311|    952|    }
 3312|       |
 3313|   107k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3313:14): [True: 41.8k, False: 65.8k]
  ------------------
 3314|  41.8k|        zero_parsed = true;
 3315|  41.8k|        return *r;
 3316|  41.8k|    }
 3317|       |
 3318|  65.8k|    return unexpected(parse_error::error);
 3319|   107k|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2245|   107k|{
 2246|   107k|    auto it = read_code_unit(range);
 2247|   107k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 360, False: 107k]
  |  |  ------------------
  ------------------
 2248|    360|        return unexpected(make_eof_parse_error(it.error()));
 2249|    360|    }
 2250|       |
 2251|   107k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 65.5k, False: 41.8k]
  |  |  ------------------
  ------------------
 2252|   107k|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|  65.5k|        return unexpected(parse_error::error);
 2254|  65.5k|    }
 2255|       |
 2256|  41.8k|    return *it;
 2257|   107k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 3301|   136k|{
 3302|   136k|    return read_matching_string_classic_nocase(range, "0x");
 3303|   136k|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEEibEEESG_:
 3324|  70.8k|{
 3325|  70.8k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3325:14): [True: 532, False: 70.3k]
  ------------------
 3326|    532|        return {*r, 16, false};
 3327|    532|    }
 3328|  70.3k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3328:14): [True: 318, False: 69.9k]
  ------------------
 3329|    318|        return {*r, 2, false};
 3330|    318|    }
 3331|  69.9k|    {
 3332|  69.9k|        bool zero_parsed{false};
 3333|  69.9k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3333:18): [True: 26.2k, False: 43.7k]
  ------------------
 3334|  26.2k|            return {*r, 8, zero_parsed};
 3335|  26.2k|        }
 3336|  69.9k|    }
 3337|  43.7k|    return {range.begin(), 10, false};
 3338|  69.9k|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_i:
 3410|   309k|{
 3411|   309k|    using char_type = detail::char_t<Range>;
 3412|       |
 3413|       |    if constexpr (ranges::contiguous_range<Range>) {
 3414|       |        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3415|       |            return detail::unexpected_scan_error(
 3416|       |                scan_error::invalid_scanned_value,
 3417|       |                "Failed to parse integer: No digits found");
 3418|       |        }
 3419|       |        return range.end();
 3420|       |    }
 3421|   309k|    else {
 3422|   309k|        return read_while1_code_unit(range,
 3423|   309k|                                     [&](char_type ch) noexcept {
 3424|   309k|                                         return char_to_int(ch) < base;
 3425|   309k|                                     })
 3426|   309k|            .transform_error(map_parse_error_to_scan_error(
 3427|   309k|                scan_error::invalid_scanned_value,
 3428|   309k|                "Failed to parse integer: No digits found"));
 3429|   309k|    }
 3430|   309k|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 2094|   309k|{
 2095|   309k|    auto it = read_while_code_unit(range, pred);
 2096|   309k|    if (it == range.begin()) {
  ------------------
  |  Branch (2096:9): [True: 28.2k, False: 281k]
  ------------------
 2097|  28.2k|        return unexpected(parse_error::error);
 2098|  28.2k|    }
 2099|   281k|    return it;
 2100|   309k|}
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlcE_SQ_TnPNSI_9enable_ifIXaaaasr6detailE11is_not_selfISK_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSS_EEvE4typeELPv0EEEOSK_:
  742|   309k|        : m_fptr([](storage fn,
  743|   309k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   309k|              cvref<T> obj = *get<T>(fn);
  745|   309k|              if constexpr (std::is_void_v<R>) {
  746|   309k|                  obj(static_cast<decltype(args)>(args)...);
  747|   309k|              }
  748|   309k|              else {
  749|   309k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   309k|              }
  751|   309k|          }),
  752|   309k|          m_storage(std::addressof(f))
  753|   309k|    {
  754|   309k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlcE_SQ_TnPNSI_9enable_ifIXaaaasr6detailE11is_not_selfISK_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSS_EEvE4typeELPv0EEEOSK_ENKUlNS1_12fnref_detail4base7storageEcE_clES11_c:
  743|  1.15M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.15M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.15M|              else {
  749|  1.15M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.15M|              }
  751|  1.15M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_iEUlcE_EEDaNS3_7storageE:
  683|  1.15M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.15M|        else if constexpr (std::is_object_v<T>) {
  688|  1.15M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.15M|    }
_ZZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_iENKUlcE_clEc:
 3423|  1.15M|                                     [&](char_type ch) noexcept {
 3424|  1.15M|                                         return char_to_int(ch) < base;
 3425|  1.15M|                                     })
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlcE_TnPNSI_9enable_ifIXsr3stdE11is_object_vISK_EEvE4typeELPv0EEEPSK_:
  660|   309k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   309k|        {
  662|   309k|        }
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENSE_12basic_stringIT0_NSE_11char_traitsISN_EENSE_9allocatorISN_EEEENSM_IcNSO_IcEENSQ_IcEEEEEEEEESH_iRKNS1_35localized_number_formatting_optionsISN_EE:
 3440|  60.6k|{
 3441|  60.6k|    std::basic_string<CharT> output;
 3442|  60.6k|    std::string thsep_indices;
 3443|  60.6k|    auto it = range.begin();
 3444|  60.6k|    bool digit_matched = false;
 3445|   326k|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3445:12): [True: 324k, False: 2.20k]
  ------------------
 3446|   324k|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3446:13): [True: 31.5k, False: 292k]
  ------------------
 3447|  31.5k|            thsep_indices.push_back(
 3448|  31.5k|                static_cast<char>(ranges::distance(range.begin(), it)));
 3449|  31.5k|        }
 3450|   292k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3450:18): [True: 58.4k, False: 234k]
  ------------------
 3451|  58.4k|            break;
 3452|  58.4k|        }
 3453|   234k|        else {
 3454|   234k|            output.push_back(*it);
 3455|   234k|            digit_matched = true;
 3456|   234k|        }
 3457|   324k|    }
 3458|  60.6k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  865|  60.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.25k, False: 57.4k]
  |  |  ------------------
  ------------------
 3459|  3.25k|        return detail::unexpected_scan_error(
 3460|  3.25k|            scan_error::invalid_scanned_value,
 3461|  3.25k|            "Failed to parse integer: No digits found");
 3462|  3.25k|    }
 3463|  57.4k|    return std::tuple{it, output, thsep_indices};
 3464|  60.6k|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_EEEEDaOT_:
 1781|   281k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|       |                  ranges::sized_range<Range>) {
 1785|       |        return string_view_wrapper{SCN_FWD(range)};
 1786|       |    }
 1787|   281k|    else {
 1788|   281k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  936|   281k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1789|   281k|    }
 1790|   281k|}
_ZN3scn2v44impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1635|   281k|    {
 1636|   281k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|   281k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1637|   281k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1719|   281k|    {
 1720|   281k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|   281k|                           ranges::common_range<Range>) {
 1737|   281k|            auto beg_seg = range.begin().contiguous_segment();
 1738|   281k|            auto end_seg = range.end().contiguous_segment();
 1739|   281k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  865|   281k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 177k, False: 103k]
  |  |  ------------------
  ------------------
 1740|   281k|                             detail::to_address(end_seg.end()))) {
 1741|   177k|                auto& str = m_storage.emplace();
 1742|   177k|                str.reserve(range.end().position() - range.begin().position());
 1743|   177k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|   177k|                m_view = string_view_type{str};
 1745|   177k|                return;
 1746|   177k|            }
 1747|       |
 1748|   103k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|   103k|                                                            end_seg.data());
 1750|   103k|            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   281k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE4viewEv:
 1680|   557k|    {
 1681|   557k|        return m_view;
 1682|   557k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcED2Ev:
 1670|   281k|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 6116|   274k|    {
 6117|   274k|        const bool need_skipped_width =
 6118|   274k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6118:13): [True: 0, False: 274k]
  |  Branch (6118:33): [True: 0, False: 274k]
  ------------------
 6119|   274k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6120|       |
 6121|   274k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6121:13): [True: 0, False: 274k]
  ------------------
 6122|   274k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6122:13): [True: 0, False: 274k]
  ------------------
 6123|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6124:17): [True: 0, False: 0]
  ------------------
 6125|      0|                return result_type{rng.begin(), 0};
 6126|      0|            }
 6127|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6128|      0|                             specs.fill, need_skipped_width);
 6129|      0|        }
 6130|   274k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6130:13): [True: 274k, False: 0]
  ------------------
 6131|   274k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6131:13): [True: 0, False: 274k]
  ------------------
 6132|   274k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6132:15): [True: 0, False: 0]
  |  Branch (6132:35): [True: 0, False: 0]
  ------------------
 6133|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6133:15): [True: 0, False: 0]
  ------------------
 6134|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6134:15): [True: 0, False: 0]
  ------------------
 6135|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                const auto initial_width =
 6137|      0|                    specs.precision - prefix_width - value_width;
 6138|      0|                auto max_width_view = take_width(rng, initial_width);
 6139|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6140|      0|                                  .transform_error(make_eof_scan_error));
 6141|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6142|      0|            }
 6143|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|                            make_eof_scan_error));
 6145|       |
 6146|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return result_type{
 6148|      0|                    it,
 6149|      0|                    calculate_text_width(make_contiguous_buffer(
 6150|      0|                                             ranges::subrange{rng.begin(), it})
 6151|      0|                                             .view())};
 6152|      0|            }
 6153|      0|            return result_type{it, 0};
 6154|      0|        }
 6155|   274k|        return result_type{rng.begin(), 0};
 6156|   274k|    }
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1944|   522k|{
 1945|   522k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   522k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 360, False: 522k]
  |  |  ------------------
  ------------------
 1946|    360|        return unexpected(e);
 1947|    360|    }
 1948|       |
 1949|   522k|    return ranges::next(range.begin());
 1950|   522k|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  950|  1.35M|{
  951|  1.35M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  1.35M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.4k, False: 1.34M]
  |  |  ------------------
  ------------------
  952|  12.4k|        return eof_error::eof;
  953|  12.4k|    }
  954|  1.34M|    return eof_error::good;
  955|  1.35M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  944|  1.35M|{
  945|  1.35M|    return is_range_eof(r.begin(), r.end());
  946|  1.35M|}
_ZN3scn2v44impl12is_range_eofIPKcS4_EEbT_T0_:
  928|  1.35M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  1.35M|    {
  938|  1.35M|        return begin == end;
  939|  1.35M|    }
  940|  1.35M|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   522k|    {
  296|   522k|        ++x;
  297|   522k|        return x;
  298|   522k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|  51.8k|    {
 3590|  51.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  51.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  51.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  51.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  51.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 51.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  51.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  51.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  51.8k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  51.8k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 7.64k, False: 44.2k]
  ------------------
 3594|       |            if constexpr (!std::is_signed_v<T>) {
 3595|       |                return detail::unexpected_scan_error(
 3596|       |                    scan_error::invalid_scanned_value,
 3597|       |                    "Unexpected '-' sign when parsing an "
 3598|       |                    "unsigned value");
 3599|       |            }
 3600|  7.64k|            else {
 3601|  7.64k|                if (specs.type ==
  ------------------
  |  Branch (3601:21): [True: 0, False: 7.64k]
  ------------------
 3602|  7.64k|                    detail::presentation_type::int_unsigned_decimal) {
 3603|      0|                    return detail::unexpected_scan_error(
 3604|      0|                        scan_error::invalid_scanned_value,
 3605|      0|                        "'u'-option disallows negative values");
 3606|      0|                }
 3607|  7.64k|            }
 3608|  7.64k|        }
 3609|       |
 3610|  51.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 5.21k, False: 46.6k]
  ------------------
 3611|  5.21k|            value = T{0};
 3612|  5.21k|            return std::next(prefix_result.iterator);
 3613|  5.21k|        }
 3614|       |
 3615|  46.6k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  46.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 36.2k, False: 10.3k]
  |  |  ------------------
  ------------------
 3616|  36.2k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  36.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  36.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  36.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  36.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 128, False: 36.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    128|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    128|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    128|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    128|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    128|    }                                                  \
  |  |  |  | 3939|  36.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  36.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|  36.1k|                    parse_integer_digits_without_thsep(
 3618|  36.1k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|  36.1k|                        prefix_result.parsed_base));
 3620|       |
 3621|  36.1k|            auto buf = make_contiguous_buffer(
 3622|  36.1k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|  36.1k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  36.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  36.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  36.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  36.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 5.72k, False: 30.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  5.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  5.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  5.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  5.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  5.72k|    }                                                  \
  |  |  |  | 3939|  36.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  30.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|  30.4k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|  30.4k|                                        prefix_result.parsed_base));
 3626|       |
 3627|  30.4k|            return ranges::next(
 3628|  30.4k|                prefix_result.iterator,
 3629|  30.4k|                ranges::distance(buf.view().begin(), result_it));
 3630|  36.1k|        }
 3631|       |
 3632|  10.3k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  10.3k|            localized_number_formatting_options<CharT>{loc};
 3637|  10.3k|#endif
 3638|       |
 3639|  10.3k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  10.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  10.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  10.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  10.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 624, False: 9.75k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    624|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    624|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    624|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    624|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    624|    }                                                  \
  |  |  |  | 3939|  10.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  9.75k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  9.75k|                parse_integer_digits_with_thsep(
 3641|  9.75k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  9.75k|                    prefix_result.parsed_base, locale_options));
 3643|  9.75k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  9.75k|            parse_digits_result;
 3645|       |
 3646|  9.75k|        auto nothsep_source_view =
 3647|  9.75k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  9.75k|        SCN_TRY(
  ------------------
  |  | 3940|  9.75k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  9.75k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  9.75k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  9.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 430, False: 9.32k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    430|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    430|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    430|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    430|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    430|    }                                                  \
  |  |  |  | 3939|  9.75k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  9.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  9.32k|            nothsep_source_it,
 3650|  9.32k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  9.32k|                                prefix_result.parsed_base));
 3652|       |
 3653|  9.32k|        return ranges::next(
 3654|  9.32k|            prefix_result.iterator,
 3655|  9.32k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  9.32k|                ranges::ssize(thsep_indices));
 3657|  9.75k|    }
_ZN3scn2v44impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3376|   414k|{
 3377|   414k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3940|   414k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   414k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   414k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   414k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 414k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   414k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   414k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3378|   414k|    auto [base_prefix_begin_it, sign] = sign_result;
 3379|       |
 3380|   414k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3381|   414k|        parse_integer_base_prefix(
 3382|   414k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3383|       |
 3384|   414k|    if (parsed_zero) {
  ------------------
  |  Branch (3384:9): [True: 41.8k, False: 372k]
  ------------------
 3385|  41.8k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3385:13): [True: 478, False: 41.3k]
  ------------------
 3386|  41.8k|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3386:13): [True: 30.7k, False: 10.6k]
  ------------------
 3387|  31.2k|            digits_begin_it = base_prefix_begin_it;
 3388|  31.2k|        }
 3389|  10.6k|        else {
 3390|  10.6k|            parsed_zero = false;
 3391|  10.6k|        }
 3392|  41.8k|    }
 3393|   372k|    else {
 3394|   372k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3394:13): [True: 2.15k, False: 370k]
  ------------------
 3395|   372k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3395:13): [True: 34.6k, False: 335k]
  ------------------
 3396|  36.7k|            digits_begin_it = base_prefix_begin_it;
 3397|  36.7k|        }
 3398|   372k|    }
 3399|       |
 3400|   414k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3400:9): [True: 359k, False: 54.5k]
  ------------------
 3401|   359k|        sign = sign_type::plus_sign;
 3402|   359k|    }
 3403|   414k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3404|   414k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3405|   414k|}
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3257|   414k|{
 3258|   414k|    auto r = read_one_of_code_unit(range, "+-");
 3259|   414k|    if (!r) {
  ------------------
  |  Branch (3259:9): [True: 359k, False: 54.5k]
  ------------------
 3260|   359k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3260:13): [True: 359k, False: 0]
  ------------------
 3261|   359k|            return std::pair{range.begin(), sign_type::default_sign};
 3262|   359k|        }
 3263|      0|        return unexpected(eof_error::eof);
 3264|   359k|    }
 3265|       |
 3266|  54.5k|    auto& it = *r;
 3267|  54.5k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3267:9): [True: 42.1k, False: 12.4k]
  ------------------
 3268|  42.1k|        return std::pair{it, sign_type::minus_sign};
 3269|  42.1k|    }
 3270|  12.4k|    return std::pair{it, sign_type::plus_sign};
 3271|  54.5k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2371|   414k|{
 2372|   414k|    auto it = read_code_unit(range);
 2373|   414k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|   414k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 414k]
  |  |  ------------------
  ------------------
 2374|      0|        return unexpected(make_eof_parse_error(it.error()));
 2375|      0|    }
 2376|       |
 2377|   816k|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 816k, False: 359k]
  ------------------
 2378|   816k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 54.5k, False: 761k]
  ------------------
 2379|  54.5k|            return *it;
 2380|  54.5k|        }
 2381|   816k|    }
 2382|       |
 2383|   359k|    return unexpected(parse_error::error);
 2384|   414k|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3343|   414k|{
 3344|   414k|    switch (base) {
 3345|  21.8k|        case 2:
  ------------------
  |  Branch (3345:9): [True: 21.8k, False: 392k]
  ------------------
 3346|       |            // allow 0b/0B
 3347|  21.8k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3348|  21.8k|                    false};
 3349|       |
 3350|  38.8k|        case 8: {
  ------------------
  |  Branch (3350:9): [True: 38.8k, False: 375k]
  ------------------
 3351|       |            // allow 0o/0O/0
 3352|  38.8k|            bool zero_parsed = false;
 3353|  38.8k|            auto it = apply_opt(
 3354|  38.8k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3355|  38.8k|            return {it, 8, zero_parsed};
 3356|      0|        }
 3357|       |
 3358|  65.3k|        case 16:
  ------------------
  |  Branch (3358:9): [True: 65.3k, False: 349k]
  ------------------
 3359|       |            // allow 0x/0X
 3360|  65.3k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3361|  65.3k|                    false};
 3362|       |
 3363|  70.9k|        case 0:
  ------------------
  |  Branch (3363:9): [True: 70.9k, False: 343k]
  ------------------
 3364|       |            // detect base
 3365|  70.9k|            return parse_integer_base_prefix_for_detection(range);
 3366|       |
 3367|   217k|        default:
  ------------------
  |  Branch (3367:9): [True: 217k, False: 196k]
  ------------------
 3368|       |            // no base prefix allowed
 3369|   217k|            return {range.begin(), base, false};
 3370|   414k|    }
 3371|   414k|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2390|   125k|{
 2391|   125k|    if (!result) {
  ------------------
  |  Branch (2391:9): [True: 108k, False: 17.4k]
  ------------------
 2392|   108k|        return range.begin();
 2393|   108k|    }
 2394|  17.4k|    return *result;
 2395|   125k|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3294|  92.2k|{
 3295|  92.2k|    return read_matching_string_classic_nocase(range, "0b");
 3296|  92.2k|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2330|   337k|{
 2331|   337k|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|   337k|                  std::is_same_v<char_type, char>) {
 2335|   337k|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2335:13): [True: 11.6k, False: 325k]
  ------------------
 2336|  11.6k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|  11.6k|        }
 2338|   325k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2338:13): [True: 323k, False: 2.59k]
  ------------------
 2339|   323k|            return unexpected(parse_error::error);
 2340|   323k|        }
 2341|  2.59k|        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|       |    else {
 2344|       |        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|       |            if (ch < 'A' || ch > 'Z') {
 2346|       |                return ch;
 2347|       |            }
 2348|       |            return static_cast<char_type>(ch +
 2349|       |                                          static_cast<char_type>('a' - 'A'));
 2350|       |        };
 2351|       |
 2352|       |        SCN_TRY(it, read_exactly_n_code_units(
 2353|       |                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|       |                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|       |        if (SCN_UNLIKELY(!std::equal(
 2357|       |                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|       |                    return ascii_tolower(a) ==
 2359|       |                           static_cast<detail::char_t<Range>>(b);
 2360|       |                }))) {
 2361|       |            return unexpected(parse_error::error);
 2362|       |        }
 2363|       |
 2364|       |        return it;
 2365|       |    }
 2366|   337k|}
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3308|   108k|{
 3309|   108k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3309:14): [True: 952, False: 107k]
  ------------------
 3310|    952|        return *r;
 3311|    952|    }
 3312|       |
 3313|   107k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3313:14): [True: 41.8k, False: 66.0k]
  ------------------
 3314|  41.8k|        zero_parsed = true;
 3315|  41.8k|        return *r;
 3316|  41.8k|    }
 3317|       |
 3318|  66.0k|    return unexpected(parse_error::error);
 3319|   107k|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2245|   107k|{
 2246|   107k|    auto it = read_code_unit(range);
 2247|   107k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 360, False: 107k]
  |  |  ------------------
  ------------------
 2248|    360|        return unexpected(make_eof_parse_error(it.error()));
 2249|    360|    }
 2250|       |
 2251|   107k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 65.7k, False: 41.8k]
  |  |  ------------------
  ------------------
 2252|   107k|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|  65.7k|        return unexpected(parse_error::error);
 2254|  65.7k|    }
 2255|       |
 2256|  41.8k|    return *it;
 2257|   107k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3301|   136k|{
 3302|   136k|    return read_matching_string_classic_nocase(range, "0x");
 3303|   136k|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3324|  70.9k|{
 3325|  70.9k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3325:14): [True: 532, False: 70.4k]
  ------------------
 3326|    532|        return {*r, 16, false};
 3327|    532|    }
 3328|  70.4k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3328:14): [True: 318, False: 70.0k]
  ------------------
 3329|    318|        return {*r, 2, false};
 3330|    318|    }
 3331|  70.0k|    {
 3332|  70.0k|        bool zero_parsed{false};
 3333|  70.0k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3333:18): [True: 26.1k, False: 43.8k]
  ------------------
 3334|  26.1k|            return {*r, 8, zero_parsed};
 3335|  26.1k|        }
 3336|  70.0k|    }
 3337|  43.8k|    return {range.begin(), 10, false};
 3338|  70.0k|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3410|   311k|{
 3411|   311k|    using char_type = detail::char_t<Range>;
 3412|       |
 3413|   311k|    if constexpr (ranges::contiguous_range<Range>) {
 3414|   311k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   311k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 891, False: 310k]
  |  |  ------------------
  ------------------
 3415|    891|            return detail::unexpected_scan_error(
 3416|    891|                scan_error::invalid_scanned_value,
 3417|    891|                "Failed to parse integer: No digits found");
 3418|    891|        }
 3419|   310k|        return range.end();
 3420|       |    }
 3421|       |    else {
 3422|       |        return read_while1_code_unit(range,
 3423|       |                                     [&](char_type ch) noexcept {
 3424|       |                                         return char_to_int(ch) < base;
 3425|       |                                     })
 3426|       |            .transform_error(map_parse_error_to_scan_error(
 3427|       |                scan_error::invalid_scanned_value,
 3428|       |                "Failed to parse integer: No digits found"));
 3429|       |    }
 3430|   311k|}
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3440|  60.8k|{
 3441|  60.8k|    std::basic_string<CharT> output;
 3442|  60.8k|    std::string thsep_indices;
 3443|  60.8k|    auto it = range.begin();
 3444|  60.8k|    bool digit_matched = false;
 3445|   326k|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3445:12): [True: 324k, False: 2.16k]
  ------------------
 3446|   324k|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3446:13): [True: 31.4k, False: 292k]
  ------------------
 3447|  31.4k|            thsep_indices.push_back(
 3448|  31.4k|                static_cast<char>(ranges::distance(range.begin(), it)));
 3449|  31.4k|        }
 3450|   292k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3450:18): [True: 58.6k, False: 233k]
  ------------------
 3451|  58.6k|            break;
 3452|  58.6k|        }
 3453|   233k|        else {
 3454|   233k|            output.push_back(*it);
 3455|   233k|            digit_matched = true;
 3456|   233k|        }
 3457|   324k|    }
 3458|  60.8k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  865|  60.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.49k, False: 57.3k]
  |  |  ------------------
  ------------------
 3459|  3.49k|        return detail::unexpected_scan_error(
 3460|  3.49k|            scan_error::invalid_scanned_value,
 3461|  3.49k|            "Failed to parse integer: No digits found");
 3462|  3.49k|    }
 3463|  57.3k|    return std::tuple{it, output, thsep_indices};
 3464|  60.8k|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|   310k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|   310k|                  ranges::sized_range<Range>) {
 1785|   310k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|   310k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|   310k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1587|   310k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|   310k|    {
 1589|   310k|    }
_ZNK3scn2v44impl19string_view_wrapperIcE4viewEv:
 1601|  1.43M|    {
 1602|  1.43M|        return sv;
 1603|  1.43M|    }
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3065|   423k|{
 3066|   423k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 423k, False: 0]
  ------------------
 3067|   423k|        auto it = read_while_classic_space(range);
 3068|   423k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|   423k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   423k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 9.32k, False: 414k]
  |  |  ------------------
  ------------------
 3070|  9.32k|            return unexpected(e);
 3071|  9.32k|        }
 3072|       |
 3073|   414k|        return it;
 3074|   423k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|   423k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|   423k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|   423k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|   423k|        auto buf = make_contiguous_buffer(range);
 2220|   423k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|   423k|        return ranges::next(range.begin(),
 2222|   423k|                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|       |    else {
 2225|       |        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|       |            return detail::is_cp_space(cp);
 2238|       |        });
 2239|       |    }
 2240|   423k|}
_ZN3scn2v44impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|   423k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|   423k|                  ranges::sized_range<Range>) {
 1785|   423k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|   423k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|   423k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1587|   423k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|   423k|    {
 1589|   423k|    }
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|   656k|    {
  304|   656k|        ranges::advance(x, n);
  305|   656k|        return x;
  306|   656k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  1.05M|    {
  268|  1.05M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.05M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  1.05M|    {
  181|  2.59M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 1.54M, False: 1.05M]
  ------------------
  182|  1.54M|            ++i;
  183|  1.54M|        }
  184|  1.05M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIaEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6226|  53.2k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|       |                          basic_contiguous_scan_context<char_type>>) {
 6231|       |            auto rd = make_reader<T, char_type>();
 6232|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6233|       |            return impl(rd, range, value);
 6234|       |        }
 6235|  53.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 6236|  53.2k|            auto rd = make_reader<T, char_type>();
 6237|  53.2k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  53.2k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  53.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 53.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6238|       |
 6239|  53.2k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6239:17): [True: 53.2k, False: 0]
  |  Branch (6239:50): [True: 0, False: 0]
  ------------------
 6240|  53.2k|                specs.width != 0) {
  ------------------
  |  Branch (6240:17): [True: 0, False: 0]
  ------------------
 6241|  53.2k|                return impl(rd, range, value);
 6242|  53.2k|            }
 6243|       |
 6244|      0|            auto crange = get_as_contiguous(range);
 6245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            return ranges::next(range.begin(),
 6247|      0|                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  53.2k|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3155|   660k|    {
 3156|   660k|        reader_error_handler eh{};
 3157|   660k|        get_derived().check_specs_impl(specs, eh);
 3158|   660k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|   660k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 660k]
  |  |  ------------------
  ------------------
 3159|      0|            return detail::unexpected_scan_error(
 3160|      0|                scan_error::invalid_format_string, eh.m_msg);
 3161|      0|        }
 3162|   660k|        return {};
 3163|   660k|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
 3167|   660k|    {
 3168|   660k|        return static_cast<Derived&>(*this);
 3169|   660k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3535|   660k|    {
 3536|   660k|        detail::check_int_type_specs(specs, eh);
 3537|   660k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6161|  53.2k|    {
 6162|  53.2k|        const bool need_skipped_width =
 6163|  53.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 53.2k]
  |  Branch (6163:33): [True: 0, False: 53.2k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  53.2k|        auto it = rng.begin();
 6167|  53.2k|        std::ptrdiff_t prefix_width = 0;
 6168|  53.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 53.2k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  53.2k|        else {
 6176|  53.2k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  53.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  53.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  53.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  53.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.49k, False: 51.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.49k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.49k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.49k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.49k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.49k|    }                                                  \
  |  |  |  | 3939|  53.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  51.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  51.7k|            std::tie(it, prefix_width) = prefix_result;
 6178|  51.7k|        }
 6179|  51.7k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  51.7k|        std::ptrdiff_t value_width = 0;
 6183|  51.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 51.7k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  51.7k|        else {
 6199|  51.7k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  51.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  51.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  51.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 6.76k, False: 44.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  6.76k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  6.76k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  6.76k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  6.76k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  6.76k|    }                                                  \
  |  | 3939|  51.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  51.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  44.9k|                                             specs, value, loc));
 6201|       |
 6202|  44.9k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 44.9k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  44.9k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  44.9k|        std::ptrdiff_t postfix_width = 0;
 6211|  44.9k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 43.9k, False: 1.01k]
  ------------------
 6212|  43.9k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  43.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  43.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  43.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  43.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 43.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  43.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  43.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  43.9k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  43.9k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  43.9k|                                 value_width));
 6216|  43.9k|            std::tie(it, postfix_width) = postfix_result;
 6217|  43.9k|        }
 6218|       |
 6219|  44.9k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  44.9k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  44.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 44.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|  44.9k|            specs, prefix_width, value_width, postfix_width));
 6221|  44.9k|        return it;
 6222|  44.9k|    }
_ZNK3scn2v44impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
 3150|  1.39M|    {
 3151|  1.39M|        return true;
 3152|  1.39M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIiEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6226|  63.2k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|       |                          basic_contiguous_scan_context<char_type>>) {
 6231|       |            auto rd = make_reader<T, char_type>();
 6232|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6233|       |            return impl(rd, range, value);
 6234|       |        }
 6235|  63.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 6236|  63.2k|            auto rd = make_reader<T, char_type>();
 6237|  63.2k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  63.2k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  63.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 63.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6238|       |
 6239|  63.2k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6239:17): [True: 63.2k, False: 0]
  |  Branch (6239:50): [True: 0, False: 0]
  ------------------
 6240|  63.2k|                specs.width != 0) {
  ------------------
  |  Branch (6240:17): [True: 0, False: 0]
  ------------------
 6241|  63.2k|                return impl(rd, range, value);
 6242|  63.2k|            }
 6243|       |
 6244|      0|            auto crange = get_as_contiguous(range);
 6245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            return ranges::next(range.begin(),
 6247|      0|                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  63.2k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6161|  63.2k|    {
 6162|  63.2k|        const bool need_skipped_width =
 6163|  63.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 63.2k]
  |  Branch (6163:33): [True: 0, False: 63.2k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  63.2k|        auto it = rng.begin();
 6167|  63.2k|        std::ptrdiff_t prefix_width = 0;
 6168|  63.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 63.2k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  63.2k|        else {
 6176|  63.2k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  63.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  63.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  63.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  63.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.97k, False: 61.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.97k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.97k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.97k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.97k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.97k|    }                                                  \
  |  |  |  | 3939|  63.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  61.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  61.2k|            std::tie(it, prefix_width) = prefix_result;
 6178|  61.2k|        }
 6179|  61.2k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  61.2k|        std::ptrdiff_t value_width = 0;
 6183|  61.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 61.2k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  61.2k|        else {
 6199|  61.2k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  61.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  61.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  61.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 6.28k, False: 55.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  6.28k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  6.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  6.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  6.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  6.28k|    }                                                  \
  |  | 3939|  61.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  61.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  55.0k|                                             specs, value, loc));
 6201|       |
 6202|  55.0k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 55.0k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  55.0k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  55.0k|        std::ptrdiff_t postfix_width = 0;
 6211|  55.0k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 53.6k, False: 1.36k]
  ------------------
 6212|  53.6k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  53.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  53.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  53.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  53.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 53.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  53.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  53.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  53.6k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  53.6k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  53.6k|                                 value_width));
 6216|  53.6k|            std::tie(it, postfix_width) = postfix_result;
 6217|  53.6k|        }
 6218|       |
 6219|  55.0k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  55.0k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  55.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 55.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|  55.0k|            specs, prefix_width, value_width, postfix_width));
 6221|  55.0k|        return it;
 6222|  55.0k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3589|  61.2k|    {
 3590|  61.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  61.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  61.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  61.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  61.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 61.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  61.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  61.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  61.2k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  61.2k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 8.01k, False: 53.2k]
  ------------------
 3594|       |            if constexpr (!std::is_signed_v<T>) {
 3595|       |                return detail::unexpected_scan_error(
 3596|       |                    scan_error::invalid_scanned_value,
 3597|       |                    "Unexpected '-' sign when parsing an "
 3598|       |                    "unsigned value");
 3599|       |            }
 3600|  8.01k|            else {
 3601|  8.01k|                if (specs.type ==
  ------------------
  |  Branch (3601:21): [True: 0, False: 8.01k]
  ------------------
 3602|  8.01k|                    detail::presentation_type::int_unsigned_decimal) {
 3603|      0|                    return detail::unexpected_scan_error(
 3604|      0|                        scan_error::invalid_scanned_value,
 3605|      0|                        "'u'-option disallows negative values");
 3606|      0|                }
 3607|  8.01k|            }
 3608|  8.01k|        }
 3609|       |
 3610|  61.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 5.49k, False: 55.7k]
  ------------------
 3611|  5.49k|            value = T{0};
 3612|  5.49k|            return std::next(prefix_result.iterator);
 3613|  5.49k|        }
 3614|       |
 3615|  55.7k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  55.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 43.8k, False: 11.9k]
  |  |  ------------------
  ------------------
 3616|  43.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  43.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  43.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  43.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  43.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.56k, False: 39.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.56k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.56k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.56k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.56k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.56k|    }                                                  \
  |  |  |  | 3939|  43.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  39.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|  39.2k|                    parse_integer_digits_without_thsep(
 3618|  39.2k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|  39.2k|                        prefix_result.parsed_base));
 3620|       |
 3621|  39.2k|            auto buf = make_contiguous_buffer(
 3622|  39.2k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|  39.2k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  39.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  39.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  39.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  39.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 790, False: 38.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    790|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    790|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    790|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    790|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    790|    }                                                  \
  |  |  |  | 3939|  39.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  38.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|  38.4k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|  38.4k|                                        prefix_result.parsed_base));
 3626|       |
 3627|  38.4k|            return ranges::next(
 3628|  38.4k|                prefix_result.iterator,
 3629|  38.4k|                ranges::distance(buf.view().begin(), result_it));
 3630|  39.2k|        }
 3631|       |
 3632|  11.9k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  11.9k|            localized_number_formatting_options<CharT>{loc};
 3637|  11.9k|#endif
 3638|       |
 3639|  11.9k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  11.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  11.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  11.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  11.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 704, False: 11.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    704|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    704|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    704|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    704|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    704|    }                                                  \
  |  |  |  | 3939|  11.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  11.2k|                parse_integer_digits_with_thsep(
 3641|  11.2k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  11.2k|                    prefix_result.parsed_base, locale_options));
 3643|  11.2k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  11.2k|            parse_digits_result;
 3645|       |
 3646|  11.2k|        auto nothsep_source_view =
 3647|  11.2k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  11.2k|        SCN_TRY(
  ------------------
  |  | 3940|  11.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  11.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  11.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  11.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 218, False: 11.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    218|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    218|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    218|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    218|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    218|    }                                                  \
  |  |  |  | 3939|  11.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  11.0k|            nothsep_source_it,
 3650|  11.0k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  11.0k|                                prefix_result.parsed_base));
 3652|       |
 3653|  11.0k|        return ranges::next(
 3654|  11.0k|            prefix_result.iterator,
 3655|  11.0k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  11.0k|                ranges::ssize(thsep_indices));
 3657|  11.2k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|  61.3k|    {
 3590|  61.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  61.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  61.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  61.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  61.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 61.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  61.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  61.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  61.3k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  61.3k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 8.00k, False: 53.3k]
  ------------------
 3594|       |            if constexpr (!std::is_signed_v<T>) {
 3595|       |                return detail::unexpected_scan_error(
 3596|       |                    scan_error::invalid_scanned_value,
 3597|       |                    "Unexpected '-' sign when parsing an "
 3598|       |                    "unsigned value");
 3599|       |            }
 3600|  8.00k|            else {
 3601|  8.00k|                if (specs.type ==
  ------------------
  |  Branch (3601:21): [True: 0, False: 8.00k]
  ------------------
 3602|  8.00k|                    detail::presentation_type::int_unsigned_decimal) {
 3603|      0|                    return detail::unexpected_scan_error(
 3604|      0|                        scan_error::invalid_scanned_value,
 3605|      0|                        "'u'-option disallows negative values");
 3606|      0|                }
 3607|  8.00k|            }
 3608|  8.00k|        }
 3609|       |
 3610|  61.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 5.49k, False: 55.8k]
  ------------------
 3611|  5.49k|            value = T{0};
 3612|  5.49k|            return std::next(prefix_result.iterator);
 3613|  5.49k|        }
 3614|       |
 3615|  55.8k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  55.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 43.8k, False: 11.9k]
  |  |  ------------------
  ------------------
 3616|  43.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  43.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  43.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  43.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  43.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 192, False: 43.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    192|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    192|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    192|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    192|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    192|    }                                                  \
  |  |  |  | 3939|  43.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  43.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|  43.7k|                    parse_integer_digits_without_thsep(
 3618|  43.7k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|  43.7k|                        prefix_result.parsed_base));
 3620|       |
 3621|  43.7k|            auto buf = make_contiguous_buffer(
 3622|  43.7k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|  43.7k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  43.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  43.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  43.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  43.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 5.31k, False: 38.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  5.31k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  5.31k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  5.31k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  5.31k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  5.31k|    }                                                  \
  |  |  |  | 3939|  43.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  38.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|  38.3k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|  38.3k|                                        prefix_result.parsed_base));
 3626|       |
 3627|  38.3k|            return ranges::next(
 3628|  38.3k|                prefix_result.iterator,
 3629|  38.3k|                ranges::distance(buf.view().begin(), result_it));
 3630|  43.7k|        }
 3631|       |
 3632|  11.9k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  11.9k|            localized_number_formatting_options<CharT>{loc};
 3637|  11.9k|#endif
 3638|       |
 3639|  11.9k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  11.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  11.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  11.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  11.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 748, False: 11.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    748|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    748|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    748|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    748|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    748|    }                                                  \
  |  |  |  | 3939|  11.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  11.2k|                parse_integer_digits_with_thsep(
 3641|  11.2k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  11.2k|                    prefix_result.parsed_base, locale_options));
 3643|  11.2k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  11.2k|            parse_digits_result;
 3645|       |
 3646|  11.2k|        auto nothsep_source_view =
 3647|  11.2k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  11.2k|        SCN_TRY(
  ------------------
  |  | 3940|  11.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  11.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  11.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  11.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 216, False: 11.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    216|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    216|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    216|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    216|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    216|    }                                                  \
  |  |  |  | 3939|  11.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  11.0k|            nothsep_source_it,
 3650|  11.0k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  11.0k|                                prefix_result.parsed_base));
 3652|       |
 3653|  11.0k|        return ranges::next(
 3654|  11.0k|            prefix_result.iterator,
 3655|  11.0k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  11.0k|                ranges::ssize(thsep_indices));
 3657|  11.2k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIxEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6226|  64.4k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|       |                          basic_contiguous_scan_context<char_type>>) {
 6231|       |            auto rd = make_reader<T, char_type>();
 6232|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6233|       |            return impl(rd, range, value);
 6234|       |        }
 6235|  64.4k|        else if constexpr (!detail::is_type_disabled<T>) {
 6236|  64.4k|            auto rd = make_reader<T, char_type>();
 6237|  64.4k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  64.4k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  64.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 64.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6238|       |
 6239|  64.4k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6239:17): [True: 64.4k, False: 0]
  |  Branch (6239:50): [True: 0, False: 0]
  ------------------
 6240|  64.4k|                specs.width != 0) {
  ------------------
  |  Branch (6240:17): [True: 0, False: 0]
  ------------------
 6241|  64.4k|                return impl(rd, range, value);
 6242|  64.4k|            }
 6243|       |
 6244|      0|            auto crange = get_as_contiguous(range);
 6245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            return ranges::next(range.begin(),
 6247|      0|                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  64.4k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6161|  64.4k|    {
 6162|  64.4k|        const bool need_skipped_width =
 6163|  64.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 64.4k]
  |  Branch (6163:33): [True: 0, False: 64.4k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  64.4k|        auto it = rng.begin();
 6167|  64.4k|        std::ptrdiff_t prefix_width = 0;
 6168|  64.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 64.4k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  64.4k|        else {
 6176|  64.4k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  64.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  64.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  64.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  64.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.18k, False: 62.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.18k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.18k|    }                                                  \
  |  |  |  | 3939|  64.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  62.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  62.2k|            std::tie(it, prefix_width) = prefix_result;
 6178|  62.2k|        }
 6179|  62.2k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  62.2k|        std::ptrdiff_t value_width = 0;
 6183|  62.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 62.2k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  62.2k|        else {
 6199|  62.2k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  62.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  62.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  62.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 6.07k, False: 56.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  6.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  6.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  6.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  6.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  6.07k|    }                                                  \
  |  | 3939|  62.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  62.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  56.1k|                                             specs, value, loc));
 6201|       |
 6202|  56.1k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 56.1k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  56.1k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  56.1k|        std::ptrdiff_t postfix_width = 0;
 6211|  56.1k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 54.6k, False: 1.52k]
  ------------------
 6212|  54.6k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  54.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  54.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  54.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  54.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 54.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  54.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  54.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  54.6k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  54.6k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  54.6k|                                 value_width));
 6216|  54.6k|            std::tie(it, postfix_width) = postfix_result;
 6217|  54.6k|        }
 6218|       |
 6219|  56.1k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  56.1k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  56.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 56.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|  56.1k|            specs, prefix_width, value_width, postfix_width));
 6221|  56.1k|        return it;
 6222|  56.1k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3589|  62.2k|    {
 3590|  62.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  62.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  62.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  62.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  62.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 62.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  62.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  62.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  62.2k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  62.2k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 8.20k, False: 54.0k]
  ------------------
 3594|       |            if constexpr (!std::is_signed_v<T>) {
 3595|       |                return detail::unexpected_scan_error(
 3596|       |                    scan_error::invalid_scanned_value,
 3597|       |                    "Unexpected '-' sign when parsing an "
 3598|       |                    "unsigned value");
 3599|       |            }
 3600|  8.20k|            else {
 3601|  8.20k|                if (specs.type ==
  ------------------
  |  Branch (3601:21): [True: 0, False: 8.20k]
  ------------------
 3602|  8.20k|                    detail::presentation_type::int_unsigned_decimal) {
 3603|      0|                    return detail::unexpected_scan_error(
 3604|      0|                        scan_error::invalid_scanned_value,
 3605|      0|                        "'u'-option disallows negative values");
 3606|      0|                }
 3607|  8.20k|            }
 3608|  8.20k|        }
 3609|       |
 3610|  62.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 5.53k, False: 56.7k]
  ------------------
 3611|  5.53k|            value = T{0};
 3612|  5.53k|            return std::next(prefix_result.iterator);
 3613|  5.53k|        }
 3614|       |
 3615|  56.7k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  56.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 44.5k, False: 12.1k]
  |  |  ------------------
  ------------------
 3616|  44.5k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  44.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  44.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  44.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  44.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.79k, False: 39.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.79k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.79k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.79k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.79k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.79k|    }                                                  \
  |  |  |  | 3939|  44.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  39.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|  39.7k|                    parse_integer_digits_without_thsep(
 3618|  39.7k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|  39.7k|                        prefix_result.parsed_base));
 3620|       |
 3621|  39.7k|            auto buf = make_contiguous_buffer(
 3622|  39.7k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|  39.7k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  39.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  39.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  39.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  39.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 406, False: 39.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    406|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    406|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    406|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    406|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    406|    }                                                  \
  |  |  |  | 3939|  39.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  39.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|  39.3k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|  39.3k|                                        prefix_result.parsed_base));
 3626|       |
 3627|  39.3k|            return ranges::next(
 3628|  39.3k|                prefix_result.iterator,
 3629|  39.3k|                ranges::distance(buf.view().begin(), result_it));
 3630|  39.7k|        }
 3631|       |
 3632|  12.1k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  12.1k|            localized_number_formatting_options<CharT>{loc};
 3637|  12.1k|#endif
 3638|       |
 3639|  12.1k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 760, False: 11.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    760|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    760|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    760|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    760|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    760|    }                                                  \
  |  |  |  | 3939|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  11.4k|                parse_integer_digits_with_thsep(
 3641|  11.4k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  11.4k|                    prefix_result.parsed_base, locale_options));
 3643|  11.4k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  11.4k|            parse_digits_result;
 3645|       |
 3646|  11.4k|        auto nothsep_source_view =
 3647|  11.4k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  11.4k|        SCN_TRY(
  ------------------
  |  | 3940|  11.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  11.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  11.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  11.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 116, False: 11.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    116|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    116|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    116|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    116|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    116|    }                                                  \
  |  |  |  | 3939|  11.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  11.2k|            nothsep_source_it,
 3650|  11.2k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  11.2k|                                prefix_result.parsed_base));
 3652|       |
 3653|  11.2k|        return ranges::next(
 3654|  11.2k|            prefix_result.iterator,
 3655|  11.2k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  11.2k|                ranges::ssize(thsep_indices));
 3657|  11.4k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|  62.3k|    {
 3590|  62.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  62.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  62.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  62.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  62.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 62.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  62.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  62.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  62.3k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  62.3k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 8.19k, False: 54.1k]
  ------------------
 3594|       |            if constexpr (!std::is_signed_v<T>) {
 3595|       |                return detail::unexpected_scan_error(
 3596|       |                    scan_error::invalid_scanned_value,
 3597|       |                    "Unexpected '-' sign when parsing an "
 3598|       |                    "unsigned value");
 3599|       |            }
 3600|  8.19k|            else {
 3601|  8.19k|                if (specs.type ==
  ------------------
  |  Branch (3601:21): [True: 0, False: 8.19k]
  ------------------
 3602|  8.19k|                    detail::presentation_type::int_unsigned_decimal) {
 3603|      0|                    return detail::unexpected_scan_error(
 3604|      0|                        scan_error::invalid_scanned_value,
 3605|      0|                        "'u'-option disallows negative values");
 3606|      0|                }
 3607|  8.19k|            }
 3608|  8.19k|        }
 3609|       |
 3610|  62.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 5.53k, False: 56.7k]
  ------------------
 3611|  5.53k|            value = T{0};
 3612|  5.53k|            return std::next(prefix_result.iterator);
 3613|  5.53k|        }
 3614|       |
 3615|  56.7k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  56.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 44.6k, False: 12.1k]
  |  |  ------------------
  ------------------
 3616|  44.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  44.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  44.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  44.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  44.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 222, False: 44.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    222|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    222|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    222|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    222|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    222|    }                                                  \
  |  |  |  | 3939|  44.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  44.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|  44.3k|                    parse_integer_digits_without_thsep(
 3618|  44.3k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|  44.3k|                        prefix_result.parsed_base));
 3620|       |
 3621|  44.3k|            auto buf = make_contiguous_buffer(
 3622|  44.3k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|  44.3k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  44.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  44.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  44.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  44.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 5.12k, False: 39.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  5.12k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  5.12k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  5.12k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  5.12k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  5.12k|    }                                                  \
  |  |  |  | 3939|  44.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  39.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|  39.2k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|  39.2k|                                        prefix_result.parsed_base));
 3626|       |
 3627|  39.2k|            return ranges::next(
 3628|  39.2k|                prefix_result.iterator,
 3629|  39.2k|                ranges::distance(buf.view().begin(), result_it));
 3630|  44.3k|        }
 3631|       |
 3632|  12.1k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  12.1k|            localized_number_formatting_options<CharT>{loc};
 3637|  12.1k|#endif
 3638|       |
 3639|  12.1k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 806, False: 11.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    806|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    806|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    806|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    806|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    806|    }                                                  \
  |  |  |  | 3939|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  11.3k|                parse_integer_digits_with_thsep(
 3641|  11.3k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  11.3k|                    prefix_result.parsed_base, locale_options));
 3643|  11.3k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  11.3k|            parse_digits_result;
 3645|       |
 3646|  11.3k|        auto nothsep_source_view =
 3647|  11.3k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  11.3k|        SCN_TRY(
  ------------------
  |  | 3940|  11.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  11.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  11.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  11.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 114, False: 11.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    114|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    114|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    114|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    114|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    114|    }                                                  \
  |  |  |  | 3939|  11.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  11.2k|            nothsep_source_it,
 3650|  11.2k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  11.2k|                                prefix_result.parsed_base));
 3652|       |
 3653|  11.2k|        return ranges::next(
 3654|  11.2k|            prefix_result.iterator,
 3655|  11.2k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  11.2k|                ranges::ssize(thsep_indices));
 3657|  11.3k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIhEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6226|  46.8k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|       |                          basic_contiguous_scan_context<char_type>>) {
 6231|       |            auto rd = make_reader<T, char_type>();
 6232|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6233|       |            return impl(rd, range, value);
 6234|       |        }
 6235|  46.8k|        else if constexpr (!detail::is_type_disabled<T>) {
 6236|  46.8k|            auto rd = make_reader<T, char_type>();
 6237|  46.8k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  46.8k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  46.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 46.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6238|       |
 6239|  46.8k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6239:17): [True: 46.8k, False: 0]
  |  Branch (6239:50): [True: 0, False: 0]
  ------------------
 6240|  46.8k|                specs.width != 0) {
  ------------------
  |  Branch (6240:17): [True: 0, False: 0]
  ------------------
 6241|  46.8k|                return impl(rd, range, value);
 6242|  46.8k|            }
 6243|       |
 6244|      0|            auto crange = get_as_contiguous(range);
 6245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            return ranges::next(range.begin(),
 6247|      0|                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  46.8k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6161|  46.8k|    {
 6162|  46.8k|        const bool need_skipped_width =
 6163|  46.8k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 46.8k]
  |  Branch (6163:33): [True: 0, False: 46.8k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  46.8k|        auto it = rng.begin();
 6167|  46.8k|        std::ptrdiff_t prefix_width = 0;
 6168|  46.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 46.8k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  46.8k|        else {
 6176|  46.8k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  46.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  46.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  46.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  46.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.14k, False: 45.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.14k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.14k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.14k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.14k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.14k|    }                                                  \
  |  |  |  | 3939|  46.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  45.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  45.7k|            std::tie(it, prefix_width) = prefix_result;
 6178|  45.7k|        }
 6179|  45.7k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  45.7k|        std::ptrdiff_t value_width = 0;
 6183|  45.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 45.7k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  45.7k|        else {
 6199|  45.7k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  45.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  45.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  45.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 7.11k, False: 38.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  7.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  7.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  7.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  7.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  7.11k|    }                                                  \
  |  | 3939|  45.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  45.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  38.6k|                                             specs, value, loc));
 6201|       |
 6202|  38.6k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 38.6k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  38.6k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  38.6k|        std::ptrdiff_t postfix_width = 0;
 6211|  38.6k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 37.8k, False: 772]
  ------------------
 6212|  37.8k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  37.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  37.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  37.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  37.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 37.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  37.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  37.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  37.8k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  37.8k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  37.8k|                                 value_width));
 6216|  37.8k|            std::tie(it, postfix_width) = postfix_result;
 6217|  37.8k|        }
 6218|       |
 6219|  38.6k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  38.6k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  38.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 38.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|  38.6k|            specs, prefix_width, value_width, postfix_width));
 6221|  38.6k|        return it;
 6222|  38.6k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3589|  45.7k|    {
 3590|  45.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  45.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  45.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  45.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  45.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 45.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  45.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  45.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  45.7k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  45.7k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 2.90k, False: 42.8k]
  ------------------
 3594|  2.90k|            if constexpr (!std::is_signed_v<T>) {
 3595|  2.90k|                return detail::unexpected_scan_error(
 3596|  2.90k|                    scan_error::invalid_scanned_value,
 3597|  2.90k|                    "Unexpected '-' sign when parsing an "
 3598|  2.90k|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|  2.90k|        }
 3609|       |
 3610|  45.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 4.80k, False: 40.9k]
  ------------------
 3611|  4.80k|            value = T{0};
 3612|  4.80k|            return std::next(prefix_result.iterator);
 3613|  4.80k|        }
 3614|       |
 3615|  40.9k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  40.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 29.8k, False: 11.0k]
  |  |  ------------------
  ------------------
 3616|  29.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  29.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  29.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  29.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  29.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.74k, False: 27.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.74k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.74k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.74k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.74k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.74k|    }                                                  \
  |  |  |  | 3939|  29.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  27.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|  27.1k|                    parse_integer_digits_without_thsep(
 3618|  27.1k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|  27.1k|                        prefix_result.parsed_base));
 3620|       |
 3621|  27.1k|            auto buf = make_contiguous_buffer(
 3622|  27.1k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|  27.1k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  27.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  27.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  27.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  27.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 860, False: 26.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    860|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    860|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    860|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    860|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    860|    }                                                  \
  |  |  |  | 3939|  27.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  26.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|  26.2k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|  26.2k|                                        prefix_result.parsed_base));
 3626|       |
 3627|  26.2k|            return ranges::next(
 3628|  26.2k|                prefix_result.iterator,
 3629|  26.2k|                ranges::distance(buf.view().begin(), result_it));
 3630|  27.1k|        }
 3631|       |
 3632|  11.0k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  11.0k|            localized_number_formatting_options<CharT>{loc};
 3637|  11.0k|#endif
 3638|       |
 3639|  11.0k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  11.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  11.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  11.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  11.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 374, False: 10.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    374|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    374|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    374|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    374|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    374|    }                                                  \
  |  |  |  | 3939|  11.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  10.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  10.6k|                parse_integer_digits_with_thsep(
 3641|  10.6k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  10.6k|                    prefix_result.parsed_base, locale_options));
 3643|  10.6k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  10.6k|            parse_digits_result;
 3645|       |
 3646|  10.6k|        auto nothsep_source_view =
 3647|  10.6k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  10.6k|        SCN_TRY(
  ------------------
  |  | 3940|  10.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  10.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  10.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  10.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 232, False: 10.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    232|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    232|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    232|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    232|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    232|    }                                                  \
  |  |  |  | 3939|  10.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  10.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  10.4k|            nothsep_source_it,
 3650|  10.4k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  10.4k|                                prefix_result.parsed_base));
 3652|       |
 3653|  10.4k|        return ranges::next(
 3654|  10.4k|            prefix_result.iterator,
 3655|  10.4k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  10.4k|                ranges::ssize(thsep_indices));
 3657|  10.6k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|  45.8k|    {
 3590|  45.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  45.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  45.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  45.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  45.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 45.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  45.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  45.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  45.8k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  45.8k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 2.89k, False: 42.9k]
  ------------------
 3594|  2.89k|            if constexpr (!std::is_signed_v<T>) {
 3595|  2.89k|                return detail::unexpected_scan_error(
 3596|  2.89k|                    scan_error::invalid_scanned_value,
 3597|  2.89k|                    "Unexpected '-' sign when parsing an "
 3598|  2.89k|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|  2.89k|        }
 3609|       |
 3610|  45.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 4.80k, False: 41.0k]
  ------------------
 3611|  4.80k|            value = T{0};
 3612|  4.80k|            return std::next(prefix_result.iterator);
 3613|  4.80k|        }
 3614|       |
 3615|  41.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  41.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 29.9k, False: 11.0k]
  |  |  ------------------
  ------------------
 3616|  29.9k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  29.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  29.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  29.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  29.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 38, False: 29.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     38|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     38|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     38|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     38|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     38|    }                                                  \
  |  |  |  | 3939|  29.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|  29.9k|                    parse_integer_digits_without_thsep(
 3618|  29.9k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|  29.9k|                        prefix_result.parsed_base));
 3620|       |
 3621|  29.9k|            auto buf = make_contiguous_buffer(
 3622|  29.9k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|  29.9k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  29.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  29.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  29.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  29.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.66k, False: 26.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.66k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.66k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.66k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.66k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.66k|    }                                                  \
  |  |  |  | 3939|  29.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  26.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|  26.2k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|  26.2k|                                        prefix_result.parsed_base));
 3626|       |
 3627|  26.2k|            return ranges::next(
 3628|  26.2k|                prefix_result.iterator,
 3629|  26.2k|                ranges::distance(buf.view().begin(), result_it));
 3630|  29.9k|        }
 3631|       |
 3632|  11.0k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  11.0k|            localized_number_formatting_options<CharT>{loc};
 3637|  11.0k|#endif
 3638|       |
 3639|  11.0k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  11.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  11.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  11.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  11.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 408, False: 10.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    408|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    408|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    408|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    408|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    408|    }                                                  \
  |  |  |  | 3939|  11.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  10.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  10.6k|                parse_integer_digits_with_thsep(
 3641|  10.6k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  10.6k|                    prefix_result.parsed_base, locale_options));
 3643|  10.6k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  10.6k|            parse_digits_result;
 3645|       |
 3646|  10.6k|        auto nothsep_source_view =
 3647|  10.6k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  10.6k|        SCN_TRY(
  ------------------
  |  | 3940|  10.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  10.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  10.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  10.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 228, False: 10.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    228|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    228|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    228|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    228|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    228|    }                                                  \
  |  |  |  | 3939|  10.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  10.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  10.4k|            nothsep_source_it,
 3650|  10.4k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  10.4k|                                prefix_result.parsed_base));
 3652|       |
 3653|  10.4k|        return ranges::next(
 3654|  10.4k|            prefix_result.iterator,
 3655|  10.4k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  10.4k|                ranges::ssize(thsep_indices));
 3657|  10.6k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIjEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6226|  51.1k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|       |                          basic_contiguous_scan_context<char_type>>) {
 6231|       |            auto rd = make_reader<T, char_type>();
 6232|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6233|       |            return impl(rd, range, value);
 6234|       |        }
 6235|  51.1k|        else if constexpr (!detail::is_type_disabled<T>) {
 6236|  51.1k|            auto rd = make_reader<T, char_type>();
 6237|  51.1k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  51.1k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  51.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 51.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6238|       |
 6239|  51.1k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6239:17): [True: 51.1k, False: 0]
  |  Branch (6239:50): [True: 0, False: 0]
  ------------------
 6240|  51.1k|                specs.width != 0) {
  ------------------
  |  Branch (6240:17): [True: 0, False: 0]
  ------------------
 6241|  51.1k|                return impl(rd, range, value);
 6242|  51.1k|            }
 6243|       |
 6244|      0|            auto crange = get_as_contiguous(range);
 6245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            return ranges::next(range.begin(),
 6247|      0|                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  51.1k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6161|  51.1k|    {
 6162|  51.1k|        const bool need_skipped_width =
 6163|  51.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 51.1k]
  |  Branch (6163:33): [True: 0, False: 51.1k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  51.1k|        auto it = rng.begin();
 6167|  51.1k|        std::ptrdiff_t prefix_width = 0;
 6168|  51.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 51.1k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  51.1k|        else {
 6176|  51.1k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  51.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  51.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  51.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  51.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.39k, False: 49.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.39k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.39k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.39k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.39k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.39k|    }                                                  \
  |  |  |  | 3939|  51.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  49.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  49.7k|            std::tie(it, prefix_width) = prefix_result;
 6178|  49.7k|        }
 6179|  49.7k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  49.7k|        std::ptrdiff_t value_width = 0;
 6183|  49.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 49.7k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  49.7k|        else {
 6199|  49.7k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  49.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  49.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  49.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 6.85k, False: 42.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  6.85k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  6.85k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  6.85k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  6.85k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  6.85k|    }                                                  \
  |  | 3939|  49.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  49.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  42.8k|                                             specs, value, loc));
 6201|       |
 6202|  42.8k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 42.8k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  42.8k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  42.8k|        std::ptrdiff_t postfix_width = 0;
 6211|  42.8k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 41.9k, False: 946]
  ------------------
 6212|  41.9k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  41.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  41.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  41.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  41.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 41.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  41.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  41.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  41.9k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  41.9k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  41.9k|                                 value_width));
 6216|  41.9k|            std::tie(it, postfix_width) = postfix_result;
 6217|  41.9k|        }
 6218|       |
 6219|  42.8k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  42.8k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  42.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 42.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|  42.8k|            specs, prefix_width, value_width, postfix_width));
 6221|  42.8k|        return it;
 6222|  42.8k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3589|  49.7k|    {
 3590|  49.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  49.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  49.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  49.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  49.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 49.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  49.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  49.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  49.7k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  49.7k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 2.99k, False: 46.7k]
  ------------------
 3594|  2.99k|            if constexpr (!std::is_signed_v<T>) {
 3595|  2.99k|                return detail::unexpected_scan_error(
 3596|  2.99k|                    scan_error::invalid_scanned_value,
 3597|  2.99k|                    "Unexpected '-' sign when parsing an "
 3598|  2.99k|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|  2.99k|        }
 3609|       |
 3610|  49.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 4.98k, False: 44.7k]
  ------------------
 3611|  4.98k|            value = T{0};
 3612|  4.98k|            return std::next(prefix_result.iterator);
 3613|  4.98k|        }
 3614|       |
 3615|  44.7k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  44.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 32.7k, False: 11.9k]
  |  |  ------------------
  ------------------
 3616|  32.7k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  32.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  32.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  32.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  32.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.92k, False: 29.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.92k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.92k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.92k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.92k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.92k|    }                                                  \
  |  |  |  | 3939|  32.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  29.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|  29.8k|                    parse_integer_digits_without_thsep(
 3618|  29.8k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|  29.8k|                        prefix_result.parsed_base));
 3620|       |
 3621|  29.8k|            auto buf = make_contiguous_buffer(
 3622|  29.8k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|  29.8k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  29.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  29.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  29.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  29.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 416, False: 29.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    416|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    416|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    416|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    416|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    416|    }                                                  \
  |  |  |  | 3939|  29.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  29.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|  29.4k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|  29.4k|                                        prefix_result.parsed_base));
 3626|       |
 3627|  29.4k|            return ranges::next(
 3628|  29.4k|                prefix_result.iterator,
 3629|  29.4k|                ranges::distance(buf.view().begin(), result_it));
 3630|  29.8k|        }
 3631|       |
 3632|  11.9k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  11.9k|            localized_number_formatting_options<CharT>{loc};
 3637|  11.9k|#endif
 3638|       |
 3639|  11.9k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  11.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  11.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  11.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  11.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 406, False: 11.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    406|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    406|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    406|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    406|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    406|    }                                                  \
  |  |  |  | 3939|  11.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  11.5k|                parse_integer_digits_with_thsep(
 3641|  11.5k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  11.5k|                    prefix_result.parsed_base, locale_options));
 3643|  11.5k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  11.5k|            parse_digits_result;
 3645|       |
 3646|  11.5k|        auto nothsep_source_view =
 3647|  11.5k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  11.5k|        SCN_TRY(
  ------------------
  |  | 3940|  11.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  11.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  11.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  11.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 124, False: 11.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    124|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    124|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    124|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    124|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    124|    }                                                  \
  |  |  |  | 3939|  11.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  11.4k|            nothsep_source_it,
 3650|  11.4k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  11.4k|                                prefix_result.parsed_base));
 3652|       |
 3653|  11.4k|        return ranges::next(
 3654|  11.4k|            prefix_result.iterator,
 3655|  11.4k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  11.4k|                ranges::ssize(thsep_indices));
 3657|  11.5k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|  49.7k|    {
 3590|  49.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  49.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  49.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  49.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  49.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 49.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  49.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  49.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  49.7k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  49.7k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 2.98k, False: 46.7k]
  ------------------
 3594|  2.98k|            if constexpr (!std::is_signed_v<T>) {
 3595|  2.98k|                return detail::unexpected_scan_error(
 3596|  2.98k|                    scan_error::invalid_scanned_value,
 3597|  2.98k|                    "Unexpected '-' sign when parsing an "
 3598|  2.98k|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|  2.98k|        }
 3609|       |
 3610|  49.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 4.98k, False: 44.7k]
  ------------------
 3611|  4.98k|            value = T{0};
 3612|  4.98k|            return std::next(prefix_result.iterator);
 3613|  4.98k|        }
 3614|       |
 3615|  44.7k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  44.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 32.7k, False: 11.9k]
  |  |  ------------------
  ------------------
 3616|  32.7k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  32.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  32.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  32.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  32.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 40, False: 32.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     40|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     40|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     40|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     40|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     40|    }                                                  \
  |  |  |  | 3939|  32.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  32.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|  32.7k|                    parse_integer_digits_without_thsep(
 3618|  32.7k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|  32.7k|                        prefix_result.parsed_base));
 3620|       |
 3621|  32.7k|            auto buf = make_contiguous_buffer(
 3622|  32.7k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|  32.7k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  32.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  32.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  32.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  32.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.41k, False: 29.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.41k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.41k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.41k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.41k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.41k|    }                                                  \
  |  |  |  | 3939|  32.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  29.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|  29.3k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|  29.3k|                                        prefix_result.parsed_base));
 3626|       |
 3627|  29.3k|            return ranges::next(
 3628|  29.3k|                prefix_result.iterator,
 3629|  29.3k|                ranges::distance(buf.view().begin(), result_it));
 3630|  32.7k|        }
 3631|       |
 3632|  11.9k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  11.9k|            localized_number_formatting_options<CharT>{loc};
 3637|  11.9k|#endif
 3638|       |
 3639|  11.9k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  11.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  11.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  11.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  11.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 444, False: 11.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    444|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    444|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    444|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    444|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    444|    }                                                  \
  |  |  |  | 3939|  11.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  11.5k|                parse_integer_digits_with_thsep(
 3641|  11.5k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  11.5k|                    prefix_result.parsed_base, locale_options));
 3643|  11.5k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  11.5k|            parse_digits_result;
 3645|       |
 3646|  11.5k|        auto nothsep_source_view =
 3647|  11.5k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  11.5k|        SCN_TRY(
  ------------------
  |  | 3940|  11.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  11.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  11.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  11.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 122, False: 11.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    122|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    122|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    122|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    122|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    122|    }                                                  \
  |  |  |  | 3939|  11.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  11.4k|            nothsep_source_it,
 3650|  11.4k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  11.4k|                                prefix_result.parsed_base));
 3652|       |
 3653|  11.4k|        return ranges::next(
 3654|  11.4k|            prefix_result.iterator,
 3655|  11.4k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  11.4k|                ranges::ssize(thsep_indices));
 3657|  11.5k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIyEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6226|  51.6k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|       |                          basic_contiguous_scan_context<char_type>>) {
 6231|       |            auto rd = make_reader<T, char_type>();
 6232|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6233|       |            return impl(rd, range, value);
 6234|       |        }
 6235|  51.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 6236|  51.6k|            auto rd = make_reader<T, char_type>();
 6237|  51.6k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  51.6k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  51.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 51.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6238|       |
 6239|  51.6k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6239:17): [True: 51.6k, False: 0]
  |  Branch (6239:50): [True: 0, False: 0]
  ------------------
 6240|  51.6k|                specs.width != 0) {
  ------------------
  |  Branch (6240:17): [True: 0, False: 0]
  ------------------
 6241|  51.6k|                return impl(rd, range, value);
 6242|  51.6k|            }
 6243|       |
 6244|      0|            auto crange = get_as_contiguous(range);
 6245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            return ranges::next(range.begin(),
 6247|      0|                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  51.6k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6161|  51.6k|    {
 6162|  51.6k|        const bool need_skipped_width =
 6163|  51.6k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 51.6k]
  |  Branch (6163:33): [True: 0, False: 51.6k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  51.6k|        auto it = rng.begin();
 6167|  51.6k|        std::ptrdiff_t prefix_width = 0;
 6168|  51.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 51.6k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  51.6k|        else {
 6176|  51.6k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  51.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  51.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  51.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  51.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.50k, False: 50.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.50k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.50k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.50k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.50k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.50k|    }                                                  \
  |  |  |  | 3939|  51.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  50.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  50.1k|            std::tie(it, prefix_width) = prefix_result;
 6178|  50.1k|        }
 6179|  50.1k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  50.1k|        std::ptrdiff_t value_width = 0;
 6183|  50.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 50.1k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  50.1k|        else {
 6199|  50.1k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  50.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  50.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  50.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 6.74k, False: 43.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  6.74k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  6.74k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  6.74k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  6.74k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  6.74k|    }                                                  \
  |  | 3939|  50.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  50.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  43.4k|                                             specs, value, loc));
 6201|       |
 6202|  43.4k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 43.4k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  43.4k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  43.4k|        std::ptrdiff_t postfix_width = 0;
 6211|  43.4k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 42.3k, False: 1.05k]
  ------------------
 6212|  42.3k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  42.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  42.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  42.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  42.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 42.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  42.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  42.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  42.3k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  42.3k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  42.3k|                                 value_width));
 6216|  42.3k|            std::tie(it, postfix_width) = postfix_result;
 6217|  42.3k|        }
 6218|       |
 6219|  43.4k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  43.4k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  43.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 43.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|  43.4k|            specs, prefix_width, value_width, postfix_width));
 6221|  43.4k|        return it;
 6222|  43.4k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3589|  50.1k|    {
 3590|  50.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  50.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  50.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  50.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  50.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 50.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  50.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  50.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  50.1k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  50.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 3.07k, False: 47.0k]
  ------------------
 3594|  3.07k|            if constexpr (!std::is_signed_v<T>) {
 3595|  3.07k|                return detail::unexpected_scan_error(
 3596|  3.07k|                    scan_error::invalid_scanned_value,
 3597|  3.07k|                    "Unexpected '-' sign when parsing an "
 3598|  3.07k|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|  3.07k|        }
 3609|       |
 3610|  50.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 4.99k, False: 45.1k]
  ------------------
 3611|  4.99k|            value = T{0};
 3612|  4.99k|            return std::next(prefix_result.iterator);
 3613|  4.99k|        }
 3614|       |
 3615|  45.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  45.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 33.0k, False: 12.1k]
  |  |  ------------------
  ------------------
 3616|  33.0k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  33.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  33.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  33.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  33.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.97k, False: 30.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.97k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.97k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.97k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.97k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.97k|    }                                                  \
  |  |  |  | 3939|  33.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  30.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|  30.0k|                    parse_integer_digits_without_thsep(
 3618|  30.0k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|  30.0k|                        prefix_result.parsed_base));
 3620|       |
 3621|  30.0k|            auto buf = make_contiguous_buffer(
 3622|  30.0k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|  30.0k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  30.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  30.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  30.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  30.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 214, False: 29.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    214|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    214|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    214|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    214|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    214|    }                                                  \
  |  |  |  | 3939|  30.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  29.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|  29.8k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|  29.8k|                                        prefix_result.parsed_base));
 3626|       |
 3627|  29.8k|            return ranges::next(
 3628|  29.8k|                prefix_result.iterator,
 3629|  29.8k|                ranges::distance(buf.view().begin(), result_it));
 3630|  30.0k|        }
 3631|       |
 3632|  12.1k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  12.1k|            localized_number_formatting_options<CharT>{loc};
 3637|  12.1k|#endif
 3638|       |
 3639|  12.1k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 426, False: 11.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    426|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    426|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    426|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    426|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    426|    }                                                  \
  |  |  |  | 3939|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  11.7k|                parse_integer_digits_with_thsep(
 3641|  11.7k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  11.7k|                    prefix_result.parsed_base, locale_options));
 3643|  11.7k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  11.7k|            parse_digits_result;
 3645|       |
 3646|  11.7k|        auto nothsep_source_view =
 3647|  11.7k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  11.7k|        SCN_TRY(
  ------------------
  |  | 3940|  11.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  11.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  11.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 60, False: 11.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     60|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     60|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     60|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     60|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     60|    }                                                  \
  |  |  |  | 3939|  11.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  11.6k|            nothsep_source_it,
 3650|  11.6k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  11.6k|                                prefix_result.parsed_base));
 3652|       |
 3653|  11.6k|        return ranges::next(
 3654|  11.6k|            prefix_result.iterator,
 3655|  11.6k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  11.6k|                ranges::ssize(thsep_indices));
 3657|  11.7k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|  50.2k|    {
 3590|  50.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  50.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  50.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  50.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  50.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 50.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  50.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  50.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  50.2k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  50.2k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 3.07k, False: 47.1k]
  ------------------
 3594|  3.07k|            if constexpr (!std::is_signed_v<T>) {
 3595|  3.07k|                return detail::unexpected_scan_error(
 3596|  3.07k|                    scan_error::invalid_scanned_value,
 3597|  3.07k|                    "Unexpected '-' sign when parsing an "
 3598|  3.07k|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|  3.07k|        }
 3609|       |
 3610|  50.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 4.99k, False: 45.2k]
  ------------------
 3611|  4.99k|            value = T{0};
 3612|  4.99k|            return std::next(prefix_result.iterator);
 3613|  4.99k|        }
 3614|       |
 3615|  45.2k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  45.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 33.0k, False: 12.1k]
  |  |  ------------------
  ------------------
 3616|  33.0k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  33.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  33.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  33.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  33.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 40, False: 33.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     40|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     40|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     40|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     40|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     40|    }                                                  \
  |  |  |  | 3939|  33.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  33.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|  33.0k|                    parse_integer_digits_without_thsep(
 3618|  33.0k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|  33.0k|                        prefix_result.parsed_base));
 3620|       |
 3621|  33.0k|            auto buf = make_contiguous_buffer(
 3622|  33.0k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|  33.0k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  33.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  33.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  33.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  33.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.27k, False: 29.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.27k|    }                                                  \
  |  |  |  | 3939|  33.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  29.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|  29.7k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|  29.7k|                                        prefix_result.parsed_base));
 3626|       |
 3627|  29.7k|            return ranges::next(
 3628|  29.7k|                prefix_result.iterator,
 3629|  29.7k|                ranges::distance(buf.view().begin(), result_it));
 3630|  33.0k|        }
 3631|       |
 3632|  12.1k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  12.1k|            localized_number_formatting_options<CharT>{loc};
 3637|  12.1k|#endif
 3638|       |
 3639|  12.1k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 466, False: 11.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    466|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    466|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    466|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    466|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    466|    }                                                  \
  |  |  |  | 3939|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  11.7k|                parse_integer_digits_with_thsep(
 3641|  11.7k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  11.7k|                    prefix_result.parsed_base, locale_options));
 3643|  11.7k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  11.7k|            parse_digits_result;
 3645|       |
 3646|  11.7k|        auto nothsep_source_view =
 3647|  11.7k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  11.7k|        SCN_TRY(
  ------------------
  |  | 3940|  11.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  11.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  11.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 58, False: 11.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     58|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     58|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     58|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     58|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     58|    }                                                  \
  |  |  |  | 3939|  11.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  11.6k|            nothsep_source_it,
 3650|  11.6k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  11.6k|                                prefix_result.parsed_base));
 3652|       |
 3653|  11.6k|        return ranges::next(
 3654|  11.6k|            prefix_result.iterator,
 3655|  11.6k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  11.6k|                ranges::ssize(thsep_indices));
 3657|  11.7k|    }
_ZN3scn2v44impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1039|   422k|{
 1040|       |    if constexpr (ranges::contiguous_range<Range> &&
 1041|       |                  ranges::sized_range<Range>) {
 1042|       |        return r;
 1043|       |    }
 1044|       |    else if constexpr (std::is_same_v<
 1045|       |                           ranges::const_iterator_t<Range>,
 1046|       |                           typename detail::basic_scan_buffer<
 1047|   422k|                               detail::char_t<Range>>::forward_iterator>) {
 1048|       |        if constexpr (ranges::common_range<Range>) {
 1049|       |            auto seg = r.begin().contiguous_segment();
 1050|       |            auto dist =
 1051|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1052|       |            return seg.substr(0, std::min(seg.size(), dist));
 1053|       |        }
 1054|   422k|        else {
 1055|   422k|            return r.begin().contiguous_segment();
 1056|   422k|        }
 1057|       |    }
 1058|       |    else {
 1059|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1060|       |    }
 1061|   422k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|   399k|{
 2160|   399k|    auto it = range.begin();
 2161|   784k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 774k, False: 10.1k]
  ------------------
 2162|   774k|        const auto val =
 2163|   774k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|   774k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|   774k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 772k, False: 1.70k]
  |  |  ------------------
  ------------------
 2165|   772k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|   772k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|   772k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 389k, False: 383k]
  ------------------
 2168|   389k|                return it;
 2169|   389k|            }
 2170|   772k|        }
 2171|   385k|        it = val.iterator;
 2172|   385k|    }
 2173|       |
 2174|  10.1k|    return it;
 2175|   399k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|   774k|{
 1998|   774k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|   774k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   774k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   774k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   774k|    auto it = range.begin();
 2002|   774k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   774k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   774k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.70k, False: 772k]
  |  |  ------------------
  ------------------
 2005|  1.70k|        ++it;
 2006|  1.70k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|  1.70k|        return {it, {}};
 2008|  1.70k|    }
 2009|       |
 2010|   772k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 767k, False: 4.89k]
  ------------------
 2011|   767k|        ++it;
 2012|   767k|        return {it, string_type(1, *range.begin())};
 2013|   767k|    }
 2014|       |
 2015|  4.89k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|  4.89k|    return {it, string_type{range.begin(), it}};
 2017|   772k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1264|  1.70k|{
 1265|  1.70k|    auto it = input.begin();
 1266|  2.86k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 2.03k, False: 825]
  ------------------
 1267|  2.03k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 882, False: 1.15k]
  ------------------
 1268|    882|            break;
 1269|    882|        }
 1270|  2.03k|    }
 1271|  1.70k|    return it;
 1272|  1.70k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  4.89k|    {
  283|  4.89k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  4.89k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  4.89k|    {
  252|  4.89k|        constexpr iter_difference_t<I> zero{0};
  253|  4.89k|        iter_difference_t<I> counter{0};
  254|       |
  255|  16.4k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 12.6k, False: 3.77k]
  |  Branch (255:30): [True: 11.5k, False: 1.11k]
  ------------------
  256|  11.5k|            ++i;
  257|  11.5k|            ++counter;
  258|  11.5k|        }
  259|       |
  260|  4.89k|        return counter;
  261|  4.89k|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1988|   774k|    {
 1989|   774k|        return !codepoint.empty();
 1990|   774k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|   399k|{
 2181|   399k|    return read_until_code_point(range, std::not_fn(pred));
 2182|   399k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3065|   422k|{
 3066|   422k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 422k, False: 0]
  ------------------
 3067|   422k|        auto it = read_while_classic_space(range);
 3068|   422k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|   422k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   422k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.1k, False: 412k]
  |  |  ------------------
  ------------------
 3070|  10.1k|            return unexpected(e);
 3071|  10.1k|        }
 3072|       |
 3073|   412k|        return it;
 3074|   422k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|   422k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|   422k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|   422k|    else {
 2225|   422k|        auto it = range.begin();
 2226|       |
 2227|   422k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|   422k|            auto seg = get_contiguous_beginning(range);
 2229|   422k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|   422k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2230:17): [True: 23.2k, False: 399k]
  ------------------
 2231|  23.2k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|  23.2k|            }
 2233|   399k|            ranges::advance(it, seg.size());
 2234|   399k|        }
 2235|       |
 2236|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   422k|            return detail::is_cp_space(cp);
 2238|   422k|        });
 2239|   422k|    }
 2240|   422k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   399k|        : m_fptr([](storage fn,
  743|   399k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   399k|              cvref<T> obj = *get<T>(fn);
  745|   399k|              if constexpr (std::is_void_v<R>) {
  746|   399k|                  obj(static_cast<decltype(args)>(args)...);
  747|   399k|              }
  748|   399k|              else {
  749|   399k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   399k|              }
  751|   399k|          }),
  752|   399k|          m_storage(std::addressof(f))
  753|   399k|    {
  754|   399k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   772k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   772k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   772k|              else {
  749|   772k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   772k|              }
  751|   772k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   772k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   772k|        else if constexpr (std::is_object_v<T>) {
  688|   772k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   772k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|   772k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   772k|            return detail::is_cp_space(cp);
 2238|   772k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   399k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   399k|        {
  662|   399k|        }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  981|   132k|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|       |                  ranges::sized_range<Range>) {
  984|       |        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|   132k|                               detail::char_t<Range>>::forward_iterator>) {
  990|   132k|        auto beg = r.begin();
  991|   132k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (991:13): [True: 132k, False: 0]
  ------------------
  992|   132k|            return false;
  993|   132k|        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|      0|        else {
  999|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (999:17): [True: 0, False: 0]
  ------------------
 1000|      0|                return beg.contiguous_segment().end() ==
 1001|      0|                       beg.parent()->current_view().end();
 1002|      0|            }
 1003|      0|            return true;
 1004|      0|        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|   132k|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1955|   100k|{
 1956|   100k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|   100k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   100k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|   100k|    else {
 1967|   100k|        auto it = range.begin();
 1968|   100k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 80.6k, False: 19.5k]
  ------------------
 1969|  80.6k|            return ranges::next(it, count);
 1970|  80.6k|        }
 1971|       |
 1972|  39.4k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 38.8k, False: 652]
  ------------------
 1973|  38.8k|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 18.8k, False: 19.9k]
  ------------------
 1974|  18.8k|                return unexpected(eof_error::eof);
 1975|  18.8k|            }
 1976|  38.8k|        }
 1977|       |
 1978|    652|        return it;
 1979|  19.5k|    }
 1980|   100k|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1095|   100k|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|   100k|                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|   100k|        else {
 1107|   100k|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1107:17): [True: 100k, False: 0]
  ------------------
 1108|   100k|                return static_cast<size_t>(
 1109|   100k|                    r.begin().parent()->chars_available() -
 1110|   100k|                    r.begin().position());
 1111|   100k|            }
 1112|      0|            return r.begin().contiguous_segment().size();
 1113|   100k|        }
 1114|       |    }
 1115|       |    else {
 1116|       |        return 0;
 1117|       |    }
 1118|   100k|}
_ZNK3scn2v44impl12function_refIFbwES3_EclEw:
  762|   233k|    {
  763|   233k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|   233k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   233k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|   107k|        : m_fptr([](storage fn,
  743|   107k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   107k|              cvref<T> obj = *get<T>(fn);
  745|   107k|              if constexpr (std::is_void_v<R>) {
  746|   107k|                  obj(static_cast<decltype(args)>(args)...);
  747|   107k|              }
  748|   107k|              else {
  749|   107k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   107k|              }
  751|   107k|          }),
  752|   107k|          m_storage(std::addressof(f))
  753|   107k|    {
  754|   107k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|   116k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   116k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   116k|              else {
  749|   116k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   116k|              }
  751|   116k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|   116k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   116k|        else if constexpr (std::is_object_v<T>) {
  688|   116k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   116k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|   107k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   107k|        {
  662|   107k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 6074|   106k|    {
 6075|   106k|        const bool need_skipped_width =
 6076|   106k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6076:13): [True: 0, False: 106k]
  |  Branch (6076:33): [True: 0, False: 106k]
  ------------------
 6077|   106k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6078|       |
 6079|       |        // Read prefix
 6080|   106k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6080:13): [True: 0, False: 106k]
  ------------------
 6081|   106k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6081:13): [True: 0, False: 106k]
  ------------------
 6082|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6083|      0|                             need_skipped_width);
 6084|      0|        }
 6085|   106k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6085:13): [True: 106k, False: 0]
  |  Branch (6085:56): [True: 106k, False: 0]
  ------------------
 6086|       |            // Default alignment:
 6087|       |            // Skip preceding whitespace, if required by the reader
 6088|   106k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6088:17): [True: 0, False: 106k]
  ------------------
 6089|      0|                auto max_width_view = take_width(rng, specs.precision);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6093|      0|            }
 6094|   212k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|   106k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   106k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   106k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.45k, False: 105k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.45k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.45k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.45k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.45k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.45k|    }                                                  \
  |  |  |  | 3939|   106k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|   212k|                            make_eof_scan_error));
 6096|       |
 6097|   212k|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 105k]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|   105k|            return result_type{it, 0};
 6105|   212k|        }
 6106|       |
 6107|      0|        return result_type{rng.begin(), 0};
 6108|   106k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|   107k|{
 2075|   107k|    return read_until_code_unit(range, std::not_fn(pred));
 2076|   107k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2055|   107k|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|   107k|    else {
 2060|   107k|        auto first = range.begin();
 2061|   117k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 116k, False: 630]
  ------------------
 2062|   116k|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 106k, False: 9.68k]
  ------------------
 2063|   106k|                return first;
 2064|   106k|            }
 2065|   116k|        }
 2066|    630|        return first;
 2067|   107k|    }
 2068|   107k|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  33.8M|    {
  108|  33.8M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  33.8M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  33.8M|    {
   94|  33.8M|        iter_difference_t<I> counter{0};
   95|  69.3G|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 69.2G, False: 33.8M]
  ------------------
   96|  69.2G|            ++i;
   97|  69.2G|            ++counter;
   98|  69.2G|        }
   99|  33.8M|        return counter;
  100|  33.8M|    }
_ZN3scn2v44impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1878|  38.6k|    {
 1879|  38.6k|        auto stdloc = loc.get<std::locale>();
 1880|  38.6k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1881|  38.6k|        grouping = numpunct.grouping();
 1882|  38.6k|        thousands_sep =
 1883|  38.6k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1883:13): [True: 0, False: 38.6k]
  ------------------
 1884|  38.6k|        decimal_point = numpunct.decimal_point();
 1885|  38.6k|    }
_ZN3scn2v44impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1815|  38.6k|{
 1816|  38.6k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1816:9): [True: 38.6k, False: 0]
  ------------------
 1817|  38.6k|        return std::use_facet<Facet>(stdloc);
 1818|  38.6k|    }
 1819|      0|    stdloc = std::locale(stdloc, new Facet{});
 1820|      0|    return std::use_facet<Facet>(stdloc);
 1821|  38.6k|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1944|   163k|{
 1945|   163k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   163k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 72, False: 163k]
  |  |  ------------------
  ------------------
 1946|     72|        return unexpected(e);
 1947|     72|    }
 1948|       |
 1949|   163k|    return ranges::next(range.begin());
 1950|   163k|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|   321k|{
  951|   321k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|   321k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.86k, False: 319k]
  |  |  ------------------
  ------------------
  952|  1.86k|        return eof_error::eof;
  953|  1.86k|    }
  954|   319k|    return eof_error::good;
  955|   321k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|   454k|{
  945|   454k|    return is_range_eof(r.begin(), r.end());
  946|   454k|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|   454k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   454k|    {
  938|   454k|        return begin == end;
  939|   454k|    }
  940|   454k|}
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|   163k|    {
  296|   163k|        ++x;
  297|   163k|        return x;
  298|   163k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3589|  18.0k|    {
 3590|  18.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  18.0k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  18.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 1.57k, False: 16.4k]
  ------------------
 3594|       |            if constexpr (!std::is_signed_v<T>) {
 3595|       |                return detail::unexpected_scan_error(
 3596|       |                    scan_error::invalid_scanned_value,
 3597|       |                    "Unexpected '-' sign when parsing an "
 3598|       |                    "unsigned value");
 3599|       |            }
 3600|  1.57k|            else {
 3601|  1.57k|                if (specs.type ==
  ------------------
  |  Branch (3601:21): [True: 0, False: 1.57k]
  ------------------
 3602|  1.57k|                    detail::presentation_type::int_unsigned_decimal) {
 3603|      0|                    return detail::unexpected_scan_error(
 3604|      0|                        scan_error::invalid_scanned_value,
 3605|      0|                        "'u'-option disallows negative values");
 3606|      0|                }
 3607|  1.57k|            }
 3608|  1.57k|        }
 3609|       |
 3610|  18.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 38, False: 18.0k]
  ------------------
 3611|     38|            value = T{0};
 3612|     38|            return std::next(prefix_result.iterator);
 3613|     38|        }
 3614|       |
 3615|  18.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  18.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 13.8k, False: 4.15k]
  |  |  ------------------
  ------------------
 3616|  13.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  13.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 13.5k, False: 352]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  13.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  13.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  13.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  13.5k|    }                                                  \
  |  |  |  | 3939|  13.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    352|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|    352|                    parse_integer_digits_without_thsep(
 3618|    352|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|    352|                        prefix_result.parsed_base));
 3620|       |
 3621|    352|            auto buf = make_contiguous_buffer(
 3622|    352|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|    352|            SCN_TRY(result_it,
  ------------------
  |  | 3940|    352|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    352|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    352|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    352|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 44, False: 308]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     44|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     44|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     44|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     44|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     44|    }                                                  \
  |  |  |  | 3939|    352|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    308|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|    308|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|    308|                                        prefix_result.parsed_base));
 3626|       |
 3627|    308|            return ranges::next(
 3628|    308|                prefix_result.iterator,
 3629|    308|                ranges::distance(buf.view().begin(), result_it));
 3630|    352|        }
 3631|       |
 3632|  4.15k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  4.15k|            localized_number_formatting_options<CharT>{loc};
 3637|  4.15k|#endif
 3638|       |
 3639|  4.15k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  4.15k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.15k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.15k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.67k, False: 1.47k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.67k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.67k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.67k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.67k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.67k|    }                                                  \
  |  |  |  | 3939|  4.15k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  1.47k|                parse_integer_digits_with_thsep(
 3641|  1.47k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  1.47k|                    prefix_result.parsed_base, locale_options));
 3643|  1.47k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  1.47k|            parse_digits_result;
 3645|       |
 3646|  1.47k|        auto nothsep_source_view =
 3647|  1.47k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  1.47k|        SCN_TRY(
  ------------------
  |  | 3940|  1.47k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.47k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.47k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12, False: 1.46k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     12|    }                                                  \
  |  |  |  | 3939|  1.47k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  1.46k|            nothsep_source_it,
 3650|  1.46k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  1.46k|                                prefix_result.parsed_base));
 3652|       |
 3653|  1.46k|        return ranges::next(
 3654|  1.46k|            prefix_result.iterator,
 3655|  1.46k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  1.46k|                ranges::ssize(thsep_indices));
 3657|  1.47k|    }
_ZN3scn2v44impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESH_i:
 3376|   130k|{
 3377|   130k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3940|   130k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   130k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   130k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 130k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   130k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   130k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3378|   130k|    auto [base_prefix_begin_it, sign] = sign_result;
 3379|       |
 3380|   130k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3381|   130k|        parse_integer_base_prefix(
 3382|   130k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3383|       |
 3384|   130k|    if (parsed_zero) {
  ------------------
  |  Branch (3384:9): [True: 328, False: 130k]
  ------------------
 3385|    328|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3385:13): [True: 24, False: 304]
  ------------------
 3386|    328|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3386:13): [True: 208, False: 96]
  ------------------
 3387|    232|            digits_begin_it = base_prefix_begin_it;
 3388|    232|        }
 3389|     96|        else {
 3390|     96|            parsed_zero = false;
 3391|     96|        }
 3392|    328|    }
 3393|   130k|    else {
 3394|   130k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3394:13): [True: 278, False: 130k]
  ------------------
 3395|   130k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3395:13): [True: 126k, False: 3.49k]
  ------------------
 3396|   126k|            digits_begin_it = base_prefix_begin_it;
 3397|   126k|        }
 3398|   130k|    }
 3399|       |
 3400|   130k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3400:9): [True: 123k, False: 7.22k]
  ------------------
 3401|   123k|        sign = sign_type::plus_sign;
 3402|   123k|    }
 3403|   130k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3404|   130k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3405|   130k|}
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3257|   130k|{
 3258|   130k|    auto r = read_one_of_code_unit(range, "+-");
 3259|   130k|    if (!r) {
  ------------------
  |  Branch (3259:9): [True: 123k, False: 7.22k]
  ------------------
 3260|   123k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3260:13): [True: 123k, False: 0]
  ------------------
 3261|   123k|            return std::pair{range.begin(), sign_type::default_sign};
 3262|   123k|        }
 3263|      0|        return unexpected(eof_error::eof);
 3264|   123k|    }
 3265|       |
 3266|  7.22k|    auto& it = *r;
 3267|  7.22k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3267:9): [True: 7.04k, False: 179]
  ------------------
 3268|  7.04k|        return std::pair{it, sign_type::minus_sign};
 3269|  7.04k|    }
 3270|    179|    return std::pair{it, sign_type::plus_sign};
 3271|  7.22k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2371|   130k|{
 2372|   130k|    auto it = read_code_unit(range);
 2373|   130k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 130k]
  |  |  ------------------
  ------------------
 2374|      0|        return unexpected(make_eof_parse_error(it.error()));
 2375|      0|    }
 2376|       |
 2377|   261k|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 261k, False: 123k]
  ------------------
 2378|   261k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 7.22k, False: 253k]
  ------------------
 2379|  7.22k|            return *it;
 2380|  7.22k|        }
 2381|   261k|    }
 2382|       |
 2383|   123k|    return unexpected(parse_error::error);
 2384|   130k|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEEibEEESG_i:
 3343|   130k|{
 3344|   130k|    switch (base) {
 3345|  16.5k|        case 2:
  ------------------
  |  Branch (3345:9): [True: 16.5k, False: 114k]
  ------------------
 3346|       |            // allow 0b/0B
 3347|  16.5k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3348|  16.5k|                    false};
 3349|       |
 3350|  16.5k|        case 8: {
  ------------------
  |  Branch (3350:9): [True: 16.5k, False: 114k]
  ------------------
 3351|       |            // allow 0o/0O/0
 3352|  16.5k|            bool zero_parsed = false;
 3353|  16.5k|            auto it = apply_opt(
 3354|  16.5k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3355|  16.5k|            return {it, 8, zero_parsed};
 3356|      0|        }
 3357|       |
 3358|  16.7k|        case 16:
  ------------------
  |  Branch (3358:9): [True: 16.7k, False: 113k]
  ------------------
 3359|       |            // allow 0x/0X
 3360|  16.7k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3361|  16.7k|                    false};
 3362|       |
 3363|  16.7k|        case 0:
  ------------------
  |  Branch (3363:9): [True: 16.7k, False: 113k]
  ------------------
 3364|       |            // detect base
 3365|  16.7k|            return parse_integer_base_prefix_for_detection(range);
 3366|       |
 3367|  64.0k|        default:
  ------------------
  |  Branch (3367:9): [True: 64.0k, False: 66.6k]
  ------------------
 3368|       |            // no base prefix allowed
 3369|  64.0k|            return {range.begin(), base, false};
 3370|   130k|    }
 3371|   130k|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEENS1_14parse_expectedESA_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEE4typeEOSI_SK_:
 2390|  49.8k|{
 2391|  49.8k|    if (!result) {
  ------------------
  |  Branch (2391:9): [True: 49.7k, False: 156]
  ------------------
 2392|  49.7k|        return range.begin();
 2393|  49.7k|    }
 2394|    156|    return *result;
 2395|  49.8k|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 3294|  33.3k|{
 3295|  33.3k|    return read_matching_string_classic_nocase(range, "0b");
 3296|  33.3k|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2330|   100k|{
 2331|   100k|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|       |                  std::is_same_v<char_type, char>) {
 2335|       |        if (range.size() < str.size()) {
 2336|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|       |        }
 2338|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2339|       |            return unexpected(parse_error::error);
 2340|       |        }
 2341|       |        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|   100k|    else {
 2344|   100k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|   100k|            if (ch < 'A' || ch > 'Z') {
 2346|   100k|                return ch;
 2347|   100k|            }
 2348|   100k|            return static_cast<char_type>(ch +
 2349|   100k|                                          static_cast<char_type>('a' - 'A'));
 2350|   100k|        };
 2351|       |
 2352|   100k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|   100k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   100k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   100k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 18.8k, False: 81.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  18.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  18.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  18.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  18.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  18.8k|    }                                                  \
  |  |  |  | 3939|   100k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  81.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2353|  81.2k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|  81.2k|                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|  81.2k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  865|  81.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 81.2k, False: 0]
  |  |  ------------------
  ------------------
 2357|  81.2k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|  81.2k|                    return ascii_tolower(a) ==
 2359|  81.2k|                           static_cast<detail::char_t<Range>>(b);
 2360|  81.2k|                }))) {
 2361|  81.2k|            return unexpected(parse_error::error);
 2362|  81.2k|        }
 2363|       |
 2364|      0|        return it;
 2365|  81.2k|    }
 2366|   100k|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlwE_clEw:
 2344|  82.2k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  82.2k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2345:17): [True: 54.7k, False: 27.4k]
  |  Branch (2345:29): [True: 27.1k, False: 288]
  ------------------
 2346|  81.9k|                return ch;
 2347|  81.9k|            }
 2348|    288|            return static_cast<char_type>(ch +
 2349|    288|                                          static_cast<char_type>('a' - 'A'));
 2350|  82.2k|        };
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 3308|  33.3k|{
 3309|  33.3k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3309:14): [True: 0, False: 33.3k]
  ------------------
 3310|      0|        return *r;
 3311|      0|    }
 3312|       |
 3313|  33.3k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3313:14): [True: 328, False: 33.0k]
  ------------------
 3314|    328|        zero_parsed = true;
 3315|    328|        return *r;
 3316|    328|    }
 3317|       |
 3318|  33.0k|    return unexpected(parse_error::error);
 3319|  33.3k|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2245|  33.3k|{
 2246|  33.3k|    auto it = read_code_unit(range);
 2247|  33.3k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  33.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 72, False: 33.2k]
  |  |  ------------------
  ------------------
 2248|     72|        return unexpected(make_eof_parse_error(it.error()));
 2249|     72|    }
 2250|       |
 2251|  33.2k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|  33.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 32.9k, False: 328]
  |  |  ------------------
  ------------------
 2252|  33.2k|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|  32.9k|        return unexpected(parse_error::error);
 2254|  32.9k|    }
 2255|       |
 2256|    328|    return *it;
 2257|  33.2k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 3301|  33.4k|{
 3302|  33.4k|    return read_matching_string_classic_nocase(range, "0x");
 3303|  33.4k|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEEibEEESG_:
 3324|  16.7k|{
 3325|  16.7k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3325:14): [True: 0, False: 16.7k]
  ------------------
 3326|      0|        return {*r, 16, false};
 3327|      0|    }
 3328|  16.7k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3328:14): [True: 0, False: 16.7k]
  ------------------
 3329|      0|        return {*r, 2, false};
 3330|      0|    }
 3331|  16.7k|    {
 3332|  16.7k|        bool zero_parsed{false};
 3333|  16.7k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3333:18): [True: 172, False: 16.5k]
  ------------------
 3334|    172|            return {*r, 8, zero_parsed};
 3335|    172|        }
 3336|  16.7k|    }
 3337|  16.5k|    return {range.begin(), 10, false};
 3338|  16.7k|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_i:
 3410|   107k|{
 3411|   107k|    using char_type = detail::char_t<Range>;
 3412|       |
 3413|       |    if constexpr (ranges::contiguous_range<Range>) {
 3414|       |        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3415|       |            return detail::unexpected_scan_error(
 3416|       |                scan_error::invalid_scanned_value,
 3417|       |                "Failed to parse integer: No digits found");
 3418|       |        }
 3419|       |        return range.end();
 3420|       |    }
 3421|   107k|    else {
 3422|   107k|        return read_while1_code_unit(range,
 3423|   107k|                                     [&](char_type ch) noexcept {
 3424|   107k|                                         return char_to_int(ch) < base;
 3425|   107k|                                     })
 3426|   107k|            .transform_error(map_parse_error_to_scan_error(
 3427|   107k|                scan_error::invalid_scanned_value,
 3428|   107k|                "Failed to parse integer: No digits found"));
 3429|   107k|    }
 3430|   107k|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 2094|   107k|{
 2095|   107k|    auto it = read_while_code_unit(range, pred);
 2096|   107k|    if (it == range.begin()) {
  ------------------
  |  Branch (2096:9): [True: 104k, False: 2.75k]
  ------------------
 2097|   104k|        return unexpected(parse_error::error);
 2098|   104k|    }
 2099|  2.75k|    return it;
 2100|   107k|}
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlwE_SQ_TnPNSI_9enable_ifIXaaaasr6detailE11is_not_selfISK_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSS_EEvE4typeELPv0EEEOSK_:
  742|   107k|        : m_fptr([](storage fn,
  743|   107k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   107k|              cvref<T> obj = *get<T>(fn);
  745|   107k|              if constexpr (std::is_void_v<R>) {
  746|   107k|                  obj(static_cast<decltype(args)>(args)...);
  747|   107k|              }
  748|   107k|              else {
  749|   107k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   107k|              }
  751|   107k|          }),
  752|   107k|          m_storage(std::addressof(f))
  753|   107k|    {
  754|   107k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlwE_SQ_TnPNSI_9enable_ifIXaaaasr6detailE11is_not_selfISK_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSS_EEvE4typeELPv0EEEOSK_ENKUlNS1_12fnref_detail4base7storageEwE_clES11_w:
  743|   116k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   116k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   116k|              else {
  749|   116k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   116k|              }
  751|   116k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_iEUlwE_EEDaNS3_7storageE:
  683|   116k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   116k|        else if constexpr (std::is_object_v<T>) {
  688|   116k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   116k|    }
_ZZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_iENKUlwE_clEw:
 3423|   116k|                                     [&](char_type ch) noexcept {
 3424|   116k|                                         return char_to_int(ch) < base;
 3425|   116k|                                     })
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlwE_TnPNSI_9enable_ifIXsr3stdE11is_object_vISK_EEvE4typeELPv0EEEPSK_:
  660|   107k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   107k|        {
  662|   107k|        }
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENSE_12basic_stringIT0_NSE_11char_traitsISN_EENSE_9allocatorISN_EEEENSM_IcNSO_IcEENSQ_IcEEEEEEEEESH_iRKNS1_35localized_number_formatting_optionsISN_EE:
 3440|  19.3k|{
 3441|  19.3k|    std::basic_string<CharT> output;
 3442|  19.3k|    std::string thsep_indices;
 3443|  19.3k|    auto it = range.begin();
 3444|  19.3k|    bool digit_matched = false;
 3445|  33.8M|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3445:12): [True: 33.8M, False: 352]
  ------------------
 3446|  33.8M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3446:13): [True: 33.8M, False: 53.9k]
  ------------------
 3447|  33.8M|            thsep_indices.push_back(
 3448|  33.8M|                static_cast<char>(ranges::distance(range.begin(), it)));
 3449|  33.8M|        }
 3450|  53.9k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3450:18): [True: 18.9k, False: 34.9k]
  ------------------
 3451|  18.9k|            break;
 3452|  18.9k|        }
 3453|  34.9k|        else {
 3454|  34.9k|            output.push_back(*it);
 3455|  34.9k|            digit_matched = true;
 3456|  34.9k|        }
 3457|  33.8M|    }
 3458|  19.3k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  865|  19.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.5k, False: 8.79k]
  |  |  ------------------
  ------------------
 3459|  10.5k|        return detail::unexpected_scan_error(
 3460|  10.5k|            scan_error::invalid_scanned_value,
 3461|  10.5k|            "Failed to parse integer: No digits found");
 3462|  10.5k|    }
 3463|  8.79k|    return std::tuple{it, output, thsep_indices};
 3464|  19.3k|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_EEEEDaOT_:
 1781|  2.75k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|       |                  ranges::sized_range<Range>) {
 1785|       |        return string_view_wrapper{SCN_FWD(range)};
 1786|       |    }
 1787|  2.75k|    else {
 1788|  2.75k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  936|  2.75k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1789|  2.75k|    }
 1790|  2.75k|}
_ZN3scn2v44impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1635|  2.75k|    {
 1636|  2.75k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|  2.75k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1637|  2.75k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1719|  2.75k|    {
 1720|  2.75k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|  2.75k|                           ranges::common_range<Range>) {
 1737|  2.75k|            auto beg_seg = range.begin().contiguous_segment();
 1738|  2.75k|            auto end_seg = range.end().contiguous_segment();
 1739|  2.75k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  865|  2.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.03k, False: 719]
  |  |  ------------------
  ------------------
 1740|  2.75k|                             detail::to_address(end_seg.end()))) {
 1741|  2.03k|                auto& str = m_storage.emplace();
 1742|  2.03k|                str.reserve(range.end().position() - range.begin().position());
 1743|  2.03k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|  2.03k|                m_view = string_view_type{str};
 1745|  2.03k|                return;
 1746|  2.03k|            }
 1747|       |
 1748|    719|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|    719|                                                            end_seg.data());
 1750|    719|            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|  2.75k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIwE4viewEv:
 1680|  5.14k|    {
 1681|  5.14k|        return m_view;
 1682|  5.14k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwED2Ev:
 1670|  2.75k|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 6116|  7.34k|    {
 6117|  7.34k|        const bool need_skipped_width =
 6118|  7.34k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6118:13): [True: 0, False: 7.34k]
  |  Branch (6118:33): [True: 0, False: 7.34k]
  ------------------
 6119|  7.34k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6120|       |
 6121|  7.34k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6121:13): [True: 0, False: 7.34k]
  ------------------
 6122|  7.34k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6122:13): [True: 0, False: 7.34k]
  ------------------
 6123|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6124:17): [True: 0, False: 0]
  ------------------
 6125|      0|                return result_type{rng.begin(), 0};
 6126|      0|            }
 6127|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6128|      0|                             specs.fill, need_skipped_width);
 6129|      0|        }
 6130|  7.34k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6130:13): [True: 7.34k, False: 0]
  ------------------
 6131|  7.34k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6131:13): [True: 0, False: 7.34k]
  ------------------
 6132|  7.34k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6132:15): [True: 0, False: 0]
  |  Branch (6132:35): [True: 0, False: 0]
  ------------------
 6133|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6133:15): [True: 0, False: 0]
  ------------------
 6134|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6134:15): [True: 0, False: 0]
  ------------------
 6135|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                const auto initial_width =
 6137|      0|                    specs.precision - prefix_width - value_width;
 6138|      0|                auto max_width_view = take_width(rng, initial_width);
 6139|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6140|      0|                                  .transform_error(make_eof_scan_error));
 6141|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6142|      0|            }
 6143|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|                            make_eof_scan_error));
 6145|       |
 6146|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return result_type{
 6148|      0|                    it,
 6149|      0|                    calculate_text_width(make_contiguous_buffer(
 6150|      0|                                             ranges::subrange{rng.begin(), it})
 6151|      0|                                             .view())};
 6152|      0|            }
 6153|      0|            return result_type{it, 0};
 6154|      0|        }
 6155|  7.34k|        return result_type{rng.begin(), 0};
 6156|  7.34k|    }
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1955|   100k|{
 1956|   100k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|   100k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   100k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|   100k|    if constexpr (ranges::sized_range<Range>) {
 1959|   100k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|   100k|        if (sz < count) {
  ------------------
  |  Branch (1960:13): [True: 18.8k, False: 81.2k]
  ------------------
 1961|  18.8k|            return unexpected(eof_error::eof);
 1962|  18.8k|        }
 1963|       |
 1964|  81.2k|        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|       |    else {
 1967|       |        auto it = range.begin();
 1968|       |        if (guaranteed_minimum_size(range) >= count) {
 1969|       |            return ranges::next(it, count);
 1970|       |        }
 1971|       |
 1972|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1973|       |            if (it == range.end()) {
 1974|       |                return unexpected(eof_error::eof);
 1975|       |            }
 1976|       |        }
 1977|       |
 1978|       |        return it;
 1979|       |    }
 1980|   100k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1997|   133k|{
 1998|   133k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|   133k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   133k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   133k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   133k|    auto it = range.begin();
 2002|   133k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   133k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 133k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|   133k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 133k, False: 0]
  ------------------
 2011|   133k|        ++it;
 2012|   133k|        return {it, string_type(1, *range.begin())};
 2013|   133k|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|   133k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  944|   562k|{
  945|   562k|    return is_range_eof(r.begin(), r.end());
  946|   562k|}
_ZN3scn2v44impl12is_range_eofIPKwS4_EEbT_T0_:
  928|   562k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   562k|    {
  938|   562k|        return begin == end;
  939|   562k|    }
  940|   562k|}
_ZNK3scn2v44impl27read_code_point_into_resultIPKwwE8is_validEv:
 1988|   133k|    {
 1989|   133k|        return !codepoint.empty();
 1990|   133k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  950|   429k|{
  951|   429k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|   429k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.01k, False: 427k]
  |  |  ------------------
  ------------------
  952|  2.01k|        return eof_error::eof;
  953|  2.01k|    }
  954|   427k|    return eof_error::good;
  955|   429k|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1944|   163k|{
 1945|   163k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   163k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 72, False: 163k]
  |  |  ------------------
  ------------------
 1946|     72|        return unexpected(e);
 1947|     72|    }
 1948|       |
 1949|   163k|    return ranges::next(range.begin());
 1950|   163k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   163k|    {
  296|   163k|        ++x;
  297|   163k|        return x;
  298|   163k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|  18.0k|    {
 3590|  18.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  18.0k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  18.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 1.57k, False: 16.4k]
  ------------------
 3594|       |            if constexpr (!std::is_signed_v<T>) {
 3595|       |                return detail::unexpected_scan_error(
 3596|       |                    scan_error::invalid_scanned_value,
 3597|       |                    "Unexpected '-' sign when parsing an "
 3598|       |                    "unsigned value");
 3599|       |            }
 3600|  1.57k|            else {
 3601|  1.57k|                if (specs.type ==
  ------------------
  |  Branch (3601:21): [True: 0, False: 1.57k]
  ------------------
 3602|  1.57k|                    detail::presentation_type::int_unsigned_decimal) {
 3603|      0|                    return detail::unexpected_scan_error(
 3604|      0|                        scan_error::invalid_scanned_value,
 3605|      0|                        "'u'-option disallows negative values");
 3606|      0|                }
 3607|  1.57k|            }
 3608|  1.57k|        }
 3609|       |
 3610|  18.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 38, False: 18.0k]
  ------------------
 3611|     38|            value = T{0};
 3612|     38|            return std::next(prefix_result.iterator);
 3613|     38|        }
 3614|       |
 3615|  18.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  18.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 13.8k, False: 4.15k]
  |  |  ------------------
  ------------------
 3616|  13.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  13.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 30, False: 13.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     30|    }                                                  \
  |  |  |  | 3939|  13.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|  13.8k|                    parse_integer_digits_without_thsep(
 3618|  13.8k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|  13.8k|                        prefix_result.parsed_base));
 3620|       |
 3621|  13.8k|            auto buf = make_contiguous_buffer(
 3622|  13.8k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|  13.8k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  13.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 13.5k, False: 308]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  13.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  13.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  13.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  13.5k|    }                                                  \
  |  |  |  | 3939|  13.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    308|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|    308|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|    308|                                        prefix_result.parsed_base));
 3626|       |
 3627|    308|            return ranges::next(
 3628|    308|                prefix_result.iterator,
 3629|    308|                ranges::distance(buf.view().begin(), result_it));
 3630|  13.8k|        }
 3631|       |
 3632|  4.15k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  4.15k|            localized_number_formatting_options<CharT>{loc};
 3637|  4.15k|#endif
 3638|       |
 3639|  4.15k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  4.15k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.15k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.15k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.67k, False: 1.47k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.67k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.67k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.67k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.67k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.67k|    }                                                  \
  |  |  |  | 3939|  4.15k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  1.47k|                parse_integer_digits_with_thsep(
 3641|  1.47k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  1.47k|                    prefix_result.parsed_base, locale_options));
 3643|  1.47k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  1.47k|            parse_digits_result;
 3645|       |
 3646|  1.47k|        auto nothsep_source_view =
 3647|  1.47k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  1.47k|        SCN_TRY(
  ------------------
  |  | 3940|  1.47k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.47k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.47k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12, False: 1.46k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     12|    }                                                  \
  |  |  |  | 3939|  1.47k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  1.46k|            nothsep_source_it,
 3650|  1.46k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  1.46k|                                prefix_result.parsed_base));
 3652|       |
 3653|  1.46k|        return ranges::next(
 3654|  1.46k|            prefix_result.iterator,
 3655|  1.46k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  1.46k|                ranges::ssize(thsep_indices));
 3657|  1.47k|    }
_ZN3scn2v44impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3376|   130k|{
 3377|   130k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3940|   130k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   130k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   130k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 130k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   130k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   130k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3378|   130k|    auto [base_prefix_begin_it, sign] = sign_result;
 3379|       |
 3380|   130k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3381|   130k|        parse_integer_base_prefix(
 3382|   130k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3383|       |
 3384|   130k|    if (parsed_zero) {
  ------------------
  |  Branch (3384:9): [True: 328, False: 130k]
  ------------------
 3385|    328|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3385:13): [True: 24, False: 304]
  ------------------
 3386|    328|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3386:13): [True: 208, False: 96]
  ------------------
 3387|    232|            digits_begin_it = base_prefix_begin_it;
 3388|    232|        }
 3389|     96|        else {
 3390|     96|            parsed_zero = false;
 3391|     96|        }
 3392|    328|    }
 3393|   130k|    else {
 3394|   130k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3394:13): [True: 278, False: 130k]
  ------------------
 3395|   130k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3395:13): [True: 126k, False: 3.49k]
  ------------------
 3396|   126k|            digits_begin_it = base_prefix_begin_it;
 3397|   126k|        }
 3398|   130k|    }
 3399|       |
 3400|   130k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3400:9): [True: 123k, False: 7.22k]
  ------------------
 3401|   123k|        sign = sign_type::plus_sign;
 3402|   123k|    }
 3403|   130k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3404|   130k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3405|   130k|}
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3257|   130k|{
 3258|   130k|    auto r = read_one_of_code_unit(range, "+-");
 3259|   130k|    if (!r) {
  ------------------
  |  Branch (3259:9): [True: 123k, False: 7.22k]
  ------------------
 3260|   123k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3260:13): [True: 123k, False: 0]
  ------------------
 3261|   123k|            return std::pair{range.begin(), sign_type::default_sign};
 3262|   123k|        }
 3263|      0|        return unexpected(eof_error::eof);
 3264|   123k|    }
 3265|       |
 3266|  7.22k|    auto& it = *r;
 3267|  7.22k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3267:9): [True: 7.04k, False: 179]
  ------------------
 3268|  7.04k|        return std::pair{it, sign_type::minus_sign};
 3269|  7.04k|    }
 3270|    179|    return std::pair{it, sign_type::plus_sign};
 3271|  7.22k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2371|   130k|{
 2372|   130k|    auto it = read_code_unit(range);
 2373|   130k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 130k]
  |  |  ------------------
  ------------------
 2374|      0|        return unexpected(make_eof_parse_error(it.error()));
 2375|      0|    }
 2376|       |
 2377|   261k|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 261k, False: 123k]
  ------------------
 2378|   261k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 7.22k, False: 253k]
  ------------------
 2379|  7.22k|            return *it;
 2380|  7.22k|        }
 2381|   261k|    }
 2382|       |
 2383|   123k|    return unexpected(parse_error::error);
 2384|   130k|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3343|   130k|{
 3344|   130k|    switch (base) {
 3345|  16.5k|        case 2:
  ------------------
  |  Branch (3345:9): [True: 16.5k, False: 114k]
  ------------------
 3346|       |            // allow 0b/0B
 3347|  16.5k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3348|  16.5k|                    false};
 3349|       |
 3350|  16.5k|        case 8: {
  ------------------
  |  Branch (3350:9): [True: 16.5k, False: 114k]
  ------------------
 3351|       |            // allow 0o/0O/0
 3352|  16.5k|            bool zero_parsed = false;
 3353|  16.5k|            auto it = apply_opt(
 3354|  16.5k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3355|  16.5k|            return {it, 8, zero_parsed};
 3356|      0|        }
 3357|       |
 3358|  16.7k|        case 16:
  ------------------
  |  Branch (3358:9): [True: 16.7k, False: 113k]
  ------------------
 3359|       |            // allow 0x/0X
 3360|  16.7k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3361|  16.7k|                    false};
 3362|       |
 3363|  16.7k|        case 0:
  ------------------
  |  Branch (3363:9): [True: 16.7k, False: 113k]
  ------------------
 3364|       |            // detect base
 3365|  16.7k|            return parse_integer_base_prefix_for_detection(range);
 3366|       |
 3367|  64.0k|        default:
  ------------------
  |  Branch (3367:9): [True: 64.0k, False: 66.6k]
  ------------------
 3368|       |            // no base prefix allowed
 3369|  64.0k|            return {range.begin(), base, false};
 3370|   130k|    }
 3371|   130k|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2390|  49.8k|{
 2391|  49.8k|    if (!result) {
  ------------------
  |  Branch (2391:9): [True: 49.7k, False: 156]
  ------------------
 2392|  49.7k|        return range.begin();
 2393|  49.7k|    }
 2394|    156|    return *result;
 2395|  49.8k|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3294|  33.3k|{
 3295|  33.3k|    return read_matching_string_classic_nocase(range, "0b");
 3296|  33.3k|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2330|   100k|{
 2331|   100k|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|       |                  std::is_same_v<char_type, char>) {
 2335|       |        if (range.size() < str.size()) {
 2336|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|       |        }
 2338|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2339|       |            return unexpected(parse_error::error);
 2340|       |        }
 2341|       |        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|   100k|    else {
 2344|   100k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|   100k|            if (ch < 'A' || ch > 'Z') {
 2346|   100k|                return ch;
 2347|   100k|            }
 2348|   100k|            return static_cast<char_type>(ch +
 2349|   100k|                                          static_cast<char_type>('a' - 'A'));
 2350|   100k|        };
 2351|       |
 2352|   100k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|   100k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   100k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   100k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 18.8k, False: 81.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  18.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  18.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  18.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  18.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  18.8k|    }                                                  \
  |  |  |  | 3939|   100k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  81.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2353|  81.2k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|  81.2k|                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|  81.2k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  865|  81.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 81.2k, False: 0]
  |  |  ------------------
  ------------------
 2357|  81.2k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|  81.2k|                    return ascii_tolower(a) ==
 2359|  81.2k|                           static_cast<detail::char_t<Range>>(b);
 2360|  81.2k|                }))) {
 2361|  81.2k|            return unexpected(parse_error::error);
 2362|  81.2k|        }
 2363|       |
 2364|      0|        return it;
 2365|  81.2k|    }
 2366|   100k|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2344|  82.2k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  82.2k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2345:17): [True: 54.7k, False: 27.4k]
  |  Branch (2345:29): [True: 27.1k, False: 288]
  ------------------
 2346|  81.9k|                return ch;
 2347|  81.9k|            }
 2348|    288|            return static_cast<char_type>(ch +
 2349|    288|                                          static_cast<char_type>('a' - 'A'));
 2350|  82.2k|        };
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3308|  33.3k|{
 3309|  33.3k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3309:14): [True: 0, False: 33.3k]
  ------------------
 3310|      0|        return *r;
 3311|      0|    }
 3312|       |
 3313|  33.3k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3313:14): [True: 328, False: 33.0k]
  ------------------
 3314|    328|        zero_parsed = true;
 3315|    328|        return *r;
 3316|    328|    }
 3317|       |
 3318|  33.0k|    return unexpected(parse_error::error);
 3319|  33.3k|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2245|  33.3k|{
 2246|  33.3k|    auto it = read_code_unit(range);
 2247|  33.3k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  33.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 72, False: 33.2k]
  |  |  ------------------
  ------------------
 2248|     72|        return unexpected(make_eof_parse_error(it.error()));
 2249|     72|    }
 2250|       |
 2251|  33.2k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|  33.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 32.9k, False: 328]
  |  |  ------------------
  ------------------
 2252|  33.2k|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|  32.9k|        return unexpected(parse_error::error);
 2254|  32.9k|    }
 2255|       |
 2256|    328|    return *it;
 2257|  33.2k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3301|  33.4k|{
 3302|  33.4k|    return read_matching_string_classic_nocase(range, "0x");
 3303|  33.4k|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3324|  16.7k|{
 3325|  16.7k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3325:14): [True: 0, False: 16.7k]
  ------------------
 3326|      0|        return {*r, 16, false};
 3327|      0|    }
 3328|  16.7k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3328:14): [True: 0, False: 16.7k]
  ------------------
 3329|      0|        return {*r, 2, false};
 3330|      0|    }
 3331|  16.7k|    {
 3332|  16.7k|        bool zero_parsed{false};
 3333|  16.7k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3333:18): [True: 172, False: 16.5k]
  ------------------
 3334|    172|            return {*r, 8, zero_parsed};
 3335|    172|        }
 3336|  16.7k|    }
 3337|  16.5k|    return {range.begin(), 10, false};
 3338|  16.7k|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3410|   107k|{
 3411|   107k|    using char_type = detail::char_t<Range>;
 3412|       |
 3413|   107k|    if constexpr (ranges::contiguous_range<Range>) {
 3414|   107k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 156, False: 107k]
  |  |  ------------------
  ------------------
 3415|    156|            return detail::unexpected_scan_error(
 3416|    156|                scan_error::invalid_scanned_value,
 3417|    156|                "Failed to parse integer: No digits found");
 3418|    156|        }
 3419|   107k|        return range.end();
 3420|       |    }
 3421|       |    else {
 3422|       |        return read_while1_code_unit(range,
 3423|       |                                     [&](char_type ch) noexcept {
 3424|       |                                         return char_to_int(ch) < base;
 3425|       |                                     })
 3426|       |            .transform_error(map_parse_error_to_scan_error(
 3427|       |                scan_error::invalid_scanned_value,
 3428|       |                "Failed to parse integer: No digits found"));
 3429|       |    }
 3430|   107k|}
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3440|  19.3k|{
 3441|  19.3k|    std::basic_string<CharT> output;
 3442|  19.3k|    std::string thsep_indices;
 3443|  19.3k|    auto it = range.begin();
 3444|  19.3k|    bool digit_matched = false;
 3445|  33.8M|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3445:12): [True: 33.8M, False: 352]
  ------------------
 3446|  33.8M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3446:13): [True: 33.8M, False: 53.9k]
  ------------------
 3447|  33.8M|            thsep_indices.push_back(
 3448|  33.8M|                static_cast<char>(ranges::distance(range.begin(), it)));
 3449|  33.8M|        }
 3450|  53.9k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3450:18): [True: 18.9k, False: 34.9k]
  ------------------
 3451|  18.9k|            break;
 3452|  18.9k|        }
 3453|  34.9k|        else {
 3454|  34.9k|            output.push_back(*it);
 3455|  34.9k|            digit_matched = true;
 3456|  34.9k|        }
 3457|  33.8M|    }
 3458|  19.3k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  865|  19.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.5k, False: 8.79k]
  |  |  ------------------
  ------------------
 3459|  10.5k|        return detail::unexpected_scan_error(
 3460|  10.5k|            scan_error::invalid_scanned_value,
 3461|  10.5k|            "Failed to parse integer: No digits found");
 3462|  10.5k|    }
 3463|  8.79k|    return std::tuple{it, output, thsep_indices};
 3464|  19.3k|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1781|   107k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|   107k|                  ranges::sized_range<Range>) {
 1785|   107k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|   107k|}
_ZN3scn2v44impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1587|   107k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|   107k|    {
 1589|   107k|    }
_ZNK3scn2v44impl19string_view_wrapperIwE4viewEv:
 1601|   109k|    {
 1602|   109k|        return sv;
 1603|   109k|    }
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3065|   132k|{
 3066|   132k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 132k, False: 0]
  ------------------
 3067|   132k|        auto it = read_while_classic_space(range);
 3068|   132k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|   132k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   132k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.66k, False: 130k]
  |  |  ------------------
  ------------------
 3070|  1.66k|            return unexpected(e);
 3071|  1.66k|        }
 3072|       |
 3073|   130k|        return it;
 3074|   132k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|   132k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|   132k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|   132k|    else {
 2225|   132k|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|   132k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   132k|            return detail::is_cp_space(cp);
 2238|   132k|        });
 2239|   132k|    }
 2240|   132k|}
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2180|   132k|{
 2181|   132k|    return read_until_code_point(range, std::not_fn(pred));
 2182|   132k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2159|   132k|{
 2160|   132k|    auto it = range.begin();
 2161|   134k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 133k, False: 1.66k]
  ------------------
 2162|   133k|        const auto val =
 2163|   133k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|   133k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|   133k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 133k, False: 0]
  |  |  ------------------
  ------------------
 2165|   133k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|   133k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|   133k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 130k, False: 2.37k]
  ------------------
 2168|   130k|                return it;
 2169|   130k|            }
 2170|   133k|        }
 2171|  2.37k|        it = val.iterator;
 2172|  2.37k|    }
 2173|       |
 2174|  1.66k|    return it;
 2175|   132k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|   132k|        : m_fptr([](storage fn,
  743|   132k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   132k|              cvref<T> obj = *get<T>(fn);
  745|   132k|              if constexpr (std::is_void_v<R>) {
  746|   132k|                  obj(static_cast<decltype(args)>(args)...);
  747|   132k|              }
  748|   132k|              else {
  749|   132k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   132k|              }
  751|   132k|          }),
  752|   132k|          m_storage(std::addressof(f))
  753|   132k|    {
  754|   132k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|   133k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   133k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   133k|              else {
  749|   133k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   133k|              }
  751|   133k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   133k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   133k|        else if constexpr (std::is_object_v<T>) {
  688|   133k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   133k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2236|   133k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   133k|            return detail::is_cp_space(cp);
 2238|   133k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|   132k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   132k|        {
  662|   132k|        }
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  88.9k|    {
  304|  88.9k|        ranges::advance(x, n);
  305|  88.9k|        return x;
  306|  88.9k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  88.9k|    {
  268|  88.9k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  88.9k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  88.9k|    {
  181|  22.8M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 22.7M, False: 88.9k]
  ------------------
  182|  22.7M|            ++i;
  183|  22.7M|        }
  184|  88.9k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIaEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6226|  16.8k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|       |                          basic_contiguous_scan_context<char_type>>) {
 6231|       |            auto rd = make_reader<T, char_type>();
 6232|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6233|       |            return impl(rd, range, value);
 6234|       |        }
 6235|  16.8k|        else if constexpr (!detail::is_type_disabled<T>) {
 6236|  16.8k|            auto rd = make_reader<T, char_type>();
 6237|  16.8k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  16.8k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 16.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6238|       |
 6239|  16.8k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6239:17): [True: 16.8k, False: 0]
  |  Branch (6239:50): [True: 0, False: 0]
  ------------------
 6240|  16.8k|                specs.width != 0) {
  ------------------
  |  Branch (6240:17): [True: 0, False: 0]
  ------------------
 6241|  16.8k|                return impl(rd, range, value);
 6242|  16.8k|            }
 6243|       |
 6244|      0|            auto crange = get_as_contiguous(range);
 6245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            return ranges::next(range.begin(),
 6247|      0|                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  16.8k|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3155|   213k|    {
 3156|   213k|        reader_error_handler eh{};
 3157|   213k|        get_derived().check_specs_impl(specs, eh);
 3158|   213k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|   213k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 213k]
  |  |  ------------------
  ------------------
 3159|      0|            return detail::unexpected_scan_error(
 3160|      0|                scan_error::invalid_format_string, eh.m_msg);
 3161|      0|        }
 3162|   213k|        return {};
 3163|   213k|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
 3167|   213k|    {
 3168|   213k|        return static_cast<Derived&>(*this);
 3169|   213k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3535|   213k|    {
 3536|   213k|        detail::check_int_type_specs(specs, eh);
 3537|   213k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6161|  16.8k|    {
 6162|  16.8k|        const bool need_skipped_width =
 6163|  16.8k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 16.8k]
  |  Branch (6163:33): [True: 0, False: 16.8k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  16.8k|        auto it = rng.begin();
 6167|  16.8k|        std::ptrdiff_t prefix_width = 0;
 6168|  16.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 16.8k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  16.8k|        else {
 6176|  16.8k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  16.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  16.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  16.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 248, False: 16.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    248|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    248|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    248|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    248|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    248|    }                                                  \
  |  |  |  | 3939|  16.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  16.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  16.6k|            std::tie(it, prefix_width) = prefix_result;
 6178|  16.6k|        }
 6179|  16.6k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  16.6k|        std::ptrdiff_t value_width = 0;
 6183|  16.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 16.6k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  16.6k|        else {
 6199|  16.6k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  16.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  16.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  16.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 16.2k, False: 368]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  16.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  16.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  16.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  16.2k|    }                                                  \
  |  | 3939|  16.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  16.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|    368|                                             specs, value, loc));
 6201|       |
 6202|    368|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 368]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|    368|        }
 6208|       |
 6209|       |        // Read postfix
 6210|    368|        std::ptrdiff_t postfix_width = 0;
 6211|    368|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 268, False: 100]
  ------------------
 6212|    268|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    268|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    268|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    268|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    268|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 268]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    268|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    268|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|    268|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|    268|                                 rd.skip_ws_before_read(), prefix_width,
 6215|    268|                                 value_width));
 6216|    268|            std::tie(it, postfix_width) = postfix_result;
 6217|    268|        }
 6218|       |
 6219|    368|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    368|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    368|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 368]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|    368|            specs, prefix_width, value_width, postfix_width));
 6221|    368|        return it;
 6222|    368|    }
_ZNK3scn2v44impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
 3150|   279k|    {
 3151|   279k|        return true;
 3152|   279k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3589|  16.6k|    {
 3590|  16.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  16.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  16.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  16.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  16.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 16.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  16.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  16.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  16.6k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  16.6k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 206, False: 16.4k]
  ------------------
 3594|       |            if constexpr (!std::is_signed_v<T>) {
 3595|       |                return detail::unexpected_scan_error(
 3596|       |                    scan_error::invalid_scanned_value,
 3597|       |                    "Unexpected '-' sign when parsing an "
 3598|       |                    "unsigned value");
 3599|       |            }
 3600|    206|            else {
 3601|    206|                if (specs.type ==
  ------------------
  |  Branch (3601:21): [True: 0, False: 206]
  ------------------
 3602|    206|                    detail::presentation_type::int_unsigned_decimal) {
 3603|      0|                    return detail::unexpected_scan_error(
 3604|      0|                        scan_error::invalid_scanned_value,
 3605|      0|                        "'u'-option disallows negative values");
 3606|      0|                }
 3607|    206|            }
 3608|    206|        }
 3609|       |
 3610|  16.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 38, False: 16.5k]
  ------------------
 3611|     38|            value = T{0};
 3612|     38|            return std::next(prefix_result.iterator);
 3613|     38|        }
 3614|       |
 3615|  16.5k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  16.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 13.8k, False: 2.77k]
  |  |  ------------------
  ------------------
 3616|  13.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  13.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 13.4k, False: 344]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  13.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  13.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  13.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  13.4k|    }                                                  \
  |  |  |  | 3939|  13.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    344|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|    344|                    parse_integer_digits_without_thsep(
 3618|    344|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|    344|                        prefix_result.parsed_base));
 3620|       |
 3621|    344|            auto buf = make_contiguous_buffer(
 3622|    344|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|    344|            SCN_TRY(result_it,
  ------------------
  |  | 3940|    344|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    344|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    344|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    344|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 90, False: 254]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     90|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     90|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     90|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     90|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     90|    }                                                  \
  |  |  |  | 3939|    344|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    254|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|    254|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|    254|                                        prefix_result.parsed_base));
 3626|       |
 3627|    254|            return ranges::next(
 3628|    254|                prefix_result.iterator,
 3629|    254|                ranges::distance(buf.view().begin(), result_it));
 3630|    344|        }
 3631|       |
 3632|  2.77k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  2.77k|            localized_number_formatting_options<CharT>{loc};
 3637|  2.77k|#endif
 3638|       |
 3639|  2.77k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  2.77k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.77k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.77k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.29k, False: 1.47k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.29k|    }                                                  \
  |  |  |  | 3939|  2.77k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  1.47k|                parse_integer_digits_with_thsep(
 3641|  1.47k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  1.47k|                    prefix_result.parsed_base, locale_options));
 3643|  1.47k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  1.47k|            parse_digits_result;
 3645|       |
 3646|  1.47k|        auto nothsep_source_view =
 3647|  1.47k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  1.47k|        SCN_TRY(
  ------------------
  |  | 3940|  1.47k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.47k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.47k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.39k, False: 76]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.39k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.39k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.39k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.39k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.39k|    }                                                  \
  |  |  |  | 3939|  1.47k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     76|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|     76|            nothsep_source_it,
 3650|     76|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|     76|                                prefix_result.parsed_base));
 3652|       |
 3653|     76|        return ranges::next(
 3654|     76|            prefix_result.iterator,
 3655|     76|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|     76|                ranges::ssize(thsep_indices));
 3657|  1.47k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|  16.6k|    {
 3590|  16.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  16.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  16.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  16.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  16.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 16.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  16.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  16.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  16.6k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  16.6k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 206, False: 16.4k]
  ------------------
 3594|       |            if constexpr (!std::is_signed_v<T>) {
 3595|       |                return detail::unexpected_scan_error(
 3596|       |                    scan_error::invalid_scanned_value,
 3597|       |                    "Unexpected '-' sign when parsing an "
 3598|       |                    "unsigned value");
 3599|       |            }
 3600|    206|            else {
 3601|    206|                if (specs.type ==
  ------------------
  |  Branch (3601:21): [True: 0, False: 206]
  ------------------
 3602|    206|                    detail::presentation_type::int_unsigned_decimal) {
 3603|      0|                    return detail::unexpected_scan_error(
 3604|      0|                        scan_error::invalid_scanned_value,
 3605|      0|                        "'u'-option disallows negative values");
 3606|      0|                }
 3607|    206|            }
 3608|    206|        }
 3609|       |
 3610|  16.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 38, False: 16.5k]
  ------------------
 3611|     38|            value = T{0};
 3612|     38|            return std::next(prefix_result.iterator);
 3613|     38|        }
 3614|       |
 3615|  16.5k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  16.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 13.8k, False: 2.77k]
  |  |  ------------------
  ------------------
 3616|  13.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  13.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 30, False: 13.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     30|    }                                                  \
  |  |  |  | 3939|  13.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|  13.7k|                    parse_integer_digits_without_thsep(
 3618|  13.7k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|  13.7k|                        prefix_result.parsed_base));
 3620|       |
 3621|  13.7k|            auto buf = make_contiguous_buffer(
 3622|  13.7k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|  13.7k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  13.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 13.5k, False: 254]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  13.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  13.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  13.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  13.5k|    }                                                  \
  |  |  |  | 3939|  13.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    254|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|    254|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|    254|                                        prefix_result.parsed_base));
 3626|       |
 3627|    254|            return ranges::next(
 3628|    254|                prefix_result.iterator,
 3629|    254|                ranges::distance(buf.view().begin(), result_it));
 3630|  13.7k|        }
 3631|       |
 3632|  2.77k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  2.77k|            localized_number_formatting_options<CharT>{loc};
 3637|  2.77k|#endif
 3638|       |
 3639|  2.77k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  2.77k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.77k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.77k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.29k, False: 1.47k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.29k|    }                                                  \
  |  |  |  | 3939|  2.77k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  1.47k|                parse_integer_digits_with_thsep(
 3641|  1.47k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  1.47k|                    prefix_result.parsed_base, locale_options));
 3643|  1.47k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  1.47k|            parse_digits_result;
 3645|       |
 3646|  1.47k|        auto nothsep_source_view =
 3647|  1.47k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  1.47k|        SCN_TRY(
  ------------------
  |  | 3940|  1.47k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.47k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.47k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.39k, False: 76]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.39k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.39k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.39k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.39k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.39k|    }                                                  \
  |  |  |  | 3939|  1.47k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     76|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|     76|            nothsep_source_it,
 3650|     76|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|     76|                                prefix_result.parsed_base));
 3652|       |
 3653|     76|        return ranges::next(
 3654|     76|            prefix_result.iterator,
 3655|     76|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|     76|                ranges::ssize(thsep_indices));
 3657|  1.47k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIiEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6226|  18.3k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|       |                          basic_contiguous_scan_context<char_type>>) {
 6231|       |            auto rd = make_reader<T, char_type>();
 6232|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6233|       |            return impl(rd, range, value);
 6234|       |        }
 6235|  18.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 6236|  18.3k|            auto rd = make_reader<T, char_type>();
 6237|  18.3k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  18.3k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 18.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6238|       |
 6239|  18.3k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6239:17): [True: 18.3k, False: 0]
  |  Branch (6239:50): [True: 0, False: 0]
  ------------------
 6240|  18.3k|                specs.width != 0) {
  ------------------
  |  Branch (6240:17): [True: 0, False: 0]
  ------------------
 6241|  18.3k|                return impl(rd, range, value);
 6242|  18.3k|            }
 6243|       |
 6244|      0|            auto crange = get_as_contiguous(range);
 6245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            return ranges::next(range.begin(),
 6247|      0|                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  18.3k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6161|  18.3k|    {
 6162|  18.3k|        const bool need_skipped_width =
 6163|  18.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 18.3k]
  |  Branch (6163:33): [True: 0, False: 18.3k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  18.3k|        auto it = rng.begin();
 6167|  18.3k|        std::ptrdiff_t prefix_width = 0;
 6168|  18.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 18.3k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  18.3k|        else {
 6176|  18.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  18.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 264, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    264|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    264|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    264|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    264|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    264|    }                                                  \
  |  |  |  | 3939|  18.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  18.0k|            std::tie(it, prefix_width) = prefix_result;
 6178|  18.0k|        }
 6179|  18.0k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  18.0k|        std::ptrdiff_t value_width = 0;
 6183|  18.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 18.0k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  18.0k|        else {
 6199|  18.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 16.2k, False: 1.80k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  16.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  16.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  16.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  16.2k|    }                                                  \
  |  | 3939|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  1.80k|                                             specs, value, loc));
 6201|       |
 6202|  1.80k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 1.80k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  1.80k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  1.80k|        std::ptrdiff_t postfix_width = 0;
 6211|  1.80k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 1.69k, False: 116]
  ------------------
 6212|  1.69k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  1.69k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.69k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.69k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.69k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.69k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  1.69k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.69k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  1.69k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  1.69k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  1.69k|                                 value_width));
 6216|  1.69k|            std::tie(it, postfix_width) = postfix_result;
 6217|  1.69k|        }
 6218|       |
 6219|  1.80k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  1.80k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  1.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.80k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|  1.80k|            specs, prefix_width, value_width, postfix_width));
 6221|  1.80k|        return it;
 6222|  1.80k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIxEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6226|  18.4k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|       |                          basic_contiguous_scan_context<char_type>>) {
 6231|       |            auto rd = make_reader<T, char_type>();
 6232|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6233|       |            return impl(rd, range, value);
 6234|       |        }
 6235|  18.4k|        else if constexpr (!detail::is_type_disabled<T>) {
 6236|  18.4k|            auto rd = make_reader<T, char_type>();
 6237|  18.4k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  18.4k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  18.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 18.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6238|       |
 6239|  18.4k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6239:17): [True: 18.4k, False: 0]
  |  Branch (6239:50): [True: 0, False: 0]
  ------------------
 6240|  18.4k|                specs.width != 0) {
  ------------------
  |  Branch (6240:17): [True: 0, False: 0]
  ------------------
 6241|  18.4k|                return impl(rd, range, value);
 6242|  18.4k|            }
 6243|       |
 6244|      0|            auto crange = get_as_contiguous(range);
 6245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            return ranges::next(range.begin(),
 6247|      0|                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  18.4k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6161|  18.4k|    {
 6162|  18.4k|        const bool need_skipped_width =
 6163|  18.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 18.4k]
  |  Branch (6163:33): [True: 0, False: 18.4k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  18.4k|        auto it = rng.begin();
 6167|  18.4k|        std::ptrdiff_t prefix_width = 0;
 6168|  18.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 18.4k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  18.4k|        else {
 6176|  18.4k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  18.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 264, False: 18.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    264|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    264|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    264|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    264|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    264|    }                                                  \
  |  |  |  | 3939|  18.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  18.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  18.1k|            std::tie(it, prefix_width) = prefix_result;
 6178|  18.1k|        }
 6179|  18.1k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  18.1k|        std::ptrdiff_t value_width = 0;
 6183|  18.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 18.1k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  18.1k|        else {
 6199|  18.1k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  18.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  18.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  18.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 16.2k, False: 1.89k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  16.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  16.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  16.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  16.2k|    }                                                  \
  |  | 3939|  18.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  18.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  1.89k|                                             specs, value, loc));
 6201|       |
 6202|  1.89k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 1.89k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  1.89k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  1.89k|        std::ptrdiff_t postfix_width = 0;
 6211|  1.89k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 1.77k, False: 116]
  ------------------
 6212|  1.77k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  1.77k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.77k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.77k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.77k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  1.77k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.77k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  1.77k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  1.77k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  1.77k|                                 value_width));
 6216|  1.77k|            std::tie(it, postfix_width) = postfix_result;
 6217|  1.77k|        }
 6218|       |
 6219|  1.89k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  1.89k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  1.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.89k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|  1.89k|            specs, prefix_width, value_width, postfix_width));
 6221|  1.89k|        return it;
 6222|  1.89k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3589|  18.1k|    {
 3590|  18.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  18.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 18.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  18.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  18.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  18.1k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  18.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 1.59k, False: 16.5k]
  ------------------
 3594|       |            if constexpr (!std::is_signed_v<T>) {
 3595|       |                return detail::unexpected_scan_error(
 3596|       |                    scan_error::invalid_scanned_value,
 3597|       |                    "Unexpected '-' sign when parsing an "
 3598|       |                    "unsigned value");
 3599|       |            }
 3600|  1.59k|            else {
 3601|  1.59k|                if (specs.type ==
  ------------------
  |  Branch (3601:21): [True: 0, False: 1.59k]
  ------------------
 3602|  1.59k|                    detail::presentation_type::int_unsigned_decimal) {
 3603|      0|                    return detail::unexpected_scan_error(
 3604|      0|                        scan_error::invalid_scanned_value,
 3605|      0|                        "'u'-option disallows negative values");
 3606|      0|                }
 3607|  1.59k|            }
 3608|  1.59k|        }
 3609|       |
 3610|  18.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 44, False: 18.0k]
  ------------------
 3611|     44|            value = T{0};
 3612|     44|            return std::next(prefix_result.iterator);
 3613|     44|        }
 3614|       |
 3615|  18.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  18.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 13.9k, False: 4.17k]
  |  |  ------------------
  ------------------
 3616|  13.9k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  13.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 13.5k, False: 374]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  13.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  13.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  13.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  13.5k|    }                                                  \
  |  |  |  | 3939|  13.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    374|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|    374|                    parse_integer_digits_without_thsep(
 3618|    374|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|    374|                        prefix_result.parsed_base));
 3620|       |
 3621|    374|            auto buf = make_contiguous_buffer(
 3622|    374|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|    374|            SCN_TRY(result_it,
  ------------------
  |  | 3940|    374|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    374|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    374|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    374|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 10, False: 364]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     10|    }                                                  \
  |  |  |  | 3939|    374|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    364|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|    364|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|    364|                                        prefix_result.parsed_base));
 3626|       |
 3627|    364|            return ranges::next(
 3628|    364|                prefix_result.iterator,
 3629|    364|                ranges::distance(buf.view().begin(), result_it));
 3630|    374|        }
 3631|       |
 3632|  4.17k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  4.17k|            localized_number_formatting_options<CharT>{loc};
 3637|  4.17k|#endif
 3638|       |
 3639|  4.17k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  4.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.68k, False: 1.48k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.68k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.68k|    }                                                  \
  |  |  |  | 3939|  4.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  1.48k|                parse_integer_digits_with_thsep(
 3641|  1.48k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  1.48k|                    prefix_result.parsed_base, locale_options));
 3643|  1.48k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  1.48k|            parse_digits_result;
 3645|       |
 3646|  1.48k|        auto nothsep_source_view =
 3647|  1.48k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  1.48k|        SCN_TRY(
  ------------------
  |  | 3940|  1.48k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.48k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.48k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.48k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  1.48k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  1.48k|            nothsep_source_it,
 3650|  1.48k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  1.48k|                                prefix_result.parsed_base));
 3652|       |
 3653|  1.48k|        return ranges::next(
 3654|  1.48k|            prefix_result.iterator,
 3655|  1.48k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  1.48k|                ranges::ssize(thsep_indices));
 3657|  1.48k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|  18.1k|    {
 3590|  18.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  18.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 18.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  18.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  18.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  18.1k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  18.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 1.59k, False: 16.5k]
  ------------------
 3594|       |            if constexpr (!std::is_signed_v<T>) {
 3595|       |                return detail::unexpected_scan_error(
 3596|       |                    scan_error::invalid_scanned_value,
 3597|       |                    "Unexpected '-' sign when parsing an "
 3598|       |                    "unsigned value");
 3599|       |            }
 3600|  1.59k|            else {
 3601|  1.59k|                if (specs.type ==
  ------------------
  |  Branch (3601:21): [True: 0, False: 1.59k]
  ------------------
 3602|  1.59k|                    detail::presentation_type::int_unsigned_decimal) {
 3603|      0|                    return detail::unexpected_scan_error(
 3604|      0|                        scan_error::invalid_scanned_value,
 3605|      0|                        "'u'-option disallows negative values");
 3606|      0|                }
 3607|  1.59k|            }
 3608|  1.59k|        }
 3609|       |
 3610|  18.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 44, False: 18.0k]
  ------------------
 3611|     44|            value = T{0};
 3612|     44|            return std::next(prefix_result.iterator);
 3613|     44|        }
 3614|       |
 3615|  18.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  18.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 13.9k, False: 4.17k]
  |  |  ------------------
  ------------------
 3616|  13.9k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  13.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 30, False: 13.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     30|    }                                                  \
  |  |  |  | 3939|  13.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|  13.8k|                    parse_integer_digits_without_thsep(
 3618|  13.8k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|  13.8k|                        prefix_result.parsed_base));
 3620|       |
 3621|  13.8k|            auto buf = make_contiguous_buffer(
 3622|  13.8k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|  13.8k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  13.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 13.5k, False: 364]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  13.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  13.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  13.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  13.5k|    }                                                  \
  |  |  |  | 3939|  13.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    364|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|    364|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|    364|                                        prefix_result.parsed_base));
 3626|       |
 3627|    364|            return ranges::next(
 3628|    364|                prefix_result.iterator,
 3629|    364|                ranges::distance(buf.view().begin(), result_it));
 3630|  13.8k|        }
 3631|       |
 3632|  4.17k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  4.17k|            localized_number_formatting_options<CharT>{loc};
 3637|  4.17k|#endif
 3638|       |
 3639|  4.17k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  4.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.68k, False: 1.48k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.68k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.68k|    }                                                  \
  |  |  |  | 3939|  4.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  1.48k|                parse_integer_digits_with_thsep(
 3641|  1.48k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  1.48k|                    prefix_result.parsed_base, locale_options));
 3643|  1.48k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  1.48k|            parse_digits_result;
 3645|       |
 3646|  1.48k|        auto nothsep_source_view =
 3647|  1.48k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  1.48k|        SCN_TRY(
  ------------------
  |  | 3940|  1.48k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.48k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.48k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.48k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  1.48k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  1.48k|            nothsep_source_it,
 3650|  1.48k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  1.48k|                                prefix_result.parsed_base));
 3652|       |
 3653|  1.48k|        return ranges::next(
 3654|  1.48k|            prefix_result.iterator,
 3655|  1.48k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  1.48k|                ranges::ssize(thsep_indices));
 3657|  1.48k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIhEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6226|  16.8k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|       |                          basic_contiguous_scan_context<char_type>>) {
 6231|       |            auto rd = make_reader<T, char_type>();
 6232|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6233|       |            return impl(rd, range, value);
 6234|       |        }
 6235|  16.8k|        else if constexpr (!detail::is_type_disabled<T>) {
 6236|  16.8k|            auto rd = make_reader<T, char_type>();
 6237|  16.8k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  16.8k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 16.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6238|       |
 6239|  16.8k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6239:17): [True: 16.8k, False: 0]
  |  Branch (6239:50): [True: 0, False: 0]
  ------------------
 6240|  16.8k|                specs.width != 0) {
  ------------------
  |  Branch (6240:17): [True: 0, False: 0]
  ------------------
 6241|  16.8k|                return impl(rd, range, value);
 6242|  16.8k|            }
 6243|       |
 6244|      0|            auto crange = get_as_contiguous(range);
 6245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            return ranges::next(range.begin(),
 6247|      0|                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  16.8k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6161|  16.8k|    {
 6162|  16.8k|        const bool need_skipped_width =
 6163|  16.8k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 16.8k]
  |  Branch (6163:33): [True: 0, False: 16.8k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  16.8k|        auto it = rng.begin();
 6167|  16.8k|        std::ptrdiff_t prefix_width = 0;
 6168|  16.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 16.8k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  16.8k|        else {
 6176|  16.8k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  16.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  16.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  16.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 222, False: 16.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    222|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    222|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    222|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    222|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    222|    }                                                  \
  |  |  |  | 3939|  16.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  16.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  16.6k|            std::tie(it, prefix_width) = prefix_result;
 6178|  16.6k|        }
 6179|  16.6k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  16.6k|        std::ptrdiff_t value_width = 0;
 6183|  16.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 16.6k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  16.6k|        else {
 6199|  16.6k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  16.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  16.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  16.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 16.2k, False: 314]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  16.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  16.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  16.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  16.2k|    }                                                  \
  |  | 3939|  16.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  16.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|    314|                                             specs, value, loc));
 6201|       |
 6202|    314|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 314]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|    314|        }
 6208|       |
 6209|       |        // Read postfix
 6210|    314|        std::ptrdiff_t postfix_width = 0;
 6211|    314|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 240, False: 74]
  ------------------
 6212|    240|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    240|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    240|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    240|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    240|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 240]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    240|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    240|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|    240|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|    240|                                 rd.skip_ws_before_read(), prefix_width,
 6215|    240|                                 value_width));
 6216|    240|            std::tie(it, postfix_width) = postfix_result;
 6217|    240|        }
 6218|       |
 6219|    314|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    314|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    314|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 314]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|    314|            specs, prefix_width, value_width, postfix_width));
 6221|    314|        return it;
 6222|    314|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3589|  16.6k|    {
 3590|  16.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  16.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  16.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  16.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  16.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 16.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  16.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  16.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  16.6k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  16.6k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 200, False: 16.4k]
  ------------------
 3594|    200|            if constexpr (!std::is_signed_v<T>) {
 3595|    200|                return detail::unexpected_scan_error(
 3596|    200|                    scan_error::invalid_scanned_value,
 3597|    200|                    "Unexpected '-' sign when parsing an "
 3598|    200|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|    200|        }
 3609|       |
 3610|  16.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 36, False: 16.5k]
  ------------------
 3611|     36|            value = T{0};
 3612|     36|            return std::next(prefix_result.iterator);
 3613|     36|        }
 3614|       |
 3615|  16.5k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  16.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 13.6k, False: 2.92k]
  |  |  ------------------
  ------------------
 3616|  13.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  13.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 13.3k, False: 288]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  13.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  13.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  13.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  13.3k|    }                                                  \
  |  |  |  | 3939|  13.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    288|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|    288|                    parse_integer_digits_without_thsep(
 3618|    288|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|    288|                        prefix_result.parsed_base));
 3620|       |
 3621|    288|            auto buf = make_contiguous_buffer(
 3622|    288|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|    288|            SCN_TRY(result_it,
  ------------------
  |  | 3940|    288|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    288|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    288|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    288|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 70, False: 218]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     70|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     70|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     70|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     70|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     70|    }                                                  \
  |  |  |  | 3939|    288|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    218|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|    218|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|    218|                                        prefix_result.parsed_base));
 3626|       |
 3627|    218|            return ranges::next(
 3628|    218|                prefix_result.iterator,
 3629|    218|                ranges::distance(buf.view().begin(), result_it));
 3630|    288|        }
 3631|       |
 3632|  2.92k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  2.92k|            localized_number_formatting_options<CharT>{loc};
 3637|  2.92k|#endif
 3638|       |
 3639|  2.92k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  2.92k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.92k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.92k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.27k, False: 1.65k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.27k|    }                                                  \
  |  |  |  | 3939|  2.92k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  1.65k|                parse_integer_digits_with_thsep(
 3641|  1.65k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  1.65k|                    prefix_result.parsed_base, locale_options));
 3643|  1.65k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  1.65k|            parse_digits_result;
 3645|       |
 3646|  1.65k|        auto nothsep_source_view =
 3647|  1.65k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  1.65k|        SCN_TRY(
  ------------------
  |  | 3940|  1.65k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.65k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.65k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.39k, False: 260]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.39k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.39k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.39k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.39k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.39k|    }                                                  \
  |  |  |  | 3939|  1.65k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    260|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|    260|            nothsep_source_it,
 3650|    260|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|    260|                                prefix_result.parsed_base));
 3652|       |
 3653|    260|        return ranges::next(
 3654|    260|            prefix_result.iterator,
 3655|    260|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|    260|                ranges::ssize(thsep_indices));
 3657|  1.65k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|  16.6k|    {
 3590|  16.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  16.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  16.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  16.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  16.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 16.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  16.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  16.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  16.6k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  16.6k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 200, False: 16.4k]
  ------------------
 3594|    200|            if constexpr (!std::is_signed_v<T>) {
 3595|    200|                return detail::unexpected_scan_error(
 3596|    200|                    scan_error::invalid_scanned_value,
 3597|    200|                    "Unexpected '-' sign when parsing an "
 3598|    200|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|    200|        }
 3609|       |
 3610|  16.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 36, False: 16.5k]
  ------------------
 3611|     36|            value = T{0};
 3612|     36|            return std::next(prefix_result.iterator);
 3613|     36|        }
 3614|       |
 3615|  16.5k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  16.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 13.6k, False: 2.92k]
  |  |  ------------------
  ------------------
 3616|  13.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  13.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 10, False: 13.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     10|    }                                                  \
  |  |  |  | 3939|  13.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|  13.6k|                    parse_integer_digits_without_thsep(
 3618|  13.6k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|  13.6k|                        prefix_result.parsed_base));
 3620|       |
 3621|  13.6k|            auto buf = make_contiguous_buffer(
 3622|  13.6k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|  13.6k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  13.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 13.4k, False: 218]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  13.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  13.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  13.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  13.4k|    }                                                  \
  |  |  |  | 3939|  13.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    218|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|    218|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|    218|                                        prefix_result.parsed_base));
 3626|       |
 3627|    218|            return ranges::next(
 3628|    218|                prefix_result.iterator,
 3629|    218|                ranges::distance(buf.view().begin(), result_it));
 3630|  13.6k|        }
 3631|       |
 3632|  2.92k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  2.92k|            localized_number_formatting_options<CharT>{loc};
 3637|  2.92k|#endif
 3638|       |
 3639|  2.92k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  2.92k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.92k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.92k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.27k, False: 1.65k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.27k|    }                                                  \
  |  |  |  | 3939|  2.92k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  1.65k|                parse_integer_digits_with_thsep(
 3641|  1.65k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  1.65k|                    prefix_result.parsed_base, locale_options));
 3643|  1.65k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  1.65k|            parse_digits_result;
 3645|       |
 3646|  1.65k|        auto nothsep_source_view =
 3647|  1.65k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  1.65k|        SCN_TRY(
  ------------------
  |  | 3940|  1.65k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.65k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.65k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.39k, False: 260]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.39k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.39k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.39k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.39k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.39k|    }                                                  \
  |  |  |  | 3939|  1.65k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    260|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|    260|            nothsep_source_it,
 3650|    260|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|    260|                                prefix_result.parsed_base));
 3652|       |
 3653|    260|        return ranges::next(
 3654|    260|            prefix_result.iterator,
 3655|    260|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|    260|                ranges::ssize(thsep_indices));
 3657|  1.65k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIjEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6226|  18.2k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|       |                          basic_contiguous_scan_context<char_type>>) {
 6231|       |            auto rd = make_reader<T, char_type>();
 6232|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6233|       |            return impl(rd, range, value);
 6234|       |        }
 6235|  18.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 6236|  18.2k|            auto rd = make_reader<T, char_type>();
 6237|  18.2k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  18.2k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  18.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 18.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6238|       |
 6239|  18.2k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6239:17): [True: 18.2k, False: 0]
  |  Branch (6239:50): [True: 0, False: 0]
  ------------------
 6240|  18.2k|                specs.width != 0) {
  ------------------
  |  Branch (6240:17): [True: 0, False: 0]
  ------------------
 6241|  18.2k|                return impl(rd, range, value);
 6242|  18.2k|            }
 6243|       |
 6244|      0|            auto crange = get_as_contiguous(range);
 6245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            return ranges::next(range.begin(),
 6247|      0|                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  18.2k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6161|  18.2k|    {
 6162|  18.2k|        const bool need_skipped_width =
 6163|  18.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 18.2k]
  |  Branch (6163:33): [True: 0, False: 18.2k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  18.2k|        auto it = rng.begin();
 6167|  18.2k|        std::ptrdiff_t prefix_width = 0;
 6168|  18.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 18.2k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  18.2k|        else {
 6176|  18.2k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  18.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 226, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    226|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    226|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    226|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    226|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    226|    }                                                  \
  |  |  |  | 3939|  18.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  18.0k|            std::tie(it, prefix_width) = prefix_result;
 6178|  18.0k|        }
 6179|  18.0k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  18.0k|        std::ptrdiff_t value_width = 0;
 6183|  18.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 18.0k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  18.0k|        else {
 6199|  18.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 16.2k, False: 1.73k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  16.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  16.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  16.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  16.2k|    }                                                  \
  |  | 3939|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  1.73k|                                             specs, value, loc));
 6201|       |
 6202|  1.73k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 1.73k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  1.73k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  1.73k|        std::ptrdiff_t postfix_width = 0;
 6211|  1.73k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 1.65k, False: 78]
  ------------------
 6212|  1.65k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  1.65k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.65k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.65k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.65k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  1.65k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  1.65k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  1.65k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  1.65k|                                 value_width));
 6216|  1.65k|            std::tie(it, postfix_width) = postfix_result;
 6217|  1.65k|        }
 6218|       |
 6219|  1.73k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  1.73k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  1.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.73k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|  1.73k|            specs, prefix_width, value_width, postfix_width));
 6221|  1.73k|        return it;
 6222|  1.73k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3589|  18.0k|    {
 3590|  18.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  18.0k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  18.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 1.56k, False: 16.4k]
  ------------------
 3594|  1.56k|            if constexpr (!std::is_signed_v<T>) {
 3595|  1.56k|                return detail::unexpected_scan_error(
 3596|  1.56k|                    scan_error::invalid_scanned_value,
 3597|  1.56k|                    "Unexpected '-' sign when parsing an "
 3598|  1.56k|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|  1.56k|        }
 3609|       |
 3610|  18.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 36, False: 17.9k]
  ------------------
 3611|     36|            value = T{0};
 3612|     36|            return std::next(prefix_result.iterator);
 3613|     36|        }
 3614|       |
 3615|  17.9k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  17.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 13.6k, False: 4.30k]
  |  |  ------------------
  ------------------
 3616|  13.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  13.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 13.3k, False: 294]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  13.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  13.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  13.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  13.3k|    }                                                  \
  |  |  |  | 3939|  13.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    294|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|    294|                    parse_integer_digits_without_thsep(
 3618|    294|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|    294|                        prefix_result.parsed_base));
 3620|       |
 3621|    294|            auto buf = make_contiguous_buffer(
 3622|    294|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|    294|            SCN_TRY(result_it,
  ------------------
  |  | 3940|    294|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    294|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    294|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    294|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 42, False: 252]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     42|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     42|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     42|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     42|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     42|    }                                                  \
  |  |  |  | 3939|    294|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    252|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|    252|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|    252|                                        prefix_result.parsed_base));
 3626|       |
 3627|    252|            return ranges::next(
 3628|    252|                prefix_result.iterator,
 3629|    252|                ranges::distance(buf.view().begin(), result_it));
 3630|    294|        }
 3631|       |
 3632|  4.30k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  4.30k|            localized_number_formatting_options<CharT>{loc};
 3637|  4.30k|#endif
 3638|       |
 3639|  4.30k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  4.30k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.30k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.30k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.28k, False: 3.02k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.28k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.28k|    }                                                  \
  |  |  |  | 3939|  4.30k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  3.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  3.02k|                parse_integer_digits_with_thsep(
 3641|  3.02k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  3.02k|                    prefix_result.parsed_base, locale_options));
 3643|  3.02k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  3.02k|            parse_digits_result;
 3645|       |
 3646|  3.02k|        auto nothsep_source_view =
 3647|  3.02k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  3.02k|        SCN_TRY(
  ------------------
  |  | 3940|  3.02k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  3.02k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  3.02k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  3.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12, False: 3.00k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     12|    }                                                  \
  |  |  |  | 3939|  3.02k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  3.00k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  3.00k|            nothsep_source_it,
 3650|  3.00k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  3.00k|                                prefix_result.parsed_base));
 3652|       |
 3653|  3.00k|        return ranges::next(
 3654|  3.00k|            prefix_result.iterator,
 3655|  3.00k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  3.00k|                ranges::ssize(thsep_indices));
 3657|  3.02k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|  18.0k|    {
 3590|  18.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  18.0k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  18.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 1.56k, False: 16.4k]
  ------------------
 3594|  1.56k|            if constexpr (!std::is_signed_v<T>) {
 3595|  1.56k|                return detail::unexpected_scan_error(
 3596|  1.56k|                    scan_error::invalid_scanned_value,
 3597|  1.56k|                    "Unexpected '-' sign when parsing an "
 3598|  1.56k|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|  1.56k|        }
 3609|       |
 3610|  18.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 36, False: 17.9k]
  ------------------
 3611|     36|            value = T{0};
 3612|     36|            return std::next(prefix_result.iterator);
 3613|     36|        }
 3614|       |
 3615|  17.9k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  17.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 13.6k, False: 4.30k]
  |  |  ------------------
  ------------------
 3616|  13.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  13.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 10, False: 13.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     10|    }                                                  \
  |  |  |  | 3939|  13.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|  13.6k|                    parse_integer_digits_without_thsep(
 3618|  13.6k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|  13.6k|                        prefix_result.parsed_base));
 3620|       |
 3621|  13.6k|            auto buf = make_contiguous_buffer(
 3622|  13.6k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|  13.6k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  13.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 13.4k, False: 252]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  13.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  13.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  13.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  13.4k|    }                                                  \
  |  |  |  | 3939|  13.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    252|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|    252|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|    252|                                        prefix_result.parsed_base));
 3626|       |
 3627|    252|            return ranges::next(
 3628|    252|                prefix_result.iterator,
 3629|    252|                ranges::distance(buf.view().begin(), result_it));
 3630|  13.6k|        }
 3631|       |
 3632|  4.30k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  4.30k|            localized_number_formatting_options<CharT>{loc};
 3637|  4.30k|#endif
 3638|       |
 3639|  4.30k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  4.30k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.30k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.30k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.28k, False: 3.02k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.28k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.28k|    }                                                  \
  |  |  |  | 3939|  4.30k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  3.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  3.02k|                parse_integer_digits_with_thsep(
 3641|  3.02k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  3.02k|                    prefix_result.parsed_base, locale_options));
 3643|  3.02k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  3.02k|            parse_digits_result;
 3645|       |
 3646|  3.02k|        auto nothsep_source_view =
 3647|  3.02k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  3.02k|        SCN_TRY(
  ------------------
  |  | 3940|  3.02k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  3.02k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  3.02k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  3.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12, False: 3.00k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     12|    }                                                  \
  |  |  |  | 3939|  3.02k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  3.00k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  3.00k|            nothsep_source_it,
 3650|  3.00k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  3.00k|                                prefix_result.parsed_base));
 3652|       |
 3653|  3.00k|        return ranges::next(
 3654|  3.00k|            prefix_result.iterator,
 3655|  3.00k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  3.00k|                ranges::ssize(thsep_indices));
 3657|  3.02k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIyEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6226|  18.3k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|       |                          basic_contiguous_scan_context<char_type>>) {
 6231|       |            auto rd = make_reader<T, char_type>();
 6232|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6233|       |            return impl(rd, range, value);
 6234|       |        }
 6235|  18.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 6236|  18.3k|            auto rd = make_reader<T, char_type>();
 6237|  18.3k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  18.3k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 18.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6238|       |
 6239|  18.3k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6239:17): [True: 18.3k, False: 0]
  |  Branch (6239:50): [True: 0, False: 0]
  ------------------
 6240|  18.3k|                specs.width != 0) {
  ------------------
  |  Branch (6240:17): [True: 0, False: 0]
  ------------------
 6241|  18.3k|                return impl(rd, range, value);
 6242|  18.3k|            }
 6243|       |
 6244|      0|            auto crange = get_as_contiguous(range);
 6245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            return ranges::next(range.begin(),
 6247|      0|                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  18.3k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6161|  18.3k|    {
 6162|  18.3k|        const bool need_skipped_width =
 6163|  18.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 18.3k]
  |  Branch (6163:33): [True: 0, False: 18.3k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  18.3k|        auto it = rng.begin();
 6167|  18.3k|        std::ptrdiff_t prefix_width = 0;
 6168|  18.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 18.3k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  18.3k|        else {
 6176|  18.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  18.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 226, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    226|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    226|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    226|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    226|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    226|    }                                                  \
  |  |  |  | 3939|  18.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  18.0k|            std::tie(it, prefix_width) = prefix_result;
 6178|  18.0k|        }
 6179|  18.0k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  18.0k|        std::ptrdiff_t value_width = 0;
 6183|  18.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 18.0k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  18.0k|        else {
 6199|  18.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 16.2k, False: 1.79k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  16.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  16.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  16.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  16.2k|    }                                                  \
  |  | 3939|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  1.79k|                                             specs, value, loc));
 6201|       |
 6202|  1.79k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 1.79k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  1.79k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  1.79k|        std::ptrdiff_t postfix_width = 0;
 6211|  1.79k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 1.71k, False: 78]
  ------------------
 6212|  1.71k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  1.71k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.71k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.71k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.71k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  1.71k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.71k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  1.71k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  1.71k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  1.71k|                                 value_width));
 6216|  1.71k|            std::tie(it, postfix_width) = postfix_result;
 6217|  1.71k|        }
 6218|       |
 6219|  1.79k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  1.79k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  1.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.79k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|  1.79k|            specs, prefix_width, value_width, postfix_width));
 6221|  1.79k|        return it;
 6222|  1.79k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3589|  18.0k|    {
 3590|  18.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  18.0k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  18.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 1.58k, False: 16.5k]
  ------------------
 3594|  1.58k|            if constexpr (!std::is_signed_v<T>) {
 3595|  1.58k|                return detail::unexpected_scan_error(
 3596|  1.58k|                    scan_error::invalid_scanned_value,
 3597|  1.58k|                    "Unexpected '-' sign when parsing an "
 3598|  1.58k|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|  1.58k|        }
 3609|       |
 3610|  18.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 36, False: 18.0k]
  ------------------
 3611|     36|            value = T{0};
 3612|     36|            return std::next(prefix_result.iterator);
 3613|     36|        }
 3614|       |
 3615|  18.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  18.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 13.7k, False: 4.33k]
  |  |  ------------------
  ------------------
 3616|  13.7k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  13.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 13.4k, False: 306]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  13.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  13.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  13.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  13.4k|    }                                                  \
  |  |  |  | 3939|  13.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    306|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|    306|                    parse_integer_digits_without_thsep(
 3618|    306|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|    306|                        prefix_result.parsed_base));
 3620|       |
 3621|    306|            auto buf = make_contiguous_buffer(
 3622|    306|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|    306|            SCN_TRY(result_it,
  ------------------
  |  | 3940|    306|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    306|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    306|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    306|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4, False: 302]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      4|    }                                                  \
  |  |  |  | 3939|    306|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    302|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|    302|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|    302|                                        prefix_result.parsed_base));
 3626|       |
 3627|    302|            return ranges::next(
 3628|    302|                prefix_result.iterator,
 3629|    302|                ranges::distance(buf.view().begin(), result_it));
 3630|    306|        }
 3631|       |
 3632|  4.33k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  4.33k|            localized_number_formatting_options<CharT>{loc};
 3637|  4.33k|#endif
 3638|       |
 3639|  4.33k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  4.33k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.33k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.33k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.29k, False: 3.04k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.29k|    }                                                  \
  |  |  |  | 3939|  4.33k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  3.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  3.04k|                parse_integer_digits_with_thsep(
 3641|  3.04k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  3.04k|                    prefix_result.parsed_base, locale_options));
 3643|  3.04k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  3.04k|            parse_digits_result;
 3645|       |
 3646|  3.04k|        auto nothsep_source_view =
 3647|  3.04k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  3.04k|        SCN_TRY(
  ------------------
  |  | 3940|  3.04k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  3.04k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  3.04k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  3.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 3.04k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  3.04k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  3.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  3.04k|            nothsep_source_it,
 3650|  3.04k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  3.04k|                                prefix_result.parsed_base));
 3652|       |
 3653|  3.04k|        return ranges::next(
 3654|  3.04k|            prefix_result.iterator,
 3655|  3.04k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  3.04k|                ranges::ssize(thsep_indices));
 3657|  3.04k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|  18.0k|    {
 3590|  18.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  18.0k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  18.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 1.58k, False: 16.5k]
  ------------------
 3594|  1.58k|            if constexpr (!std::is_signed_v<T>) {
 3595|  1.58k|                return detail::unexpected_scan_error(
 3596|  1.58k|                    scan_error::invalid_scanned_value,
 3597|  1.58k|                    "Unexpected '-' sign when parsing an "
 3598|  1.58k|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|  1.58k|        }
 3609|       |
 3610|  18.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 36, False: 18.0k]
  ------------------
 3611|     36|            value = T{0};
 3612|     36|            return std::next(prefix_result.iterator);
 3613|     36|        }
 3614|       |
 3615|  18.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  18.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 13.7k, False: 4.33k]
  |  |  ------------------
  ------------------
 3616|  13.7k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  13.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 10, False: 13.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     10|    }                                                  \
  |  |  |  | 3939|  13.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|  13.7k|                    parse_integer_digits_without_thsep(
 3618|  13.7k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|  13.7k|                        prefix_result.parsed_base));
 3620|       |
 3621|  13.7k|            auto buf = make_contiguous_buffer(
 3622|  13.7k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|  13.7k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  13.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 13.4k, False: 302]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  13.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  13.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  13.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  13.4k|    }                                                  \
  |  |  |  | 3939|  13.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    302|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|    302|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|    302|                                        prefix_result.parsed_base));
 3626|       |
 3627|    302|            return ranges::next(
 3628|    302|                prefix_result.iterator,
 3629|    302|                ranges::distance(buf.view().begin(), result_it));
 3630|  13.7k|        }
 3631|       |
 3632|  4.33k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  4.33k|            localized_number_formatting_options<CharT>{loc};
 3637|  4.33k|#endif
 3638|       |
 3639|  4.33k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  4.33k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.33k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.33k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.29k, False: 3.04k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.29k|    }                                                  \
  |  |  |  | 3939|  4.33k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  3.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  3.04k|                parse_integer_digits_with_thsep(
 3641|  3.04k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  3.04k|                    prefix_result.parsed_base, locale_options));
 3643|  3.04k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  3.04k|            parse_digits_result;
 3645|       |
 3646|  3.04k|        auto nothsep_source_view =
 3647|  3.04k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  3.04k|        SCN_TRY(
  ------------------
  |  | 3940|  3.04k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  3.04k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  3.04k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  3.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 3.04k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  3.04k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  3.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  3.04k|            nothsep_source_it,
 3650|  3.04k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  3.04k|                                prefix_result.parsed_base));
 3652|       |
 3653|  3.04k|        return ranges::next(
 3654|  3.04k|            prefix_result.iterator,
 3655|  3.04k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  3.04k|                ranges::ssize(thsep_indices));
 3657|  3.04k|    }
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|   132k|{
 2160|   132k|    auto it = range.begin();
 2161|   134k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 133k, False: 1.66k]
  ------------------
 2162|   133k|        const auto val =
 2163|   133k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|   133k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|   133k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 133k, False: 0]
  |  |  ------------------
  ------------------
 2165|   133k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|   133k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|   133k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 130k, False: 2.37k]
  ------------------
 2168|   130k|                return it;
 2169|   130k|            }
 2170|   133k|        }
 2171|  2.37k|        it = val.iterator;
 2172|  2.37k|    }
 2173|       |
 2174|  1.66k|    return it;
 2175|   132k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|   133k|{
 1998|   133k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|   133k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   133k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   133k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   133k|    auto it = range.begin();
 2002|   133k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   133k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 133k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|   133k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 133k, False: 0]
  ------------------
 2011|   133k|        ++it;
 2012|   133k|        return {it, string_type(1, *range.begin())};
 2013|   133k|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|   133k|}
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1988|   133k|    {
 1989|   133k|        return !codepoint.empty();
 1990|   133k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|   132k|{
 2181|   132k|    return read_until_code_point(range, std::not_fn(pred));
 2182|   132k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3065|   132k|{
 3066|   132k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 132k, False: 0]
  ------------------
 3067|   132k|        auto it = read_while_classic_space(range);
 3068|   132k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|   132k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   132k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.66k, False: 130k]
  |  |  ------------------
  ------------------
 3070|  1.66k|            return unexpected(e);
 3071|  1.66k|        }
 3072|       |
 3073|   130k|        return it;
 3074|   132k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|   132k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|   132k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|   132k|    else {
 2225|   132k|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|   132k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   132k|            return detail::is_cp_space(cp);
 2238|   132k|        });
 2239|   132k|    }
 2240|   132k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   132k|        : m_fptr([](storage fn,
  743|   132k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   132k|              cvref<T> obj = *get<T>(fn);
  745|   132k|              if constexpr (std::is_void_v<R>) {
  746|   132k|                  obj(static_cast<decltype(args)>(args)...);
  747|   132k|              }
  748|   132k|              else {
  749|   132k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   132k|              }
  751|   132k|          }),
  752|   132k|          m_storage(std::addressof(f))
  753|   132k|    {
  754|   132k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   133k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   133k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   133k|              else {
  749|   133k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   133k|              }
  751|   133k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   133k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   133k|        else if constexpr (std::is_object_v<T>) {
  688|   133k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   133k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|   133k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   133k|            return detail::is_cp_space(cp);
 2238|   133k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   132k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   132k|        {
  662|   132k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIaEENS0_13scan_expectedIS9_EERT_:
 5910|  15.8k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  15.8k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  15.8k|            auto rd = make_reader<T, char_type>();
 5916|  15.8k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  15.8k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_aEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  15.8k|    {
 5903|  15.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  15.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  15.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  15.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  15.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 390, False: 15.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    390|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    390|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    390|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    390|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    390|    }                                                  \
  |  |  |  | 3939|  15.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  15.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  15.4k|                        .transform_error(make_eof_scan_error));
 5905|  15.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  15.8k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5834|  95.4k|{
 5835|  95.4k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  95.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.86k, False: 93.6k]
  |  |  ------------------
  ------------------
 5836|  1.86k|        return unexpected(e);
 5837|  1.86k|    }
 5838|       |
 5839|  93.6k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 0, False: 93.6k]
  ------------------
 5840|      0|        return range.begin();
 5841|      0|    }
 5842|       |
 5843|  93.6k|    return skip_classic_whitespace(range);
 5844|  93.6k|}
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3578|  15.4k|    {
 3579|  15.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  15.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  15.4k|        return read_default_with_base(range, value, 10);
 3581|  15.4k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIiEENS0_13scan_expectedIS9_EERT_:
 5910|  18.3k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  18.3k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  18.3k|            auto rd = make_reader<T, char_type>();
 5916|  18.3k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  18.3k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  18.3k|    {
 5903|  18.3k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  18.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 504, False: 17.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    504|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    504|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    504|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    504|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    504|    }                                                  \
  |  |  |  | 3939|  18.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  17.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  17.8k|                        .transform_error(make_eof_scan_error));
 5905|  17.8k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  18.3k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3578|  17.8k|    {
 3579|  17.8k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  17.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  17.8k|        return read_default_with_base(range, value, 10);
 3581|  17.8k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIxEENS0_13scan_expectedIS9_EERT_:
 5910|  18.6k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  18.6k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  18.6k|            auto rd = make_reader<T, char_type>();
 5916|  18.6k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  18.6k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_xEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  18.6k|    {
 5903|  18.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  18.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 552, False: 18.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    552|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    552|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    552|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    552|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    552|    }                                                  \
  |  |  |  | 3939|  18.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  18.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  18.1k|                        .transform_error(make_eof_scan_error));
 5905|  18.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  18.6k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3578|  18.1k|    {
 3579|  18.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  18.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  18.1k|        return read_default_with_base(range, value, 10);
 3581|  18.1k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIhEENS0_13scan_expectedIS9_EERT_:
 5910|  13.2k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  13.2k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  13.2k|            auto rd = make_reader<T, char_type>();
 5916|  13.2k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  13.2k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_hEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  13.2k|    {
 5903|  13.2k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  13.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 279, False: 12.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    279|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    279|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    279|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    279|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    279|    }                                                  \
  |  |  |  | 3939|  13.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  12.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  12.9k|                        .transform_error(make_eof_scan_error));
 5905|  12.9k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  13.2k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3578|  12.9k|    {
 3579|  12.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  12.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  12.9k|        return read_default_with_base(range, value, 10);
 3581|  12.9k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIjEENS0_13scan_expectedIS9_EERT_:
 5910|  14.5k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  14.5k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  14.5k|            auto rd = make_reader<T, char_type>();
 5916|  14.5k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  14.5k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  14.5k|    {
 5903|  14.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  14.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 342, False: 14.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    342|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    342|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    342|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    342|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    342|    }                                                  \
  |  |  |  | 3939|  14.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  14.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  14.2k|                        .transform_error(make_eof_scan_error));
 5905|  14.2k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  14.5k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3578|  14.2k|    {
 3579|  14.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  14.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  14.2k|        return read_default_with_base(range, value, 10);
 3581|  14.2k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIyEENS0_13scan_expectedIS9_EERT_:
 5910|  14.7k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  14.7k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  14.7k|            auto rd = make_reader<T, char_type>();
 5916|  14.7k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  14.7k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_yEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  14.7k|    {
 5903|  14.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  14.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 369, False: 14.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    369|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    369|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    369|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    369|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    369|    }                                                  \
  |  |  |  | 3939|  14.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  14.3k|                        .transform_error(make_eof_scan_error));
 5905|  14.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  14.7k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3578|  14.3k|    {
 3579|  14.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  14.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  14.3k|        return read_default_with_base(range, value, 10);
 3581|  14.3k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIaEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5910|  15.8k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  15.8k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  15.8k|            auto rd = make_reader<T, char_type>();
 5920|  15.8k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 15.8k, False: 0]
  ------------------
 5921|  15.8k|                return impl(rd, range, value);
 5922|  15.8k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  15.8k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|  15.8k|    {
 5903|  15.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  15.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  15.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  15.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  15.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 372, False: 15.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    372|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    372|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    372|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    372|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    372|    }                                                  \
  |  |  |  | 3939|  15.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  15.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  15.4k|                        .transform_error(make_eof_scan_error));
 5905|  15.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  15.8k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5834|  94.1k|{
 5835|  94.1k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  94.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.85k, False: 92.2k]
  |  |  ------------------
  ------------------
 5836|  1.85k|        return unexpected(e);
 5837|  1.85k|    }
 5838|       |
 5839|  92.2k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 0, False: 92.2k]
  ------------------
 5840|      0|        return range.begin();
 5841|      0|    }
 5842|       |
 5843|  92.2k|    return skip_classic_whitespace(range);
 5844|  92.2k|}
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3578|  15.4k|    {
 3579|  15.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  15.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  15.4k|        return read_default_with_base(range, value, 10);
 3581|  15.4k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3542|  15.4k|    {
 3543|  15.4k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  15.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  15.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  15.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  15.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 15.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  15.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  15.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  15.4k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|       |        if constexpr (!std::is_signed_v<T>) {
 3547|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3548|       |                return detail::unexpected_scan_error(
 3549|       |                    scan_error::invalid_scanned_value,
 3550|       |                    "Unexpected '-' sign when parsing an "
 3551|       |                    "unsigned value");
 3552|       |            }
 3553|       |        }
 3554|       |
 3555|  15.4k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 15.4k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  29.8k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  15.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  15.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  15.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  15.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.11k, False: 14.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.11k|    }                                                  \
  |  |  |  | 3939|  15.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  29.8k|                parse_integer_digits_without_thsep(
 3562|  29.8k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  29.8k|                    prefix_result.parsed_base));
 3564|       |
 3565|  29.8k|        auto buf = make_contiguous_buffer(
 3566|  29.8k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  29.8k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  14.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 576, False: 13.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    576|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    576|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    576|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    576|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    576|    }                                                  \
  |  |  |  | 3939|  14.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|  13.8k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|  13.8k|                                    prefix_result.parsed_base));
 3570|       |
 3571|  13.8k|        return ranges::next(prefix_result.iterator,
 3572|  13.8k|                            ranges::distance(buf.view().begin(), result_it));
 3573|  29.8k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIiEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5910|  17.7k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  17.7k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  17.7k|            auto rd = make_reader<T, char_type>();
 5920|  17.7k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 17.7k, False: 0]
  ------------------
 5921|  17.7k|                return impl(rd, range, value);
 5922|  17.7k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  17.7k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|  17.7k|    {
 5903|  17.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  17.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 477, False: 17.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    477|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    477|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    477|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    477|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    477|    }                                                  \
  |  |  |  | 3939|  17.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  17.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  17.2k|                        .transform_error(make_eof_scan_error));
 5905|  17.2k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  17.7k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3578|  17.2k|    {
 3579|  17.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  17.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  17.2k|        return read_default_with_base(range, value, 10);
 3581|  17.2k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3542|  17.2k|    {
 3543|  17.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  17.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 17.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  17.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  17.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  17.2k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|       |        if constexpr (!std::is_signed_v<T>) {
 3547|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3548|       |                return detail::unexpected_scan_error(
 3549|       |                    scan_error::invalid_scanned_value,
 3550|       |                    "Unexpected '-' sign when parsing an "
 3551|       |                    "unsigned value");
 3552|       |            }
 3553|       |        }
 3554|       |
 3555|  17.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 17.2k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  33.2k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  17.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.29k, False: 15.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.29k|    }                                                  \
  |  |  |  | 3939|  17.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  15.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  33.2k|                parse_integer_digits_without_thsep(
 3562|  33.2k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  33.2k|                    prefix_result.parsed_base));
 3564|       |
 3565|  33.2k|        auto buf = make_contiguous_buffer(
 3566|  33.2k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  33.2k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  15.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  15.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  15.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  15.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 288, False: 15.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    288|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    288|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    288|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    288|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    288|    }                                                  \
  |  |  |  | 3939|  15.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  15.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|  15.7k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|  15.7k|                                    prefix_result.parsed_base));
 3570|       |
 3571|  15.7k|        return ranges::next(prefix_result.iterator,
 3572|  15.7k|                            ranges::distance(buf.view().begin(), result_it));
 3573|  33.2k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIxEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5910|  18.0k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  18.0k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  18.0k|            auto rd = make_reader<T, char_type>();
 5920|  18.0k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 18.0k, False: 0]
  ------------------
 5921|  18.0k|                return impl(rd, range, value);
 5922|  18.0k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  18.0k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|  18.0k|    {
 5903|  18.0k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 522, False: 17.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    522|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    522|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    522|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    522|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    522|    }                                                  \
  |  |  |  | 3939|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  17.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  17.5k|                        .transform_error(make_eof_scan_error));
 5905|  17.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  18.0k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3578|  17.5k|    {
 3579|  17.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  17.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  17.5k|        return read_default_with_base(range, value, 10);
 3581|  17.5k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3542|  17.5k|    {
 3543|  17.5k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  17.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 17.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  17.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  17.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  17.5k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|       |        if constexpr (!std::is_signed_v<T>) {
 3547|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3548|       |                return detail::unexpected_scan_error(
 3549|       |                    scan_error::invalid_scanned_value,
 3550|       |                    "Unexpected '-' sign when parsing an "
 3551|       |                    "unsigned value");
 3552|       |            }
 3553|       |        }
 3554|       |
 3555|  17.5k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 17.5k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  33.7k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  17.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.37k, False: 16.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.37k|    }                                                  \
  |  |  |  | 3939|  17.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  16.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  33.7k|                parse_integer_digits_without_thsep(
 3562|  33.7k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  33.7k|                    prefix_result.parsed_base));
 3564|       |
 3565|  33.7k|        auto buf = make_contiguous_buffer(
 3566|  33.7k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  33.7k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  16.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  16.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  16.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  16.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 171, False: 16.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    171|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    171|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    171|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    171|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    171|    }                                                  \
  |  |  |  | 3939|  16.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  16.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|  16.0k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|  16.0k|                                    prefix_result.parsed_base));
 3570|       |
 3571|  16.0k|        return ranges::next(prefix_result.iterator,
 3572|  16.0k|                            ranges::distance(buf.view().begin(), result_it));
 3573|  33.7k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIhEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5910|  13.2k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  13.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  13.2k|            auto rd = make_reader<T, char_type>();
 5920|  13.2k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 13.2k, False: 0]
  ------------------
 5921|  13.2k|                return impl(rd, range, value);
 5922|  13.2k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  13.2k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|  13.2k|    {
 5903|  13.2k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  13.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 267, False: 12.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    267|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    267|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    267|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    267|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    267|    }                                                  \
  |  |  |  | 3939|  13.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  12.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  12.9k|                        .transform_error(make_eof_scan_error));
 5905|  12.9k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  13.2k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3578|  12.9k|    {
 3579|  12.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  12.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  12.9k|        return read_default_with_base(range, value, 10);
 3581|  12.9k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3542|  12.9k|    {
 3543|  12.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  12.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 12.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  12.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  12.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  12.9k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|  12.9k|        if constexpr (!std::is_signed_v<T>) {
 3547|  12.9k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3547:17): [True: 756, False: 12.1k]
  ------------------
 3548|    756|                return detail::unexpected_scan_error(
 3549|    756|                    scan_error::invalid_scanned_value,
 3550|    756|                    "Unexpected '-' sign when parsing an "
 3551|    756|                    "unsigned value");
 3552|    756|            }
 3553|  12.9k|        }
 3554|       |
 3555|  12.9k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 12.9k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  25.1k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  12.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 759, False: 12.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    759|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    759|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    759|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    759|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    759|    }                                                  \
  |  |  |  | 3939|  12.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  25.1k|                parse_integer_digits_without_thsep(
 3562|  25.1k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  25.1k|                    prefix_result.parsed_base));
 3564|       |
 3565|  25.1k|        auto buf = make_contiguous_buffer(
 3566|  25.1k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  25.1k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 282, False: 11.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    282|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    282|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    282|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    282|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    282|    }                                                  \
  |  |  |  | 3939|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|  11.9k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|  11.9k|                                    prefix_result.parsed_base));
 3570|       |
 3571|  11.9k|        return ranges::next(prefix_result.iterator,
 3572|  11.9k|                            ranges::distance(buf.view().begin(), result_it));
 3573|  25.1k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIjEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5910|  14.5k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  14.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  14.5k|            auto rd = make_reader<T, char_type>();
 5920|  14.5k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 14.5k, False: 0]
  ------------------
 5921|  14.5k|                return impl(rd, range, value);
 5922|  14.5k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  14.5k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|  14.5k|    {
 5903|  14.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  14.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 324, False: 14.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    324|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    324|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    324|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    324|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    324|    }                                                  \
  |  |  |  | 3939|  14.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  14.1k|                        .transform_error(make_eof_scan_error));
 5905|  14.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  14.5k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3578|  14.1k|    {
 3579|  14.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  14.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  14.1k|        return read_default_with_base(range, value, 10);
 3581|  14.1k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3542|  14.1k|    {
 3543|  14.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  14.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 14.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  14.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  14.1k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|  14.1k|        if constexpr (!std::is_signed_v<T>) {
 3547|  14.1k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3547:17): [True: 774, False: 13.4k]
  ------------------
 3548|    774|                return detail::unexpected_scan_error(
 3549|    774|                    scan_error::invalid_scanned_value,
 3550|    774|                    "Unexpected '-' sign when parsing an "
 3551|    774|                    "unsigned value");
 3552|    774|            }
 3553|  14.1k|        }
 3554|       |
 3555|  14.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 14.1k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  27.5k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  14.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 813, False: 13.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    813|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    813|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    813|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    813|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    813|    }                                                  \
  |  |  |  | 3939|  14.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  27.5k|                parse_integer_digits_without_thsep(
 3562|  27.5k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  27.5k|                    prefix_result.parsed_base));
 3564|       |
 3565|  27.5k|        auto buf = make_contiguous_buffer(
 3566|  27.5k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  27.5k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  13.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 153, False: 13.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    153|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    153|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    153|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    153|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    153|    }                                                  \
  |  |  |  | 3939|  13.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|  13.2k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|  13.2k|                                    prefix_result.parsed_base));
 3570|       |
 3571|  13.2k|        return ranges::next(prefix_result.iterator,
 3572|  13.2k|                            ranges::distance(buf.view().begin(), result_it));
 3573|  27.5k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIyEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5910|  14.6k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  14.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  14.6k|            auto rd = make_reader<T, char_type>();
 5920|  14.6k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 14.6k, False: 0]
  ------------------
 5921|  14.6k|                return impl(rd, range, value);
 5922|  14.6k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  14.6k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|  14.6k|    {
 5903|  14.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  14.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 351, False: 14.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    351|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    351|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    351|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    351|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    351|    }                                                  \
  |  |  |  | 3939|  14.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  14.3k|                        .transform_error(make_eof_scan_error));
 5905|  14.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  14.6k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3578|  14.3k|    {
 3579|  14.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  14.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  14.3k|        return read_default_with_base(range, value, 10);
 3581|  14.3k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3542|  14.3k|    {
 3543|  14.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  14.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 14.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  14.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  14.3k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|  14.3k|        if constexpr (!std::is_signed_v<T>) {
 3547|  14.3k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3547:17): [True: 798, False: 13.5k]
  ------------------
 3548|    798|                return detail::unexpected_scan_error(
 3549|    798|                    scan_error::invalid_scanned_value,
 3550|    798|                    "Unexpected '-' sign when parsing an "
 3551|    798|                    "unsigned value");
 3552|    798|            }
 3553|  14.3k|        }
 3554|       |
 3555|  14.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 14.3k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  27.8k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  14.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 828, False: 13.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    828|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    828|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    828|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    828|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    828|    }                                                  \
  |  |  |  | 3939|  14.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  27.8k|                parse_integer_digits_without_thsep(
 3562|  27.8k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  27.8k|                    prefix_result.parsed_base));
 3564|       |
 3565|  27.8k|        auto buf = make_contiguous_buffer(
 3566|  27.8k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  27.8k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  13.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 87, False: 13.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     87|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     87|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     87|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     87|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     87|    }                                                  \
  |  |  |  | 3939|  13.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|  13.4k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|  13.4k|                                    prefix_result.parsed_base));
 3570|       |
 3571|  13.4k|        return ranges::next(prefix_result.iterator,
 3572|  13.4k|                            ranges::distance(buf.view().begin(), result_it));
 3573|  27.8k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSL_10locale_refE:
 2985|   354k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|   354k|    static_cast<    \
  |  |  935|   354k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|   354k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|   354k|          m_current(m_range.begin())
 2988|   354k|    {
 2989|   354k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE3endEv:
 2997|   610k|    {
 2998|   610k|        return m_range.end();
 2999|   610k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toES7_:
 3012|   280k|    {
 3013|   280k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  930|   280k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   280k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3014|   280k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3015|   280k|            if (it == nullptr) {
  ------------------
  |  Branch (3015:17): [True: 0, False: 280k]
  ------------------
 3016|      0|                it = end();
 3017|      0|            }
 3018|   280k|        }
 3019|   280k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|   280k|    static_cast<    \
  |  |  935|   280k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3020|   280k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5rangeEv:
 3002|   330k|    {
 3003|   330k|        return ranges::subrange{begin(), end()};
 3004|   330k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIaEENS0_13scan_expectedIS9_EERT_:
 6226|  53.2k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  53.2k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  53.2k|            auto rd = make_reader<T, char_type>();
 6232|  53.2k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  53.2k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  53.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 53.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6233|  53.2k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  53.2k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_aEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|  53.2k|    {
 6162|  53.2k|        const bool need_skipped_width =
 6163|  53.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 53.2k]
  |  Branch (6163:33): [True: 0, False: 53.2k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  53.2k|        auto it = rng.begin();
 6167|  53.2k|        std::ptrdiff_t prefix_width = 0;
 6168|  53.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 53.2k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  53.2k|        else {
 6176|  53.2k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  53.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  53.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  53.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  53.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.34k, False: 51.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.34k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.34k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.34k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.34k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.34k|    }                                                  \
  |  |  |  | 3939|  53.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  51.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  51.8k|            std::tie(it, prefix_width) = prefix_result;
 6178|  51.8k|        }
 6179|  51.8k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  51.8k|        std::ptrdiff_t value_width = 0;
 6183|  51.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 51.8k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  51.8k|        else {
 6199|  51.8k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  51.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  51.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  51.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 6.90k, False: 44.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  6.90k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  6.90k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  6.90k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  6.90k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  6.90k|    }                                                  \
  |  | 3939|  51.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  51.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  44.9k|                                             specs, value, loc));
 6201|       |
 6202|  44.9k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 44.9k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  44.9k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  44.9k|        std::ptrdiff_t postfix_width = 0;
 6211|  44.9k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 43.9k, False: 1.00k]
  ------------------
 6212|  43.9k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  43.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  43.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  43.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  43.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 43.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  43.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  43.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  43.9k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  43.9k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  43.9k|                                 value_width));
 6216|  43.9k|            std::tie(it, postfix_width) = postfix_result;
 6217|  43.9k|        }
 6218|       |
 6219|  44.9k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  44.9k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  44.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 44.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|  44.9k|            specs, prefix_width, value_width, postfix_width));
 6221|  44.9k|        return it;
 6222|  44.9k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6074|   330k|    {
 6075|   330k|        const bool need_skipped_width =
 6076|   330k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6076:13): [True: 0, False: 330k]
  |  Branch (6076:33): [True: 0, False: 330k]
  ------------------
 6077|   330k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6078|       |
 6079|       |        // Read prefix
 6080|   330k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6080:13): [True: 0, False: 330k]
  ------------------
 6081|   330k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6081:13): [True: 0, False: 330k]
  ------------------
 6082|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6083|      0|                             need_skipped_width);
 6084|      0|        }
 6085|   330k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6085:13): [True: 330k, False: 0]
  |  Branch (6085:56): [True: 330k, False: 0]
  ------------------
 6086|       |            // Default alignment:
 6087|       |            // Skip preceding whitespace, if required by the reader
 6088|   330k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6088:17): [True: 0, False: 330k]
  ------------------
 6089|      0|                auto max_width_view = take_width(rng, specs.precision);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6093|      0|            }
 6094|   651k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|   330k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   330k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   330k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   330k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 8.74k, False: 321k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  8.74k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  8.74k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  8.74k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  8.74k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  8.74k|    }                                                  \
  |  |  |  | 3939|   330k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   321k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|   651k|                            make_eof_scan_error));
 6096|       |
 6097|   651k|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 321k]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|   321k|            return result_type{it, 0};
 6105|   651k|        }
 6106|       |
 6107|      0|        return result_type{rng.begin(), 0};
 6108|   330k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6116|   274k|    {
 6117|   274k|        const bool need_skipped_width =
 6118|   274k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6118:13): [True: 0, False: 274k]
  |  Branch (6118:33): [True: 0, False: 274k]
  ------------------
 6119|   274k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6120|       |
 6121|   274k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6121:13): [True: 0, False: 274k]
  ------------------
 6122|   274k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6122:13): [True: 0, False: 274k]
  ------------------
 6123|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6124:17): [True: 0, False: 0]
  ------------------
 6125|      0|                return result_type{rng.begin(), 0};
 6126|      0|            }
 6127|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6128|      0|                             specs.fill, need_skipped_width);
 6129|      0|        }
 6130|   274k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6130:13): [True: 274k, False: 0]
  ------------------
 6131|   274k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6131:13): [True: 0, False: 274k]
  ------------------
 6132|   274k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6132:15): [True: 0, False: 0]
  |  Branch (6132:35): [True: 0, False: 0]
  ------------------
 6133|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6133:15): [True: 0, False: 0]
  ------------------
 6134|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6134:15): [True: 0, False: 0]
  ------------------
 6135|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                const auto initial_width =
 6137|      0|                    specs.precision - prefix_width - value_width;
 6138|      0|                auto max_width_view = take_width(rng, initial_width);
 6139|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6140|      0|                                  .transform_error(make_eof_scan_error));
 6141|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6142|      0|            }
 6143|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|                            make_eof_scan_error));
 6145|       |
 6146|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return result_type{
 6148|      0|                    it,
 6149|      0|                    calculate_text_width(make_contiguous_buffer(
 6150|      0|                                             ranges::subrange{rng.begin(), it})
 6151|      0|                                             .view())};
 6152|      0|            }
 6153|      0|            return result_type{it, 0};
 6154|      0|        }
 6155|   274k|        return result_type{rng.begin(), 0};
 6156|   274k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIiEENS0_13scan_expectedIS9_EERT_:
 6226|  63.1k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  63.1k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  63.1k|            auto rd = make_reader<T, char_type>();
 6232|  63.1k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  63.1k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  63.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 63.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6233|  63.1k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  63.1k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|  63.1k|    {
 6162|  63.1k|        const bool need_skipped_width =
 6163|  63.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 63.1k]
  |  Branch (6163:33): [True: 0, False: 63.1k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  63.1k|        auto it = rng.begin();
 6167|  63.1k|        std::ptrdiff_t prefix_width = 0;
 6168|  63.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 63.1k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  63.1k|        else {
 6176|  63.1k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  63.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  63.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  63.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  63.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.78k, False: 61.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.78k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.78k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.78k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.78k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.78k|    }                                                  \
  |  |  |  | 3939|  63.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  61.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  61.3k|            std::tie(it, prefix_width) = prefix_result;
 6178|  61.3k|        }
 6179|  61.3k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  61.3k|        std::ptrdiff_t value_width = 0;
 6183|  61.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 61.3k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  61.3k|        else {
 6199|  61.3k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  61.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  61.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  61.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 6.46k, False: 54.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  6.46k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  6.46k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  6.46k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  6.46k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  6.46k|    }                                                  \
  |  | 3939|  61.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  61.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  54.8k|                                             specs, value, loc));
 6201|       |
 6202|  54.8k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 54.8k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  54.8k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  54.8k|        std::ptrdiff_t postfix_width = 0;
 6211|  54.8k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 53.5k, False: 1.34k]
  ------------------
 6212|  53.5k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  53.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  53.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  53.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  53.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 53.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  53.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  53.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  53.5k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  53.5k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  53.5k|                                 value_width));
 6216|  53.5k|            std::tie(it, postfix_width) = postfix_result;
 6217|  53.5k|        }
 6218|       |
 6219|  54.8k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  54.8k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  54.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 54.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|  54.8k|            specs, prefix_width, value_width, postfix_width));
 6221|  54.8k|        return it;
 6222|  54.8k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIxEENS0_13scan_expectedIS9_EERT_:
 6226|  64.3k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  64.3k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  64.3k|            auto rd = make_reader<T, char_type>();
 6232|  64.3k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  64.3k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  64.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 64.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6233|  64.3k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  64.3k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_xEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|  64.3k|    {
 6162|  64.3k|        const bool need_skipped_width =
 6163|  64.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 64.3k]
  |  Branch (6163:33): [True: 0, False: 64.3k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  64.3k|        auto it = rng.begin();
 6167|  64.3k|        std::ptrdiff_t prefix_width = 0;
 6168|  64.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 64.3k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  64.3k|        else {
 6176|  64.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  64.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  64.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  64.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  64.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.98k, False: 62.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.98k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.98k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.98k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.98k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.98k|    }                                                  \
  |  |  |  | 3939|  64.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  62.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  62.3k|            std::tie(it, prefix_width) = prefix_result;
 6178|  62.3k|        }
 6179|  62.3k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  62.3k|        std::ptrdiff_t value_width = 0;
 6183|  62.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 62.3k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  62.3k|        else {
 6199|  62.3k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  62.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  62.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  62.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 6.27k, False: 56.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  6.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  6.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  6.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  6.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  6.27k|    }                                                  \
  |  | 3939|  62.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  62.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  56.0k|                                             specs, value, loc));
 6201|       |
 6202|  56.0k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 56.0k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  56.0k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  56.0k|        std::ptrdiff_t postfix_width = 0;
 6211|  56.0k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 54.5k, False: 1.50k]
  ------------------
 6212|  54.5k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  54.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  54.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  54.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  54.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 54.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  54.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  54.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  54.5k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  54.5k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  54.5k|                                 value_width));
 6216|  54.5k|            std::tie(it, postfix_width) = postfix_result;
 6217|  54.5k|        }
 6218|       |
 6219|  56.0k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  56.0k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  56.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 56.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|  56.0k|            specs, prefix_width, value_width, postfix_width));
 6221|  56.0k|        return it;
 6222|  56.0k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIhEENS0_13scan_expectedIS9_EERT_:
 6226|  46.8k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  46.8k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  46.8k|            auto rd = make_reader<T, char_type>();
 6232|  46.8k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  46.8k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  46.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 46.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6233|  46.8k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  46.8k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_hEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|  46.8k|    {
 6162|  46.8k|        const bool need_skipped_width =
 6163|  46.8k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 46.8k]
  |  Branch (6163:33): [True: 0, False: 46.8k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  46.8k|        auto it = rng.begin();
 6167|  46.8k|        std::ptrdiff_t prefix_width = 0;
 6168|  46.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 46.8k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  46.8k|        else {
 6176|  46.8k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  46.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  46.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  46.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  46.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.02k, False: 45.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.02k|    }                                                  \
  |  |  |  | 3939|  46.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  45.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  45.8k|            std::tie(it, prefix_width) = prefix_result;
 6178|  45.8k|        }
 6179|  45.8k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  45.8k|        std::ptrdiff_t value_width = 0;
 6183|  45.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 45.8k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  45.8k|        else {
 6199|  45.8k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  45.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  45.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  45.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 7.23k, False: 38.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  7.23k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  7.23k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  7.23k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  7.23k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  7.23k|    }                                                  \
  |  | 3939|  45.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  45.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  38.6k|                                             specs, value, loc));
 6201|       |
 6202|  38.6k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 38.6k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  38.6k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  38.6k|        std::ptrdiff_t postfix_width = 0;
 6211|  38.6k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 37.8k, False: 762]
  ------------------
 6212|  37.8k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  37.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  37.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  37.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  37.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 37.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  37.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  37.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  37.8k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  37.8k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  37.8k|                                 value_width));
 6216|  37.8k|            std::tie(it, postfix_width) = postfix_result;
 6217|  37.8k|        }
 6218|       |
 6219|  38.6k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  38.6k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  38.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 38.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|  38.6k|            specs, prefix_width, value_width, postfix_width));
 6221|  38.6k|        return it;
 6222|  38.6k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIjEENS0_13scan_expectedIS9_EERT_:
 6226|  51.0k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  51.0k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  51.0k|            auto rd = make_reader<T, char_type>();
 6232|  51.0k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  51.0k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  51.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 51.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6233|  51.0k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  51.0k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|  51.0k|    {
 6162|  51.0k|        const bool need_skipped_width =
 6163|  51.0k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 51.0k]
  |  Branch (6163:33): [True: 0, False: 51.0k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  51.0k|        auto it = rng.begin();
 6167|  51.0k|        std::ptrdiff_t prefix_width = 0;
 6168|  51.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 51.0k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  51.0k|        else {
 6176|  51.0k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  51.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  51.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  51.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  51.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.24k, False: 49.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.24k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.24k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.24k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.24k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.24k|    }                                                  \
  |  |  |  | 3939|  51.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  49.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  49.7k|            std::tie(it, prefix_width) = prefix_result;
 6178|  49.7k|        }
 6179|  49.7k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  49.7k|        std::ptrdiff_t value_width = 0;
 6183|  49.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 49.7k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  49.7k|        else {
 6199|  49.7k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  49.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  49.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  49.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 7.00k, False: 42.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  7.00k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  7.00k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  7.00k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  7.00k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  7.00k|    }                                                  \
  |  | 3939|  49.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  49.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  42.7k|                                             specs, value, loc));
 6201|       |
 6202|  42.7k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 42.7k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  42.7k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  42.7k|        std::ptrdiff_t postfix_width = 0;
 6211|  42.7k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 41.8k, False: 928]
  ------------------
 6212|  41.8k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  41.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  41.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  41.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  41.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 41.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  41.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  41.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  41.8k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  41.8k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  41.8k|                                 value_width));
 6216|  41.8k|            std::tie(it, postfix_width) = postfix_result;
 6217|  41.8k|        }
 6218|       |
 6219|  42.7k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  42.7k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  42.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 42.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|  42.7k|            specs, prefix_width, value_width, postfix_width));
 6221|  42.7k|        return it;
 6222|  42.7k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIyEENS0_13scan_expectedIS9_EERT_:
 6226|  51.5k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  51.5k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  51.5k|            auto rd = make_reader<T, char_type>();
 6232|  51.5k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  51.5k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  51.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 51.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6233|  51.5k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  51.5k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_yEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|  51.5k|    {
 6162|  51.5k|        const bool need_skipped_width =
 6163|  51.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 51.5k]
  |  Branch (6163:33): [True: 0, False: 51.5k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  51.5k|        auto it = rng.begin();
 6167|  51.5k|        std::ptrdiff_t prefix_width = 0;
 6168|  51.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 51.5k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  51.5k|        else {
 6176|  51.5k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  51.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  51.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  51.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  51.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.35k, False: 50.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.35k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.35k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.35k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.35k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.35k|    }                                                  \
  |  |  |  | 3939|  51.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  50.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  50.2k|            std::tie(it, prefix_width) = prefix_result;
 6178|  50.2k|        }
 6179|  50.2k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  50.2k|        std::ptrdiff_t value_width = 0;
 6183|  50.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 50.2k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  50.2k|        else {
 6199|  50.2k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  50.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  50.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  50.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 6.90k, False: 43.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  6.90k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  6.90k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  6.90k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  6.90k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  6.90k|    }                                                  \
  |  | 3939|  50.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  50.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  43.3k|                                             specs, value, loc));
 6201|       |
 6202|  43.3k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 43.3k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  43.3k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  43.3k|        std::ptrdiff_t postfix_width = 0;
 6211|  43.3k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 42.3k, False: 1.03k]
  ------------------
 6212|  42.3k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  42.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  42.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  42.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  42.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 42.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  42.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  42.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  42.3k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  42.3k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  42.3k|                                 value_width));
 6216|  42.3k|            std::tie(it, postfix_width) = postfix_result;
 6217|  42.3k|        }
 6218|       |
 6219|  43.3k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  43.3k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  43.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 43.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|  43.3k|            specs, prefix_width, value_width, postfix_width));
 6221|  43.3k|        return it;
 6222|  43.3k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIaEENS0_13scan_expectedIS9_EERT_:
 5910|  4.23k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  4.23k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  4.23k|            auto rd = make_reader<T, char_type>();
 5916|  4.23k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  4.23k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_aEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  4.23k|    {
 5903|  4.23k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  4.23k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.23k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.23k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 60, False: 4.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     60|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     60|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     60|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     60|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     60|    }                                                  \
  |  |  |  | 3939|  4.23k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  4.17k|                        .transform_error(make_eof_scan_error));
 5905|  4.17k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  4.23k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5834|  25.4k|{
 5835|  25.4k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  25.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 123, False: 25.3k]
  |  |  ------------------
  ------------------
 5836|    123|        return unexpected(e);
 5837|    123|    }
 5838|       |
 5839|  25.3k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 0, False: 25.3k]
  ------------------
 5840|      0|        return range.begin();
 5841|      0|    }
 5842|       |
 5843|  25.3k|    return skip_classic_whitespace(range);
 5844|  25.3k|}
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3578|  4.17k|    {
 3579|  4.17k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  4.17k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  4.17k|        return read_default_with_base(range, value, 10);
 3581|  4.17k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3542|  4.17k|    {
 3543|  4.17k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  4.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 4.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  4.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  4.17k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|       |        if constexpr (!std::is_signed_v<T>) {
 3547|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3548|       |                return detail::unexpected_scan_error(
 3549|       |                    scan_error::invalid_scanned_value,
 3550|       |                    "Unexpected '-' sign when parsing an "
 3551|       |                    "unsigned value");
 3552|       |            }
 3553|       |        }
 3554|       |
 3555|  4.17k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 4.17k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  8.33k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  4.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 9, False: 4.16k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      9|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      9|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      9|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      9|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      9|    }                                                  \
  |  |  |  | 3939|  4.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  8.33k|                parse_integer_digits_without_thsep(
 3562|  8.33k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  8.33k|                    prefix_result.parsed_base));
 3564|       |
 3565|  8.33k|        auto buf = make_contiguous_buffer(
 3566|  8.33k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  8.33k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  4.16k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.16k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.16k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.05k, False: 102]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.05k|    }                                                  \
  |  |  |  | 3939|  4.16k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    102|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|    102|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|    102|                                    prefix_result.parsed_base));
 3570|       |
 3571|    102|        return ranges::next(prefix_result.iterator,
 3572|    102|                            ranges::distance(buf.view().begin(), result_it));
 3573|  8.33k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIiEENS0_13scan_expectedIS9_EERT_:
 5910|  4.25k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  4.25k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  4.25k|            auto rd = make_reader<T, char_type>();
 5916|  4.25k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  4.25k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  4.25k|    {
 5903|  4.25k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  4.25k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.25k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.25k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 63, False: 4.19k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     63|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     63|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     63|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     63|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     63|    }                                                  \
  |  |  |  | 3939|  4.25k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  4.19k|                        .transform_error(make_eof_scan_error));
 5905|  4.19k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  4.25k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3578|  4.19k|    {
 3579|  4.19k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  4.19k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  4.19k|        return read_default_with_base(range, value, 10);
 3581|  4.19k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3542|  4.19k|    {
 3543|  4.19k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  4.19k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.19k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.19k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 4.19k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  4.19k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  4.19k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|       |        if constexpr (!std::is_signed_v<T>) {
 3547|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3548|       |                return detail::unexpected_scan_error(
 3549|       |                    scan_error::invalid_scanned_value,
 3550|       |                    "Unexpected '-' sign when parsing an "
 3551|       |                    "unsigned value");
 3552|       |            }
 3553|       |        }
 3554|       |
 3555|  4.19k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 4.19k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  8.37k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  4.19k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.19k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.19k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 9, False: 4.18k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      9|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      9|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      9|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      9|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      9|    }                                                  \
  |  |  |  | 3939|  4.19k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  8.37k|                parse_integer_digits_without_thsep(
 3562|  8.37k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  8.37k|                    prefix_result.parsed_base));
 3564|       |
 3565|  8.37k|        auto buf = make_contiguous_buffer(
 3566|  8.37k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  8.37k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  4.18k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.18k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.18k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.05k, False: 126]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.05k|    }                                                  \
  |  |  |  | 3939|  4.18k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    126|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|    126|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|    126|                                    prefix_result.parsed_base));
 3570|       |
 3571|    126|        return ranges::next(prefix_result.iterator,
 3572|    126|                            ranges::distance(buf.view().begin(), result_it));
 3573|  8.37k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIxEENS0_13scan_expectedIS9_EERT_:
 5910|  4.28k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  4.28k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  4.28k|            auto rd = make_reader<T, char_type>();
 5916|  4.28k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  4.28k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_xEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  4.28k|    {
 5903|  4.28k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  4.28k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.28k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.28k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 63, False: 4.22k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     63|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     63|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     63|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     63|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     63|    }                                                  \
  |  |  |  | 3939|  4.28k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  4.22k|                        .transform_error(make_eof_scan_error));
 5905|  4.22k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  4.28k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3578|  4.22k|    {
 3579|  4.22k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  4.22k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  4.22k|        return read_default_with_base(range, value, 10);
 3581|  4.22k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3542|  4.22k|    {
 3543|  4.22k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  4.22k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.22k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.22k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 4.22k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  4.22k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  4.22k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|       |        if constexpr (!std::is_signed_v<T>) {
 3547|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3548|       |                return detail::unexpected_scan_error(
 3549|       |                    scan_error::invalid_scanned_value,
 3550|       |                    "Unexpected '-' sign when parsing an "
 3551|       |                    "unsigned value");
 3552|       |            }
 3553|       |        }
 3554|       |
 3555|  4.22k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 4.22k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  8.43k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  4.22k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.22k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.22k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 9, False: 4.21k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      9|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      9|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      9|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      9|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      9|    }                                                  \
  |  |  |  | 3939|  4.22k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.21k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  8.43k|                parse_integer_digits_without_thsep(
 3562|  8.43k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  8.43k|                    prefix_result.parsed_base));
 3564|       |
 3565|  8.43k|        auto buf = make_contiguous_buffer(
 3566|  8.43k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  8.43k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  4.21k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.21k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.21k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.21k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.05k, False: 159]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.05k|    }                                                  \
  |  |  |  | 3939|  4.21k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    159|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|    159|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|    159|                                    prefix_result.parsed_base));
 3570|       |
 3571|    159|        return ranges::next(prefix_result.iterator,
 3572|    159|                            ranges::distance(buf.view().begin(), result_it));
 3573|  8.43k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIhEENS0_13scan_expectedIS9_EERT_:
 5910|  4.20k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  4.20k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  4.20k|            auto rd = make_reader<T, char_type>();
 5916|  4.20k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  4.20k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_hEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  4.20k|    {
 5903|  4.20k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  4.20k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.20k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.20k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 51, False: 4.15k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     51|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     51|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     51|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     51|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     51|    }                                                  \
  |  |  |  | 3939|  4.20k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  4.15k|                        .transform_error(make_eof_scan_error));
 5905|  4.15k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  4.20k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3578|  4.15k|    {
 3579|  4.15k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  4.15k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  4.15k|        return read_default_with_base(range, value, 10);
 3581|  4.15k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3542|  4.15k|    {
 3543|  4.15k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  4.15k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.15k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.15k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 4.15k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  4.15k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  4.15k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|  4.15k|        if constexpr (!std::is_signed_v<T>) {
 3547|  4.15k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3547:17): [True: 51, False: 4.10k]
  ------------------
 3548|     51|                return detail::unexpected_scan_error(
 3549|     51|                    scan_error::invalid_scanned_value,
 3550|     51|                    "Unexpected '-' sign when parsing an "
 3551|     51|                    "unsigned value");
 3552|     51|            }
 3553|  4.15k|        }
 3554|       |
 3555|  4.15k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 4.15k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  8.31k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  4.15k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.15k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.15k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3, False: 4.15k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      3|    }                                                  \
  |  |  |  | 3939|  4.15k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  8.31k|                parse_integer_digits_without_thsep(
 3562|  8.31k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  8.31k|                    prefix_result.parsed_base));
 3564|       |
 3565|  8.31k|        auto buf = make_contiguous_buffer(
 3566|  8.31k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  8.31k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  4.15k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.15k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.15k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.02k, False: 132]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.02k|    }                                                  \
  |  |  |  | 3939|  4.15k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    132|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|    132|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|    132|                                    prefix_result.parsed_base));
 3570|       |
 3571|    132|        return ranges::next(prefix_result.iterator,
 3572|    132|                            ranges::distance(buf.view().begin(), result_it));
 3573|  8.31k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIjEENS0_13scan_expectedIS9_EERT_:
 5910|  4.22k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  4.22k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  4.22k|            auto rd = make_reader<T, char_type>();
 5916|  4.22k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  4.22k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  4.22k|    {
 5903|  4.22k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  4.22k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.22k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.22k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 51, False: 4.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     51|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     51|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     51|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     51|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     51|    }                                                  \
  |  |  |  | 3939|  4.22k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  4.17k|                        .transform_error(make_eof_scan_error));
 5905|  4.17k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  4.22k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3578|  4.17k|    {
 3579|  4.17k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  4.17k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  4.17k|        return read_default_with_base(range, value, 10);
 3581|  4.17k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3542|  4.17k|    {
 3543|  4.17k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  4.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 4.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  4.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  4.17k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|  4.17k|        if constexpr (!std::is_signed_v<T>) {
 3547|  4.17k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3547:17): [True: 51, False: 4.12k]
  ------------------
 3548|     51|                return detail::unexpected_scan_error(
 3549|     51|                    scan_error::invalid_scanned_value,
 3550|     51|                    "Unexpected '-' sign when parsing an "
 3551|     51|                    "unsigned value");
 3552|     51|            }
 3553|  4.17k|        }
 3554|       |
 3555|  4.17k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 4.17k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  8.34k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  4.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3, False: 4.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      3|    }                                                  \
  |  |  |  | 3939|  4.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  8.34k|                parse_integer_digits_without_thsep(
 3562|  8.34k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  8.34k|                    prefix_result.parsed_base));
 3564|       |
 3565|  8.34k|        auto buf = make_contiguous_buffer(
 3566|  8.34k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  8.34k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  4.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.02k, False: 150]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.02k|    }                                                  \
  |  |  |  | 3939|  4.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    150|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|    150|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|    150|                                    prefix_result.parsed_base));
 3570|       |
 3571|    150|        return ranges::next(prefix_result.iterator,
 3572|    150|                            ranges::distance(buf.view().begin(), result_it));
 3573|  8.34k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIyEENS0_13scan_expectedIS9_EERT_:
 5910|  4.25k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  4.25k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  4.25k|            auto rd = make_reader<T, char_type>();
 5916|  4.25k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  4.25k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_yEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  4.25k|    {
 5903|  4.25k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  4.25k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.25k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.25k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 51, False: 4.20k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     51|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     51|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     51|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     51|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     51|    }                                                  \
  |  |  |  | 3939|  4.25k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  4.20k|                        .transform_error(make_eof_scan_error));
 5905|  4.20k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  4.25k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3578|  4.20k|    {
 3579|  4.20k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  4.20k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  4.20k|        return read_default_with_base(range, value, 10);
 3581|  4.20k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3542|  4.20k|    {
 3543|  4.20k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  4.20k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.20k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.20k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 4.20k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  4.20k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  4.20k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|  4.20k|        if constexpr (!std::is_signed_v<T>) {
 3547|  4.20k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3547:17): [True: 57, False: 4.14k]
  ------------------
 3548|     57|                return detail::unexpected_scan_error(
 3549|     57|                    scan_error::invalid_scanned_value,
 3550|     57|                    "Unexpected '-' sign when parsing an "
 3551|     57|                    "unsigned value");
 3552|     57|            }
 3553|  4.20k|        }
 3554|       |
 3555|  4.20k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 4.20k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  8.39k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  4.20k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.20k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.20k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3, False: 4.19k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      3|    }                                                  \
  |  |  |  | 3939|  4.20k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  8.39k|                parse_integer_digits_without_thsep(
 3562|  8.39k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  8.39k|                    prefix_result.parsed_base));
 3564|       |
 3565|  8.39k|        auto buf = make_contiguous_buffer(
 3566|  8.39k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  8.39k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  4.19k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.19k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.19k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.01k, False: 180]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.01k|    }                                                  \
  |  |  |  | 3939|  4.19k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    180|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|    180|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|    180|                                    prefix_result.parsed_base));
 3570|       |
 3571|    180|        return ranges::next(prefix_result.iterator,
 3572|    180|                            ranges::distance(buf.view().begin(), result_it));
 3573|  8.39k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSL_10locale_refE:
 2985|   156k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|   156k|    static_cast<    \
  |  |  935|   156k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|   156k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|   156k|          m_current(m_range.begin())
 2988|   156k|    {
 2989|   156k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE3endEv:
 2997|   114k|    {
 2998|   114k|        return m_range.end();
 2999|   114k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toES7_:
 3012|  7.90k|    {
 3013|  7.90k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  930|  7.90k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  7.90k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3014|  7.90k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3015|  7.90k|            if (it == nullptr) {
  ------------------
  |  Branch (3015:17): [True: 0, False: 7.90k]
  ------------------
 3016|      0|                it = end();
 3017|      0|            }
 3018|  7.90k|        }
 3019|  7.90k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|  7.90k|    static_cast<    \
  |  |  935|  7.90k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3020|  7.90k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5rangeEv:
 3002|   106k|    {
 3003|   106k|        return ranges::subrange{begin(), end()};
 3004|   106k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIaEENS0_13scan_expectedIS9_EERT_:
 6226|  16.8k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  16.8k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  16.8k|            auto rd = make_reader<T, char_type>();
 6232|  16.8k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  16.8k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 16.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6233|  16.8k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  16.8k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_aEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|  16.8k|    {
 6162|  16.8k|        const bool need_skipped_width =
 6163|  16.8k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 16.8k]
  |  Branch (6163:33): [True: 0, False: 16.8k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  16.8k|        auto it = rng.begin();
 6167|  16.8k|        std::ptrdiff_t prefix_width = 0;
 6168|  16.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 16.8k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  16.8k|        else {
 6176|  16.8k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  16.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  16.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  16.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 248, False: 16.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    248|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    248|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    248|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    248|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    248|    }                                                  \
  |  |  |  | 3939|  16.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  16.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  16.6k|            std::tie(it, prefix_width) = prefix_result;
 6178|  16.6k|        }
 6179|  16.6k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  16.6k|        std::ptrdiff_t value_width = 0;
 6183|  16.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 16.6k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  16.6k|        else {
 6199|  16.6k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  16.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  16.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  16.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 16.2k, False: 368]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  16.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  16.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  16.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  16.2k|    }                                                  \
  |  | 3939|  16.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  16.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|    368|                                             specs, value, loc));
 6201|       |
 6202|    368|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 368]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|    368|        }
 6208|       |
 6209|       |        // Read postfix
 6210|    368|        std::ptrdiff_t postfix_width = 0;
 6211|    368|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 268, False: 100]
  ------------------
 6212|    268|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    268|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    268|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    268|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    268|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 268]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    268|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    268|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|    268|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|    268|                                 rd.skip_ws_before_read(), prefix_width,
 6215|    268|                                 value_width));
 6216|    268|            std::tie(it, postfix_width) = postfix_result;
 6217|    268|        }
 6218|       |
 6219|    368|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    368|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    368|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 368]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|    368|            specs, prefix_width, value_width, postfix_width));
 6221|    368|        return it;
 6222|    368|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6074|   106k|    {
 6075|   106k|        const bool need_skipped_width =
 6076|   106k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6076:13): [True: 0, False: 106k]
  |  Branch (6076:33): [True: 0, False: 106k]
  ------------------
 6077|   106k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6078|       |
 6079|       |        // Read prefix
 6080|   106k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6080:13): [True: 0, False: 106k]
  ------------------
 6081|   106k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6081:13): [True: 0, False: 106k]
  ------------------
 6082|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6083|      0|                             need_skipped_width);
 6084|      0|        }
 6085|   106k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6085:13): [True: 106k, False: 0]
  |  Branch (6085:56): [True: 106k, False: 0]
  ------------------
 6086|       |            // Default alignment:
 6087|       |            // Skip preceding whitespace, if required by the reader
 6088|   106k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6088:17): [True: 0, False: 106k]
  ------------------
 6089|      0|                auto max_width_view = take_width(rng, specs.precision);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6093|      0|            }
 6094|   212k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|   106k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   106k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   106k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.45k, False: 105k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.45k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.45k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.45k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.45k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.45k|    }                                                  \
  |  |  |  | 3939|   106k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|   212k|                            make_eof_scan_error));
 6096|       |
 6097|   212k|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 105k]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|   105k|            return result_type{it, 0};
 6105|   212k|        }
 6106|       |
 6107|      0|        return result_type{rng.begin(), 0};
 6108|   106k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6116|  7.34k|    {
 6117|  7.34k|        const bool need_skipped_width =
 6118|  7.34k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6118:13): [True: 0, False: 7.34k]
  |  Branch (6118:33): [True: 0, False: 7.34k]
  ------------------
 6119|  7.34k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6120|       |
 6121|  7.34k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6121:13): [True: 0, False: 7.34k]
  ------------------
 6122|  7.34k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6122:13): [True: 0, False: 7.34k]
  ------------------
 6123|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6124:17): [True: 0, False: 0]
  ------------------
 6125|      0|                return result_type{rng.begin(), 0};
 6126|      0|            }
 6127|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6128|      0|                             specs.fill, need_skipped_width);
 6129|      0|        }
 6130|  7.34k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6130:13): [True: 7.34k, False: 0]
  ------------------
 6131|  7.34k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6131:13): [True: 0, False: 7.34k]
  ------------------
 6132|  7.34k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6132:15): [True: 0, False: 0]
  |  Branch (6132:35): [True: 0, False: 0]
  ------------------
 6133|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6133:15): [True: 0, False: 0]
  ------------------
 6134|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6134:15): [True: 0, False: 0]
  ------------------
 6135|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                const auto initial_width =
 6137|      0|                    specs.precision - prefix_width - value_width;
 6138|      0|                auto max_width_view = take_width(rng, initial_width);
 6139|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6140|      0|                                  .transform_error(make_eof_scan_error));
 6141|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6142|      0|            }
 6143|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|                            make_eof_scan_error));
 6145|       |
 6146|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return result_type{
 6148|      0|                    it,
 6149|      0|                    calculate_text_width(make_contiguous_buffer(
 6150|      0|                                             ranges::subrange{rng.begin(), it})
 6151|      0|                                             .view())};
 6152|      0|            }
 6153|      0|            return result_type{it, 0};
 6154|      0|        }
 6155|  7.34k|        return result_type{rng.begin(), 0};
 6156|  7.34k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIiEENS0_13scan_expectedIS9_EERT_:
 6226|  18.3k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  18.3k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  18.3k|            auto rd = make_reader<T, char_type>();
 6232|  18.3k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  18.3k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 18.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6233|  18.3k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  18.3k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|  18.3k|    {
 6162|  18.3k|        const bool need_skipped_width =
 6163|  18.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 18.3k]
  |  Branch (6163:33): [True: 0, False: 18.3k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  18.3k|        auto it = rng.begin();
 6167|  18.3k|        std::ptrdiff_t prefix_width = 0;
 6168|  18.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 18.3k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  18.3k|        else {
 6176|  18.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  18.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 264, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    264|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    264|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    264|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    264|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    264|    }                                                  \
  |  |  |  | 3939|  18.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  18.0k|            std::tie(it, prefix_width) = prefix_result;
 6178|  18.0k|        }
 6179|  18.0k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  18.0k|        std::ptrdiff_t value_width = 0;
 6183|  18.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 18.0k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  18.0k|        else {
 6199|  18.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 16.2k, False: 1.80k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  16.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  16.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  16.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  16.2k|    }                                                  \
  |  | 3939|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  1.80k|                                             specs, value, loc));
 6201|       |
 6202|  1.80k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 1.80k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  1.80k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  1.80k|        std::ptrdiff_t postfix_width = 0;
 6211|  1.80k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 1.69k, False: 116]
  ------------------
 6212|  1.69k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  1.69k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.69k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.69k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.69k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.69k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  1.69k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.69k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  1.69k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  1.69k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  1.69k|                                 value_width));
 6216|  1.69k|            std::tie(it, postfix_width) = postfix_result;
 6217|  1.69k|        }
 6218|       |
 6219|  1.80k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  1.80k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  1.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.80k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|  1.80k|            specs, prefix_width, value_width, postfix_width));
 6221|  1.80k|        return it;
 6222|  1.80k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIxEENS0_13scan_expectedIS9_EERT_:
 6226|  18.4k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  18.4k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  18.4k|            auto rd = make_reader<T, char_type>();
 6232|  18.4k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  18.4k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  18.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 18.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6233|  18.4k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  18.4k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_xEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|  18.4k|    {
 6162|  18.4k|        const bool need_skipped_width =
 6163|  18.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 18.4k]
  |  Branch (6163:33): [True: 0, False: 18.4k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  18.4k|        auto it = rng.begin();
 6167|  18.4k|        std::ptrdiff_t prefix_width = 0;
 6168|  18.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 18.4k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  18.4k|        else {
 6176|  18.4k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  18.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 264, False: 18.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    264|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    264|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    264|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    264|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    264|    }                                                  \
  |  |  |  | 3939|  18.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  18.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  18.1k|            std::tie(it, prefix_width) = prefix_result;
 6178|  18.1k|        }
 6179|  18.1k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  18.1k|        std::ptrdiff_t value_width = 0;
 6183|  18.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 18.1k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  18.1k|        else {
 6199|  18.1k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  18.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  18.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  18.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 16.2k, False: 1.89k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  16.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  16.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  16.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  16.2k|    }                                                  \
  |  | 3939|  18.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  18.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  1.89k|                                             specs, value, loc));
 6201|       |
 6202|  1.89k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 1.89k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  1.89k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  1.89k|        std::ptrdiff_t postfix_width = 0;
 6211|  1.89k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 1.77k, False: 116]
  ------------------
 6212|  1.77k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  1.77k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.77k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.77k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.77k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  1.77k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.77k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  1.77k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  1.77k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  1.77k|                                 value_width));
 6216|  1.77k|            std::tie(it, postfix_width) = postfix_result;
 6217|  1.77k|        }
 6218|       |
 6219|  1.89k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  1.89k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  1.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.89k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|  1.89k|            specs, prefix_width, value_width, postfix_width));
 6221|  1.89k|        return it;
 6222|  1.89k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIhEENS0_13scan_expectedIS9_EERT_:
 6226|  16.8k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  16.8k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  16.8k|            auto rd = make_reader<T, char_type>();
 6232|  16.8k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  16.8k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 16.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6233|  16.8k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  16.8k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_hEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|  16.8k|    {
 6162|  16.8k|        const bool need_skipped_width =
 6163|  16.8k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 16.8k]
  |  Branch (6163:33): [True: 0, False: 16.8k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  16.8k|        auto it = rng.begin();
 6167|  16.8k|        std::ptrdiff_t prefix_width = 0;
 6168|  16.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 16.8k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  16.8k|        else {
 6176|  16.8k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  16.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  16.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  16.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 222, False: 16.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    222|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    222|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    222|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    222|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    222|    }                                                  \
  |  |  |  | 3939|  16.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  16.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  16.6k|            std::tie(it, prefix_width) = prefix_result;
 6178|  16.6k|        }
 6179|  16.6k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  16.6k|        std::ptrdiff_t value_width = 0;
 6183|  16.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 16.6k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  16.6k|        else {
 6199|  16.6k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  16.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  16.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  16.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 16.2k, False: 314]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  16.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  16.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  16.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  16.2k|    }                                                  \
  |  | 3939|  16.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  16.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|    314|                                             specs, value, loc));
 6201|       |
 6202|    314|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 314]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|    314|        }
 6208|       |
 6209|       |        // Read postfix
 6210|    314|        std::ptrdiff_t postfix_width = 0;
 6211|    314|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 240, False: 74]
  ------------------
 6212|    240|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    240|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    240|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    240|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    240|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 240]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    240|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    240|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|    240|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|    240|                                 rd.skip_ws_before_read(), prefix_width,
 6215|    240|                                 value_width));
 6216|    240|            std::tie(it, postfix_width) = postfix_result;
 6217|    240|        }
 6218|       |
 6219|    314|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    314|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    314|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 314]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|    314|            specs, prefix_width, value_width, postfix_width));
 6221|    314|        return it;
 6222|    314|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIjEENS0_13scan_expectedIS9_EERT_:
 6226|  18.2k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  18.2k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  18.2k|            auto rd = make_reader<T, char_type>();
 6232|  18.2k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  18.2k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  18.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 18.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6233|  18.2k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  18.2k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|  18.2k|    {
 6162|  18.2k|        const bool need_skipped_width =
 6163|  18.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 18.2k]
  |  Branch (6163:33): [True: 0, False: 18.2k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  18.2k|        auto it = rng.begin();
 6167|  18.2k|        std::ptrdiff_t prefix_width = 0;
 6168|  18.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 18.2k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  18.2k|        else {
 6176|  18.2k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  18.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 226, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    226|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    226|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    226|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    226|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    226|    }                                                  \
  |  |  |  | 3939|  18.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  18.0k|            std::tie(it, prefix_width) = prefix_result;
 6178|  18.0k|        }
 6179|  18.0k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  18.0k|        std::ptrdiff_t value_width = 0;
 6183|  18.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 18.0k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  18.0k|        else {
 6199|  18.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 16.2k, False: 1.73k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  16.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  16.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  16.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  16.2k|    }                                                  \
  |  | 3939|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  1.73k|                                             specs, value, loc));
 6201|       |
 6202|  1.73k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 1.73k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  1.73k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  1.73k|        std::ptrdiff_t postfix_width = 0;
 6211|  1.73k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 1.65k, False: 78]
  ------------------
 6212|  1.65k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  1.65k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.65k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.65k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.65k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  1.65k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  1.65k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  1.65k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  1.65k|                                 value_width));
 6216|  1.65k|            std::tie(it, postfix_width) = postfix_result;
 6217|  1.65k|        }
 6218|       |
 6219|  1.73k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  1.73k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  1.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.73k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|  1.73k|            specs, prefix_width, value_width, postfix_width));
 6221|  1.73k|        return it;
 6222|  1.73k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIyEENS0_13scan_expectedIS9_EERT_:
 6226|  18.3k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  18.3k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  18.3k|            auto rd = make_reader<T, char_type>();
 6232|  18.3k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  18.3k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 18.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6233|  18.3k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  18.3k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_yEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|  18.3k|    {
 6162|  18.3k|        const bool need_skipped_width =
 6163|  18.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 18.3k]
  |  Branch (6163:33): [True: 0, False: 18.3k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  18.3k|        auto it = rng.begin();
 6167|  18.3k|        std::ptrdiff_t prefix_width = 0;
 6168|  18.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 18.3k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  18.3k|        else {
 6176|  18.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  18.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 226, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    226|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    226|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    226|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    226|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    226|    }                                                  \
  |  |  |  | 3939|  18.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  18.0k|            std::tie(it, prefix_width) = prefix_result;
 6178|  18.0k|        }
 6179|  18.0k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  18.0k|        std::ptrdiff_t value_width = 0;
 6183|  18.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 18.0k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  18.0k|        else {
 6199|  18.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 16.2k, False: 1.79k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  16.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  16.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  16.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  16.2k|    }                                                  \
  |  | 3939|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  1.79k|                                             specs, value, loc));
 6201|       |
 6202|  1.79k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 1.79k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  1.79k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  1.79k|        std::ptrdiff_t postfix_width = 0;
 6211|  1.79k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 1.71k, False: 78]
  ------------------
 6212|  1.71k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  1.71k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.71k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.71k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.71k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  1.71k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.71k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  1.71k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  1.71k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  1.71k|                                 value_width));
 6216|  1.71k|            std::tie(it, postfix_width) = postfix_result;
 6217|  1.71k|        }
 6218|       |
 6219|  1.79k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  1.79k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  1.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.79k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|  1.79k|            specs, prefix_width, value_width, postfix_width));
 6221|  1.79k|        return it;
 6222|  1.79k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIaEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5910|  4.23k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  4.23k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  4.23k|            auto rd = make_reader<T, char_type>();
 5920|  4.23k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 4.23k, False: 0]
  ------------------
 5921|  4.23k|                return impl(rd, range, value);
 5922|  4.23k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  4.23k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|  4.23k|    {
 5903|  4.23k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  4.23k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.23k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.23k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 60, False: 4.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     60|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     60|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     60|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     60|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     60|    }                                                  \
  |  |  |  | 3939|  4.23k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  4.17k|                        .transform_error(make_eof_scan_error));
 5905|  4.17k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  4.23k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5834|  25.4k|{
 5835|  25.4k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  25.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 123, False: 25.3k]
  |  |  ------------------
  ------------------
 5836|    123|        return unexpected(e);
 5837|    123|    }
 5838|       |
 5839|  25.3k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 0, False: 25.3k]
  ------------------
 5840|      0|        return range.begin();
 5841|      0|    }
 5842|       |
 5843|  25.3k|    return skip_classic_whitespace(range);
 5844|  25.3k|}
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3578|  4.17k|    {
 3579|  4.17k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  4.17k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  4.17k|        return read_default_with_base(range, value, 10);
 3581|  4.17k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3542|  4.17k|    {
 3543|  4.17k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  4.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 4.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  4.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  4.17k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|       |        if constexpr (!std::is_signed_v<T>) {
 3547|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3548|       |                return detail::unexpected_scan_error(
 3549|       |                    scan_error::invalid_scanned_value,
 3550|       |                    "Unexpected '-' sign when parsing an "
 3551|       |                    "unsigned value");
 3552|       |            }
 3553|       |        }
 3554|       |
 3555|  4.17k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 4.17k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  4.31k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  4.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.02k, False: 141]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.02k|    }                                                  \
  |  |  |  | 3939|  4.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    141|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  4.31k|                parse_integer_digits_without_thsep(
 3562|  4.31k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  4.31k|                    prefix_result.parsed_base));
 3564|       |
 3565|  4.31k|        auto buf = make_contiguous_buffer(
 3566|  4.31k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  4.31k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|    141|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    141|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    141|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    141|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 39, False: 102]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     39|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     39|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     39|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     39|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     39|    }                                                  \
  |  |  |  | 3939|    141|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    102|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|    102|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|    102|                                    prefix_result.parsed_base));
 3570|       |
 3571|    102|        return ranges::next(prefix_result.iterator,
 3572|    102|                            ranges::distance(buf.view().begin(), result_it));
 3573|  4.31k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIiEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5910|  4.25k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  4.25k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  4.25k|            auto rd = make_reader<T, char_type>();
 5920|  4.25k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 4.25k, False: 0]
  ------------------
 5921|  4.25k|                return impl(rd, range, value);
 5922|  4.25k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  4.25k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|  4.25k|    {
 5903|  4.25k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  4.25k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.25k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.25k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 63, False: 4.19k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     63|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     63|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     63|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     63|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     63|    }                                                  \
  |  |  |  | 3939|  4.25k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  4.19k|                        .transform_error(make_eof_scan_error));
 5905|  4.19k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  4.25k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3578|  4.19k|    {
 3579|  4.19k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  4.19k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  4.19k|        return read_default_with_base(range, value, 10);
 3581|  4.19k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3542|  4.19k|    {
 3543|  4.19k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  4.19k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.19k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.19k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 4.19k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  4.19k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  4.19k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|       |        if constexpr (!std::is_signed_v<T>) {
 3547|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3548|       |                return detail::unexpected_scan_error(
 3549|       |                    scan_error::invalid_scanned_value,
 3550|       |                    "Unexpected '-' sign when parsing an "
 3551|       |                    "unsigned value");
 3552|       |            }
 3553|       |        }
 3554|       |
 3555|  4.19k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 4.19k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  4.33k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  4.19k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.19k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.19k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.04k, False: 144]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.04k|    }                                                  \
  |  |  |  | 3939|  4.19k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    144|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  4.33k|                parse_integer_digits_without_thsep(
 3562|  4.33k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  4.33k|                    prefix_result.parsed_base));
 3564|       |
 3565|  4.33k|        auto buf = make_contiguous_buffer(
 3566|  4.33k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  4.33k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|    144|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    144|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    144|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    144|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 18, False: 126]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     18|    }                                                  \
  |  |  |  | 3939|    144|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    126|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|    126|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|    126|                                    prefix_result.parsed_base));
 3570|       |
 3571|    126|        return ranges::next(prefix_result.iterator,
 3572|    126|                            ranges::distance(buf.view().begin(), result_it));
 3573|  4.33k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIxEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5910|  4.28k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  4.28k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  4.28k|            auto rd = make_reader<T, char_type>();
 5920|  4.28k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 4.28k, False: 0]
  ------------------
 5921|  4.28k|                return impl(rd, range, value);
 5922|  4.28k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  4.28k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|  4.28k|    {
 5903|  4.28k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  4.28k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.28k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.28k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 63, False: 4.22k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     63|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     63|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     63|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     63|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     63|    }                                                  \
  |  |  |  | 3939|  4.28k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  4.22k|                        .transform_error(make_eof_scan_error));
 5905|  4.22k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  4.28k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3578|  4.22k|    {
 3579|  4.22k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  4.22k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  4.22k|        return read_default_with_base(range, value, 10);
 3581|  4.22k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3542|  4.22k|    {
 3543|  4.22k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  4.22k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.22k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.22k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 4.22k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  4.22k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  4.22k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|       |        if constexpr (!std::is_signed_v<T>) {
 3547|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3548|       |                return detail::unexpected_scan_error(
 3549|       |                    scan_error::invalid_scanned_value,
 3550|       |                    "Unexpected '-' sign when parsing an "
 3551|       |                    "unsigned value");
 3552|       |            }
 3553|       |        }
 3554|       |
 3555|  4.22k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 4.22k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  4.38k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  4.22k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.22k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.22k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.06k, False: 159]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.06k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.06k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.06k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.06k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.06k|    }                                                  \
  |  |  |  | 3939|  4.22k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    159|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  4.38k|                parse_integer_digits_without_thsep(
 3562|  4.38k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  4.38k|                    prefix_result.parsed_base));
 3564|       |
 3565|  4.38k|        auto buf = make_contiguous_buffer(
 3566|  4.38k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  4.38k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|    159|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    159|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    159|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    159|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 159]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    159|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    159|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|    159|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|    159|                                    prefix_result.parsed_base));
 3570|       |
 3571|    159|        return ranges::next(prefix_result.iterator,
 3572|    159|                            ranges::distance(buf.view().begin(), result_it));
 3573|  4.38k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIhEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5910|  4.20k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  4.20k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  4.20k|            auto rd = make_reader<T, char_type>();
 5920|  4.20k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 4.20k, False: 0]
  ------------------
 5921|  4.20k|                return impl(rd, range, value);
 5922|  4.20k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  4.20k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|  4.20k|    {
 5903|  4.20k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  4.20k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.20k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.20k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 51, False: 4.15k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     51|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     51|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     51|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     51|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     51|    }                                                  \
  |  |  |  | 3939|  4.20k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  4.15k|                        .transform_error(make_eof_scan_error));
 5905|  4.15k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  4.20k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3578|  4.15k|    {
 3579|  4.15k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  4.15k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  4.15k|        return read_default_with_base(range, value, 10);
 3581|  4.15k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3542|  4.15k|    {
 3543|  4.15k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  4.15k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.15k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.15k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 4.15k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  4.15k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  4.15k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|  4.15k|        if constexpr (!std::is_signed_v<T>) {
 3547|  4.15k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3547:17): [True: 51, False: 4.10k]
  ------------------
 3548|     51|                return detail::unexpected_scan_error(
 3549|     51|                    scan_error::invalid_scanned_value,
 3550|     51|                    "Unexpected '-' sign when parsing an "
 3551|     51|                    "unsigned value");
 3552|     51|            }
 3553|  4.15k|        }
 3554|       |
 3555|  4.15k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 4.15k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  4.32k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  4.15k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.15k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.15k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.99k, False: 165]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.99k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.99k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.99k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.99k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.99k|    }                                                  \
  |  |  |  | 3939|  4.15k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    165|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  4.32k|                parse_integer_digits_without_thsep(
 3562|  4.32k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  4.32k|                    prefix_result.parsed_base));
 3564|       |
 3565|  4.32k|        auto buf = make_contiguous_buffer(
 3566|  4.32k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  4.32k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|    165|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    165|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    165|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    165|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 33, False: 132]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     33|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     33|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     33|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     33|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     33|    }                                                  \
  |  |  |  | 3939|    165|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    132|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|    132|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|    132|                                    prefix_result.parsed_base));
 3570|       |
 3571|    132|        return ranges::next(prefix_result.iterator,
 3572|    132|                            ranges::distance(buf.view().begin(), result_it));
 3573|  4.32k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIjEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5910|  4.22k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  4.22k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  4.22k|            auto rd = make_reader<T, char_type>();
 5920|  4.22k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 4.22k, False: 0]
  ------------------
 5921|  4.22k|                return impl(rd, range, value);
 5922|  4.22k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  4.22k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|  4.22k|    {
 5903|  4.22k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  4.22k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.22k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.22k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 51, False: 4.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     51|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     51|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     51|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     51|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     51|    }                                                  \
  |  |  |  | 3939|  4.22k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  4.17k|                        .transform_error(make_eof_scan_error));
 5905|  4.17k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  4.22k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3578|  4.17k|    {
 3579|  4.17k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  4.17k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  4.17k|        return read_default_with_base(range, value, 10);
 3581|  4.17k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3542|  4.17k|    {
 3543|  4.17k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  4.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 4.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  4.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  4.17k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|  4.17k|        if constexpr (!std::is_signed_v<T>) {
 3547|  4.17k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3547:17): [True: 51, False: 4.12k]
  ------------------
 3548|     51|                return detail::unexpected_scan_error(
 3549|     51|                    scan_error::invalid_scanned_value,
 3550|     51|                    "Unexpected '-' sign when parsing an "
 3551|     51|                    "unsigned value");
 3552|     51|            }
 3553|  4.17k|        }
 3554|       |
 3555|  4.17k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 4.17k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  4.34k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  4.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.00k, False: 168]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.00k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.00k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.00k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.00k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.00k|    }                                                  \
  |  |  |  | 3939|  4.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    168|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  4.34k|                parse_integer_digits_without_thsep(
 3562|  4.34k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  4.34k|                    prefix_result.parsed_base));
 3564|       |
 3565|  4.34k|        auto buf = make_contiguous_buffer(
 3566|  4.34k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  4.34k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|    168|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    168|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    168|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    168|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 18, False: 150]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     18|    }                                                  \
  |  |  |  | 3939|    168|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    150|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|    150|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|    150|                                    prefix_result.parsed_base));
 3570|       |
 3571|    150|        return ranges::next(prefix_result.iterator,
 3572|    150|                            ranges::distance(buf.view().begin(), result_it));
 3573|  4.34k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIyEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5910|  4.25k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  4.25k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  4.25k|            auto rd = make_reader<T, char_type>();
 5920|  4.25k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 4.25k, False: 0]
  ------------------
 5921|  4.25k|                return impl(rd, range, value);
 5922|  4.25k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  4.25k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|  4.25k|    {
 5903|  4.25k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  4.25k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.25k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.25k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 51, False: 4.20k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     51|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     51|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     51|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     51|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     51|    }                                                  \
  |  |  |  | 3939|  4.25k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  4.20k|                        .transform_error(make_eof_scan_error));
 5905|  4.20k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  4.25k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3578|  4.20k|    {
 3579|  4.20k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  4.20k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  4.20k|        return read_default_with_base(range, value, 10);
 3581|  4.20k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3542|  4.20k|    {
 3543|  4.20k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  4.20k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.20k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.20k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 4.20k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  4.20k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  4.20k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|  4.20k|        if constexpr (!std::is_signed_v<T>) {
 3547|  4.20k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3547:17): [True: 57, False: 4.14k]
  ------------------
 3548|     57|                return detail::unexpected_scan_error(
 3549|     57|                    scan_error::invalid_scanned_value,
 3550|     57|                    "Unexpected '-' sign when parsing an "
 3551|     57|                    "unsigned value");
 3552|     57|            }
 3553|  4.20k|        }
 3554|       |
 3555|  4.20k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 4.20k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  4.38k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  4.20k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.20k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.20k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.02k, False: 180]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.02k|    }                                                  \
  |  |  |  | 3939|  4.20k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    180|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  4.38k|                parse_integer_digits_without_thsep(
 3562|  4.38k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  4.38k|                    prefix_result.parsed_base));
 3564|       |
 3565|  4.38k|        auto buf = make_contiguous_buffer(
 3566|  4.38k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  4.38k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|    180|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    180|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    180|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    180|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 180]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    180|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    180|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|    180|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|    180|                                    prefix_result.parsed_base));
 3570|       |
 3571|    180|        return ranges::next(prefix_result.iterator,
 3572|    180|                            ranges::distance(buf.view().begin(), result_it));
 3573|  4.38k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3542|  15.4k|    {
 3543|  15.4k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  15.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  15.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  15.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  15.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 15.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  15.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  15.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  15.4k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|       |        if constexpr (!std::is_signed_v<T>) {
 3547|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3548|       |                return detail::unexpected_scan_error(
 3549|       |                    scan_error::invalid_scanned_value,
 3550|       |                    "Unexpected '-' sign when parsing an "
 3551|       |                    "unsigned value");
 3552|       |            }
 3553|       |        }
 3554|       |
 3555|  15.4k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 15.4k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  30.9k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  15.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  15.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  15.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  15.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 45, False: 15.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     45|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     45|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     45|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     45|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     45|    }                                                  \
  |  |  |  | 3939|  15.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  15.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  30.9k|                parse_integer_digits_without_thsep(
 3562|  30.9k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  30.9k|                    prefix_result.parsed_base));
 3564|       |
 3565|  30.9k|        auto buf = make_contiguous_buffer(
 3566|  30.9k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  30.9k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  15.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  15.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  15.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  15.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.62k, False: 13.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.62k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.62k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.62k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.62k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.62k|    }                                                  \
  |  |  |  | 3939|  15.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|  13.8k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|  13.8k|                                    prefix_result.parsed_base));
 3570|       |
 3571|  13.8k|        return ranges::next(prefix_result.iterator,
 3572|  13.8k|                            ranges::distance(buf.view().begin(), result_it));
 3573|  30.9k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3542|  17.8k|    {
 3543|  17.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  17.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 17.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  17.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  17.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  17.8k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|       |        if constexpr (!std::is_signed_v<T>) {
 3547|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3548|       |                return detail::unexpected_scan_error(
 3549|       |                    scan_error::invalid_scanned_value,
 3550|       |                    "Unexpected '-' sign when parsing an "
 3551|       |                    "unsigned value");
 3552|       |            }
 3553|       |        }
 3554|       |
 3555|  17.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 17.8k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  35.6k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  17.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 69, False: 17.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     69|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     69|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     69|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     69|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     69|    }                                                  \
  |  |  |  | 3939|  17.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  17.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  35.6k|                parse_integer_digits_without_thsep(
 3562|  35.6k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  35.6k|                    prefix_result.parsed_base));
 3564|       |
 3565|  35.6k|        auto buf = make_contiguous_buffer(
 3566|  35.6k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  35.6k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  17.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.49k, False: 16.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.49k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.49k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.49k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.49k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.49k|    }                                                  \
  |  |  |  | 3939|  17.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  16.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|  16.2k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|  16.2k|                                    prefix_result.parsed_base));
 3570|       |
 3571|  16.2k|        return ranges::next(prefix_result.iterator,
 3572|  16.2k|                            ranges::distance(buf.view().begin(), result_it));
 3573|  35.6k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3542|  18.1k|    {
 3543|  18.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  18.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 18.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  18.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  18.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  18.1k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|       |        if constexpr (!std::is_signed_v<T>) {
 3547|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3548|       |                return detail::unexpected_scan_error(
 3549|       |                    scan_error::invalid_scanned_value,
 3550|       |                    "Unexpected '-' sign when parsing an "
 3551|       |                    "unsigned value");
 3552|       |            }
 3553|       |        }
 3554|       |
 3555|  18.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 18.1k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  36.1k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  18.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 81, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     81|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     81|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     81|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     81|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     81|    }                                                  \
  |  |  |  | 3939|  18.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  36.1k|                parse_integer_digits_without_thsep(
 3562|  36.1k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  36.1k|                    prefix_result.parsed_base));
 3564|       |
 3565|  36.1k|        auto buf = make_contiguous_buffer(
 3566|  36.1k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  36.1k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.43k, False: 16.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.43k|    }                                                  \
  |  |  |  | 3939|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  16.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|  16.6k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|  16.6k|                                    prefix_result.parsed_base));
 3570|       |
 3571|  16.6k|        return ranges::next(prefix_result.iterator,
 3572|  16.6k|                            ranges::distance(buf.view().begin(), result_it));
 3573|  36.1k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3542|  12.9k|    {
 3543|  12.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  12.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 12.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  12.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  12.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  12.9k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|  12.9k|        if constexpr (!std::is_signed_v<T>) {
 3547|  12.9k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3547:17): [True: 759, False: 12.2k]
  ------------------
 3548|    759|                return detail::unexpected_scan_error(
 3549|    759|                    scan_error::invalid_scanned_value,
 3550|    759|                    "Unexpected '-' sign when parsing an "
 3551|    759|                    "unsigned value");
 3552|    759|            }
 3553|  12.9k|        }
 3554|       |
 3555|  12.9k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 12.9k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  25.9k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  12.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12, False: 12.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     12|    }                                                  \
  |  |  |  | 3939|  12.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  12.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  25.9k|                parse_integer_digits_without_thsep(
 3562|  25.9k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  25.9k|                    prefix_result.parsed_base));
 3564|       |
 3565|  25.9k|        auto buf = make_contiguous_buffer(
 3566|  25.9k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  25.9k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  12.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.01k, False: 11.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.01k|    }                                                  \
  |  |  |  | 3939|  12.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|  11.9k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|  11.9k|                                    prefix_result.parsed_base));
 3570|       |
 3571|  11.9k|        return ranges::next(prefix_result.iterator,
 3572|  11.9k|                            ranges::distance(buf.view().begin(), result_it));
 3573|  25.9k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3542|  14.2k|    {
 3543|  14.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  14.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 14.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  14.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  14.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  14.2k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|  14.2k|        if constexpr (!std::is_signed_v<T>) {
 3547|  14.2k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3547:17): [True: 786, False: 13.4k]
  ------------------
 3548|    786|                return detail::unexpected_scan_error(
 3549|    786|                    scan_error::invalid_scanned_value,
 3550|    786|                    "Unexpected '-' sign when parsing an "
 3551|    786|                    "unsigned value");
 3552|    786|            }
 3553|  14.2k|        }
 3554|       |
 3555|  14.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 14.2k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  28.4k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  14.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12, False: 14.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     12|    }                                                  \
  |  |  |  | 3939|  14.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  14.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  28.4k|                parse_integer_digits_without_thsep(
 3562|  28.4k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  28.4k|                    prefix_result.parsed_base));
 3564|       |
 3565|  28.4k|        auto buf = make_contiguous_buffer(
 3566|  28.4k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  28.4k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  14.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 924, False: 13.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    924|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    924|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    924|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    924|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    924|    }                                                  \
  |  |  |  | 3939|  14.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|  13.2k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|  13.2k|                                    prefix_result.parsed_base));
 3570|       |
 3571|  13.2k|        return ranges::next(prefix_result.iterator,
 3572|  13.2k|                            ranges::distance(buf.view().begin(), result_it));
 3573|  28.4k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3542|  14.3k|    {
 3543|  14.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  14.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 14.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  14.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  14.3k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|  14.3k|        if constexpr (!std::is_signed_v<T>) {
 3547|  14.3k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3547:17): [True: 816, False: 13.5k]
  ------------------
 3548|    816|                return detail::unexpected_scan_error(
 3549|    816|                    scan_error::invalid_scanned_value,
 3550|    816|                    "Unexpected '-' sign when parsing an "
 3551|    816|                    "unsigned value");
 3552|    816|            }
 3553|  14.3k|        }
 3554|       |
 3555|  14.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 14.3k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  28.7k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  14.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12, False: 14.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     12|    }                                                  \
  |  |  |  | 3939|  14.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  28.7k|                parse_integer_digits_without_thsep(
 3562|  28.7k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  28.7k|                    prefix_result.parsed_base));
 3564|       |
 3565|  28.7k|        auto buf = make_contiguous_buffer(
 3566|  28.7k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  28.7k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  14.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 867, False: 13.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    867|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    867|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    867|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    867|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    867|    }                                                  \
  |  |  |  | 3939|  14.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|  13.4k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|  13.4k|                                    prefix_result.parsed_base));
 3570|       |
 3571|  13.4k|        return ranges::next(prefix_result.iterator,
 3572|  13.4k|                            ranges::distance(buf.view().begin(), result_it));
 3573|  28.7k|    }

_ZN3scn4fuzz16make_input_viewsEPKhm:
   52|    688|{
   53|    688|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  930|    688|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    688|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   54|       |
   55|       |    // narrow
   56|    688|    string_buffer.resize(size);
   57|    688|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   58|    688|    auto sv = std::string_view{string_buffer};
   59|       |
   60|       |    // wide, bitwise reinterpret
   61|    688|    const auto wsv_reinterpret_size =
   62|    688|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (62:9): [True: 103, False: 585]
  ------------------
   63|    688|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   64|    688|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   65|    688|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   66|       |
   67|       |    // wide, transcode to correct encoding (utf16 or utf32)
   68|    688|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   69|    688|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   70|       |
   71|    688|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   72|    688|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|    688|{
  123|    688|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|    688|    auto& buf = get_format_string_view_buffer<CharT>();
  125|    688|    buf.resize(sizeof...(Args));
  126|    688|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|    688|    return buf;
  128|    688|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  108|    688|{
  109|    688|    if constexpr (std::is_same_v<CharT, char>) {
  110|    688|        return format_string_view_buffer;
  111|       |    }
  112|       |    else {
  113|       |        return wformat_string_view_buffer;
  114|       |    }
  115|    688|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|    688|{
  186|    688|    do_basic_run_for_source<CharT>(data, format_strings);
  187|    688|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|    688|                                   format_strings);
  189|    688|}
_ZN3scn4fuzz21do_basic_run_for_typeIcaNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|    688|{
  134|       |    // Regular scan
  135|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.88k, False: 688]
  ------------------
  136|  6.88k|        auto it = scn::ranges::begin(source);
  137|  33.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  33.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  33.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  33.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  33.9k|            auto result = scn::scan<T>(
  140|  33.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  33.9k|                scn::runtime_format(f));
  142|  33.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.88k, False: 27.0k]
  ------------------
  143|  6.88k|                break;
  144|  6.88k|            }
  145|  27.0k|            it = result->begin();
  146|  27.0k|        }
  147|  6.88k|    }
  148|       |
  149|       |    // scan localized
  150|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.88k, False: 688]
  ------------------
  151|  6.88k|        auto it = scn::ranges::begin(source);
  152|  33.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  33.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  33.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  33.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  33.9k|            auto result = scn::scan<T>(
  155|  33.9k|                global_locale,
  156|  33.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  33.9k|                scn::runtime_format(f));
  158|  33.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.88k, False: 27.0k]
  ------------------
  159|  6.88k|                break;
  160|  6.88k|            }
  161|  27.0k|            it = result->begin();
  162|  27.0k|        }
  163|  6.88k|    }
  164|       |
  165|       |    // scan_value
  166|    688|    {
  167|    688|        auto it = scn::ranges::begin(source);
  168|  5.29k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  5.29k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  5.29k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.29k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  5.29k|            auto result = scn::scan_value<T>(
  171|  5.29k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  5.29k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 688, False: 4.60k]
  ------------------
  173|    688|                break;
  174|    688|            }
  175|  4.60k|            it = result->begin();
  176|  4.60k|        }
  177|    688|    }
  178|    688|}
_ZN3scn4fuzz21do_basic_run_for_typeIchNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|    688|{
  134|       |    // Regular scan
  135|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.88k, False: 688]
  ------------------
  136|  6.88k|        auto it = scn::ranges::begin(source);
  137|  29.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  29.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  29.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  29.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  29.9k|            auto result = scn::scan<T>(
  140|  29.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  29.9k|                scn::runtime_format(f));
  142|  29.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.88k, False: 23.0k]
  ------------------
  143|  6.88k|                break;
  144|  6.88k|            }
  145|  23.0k|            it = result->begin();
  146|  23.0k|        }
  147|  6.88k|    }
  148|       |
  149|       |    // scan localized
  150|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.88k, False: 688]
  ------------------
  151|  6.88k|        auto it = scn::ranges::begin(source);
  152|  29.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  29.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  29.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  29.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  29.9k|            auto result = scn::scan<T>(
  155|  29.9k|                global_locale,
  156|  29.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  29.9k|                scn::runtime_format(f));
  158|  29.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.88k, False: 23.0k]
  ------------------
  159|  6.88k|                break;
  160|  6.88k|            }
  161|  23.0k|            it = result->begin();
  162|  23.0k|        }
  163|  6.88k|    }
  164|       |
  165|       |    // scan_value
  166|    688|    {
  167|    688|        auto it = scn::ranges::begin(source);
  168|  4.41k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  4.41k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  4.41k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.41k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  4.41k|            auto result = scn::scan_value<T>(
  171|  4.41k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  4.41k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 688, False: 3.72k]
  ------------------
  173|    688|                break;
  174|    688|            }
  175|  3.72k|            it = result->begin();
  176|  3.72k|        }
  177|    688|    }
  178|    688|}
_ZN3scn4fuzz21do_basic_run_for_typeIciNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|    688|{
  134|       |    // Regular scan
  135|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.88k, False: 688]
  ------------------
  136|  6.88k|        auto it = scn::ranges::begin(source);
  137|  39.7k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  39.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  39.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  39.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  39.7k|            auto result = scn::scan<T>(
  140|  39.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  39.7k|                scn::runtime_format(f));
  142|  39.7k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.88k, False: 32.8k]
  ------------------
  143|  6.88k|                break;
  144|  6.88k|            }
  145|  32.8k|            it = result->begin();
  146|  32.8k|        }
  147|  6.88k|    }
  148|       |
  149|       |    // scan localized
  150|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.88k, False: 688]
  ------------------
  151|  6.88k|        auto it = scn::ranges::begin(source);
  152|  39.7k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  39.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  39.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  39.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  39.7k|            auto result = scn::scan<T>(
  155|  39.7k|                global_locale,
  156|  39.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  39.7k|                scn::runtime_format(f));
  158|  39.7k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.88k, False: 32.8k]
  ------------------
  159|  6.88k|                break;
  160|  6.88k|            }
  161|  32.8k|            it = result->begin();
  162|  32.8k|        }
  163|  6.88k|    }
  164|       |
  165|       |    // scan_value
  166|    688|    {
  167|    688|        auto it = scn::ranges::begin(source);
  168|  6.11k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  6.11k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  6.11k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.11k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  6.11k|            auto result = scn::scan_value<T>(
  171|  6.11k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  6.11k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 688, False: 5.42k]
  ------------------
  173|    688|                break;
  174|    688|            }
  175|  5.42k|            it = result->begin();
  176|  5.42k|        }
  177|    688|    }
  178|    688|}
_ZN3scn4fuzz21do_basic_run_for_typeIcjNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|    688|{
  134|       |    // Regular scan
  135|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.88k, False: 688]
  ------------------
  136|  6.88k|        auto it = scn::ranges::begin(source);
  137|  32.4k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  32.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  32.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  32.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  32.4k|            auto result = scn::scan<T>(
  140|  32.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  32.4k|                scn::runtime_format(f));
  142|  32.4k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.88k, False: 25.5k]
  ------------------
  143|  6.88k|                break;
  144|  6.88k|            }
  145|  25.5k|            it = result->begin();
  146|  25.5k|        }
  147|  6.88k|    }
  148|       |
  149|       |    // scan localized
  150|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.88k, False: 688]
  ------------------
  151|  6.88k|        auto it = scn::ranges::begin(source);
  152|  32.4k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  32.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  32.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  32.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  32.4k|            auto result = scn::scan<T>(
  155|  32.4k|                global_locale,
  156|  32.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  32.4k|                scn::runtime_format(f));
  158|  32.4k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.88k, False: 25.5k]
  ------------------
  159|  6.88k|                break;
  160|  6.88k|            }
  161|  25.5k|            it = result->begin();
  162|  25.5k|        }
  163|  6.88k|    }
  164|       |
  165|       |    // scan_value
  166|    688|    {
  167|    688|        auto it = scn::ranges::begin(source);
  168|  4.85k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  4.85k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  4.85k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.85k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  4.85k|            auto result = scn::scan_value<T>(
  171|  4.85k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  4.85k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 688, False: 4.16k]
  ------------------
  173|    688|                break;
  174|    688|            }
  175|  4.16k|            it = result->begin();
  176|  4.16k|        }
  177|    688|    }
  178|    688|}
_ZN3scn4fuzz21do_basic_run_for_typeIcxNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|    688|{
  134|       |    // Regular scan
  135|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.88k, False: 688]
  ------------------
  136|  6.88k|        auto it = scn::ranges::begin(source);
  137|  40.4k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  40.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  40.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  40.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  40.4k|            auto result = scn::scan<T>(
  140|  40.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  40.4k|                scn::runtime_format(f));
  142|  40.4k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.88k, False: 33.5k]
  ------------------
  143|  6.88k|                break;
  144|  6.88k|            }
  145|  33.5k|            it = result->begin();
  146|  33.5k|        }
  147|  6.88k|    }
  148|       |
  149|       |    // scan localized
  150|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.88k, False: 688]
  ------------------
  151|  6.88k|        auto it = scn::ranges::begin(source);
  152|  40.4k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  40.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  40.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  40.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  40.4k|            auto result = scn::scan<T>(
  155|  40.4k|                global_locale,
  156|  40.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  40.4k|                scn::runtime_format(f));
  158|  40.4k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.88k, False: 33.5k]
  ------------------
  159|  6.88k|                break;
  160|  6.88k|            }
  161|  33.5k|            it = result->begin();
  162|  33.5k|        }
  163|  6.88k|    }
  164|       |
  165|       |    // scan_value
  166|    688|    {
  167|    688|        auto it = scn::ranges::begin(source);
  168|  6.22k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  6.22k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  6.22k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.22k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  6.22k|            auto result = scn::scan_value<T>(
  171|  6.22k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  6.22k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 688, False: 5.54k]
  ------------------
  173|    688|                break;
  174|    688|            }
  175|  5.54k|            it = result->begin();
  176|  5.54k|        }
  177|    688|    }
  178|    688|}
_ZN3scn4fuzz21do_basic_run_for_typeIcyNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|    688|{
  134|       |    // Regular scan
  135|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.88k, False: 688]
  ------------------
  136|  6.88k|        auto it = scn::ranges::begin(source);
  137|  32.7k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  32.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  32.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  32.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  32.7k|            auto result = scn::scan<T>(
  140|  32.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  32.7k|                scn::runtime_format(f));
  142|  32.7k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.88k, False: 25.8k]
  ------------------
  143|  6.88k|                break;
  144|  6.88k|            }
  145|  25.8k|            it = result->begin();
  146|  25.8k|        }
  147|  6.88k|    }
  148|       |
  149|       |    // scan localized
  150|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.88k, False: 688]
  ------------------
  151|  6.88k|        auto it = scn::ranges::begin(source);
  152|  32.7k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  32.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  32.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  32.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  32.7k|            auto result = scn::scan<T>(
  155|  32.7k|                global_locale,
  156|  32.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  32.7k|                scn::runtime_format(f));
  158|  32.7k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.88k, False: 25.8k]
  ------------------
  159|  6.88k|                break;
  160|  6.88k|            }
  161|  25.8k|            it = result->begin();
  162|  25.8k|        }
  163|  6.88k|    }
  164|       |
  165|       |    // scan_value
  166|    688|    {
  167|    688|        auto it = scn::ranges::begin(source);
  168|  4.91k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  4.91k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  4.91k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.91k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  4.91k|            auto result = scn::scan_value<T>(
  171|  4.91k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  4.91k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 688, False: 4.22k]
  ------------------
  173|    688|                break;
  174|    688|            }
  175|  4.22k|            it = result->begin();
  176|  4.22k|        }
  177|    688|    }
  178|    688|}
_ZN3scn4fuzz21do_basic_run_for_typeIcaKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|    688|{
  134|       |    // Regular scan
  135|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.88k, False: 688]
  ------------------
  136|  6.88k|        auto it = scn::ranges::begin(source);
  137|  33.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  33.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  33.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  33.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  33.9k|            auto result = scn::scan<T>(
  140|  33.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  33.9k|                scn::runtime_format(f));
  142|  33.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.88k, False: 27.0k]
  ------------------
  143|  6.88k|                break;
  144|  6.88k|            }
  145|  27.0k|            it = result->begin();
  146|  27.0k|        }
  147|  6.88k|    }
  148|       |
  149|       |    // scan localized
  150|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.88k, False: 688]
  ------------------
  151|  6.88k|        auto it = scn::ranges::begin(source);
  152|  33.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  33.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  33.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  33.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  33.9k|            auto result = scn::scan<T>(
  155|  33.9k|                global_locale,
  156|  33.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  33.9k|                scn::runtime_format(f));
  158|  33.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.88k, False: 27.0k]
  ------------------
  159|  6.88k|                break;
  160|  6.88k|            }
  161|  27.0k|            it = result->begin();
  162|  27.0k|        }
  163|  6.88k|    }
  164|       |
  165|       |    // scan_value
  166|    688|    {
  167|    688|        auto it = scn::ranges::begin(source);
  168|  5.28k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  5.28k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  5.28k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.28k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  5.28k|            auto result = scn::scan_value<T>(
  171|  5.28k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  5.28k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 688, False: 4.60k]
  ------------------
  173|    688|                break;
  174|    688|            }
  175|  4.60k|            it = result->begin();
  176|  4.60k|        }
  177|    688|    }
  178|    688|}
_ZN3scn4fuzz21do_basic_run_for_typeIchKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|    688|{
  134|       |    // Regular scan
  135|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.88k, False: 688]
  ------------------
  136|  6.88k|        auto it = scn::ranges::begin(source);
  137|  29.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  29.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  29.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  29.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  29.9k|            auto result = scn::scan<T>(
  140|  29.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  29.9k|                scn::runtime_format(f));
  142|  29.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.88k, False: 23.0k]
  ------------------
  143|  6.88k|                break;
  144|  6.88k|            }
  145|  23.0k|            it = result->begin();
  146|  23.0k|        }
  147|  6.88k|    }
  148|       |
  149|       |    // scan localized
  150|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.88k, False: 688]
  ------------------
  151|  6.88k|        auto it = scn::ranges::begin(source);
  152|  29.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  29.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  29.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  29.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  29.9k|            auto result = scn::scan<T>(
  155|  29.9k|                global_locale,
  156|  29.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  29.9k|                scn::runtime_format(f));
  158|  29.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.88k, False: 23.0k]
  ------------------
  159|  6.88k|                break;
  160|  6.88k|            }
  161|  23.0k|            it = result->begin();
  162|  23.0k|        }
  163|  6.88k|    }
  164|       |
  165|       |    // scan_value
  166|    688|    {
  167|    688|        auto it = scn::ranges::begin(source);
  168|  4.40k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  4.40k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  4.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  4.40k|            auto result = scn::scan_value<T>(
  171|  4.40k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  4.40k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 688, False: 3.71k]
  ------------------
  173|    688|                break;
  174|    688|            }
  175|  3.71k|            it = result->begin();
  176|  3.71k|        }
  177|    688|    }
  178|    688|}
_ZN3scn4fuzz21do_basic_run_for_typeIciKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|    688|{
  134|       |    // Regular scan
  135|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.88k, False: 688]
  ------------------
  136|  6.88k|        auto it = scn::ranges::begin(source);
  137|  39.6k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  39.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  39.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  39.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  39.6k|            auto result = scn::scan<T>(
  140|  39.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  39.6k|                scn::runtime_format(f));
  142|  39.6k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.88k, False: 32.7k]
  ------------------
  143|  6.88k|                break;
  144|  6.88k|            }
  145|  32.7k|            it = result->begin();
  146|  32.7k|        }
  147|  6.88k|    }
  148|       |
  149|       |    // scan localized
  150|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.88k, False: 688]
  ------------------
  151|  6.88k|        auto it = scn::ranges::begin(source);
  152|  39.6k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  39.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  39.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  39.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  39.6k|            auto result = scn::scan<T>(
  155|  39.6k|                global_locale,
  156|  39.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  39.6k|                scn::runtime_format(f));
  158|  39.6k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.88k, False: 32.7k]
  ------------------
  159|  6.88k|                break;
  160|  6.88k|            }
  161|  32.7k|            it = result->begin();
  162|  32.7k|        }
  163|  6.88k|    }
  164|       |
  165|       |    // scan_value
  166|    688|    {
  167|    688|        auto it = scn::ranges::begin(source);
  168|  5.92k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  5.92k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  5.92k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.92k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  5.92k|            auto result = scn::scan_value<T>(
  171|  5.92k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  5.92k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 688, False: 5.23k]
  ------------------
  173|    688|                break;
  174|    688|            }
  175|  5.23k|            it = result->begin();
  176|  5.23k|        }
  177|    688|    }
  178|    688|}
_ZN3scn4fuzz21do_basic_run_for_typeIcjKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|    688|{
  134|       |    // Regular scan
  135|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.88k, False: 688]
  ------------------
  136|  6.88k|        auto it = scn::ranges::begin(source);
  137|  32.4k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  32.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  32.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  32.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  32.4k|            auto result = scn::scan<T>(
  140|  32.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  32.4k|                scn::runtime_format(f));
  142|  32.4k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.88k, False: 25.5k]
  ------------------
  143|  6.88k|                break;
  144|  6.88k|            }
  145|  25.5k|            it = result->begin();
  146|  25.5k|        }
  147|  6.88k|    }
  148|       |
  149|       |    // scan localized
  150|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.88k, False: 688]
  ------------------
  151|  6.88k|        auto it = scn::ranges::begin(source);
  152|  32.4k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  32.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  32.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  32.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  32.4k|            auto result = scn::scan<T>(
  155|  32.4k|                global_locale,
  156|  32.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  32.4k|                scn::runtime_format(f));
  158|  32.4k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.88k, False: 25.5k]
  ------------------
  159|  6.88k|                break;
  160|  6.88k|            }
  161|  25.5k|            it = result->begin();
  162|  25.5k|        }
  163|  6.88k|    }
  164|       |
  165|       |    // scan_value
  166|    688|    {
  167|    688|        auto it = scn::ranges::begin(source);
  168|  4.83k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  4.83k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  4.83k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.83k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  4.83k|            auto result = scn::scan_value<T>(
  171|  4.83k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  4.83k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 688, False: 4.14k]
  ------------------
  173|    688|                break;
  174|    688|            }
  175|  4.14k|            it = result->begin();
  176|  4.14k|        }
  177|    688|    }
  178|    688|}
_ZN3scn4fuzz21do_basic_run_for_typeIcxKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|    688|{
  134|       |    // Regular scan
  135|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.88k, False: 688]
  ------------------
  136|  6.88k|        auto it = scn::ranges::begin(source);
  137|  40.3k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  40.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  40.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  40.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  40.3k|            auto result = scn::scan<T>(
  140|  40.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  40.3k|                scn::runtime_format(f));
  142|  40.3k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.88k, False: 33.4k]
  ------------------
  143|  6.88k|                break;
  144|  6.88k|            }
  145|  33.4k|            it = result->begin();
  146|  33.4k|        }
  147|  6.88k|    }
  148|       |
  149|       |    // scan localized
  150|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.88k, False: 688]
  ------------------
  151|  6.88k|        auto it = scn::ranges::begin(source);
  152|  40.3k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  40.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  40.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  40.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  40.3k|            auto result = scn::scan<T>(
  155|  40.3k|                global_locale,
  156|  40.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  40.3k|                scn::runtime_format(f));
  158|  40.3k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.88k, False: 33.4k]
  ------------------
  159|  6.88k|                break;
  160|  6.88k|            }
  161|  33.4k|            it = result->begin();
  162|  33.4k|        }
  163|  6.88k|    }
  164|       |
  165|       |    // scan_value
  166|    688|    {
  167|    688|        auto it = scn::ranges::begin(source);
  168|  6.02k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  6.02k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  6.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  6.02k|            auto result = scn::scan_value<T>(
  171|  6.02k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  6.02k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 688, False: 5.33k]
  ------------------
  173|    688|                break;
  174|    688|            }
  175|  5.33k|            it = result->begin();
  176|  5.33k|        }
  177|    688|    }
  178|    688|}
_ZN3scn4fuzz21do_basic_run_for_typeIcyKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|    688|{
  134|       |    // Regular scan
  135|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.88k, False: 688]
  ------------------
  136|  6.88k|        auto it = scn::ranges::begin(source);
  137|  32.8k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  32.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  32.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  32.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  32.8k|            auto result = scn::scan<T>(
  140|  32.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  32.8k|                scn::runtime_format(f));
  142|  32.8k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.88k, False: 25.9k]
  ------------------
  143|  6.88k|                break;
  144|  6.88k|            }
  145|  25.9k|            it = result->begin();
  146|  25.9k|        }
  147|  6.88k|    }
  148|       |
  149|       |    // scan localized
  150|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.88k, False: 688]
  ------------------
  151|  6.88k|        auto it = scn::ranges::begin(source);
  152|  32.8k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  32.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  32.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  32.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  32.8k|            auto result = scn::scan<T>(
  155|  32.8k|                global_locale,
  156|  32.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  32.8k|                scn::runtime_format(f));
  158|  32.8k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.88k, False: 25.9k]
  ------------------
  159|  6.88k|                break;
  160|  6.88k|            }
  161|  25.9k|            it = result->begin();
  162|  25.9k|        }
  163|  6.88k|    }
  164|       |
  165|       |    // scan_value
  166|    688|    {
  167|    688|        auto it = scn::ranges::begin(source);
  168|  4.89k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  4.89k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  4.89k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.89k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  4.89k|            auto result = scn::scan_value<T>(
  171|  4.89k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  4.89k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 688, False: 4.20k]
  ------------------
  173|    688|                break;
  174|    688|            }
  175|  4.20k|            it = result->begin();
  176|  4.20k|        }
  177|    688|    }
  178|    688|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   90|    688|{
   91|    688|    using char_type = ranges::range_value_t<Source>;
   92|    688|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|    688|    deque.clear();
   94|    688|    std::copy(ranges::begin(source), ranges::end(source),
   95|    688|              std::back_inserter(deque));
   96|    688|    return deque;
   97|    688|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   79|    688|{
   80|    688|    if constexpr (std::is_same_v<CharT, char>) {
   81|    688|        return noncontiguous_buffer;
   82|       |    }
   83|       |    else {
   84|       |        return wnoncontiguous_buffer;
   85|       |    }
   86|    688|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|    688|{
  123|    688|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|    688|    auto& buf = get_format_string_view_buffer<CharT>();
  125|    688|    buf.resize(sizeof...(Args));
  126|    688|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|    688|    return buf;
  128|    688|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  108|    688|{
  109|       |    if constexpr (std::is_same_v<CharT, char>) {
  110|       |        return format_string_view_buffer;
  111|       |    }
  112|    688|    else {
  113|    688|        return wformat_string_view_buffer;
  114|    688|    }
  115|    688|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|  1.37k|{
  186|  1.37k|    do_basic_run_for_source<CharT>(data, format_strings);
  187|  1.37k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|  1.37k|                                   format_strings);
  189|  1.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwaNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  1.37k|{
  134|       |    // Regular scan
  135|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.7k, False: 1.37k]
  ------------------
  136|  13.7k|        auto it = scn::ranges::begin(source);
  137|  13.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  13.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  13.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  13.9k|            auto result = scn::scan<T>(
  140|  13.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  13.9k|                scn::runtime_format(f));
  142|  13.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.7k, False: 218]
  ------------------
  143|  13.7k|                break;
  144|  13.7k|            }
  145|    218|            it = result->begin();
  146|    218|        }
  147|  13.7k|    }
  148|       |
  149|       |    // scan localized
  150|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.7k, False: 1.37k]
  ------------------
  151|  13.7k|        auto it = scn::ranges::begin(source);
  152|  13.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  13.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  13.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  13.9k|            auto result = scn::scan<T>(
  155|  13.9k|                global_locale,
  156|  13.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  13.9k|                scn::runtime_format(f));
  158|  13.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.7k, False: 218]
  ------------------
  159|  13.7k|                break;
  160|  13.7k|            }
  161|    218|            it = result->begin();
  162|    218|        }
  163|  13.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.37k|    {
  167|  1.37k|        auto it = scn::ranges::begin(source);
  168|  1.41k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.41k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.41k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.41k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.41k|            auto result = scn::scan_value<T>(
  171|  1.41k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.41k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.37k, False: 34]
  ------------------
  173|  1.37k|                break;
  174|  1.37k|            }
  175|     34|            it = result->begin();
  176|     34|        }
  177|  1.37k|    }
  178|  1.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwhNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  1.37k|{
  134|       |    // Regular scan
  135|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.7k, False: 1.37k]
  ------------------
  136|  13.7k|        auto it = scn::ranges::begin(source);
  137|  13.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  13.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  13.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  13.9k|            auto result = scn::scan<T>(
  140|  13.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  13.9k|                scn::runtime_format(f));
  142|  13.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.7k, False: 184]
  ------------------
  143|  13.7k|                break;
  144|  13.7k|            }
  145|    184|            it = result->begin();
  146|    184|        }
  147|  13.7k|    }
  148|       |
  149|       |    // scan localized
  150|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.7k, False: 1.37k]
  ------------------
  151|  13.7k|        auto it = scn::ranges::begin(source);
  152|  13.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  13.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  13.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  13.9k|            auto result = scn::scan<T>(
  155|  13.9k|                global_locale,
  156|  13.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  13.9k|                scn::runtime_format(f));
  158|  13.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.7k, False: 184]
  ------------------
  159|  13.7k|                break;
  160|  13.7k|            }
  161|    184|            it = result->begin();
  162|    184|        }
  163|  13.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.37k|    {
  167|  1.37k|        auto it = scn::ranges::begin(source);
  168|  1.40k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.40k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.40k|            auto result = scn::scan_value<T>(
  171|  1.40k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.40k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.37k, False: 27]
  ------------------
  173|  1.37k|                break;
  174|  1.37k|            }
  175|     27|            it = result->begin();
  176|     27|        }
  177|  1.37k|    }
  178|  1.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwiNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  1.37k|{
  134|       |    // Regular scan
  135|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.7k, False: 1.37k]
  ------------------
  136|  13.7k|        auto it = scn::ranges::begin(source);
  137|  14.7k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.7k|            auto result = scn::scan<T>(
  140|  14.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.7k|                scn::runtime_format(f));
  142|  14.7k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.7k, False: 946]
  ------------------
  143|  13.7k|                break;
  144|  13.7k|            }
  145|    946|            it = result->begin();
  146|    946|        }
  147|  13.7k|    }
  148|       |
  149|       |    // scan localized
  150|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.7k, False: 1.37k]
  ------------------
  151|  13.7k|        auto it = scn::ranges::begin(source);
  152|  14.7k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.7k|            auto result = scn::scan<T>(
  155|  14.7k|                global_locale,
  156|  14.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.7k|                scn::runtime_format(f));
  158|  14.7k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.7k, False: 946]
  ------------------
  159|  13.7k|                break;
  160|  13.7k|            }
  161|    946|            it = result->begin();
  162|    946|        }
  163|  13.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.37k|    {
  167|  1.37k|        auto it = scn::ranges::begin(source);
  168|  1.41k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.41k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.41k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.41k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.41k|            auto result = scn::scan_value<T>(
  171|  1.41k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.41k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.37k, False: 42]
  ------------------
  173|  1.37k|                break;
  174|  1.37k|            }
  175|     42|            it = result->begin();
  176|     42|        }
  177|  1.37k|    }
  178|  1.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwjNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  1.37k|{
  134|       |    // Regular scan
  135|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.7k, False: 1.37k]
  ------------------
  136|  13.7k|        auto it = scn::ranges::begin(source);
  137|  14.6k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.6k|            auto result = scn::scan<T>(
  140|  14.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.6k|                scn::runtime_format(f));
  142|  14.6k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.7k, False: 898]
  ------------------
  143|  13.7k|                break;
  144|  13.7k|            }
  145|    898|            it = result->begin();
  146|    898|        }
  147|  13.7k|    }
  148|       |
  149|       |    // scan localized
  150|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.7k, False: 1.37k]
  ------------------
  151|  13.7k|        auto it = scn::ranges::begin(source);
  152|  14.6k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.6k|            auto result = scn::scan<T>(
  155|  14.6k|                global_locale,
  156|  14.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.6k|                scn::runtime_format(f));
  158|  14.6k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.7k, False: 898]
  ------------------
  159|  13.7k|                break;
  160|  13.7k|            }
  161|    898|            it = result->begin();
  162|    898|        }
  163|  13.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.37k|    {
  167|  1.37k|        auto it = scn::ranges::begin(source);
  168|  1.40k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.40k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.40k|            auto result = scn::scan_value<T>(
  171|  1.40k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.40k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.37k, False: 33]
  ------------------
  173|  1.37k|                break;
  174|  1.37k|            }
  175|     33|            it = result->begin();
  176|     33|        }
  177|  1.37k|    }
  178|  1.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwxNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  1.37k|{
  134|       |    // Regular scan
  135|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.7k, False: 1.37k]
  ------------------
  136|  13.7k|        auto it = scn::ranges::begin(source);
  137|  14.7k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.7k|            auto result = scn::scan<T>(
  140|  14.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.7k|                scn::runtime_format(f));
  142|  14.7k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.7k, False: 999]
  ------------------
  143|  13.7k|                break;
  144|  13.7k|            }
  145|    999|            it = result->begin();
  146|    999|        }
  147|  13.7k|    }
  148|       |
  149|       |    // scan localized
  150|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.7k, False: 1.37k]
  ------------------
  151|  13.7k|        auto it = scn::ranges::begin(source);
  152|  14.7k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.7k|            auto result = scn::scan<T>(
  155|  14.7k|                global_locale,
  156|  14.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.7k|                scn::runtime_format(f));
  158|  14.7k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.7k, False: 999]
  ------------------
  159|  13.7k|                break;
  160|  13.7k|            }
  161|    999|            it = result->begin();
  162|    999|        }
  163|  13.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.37k|    {
  167|  1.37k|        auto it = scn::ranges::begin(source);
  168|  1.42k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.42k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.42k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.42k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.42k|            auto result = scn::scan_value<T>(
  171|  1.42k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.42k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.37k, False: 53]
  ------------------
  173|  1.37k|                break;
  174|  1.37k|            }
  175|     53|            it = result->begin();
  176|     53|        }
  177|  1.37k|    }
  178|  1.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwyNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  1.37k|{
  134|       |    // Regular scan
  135|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.7k, False: 1.37k]
  ------------------
  136|  13.7k|        auto it = scn::ranges::begin(source);
  137|  14.6k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.6k|            auto result = scn::scan<T>(
  140|  14.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.6k|                scn::runtime_format(f));
  142|  14.6k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.7k, False: 939]
  ------------------
  143|  13.7k|                break;
  144|  13.7k|            }
  145|    939|            it = result->begin();
  146|    939|        }
  147|  13.7k|    }
  148|       |
  149|       |    // scan localized
  150|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.7k, False: 1.37k]
  ------------------
  151|  13.7k|        auto it = scn::ranges::begin(source);
  152|  14.6k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.6k|            auto result = scn::scan<T>(
  155|  14.6k|                global_locale,
  156|  14.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.6k|                scn::runtime_format(f));
  158|  14.6k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.7k, False: 939]
  ------------------
  159|  13.7k|                break;
  160|  13.7k|            }
  161|    939|            it = result->begin();
  162|    939|        }
  163|  13.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.37k|    {
  167|  1.37k|        auto it = scn::ranges::begin(source);
  168|  1.41k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.41k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.41k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.41k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.41k|            auto result = scn::scan_value<T>(
  171|  1.41k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.41k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.37k, False: 41]
  ------------------
  173|  1.37k|                break;
  174|  1.37k|            }
  175|     41|            it = result->begin();
  176|     41|        }
  177|  1.37k|    }
  178|  1.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwaKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  1.37k|{
  134|       |    // Regular scan
  135|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.7k, False: 1.37k]
  ------------------
  136|  13.7k|        auto it = scn::ranges::begin(source);
  137|  13.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  13.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  13.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  13.9k|            auto result = scn::scan<T>(
  140|  13.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  13.9k|                scn::runtime_format(f));
  142|  13.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.7k, False: 218]
  ------------------
  143|  13.7k|                break;
  144|  13.7k|            }
  145|    218|            it = result->begin();
  146|    218|        }
  147|  13.7k|    }
  148|       |
  149|       |    // scan localized
  150|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.7k, False: 1.37k]
  ------------------
  151|  13.7k|        auto it = scn::ranges::begin(source);
  152|  13.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  13.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  13.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  13.9k|            auto result = scn::scan<T>(
  155|  13.9k|                global_locale,
  156|  13.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  13.9k|                scn::runtime_format(f));
  158|  13.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.7k, False: 218]
  ------------------
  159|  13.7k|                break;
  160|  13.7k|            }
  161|    218|            it = result->begin();
  162|    218|        }
  163|  13.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.37k|    {
  167|  1.37k|        auto it = scn::ranges::begin(source);
  168|  1.41k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.41k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.41k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.41k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.41k|            auto result = scn::scan_value<T>(
  171|  1.41k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.41k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.37k, False: 34]
  ------------------
  173|  1.37k|                break;
  174|  1.37k|            }
  175|     34|            it = result->begin();
  176|     34|        }
  177|  1.37k|    }
  178|  1.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwhKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  1.37k|{
  134|       |    // Regular scan
  135|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.7k, False: 1.37k]
  ------------------
  136|  13.7k|        auto it = scn::ranges::begin(source);
  137|  13.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  13.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  13.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  13.9k|            auto result = scn::scan<T>(
  140|  13.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  13.9k|                scn::runtime_format(f));
  142|  13.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.7k, False: 184]
  ------------------
  143|  13.7k|                break;
  144|  13.7k|            }
  145|    184|            it = result->begin();
  146|    184|        }
  147|  13.7k|    }
  148|       |
  149|       |    // scan localized
  150|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.7k, False: 1.37k]
  ------------------
  151|  13.7k|        auto it = scn::ranges::begin(source);
  152|  13.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  13.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  13.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  13.9k|            auto result = scn::scan<T>(
  155|  13.9k|                global_locale,
  156|  13.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  13.9k|                scn::runtime_format(f));
  158|  13.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.7k, False: 184]
  ------------------
  159|  13.7k|                break;
  160|  13.7k|            }
  161|    184|            it = result->begin();
  162|    184|        }
  163|  13.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.37k|    {
  167|  1.37k|        auto it = scn::ranges::begin(source);
  168|  1.40k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.40k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.40k|            auto result = scn::scan_value<T>(
  171|  1.40k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.40k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.37k, False: 27]
  ------------------
  173|  1.37k|                break;
  174|  1.37k|            }
  175|     27|            it = result->begin();
  176|     27|        }
  177|  1.37k|    }
  178|  1.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwiKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  1.37k|{
  134|       |    // Regular scan
  135|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.7k, False: 1.37k]
  ------------------
  136|  13.7k|        auto it = scn::ranges::begin(source);
  137|  14.7k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.7k|            auto result = scn::scan<T>(
  140|  14.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.7k|                scn::runtime_format(f));
  142|  14.7k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.7k, False: 946]
  ------------------
  143|  13.7k|                break;
  144|  13.7k|            }
  145|    946|            it = result->begin();
  146|    946|        }
  147|  13.7k|    }
  148|       |
  149|       |    // scan localized
  150|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.7k, False: 1.37k]
  ------------------
  151|  13.7k|        auto it = scn::ranges::begin(source);
  152|  14.7k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.7k|            auto result = scn::scan<T>(
  155|  14.7k|                global_locale,
  156|  14.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.7k|                scn::runtime_format(f));
  158|  14.7k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.7k, False: 946]
  ------------------
  159|  13.7k|                break;
  160|  13.7k|            }
  161|    946|            it = result->begin();
  162|    946|        }
  163|  13.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.37k|    {
  167|  1.37k|        auto it = scn::ranges::begin(source);
  168|  1.41k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.41k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.41k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.41k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.41k|            auto result = scn::scan_value<T>(
  171|  1.41k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.41k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.37k, False: 42]
  ------------------
  173|  1.37k|                break;
  174|  1.37k|            }
  175|     42|            it = result->begin();
  176|     42|        }
  177|  1.37k|    }
  178|  1.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwjKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  1.37k|{
  134|       |    // Regular scan
  135|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.7k, False: 1.37k]
  ------------------
  136|  13.7k|        auto it = scn::ranges::begin(source);
  137|  14.6k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.6k|            auto result = scn::scan<T>(
  140|  14.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.6k|                scn::runtime_format(f));
  142|  14.6k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.7k, False: 898]
  ------------------
  143|  13.7k|                break;
  144|  13.7k|            }
  145|    898|            it = result->begin();
  146|    898|        }
  147|  13.7k|    }
  148|       |
  149|       |    // scan localized
  150|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.7k, False: 1.37k]
  ------------------
  151|  13.7k|        auto it = scn::ranges::begin(source);
  152|  14.6k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.6k|            auto result = scn::scan<T>(
  155|  14.6k|                global_locale,
  156|  14.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.6k|                scn::runtime_format(f));
  158|  14.6k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.7k, False: 898]
  ------------------
  159|  13.7k|                break;
  160|  13.7k|            }
  161|    898|            it = result->begin();
  162|    898|        }
  163|  13.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.37k|    {
  167|  1.37k|        auto it = scn::ranges::begin(source);
  168|  1.40k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.40k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.40k|            auto result = scn::scan_value<T>(
  171|  1.40k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.40k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.37k, False: 33]
  ------------------
  173|  1.37k|                break;
  174|  1.37k|            }
  175|     33|            it = result->begin();
  176|     33|        }
  177|  1.37k|    }
  178|  1.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwxKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  1.37k|{
  134|       |    // Regular scan
  135|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.7k, False: 1.37k]
  ------------------
  136|  13.7k|        auto it = scn::ranges::begin(source);
  137|  14.7k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.7k|            auto result = scn::scan<T>(
  140|  14.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.7k|                scn::runtime_format(f));
  142|  14.7k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.7k, False: 999]
  ------------------
  143|  13.7k|                break;
  144|  13.7k|            }
  145|    999|            it = result->begin();
  146|    999|        }
  147|  13.7k|    }
  148|       |
  149|       |    // scan localized
  150|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.7k, False: 1.37k]
  ------------------
  151|  13.7k|        auto it = scn::ranges::begin(source);
  152|  14.7k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.7k|            auto result = scn::scan<T>(
  155|  14.7k|                global_locale,
  156|  14.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.7k|                scn::runtime_format(f));
  158|  14.7k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.7k, False: 999]
  ------------------
  159|  13.7k|                break;
  160|  13.7k|            }
  161|    999|            it = result->begin();
  162|    999|        }
  163|  13.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.37k|    {
  167|  1.37k|        auto it = scn::ranges::begin(source);
  168|  1.42k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.42k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.42k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.42k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.42k|            auto result = scn::scan_value<T>(
  171|  1.42k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.42k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.37k, False: 53]
  ------------------
  173|  1.37k|                break;
  174|  1.37k|            }
  175|     53|            it = result->begin();
  176|     53|        }
  177|  1.37k|    }
  178|  1.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwyKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  1.37k|{
  134|       |    // Regular scan
  135|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.7k, False: 1.37k]
  ------------------
  136|  13.7k|        auto it = scn::ranges::begin(source);
  137|  14.6k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.6k|            auto result = scn::scan<T>(
  140|  14.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.6k|                scn::runtime_format(f));
  142|  14.6k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.7k, False: 939]
  ------------------
  143|  13.7k|                break;
  144|  13.7k|            }
  145|    939|            it = result->begin();
  146|    939|        }
  147|  13.7k|    }
  148|       |
  149|       |    // scan localized
  150|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.7k, False: 1.37k]
  ------------------
  151|  13.7k|        auto it = scn::ranges::begin(source);
  152|  14.6k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.6k|            auto result = scn::scan<T>(
  155|  14.6k|                global_locale,
  156|  14.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.6k|                scn::runtime_format(f));
  158|  14.6k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.7k, False: 939]
  ------------------
  159|  13.7k|                break;
  160|  13.7k|            }
  161|    939|            it = result->begin();
  162|    939|        }
  163|  13.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.37k|    {
  167|  1.37k|        auto it = scn::ranges::begin(source);
  168|  1.41k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.41k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.41k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.41k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.41k|            auto result = scn::scan_value<T>(
  171|  1.41k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.41k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.37k, False: 41]
  ------------------
  173|  1.37k|                break;
  174|  1.37k|            }
  175|     41|            it = result->begin();
  176|     41|        }
  177|  1.37k|    }
  178|  1.37k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   90|  1.37k|{
   91|  1.37k|    using char_type = ranges::range_value_t<Source>;
   92|  1.37k|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|  1.37k|    deque.clear();
   94|  1.37k|    std::copy(ranges::begin(source), ranges::end(source),
   95|  1.37k|              std::back_inserter(deque));
   96|  1.37k|    return deque;
   97|  1.37k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   79|  1.37k|{
   80|       |    if constexpr (std::is_same_v<CharT, char>) {
   81|       |        return noncontiguous_buffer;
   82|       |    }
   83|  1.37k|    else {
   84|  1.37k|        return wnoncontiguous_buffer;
   85|  1.37k|    }
   86|  1.37k|}

LLVMFuzzerTestOneInput:
   59|    688|{
   60|    688|    scn::fuzz::run(data, size);
   61|    688|    return 0;
   62|    688|}
int_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   35|    688|{
   36|    688|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (36:9): [True: 0, False: 688]
  |  Branch (36:35): [True: 0, False: 688]
  ------------------
   37|      0|        return;
   38|      0|    }
   39|       |
   40|    688|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   41|       |
   42|    688|    const auto& f =
   43|    688|        get_format_strings<char>("{}", "{:i}", "{:d}", "{:L}", "{:x}", "{:b}",
   44|    688|                                 "{:o}", "{:B36}", "{:'}", "{:'L}");
   45|    688|    do_basic_run(sv, f);
   46|       |
   47|    688|    const auto& wf = get_format_strings<wchar_t>(
   48|    688|        L"{}", L"{:i}", L"{:d}", L"{:L}", L"{:x}", L"{:b}", L"{:o}", L"{:B36}",
   49|    688|        L"{:'}", L"{:'L}");
   50|    688|    do_basic_run(wsv_reinterpret, wf);
   51|    688|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (51:9): [True: 688, False: 0]
  ------------------
   52|    688|        do_basic_run(wsv_transcode, wf);
   53|    688|    }
   54|    688|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|    688|{
   25|    688|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|    688|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|    688|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|    688|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|    688|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|    688|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|    688|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|    688|{
   25|    688|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|    688|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|    688|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|    688|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|    688|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|    688|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|    688|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  1.37k|{
   25|  1.37k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  1.37k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  1.37k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  1.37k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  1.37k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  1.37k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  1.37k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  1.37k|{
   25|  1.37k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  1.37k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  1.37k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  1.37k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  1.37k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  1.37k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  1.37k|}

