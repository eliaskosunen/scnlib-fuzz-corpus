_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIccEEDaSG_SQ_:
  859|  2.92M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIwcEEDaSG_SQ_:
  859|   271k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  859|   271k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3806|  4.86M|{
 3807|  4.86M|    if constexpr (sizeof(U) == 1) {
 3808|  4.86M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|       |    }
 3810|       |    else if constexpr (sizeof(U) == 2) {
 3811|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|       |    }
 3813|       |    else {
 3814|       |        // utf-32
 3815|       |        static_assert(sizeof(U) == 4);
 3816|       |        SCN_UNUSED(ch);
 3817|       |        return 1;
 3818|       |    }
 3819|  4.86M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3770|  4.86M|{
 3771|  4.86M|    static_assert(sizeof(U8) == 1);
 3772|       |
 3773|  4.86M|    SCN_GCC_COMPAT_PUSH
 3774|  4.86M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3775|  4.86M|    constexpr char lengths[] =
 3776|  4.86M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3777|  4.86M|        "\1\1\1\1\1\1\1\1"
 3778|  4.86M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3779|       |                            // byte
 3780|  4.86M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3781|  4.86M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3782|  4.86M|        "\4";               // highest bits 11110 -> 4-byte cp
 3783|  4.86M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3784|  4.86M|    SCN_GCC_COMPAT_POP
 3785|  4.86M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|  4.77M|{
 4013|  4.77M|    if constexpr (sizeof(CharT) == 1) {
 4014|  4.77M|        return decode_utf8_code_point_exhaustive(input);
 4015|       |    }
 4016|       |    else if constexpr (sizeof(CharT) == 2) {
 4017|       |        return decode_utf16_code_point_exhaustive(input);
 4018|       |    }
 4019|       |    else {
 4020|       |        SCN_EXPECT(input.size() == 1);
 4021|       |        auto cp = static_cast<char32_t>(input.front());
 4022|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4023|       |            return invalid_code_point;
 4024|       |        }
 4025|       |        return cp;
 4026|       |    }
 4027|  4.77M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3825|  4.77M|{
 3826|  4.77M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  4.77M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.77M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3827|       |
 3828|  4.77M|    const auto is_trailing_code_unit = [](char ch) {
 3829|  4.77M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|  4.77M|    };
 3831|       |
 3832|  4.77M|    if (input.size() == 1) {
  ------------------
  |  Branch (3832:9): [True: 4.73M, False: 38.8k]
  ------------------
 3833|  4.73M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3833:13): [True: 2.06k, False: 4.73M]
  ------------------
 3834|  2.06k|            SCN_UNLIKELY_ATTR
 3835|  2.06k|            return invalid_code_point;
 3836|  2.06k|        }
 3837|  4.73M|        return static_cast<char32_t>(input[0]);
 3838|  4.73M|    }
 3839|       |
 3840|  38.8k|    if (input.size() == 2) {
  ------------------
  |  Branch (3840:9): [True: 20.4k, False: 18.4k]
  ------------------
 3841|  20.4k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3841:13): [True: 85, False: 20.3k]
  ------------------
 3842|     85|            SCN_UNLIKELY_ATTR
 3843|     85|            return invalid_code_point;
 3844|     85|        }
 3845|  20.3k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3845:13): [True: 5.50k, False: 14.8k]
  ------------------
 3846|  5.50k|            SCN_UNLIKELY_ATTR
 3847|  5.50k|            return invalid_code_point;
 3848|  5.50k|        }
 3849|       |
 3850|  14.8k|        char32_t cp{};
 3851|  14.8k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3852|  14.8k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3853|  14.8k|        return cp;
 3854|  20.3k|    }
 3855|       |
 3856|  18.4k|    if (input.size() == 3) {
  ------------------
  |  Branch (3856:9): [True: 13.5k, False: 4.88k]
  ------------------
 3857|  13.5k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3857:13): [True: 53, False: 13.5k]
  ------------------
 3858|     53|            SCN_UNLIKELY_ATTR
 3859|     53|            return invalid_code_point;
 3860|     53|        }
 3861|  13.5k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3861:13): [True: 1.69k, False: 11.8k]
  ------------------
 3862|  13.5k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3862:13): [True: 363, False: 11.4k]
  ------------------
 3863|  2.06k|            SCN_UNLIKELY_ATTR
 3864|  2.06k|            return invalid_code_point;
 3865|  2.06k|        }
 3866|       |
 3867|  11.4k|        char32_t cp{};
 3868|  11.4k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3869|  11.4k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3870|  11.4k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3871|  11.4k|        return cp;
 3872|  13.5k|    }
 3873|       |
 3874|  4.88k|    if (input.size() == 4) {
  ------------------
  |  Branch (3874:9): [True: 4.88k, False: 0]
  ------------------
 3875|  4.88k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3875:13): [True: 0, False: 4.88k]
  ------------------
 3876|      0|            SCN_UNLIKELY_ATTR
 3877|      0|            return invalid_code_point;
 3878|      0|        }
 3879|  4.88k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3879:13): [True: 1.11k, False: 3.76k]
  ------------------
 3880|  1.11k|            SCN_UNLIKELY_ATTR
 3881|  1.11k|            return invalid_code_point;
 3882|  1.11k|        }
 3883|  3.76k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3883:13): [True: 1.71k, False: 2.05k]
  ------------------
 3884|  3.76k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3884:13): [True: 13, False: 2.03k]
  ------------------
 3885|  3.76k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3885:13): [True: 3, False: 2.03k]
  ------------------
 3886|  1.73k|            SCN_UNLIKELY_ATTR
 3887|  1.73k|            return invalid_code_point;
 3888|  1.73k|        }
 3889|       |
 3890|  2.03k|        char32_t cp{};
 3891|  2.03k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3892|  2.03k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3893|  2.03k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3894|  2.03k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3895|  2.03k|        return cp;
 3896|  3.76k|    }
 3897|       |
 3898|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3899|       |    // gcc 7 thinks we'll get here, even when we won't
 3900|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3901|      0|#endif
 3902|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3903|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3828|  53.5k|    const auto is_trailing_code_unit = [](char ch) {
 3829|  53.5k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|  53.5k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3698|  3.10M|{
 3699|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3700|       |                                          decltype(first), decltype(last)> &&
 3701|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3702|       |        return {first, last};
 3703|       |    }
 3704|  3.10M|    else {
 3705|  3.10M|        return {to_address(first), static_cast<size_t>(std::distance(
 3706|  3.10M|                                       to_address(first), to_address(last)))};
 3707|  3.10M|    }
 3708|  3.10M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  9.34M|{
  326|  9.34M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  9.34M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  9.34M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  12.5M|{
  304|  12.5M|    return p;
  305|  12.5M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3729|  7.28M|{
 3730|       |    if constexpr (std::is_constructible_v<
 3731|       |                      typename std::basic_string_view<CharT>::iterator,
 3732|       |                      decltype(it)> &&
 3733|  7.28M|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3734|  7.28M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  7.28M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3735|  7.28M|        return it;
 3736|       |    }
 3737|       |    else {
 3738|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3739|       |    }
 3740|  7.28M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   264k|    {
 2724|   264k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   264k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   264k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   264k|    {
 2705|   264k|        return decay_copy(t.begin());
 2706|   264k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1948|  18.9M|{
 1949|  18.9M|    return SCN_FWD(t);
  ------------------
  |  |  930|  18.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  18.9M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  4.55M|    {
 2781|  4.55M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  4.55M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  4.55M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  4.55M|    {
 2763|  4.55M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  4.55M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  4.55M|    }
_ZN3scn2v34scanIJaENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8866|   157k|{
 8867|   157k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   157k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   157k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   157k|    static_cast<    \
  |  |  929|   157k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   157k|    static_cast<    \
  |  |  929|   157k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   157k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJaEEEDav:
 5395|   630k|{
 5396|   630k|    detail::check_scan_arg_types<Args...>();
 5397|   630k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   630k|}
_ZN3scn2v36detail20check_scan_arg_typesIJaEEEvv:
 5134|   859k|{
 5135|   859k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|   859k|                  "Scan argument types must be default constructible");
 5137|   859k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|   859k|                  "Scan argument types must be Destructible");
 5139|   859k|    static_assert(
 5140|   859k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|   859k|        "Scan argument types must not be references");
 5142|   859k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJaEEC2Ev:
 5347|   630k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5348|   630k|    {
 5349|   630k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJaEE12make_argptrsIJaEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   630k|    {
 5360|   630k|        return {detail::make_arg<
 5361|   630k|            kind, Context,
 5362|   630k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   630k|                                 typename Context::char_type>::value>(args)...};
 5364|   630k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE1EavEEPvRT2_:
 5169|   630k|{
 5170|   630k|    return make_value<Context>(value).ref_value;
 5171|   630k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEaEEDaRT0_:
 5119|   683k|{
 5120|   683k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5123|   683k|                                  needs_context_tag>) {
 5124|   683k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   683k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|       |    }
 5126|       |    else {
 5127|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|       |            value, context_tag<Context>{}));
 5129|       |    }
 5130|   683k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERa:
 4958|   683k|    {                                                                        \
 4959|   683k|        return val;                                                          \
 4960|   683k|    }
_ZN3scn2v36detail15make_value_implIRaEEDaOT_:
 5088|   859k|{
 5089|   859k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|   859k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|   859k|    constexpr bool scannable_char =
 5093|   859k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|   859k|    static_assert(scannable_char,
 5095|   859k|                  "Cannot scan an argument of an unsupported character "
 5096|   859k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|   859k|    constexpr bool scannable_const =
 5099|   859k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|   859k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|   859k|    constexpr bool scannable_disabled =
 5103|   859k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|   859k|    static_assert(scannable_disabled,
 5105|   859k|                  "Cannot scan an argument that has been disabled by "
 5106|   859k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|   859k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|   859k|    static_assert(
 5110|   859k|        scannable,
 5111|   859k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|   859k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|   859k|    return arg_value{arg};
 5115|   859k|}
_ZN3scn2v36detail9arg_valueC2IaEERT_:
 4900|   859k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4901|   859k|    {
 4902|   859k|    }
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8653|  1.05M|{
 8654|  1.05M|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8655|  1.05M|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8590|  1.05M|{
 8591|  1.05M|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|  1.05M|    auto result = vscan_impl(buffer, format, args);
 8594|  1.05M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 125k, False: 930k]
  |  |  ------------------
  ------------------
 8595|   125k|        return unexpected(result.error());
 8596|   125k|    }
 8597|   930k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   930k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|  1.05M|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 4719|  2.27M|{
 4720|  2.27M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|  2.27M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|  2.27M|                  "\n"
 4724|  2.27M|                  "Unsupported range type given as input to a scanning "
 4725|  2.27M|                  "function.\n"
 4726|  2.27M|                  "A range needs to have a character type (value type) "
 4727|  2.27M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|  2.27M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|  2.27M|                  "to be included.\n"
 4730|  2.27M|                  "See the scnlib documentation for more details.");
 4731|  2.27M|    static_assert(
 4732|  2.27M|        !std::is_same_v<T, custom_char_traits>,
 4733|  2.27M|        "\n"
 4734|  2.27M|        "Unsupported range type given as input to a scanning "
 4735|  2.27M|        "function.\n"
 4736|  2.27M|        "String types (std::basic_string, and std::basic_string_view) "
 4737|  2.27M|        "need to use std::char_traits. Strings with custom Traits are "
 4738|  2.27M|        "not supported.");
 4739|  2.27M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|  2.27M|                  "\n"
 4741|  2.27M|                  "Unsupported range type given as input to a scanning "
 4742|  2.27M|                  "function.\n"
 4743|  2.27M|                  "file_marker_found cannot be used as an "
 4744|  2.27M|                  "source range type to scn::scan.\n"
 4745|  2.27M|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|  2.27M|                  "and do not provide an explicit source range, "
 4747|  2.27M|                  "or use scn::scan with a FILE* directly.");
 4748|  2.27M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|  2.27M|                  "\n"
 4750|  2.27M|                  "Unsupported range type given as input to a scanning "
 4751|  2.27M|                  "function.\n"
 4752|  2.27M|                  "In order to be scannable, a range needs to satisfy "
 4753|  2.27M|                  "`forward_range`. `input_range` is not sufficient.");
 4754|  2.27M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|  2.27M|                  "\n"
 4756|  2.27M|                  "Unsupported range type given as input to a scanning "
 4757|  2.27M|                  "function.\n"
 4758|  2.27M|                  "A range needs to model forward_range and have a valid "
 4759|  2.27M|                  "character type (char or wchar_t) to be scannable.\n"
 4760|  2.27M|                  "Examples of scannable ranges are std::string, "
 4761|  2.27M|                  "std::string_view, "
 4762|  2.27M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|  2.27M|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|  2.27M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|  2.27M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 4658|  2.27M|{
 4659|  2.27M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 4660|  2.27M|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4661|       |    }
 4662|       |    else {
 4663|       |        return invalid_char_type{};
 4664|       |    }
 4665|  2.27M|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  2.27M|    {
 2855|  2.27M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  2.27M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  2.27M|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  2.27M|    {
 2836|  2.27M|        return t.data();
 2837|  2.27M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3230|  2.27M|    {
 3231|  2.27M|        return ranges::empty(derived())
  ------------------
  |  Branch (3231:16): [True: 17.4k, False: 2.25M]
  ------------------
 3232|  2.27M|                   ? nullptr
 3233|  2.27M|                   : std::addressof(*ranges::begin(derived()));
 3234|  2.27M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  2.27M|    {
 3005|  2.27M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  2.27M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  2.27M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  2.27M|    {
 2978|  2.27M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  2.27M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  2.27M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5emptyEv:
 3338|  8.07M|    {
 3339|  8.07M|        return m_iterator == m_sentinel;
 3340|  8.07M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3184|  4.53M|    {
 3185|  4.53M|        return static_cast<const D&>(*this);
 3186|  4.53M|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  4.27M|    {
 2724|  4.27M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  4.27M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  4.27M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  4.27M|    {
 2705|  4.27M|        return decay_copy(t.begin());
 2706|  4.27M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3329|  38.5M|    {
 3330|  38.5M|        return m_iterator;
 3331|  38.5M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|  2.27M|    {
 2930|  2.27M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|  2.27M|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|  2.27M|    {
 2896|  2.27M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  2.27M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|  2.27M|    }
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1948|  3.41M|{
 1949|  3.41M|    return SCN_FWD(t);
  ------------------
  |  |  930|  3.41M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  3.41M|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3345|  8.09M|    {
 3346|  8.09M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|  8.09M|    }
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1597|  8.42M|    {
 1598|  8.42M|        return has_value();
 1599|  8.42M|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  484|  16.0M|    {
  485|  16.0M|        return m_has_value;
  486|  16.0M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1603|  1.57M|    {
 1604|  1.57M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.57M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.57M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.57M|        return this->get_unexpected().error();
 1606|  1.57M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  1.57M|    {
  468|  1.57M|        return m_unexpected;
  469|  1.57M|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  360|  13.6M|    {
  361|  13.6M|        return m_unexpected;
  362|  13.6M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  345|  6.74M|        : m_unexpected(std::forward<Err>(e))
  346|  6.74M|    {
  347|  6.74M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  6.74M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  6.74M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|   262k|        : base(unexpect, std::move(e.error())),
 1474|   262k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   262k|    {
 1476|   262k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|   262k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   262k|          m_has_value(false)
  446|   262k|    {
  447|   262k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  354|  7.86M|        : m_unexpected(std::forward<Args>(args)...)
  355|  7.86M|    {
  356|  7.86M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  7.86M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  7.86M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.27M|    {
 1177|  2.27M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5922|  2.01M|{
 5923|       |    if constexpr (ranges::random_access_iterator<
 5924|  2.01M|                      ranges::iterator_t<SourceRange>>) {
 5925|  2.01M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|       |    }
 5927|       |    else {
 5928|       |        auto it = ranges::begin(source);
 5929|       |        while (n > 0) {
 5930|       |            --n;
 5931|       |            ++it;
 5932|       |        }
 5933|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|       |    }
 5935|  2.01M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  7.80M|    {
 2724|  7.80M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  7.80M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  7.80M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  7.80M|    {
 2705|  7.80M|        return decay_copy(t.begin());
 2706|  7.80M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 5909|  2.01M|{
 5910|  2.01M|    return ranges::end(source);
 5911|  2.01M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  2.01M|    {
 2781|  2.01M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  2.01M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  2.01M|    {
 2763|  2.01M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  2.01M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3333|  29.4M|    {
 3334|  29.4M|        return m_sentinel;
 3335|  29.4M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1652|  6.06M|    {
 1653|  6.06M|        return value();
 1654|  6.06M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1626|  6.06M|    {
 1627|  6.06M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  6.06M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.06M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  6.06M|        return this->get_value();
 1629|  6.06M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  450|  6.06M|    {
  451|  6.06M|        return m_value;
  452|  6.06M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|  2.01M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.01M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.01M|    {
 1430|  2.01M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  435|  2.01M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.01M|    {
  437|  2.01M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJaEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7974|   314k|    {
 7975|   314k|        return m_str;
 7976|   314k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJaEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5424|   630k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5425|   630k|    {
 5426|   630k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJaEE12arg_pointersEv:
 5378|   630k|    {
 5379|   630k|        return m_argptrs;
 5380|   630k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5476|  4.23M|        : m_desc(desc), m_builtin_values(data)
 5477|  4.23M|    {
 5478|  4.23M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   314k|{
 8820|   314k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   314k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 41.7k, False: 273k]
  |  |  ------------------
  ------------------
 8821|  41.7k|        return unexpected(result.error());
 8822|  41.7k|    }
 8823|   273k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   273k|    static_cast<    \
  |  |  929|   273k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   273k|    static_cast<    \
  |  |  929|   273k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   314k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1597|  2.27M|    {
 1598|  2.27M|        return has_value();
 1599|  2.27M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  4.55M|    {
  485|  4.55M|        return m_has_value;
  486|  4.55M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1603|   262k|    {
 1604|   262k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   262k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   262k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   262k|        return this->get_unexpected().error();
 1606|   262k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   262k|    {
  468|   262k|        return m_unexpected;
  469|   262k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  43.7k|        : base(unexpect, std::move(e.error())),
 1474|  43.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  43.7k|    {
 1476|  43.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  43.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  43.7k|          m_has_value(false)
  446|  43.7k|    {
  447|  43.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   341k|    {
 1177|   341k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1652|  1.86M|    {
 1653|  1.86M|        return value();
 1654|  1.86M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|  2.01M|    {
 1627|  2.01M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.01M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.01M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.01M|        return this->get_value();
 1629|  2.01M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.01M|    {
  451|  2.01M|        return m_value;
  452|  2.01M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJaEEC2ES8_ONSt3__15tupleIJaEEE:
 5828|   297k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   297k|    static_cast<    \
  |  |  929|   297k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   297k|    static_cast<    \
  |  |  929|   297k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   297k|    {
 5830|   297k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5679|  2.01M|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|  2.01M|    static_cast<    \
  |  |  929|  2.01M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5680|  2.01M|    {
 5681|  2.01M|    }
_ZN3scn2v36detail25scan_result_value_storageIJaEEC2EONSt3__15tupleIJaEEE:
 5614|   597k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|   597k|    static_cast<    \
  |  |  929|   597k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5615|   597k|    {
 5616|   597k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   297k|        : base(std::in_place, std::forward<U>(val)),
 1428|   297k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   297k|    {
 1430|   297k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|   297k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   297k|    {
  437|   297k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJaEE4argsEv:
 5373|   630k|    {
 5374|   630k|        return m_args;
 5375|   630k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3314|  20.0M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  20.0M|    static_cast<    \
  |  |  929|  20.0M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  20.0M|    static_cast<    \
  |  |  929|  20.0M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3315|  20.0M|    {
 3316|  20.0M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7690|  4.23M|{
 7691|  4.23M|    return s;
 7692|  4.23M|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7667|  4.23M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJaEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7969|   314k|        : m_str(r.str)
 7970|   314k|    {
 7971|   314k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEcvbEv:
 1597|   341k|    {
 1598|   341k|        return has_value();
 1599|   341k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   638k|    {
  485|   638k|        return m_has_value;
  486|   638k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEptEv:
 1672|   297k|    {
 1673|   297k|        return &value();
 1674|   297k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|   297k|    {
 1627|   297k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   297k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   297k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   297k|        return this->get_value();
 1629|   297k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   297k|    {
  451|   297k|        return m_value;
  452|   297k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 5697|  2.01M|    {
 5698|  2.01M|        return ranges::begin(m_range);
 5699|  2.01M|    }
_ZN3scn2v34scanIJaENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8933|   157k|{
 8934|   157k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   157k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   157k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   157k|    static_cast<    \
  |  |  929|   157k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   157k|    static_cast<    \
  |  |  929|   157k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   157k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8671|  1.05M|{
 8672|  1.05M|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8673|  1.05M|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8606|  1.05M|{
 8607|  1.05M|#if !SCN_DISABLE_LOCALE
 8608|  1.05M|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|  1.05M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|  1.05M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|  1.05M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|  1.05M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 125k, False: 930k]
  |  |  ------------------
  ------------------
 8615|   125k|        return unexpected(result.error());
 8616|   125k|    }
 8617|   930k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   930k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|  1.05M|}
_ZN3scn2v310scan_valueIaNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8972|  26.4k|{
 8973|  26.4k|    T value;
 8974|  26.4k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  26.4k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  26.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  26.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  26.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  26.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.08k, False: 24.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.08k|    }                                                  \
  |  |  |  | 3671|  26.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  24.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  24.3k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  24.3k|    static_cast<    \
  |  |  929|  24.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  24.3k|    static_cast<    \
  |  |  929|  24.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  26.4k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEaEENS0_14basic_scan_argIT_EERT0_:
 5154|  52.8k|{
 5155|  52.8k|    check_scan_arg_types<T>();
 5156|       |
 5157|  52.8k|    basic_scan_arg<Context> arg;
 5158|  52.8k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  52.8k|    arg.m_value = make_value<Context>(value);
 5160|  52.8k|    return arg;
 5161|  52.8k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5240|  4.55M|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4897|  5.61M|    arg_value() = default;
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8684|   164k|{
 8685|   164k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|   164k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8686|   164k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|   164k|{
 8631|   164k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|   164k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|   164k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   164k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.5k, False: 152k]
  |  |  ------------------
  ------------------
 8635|  12.5k|        return unexpected(result.error());
 8636|  12.5k|    }
 8637|   152k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   152k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|   164k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|   152k|    {
 1663|   152k|        return std::move(value());
 1664|   152k|    }
_ZN3scn2v34scanIJhENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8866|   152k|{
 8867|   152k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   152k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   152k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   152k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   152k|    static_cast<    \
  |  |  929|   152k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   152k|    static_cast<    \
  |  |  929|   152k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   152k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJhEEEDav:
 5395|   609k|{
 5396|   609k|    detail::check_scan_arg_types<Args...>();
 5397|   609k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   609k|}
_ZN3scn2v36detail20check_scan_arg_typesIJhEEEvv:
 5134|   832k|{
 5135|   832k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|   832k|                  "Scan argument types must be default constructible");
 5137|   832k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|   832k|                  "Scan argument types must be Destructible");
 5139|   832k|    static_assert(
 5140|   832k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|   832k|        "Scan argument types must not be references");
 5142|   832k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJhEEC2Ev:
 5347|   609k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5348|   609k|    {
 5349|   609k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJhEE12make_argptrsIJhEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   609k|    {
 5360|   609k|        return {detail::make_arg<
 5361|   609k|            kind, Context,
 5362|   609k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   609k|                                 typename Context::char_type>::value>(args)...};
 5364|   609k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE6EhvEEPvRT2_:
 5169|   609k|{
 5170|   609k|    return make_value<Context>(value).ref_value;
 5171|   609k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEhEEDaRT0_:
 5119|   656k|{
 5120|   656k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5123|   656k|                                  needs_context_tag>) {
 5124|   656k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   656k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|       |    }
 5126|       |    else {
 5127|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|       |            value, context_tag<Context>{}));
 5129|       |    }
 5130|   656k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERh:
 4958|   656k|    {                                                                        \
 4959|   656k|        return val;                                                          \
 4960|   656k|    }
_ZN3scn2v36detail15make_value_implIRhEEDaOT_:
 5088|   832k|{
 5089|   832k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|   832k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|   832k|    constexpr bool scannable_char =
 5093|   832k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|   832k|    static_assert(scannable_char,
 5095|   832k|                  "Cannot scan an argument of an unsupported character "
 5096|   832k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|   832k|    constexpr bool scannable_const =
 5099|   832k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|   832k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|   832k|    constexpr bool scannable_disabled =
 5103|   832k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|   832k|    static_assert(scannable_disabled,
 5105|   832k|                  "Cannot scan an argument that has been disabled by "
 5106|   832k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|   832k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|   832k|    static_assert(
 5110|   832k|        scannable,
 5111|   832k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|   832k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|   832k|    return arg_value{arg};
 5115|   832k|}
_ZN3scn2v36detail9arg_valueC2IhEERT_:
 4900|   832k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4901|   832k|    {
 4902|   832k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJhEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7974|   304k|    {
 7975|   304k|        return m_str;
 7976|   304k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJhEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5424|   609k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5425|   609k|    {
 5426|   609k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJhEE12arg_pointersEv:
 5378|   609k|    {
 5379|   609k|        return m_argptrs;
 5380|   609k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   304k|{
 8820|   304k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   304k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 41.7k, False: 262k]
  |  |  ------------------
  ------------------
 8821|  41.7k|        return unexpected(result.error());
 8822|  41.7k|    }
 8823|   262k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   262k|    static_cast<    \
  |  |  929|   262k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   262k|    static_cast<    \
  |  |  929|   262k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   304k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  43.7k|        : base(unexpect, std::move(e.error())),
 1474|  43.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  43.7k|    {
 1476|  43.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  43.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  43.7k|          m_has_value(false)
  446|  43.7k|    {
  447|  43.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   327k|    {
 1177|   327k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJhEEC2ES8_ONSt3__15tupleIJhEEE:
 5828|   283k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   283k|    static_cast<    \
  |  |  929|   283k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   283k|    static_cast<    \
  |  |  929|   283k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   283k|    {
 5830|   283k|    }
_ZN3scn2v36detail25scan_result_value_storageIJhEEC2EONSt3__15tupleIJhEEE:
 5614|   569k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|   569k|    static_cast<    \
  |  |  929|   569k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5615|   569k|    {
 5616|   569k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   283k|        : base(std::in_place, std::forward<U>(val)),
 1428|   283k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   283k|    {
 1430|   283k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|   283k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   283k|    {
  437|   283k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJhEE4argsEv:
 5373|   609k|    {
 5374|   609k|        return m_args;
 5375|   609k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJhEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7969|   304k|        : m_str(r.str)
 7970|   304k|    {
 7971|   304k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEcvbEv:
 1597|   327k|    {
 1598|   327k|        return has_value();
 1599|   327k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   611k|    {
  485|   611k|        return m_has_value;
  486|   611k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEptEv:
 1672|   283k|    {
 1673|   283k|        return &value();
 1674|   283k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|   283k|    {
 1627|   283k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   283k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   283k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   283k|        return this->get_value();
 1629|   283k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   283k|    {
  451|   283k|        return m_value;
  452|   283k|    }
_ZN3scn2v34scanIJhENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8933|   152k|{
 8934|   152k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   152k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   152k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   152k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   152k|    static_cast<    \
  |  |  929|   152k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   152k|    static_cast<    \
  |  |  929|   152k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   152k|}
_ZN3scn2v310scan_valueIhNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8972|  23.5k|{
 8973|  23.5k|    T value;
 8974|  23.5k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  23.5k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  23.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  23.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  23.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  23.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.08k, False: 21.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.08k|    }                                                  \
  |  |  |  | 3671|  23.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  21.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  21.4k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  21.4k|    static_cast<    \
  |  |  929|  21.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  21.4k|    static_cast<    \
  |  |  929|  21.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  23.5k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEhEENS0_14basic_scan_argIT_EERT0_:
 5154|  46.9k|{
 5155|  46.9k|    check_scan_arg_types<T>();
 5156|       |
 5157|  46.9k|    basic_scan_arg<Context> arg;
 5158|  46.9k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  46.9k|    arg.m_value = make_value<Context>(value);
 5160|  46.9k|    return arg;
 5161|  46.9k|}
_ZN3scn2v34scanIJiENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8866|   198k|{
 8867|   198k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   198k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   198k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   198k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   198k|    static_cast<    \
  |  |  929|   198k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   198k|    static_cast<    \
  |  |  929|   198k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   198k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJiEEEDav:
 5395|   795k|{
 5396|   795k|    detail::check_scan_arg_types<Args...>();
 5397|   795k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   795k|}
_ZN3scn2v36detail20check_scan_arg_typesIJiEEEvv:
 5134|  1.03M|{
 5135|  1.03M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  1.03M|                  "Scan argument types must be default constructible");
 5137|  1.03M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  1.03M|                  "Scan argument types must be Destructible");
 5139|  1.03M|    static_assert(
 5140|  1.03M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  1.03M|        "Scan argument types must not be references");
 5142|  1.03M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEEC2Ev:
 5347|   795k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5348|   795k|    {
 5349|   795k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   795k|    {
 5360|   795k|        return {detail::make_arg<
 5361|   795k|            kind, Context,
 5362|   795k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   795k|                                 typename Context::char_type>::value>(args)...};
 5364|   795k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE3EivEEPvRT2_:
 5169|   795k|{
 5170|   795k|    return make_value<Context>(value).ref_value;
 5171|   795k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEiEEDaRT0_:
 5119|   856k|{
 5120|   856k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5123|   856k|                                  needs_context_tag>) {
 5124|   856k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   856k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|       |    }
 5126|       |    else {
 5127|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|       |            value, context_tag<Context>{}));
 5129|       |    }
 5130|   856k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERi:
 4958|   856k|    {                                                                        \
 4959|   856k|        return val;                                                          \
 4960|   856k|    }
_ZN3scn2v36detail15make_value_implIRiEEDaOT_:
 5088|  1.03M|{
 5089|  1.03M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  1.03M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  1.03M|    constexpr bool scannable_char =
 5093|  1.03M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  1.03M|    static_assert(scannable_char,
 5095|  1.03M|                  "Cannot scan an argument of an unsupported character "
 5096|  1.03M|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  1.03M|    constexpr bool scannable_const =
 5099|  1.03M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  1.03M|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  1.03M|    constexpr bool scannable_disabled =
 5103|  1.03M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  1.03M|    static_assert(scannable_disabled,
 5105|  1.03M|                  "Cannot scan an argument that has been disabled by "
 5106|  1.03M|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  1.03M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  1.03M|    static_assert(
 5110|  1.03M|        scannable,
 5111|  1.03M|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  1.03M|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  1.03M|    return arg_value{arg};
 5115|  1.03M|}
_ZN3scn2v36detail9arg_valueC2IiEERT_:
 4900|  1.03M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4901|  1.03M|    {
 4902|  1.03M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7974|   397k|    {
 7975|   397k|        return m_str;
 7976|   397k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJiEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5424|   795k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5425|   795k|    {
 5426|   795k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE12arg_pointersEv:
 5378|   795k|    {
 5379|   795k|        return m_argptrs;
 5380|   795k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   397k|{
 8820|   397k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   397k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 41.7k, False: 355k]
  |  |  ------------------
  ------------------
 8821|  41.7k|        return unexpected(result.error());
 8822|  41.7k|    }
 8823|   355k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   355k|    static_cast<    \
  |  |  929|   355k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   355k|    static_cast<    \
  |  |  929|   355k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   397k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  43.7k|        : base(unexpect, std::move(e.error())),
 1474|  43.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  43.7k|    {
 1476|  43.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  43.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  43.7k|          m_has_value(false)
  446|  43.7k|    {
  447|  43.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   427k|    {
 1177|   427k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEC2ES8_ONSt3__15tupleIJiEEE:
 5828|   384k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   384k|    static_cast<    \
  |  |  929|   384k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   384k|    static_cast<    \
  |  |  929|   384k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   384k|    {
 5830|   384k|    }
_ZN3scn2v36detail25scan_result_value_storageIJiEEC2EONSt3__15tupleIJiEEE:
 5614|   770k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|   770k|    static_cast<    \
  |  |  929|   770k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5615|   770k|    {
 5616|   770k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   384k|        : base(std::in_place, std::forward<U>(val)),
 1428|   384k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   384k|    {
 1430|   384k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|   384k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   384k|    {
  437|   384k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE4argsEv:
 5373|   795k|    {
 5374|   795k|        return m_args;
 5375|   795k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7969|   397k|        : m_str(r.str)
 7970|   397k|    {
 7971|   397k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEcvbEv:
 1597|   427k|    {
 1598|   427k|        return has_value();
 1599|   427k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   812k|    {
  485|   812k|        return m_has_value;
  486|   812k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEptEv:
 1672|   384k|    {
 1673|   384k|        return &value();
 1674|   384k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|   384k|    {
 1627|   384k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   384k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   384k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   384k|        return this->get_value();
 1629|   384k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   384k|    {
  451|   384k|        return m_value;
  452|   384k|    }
_ZN3scn2v34scanIJiENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8933|   198k|{
 8934|   198k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   198k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   198k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   198k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   198k|    static_cast<    \
  |  |  929|   198k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   198k|    static_cast<    \
  |  |  929|   198k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   198k|}
_ZN3scn2v310scan_valueIiNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8972|  30.6k|{
 8973|  30.6k|    T value;
 8974|  30.6k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  30.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  30.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  30.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  30.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  30.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.08k, False: 28.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.08k|    }                                                  \
  |  |  |  | 3671|  30.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  28.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  28.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  28.5k|    static_cast<    \
  |  |  929|  28.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  28.5k|    static_cast<    \
  |  |  929|  28.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  30.6k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEiEENS0_14basic_scan_argIT_EERT0_:
 5154|  60.7k|{
 5155|  60.7k|    check_scan_arg_types<T>();
 5156|       |
 5157|  60.7k|    basic_scan_arg<Context> arg;
 5158|  60.7k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  60.7k|    arg.m_value = make_value<Context>(value);
 5160|  60.7k|    return arg;
 5161|  60.7k|}
_ZN3scn2v34scanIJjENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8866|   171k|{
 8867|   171k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   171k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   171k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   171k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   171k|    static_cast<    \
  |  |  929|   171k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   171k|    static_cast<    \
  |  |  929|   171k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   171k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJjEEEDav:
 5395|   688k|{
 5396|   688k|    detail::check_scan_arg_types<Args...>();
 5397|   688k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   688k|}
_ZN3scn2v36detail20check_scan_arg_typesIJjEEEvv:
 5134|   917k|{
 5135|   917k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|   917k|                  "Scan argument types must be default constructible");
 5137|   917k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|   917k|                  "Scan argument types must be Destructible");
 5139|   917k|    static_assert(
 5140|   917k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|   917k|        "Scan argument types must not be references");
 5142|   917k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEEC2Ev:
 5347|   688k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5348|   688k|    {
 5349|   688k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   688k|    {
 5360|   688k|        return {detail::make_arg<
 5361|   688k|            kind, Context,
 5362|   688k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   688k|                                 typename Context::char_type>::value>(args)...};
 5364|   688k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE8EjvEEPvRT2_:
 5169|   688k|{
 5170|   688k|    return make_value<Context>(value).ref_value;
 5171|   688k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEjEEDaRT0_:
 5119|   740k|{
 5120|   740k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5123|   740k|                                  needs_context_tag>) {
 5124|   740k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   740k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|       |    }
 5126|       |    else {
 5127|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|       |            value, context_tag<Context>{}));
 5129|       |    }
 5130|   740k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERj:
 4958|   740k|    {                                                                        \
 4959|   740k|        return val;                                                          \
 4960|   740k|    }
_ZN3scn2v36detail15make_value_implIRjEEDaOT_:
 5088|   917k|{
 5089|   917k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|   917k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|   917k|    constexpr bool scannable_char =
 5093|   917k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|   917k|    static_assert(scannable_char,
 5095|   917k|                  "Cannot scan an argument of an unsupported character "
 5096|   917k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|   917k|    constexpr bool scannable_const =
 5099|   917k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|   917k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|   917k|    constexpr bool scannable_disabled =
 5103|   917k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|   917k|    static_assert(scannable_disabled,
 5105|   917k|                  "Cannot scan an argument that has been disabled by "
 5106|   917k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|   917k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|   917k|    static_assert(
 5110|   917k|        scannable,
 5111|   917k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|   917k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|   917k|    return arg_value{arg};
 5115|   917k|}
_ZN3scn2v36detail9arg_valueC2IjEERT_:
 4900|   917k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4901|   917k|    {
 4902|   917k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7974|   343k|    {
 7975|   343k|        return m_str;
 7976|   343k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJjEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5424|   688k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5425|   688k|    {
 5426|   688k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE12arg_pointersEv:
 5378|   688k|    {
 5379|   688k|        return m_argptrs;
 5380|   688k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   343k|{
 8820|   343k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   343k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 41.7k, False: 301k]
  |  |  ------------------
  ------------------
 8821|  41.7k|        return unexpected(result.error());
 8822|  41.7k|    }
 8823|   301k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   301k|    static_cast<    \
  |  |  929|   301k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   301k|    static_cast<    \
  |  |  929|   301k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   343k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  43.7k|        : base(unexpect, std::move(e.error())),
 1474|  43.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  43.7k|    {
 1476|  43.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  43.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  43.7k|          m_has_value(false)
  446|  43.7k|    {
  447|  43.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   369k|    {
 1177|   369k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEC2ES8_ONSt3__15tupleIJjEEE:
 5828|   325k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   325k|    static_cast<    \
  |  |  929|   325k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   325k|    static_cast<    \
  |  |  929|   325k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   325k|    {
 5830|   325k|    }
_ZN3scn2v36detail25scan_result_value_storageIJjEEC2EONSt3__15tupleIJjEEE:
 5614|   654k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|   654k|    static_cast<    \
  |  |  929|   654k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5615|   654k|    {
 5616|   654k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   325k|        : base(std::in_place, std::forward<U>(val)),
 1428|   325k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   325k|    {
 1430|   325k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|   325k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   325k|    {
  437|   325k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE4argsEv:
 5373|   688k|    {
 5374|   688k|        return m_args;
 5375|   688k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7969|   343k|        : m_str(r.str)
 7970|   343k|    {
 7971|   343k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEcvbEv:
 1597|   369k|    {
 1598|   369k|        return has_value();
 1599|   369k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   695k|    {
  485|   695k|        return m_has_value;
  486|   695k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEptEv:
 1672|   325k|    {
 1673|   325k|        return &value();
 1674|   325k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|   325k|    {
 1627|   325k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   325k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   325k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   325k|        return this->get_value();
 1629|   325k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   325k|    {
  451|   325k|        return m_value;
  452|   325k|    }
_ZN3scn2v34scanIJjENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8933|   171k|{
 8934|   171k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   171k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   171k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   171k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   171k|    static_cast<    \
  |  |  929|   171k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   171k|    static_cast<    \
  |  |  929|   171k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   171k|}
_ZN3scn2v310scan_valueIjNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8972|  26.2k|{
 8973|  26.2k|    T value;
 8974|  26.2k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  26.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  26.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  26.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  26.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  26.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.08k, False: 24.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.08k|    }                                                  \
  |  |  |  | 3671|  26.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  24.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  24.1k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  24.1k|    static_cast<    \
  |  |  929|  24.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  24.1k|    static_cast<    \
  |  |  929|  24.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  26.2k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEjEENS0_14basic_scan_argIT_EERT0_:
 5154|  52.3k|{
 5155|  52.3k|    check_scan_arg_types<T>();
 5156|       |
 5157|  52.3k|    basic_scan_arg<Context> arg;
 5158|  52.3k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  52.3k|    arg.m_value = make_value<Context>(value);
 5160|  52.3k|    return arg;
 5161|  52.3k|}
_ZN3scn2v34scanIJxENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8866|   202k|{
 8867|   202k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   202k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   202k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   202k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   202k|    static_cast<    \
  |  |  929|   202k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   202k|    static_cast<    \
  |  |  929|   202k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   202k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJxEEEDav:
 5395|   810k|{
 5396|   810k|    detail::check_scan_arg_types<Args...>();
 5397|   810k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   810k|}
_ZN3scn2v36detail20check_scan_arg_typesIJxEEEvv:
 5134|  1.04M|{
 5135|  1.04M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  1.04M|                  "Scan argument types must be default constructible");
 5137|  1.04M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  1.04M|                  "Scan argument types must be Destructible");
 5139|  1.04M|    static_assert(
 5140|  1.04M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  1.04M|        "Scan argument types must not be references");
 5142|  1.04M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJxEEC2Ev:
 5347|   810k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5348|   810k|    {
 5349|   810k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJxEE12make_argptrsIJxEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   810k|    {
 5360|   810k|        return {detail::make_arg<
 5361|   810k|            kind, Context,
 5362|   810k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   810k|                                 typename Context::char_type>::value>(args)...};
 5364|   810k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE5ExvEEPvRT2_:
 5169|   810k|{
 5170|   810k|    return make_value<Context>(value).ref_value;
 5171|   810k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEExEEDaRT0_:
 5119|   872k|{
 5120|   872k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5123|   872k|                                  needs_context_tag>) {
 5124|   872k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   872k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|       |    }
 5126|       |    else {
 5127|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|       |            value, context_tag<Context>{}));
 5129|       |    }
 5130|   872k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERx:
 4958|   872k|    {                                                                        \
 4959|   872k|        return val;                                                          \
 4960|   872k|    }
_ZN3scn2v36detail15make_value_implIRxEEDaOT_:
 5088|  1.04M|{
 5089|  1.04M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  1.04M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  1.04M|    constexpr bool scannable_char =
 5093|  1.04M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  1.04M|    static_assert(scannable_char,
 5095|  1.04M|                  "Cannot scan an argument of an unsupported character "
 5096|  1.04M|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  1.04M|    constexpr bool scannable_const =
 5099|  1.04M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  1.04M|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  1.04M|    constexpr bool scannable_disabled =
 5103|  1.04M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  1.04M|    static_assert(scannable_disabled,
 5105|  1.04M|                  "Cannot scan an argument that has been disabled by "
 5106|  1.04M|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  1.04M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  1.04M|    static_assert(
 5110|  1.04M|        scannable,
 5111|  1.04M|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  1.04M|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  1.04M|    return arg_value{arg};
 5115|  1.04M|}
_ZN3scn2v36detail9arg_valueC2IxEERT_:
 4900|  1.04M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4901|  1.04M|    {
 4902|  1.04M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJxEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7974|   404k|    {
 7975|   404k|        return m_str;
 7976|   404k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJxEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5424|   810k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5425|   810k|    {
 5426|   810k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJxEE12arg_pointersEv:
 5378|   810k|    {
 5379|   810k|        return m_argptrs;
 5380|   810k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   404k|{
 8820|   404k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   404k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 41.7k, False: 363k]
  |  |  ------------------
  ------------------
 8821|  41.7k|        return unexpected(result.error());
 8822|  41.7k|    }
 8823|   363k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   363k|    static_cast<    \
  |  |  929|   363k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   363k|    static_cast<    \
  |  |  929|   363k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   404k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  43.7k|        : base(unexpect, std::move(e.error())),
 1474|  43.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  43.7k|    {
 1476|  43.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  43.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  43.7k|          m_has_value(false)
  446|  43.7k|    {
  447|  43.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   436k|    {
 1177|   436k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJxEEC2ES8_ONSt3__15tupleIJxEEE:
 5828|   392k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   392k|    static_cast<    \
  |  |  929|   392k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   392k|    static_cast<    \
  |  |  929|   392k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   392k|    {
 5830|   392k|    }
_ZN3scn2v36detail25scan_result_value_storageIJxEEC2EONSt3__15tupleIJxEEE:
 5614|   786k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|   786k|    static_cast<    \
  |  |  929|   786k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5615|   786k|    {
 5616|   786k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   392k|        : base(std::in_place, std::forward<U>(val)),
 1428|   392k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   392k|    {
 1430|   392k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|   392k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   392k|    {
  437|   392k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJxEE4argsEv:
 5373|   810k|    {
 5374|   810k|        return m_args;
 5375|   810k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJxEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7969|   404k|        : m_str(r.str)
 7970|   404k|    {
 7971|   404k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEcvbEv:
 1597|   436k|    {
 1598|   436k|        return has_value();
 1599|   436k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   828k|    {
  485|   828k|        return m_has_value;
  486|   828k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEptEv:
 1672|   392k|    {
 1673|   392k|        return &value();
 1674|   392k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|   392k|    {
 1627|   392k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   392k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   392k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   392k|        return this->get_value();
 1629|   392k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   392k|    {
  451|   392k|        return m_value;
  452|   392k|    }
_ZN3scn2v34scanIJxENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8933|   202k|{
 8934|   202k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   202k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   202k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   202k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   202k|    static_cast<    \
  |  |  929|   202k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   202k|    static_cast<    \
  |  |  929|   202k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   202k|}
_ZN3scn2v310scan_valueIxNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8972|  31.2k|{
 8973|  31.2k|    T value;
 8974|  31.2k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  31.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  31.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  31.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  31.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  31.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.08k, False: 29.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.08k|    }                                                  \
  |  |  |  | 3671|  31.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  29.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  29.1k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  29.1k|    static_cast<    \
  |  |  929|  29.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  29.1k|    static_cast<    \
  |  |  929|  29.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  31.2k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEExEENS0_14basic_scan_argIT_EERT0_:
 5154|  61.8k|{
 5155|  61.8k|    check_scan_arg_types<T>();
 5156|       |
 5157|  61.8k|    basic_scan_arg<Context> arg;
 5158|  61.8k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  61.8k|    arg.m_value = make_value<Context>(value);
 5160|  61.8k|    return arg;
 5161|  61.8k|}
_ZN3scn2v34scanIJyENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8866|   173k|{
 8867|   173k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   173k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   173k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   173k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   173k|    static_cast<    \
  |  |  929|   173k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   173k|    static_cast<    \
  |  |  929|   173k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   173k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJyEEEDav:
 5395|   695k|{
 5396|   695k|    detail::check_scan_arg_types<Args...>();
 5397|   695k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   695k|}
_ZN3scn2v36detail20check_scan_arg_typesIJyEEEvv:
 5134|   925k|{
 5135|   925k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|   925k|                  "Scan argument types must be default constructible");
 5137|   925k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|   925k|                  "Scan argument types must be Destructible");
 5139|   925k|    static_assert(
 5140|   925k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|   925k|        "Scan argument types must not be references");
 5142|   925k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJyEEC2Ev:
 5347|   695k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5348|   695k|    {
 5349|   695k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJyEE12make_argptrsIJyEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   695k|    {
 5360|   695k|        return {detail::make_arg<
 5361|   695k|            kind, Context,
 5362|   695k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   695k|                                 typename Context::char_type>::value>(args)...};
 5364|   695k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE10EyvEEPvRT2_:
 5169|   695k|{
 5170|   695k|    return make_value<Context>(value).ref_value;
 5171|   695k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEyEEDaRT0_:
 5119|   748k|{
 5120|   748k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5123|   748k|                                  needs_context_tag>) {
 5124|   748k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   748k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|       |    }
 5126|       |    else {
 5127|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|       |            value, context_tag<Context>{}));
 5129|       |    }
 5130|   748k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERy:
 4958|   748k|    {                                                                        \
 4959|   748k|        return val;                                                          \
 4960|   748k|    }
_ZN3scn2v36detail15make_value_implIRyEEDaOT_:
 5088|   925k|{
 5089|   925k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|   925k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|   925k|    constexpr bool scannable_char =
 5093|   925k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|   925k|    static_assert(scannable_char,
 5095|   925k|                  "Cannot scan an argument of an unsupported character "
 5096|   925k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|   925k|    constexpr bool scannable_const =
 5099|   925k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|   925k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|   925k|    constexpr bool scannable_disabled =
 5103|   925k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|   925k|    static_assert(scannable_disabled,
 5105|   925k|                  "Cannot scan an argument that has been disabled by "
 5106|   925k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|   925k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|   925k|    static_assert(
 5110|   925k|        scannable,
 5111|   925k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|   925k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|   925k|    return arg_value{arg};
 5115|   925k|}
_ZN3scn2v36detail9arg_valueC2IyEERT_:
 4900|   925k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4901|   925k|    {
 4902|   925k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJyEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7974|   347k|    {
 7975|   347k|        return m_str;
 7976|   347k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJyEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5424|   695k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5425|   695k|    {
 5426|   695k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJyEE12arg_pointersEv:
 5378|   695k|    {
 5379|   695k|        return m_argptrs;
 5380|   695k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   347k|{
 8820|   347k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   347k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 41.7k, False: 305k]
  |  |  ------------------
  ------------------
 8821|  41.7k|        return unexpected(result.error());
 8822|  41.7k|    }
 8823|   305k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   305k|    static_cast<    \
  |  |  929|   305k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   305k|    static_cast<    \
  |  |  929|   305k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   347k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  43.7k|        : base(unexpect, std::move(e.error())),
 1474|  43.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  43.7k|    {
 1476|  43.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  43.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  43.7k|          m_has_value(false)
  446|  43.7k|    {
  447|  43.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   373k|    {
 1177|   373k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJyEEC2ES8_ONSt3__15tupleIJyEEE:
 5828|   329k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   329k|    static_cast<    \
  |  |  929|   329k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   329k|    static_cast<    \
  |  |  929|   329k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   329k|    {
 5830|   329k|    }
_ZN3scn2v36detail25scan_result_value_storageIJyEEC2EONSt3__15tupleIJyEEE:
 5614|   662k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|   662k|    static_cast<    \
  |  |  929|   662k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5615|   662k|    {
 5616|   662k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   329k|        : base(std::in_place, std::forward<U>(val)),
 1428|   329k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   329k|    {
 1430|   329k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|   329k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   329k|    {
  437|   329k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJyEE4argsEv:
 5373|   695k|    {
 5374|   695k|        return m_args;
 5375|   695k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJyEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7969|   347k|        : m_str(r.str)
 7970|   347k|    {
 7971|   347k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEcvbEv:
 1597|   373k|    {
 1598|   373k|        return has_value();
 1599|   373k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   703k|    {
  485|   703k|        return m_has_value;
  486|   703k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEptEv:
 1672|   329k|    {
 1673|   329k|        return &value();
 1674|   329k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|   329k|    {
 1627|   329k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   329k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   329k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   329k|        return this->get_value();
 1629|   329k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   329k|    {
  451|   329k|        return m_value;
  452|   329k|    }
_ZN3scn2v34scanIJyENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8933|   173k|{
 8934|   173k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   173k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   173k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   173k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   173k|    static_cast<    \
  |  |  929|   173k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   173k|    static_cast<    \
  |  |  929|   173k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   173k|}
_ZN3scn2v310scan_valueIyNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8972|  26.5k|{
 8973|  26.5k|    T value;
 8974|  26.5k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  26.5k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  26.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  26.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  26.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  26.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.08k, False: 24.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.08k|    }                                                  \
  |  |  |  | 3671|  26.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  24.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  24.4k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  24.4k|    static_cast<    \
  |  |  929|  24.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  24.4k|    static_cast<    \
  |  |  929|  24.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  26.5k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEyEENS0_14basic_scan_argIT_EERT0_:
 5154|  53.0k|{
 5155|  53.0k|    check_scan_arg_types<T>();
 5156|       |
 5157|  53.0k|    basic_scan_arg<Context> arg;
 5158|  53.0k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  53.0k|    arg.m_value = make_value<Context>(value);
 5160|  53.0k|    return arg;
 5161|  53.0k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   262k|    {
 2724|   262k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   262k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   262k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   262k|    {
 2705|   262k|        return decay_copy(t.begin());
 2706|   262k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 1948|  49.1M|{
 1949|  49.1M|    return SCN_FWD(t);
  ------------------
  |  |  930|  49.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  49.1M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  4.56M|    {
 2781|  4.56M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  4.56M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  4.56M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  4.56M|    {
 2763|  4.56M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  4.56M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  4.56M|    }
_ZN3scn2v34scanIJaENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8866|   157k|{
 8867|   157k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   157k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   157k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   157k|    static_cast<    \
  |  |  929|   157k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   157k|    static_cast<    \
  |  |  929|   157k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   157k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8653|  1.05M|{
 8654|  1.05M|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8655|  1.05M|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8590|  1.05M|{
 8591|  1.05M|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|  1.05M|    auto result = vscan_impl(buffer, format, args);
 8594|  1.05M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 125k, False: 934k]
  |  |  ------------------
  ------------------
 8595|   125k|        return unexpected(result.error());
 8596|   125k|    }
 8597|   934k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   934k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|  1.05M|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4719|  2.28M|{
 4720|  2.28M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|  2.28M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|  2.28M|                  "\n"
 4724|  2.28M|                  "Unsupported range type given as input to a scanning "
 4725|  2.28M|                  "function.\n"
 4726|  2.28M|                  "A range needs to have a character type (value type) "
 4727|  2.28M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|  2.28M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|  2.28M|                  "to be included.\n"
 4730|  2.28M|                  "See the scnlib documentation for more details.");
 4731|  2.28M|    static_assert(
 4732|  2.28M|        !std::is_same_v<T, custom_char_traits>,
 4733|  2.28M|        "\n"
 4734|  2.28M|        "Unsupported range type given as input to a scanning "
 4735|  2.28M|        "function.\n"
 4736|  2.28M|        "String types (std::basic_string, and std::basic_string_view) "
 4737|  2.28M|        "need to use std::char_traits. Strings with custom Traits are "
 4738|  2.28M|        "not supported.");
 4739|  2.28M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|  2.28M|                  "\n"
 4741|  2.28M|                  "Unsupported range type given as input to a scanning "
 4742|  2.28M|                  "function.\n"
 4743|  2.28M|                  "file_marker_found cannot be used as an "
 4744|  2.28M|                  "source range type to scn::scan.\n"
 4745|  2.28M|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|  2.28M|                  "and do not provide an explicit source range, "
 4747|  2.28M|                  "or use scn::scan with a FILE* directly.");
 4748|  2.28M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|  2.28M|                  "\n"
 4750|  2.28M|                  "Unsupported range type given as input to a scanning "
 4751|  2.28M|                  "function.\n"
 4752|  2.28M|                  "In order to be scannable, a range needs to satisfy "
 4753|  2.28M|                  "`forward_range`. `input_range` is not sufficient.");
 4754|  2.28M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|  2.28M|                  "\n"
 4756|  2.28M|                  "Unsupported range type given as input to a scanning "
 4757|  2.28M|                  "function.\n"
 4758|  2.28M|                  "A range needs to model forward_range and have a valid "
 4759|  2.28M|                  "character type (char or wchar_t) to be scannable.\n"
 4760|  2.28M|                  "Examples of scannable ranges are std::string, "
 4761|  2.28M|                  "std::string_view, "
 4762|  2.28M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|  2.28M|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|  2.28M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|  2.28M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4689|  2.28M|{
 4690|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 4691|       |        return file_marker_found{};
 4692|       |    }
 4693|       |    else if constexpr (!ranges::forward_range<Range>) {
 4694|       |        if constexpr (ranges::range<Range>) {
 4695|       |            return insufficient_range{};
 4696|       |        }
 4697|       |        else {
 4698|       |            return invalid_input_range{};
 4699|       |        }
 4700|       |    }
 4701|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 4702|       |        return invalid_char_type{};
 4703|       |    }
 4704|  2.28M|    else {
 4705|  2.28M|        return make_forward_scan_buffer(r);
 4706|  2.28M|    }
 4707|  2.28M|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4523|  2.28M|{
 4524|  2.28M|    return basic_scan_forward_buffer_impl(range);
 4525|  2.28M|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4408|  2.28M|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  930|  2.28M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4409|  2.28M|          m_cursor(ranges::begin(*m_range))
 4410|  2.28M|    {
 4411|  2.28M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4380|  2.28M|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4381|  2.28M|    {
 4382|  2.28M|    }
_ZN3scn2v36detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4149|  2.28M|        : m_current_view(sv), m_is_contiguous(false)
 4150|  2.28M|    {
 4151|  2.28M|    }
_ZN3scn2v36detail17basic_scan_bufferIcED2Ev:
 4065|  2.28M|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  4.30M|    {
 2724|  4.30M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  4.30M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  4.30M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  4.30M|    {
 2705|  4.30M|        return decay_copy(t.begin());
 2706|  4.30M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3329|  6.31M|    {
 3330|  6.31M|        return m_iterator;
 3331|  6.31M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4414|  12.1M|    {
 4415|  12.1M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4415:13): [True: 295k, False: 11.8M]
  ------------------
 4416|   295k|            return false;
 4417|   295k|        }
 4418|  11.8M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4419|  11.8M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  11.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4420|  11.8M|        }
 4421|  11.8M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4421:13): [True: 9.70M, False: 2.18M]
  ------------------
 4422|  9.70M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4423|  9.70M|                                          this->m_current_view.begin(),
 4424|  9.70M|                                          this->m_current_view.end());
 4425|  9.70M|        }
 4426|  11.8M|        m_latest = *m_cursor;
 4427|  11.8M|        ++m_cursor;
 4428|  11.8M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4429|  11.8M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4430|  11.8M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  11.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4431|  11.8M|        }
 4432|  11.8M|        return true;
 4433|  12.1M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  35.9M|    {
 2781|  35.9M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  35.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  35.9M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  35.9M|    {
 2763|  35.9M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  35.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  35.9M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3333|  38.0M|    {
 3334|  38.0M|        return m_sentinel;
 3335|  38.0M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE4syncEl:
 4070|  2.28M|    {
 4071|  2.28M|        SCN_UNUSED(position);
  ------------------
  |  |  909|  2.28M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4072|  2.28M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1473|   262k|        : base(unexpect, std::move(e.error())),
 1474|   262k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   262k|    {
 1476|   262k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  444|   262k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   262k|          m_has_value(false)
  446|   262k|    {
  447|   262k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.28M|    {
 1177|  2.28M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5922|  2.01M|{
 5923|       |    if constexpr (ranges::random_access_iterator<
 5924|  2.01M|                      ranges::iterator_t<SourceRange>>) {
 5925|  2.01M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|       |    }
 5927|       |    else {
 5928|       |        auto it = ranges::begin(source);
 5929|       |        while (n > 0) {
 5930|       |            --n;
 5931|       |            ++it;
 5932|       |        }
 5933|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|       |    }
 5935|  2.01M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  2.01M|    {
 2724|  2.01M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  2.01M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  2.01M|    {
 2705|  2.01M|        return decay_copy(t.begin());
 2706|  2.01M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 5909|  2.01M|{
 5910|  2.01M|    return ranges::end(source);
 5911|  2.01M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  2.01M|    {
 2781|  2.01M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  2.01M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  2.01M|    {
 2763|  2.01M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  2.01M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1427|  2.01M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.01M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.01M|    {
 1430|  2.01M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  435|  2.01M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.01M|    {
  437|  2.01M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJaEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7974|   315k|    {
 7975|   315k|        return m_str;
 7976|   315k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   315k|{
 8820|   315k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   315k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 41.7k, False: 273k]
  |  |  ------------------
  ------------------
 8821|  41.7k|        return unexpected(result.error());
 8822|  41.7k|    }
 8823|   273k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   273k|    static_cast<    \
  |  |  929|   273k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   273k|    static_cast<    \
  |  |  929|   273k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   315k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1597|  2.28M|    {
 1598|  2.28M|        return has_value();
 1599|  2.28M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  4.56M|    {
  485|  4.56M|        return m_has_value;
  486|  4.56M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1603|   262k|    {
 1604|   262k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   262k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   262k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   262k|        return this->get_unexpected().error();
 1606|   262k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   262k|    {
  468|   262k|        return m_unexpected;
  469|   262k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  43.7k|        : base(unexpect, std::move(e.error())),
 1474|  43.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  43.7k|    {
 1476|  43.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  43.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  43.7k|          m_has_value(false)
  446|  43.7k|    {
  447|  43.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   342k|    {
 1177|   342k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1652|  1.86M|    {
 1653|  1.86M|        return value();
 1654|  1.86M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1626|  2.01M|    {
 1627|  2.01M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.01M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.01M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.01M|        return this->get_value();
 1629|  2.01M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.01M|    {
  451|  2.01M|        return m_value;
  452|  2.01M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJaEEC2ESE_ONS6_5tupleIJaEEE:
 5828|   298k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   298k|    static_cast<    \
  |  |  929|   298k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   298k|    static_cast<    \
  |  |  929|   298k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   298k|    {
 5830|   298k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2EOSF_:
 5679|  2.01M|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|  2.01M|    static_cast<    \
  |  |  929|  2.01M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5680|  2.01M|    {
 5681|  2.01M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|   298k|        : base(std::in_place, std::forward<U>(val)),
 1428|   298k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   298k|    {
 1430|   298k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|   298k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   298k|    {
  437|   298k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3314|  4.30M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  4.30M|    static_cast<    \
  |  |  929|  4.30M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  4.30M|    static_cast<    \
  |  |  929|  4.30M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3315|  4.30M|    {
 3316|  4.30M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJaEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7969|   315k|        : m_str(r.str)
 7970|   315k|    {
 7971|   315k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEcvbEv:
 1597|   342k|    {
 1598|   342k|        return has_value();
 1599|   342k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   640k|    {
  485|   640k|        return m_has_value;
  486|   640k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEptEv:
 1672|   298k|    {
 1673|   298k|        return &value();
 1674|   298k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|   298k|    {
 1627|   298k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   298k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   298k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   298k|        return this->get_value();
 1629|   298k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   298k|    {
  451|   298k|        return m_value;
  452|   298k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 5697|  2.01M|    {
 5698|  2.01M|        return ranges::begin(m_range);
 5699|  2.01M|    }
_ZN3scn2v34scanIJaENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8933|   157k|{
 8934|   157k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   157k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   157k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   157k|    static_cast<    \
  |  |  929|   157k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   157k|    static_cast<    \
  |  |  929|   157k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   157k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8671|  1.05M|{
 8672|  1.05M|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8673|  1.05M|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8606|  1.05M|{
 8607|  1.05M|#if !SCN_DISABLE_LOCALE
 8608|  1.05M|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|  1.05M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|  1.05M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|  1.05M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|  1.05M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 125k, False: 934k]
  |  |  ------------------
  ------------------
 8615|   125k|        return unexpected(result.error());
 8616|   125k|    }
 8617|   934k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   934k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|  1.05M|}
_ZN3scn2v310scan_valueIaNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8972|  26.4k|{
 8973|  26.4k|    T value;
 8974|  26.4k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  26.4k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  26.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  26.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  26.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  26.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.08k, False: 24.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.08k|    }                                                  \
  |  |  |  | 3671|  26.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  24.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  24.3k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  24.3k|    static_cast<    \
  |  |  929|  24.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  24.3k|    static_cast<    \
  |  |  929|  24.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  26.4k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8684|   163k|{
 8685|   163k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|   163k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8686|   163k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|   163k|{
 8631|   163k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|   163k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|   163k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   163k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.5k, False: 150k]
  |  |  ------------------
  ------------------
 8635|  12.5k|        return unexpected(result.error());
 8636|  12.5k|    }
 8637|   150k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   150k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|   163k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSJ_v:
 1662|   150k|    {
 1663|   150k|        return std::move(value());
 1664|   150k|    }
_ZN3scn2v34scanIJhENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8866|   152k|{
 8867|   152k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   152k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   152k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   152k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   152k|    static_cast<    \
  |  |  929|   152k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   152k|    static_cast<    \
  |  |  929|   152k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   152k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJhEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7974|   305k|    {
 7975|   305k|        return m_str;
 7976|   305k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   305k|{
 8820|   305k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   305k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 41.7k, False: 263k]
  |  |  ------------------
  ------------------
 8821|  41.7k|        return unexpected(result.error());
 8822|  41.7k|    }
 8823|   263k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   263k|    static_cast<    \
  |  |  929|   263k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   263k|    static_cast<    \
  |  |  929|   263k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   305k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  43.7k|        : base(unexpect, std::move(e.error())),
 1474|  43.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  43.7k|    {
 1476|  43.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  43.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  43.7k|          m_has_value(false)
  446|  43.7k|    {
  447|  43.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   328k|    {
 1177|   328k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJhEEC2ESE_ONS6_5tupleIJhEEE:
 5828|   284k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   284k|    static_cast<    \
  |  |  929|   284k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   284k|    static_cast<    \
  |  |  929|   284k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   284k|    {
 5830|   284k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|   284k|        : base(std::in_place, std::forward<U>(val)),
 1428|   284k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   284k|    {
 1430|   284k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|   284k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   284k|    {
  437|   284k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJhEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7969|   305k|        : m_str(r.str)
 7970|   305k|    {
 7971|   305k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEcvbEv:
 1597|   328k|    {
 1598|   328k|        return has_value();
 1599|   328k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   613k|    {
  485|   613k|        return m_has_value;
  486|   613k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEptEv:
 1672|   284k|    {
 1673|   284k|        return &value();
 1674|   284k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|   284k|    {
 1627|   284k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   284k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   284k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   284k|        return this->get_value();
 1629|   284k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   284k|    {
  451|   284k|        return m_value;
  452|   284k|    }
_ZN3scn2v34scanIJhENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8933|   152k|{
 8934|   152k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   152k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   152k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   152k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   152k|    static_cast<    \
  |  |  929|   152k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   152k|    static_cast<    \
  |  |  929|   152k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   152k|}
_ZN3scn2v310scan_valueIhNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8972|  23.4k|{
 8973|  23.4k|    T value;
 8974|  23.4k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  23.4k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  23.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  23.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  23.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  23.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.08k, False: 21.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.08k|    }                                                  \
  |  |  |  | 3671|  23.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  21.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  21.3k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  21.3k|    static_cast<    \
  |  |  929|  21.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  21.3k|    static_cast<    \
  |  |  929|  21.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  23.4k|}
_ZN3scn2v34scanIJiENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8866|   199k|{
 8867|   199k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   199k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   199k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   199k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   199k|    static_cast<    \
  |  |  929|   199k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   199k|    static_cast<    \
  |  |  929|   199k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   199k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJiEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7974|   398k|    {
 7975|   398k|        return m_str;
 7976|   398k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   398k|{
 8820|   398k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   398k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 41.7k, False: 356k]
  |  |  ------------------
  ------------------
 8821|  41.7k|        return unexpected(result.error());
 8822|  41.7k|    }
 8823|   356k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   356k|    static_cast<    \
  |  |  929|   356k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   356k|    static_cast<    \
  |  |  929|   356k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   398k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  43.7k|        : base(unexpect, std::move(e.error())),
 1474|  43.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  43.7k|    {
 1476|  43.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  43.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  43.7k|          m_has_value(false)
  446|  43.7k|    {
  447|  43.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   428k|    {
 1177|   428k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJiEEC2ESE_ONS6_5tupleIJiEEE:
 5828|   384k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   384k|    static_cast<    \
  |  |  929|   384k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   384k|    static_cast<    \
  |  |  929|   384k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   384k|    {
 5830|   384k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|   384k|        : base(std::in_place, std::forward<U>(val)),
 1428|   384k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   384k|    {
 1430|   384k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|   384k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   384k|    {
  437|   384k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7969|   398k|        : m_str(r.str)
 7970|   398k|    {
 7971|   398k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEcvbEv:
 1597|   428k|    {
 1598|   428k|        return has_value();
 1599|   428k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   812k|    {
  485|   812k|        return m_has_value;
  486|   812k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEptEv:
 1672|   384k|    {
 1673|   384k|        return &value();
 1674|   384k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|   384k|    {
 1627|   384k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   384k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   384k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   384k|        return this->get_value();
 1629|   384k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   384k|    {
  451|   384k|        return m_value;
  452|   384k|    }
_ZN3scn2v34scanIJiENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8933|   199k|{
 8934|   199k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   199k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   199k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   199k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   199k|    static_cast<    \
  |  |  929|   199k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   199k|    static_cast<    \
  |  |  929|   199k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   199k|}
_ZN3scn2v310scan_valueIiNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8972|  30.0k|{
 8973|  30.0k|    T value;
 8974|  30.0k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  30.0k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  30.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  30.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  30.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  30.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.08k, False: 27.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.08k|    }                                                  \
  |  |  |  | 3671|  30.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  27.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  27.9k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  27.9k|    static_cast<    \
  |  |  929|  27.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  27.9k|    static_cast<    \
  |  |  929|  27.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  30.0k|}
_ZN3scn2v34scanIJjENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8866|   172k|{
 8867|   172k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   172k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   172k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   172k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   172k|    static_cast<    \
  |  |  929|   172k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   172k|    static_cast<    \
  |  |  929|   172k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   172k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJjEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7974|   344k|    {
 7975|   344k|        return m_str;
 7976|   344k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   344k|{
 8820|   344k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   344k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 41.7k, False: 303k]
  |  |  ------------------
  ------------------
 8821|  41.7k|        return unexpected(result.error());
 8822|  41.7k|    }
 8823|   303k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   303k|    static_cast<    \
  |  |  929|   303k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   303k|    static_cast<    \
  |  |  929|   303k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   344k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  43.7k|        : base(unexpect, std::move(e.error())),
 1474|  43.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  43.7k|    {
 1476|  43.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  43.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  43.7k|          m_has_value(false)
  446|  43.7k|    {
  447|  43.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   371k|    {
 1177|   371k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJjEEC2ESE_ONS6_5tupleIJjEEE:
 5828|   327k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   327k|    static_cast<    \
  |  |  929|   327k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   327k|    static_cast<    \
  |  |  929|   327k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   327k|    {
 5830|   327k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|   327k|        : base(std::in_place, std::forward<U>(val)),
 1428|   327k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   327k|    {
 1430|   327k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|   327k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   327k|    {
  437|   327k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7969|   344k|        : m_str(r.str)
 7970|   344k|    {
 7971|   344k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEcvbEv:
 1597|   371k|    {
 1598|   371k|        return has_value();
 1599|   371k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   698k|    {
  485|   698k|        return m_has_value;
  486|   698k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEptEv:
 1672|   327k|    {
 1673|   327k|        return &value();
 1674|   327k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|   327k|    {
 1627|   327k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   327k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   327k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   327k|        return this->get_value();
 1629|   327k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   327k|    {
  451|   327k|        return m_value;
  452|   327k|    }
_ZN3scn2v34scanIJjENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8933|   172k|{
 8934|   172k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   172k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   172k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   172k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   172k|    static_cast<    \
  |  |  929|   172k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   172k|    static_cast<    \
  |  |  929|   172k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   172k|}
_ZN3scn2v310scan_valueIjNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8972|  26.1k|{
 8973|  26.1k|    T value;
 8974|  26.1k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  26.1k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  26.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  26.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  26.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  26.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.08k, False: 24.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.08k|    }                                                  \
  |  |  |  | 3671|  26.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  24.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  24.0k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  24.0k|    static_cast<    \
  |  |  929|  24.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  24.0k|    static_cast<    \
  |  |  929|  24.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  26.1k|}
_ZN3scn2v34scanIJxENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8866|   202k|{
 8867|   202k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   202k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   202k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   202k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   202k|    static_cast<    \
  |  |  929|   202k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   202k|    static_cast<    \
  |  |  929|   202k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   202k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJxEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7974|   405k|    {
 7975|   405k|        return m_str;
 7976|   405k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   405k|{
 8820|   405k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   405k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 41.7k, False: 363k]
  |  |  ------------------
  ------------------
 8821|  41.7k|        return unexpected(result.error());
 8822|  41.7k|    }
 8823|   363k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   363k|    static_cast<    \
  |  |  929|   363k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   363k|    static_cast<    \
  |  |  929|   363k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   405k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  43.7k|        : base(unexpect, std::move(e.error())),
 1474|  43.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  43.7k|    {
 1476|  43.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  43.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  43.7k|          m_has_value(false)
  446|  43.7k|    {
  447|  43.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   436k|    {
 1177|   436k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJxEEC2ESE_ONS6_5tupleIJxEEE:
 5828|   392k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   392k|    static_cast<    \
  |  |  929|   392k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   392k|    static_cast<    \
  |  |  929|   392k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   392k|    {
 5830|   392k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|   392k|        : base(std::in_place, std::forward<U>(val)),
 1428|   392k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   392k|    {
 1430|   392k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|   392k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   392k|    {
  437|   392k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJxEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7969|   405k|        : m_str(r.str)
 7970|   405k|    {
 7971|   405k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEcvbEv:
 1597|   436k|    {
 1598|   436k|        return has_value();
 1599|   436k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   828k|    {
  485|   828k|        return m_has_value;
  486|   828k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEptEv:
 1672|   392k|    {
 1673|   392k|        return &value();
 1674|   392k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|   392k|    {
 1627|   392k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   392k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   392k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   392k|        return this->get_value();
 1629|   392k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   392k|    {
  451|   392k|        return m_value;
  452|   392k|    }
_ZN3scn2v34scanIJxENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8933|   202k|{
 8934|   202k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   202k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   202k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   202k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   202k|    static_cast<    \
  |  |  929|   202k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   202k|    static_cast<    \
  |  |  929|   202k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   202k|}
_ZN3scn2v310scan_valueIxNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8972|  30.6k|{
 8973|  30.6k|    T value;
 8974|  30.6k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  30.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  30.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  30.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  30.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  30.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.08k, False: 28.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.08k|    }                                                  \
  |  |  |  | 3671|  30.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  28.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  28.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  28.5k|    static_cast<    \
  |  |  929|  28.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  28.5k|    static_cast<    \
  |  |  929|  28.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  30.6k|}
_ZN3scn2v34scanIJyENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8866|   174k|{
 8867|   174k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   174k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   174k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   174k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   174k|    static_cast<    \
  |  |  929|   174k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   174k|    static_cast<    \
  |  |  929|   174k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   174k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJyEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7974|   348k|    {
 7975|   348k|        return m_str;
 7976|   348k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   348k|{
 8820|   348k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   348k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 41.7k, False: 307k]
  |  |  ------------------
  ------------------
 8821|  41.7k|        return unexpected(result.error());
 8822|  41.7k|    }
 8823|   307k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   307k|    static_cast<    \
  |  |  929|   307k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   307k|    static_cast<    \
  |  |  929|   307k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   348k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  43.7k|        : base(unexpect, std::move(e.error())),
 1474|  43.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  43.7k|    {
 1476|  43.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  43.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  43.7k|          m_has_value(false)
  446|  43.7k|    {
  447|  43.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   375k|    {
 1177|   375k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJyEEC2ESE_ONS6_5tupleIJyEEE:
 5828|   331k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   331k|    static_cast<    \
  |  |  929|   331k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   331k|    static_cast<    \
  |  |  929|   331k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   331k|    {
 5830|   331k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|   331k|        : base(std::in_place, std::forward<U>(val)),
 1428|   331k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   331k|    {
 1430|   331k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|   331k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   331k|    {
  437|   331k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJyEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7969|   348k|        : m_str(r.str)
 7970|   348k|    {
 7971|   348k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEcvbEv:
 1597|   375k|    {
 1598|   375k|        return has_value();
 1599|   375k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   706k|    {
  485|   706k|        return m_has_value;
  486|   706k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEptEv:
 1672|   331k|    {
 1673|   331k|        return &value();
 1674|   331k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|   331k|    {
 1627|   331k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   331k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   331k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   331k|        return this->get_value();
 1629|   331k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   331k|    {
  451|   331k|        return m_value;
  452|   331k|    }
_ZN3scn2v34scanIJyENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8933|   174k|{
 8934|   174k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   174k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   174k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   174k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   174k|    static_cast<    \
  |  |  929|   174k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   174k|    static_cast<    \
  |  |  929|   174k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   174k|}
_ZN3scn2v310scan_valueIyNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8972|  26.5k|{
 8973|  26.5k|    T value;
 8974|  26.5k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  26.5k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  26.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  26.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  26.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  26.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.08k, False: 24.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.08k|    }                                                  \
  |  |  |  | 3671|  26.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  24.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  24.4k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  24.4k|    static_cast<    \
  |  |  929|  24.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  24.4k|    static_cast<    \
  |  |  929|  24.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  26.5k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   529k|    {
 2724|   529k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   529k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   529k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   529k|    {
 2705|   529k|        return decay_copy(t.begin());
 2706|   529k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1948|  2.45M|{
 1949|  2.45M|    return SCN_FWD(t);
  ------------------
  |  |  930|  2.45M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  2.45M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.06M|    {
 2781|  1.06M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.06M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.06M|    {
 2763|  1.06M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.06M|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJaEEEDav:
 5395|   167k|{
 5396|   167k|    detail::check_scan_arg_types<Args...>();
 5397|   167k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   167k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJaEEC2Ev:
 5347|   167k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5348|   167k|    {
 5349|   167k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJaEE12make_argptrsIJaEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   167k|    {
 5360|   167k|        return {detail::make_arg<
 5361|   167k|            kind, Context,
 5362|   167k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   167k|                                 typename Context::char_type>::value>(args)...};
 5364|   167k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE1EavEEPvRT2_:
 5169|   167k|{
 5170|   167k|    return make_value<Context>(value).ref_value;
 5171|   167k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEaEEDaRT0_:
 5119|   176k|{
 5120|   176k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5123|   176k|                                  needs_context_tag>) {
 5124|   176k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   176k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|       |    }
 5126|       |    else {
 5127|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|       |            value, context_tag<Context>{}));
 5129|       |    }
 5130|   176k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERa:
 4958|   176k|    {                                                                        \
 4959|   176k|        return val;                                                          \
 4960|   176k|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8590|   252k|{
 8591|   252k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   252k|    auto result = vscan_impl(buffer, format, args);
 8594|   252k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   252k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 250k, False: 1.92k]
  |  |  ------------------
  ------------------
 8595|   250k|        return unexpected(result.error());
 8596|   250k|    }
 8597|  1.92k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   252k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 4719|   529k|{
 4720|   529k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   529k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   529k|                  "\n"
 4724|   529k|                  "Unsupported range type given as input to a scanning "
 4725|   529k|                  "function.\n"
 4726|   529k|                  "A range needs to have a character type (value type) "
 4727|   529k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   529k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   529k|                  "to be included.\n"
 4730|   529k|                  "See the scnlib documentation for more details.");
 4731|   529k|    static_assert(
 4732|   529k|        !std::is_same_v<T, custom_char_traits>,
 4733|   529k|        "\n"
 4734|   529k|        "Unsupported range type given as input to a scanning "
 4735|   529k|        "function.\n"
 4736|   529k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   529k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   529k|        "not supported.");
 4739|   529k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   529k|                  "\n"
 4741|   529k|                  "Unsupported range type given as input to a scanning "
 4742|   529k|                  "function.\n"
 4743|   529k|                  "file_marker_found cannot be used as an "
 4744|   529k|                  "source range type to scn::scan.\n"
 4745|   529k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   529k|                  "and do not provide an explicit source range, "
 4747|   529k|                  "or use scn::scan with a FILE* directly.");
 4748|   529k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   529k|                  "\n"
 4750|   529k|                  "Unsupported range type given as input to a scanning "
 4751|   529k|                  "function.\n"
 4752|   529k|                  "In order to be scannable, a range needs to satisfy "
 4753|   529k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   529k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   529k|                  "\n"
 4756|   529k|                  "Unsupported range type given as input to a scanning "
 4757|   529k|                  "function.\n"
 4758|   529k|                  "A range needs to model forward_range and have a valid "
 4759|   529k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   529k|                  "Examples of scannable ranges are std::string, "
 4761|   529k|                  "std::string_view, "
 4762|   529k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   529k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   529k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   529k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 4658|   529k|{
 4659|   529k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 4660|   529k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4661|       |    }
 4662|       |    else {
 4663|       |        return invalid_char_type{};
 4664|       |    }
 4665|   529k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   529k|    {
 2855|   529k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   529k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   529k|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   529k|    {
 2836|   529k|        return t.data();
 2837|   529k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3230|   529k|    {
 3231|   529k|        return ranges::empty(derived())
  ------------------
  |  Branch (3231:16): [True: 1.16k, False: 528k]
  ------------------
 3232|   529k|                   ? nullptr
 3233|   529k|                   : std::addressof(*ranges::begin(derived()));
 3234|   529k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|   529k|    {
 3005|   529k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   529k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|   529k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|   529k|    {
 2978|   529k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   529k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|   529k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5emptyEv:
 3338|   855k|    {
 3339|   855k|        return m_iterator == m_sentinel;
 3340|   855k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3184|  1.05M|    {
 3185|  1.05M|        return static_cast<const D&>(*this);
 3186|  1.05M|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   532k|    {
 2724|   532k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   532k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   532k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   532k|    {
 2705|   532k|        return decay_copy(t.begin());
 2706|   532k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3329|   109M|    {
 3330|   109M|        return m_iterator;
 3331|   109M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|   529k|    {
 2930|   529k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|   529k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|   529k|    {
 2896|   529k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   529k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|   529k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3345|  1.15M|    {
 3346|  1.15M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|  1.15M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|   525k|        : base(unexpect, std::move(e.error())),
 1474|   525k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   525k|    {
 1476|   525k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|   525k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   525k|          m_has_value(false)
  446|   525k|    {
  447|   525k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   529k|    {
 1177|   529k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5922|  4.16k|{
 5923|       |    if constexpr (ranges::random_access_iterator<
 5924|  4.16k|                      ranges::iterator_t<SourceRange>>) {
 5925|  4.16k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|       |    }
 5927|       |    else {
 5928|       |        auto it = ranges::begin(source);
 5929|       |        while (n > 0) {
 5930|       |            --n;
 5931|       |            ++it;
 5932|       |        }
 5933|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|       |    }
 5935|  4.16k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   329k|    {
 2724|   329k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   329k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   329k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   329k|    {
 2705|   329k|        return decay_copy(t.begin());
 2706|   329k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 5909|  4.16k|{
 5910|  4.16k|    return ranges::end(source);
 5911|  4.16k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  4.16k|    {
 2781|  4.16k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  4.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  4.16k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  4.16k|    {
 2763|  4.16k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  4.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  4.16k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3333|   107M|    {
 3334|   107M|        return m_sentinel;
 3335|   107M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|  4.16k|        : base(std::in_place, std::forward<U>(val)),
 1428|  4.16k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  4.16k|    {
 1430|  4.16k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  435|  4.16k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  4.16k|    {
  437|  4.16k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJaEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7974|  83.9k|    {
 7975|  83.9k|        return m_str;
 7976|  83.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJaEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5424|   167k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5425|   167k|    {
 5426|   167k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJaEE12arg_pointersEv:
 5378|   167k|    {
 5379|   167k|        return m_argptrs;
 5380|   167k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5476|  1.00M|        : m_desc(desc), m_builtin_values(data)
 5477|  1.00M|    {
 5478|  1.00M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  83.9k|{
 8820|  83.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  83.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 83.4k, False: 586]
  |  |  ------------------
  ------------------
 8821|  83.4k|        return unexpected(result.error());
 8822|  83.4k|    }
 8823|    586|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    586|    static_cast<    \
  |  |  929|    586|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    586|    static_cast<    \
  |  |  929|    586|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  83.9k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1597|   529k|    {
 1598|   529k|        return has_value();
 1599|   529k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.05M|    {
  485|  1.05M|        return m_has_value;
  486|  1.05M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1603|   525k|    {
 1604|   525k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   525k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   525k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   525k|        return this->get_unexpected().error();
 1606|   525k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   525k|    {
  468|   525k|        return m_unexpected;
  469|   525k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  87.5k|        : base(unexpect, std::move(e.error())),
 1474|  87.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  87.5k|    {
 1476|  87.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  87.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  87.5k|          m_has_value(false)
  446|  87.5k|    {
  447|  87.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  88.2k|    {
 1177|  88.2k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1652|  3.84k|    {
 1653|  3.84k|        return value();
 1654|  3.84k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|  4.16k|    {
 1627|  4.16k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.16k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.16k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.16k|        return this->get_value();
 1629|  4.16k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  4.16k|    {
  451|  4.16k|        return m_value;
  452|  4.16k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJaEEC2ES8_ONSt3__15tupleIJaEEE:
 5828|    634|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    634|    static_cast<    \
  |  |  929|    634|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    634|    static_cast<    \
  |  |  929|    634|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|    634|    {
 5830|    634|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5679|  4.16k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|  4.16k|    static_cast<    \
  |  |  929|  4.16k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5680|  4.16k|    {
 5681|  4.16k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|    634|        : base(std::in_place, std::forward<U>(val)),
 1428|    634|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    634|    {
 1430|    634|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|    634|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    634|    {
  437|    634|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJaEE4argsEv:
 5373|   167k|    {
 5374|   167k|        return m_args;
 5375|   167k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3314|  3.58M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  3.58M|    static_cast<    \
  |  |  929|  3.58M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  3.58M|    static_cast<    \
  |  |  929|  3.58M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3315|  3.58M|    {
 3316|  3.58M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7695|  1.00M|{
 7696|  1.00M|    return s;
 7697|  1.00M|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7667|  1.00M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJaEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7969|  83.9k|        : m_str(r.str)
 7970|  83.9k|    {
 7971|  83.9k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEcvbEv:
 1597|  88.2k|    {
 1598|  88.2k|        return has_value();
 1599|  88.2k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  88.8k|    {
  485|  88.8k|        return m_has_value;
  486|  88.8k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEptEv:
 1672|    634|    {
 1673|    634|        return &value();
 1674|    634|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|    634|    {
 1627|    634|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    634|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    634|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    634|        return this->get_value();
 1629|    634|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    634|    {
  451|    634|        return m_value;
  452|    634|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 5697|  4.16k|    {
 5698|  4.16k|        return ranges::begin(m_range);
 5699|  4.16k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8606|   252k|{
 8607|   252k|#if !SCN_DISABLE_LOCALE
 8608|   252k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   252k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   252k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   252k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   252k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   252k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 250k, False: 1.92k]
  |  |  ------------------
  ------------------
 8615|   250k|        return unexpected(result.error());
 8616|   250k|    }
 8617|  1.92k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   252k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEaEENS0_14basic_scan_argIT_EERT0_:
 5154|  8.43k|{
 5155|  8.43k|    check_scan_arg_types<T>();
 5156|       |
 5157|  8.43k|    basic_scan_arg<Context> arg;
 5158|  8.43k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  8.43k|    arg.m_value = make_value<Context>(value);
 5160|  8.43k|    return arg;
 5161|  8.43k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5240|  1.05M|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|  25.3k|{
 8631|  25.3k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|  25.3k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|  25.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  25.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.0k, False: 320]
  |  |  ------------------
  ------------------
 8635|  25.0k|        return unexpected(result.error());
 8636|  25.0k|    }
 8637|    320|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|    320|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|  25.3k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|    320|    {
 1663|    320|        return std::move(value());
 1664|    320|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJhEEEDav:
 5395|   167k|{
 5396|   167k|    detail::check_scan_arg_types<Args...>();
 5397|   167k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   167k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJhEEC2Ev:
 5347|   167k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5348|   167k|    {
 5349|   167k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJhEE12make_argptrsIJhEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   167k|    {
 5360|   167k|        return {detail::make_arg<
 5361|   167k|            kind, Context,
 5362|   167k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   167k|                                 typename Context::char_type>::value>(args)...};
 5364|   167k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE6EhvEEPvRT2_:
 5169|   167k|{
 5170|   167k|    return make_value<Context>(value).ref_value;
 5171|   167k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEhEEDaRT0_:
 5119|   176k|{
 5120|   176k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5123|   176k|                                  needs_context_tag>) {
 5124|   176k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   176k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|       |    }
 5126|       |    else {
 5127|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|       |            value, context_tag<Context>{}));
 5129|       |    }
 5130|   176k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERh:
 4958|   176k|    {                                                                        \
 4959|   176k|        return val;                                                          \
 4960|   176k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJhEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7974|  83.9k|    {
 7975|  83.9k|        return m_str;
 7976|  83.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJhEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5424|   167k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5425|   167k|    {
 5426|   167k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJhEE12arg_pointersEv:
 5378|   167k|    {
 5379|   167k|        return m_argptrs;
 5380|   167k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  83.9k|{
 8820|  83.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  83.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 83.4k, False: 500]
  |  |  ------------------
  ------------------
 8821|  83.4k|        return unexpected(result.error());
 8822|  83.4k|    }
 8823|    500|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    500|    static_cast<    \
  |  |  929|    500|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    500|    static_cast<    \
  |  |  929|    500|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  83.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  87.5k|        : base(unexpect, std::move(e.error())),
 1474|  87.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  87.5k|    {
 1476|  87.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  87.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  87.5k|          m_has_value(false)
  446|  87.5k|    {
  447|  87.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  88.1k|    {
 1177|  88.1k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJhEEC2ES8_ONSt3__15tupleIJhEEE:
 5828|    539|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    539|    static_cast<    \
  |  |  929|    539|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    539|    static_cast<    \
  |  |  929|    539|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|    539|    {
 5830|    539|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|    539|        : base(std::in_place, std::forward<U>(val)),
 1428|    539|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    539|    {
 1430|    539|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|    539|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    539|    {
  437|    539|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJhEE4argsEv:
 5373|   167k|    {
 5374|   167k|        return m_args;
 5375|   167k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJhEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7969|  83.9k|        : m_str(r.str)
 7970|  83.9k|    {
 7971|  83.9k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEcvbEv:
 1597|  88.1k|    {
 1598|  88.1k|        return has_value();
 1599|  88.1k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  88.6k|    {
  485|  88.6k|        return m_has_value;
  486|  88.6k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEptEv:
 1672|    539|    {
 1673|    539|        return &value();
 1674|    539|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|    539|    {
 1627|    539|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    539|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    539|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    539|        return this->get_value();
 1629|    539|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    539|    {
  451|    539|        return m_value;
  452|    539|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEhEENS0_14basic_scan_argIT_EERT0_:
 5154|  8.41k|{
 5155|  8.41k|    check_scan_arg_types<T>();
 5156|       |
 5157|  8.41k|    basic_scan_arg<Context> arg;
 5158|  8.41k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  8.41k|    arg.m_value = make_value<Context>(value);
 5160|  8.41k|    return arg;
 5161|  8.41k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJiEEEDav:
 5395|   168k|{
 5396|   168k|    detail::check_scan_arg_types<Args...>();
 5397|   168k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   168k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEEC2Ev:
 5347|   168k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5348|   168k|    {
 5349|   168k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   168k|    {
 5360|   168k|        return {detail::make_arg<
 5361|   168k|            kind, Context,
 5362|   168k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   168k|                                 typename Context::char_type>::value>(args)...};
 5364|   168k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE3EivEEPvRT2_:
 5169|   168k|{
 5170|   168k|    return make_value<Context>(value).ref_value;
 5171|   168k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEiEEDaRT0_:
 5119|   176k|{
 5120|   176k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5123|   176k|                                  needs_context_tag>) {
 5124|   176k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   176k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|       |    }
 5126|       |    else {
 5127|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|       |            value, context_tag<Context>{}));
 5129|       |    }
 5130|   176k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERi:
 4958|   176k|    {                                                                        \
 4959|   176k|        return val;                                                          \
 4960|   176k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7974|  84.0k|    {
 7975|  84.0k|        return m_str;
 7976|  84.0k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJiEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5424|   168k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5425|   168k|    {
 5426|   168k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE12arg_pointersEv:
 5378|   168k|    {
 5379|   168k|        return m_argptrs;
 5380|   168k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  84.0k|{
 8820|  84.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  84.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 83.4k, False: 692]
  |  |  ------------------
  ------------------
 8821|  83.4k|        return unexpected(result.error());
 8822|  83.4k|    }
 8823|    692|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    692|    static_cast<    \
  |  |  929|    692|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    692|    static_cast<    \
  |  |  929|    692|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  84.0k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  87.5k|        : base(unexpect, std::move(e.error())),
 1474|  87.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  87.5k|    {
 1476|  87.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  87.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  87.5k|          m_has_value(false)
  446|  87.5k|    {
  447|  87.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  88.3k|    {
 1177|  88.3k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEC2ES8_ONSt3__15tupleIJiEEE:
 5828|    750|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    750|    static_cast<    \
  |  |  929|    750|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    750|    static_cast<    \
  |  |  929|    750|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|    750|    {
 5830|    750|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|    750|        : base(std::in_place, std::forward<U>(val)),
 1428|    750|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    750|    {
 1430|    750|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|    750|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    750|    {
  437|    750|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE4argsEv:
 5373|   168k|    {
 5374|   168k|        return m_args;
 5375|   168k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7969|  84.0k|        : m_str(r.str)
 7970|  84.0k|    {
 7971|  84.0k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEcvbEv:
 1597|  88.3k|    {
 1598|  88.3k|        return has_value();
 1599|  88.3k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  89.0k|    {
  485|  89.0k|        return m_has_value;
  486|  89.0k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEptEv:
 1672|    750|    {
 1673|    750|        return &value();
 1674|    750|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|    750|    {
 1627|    750|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    750|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    750|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    750|        return this->get_value();
 1629|    750|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    750|    {
  451|    750|        return m_value;
  452|    750|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEiEENS0_14basic_scan_argIT_EERT0_:
 5154|  8.45k|{
 5155|  8.45k|    check_scan_arg_types<T>();
 5156|       |
 5157|  8.45k|    basic_scan_arg<Context> arg;
 5158|  8.45k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  8.45k|    arg.m_value = make_value<Context>(value);
 5160|  8.45k|    return arg;
 5161|  8.45k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJjEEEDav:
 5395|   167k|{
 5396|   167k|    detail::check_scan_arg_types<Args...>();
 5397|   167k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   167k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEEC2Ev:
 5347|   167k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5348|   167k|    {
 5349|   167k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   167k|    {
 5360|   167k|        return {detail::make_arg<
 5361|   167k|            kind, Context,
 5362|   167k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   167k|                                 typename Context::char_type>::value>(args)...};
 5364|   167k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE8EjvEEPvRT2_:
 5169|   167k|{
 5170|   167k|    return make_value<Context>(value).ref_value;
 5171|   167k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEjEEDaRT0_:
 5119|   176k|{
 5120|   176k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5123|   176k|                                  needs_context_tag>) {
 5124|   176k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   176k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|       |    }
 5126|       |    else {
 5127|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|       |            value, context_tag<Context>{}));
 5129|       |    }
 5130|   176k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERj:
 4958|   176k|    {                                                                        \
 4959|   176k|        return val;                                                          \
 4960|   176k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7974|  83.9k|    {
 7975|  83.9k|        return m_str;
 7976|  83.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJjEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5424|   167k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5425|   167k|    {
 5426|   167k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE12arg_pointersEv:
 5378|   167k|    {
 5379|   167k|        return m_argptrs;
 5380|   167k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  83.9k|{
 8820|  83.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  83.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 83.4k, False: 558]
  |  |  ------------------
  ------------------
 8821|  83.4k|        return unexpected(result.error());
 8822|  83.4k|    }
 8823|    558|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    558|    static_cast<    \
  |  |  929|    558|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    558|    static_cast<    \
  |  |  929|    558|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  83.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  87.5k|        : base(unexpect, std::move(e.error())),
 1474|  87.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  87.5k|    {
 1476|  87.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  87.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  87.5k|          m_has_value(false)
  446|  87.5k|    {
  447|  87.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  88.1k|    {
 1177|  88.1k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEC2ES8_ONSt3__15tupleIJjEEE:
 5828|    603|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    603|    static_cast<    \
  |  |  929|    603|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    603|    static_cast<    \
  |  |  929|    603|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|    603|    {
 5830|    603|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|    603|        : base(std::in_place, std::forward<U>(val)),
 1428|    603|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    603|    {
 1430|    603|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|    603|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    603|    {
  437|    603|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE4argsEv:
 5373|   167k|    {
 5374|   167k|        return m_args;
 5375|   167k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7969|  83.9k|        : m_str(r.str)
 7970|  83.9k|    {
 7971|  83.9k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEcvbEv:
 1597|  88.1k|    {
 1598|  88.1k|        return has_value();
 1599|  88.1k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  88.7k|    {
  485|  88.7k|        return m_has_value;
  486|  88.7k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEptEv:
 1672|    603|    {
 1673|    603|        return &value();
 1674|    603|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|    603|    {
 1627|    603|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    603|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    603|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    603|        return this->get_value();
 1629|    603|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    603|    {
  451|    603|        return m_value;
  452|    603|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEjEENS0_14basic_scan_argIT_EERT0_:
 5154|  8.43k|{
 5155|  8.43k|    check_scan_arg_types<T>();
 5156|       |
 5157|  8.43k|    basic_scan_arg<Context> arg;
 5158|  8.43k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  8.43k|    arg.m_value = make_value<Context>(value);
 5160|  8.43k|    return arg;
 5161|  8.43k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJxEEEDav:
 5395|   168k|{
 5396|   168k|    detail::check_scan_arg_types<Args...>();
 5397|   168k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   168k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJxEEC2Ev:
 5347|   168k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5348|   168k|    {
 5349|   168k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJxEE12make_argptrsIJxEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   168k|    {
 5360|   168k|        return {detail::make_arg<
 5361|   168k|            kind, Context,
 5362|   168k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   168k|                                 typename Context::char_type>::value>(args)...};
 5364|   168k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE5ExvEEPvRT2_:
 5169|   168k|{
 5170|   168k|    return make_value<Context>(value).ref_value;
 5171|   168k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEExEEDaRT0_:
 5119|   176k|{
 5120|   176k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5123|   176k|                                  needs_context_tag>) {
 5124|   176k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   176k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|       |    }
 5126|       |    else {
 5127|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|       |            value, context_tag<Context>{}));
 5129|       |    }
 5130|   176k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERx:
 4958|   176k|    {                                                                        \
 4959|   176k|        return val;                                                          \
 4960|   176k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJxEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7974|  84.2k|    {
 7975|  84.2k|        return m_str;
 7976|  84.2k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJxEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5424|   168k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5425|   168k|    {
 5426|   168k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJxEE12arg_pointersEv:
 5378|   168k|    {
 5379|   168k|        return m_argptrs;
 5380|   168k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  84.2k|{
 8820|  84.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  84.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 83.4k, False: 830]
  |  |  ------------------
  ------------------
 8821|  83.4k|        return unexpected(result.error());
 8822|  83.4k|    }
 8823|    830|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    830|    static_cast<    \
  |  |  929|    830|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    830|    static_cast<    \
  |  |  929|    830|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  84.2k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  87.5k|        : base(unexpect, std::move(e.error())),
 1474|  87.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  87.5k|    {
 1476|  87.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  87.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  87.5k|          m_has_value(false)
  446|  87.5k|    {
  447|  87.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  88.4k|    {
 1177|  88.4k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJxEEC2ES8_ONSt3__15tupleIJxEEE:
 5828|    903|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    903|    static_cast<    \
  |  |  929|    903|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    903|    static_cast<    \
  |  |  929|    903|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|    903|    {
 5830|    903|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|    903|        : base(std::in_place, std::forward<U>(val)),
 1428|    903|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    903|    {
 1430|    903|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|    903|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    903|    {
  437|    903|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJxEE4argsEv:
 5373|   168k|    {
 5374|   168k|        return m_args;
 5375|   168k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJxEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7969|  84.2k|        : m_str(r.str)
 7970|  84.2k|    {
 7971|  84.2k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEcvbEv:
 1597|  88.4k|    {
 1598|  88.4k|        return has_value();
 1599|  88.4k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  89.3k|    {
  485|  89.3k|        return m_has_value;
  486|  89.3k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEptEv:
 1672|    903|    {
 1673|    903|        return &value();
 1674|    903|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|    903|    {
 1627|    903|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    903|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    903|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    903|        return this->get_value();
 1629|    903|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    903|    {
  451|    903|        return m_value;
  452|    903|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEExEENS0_14basic_scan_argIT_EERT0_:
 5154|  8.48k|{
 5155|  8.48k|    check_scan_arg_types<T>();
 5156|       |
 5157|  8.48k|    basic_scan_arg<Context> arg;
 5158|  8.48k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  8.48k|    arg.m_value = make_value<Context>(value);
 5160|  8.48k|    return arg;
 5161|  8.48k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJyEEEDav:
 5395|   168k|{
 5396|   168k|    detail::check_scan_arg_types<Args...>();
 5397|   168k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   168k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJyEEC2Ev:
 5347|   168k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5348|   168k|    {
 5349|   168k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJyEE12make_argptrsIJyEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   168k|    {
 5360|   168k|        return {detail::make_arg<
 5361|   168k|            kind, Context,
 5362|   168k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   168k|                                 typename Context::char_type>::value>(args)...};
 5364|   168k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE10EyvEEPvRT2_:
 5169|   168k|{
 5170|   168k|    return make_value<Context>(value).ref_value;
 5171|   168k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEyEEDaRT0_:
 5119|   176k|{
 5120|   176k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5123|   176k|                                  needs_context_tag>) {
 5124|   176k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   176k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|       |    }
 5126|       |    else {
 5127|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|       |            value, context_tag<Context>{}));
 5129|       |    }
 5130|   176k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERy:
 4958|   176k|    {                                                                        \
 4959|   176k|        return val;                                                          \
 4960|   176k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJyEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7974|  84.0k|    {
 7975|  84.0k|        return m_str;
 7976|  84.0k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJyEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5424|   168k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5425|   168k|    {
 5426|   168k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJyEE12arg_pointersEv:
 5378|   168k|    {
 5379|   168k|        return m_argptrs;
 5380|   168k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  84.0k|{
 8820|  84.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  84.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 83.4k, False: 676]
  |  |  ------------------
  ------------------
 8821|  83.4k|        return unexpected(result.error());
 8822|  83.4k|    }
 8823|    676|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    676|    static_cast<    \
  |  |  929|    676|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    676|    static_cast<    \
  |  |  929|    676|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  84.0k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  87.5k|        : base(unexpect, std::move(e.error())),
 1474|  87.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  87.5k|    {
 1476|  87.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  87.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  87.5k|          m_has_value(false)
  446|  87.5k|    {
  447|  87.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  88.3k|    {
 1177|  88.3k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJyEEC2ES8_ONSt3__15tupleIJyEEE:
 5828|    733|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    733|    static_cast<    \
  |  |  929|    733|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    733|    static_cast<    \
  |  |  929|    733|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|    733|    {
 5830|    733|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|    733|        : base(std::in_place, std::forward<U>(val)),
 1428|    733|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    733|    {
 1430|    733|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|    733|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    733|    {
  437|    733|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJyEE4argsEv:
 5373|   168k|    {
 5374|   168k|        return m_args;
 5375|   168k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJyEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7969|  84.0k|        : m_str(r.str)
 7970|  84.0k|    {
 7971|  84.0k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEcvbEv:
 1597|  88.3k|    {
 1598|  88.3k|        return has_value();
 1599|  88.3k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  89.0k|    {
  485|  89.0k|        return m_has_value;
  486|  89.0k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEptEv:
 1672|    733|    {
 1673|    733|        return &value();
 1674|    733|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|    733|    {
 1627|    733|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    733|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    733|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    733|        return this->get_value();
 1629|    733|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    733|    {
  451|    733|        return m_value;
  452|    733|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEyEENS0_14basic_scan_argIT_EERT0_:
 5154|  8.45k|{
 5155|  8.45k|    check_scan_arg_types<T>();
 5156|       |
 5157|  8.45k|    basic_scan_arg<Context> arg;
 5158|  8.45k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  8.45k|    arg.m_value = make_value<Context>(value);
 5160|  8.45k|    return arg;
 5161|  8.45k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   525k|    {
 2724|   525k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   525k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   525k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   525k|    {
 2705|   525k|        return decay_copy(t.begin());
 2706|   525k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 1948|   312M|{
 1949|   312M|    return SCN_FWD(t);
  ------------------
  |  |  930|   312M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|   312M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.05M|    {
 2781|  1.05M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.05M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.05M|    {
 2763|  1.05M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.05M|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8590|   252k|{
 8591|   252k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   252k|    auto result = vscan_impl(buffer, format, args);
 8594|   252k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   252k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 250k, False: 1.92k]
  |  |  ------------------
  ------------------
 8595|   250k|        return unexpected(result.error());
 8596|   250k|    }
 8597|  1.92k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   252k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4719|   529k|{
 4720|   529k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   529k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   529k|                  "\n"
 4724|   529k|                  "Unsupported range type given as input to a scanning "
 4725|   529k|                  "function.\n"
 4726|   529k|                  "A range needs to have a character type (value type) "
 4727|   529k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   529k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   529k|                  "to be included.\n"
 4730|   529k|                  "See the scnlib documentation for more details.");
 4731|   529k|    static_assert(
 4732|   529k|        !std::is_same_v<T, custom_char_traits>,
 4733|   529k|        "\n"
 4734|   529k|        "Unsupported range type given as input to a scanning "
 4735|   529k|        "function.\n"
 4736|   529k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   529k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   529k|        "not supported.");
 4739|   529k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   529k|                  "\n"
 4741|   529k|                  "Unsupported range type given as input to a scanning "
 4742|   529k|                  "function.\n"
 4743|   529k|                  "file_marker_found cannot be used as an "
 4744|   529k|                  "source range type to scn::scan.\n"
 4745|   529k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   529k|                  "and do not provide an explicit source range, "
 4747|   529k|                  "or use scn::scan with a FILE* directly.");
 4748|   529k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   529k|                  "\n"
 4750|   529k|                  "Unsupported range type given as input to a scanning "
 4751|   529k|                  "function.\n"
 4752|   529k|                  "In order to be scannable, a range needs to satisfy "
 4753|   529k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   529k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   529k|                  "\n"
 4756|   529k|                  "Unsupported range type given as input to a scanning "
 4757|   529k|                  "function.\n"
 4758|   529k|                  "A range needs to model forward_range and have a valid "
 4759|   529k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   529k|                  "Examples of scannable ranges are std::string, "
 4761|   529k|                  "std::string_view, "
 4762|   529k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   529k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   529k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   529k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4689|   529k|{
 4690|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 4691|       |        return file_marker_found{};
 4692|       |    }
 4693|       |    else if constexpr (!ranges::forward_range<Range>) {
 4694|       |        if constexpr (ranges::range<Range>) {
 4695|       |            return insufficient_range{};
 4696|       |        }
 4697|       |        else {
 4698|       |            return invalid_input_range{};
 4699|       |        }
 4700|       |    }
 4701|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 4702|       |        return invalid_char_type{};
 4703|       |    }
 4704|   529k|    else {
 4705|   529k|        return make_forward_scan_buffer(r);
 4706|   529k|    }
 4707|   529k|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4523|   529k|{
 4524|   529k|    return basic_scan_forward_buffer_impl(range);
 4525|   529k|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4408|   529k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  930|   529k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4409|   529k|          m_cursor(ranges::begin(*m_range))
 4410|   529k|    {
 4411|   529k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4380|   529k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4381|   529k|    {
 4382|   529k|    }
_ZN3scn2v36detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4149|   529k|        : m_current_view(sv), m_is_contiguous(false)
 4150|   529k|    {
 4151|   529k|    }
_ZN3scn2v36detail17basic_scan_bufferIwED2Ev:
 4065|   529k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   533k|    {
 2724|   533k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   533k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   533k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   533k|    {
 2705|   533k|        return decay_copy(t.begin());
 2706|   533k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3329|   537k|    {
 3330|   537k|        return m_iterator;
 3331|   537k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4414|   103M|    {
 4415|   103M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4415:13): [True: 174k, False: 103M]
  ------------------
 4416|   174k|            return false;
 4417|   174k|        }
 4418|   103M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4419|   103M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|   103M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   103M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4420|   103M|        }
 4421|   103M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4421:13): [True: 103M, False: 378k]
  ------------------
 4422|   103M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4423|   103M|                                          this->m_current_view.begin(),
 4424|   103M|                                          this->m_current_view.end());
 4425|   103M|        }
 4426|   103M|        m_latest = *m_cursor;
 4427|   103M|        ++m_cursor;
 4428|   103M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4429|   103M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4430|   103M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|   103M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   103M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4431|   103M|        }
 4432|   103M|        return true;
 4433|   103M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   310M|    {
 2781|   310M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   310M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   310M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   310M|    {
 2763|   310M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   310M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   310M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3333|   310M|    {
 3334|   310M|        return m_sentinel;
 3335|   310M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE4syncEl:
 4070|   529k|    {
 4071|   529k|        SCN_UNUSED(position);
  ------------------
  |  |  909|   529k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4072|   529k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1473|   525k|        : base(unexpect, std::move(e.error())),
 1474|   525k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   525k|    {
 1476|   525k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  444|   525k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   525k|          m_has_value(false)
  446|   525k|    {
  447|   525k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   529k|    {
 1177|   529k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5922|  4.16k|{
 5923|       |    if constexpr (ranges::random_access_iterator<
 5924|  4.16k|                      ranges::iterator_t<SourceRange>>) {
 5925|  4.16k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|       |    }
 5927|       |    else {
 5928|       |        auto it = ranges::begin(source);
 5929|       |        while (n > 0) {
 5930|       |            --n;
 5931|       |            ++it;
 5932|       |        }
 5933|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|       |    }
 5935|  4.16k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  4.16k|    {
 2724|  4.16k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  4.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  4.16k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  4.16k|    {
 2705|  4.16k|        return decay_copy(t.begin());
 2706|  4.16k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 5909|  4.16k|{
 5910|  4.16k|    return ranges::end(source);
 5911|  4.16k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  4.16k|    {
 2781|  4.16k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  4.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  4.16k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  4.16k|    {
 2763|  4.16k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  4.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  4.16k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1427|  4.16k|        : base(std::in_place, std::forward<U>(val)),
 1428|  4.16k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  4.16k|    {
 1430|  4.16k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  435|  4.16k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  4.16k|    {
  437|  4.16k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJaEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7974|  83.9k|    {
 7975|  83.9k|        return m_str;
 7976|  83.9k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|  83.9k|{
 8820|  83.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  83.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 83.4k, False: 586]
  |  |  ------------------
  ------------------
 8821|  83.4k|        return unexpected(result.error());
 8822|  83.4k|    }
 8823|    586|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    586|    static_cast<    \
  |  |  929|    586|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    586|    static_cast<    \
  |  |  929|    586|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  83.9k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1597|   529k|    {
 1598|   529k|        return has_value();
 1599|   529k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.05M|    {
  485|  1.05M|        return m_has_value;
  486|  1.05M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1603|   525k|    {
 1604|   525k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   525k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   525k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   525k|        return this->get_unexpected().error();
 1606|   525k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   525k|    {
  468|   525k|        return m_unexpected;
  469|   525k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  87.5k|        : base(unexpect, std::move(e.error())),
 1474|  87.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  87.5k|    {
 1476|  87.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  87.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  87.5k|          m_has_value(false)
  446|  87.5k|    {
  447|  87.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  88.2k|    {
 1177|  88.2k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1652|  3.84k|    {
 1653|  3.84k|        return value();
 1654|  3.84k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1626|  4.16k|    {
 1627|  4.16k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.16k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.16k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.16k|        return this->get_value();
 1629|  4.16k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  4.16k|    {
  451|  4.16k|        return m_value;
  452|  4.16k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJaEEC2ESE_ONS6_5tupleIJaEEE:
 5828|    634|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    634|    static_cast<    \
  |  |  929|    634|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    634|    static_cast<    \
  |  |  929|    634|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|    634|    {
 5830|    634|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2EOSF_:
 5679|  4.16k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|  4.16k|    static_cast<    \
  |  |  929|  4.16k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5680|  4.16k|    {
 5681|  4.16k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|    634|        : base(std::in_place, std::forward<U>(val)),
 1428|    634|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    634|    {
 1430|    634|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|    634|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    634|    {
  437|    634|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3314|   533k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   533k|    static_cast<    \
  |  |  929|   533k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   533k|    static_cast<    \
  |  |  929|   533k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3315|   533k|    {
 3316|   533k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJaEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7969|  83.9k|        : m_str(r.str)
 7970|  83.9k|    {
 7971|  83.9k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEcvbEv:
 1597|  88.2k|    {
 1598|  88.2k|        return has_value();
 1599|  88.2k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  88.8k|    {
  485|  88.8k|        return m_has_value;
  486|  88.8k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEptEv:
 1672|    634|    {
 1673|    634|        return &value();
 1674|    634|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|    634|    {
 1627|    634|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    634|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    634|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    634|        return this->get_value();
 1629|    634|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    634|    {
  451|    634|        return m_value;
  452|    634|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 5697|  4.16k|    {
 5698|  4.16k|        return ranges::begin(m_range);
 5699|  4.16k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8606|   252k|{
 8607|   252k|#if !SCN_DISABLE_LOCALE
 8608|   252k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   252k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   252k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   252k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   252k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   252k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 250k, False: 1.92k]
  |  |  ------------------
  ------------------
 8615|   250k|        return unexpected(result.error());
 8616|   250k|    }
 8617|  1.92k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   252k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|  25.3k|{
 8631|  25.3k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|  25.3k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|  25.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  25.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.0k, False: 320]
  |  |  ------------------
  ------------------
 8635|  25.0k|        return unexpected(result.error());
 8636|  25.0k|    }
 8637|    320|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|    320|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|  25.3k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSJ_v:
 1662|    320|    {
 1663|    320|        return std::move(value());
 1664|    320|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJhEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7974|  83.9k|    {
 7975|  83.9k|        return m_str;
 7976|  83.9k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|  83.9k|{
 8820|  83.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  83.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 83.4k, False: 500]
  |  |  ------------------
  ------------------
 8821|  83.4k|        return unexpected(result.error());
 8822|  83.4k|    }
 8823|    500|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    500|    static_cast<    \
  |  |  929|    500|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    500|    static_cast<    \
  |  |  929|    500|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  83.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  87.5k|        : base(unexpect, std::move(e.error())),
 1474|  87.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  87.5k|    {
 1476|  87.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  87.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  87.5k|          m_has_value(false)
  446|  87.5k|    {
  447|  87.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  88.1k|    {
 1177|  88.1k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJhEEC2ESE_ONS6_5tupleIJhEEE:
 5828|    539|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    539|    static_cast<    \
  |  |  929|    539|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    539|    static_cast<    \
  |  |  929|    539|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|    539|    {
 5830|    539|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|    539|        : base(std::in_place, std::forward<U>(val)),
 1428|    539|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    539|    {
 1430|    539|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|    539|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    539|    {
  437|    539|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJhEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7969|  83.9k|        : m_str(r.str)
 7970|  83.9k|    {
 7971|  83.9k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEcvbEv:
 1597|  88.1k|    {
 1598|  88.1k|        return has_value();
 1599|  88.1k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  88.6k|    {
  485|  88.6k|        return m_has_value;
  486|  88.6k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEptEv:
 1672|    539|    {
 1673|    539|        return &value();
 1674|    539|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|    539|    {
 1627|    539|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    539|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    539|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    539|        return this->get_value();
 1629|    539|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    539|    {
  451|    539|        return m_value;
  452|    539|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJiEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7974|  84.0k|    {
 7975|  84.0k|        return m_str;
 7976|  84.0k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|  84.0k|{
 8820|  84.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  84.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 83.4k, False: 692]
  |  |  ------------------
  ------------------
 8821|  83.4k|        return unexpected(result.error());
 8822|  83.4k|    }
 8823|    692|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    692|    static_cast<    \
  |  |  929|    692|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    692|    static_cast<    \
  |  |  929|    692|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  84.0k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  87.5k|        : base(unexpect, std::move(e.error())),
 1474|  87.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  87.5k|    {
 1476|  87.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  87.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  87.5k|          m_has_value(false)
  446|  87.5k|    {
  447|  87.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  88.3k|    {
 1177|  88.3k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJiEEC2ESE_ONS6_5tupleIJiEEE:
 5828|    750|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    750|    static_cast<    \
  |  |  929|    750|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    750|    static_cast<    \
  |  |  929|    750|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|    750|    {
 5830|    750|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|    750|        : base(std::in_place, std::forward<U>(val)),
 1428|    750|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    750|    {
 1430|    750|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|    750|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    750|    {
  437|    750|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7969|  84.0k|        : m_str(r.str)
 7970|  84.0k|    {
 7971|  84.0k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEcvbEv:
 1597|  88.3k|    {
 1598|  88.3k|        return has_value();
 1599|  88.3k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  89.0k|    {
  485|  89.0k|        return m_has_value;
  486|  89.0k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEptEv:
 1672|    750|    {
 1673|    750|        return &value();
 1674|    750|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|    750|    {
 1627|    750|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    750|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    750|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    750|        return this->get_value();
 1629|    750|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    750|    {
  451|    750|        return m_value;
  452|    750|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJjEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7974|  83.9k|    {
 7975|  83.9k|        return m_str;
 7976|  83.9k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|  83.9k|{
 8820|  83.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  83.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 83.4k, False: 558]
  |  |  ------------------
  ------------------
 8821|  83.4k|        return unexpected(result.error());
 8822|  83.4k|    }
 8823|    558|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    558|    static_cast<    \
  |  |  929|    558|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    558|    static_cast<    \
  |  |  929|    558|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  83.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  87.5k|        : base(unexpect, std::move(e.error())),
 1474|  87.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  87.5k|    {
 1476|  87.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  87.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  87.5k|          m_has_value(false)
  446|  87.5k|    {
  447|  87.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  88.1k|    {
 1177|  88.1k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJjEEC2ESE_ONS6_5tupleIJjEEE:
 5828|    603|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    603|    static_cast<    \
  |  |  929|    603|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    603|    static_cast<    \
  |  |  929|    603|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|    603|    {
 5830|    603|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|    603|        : base(std::in_place, std::forward<U>(val)),
 1428|    603|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    603|    {
 1430|    603|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|    603|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    603|    {
  437|    603|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7969|  83.9k|        : m_str(r.str)
 7970|  83.9k|    {
 7971|  83.9k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEcvbEv:
 1597|  88.1k|    {
 1598|  88.1k|        return has_value();
 1599|  88.1k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  88.7k|    {
  485|  88.7k|        return m_has_value;
  486|  88.7k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEptEv:
 1672|    603|    {
 1673|    603|        return &value();
 1674|    603|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|    603|    {
 1627|    603|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    603|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    603|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    603|        return this->get_value();
 1629|    603|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    603|    {
  451|    603|        return m_value;
  452|    603|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJxEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7974|  84.2k|    {
 7975|  84.2k|        return m_str;
 7976|  84.2k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|  84.2k|{
 8820|  84.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  84.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 83.4k, False: 830]
  |  |  ------------------
  ------------------
 8821|  83.4k|        return unexpected(result.error());
 8822|  83.4k|    }
 8823|    830|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    830|    static_cast<    \
  |  |  929|    830|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    830|    static_cast<    \
  |  |  929|    830|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  84.2k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  87.5k|        : base(unexpect, std::move(e.error())),
 1474|  87.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  87.5k|    {
 1476|  87.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  87.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  87.5k|          m_has_value(false)
  446|  87.5k|    {
  447|  87.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  88.4k|    {
 1177|  88.4k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJxEEC2ESE_ONS6_5tupleIJxEEE:
 5828|    903|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    903|    static_cast<    \
  |  |  929|    903|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    903|    static_cast<    \
  |  |  929|    903|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|    903|    {
 5830|    903|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|    903|        : base(std::in_place, std::forward<U>(val)),
 1428|    903|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    903|    {
 1430|    903|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|    903|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    903|    {
  437|    903|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJxEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7969|  84.2k|        : m_str(r.str)
 7970|  84.2k|    {
 7971|  84.2k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEcvbEv:
 1597|  88.4k|    {
 1598|  88.4k|        return has_value();
 1599|  88.4k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  89.3k|    {
  485|  89.3k|        return m_has_value;
  486|  89.3k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEptEv:
 1672|    903|    {
 1673|    903|        return &value();
 1674|    903|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|    903|    {
 1627|    903|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    903|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    903|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    903|        return this->get_value();
 1629|    903|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    903|    {
  451|    903|        return m_value;
  452|    903|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJyEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7974|  84.0k|    {
 7975|  84.0k|        return m_str;
 7976|  84.0k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|  84.0k|{
 8820|  84.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  84.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 83.4k, False: 676]
  |  |  ------------------
  ------------------
 8821|  83.4k|        return unexpected(result.error());
 8822|  83.4k|    }
 8823|    676|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    676|    static_cast<    \
  |  |  929|    676|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    676|    static_cast<    \
  |  |  929|    676|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  84.0k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  87.5k|        : base(unexpect, std::move(e.error())),
 1474|  87.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  87.5k|    {
 1476|  87.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  87.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  87.5k|          m_has_value(false)
  446|  87.5k|    {
  447|  87.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  88.3k|    {
 1177|  88.3k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJyEEC2ESE_ONS6_5tupleIJyEEE:
 5828|    733|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    733|    static_cast<    \
  |  |  929|    733|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    733|    static_cast<    \
  |  |  929|    733|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|    733|    {
 5830|    733|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|    733|        : base(std::in_place, std::forward<U>(val)),
 1428|    733|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    733|    {
 1430|    733|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|    733|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    733|    {
  437|    733|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJyEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7969|  84.0k|        : m_str(r.str)
 7970|  84.0k|    {
 7971|  84.0k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEcvbEv:
 1597|  88.3k|    {
 1598|  88.3k|        return has_value();
 1599|  88.3k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  89.0k|    {
  485|  89.0k|        return m_has_value;
  486|  89.0k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEptEv:
 1672|    733|    {
 1673|    733|        return &value();
 1674|    733|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|    733|    {
 1627|    733|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    733|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    733|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    733|        return this->get_value();
 1629|    733|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    733|    {
  451|    733|        return m_value;
  452|    733|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3566|  2.17M|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3567|  2.17M|    {
 3568|  2.17M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  2.17M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  2.17M|    }
_ZNK3scn2v310scan_errorcvbEv:
 3573|  24.3M|    {
 3574|  24.3M|        return m_code == good;
 3575|  24.3M|    }
_ZNK3scn2v310scan_error4codeEv:
 3584|   900k|    {
 3585|   900k|        return m_code;
 3586|   900k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3329|  57.7M|    {
 3330|  57.7M|        return m_iterator;
 3331|  57.7M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3329|   110M|    {
 3330|   110M|        return m_iterator;
 3331|   110M|    }
_ZNK3scn2v36detail12format_specs8get_baseEv:
 6221|  3.98M|    {
 6222|  3.98M|        SCN_GCC_COMPAT_PUSH
 6223|  3.98M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 6224|  3.98M|        switch (type) {
 6225|   753k|            case presentation_type::none:
  ------------------
  |  Branch (6225:13): [True: 753k, False: 3.23M]
  ------------------
 6226|   753k|                return 10;
 6227|  1.04M|            case presentation_type::int_generic:
  ------------------
  |  Branch (6227:13): [True: 1.04M, False: 2.94M]
  ------------------
 6228|  1.04M|                return 0;
 6229|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (6229:13): [True: 0, False: 3.98M]
  ------------------
 6230|      0|                return arbitrary_base;
 6231|       |
 6232|   233k|            case presentation_type::int_binary:
  ------------------
  |  Branch (6232:13): [True: 233k, False: 3.75M]
  ------------------
 6233|   233k|                return 2;
 6234|   360k|            case presentation_type::int_octal:
  ------------------
  |  Branch (6234:13): [True: 360k, False: 3.62M]
  ------------------
 6235|   360k|                return 8;
 6236|   752k|            case presentation_type::int_decimal:
  ------------------
  |  Branch (6236:13): [True: 752k, False: 3.23M]
  ------------------
 6237|   752k|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (6237:13): [True: 0, False: 3.98M]
  ------------------
 6238|   752k|                return 10;
 6239|   846k|            case presentation_type::int_hex:
  ------------------
  |  Branch (6239:13): [True: 846k, False: 3.14M]
  ------------------
 6240|   846k|                return 16;
 6241|       |
 6242|      0|            default:
  ------------------
  |  Branch (6242:13): [True: 0, False: 3.98M]
  ------------------
 6243|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6244|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6245|  3.98M|        }
 6246|  3.98M|        SCN_GCC_COMPAT_POP
 6247|  3.98M|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6259|  4.48M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter12on_localizedEv:
 6271|   761k|    {
 6272|   761k|        if constexpr (!SCN_DISABLE_LOCALE) {
 6273|   761k|            m_specs.localized = true;
 6274|       |        }
 6275|       |        else {
 6276|       |            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 6277|       |        }
 6278|   761k|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6302|  3.41M|    {
 6303|  3.41M|        m_specs.type = type;
 6304|  3.41M|    }
_ZN3scn2v36detail12specs_setter8on_errorEPKc:
 6364|   300k|    {
 6365|   300k|        SCN_UNLIKELY_ATTR
 6366|   300k|        m_error = scan_error{scan_error::invalid_format_string, msg};
 6367|   300k|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6375|  4.18M|    {
 6376|  4.18M|        return static_cast<bool>(m_error);
 6377|  4.18M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3608|   900k|{
 3609|   900k|    return a.code() == b;
 3610|   900k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3612|   900k|{
 3613|   900k|    return !(a == b);
 3614|   900k|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7062|   761k|{
 7063|   761k|    switch (type) {
 7064|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7064:9): [True: 0, False: 761k]
  ------------------
 7065|      0|            return arg_type_category::none;
 7066|       |
 7067|   123k|        case arg_type::schar_type:
  ------------------
  |  Branch (7067:9): [True: 123k, False: 638k]
  ------------------
 7068|   123k|        case arg_type::short_type:
  ------------------
  |  Branch (7068:9): [True: 0, False: 761k]
  ------------------
 7069|   262k|        case arg_type::int_type:
  ------------------
  |  Branch (7069:9): [True: 139k, False: 622k]
  ------------------
 7070|   262k|        case arg_type::long_type:
  ------------------
  |  Branch (7070:9): [True: 0, False: 761k]
  ------------------
 7071|   404k|        case arg_type::llong_type:
  ------------------
  |  Branch (7071:9): [True: 141k, False: 620k]
  ------------------
 7072|   404k|            return arg_type_category::integer;
 7073|       |
 7074|   111k|        case arg_type::uchar_type:
  ------------------
  |  Branch (7074:9): [True: 111k, False: 650k]
  ------------------
 7075|   111k|        case arg_type::ushort_type:
  ------------------
  |  Branch (7075:9): [True: 0, False: 761k]
  ------------------
 7076|   233k|        case arg_type::uint_type:
  ------------------
  |  Branch (7076:9): [True: 122k, False: 639k]
  ------------------
 7077|   233k|        case arg_type::ulong_type:
  ------------------
  |  Branch (7077:9): [True: 0, False: 761k]
  ------------------
 7078|   357k|        case arg_type::ullong_type:
  ------------------
  |  Branch (7078:9): [True: 123k, False: 638k]
  ------------------
 7079|   357k|            return arg_type_category::unsigned_integer;
 7080|       |
 7081|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7081:9): [True: 0, False: 761k]
  ------------------
 7082|      0|            return arg_type_category::pointer;
 7083|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7083:9): [True: 0, False: 761k]
  ------------------
 7084|      0|            return arg_type_category::boolean;
 7085|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7085:9): [True: 0, False: 761k]
  ------------------
 7086|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7086:9): [True: 0, False: 761k]
  ------------------
 7087|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7087:9): [True: 0, False: 761k]
  ------------------
 7088|      0|            return arg_type_category::character;
 7089|       |
 7090|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7090:9): [True: 0, False: 761k]
  ------------------
 7091|      0|        case arg_type::double_type:
  ------------------
  |  Branch (7091:9): [True: 0, False: 761k]
  ------------------
 7092|      0|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7092:9): [True: 0, False: 761k]
  ------------------
 7093|      0|            return arg_type_category::floating;
 7094|       |
 7095|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7095:9): [True: 0, False: 761k]
  ------------------
 7096|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7096:9): [True: 0, False: 761k]
  ------------------
 7097|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7097:9): [True: 0, False: 761k]
  ------------------
 7098|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7098:9): [True: 0, False: 761k]
  ------------------
 7099|      0|            return arg_type_category::string;
 7100|       |
 7101|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7101:9): [True: 0, False: 761k]
  ------------------
 7102|      0|            return arg_type_category::custom;
 7103|       |
 7104|      0|            SCN_CLANG_PUSH
 7105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7106|      0|        default:
  ------------------
  |  Branch (7106:9): [True: 0, False: 761k]
  ------------------
 7107|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7108|   761k|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7109|   761k|            SCN_CLANG_POP
 7110|   761k|    }
 7111|       |
 7112|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7113|   761k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
 3653|   119k|{
 3654|   119k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|   119k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|   119k|}
_ZN3scn2v36detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7148|  4.03M|{
 7149|  4.03M|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  |  859|  4.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.03M]
  |  |  ------------------
  ------------------
 7150|      0|        return handler.on_error("Invalid type specifier for integer type");
 7151|      0|    }
 7152|  4.03M|    if (specs.localized) {
  ------------------
  |  Branch (7152:9): [True: 761k, False: 3.26M]
  ------------------
 7153|   761k|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  |  859|   761k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 761k]
  |  |  ------------------
  ------------------
 7154|       |            // clang-format off
 7155|      0|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 7156|       |            // clang-format on
 7157|      0|            return;
 7158|      0|        }
 7159|   761k|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  |  859|   761k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 761k]
  |  |  ------------------
  ------------------
 7160|       |            // clang-format off
 7161|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 7162|       |            // clang-format on
 7163|      0|        }
 7164|   761k|    }
 7165|  4.03M|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA51_KcEEEDaDpOT_:
 3653|  68.3k|{
 3654|  68.3k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  68.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  68.3k|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4194|   326M|    {
 4195|   326M|        return m_end == nullptr;
 4196|   326M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|  3.27M|{
 3715|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3716|       |                                          const CharT*, const CharT*>) {
 3717|       |        return {first, last};
 3718|       |    }
 3719|  3.27M|    else {
 3720|  3.27M|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|  3.27M|    }
 3722|  3.27M|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4210|  7.56M|    {
 4211|  7.56M|        if (!stores_parent()) {
  ------------------
  |  Branch (4211:13): [True: 0, False: 7.56M]
  ------------------
 4212|      0|            return make_string_view_from_pointers(
 4213|      0|                static_cast<const CharT*>(m_begin) + position(),
 4214|      0|                static_cast<const CharT*>(m_end));
 4215|      0|        }
 4216|  7.56M|        return parent()->get_segment_starting_at(position());
 4217|  7.56M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4204|   179M|    {
 4205|   179M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   179M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   179M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4206|   179M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4207|   179M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4100|  7.56M|    {
 4101|  7.56M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  7.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.02M, False: 5.53M]
  |  |  ------------------
  ------------------
 4102|  7.56M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4103|  2.02M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4104|  2.02M|        }
 4105|  5.53M|        const auto start = pos - m_putback_buffer.size();
 4106|  5.53M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|  5.53M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.53M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4107|  5.53M|        return m_current_view.substr(start);
 4108|  5.53M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4199|  1.97M|    {
 4200|  1.97M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  1.97M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.97M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4201|  1.97M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4202|  1.97M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4189|  12.2M|    {
 4190|  12.2M|        return m_position;
 4191|  12.2M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE13is_contiguousEv:
 4122|  6.84M|    {
 4123|  6.84M|        return m_is_contiguous;
 4124|  6.84M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4194|   421G|    {
 4195|   421G|        return m_end == nullptr;
 4196|   421G|    }
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|  7.93k|{
 3715|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3716|       |                                          const CharT*, const CharT*>) {
 3717|       |        return {first, last};
 3718|       |    }
 3719|  7.93k|    else {
 3720|  7.93k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|  7.93k|    }
 3722|  7.93k|}
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4210|   387k|    {
 4211|   387k|        if (!stores_parent()) {
  ------------------
  |  Branch (4211:13): [True: 0, False: 387k]
  ------------------
 4212|      0|            return make_string_view_from_pointers(
 4213|      0|                static_cast<const CharT*>(m_begin) + position(),
 4214|      0|                static_cast<const CharT*>(m_end));
 4215|      0|        }
 4216|   387k|        return parent()->get_segment_starting_at(position());
 4217|   387k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4204|   210G|    {
 4205|   210G|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   210G|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   210G|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4206|   210G|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4207|   210G|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4100|   387k|    {
 4101|   387k|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|   387k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.55k, False: 383k]
  |  |  ------------------
  ------------------
 4102|   387k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4103|  3.55k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4104|  3.55k|        }
 4105|   383k|        const auto start = pos - m_putback_buffer.size();
 4106|   383k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|   383k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   383k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4107|   383k|        return m_current_view.substr(start);
 4108|   383k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4199|   301k|    {
 4200|   301k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   301k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   301k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4201|   301k|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4202|   301k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4189|   694k|    {
 4190|   694k|        return m_position;
 4191|   694k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE13is_contiguousEv:
 4122|  1.58M|    {
 4123|  1.58M|        return m_is_contiguous;
 4124|  1.58M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3179|  11.5M|    {
 3180|  11.5M|        return static_cast<D&>(*this);
 3181|  11.5M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  5.80M|    {
 2978|  5.80M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  5.80M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  5.80M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  5.80M|    {
 3005|  5.80M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  5.80M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  5.80M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3220|  5.80M|    {
 3221|  5.80M|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 13.5k, False: 5.78M]
  ------------------
 3222|  5.80M|                   ? nullptr
 3223|  5.80M|                   : std::addressof(*ranges::begin(derived()));
 3224|  5.80M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3179|   650k|    {
 3180|   650k|        return static_cast<D&>(*this);
 3181|   650k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|   325k|    {
 2978|   325k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   325k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|   325k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|   325k|    {
 3005|   325k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   325k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|   325k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3220|   325k|    {
 3221|   325k|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 0, False: 325k]
  ------------------
 3222|   325k|                   ? nullptr
 3223|   325k|                   : std::addressof(*ranges::begin(derived()));
 3224|   325k|    }
_ZNK3scn2v318basic_scan_contextIcE5rangeEv:
 8168|  1.71M|    {
 8169|  1.71M|        return ranges::subrange{begin(), end()};
 8170|  1.71M|    }
_ZNK3scn2v318basic_scan_contextIcE5beginEv:
 8152|  5.07M|    {
 8153|  5.07M|        return m_current;
 8154|  5.07M|    }
_ZNK3scn2v318basic_scan_contextIcE3endEv:
 8160|  1.71M|    {
 8161|  1.71M|        return ranges::default_sentinel;
 8162|  1.71M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3314|  18.4M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  18.4M|    static_cast<    \
  |  |  929|  18.4M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  18.4M|    static_cast<    \
  |  |  929|  18.4M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3315|  18.4M|    {
 3316|  18.4M|    }
_ZN3scn2v36detail10locale_refC2Ev:
 7990|  3.75M|    constexpr locale_ref() = default;
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  2.20M|    {
 1837|  2.20M|        return detail::transform_error_impl(std::move(*this),
 1838|  2.20M|                                            std::forward<F>(f));
 1839|  2.20M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|  2.20M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  2.20M|    else {
 1333|  2.20M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.20M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.20M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.18M, False: 26.1k]
  |  |  ------------------
  ------------------
 1335|  2.20M|                   ? result(*std::forward<Exp>(exp))
 1336|  2.20M|                   : result(unexpect,
 1337|  26.1k|                            trivial_invoke(std::forward<F>(f),
 1338|  26.1k|                                           std::forward<Exp>(exp).error()));
 1339|  2.20M|    }
 1340|  2.20M|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  11.5M|    {
  485|  11.5M|        return m_has_value;
  486|  11.5M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  4.13M|    {
 1663|  4.13M|        return std::move(value());
 1664|  4.13M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  4.58M|    {
 1627|  4.58M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.58M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.58M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.58M|        return this->get_value();
 1629|  4.58M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  4.58M|    {
  451|  4.58M|        return m_value;
  452|  4.58M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1427|  7.34M|        : base(std::in_place, std::forward<U>(val)),
 1428|  7.34M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  7.34M|    {
 1430|  7.34M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  7.34M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  7.34M|    {
  437|  7.34M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  7.77M|    {
 1177|  7.77M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|  55.3k|{
 1211|  55.3k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  55.3k|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  47.5k|    {
 1614|  47.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  47.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  47.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  47.5k|        return std::move(this->get_unexpected().error());
 1616|  47.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  48.1k|    {
  468|  48.1k|        return m_unexpected;
  469|  48.1k|    }
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  360|   280k|    {
  361|   280k|        return m_unexpected;
  362|   280k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1483|   113k|        : base(unexpect, std::forward<Args>(args)...),
 1484|   113k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|   113k|    {
 1486|   113k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|   429k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   429k|          m_has_value(false)
  446|   429k|    {
  447|   429k|    }
_ZNK3scn2v318basic_scan_contextIwE5rangeEv:
 8168|   303k|    {
 8169|   303k|        return ranges::subrange{begin(), end()};
 8170|   303k|    }
_ZNK3scn2v318basic_scan_contextIwE5beginEv:
 8152|   760k|    {
 8153|   760k|        return m_current;
 8154|   760k|    }
_ZNK3scn2v318basic_scan_contextIwE3endEv:
 8160|   303k|    {
 8161|   303k|        return ranges::default_sentinel;
 8162|   303k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3314|  2.72M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  2.72M|    static_cast<    \
  |  |  929|  2.72M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  2.72M|    static_cast<    \
  |  |  929|  2.72M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3315|  2.72M|    {
 3316|  2.72M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   379k|    {
 1837|   379k|        return detail::transform_error_impl(std::move(*this),
 1838|   379k|                                            std::forward<F>(f));
 1839|   379k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|   379k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   379k|    else {
 1333|   379k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   379k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   379k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 377k, False: 2.37k]
  |  |  ------------------
  ------------------
 1335|   379k|                   ? result(*std::forward<Exp>(exp))
 1336|   379k|                   : result(unexpect,
 1337|  2.37k|                            trivial_invoke(std::forward<F>(f),
 1338|  2.37k|                                           std::forward<Exp>(exp).error()));
 1339|   379k|    }
 1340|   379k|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  1.84M|    {
  485|  1.84M|        return m_has_value;
  486|  1.84M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|   647k|    {
 1663|   647k|        return std::move(value());
 1664|   647k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|   650k|    {
 1627|   650k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   650k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   650k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   650k|        return this->get_value();
 1629|   650k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|   650k|    {
  451|   650k|        return m_value;
  452|   650k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1427|   388k|        : base(std::in_place, std::forward<U>(val)),
 1428|   388k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   388k|    {
 1430|   388k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|   388k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   388k|    {
  437|   388k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.38M|    {
 1177|  1.38M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  33.5k|    {
 1614|  33.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  33.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  33.5k|        return std::move(this->get_unexpected().error());
 1616|  33.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  33.6k|    {
  468|  33.6k|        return m_unexpected;
  469|  33.6k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1483|   324k|        : base(unexpect, std::forward<Args>(args)...),
 1484|   324k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|   324k|    {
 1486|   324k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|   997k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   997k|          m_has_value(false)
  446|   997k|    {
  447|   997k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA22_KcEEEDaDpOT_:
 3653|   408k|{
 3654|   408k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|   408k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|   408k|}
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  345|   657k|        : m_unexpected(std::forward<Err>(e))
  346|   657k|    {
  347|   657k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   657k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   657k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1473|   525k|        : base(unexpect, std::move(e.error())),
 1474|   525k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   525k|    {
 1476|   525k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  444|   550k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   550k|          m_has_value(false)
  446|   550k|    {
  447|   550k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  14.4M|    {
 1177|  14.4M|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1427|  13.8M|        : base(std::in_place, std::forward<U>(val)),
 1428|  13.8M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  13.8M|    {
 1430|  13.8M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  13.8M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  13.8M|    {
  437|  13.8M|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1597|  14.4M|    {
 1598|  14.4M|        return has_value();
 1599|  14.4M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  484|  28.8M|    {
  485|  28.8M|        return m_has_value;
  486|  28.8M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1603|   550k|    {
 1604|   550k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   550k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   550k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   550k|        return this->get_unexpected().error();
 1606|   550k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   550k|    {
  468|   550k|        return m_unexpected;
  469|   550k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1662|  12.3M|    {
 1663|  12.3M|        return std::move(value());
 1664|  12.3M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1626|  13.8M|    {
 1627|  13.8M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  13.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  13.8M|        return this->get_value();
 1629|  13.8M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  450|  13.8M|    {
  451|  13.8M|        return m_value;
  452|  13.8M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1473|   997k|        : base(unexpect, std::move(e.error())),
 1474|   997k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   997k|    {
 1476|   997k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  444|  1.00M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.00M|          m_has_value(false)
  446|  1.00M|    {
  447|  1.00M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.72M|    {
 1177|  1.72M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1427|   723k|        : base(std::in_place, std::forward<U>(val)),
 1428|   723k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   723k|    {
 1430|   723k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|   723k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   723k|    {
  437|   723k|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1597|  1.72M|    {
 1598|  1.72M|        return has_value();
 1599|  1.72M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  484|  3.44M|    {
  485|  3.44M|        return m_has_value;
  486|  3.44M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1603|  1.00M|    {
 1604|  1.00M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.00M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.00M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.00M|        return this->get_unexpected().error();
 1606|  1.00M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  1.00M|    {
  468|  1.00M|        return m_unexpected;
  469|  1.00M|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1662|   719k|    {
 1663|   719k|        return std::move(value());
 1664|   719k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1626|   723k|    {
 1627|   723k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   723k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   723k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   723k|        return this->get_value();
 1629|   723k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  450|   723k|    {
  451|   723k|        return m_value;
  452|   723k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  2.20M|    {
 1837|  2.20M|        return detail::transform_error_impl(std::move(*this),
 1838|  2.20M|                                            std::forward<F>(f));
 1839|  2.20M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|  2.20M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  2.20M|    else {
 1333|  2.20M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.20M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.20M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.17M, False: 24.4k]
  |  |  ------------------
  ------------------
 1335|  2.20M|                   ? result(*std::forward<Exp>(exp))
 1336|  2.20M|                   : result(unexpect,
 1337|  24.4k|                            trivial_invoke(std::forward<F>(f),
 1338|  24.4k|                                           std::forward<Exp>(exp).error()));
 1339|  2.20M|    }
 1340|  2.20M|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  7.62M|    {
  485|  7.62M|        return m_has_value;
  486|  7.62M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|  2.17M|    {
 1663|  2.17M|        return std::move(value());
 1664|  2.17M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  2.63M|    {
 1627|  2.63M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.63M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.63M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.63M|        return this->get_value();
 1629|  2.63M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  2.63M|    {
  451|  2.63M|        return m_value;
  452|  2.63M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1613|  24.4k|    {
 1614|  24.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  24.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  24.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  24.4k|        return std::move(this->get_unexpected().error());
 1616|  24.4k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  25.0k|    {
  468|  25.0k|        return m_unexpected;
  469|  25.0k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1483|  24.4k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  24.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  24.4k|    {
 1486|  24.4k|    }
_ZN3scn2v310scan_errorC2Ev:
 3562|  16.1M|    constexpr scan_error() noexcept = default;
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|   316k|        : base(unexpect, std::move(e.error())),
 1474|   316k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   316k|    {
 1476|   316k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4279|  12.2M|    {
 4280|  12.2M|        return x.is_at_end();
 4281|  12.2M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4323|  26.4M|    {
 4324|  26.4M|        if (m_end) {
  ------------------
  |  Branch (4324:13): [True: 0, False: 26.4M]
  ------------------
 4325|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4326|      0|        }
 4327|  26.4M|        if (!m_begin) {
  ------------------
  |  Branch (4327:13): [True: 0, False: 26.4M]
  ------------------
 4328|      0|            return true;
 4329|      0|        }
 4330|  26.4M|        return !read_at_position();
 4331|  26.4M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4303|   101M|    {
 4304|   101M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|   101M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   101M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4305|       |
 4306|   101M|        if (!stores_parent()) {
  ------------------
  |  Branch (4306:13): [True: 0, False: 101M]
  ------------------
 4307|      0|            return true;
 4308|      0|        }
 4309|       |
 4310|   101M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|   101M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 89.0M, False: 12.1M]
  |  |  ------------------
  ------------------
 4311|  89.0M|            return true;
 4312|  89.0M|        }
 4313|       |
 4314|  24.0M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4314:16): [True: 12.1M, False: 11.8M]
  ------------------
 4315|  12.1M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4315:17): [True: 295k, False: 11.8M]
  ------------------
 4316|   295k|                return false;
 4317|   295k|            }
 4318|  12.1M|        }
 4319|  11.8M|        return true;
 4320|  12.1M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE15chars_availableEv:
 4080|   127M|    {
 4081|   127M|        return m_putback_buffer.size() + m_current_view.size();
 4082|   127M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4238|  34.2M|    {
 4239|  34.2M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  34.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  34.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4240|       |
 4241|  34.2M|        if (!stores_parent()) {
  ------------------
  |  Branch (4241:13): [True: 0, False: 34.2M]
  ------------------
 4242|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4243|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4244|      0|            return *ptr;
 4245|      0|        }
 4246|       |
 4247|  34.2M|        auto res = read_at_position();
 4248|  34.2M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  34.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  34.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|  34.2M|        return parent()->get_character_at(m_position);
 4250|  34.2M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16get_character_atEl:
 4111|  34.2M|    {
 4112|  34.2M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  34.2M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22.3M, False: 11.9M]
  |  |  ------------------
  ------------------
 4113|  34.2M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4114|  22.3M|            return m_putback_buffer[pos];
 4115|  22.3M|        }
 4116|  11.9M|        const auto start = pos - m_putback_buffer.size();
 4117|  11.9M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  11.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4118|  11.9M|        return m_current_view[start];
 4119|  11.9M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1427|  6.89M|        : base(std::in_place, std::forward<U>(val)),
 1428|  6.89M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  6.89M|    {
 1430|  6.89M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  6.89M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  6.89M|    {
  437|  6.89M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  6.94M|    {
 1177|  6.94M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  345|  83.6k|        : m_unexpected(std::forward<Err>(e))
  346|  83.6k|    {
  347|  83.6k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  83.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  83.6k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|  48.1k|        : base(unexpect, std::move(e.error())),
 1474|  48.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  48.1k|    {
 1476|  48.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  48.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  48.1k|          m_has_value(false)
  446|  48.1k|    {
  447|  48.1k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  354|   140k|        : m_unexpected(std::forward<Args>(args)...)
  355|   140k|    {
  356|   140k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   140k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|   140k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1597|  2.76M|    {
 1598|  2.76M|        return has_value();
 1599|  2.76M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1652|   457k|    {
 1653|   457k|        return value();
 1654|   457k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4273|  23.0M|    {
 4274|  23.0M|        return !(lhs == rhs);
 4275|  23.0M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4268|  24.7M|    {
 4269|  24.7M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4269:16): [True: 24.7M, False: 0]
  |  Branch (4269:46): [True: 2.89M, False: 21.8M]
  ------------------
 4270|  24.7M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4224|  40.6M|    {
 4225|  40.6M|        ++m_position;
 4226|  40.6M|        (void)read_at_position();
 4227|  40.6M|        return *this;
 4228|  40.6M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  345|  56.7k|        : m_unexpected(std::forward<Err>(e))
  346|  56.7k|    {
  347|  56.7k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  56.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  56.7k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  20.9k|        : base(unexpect, std::move(e.error())),
 1474|  20.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  20.9k|    {
 1476|  20.9k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|  20.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  20.9k|          m_has_value(false)
  446|  20.9k|    {
  447|  20.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.26M|    {
 1177|  3.26M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|  3.24M|        : base(std::in_place, std::forward<U>(val)),
 1428|  3.24M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  3.24M|    {
 1430|  3.24M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  435|  3.24M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  3.24M|    {
  437|  3.24M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|  3.26M|    {
 1598|  3.26M|        return has_value();
 1599|  3.26M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  6.53M|    {
  485|  6.53M|        return m_has_value;
  486|  6.53M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  20.9k|    {
 1604|  20.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  20.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  20.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  20.9k|        return this->get_unexpected().error();
 1606|  20.9k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  20.9k|    {
  468|  20.9k|        return m_unexpected;
  469|  20.9k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  3.24M|    {
 1663|  3.24M|        return std::move(value());
 1664|  3.24M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  3.24M|    {
 1627|  3.24M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.24M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.24M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.24M|        return this->get_value();
 1629|  3.24M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  3.24M|    {
  451|  3.24M|        return m_value;
  452|  3.24M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3333|  40.9M|    {
 3334|  40.9M|        return m_sentinel;
 3335|  40.9M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  345|  22.3k|        : m_unexpected(std::forward<Err>(e))
  346|  22.3k|    {
  347|  22.3k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  22.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  22.3k|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_errorEE5errorEv:
  360|  5.33M|    {
  361|  5.33M|        return m_unexpected;
  362|  5.33M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  354|   189k|        : m_unexpected(std::forward<Args>(args)...)
  355|   189k|    {
  356|   189k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   189k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|   189k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  345|  11.1M|        : m_unexpected(std::forward<Err>(e))
  346|  11.1M|    {
  347|  11.1M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  11.1M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  11.1M|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  360|  11.1M|    {
  361|  11.1M|        return m_unexpected;
  362|  11.1M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  354|  11.1M|        : m_unexpected(std::forward<Args>(args)...)
  355|  11.1M|    {
  356|  11.1M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  11.1M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  11.1M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|  83.6k|{
 1211|  83.6k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  83.6k|}
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  345|  83.6k|        : m_unexpected(std::forward<Err>(e))
  346|  83.6k|    {
  347|  83.6k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  83.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  83.6k|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JS8_EvEEDcOT_DpOT0_:
 1210|   408k|{
 1211|   408k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|   408k|}
_ZN3scn2v36detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  391|   118k|{
  392|   118k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|   118k|        T(std::forward<Args>(args)...);
  394|   118k|}
_ZNK3scn2v36ranges6detail6ssize_2fnclIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSF_:
 2961|   611k|    {
 2962|   611k|        return fn::impl(std::forward<T>(t));
 2963|   611k|    }
_ZN3scn2v36ranges6detail6ssize_2fn4implIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISF_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSF_EEEEE15difference_typeEE4typeELm8EElSO_E4typeE_EEOSF_:
 2952|   611k|    {
 2953|   611k|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 2954|   611k|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSF_:
 2929|   611k|    {
 2930|   611k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|   611k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESG_E4typeEOSH_NS0_6detail12priority_tagILm2EEE:
 2895|   611k|    {
 2896|   611k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   611k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|   611k|    }
_ZN3scn2v36detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  397|   118k|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|   118k|    else {
  404|   118k|        p->~T();
  405|   118k|    }
  406|   118k|}
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1603|    588|    {
 1604|    588|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    588|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    588|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    588|        return this->get_unexpected().error();
 1606|    588|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|  21.9k|        : base(unexpect, std::move(e.error())),
 1474|  21.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  21.9k|    {
 1476|  21.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  43.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  43.2k|          m_has_value(false)
  446|  43.2k|    {
  447|  43.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  8.97M|    {
 1177|  8.97M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1427|   736k|        : base(std::in_place, std::forward<U>(val)),
 1428|   736k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   736k|    {
 1430|   736k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  435|   736k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   736k|    {
  437|   736k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  4.64M|        : base(unexpect, std::move(e.error())),
 1474|  4.64M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  4.64M|    {
 1476|  4.64M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|  4.64M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  4.64M|          m_has_value(false)
  446|  4.64M|    {
  447|  4.64M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1597|  7.30M|    {
 1598|  7.30M|        return has_value();
 1599|  7.30M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  15.3M|    {
  485|  15.3M|        return m_has_value;
  486|  15.3M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1603|  2.01M|    {
 1604|  2.01M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.01M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.01M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.01M|        return this->get_unexpected().error();
 1606|  2.01M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  2.10M|    {
  468|  2.10M|        return m_unexpected;
  469|  2.10M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1427|  2.18M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.18M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.18M|    {
 1430|  2.18M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  435|  2.18M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.18M|    {
  437|  2.18M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.18M|    {
 1177|  2.18M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1652|   756k|    {
 1653|   756k|        return value();
 1654|   756k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  4.28M|    {
 1627|  4.28M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.28M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.28M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.28M|        return this->get_value();
 1629|  4.28M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  4.28M|    {
  451|  4.28M|        return m_value;
  452|  4.28M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1597|  2.18M|    {
 1598|  2.18M|        return has_value();
 1599|  2.18M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  484|  4.36M|    {
  485|  4.36M|        return m_has_value;
  486|  4.36M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.18M|    {
 1177|  2.18M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|  2.18M|    {
 1663|  2.18M|        return std::move(value());
 1664|  2.18M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|  2.18M|    {
 1627|  2.18M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.18M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.18M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.18M|        return this->get_value();
 1629|  2.18M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  450|  2.18M|    {
  451|  2.18M|        return m_value;
  452|  2.18M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  1.97M|    {
 1837|  1.97M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.97M|                                            std::forward<F>(f));
 1839|  1.97M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|  1.97M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.97M|    else {
 1333|  1.97M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.97M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.97M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.95M, False: 21.3k]
  |  |  ------------------
  ------------------
 1335|  1.97M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.97M|                   : result(unexpect,
 1337|  21.3k|                            trivial_invoke(std::forward<F>(f),
 1338|  21.3k|                                           std::forward<Exp>(exp).error()));
 1339|  1.97M|    }
 1340|  1.97M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1427|  3.54M|        : base(std::in_place, std::forward<U>(val)),
 1428|  3.54M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  3.54M|    {
 1430|  3.54M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  3.54M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  3.54M|    {
  437|  3.54M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1483|  21.3k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  21.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  21.3k|    {
 1486|  21.3k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  3.52M|    {
 1663|  3.52M|        return std::move(value());
 1664|  3.52M|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEEC2IS8_vEEOT_:
 1427|  2.18M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.18M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.18M|    {
 1430|  2.18M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  435|  2.18M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.18M|    {
  437|  2.18M|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|  2.18M|    {
 1837|  2.18M|        return detail::transform_error_impl(std::move(*this),
 1838|  2.18M|                                            std::forward<F>(f));
 1839|  2.18M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS4_9eof_errorEEERFNS0_10scan_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1322|  2.18M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  2.18M|    else {
 1333|  2.18M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.18M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.18M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.18M, False: 0]
  |  |  ------------------
  ------------------
 1335|  2.18M|                   ? result(*std::forward<Exp>(exp))
 1336|  2.18M|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  2.18M|    }
 1340|  2.18M|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EE9has_valueEv:
  484|  4.36M|    {
  485|  4.36M|        return m_has_value;
  486|  4.36M|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|  2.18M|    {
 1663|  2.18M|        return std::move(value());
 1664|  2.18M|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|  2.18M|    {
 1627|  2.18M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.18M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.18M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.18M|        return this->get_value();
 1629|  2.18M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EE9get_valueEv:
  450|  2.18M|    {
  451|  2.18M|        return m_value;
  452|  2.18M|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|  2.18M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.18M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.18M|    {
 1430|  2.18M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  435|  2.18M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.18M|    {
  437|  2.18M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.18M|    {
 1177|  2.18M|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEcvbEv:
 1597|  2.18M|    {
 1598|  2.18M|        return has_value();
 1599|  2.18M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  4.36M|    {
  485|  4.36M|        return m_has_value;
  486|  4.36M|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|  2.18M|    {
 1663|  2.18M|        return std::move(value());
 1664|  2.18M|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|  2.18M|    {
 1627|  2.18M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.18M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.18M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.18M|        return this->get_value();
 1629|  2.18M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.18M|    {
  451|  2.18M|        return m_value;
  452|  2.18M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|  1.66M|    {
 1837|  1.66M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.66M|                                            std::forward<F>(f));
 1839|  1.66M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1322|  1.66M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.66M|    else {
 1333|  1.66M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.66M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.66M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.57M, False: 86.8k]
  |  |  ------------------
  ------------------
 1335|  1.66M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.66M|                   : result(unexpect,
 1337|  86.8k|                            trivial_invoke(std::forward<F>(f),
 1338|  86.8k|                                           std::forward<Exp>(exp).error()));
 1339|  1.66M|    }
 1340|  1.66M|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1613|  86.8k|    {
 1614|  86.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  86.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  86.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  86.8k|        return std::move(this->get_unexpected().error());
 1616|  86.8k|    }
_ZN3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEC2ISF_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1473|  9.56k|        : base(unexpect, std::move(e.error())),
 1474|  9.56k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  9.56k|    {
 1476|  9.56k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EEC2IJSF_EvEENS0_10unexpect_tEDpOT_:
  624|  9.56k|        : m_has_value(false)
  625|  9.56k|    {
  626|  9.56k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  9.56k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESF_EEEvDpOT_:
  688|  9.56k|    {
  689|  9.56k|        scn::detail::construct_at(unexpected_ptr(),
  690|  9.56k|                                  std::forward<Args>(args)...);
  691|  9.56k|        m_has_value = false;
  692|  9.56k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  28.6k|    {
  718|  28.6k|        return reinterpret_cast<unexpected<E>*>(
  719|  28.6k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  28.6k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  28.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   322k|    {
 1177|   322k|    }
_ZN3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEC2ISE_vEEOT_:
 1427|   312k|        : base(std::in_place, std::forward<U>(val)),
 1428|   312k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   312k|    {
 1430|   312k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS3_10in_place_tEDpOT_:
  614|   312k|        : m_has_value(true)
  615|   312k|    {
  616|   312k|        construct(std::forward<Args>(args)...);
  617|   312k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9constructIJSE_EEEvDpOT_:
  681|   312k|    {
  682|   312k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|   312k|        m_has_value = true;
  684|   312k|    }
_ZN3scn2v36detail12construct_atINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEEJSE_EEEPT_SG_DpOT0_:
  391|   312k|{
  392|   312k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|   312k|        T(std::forward<Args>(args)...);
  394|   312k|}
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9value_ptrEv:
  705|   938k|    {
  706|   938k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|   938k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|   938k|    }
_ZNK3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEcvbEv:
 1597|   322k|    {
 1598|   322k|        return has_value();
 1599|   322k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9has_valueEv:
  674|   966k|    {
  675|   966k|        return m_has_value;
  676|   966k|    }
_ZNR3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEE5errorEv:
 1603|  9.56k|    {
 1604|  9.56k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  9.56k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.56k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  9.56k|        return this->get_unexpected().error();
 1606|  9.56k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|  9.56k|    {
  658|  9.56k|        return *unexpected_ptr();
  659|  9.56k|    }
_ZNO3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEdeISE_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSJ_v:
 1662|   312k|    {
 1663|   312k|        return std::move(value());
 1664|   312k|    }
_ZNR3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEE5valueISE_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1626|   312k|    {
 1627|   312k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   312k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   312k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   312k|        return this->get_value();
 1629|   312k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9get_valueEv:
  640|   312k|    {
  641|   312k|        return *value_ptr();
  642|   312k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3329|  3.81M|    {
 3330|  3.81M|        return m_iterator;
 3331|  3.81M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3333|  3.81M|    {
 3334|  3.81M|        return m_sentinel;
 3335|  3.81M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EED2Ev:
  630|   322k|    {
  631|   322k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 312k, False: 9.56k]
  ------------------
  632|   312k|            destroy_value();
  633|   312k|        }
  634|  9.56k|        else {
  635|  9.56k|            destroy_unexpected();
  636|  9.56k|        }
  637|   322k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|   312k|    {
  696|   312k|        scn::detail::destroy_at(value_ptr());
  697|   312k|    }
_ZN3scn2v36detail10destroy_atINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEEEEvPT_:
  397|   312k|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|   312k|    else {
  404|   312k|        p->~T();
  405|   312k|    }
  406|   312k|}
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  9.56k|    {
  700|  9.56k|        scn::detail::destroy_at(unexpected_ptr());
  701|  9.56k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|  7.77M|    {
 1598|  7.77M|        return has_value();
 1599|  7.77M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  15.5M|    {
  485|  15.5M|        return m_has_value;
  486|  15.5M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|   429k|    {
 1604|   429k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   429k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   429k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   429k|        return this->get_unexpected().error();
 1606|   429k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   429k|    {
  468|   429k|        return m_unexpected;
  469|   429k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|  5.77M|    {
 1663|  5.77M|        return std::move(value());
 1664|  5.77M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|  7.34M|    {
 1627|  7.34M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  7.34M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.34M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  7.34M|        return this->get_value();
 1629|  7.34M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|  7.34M|    {
  451|  7.34M|        return m_value;
  452|  7.34M|    }
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  3.15M|{
  326|  3.15M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  3.15M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  3.15M|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3314|  1.58M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.58M|    static_cast<    \
  |  |  929|  1.58M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.58M|    static_cast<    \
  |  |  929|  1.58M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3315|  1.58M|    {
 3316|  1.58M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4290|  14.1M|    {
 4291|  14.1M|        return !x.is_at_end();
 4292|  14.1M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  25.0k|        : base(unexpect, std::move(e.error())),
 1474|  25.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  25.0k|    {
 1476|  25.0k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  25.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  25.0k|          m_has_value(false)
  446|  25.0k|    {
  447|  25.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  4.96M|    {
 1177|  4.96M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1427|  4.93M|        : base(std::in_place, std::forward<U>(val)),
 1428|  4.93M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  4.93M|    {
 1430|  4.93M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  4.93M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  4.93M|    {
  437|  4.93M|    }
_ZNK3scn2v38expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1597|  2.76M|    {
 1598|  2.76M|        return has_value();
 1599|  2.76M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1652|   455k|    {
 1653|   455k|        return value();
 1654|   455k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  18.9k|        : base(unexpect, std::move(e.error())),
 1474|  18.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  18.9k|    {
 1476|  18.9k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  444|  18.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  18.9k|          m_has_value(false)
  446|  18.9k|    {
  447|  18.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.25M|    {
 1177|  3.25M|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|  3.23M|        : base(std::in_place, std::forward<U>(val)),
 1428|  3.23M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  3.23M|    {
 1430|  3.23M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  435|  3.23M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  3.23M|    {
  437|  3.23M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1597|  3.25M|    {
 1598|  3.25M|        return has_value();
 1599|  3.25M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  484|  6.50M|    {
  485|  6.50M|        return m_has_value;
  486|  6.50M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1603|  18.9k|    {
 1604|  18.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  18.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  18.9k|        return this->get_unexpected().error();
 1606|  18.9k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  18.9k|    {
  468|  18.9k|        return m_unexpected;
  469|  18.9k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|  3.23M|    {
 1663|  3.23M|        return std::move(value());
 1664|  3.23M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|  3.23M|    {
 1627|  3.23M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.23M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.23M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.23M|        return this->get_value();
 1629|  3.23M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  450|  3.23M|    {
  451|  3.23M|        return m_value;
  452|  3.23M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1603|    588|    {
 1604|    588|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    588|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    588|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    588|        return this->get_unexpected().error();
 1606|    588|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  21.4k|        : base(unexpect, std::move(e.error())),
 1474|  21.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  21.4k|    {
 1476|  21.4k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  21.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  21.4k|          m_has_value(false)
  446|  21.4k|    {
  447|  21.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  5.31M|    {
 1177|  5.31M|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1427|   732k|        : base(std::in_place, std::forward<U>(val)),
 1428|   732k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   732k|    {
 1430|   732k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  435|   732k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   732k|    {
  437|   732k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  4.54M|        : base(unexpect, std::move(e.error())),
 1474|  4.54M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  4.54M|    {
 1476|  4.54M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|  4.54M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  4.54M|          m_has_value(false)
  446|  4.54M|    {
  447|  4.54M|    }
_ZNK3scn2v38expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1597|  5.31M|    {
 1598|  5.31M|        return has_value();
 1599|  5.31M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  8.05M|    {
  485|  8.05M|        return m_has_value;
  486|  8.05M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1603|  1.99M|    {
 1604|  1.99M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.99M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.99M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.99M|        return this->get_unexpected().error();
 1606|  1.99M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  1.99M|    {
  468|  1.99M|        return m_unexpected;
  469|  1.99M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1427|  2.17M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.17M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.17M|    {
 1430|  2.17M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|  2.17M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.17M|    {
  437|  2.17M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.17M|    {
 1177|  2.17M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1652|   751k|    {
 1653|   751k|        return value();
 1654|   751k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|   751k|    {
 1627|   751k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   751k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   751k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   751k|        return this->get_value();
 1629|   751k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|   751k|    {
  451|   751k|        return m_value;
  452|   751k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  2.17M|    {
 1598|  2.17M|        return has_value();
 1599|  2.17M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|  4.35M|    {
  485|  4.35M|        return m_has_value;
  486|  4.35M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.17M|    {
 1177|  2.17M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  2.17M|    {
 1663|  2.17M|        return std::move(value());
 1664|  2.17M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  2.17M|    {
 1627|  2.17M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.17M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.17M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.17M|        return this->get_value();
 1629|  2.17M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|  2.17M|    {
  451|  2.17M|        return m_value;
  452|  2.17M|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1427|  18.8k|        : base(std::in_place, std::forward<U>(val)),
 1428|  18.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  18.8k|    {
 1430|  18.8k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  18.8k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  18.8k|    {
  437|  18.8k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1427|  2.17M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.17M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.17M|    {
 1430|  2.17M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  435|  2.17M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.17M|    {
  437|  2.17M|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  2.17M|    {
 1837|  2.17M|        return detail::transform_error_impl(std::move(*this),
 1838|  2.17M|                                            std::forward<F>(f));
 1839|  2.17M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1322|  2.17M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  2.17M|    else {
 1333|  2.17M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.17M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.17M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.17M, False: 0]
  |  |  ------------------
  ------------------
 1335|  2.17M|                   ? result(*std::forward<Exp>(exp))
 1336|  2.17M|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  2.17M|    }
 1340|  2.17M|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  484|  4.35M|    {
  485|  4.35M|        return m_has_value;
  486|  4.35M|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  2.17M|    {
 1663|  2.17M|        return std::move(value());
 1664|  2.17M|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  2.17M|    {
 1627|  2.17M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.17M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.17M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.17M|        return this->get_value();
 1629|  2.17M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  450|  2.17M|    {
  451|  2.17M|        return m_value;
  452|  2.17M|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|  2.17M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.17M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.17M|    {
 1430|  2.17M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  435|  2.17M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.17M|    {
  437|  2.17M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.17M|    {
 1177|  2.17M|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1597|  2.17M|    {
 1598|  2.17M|        return has_value();
 1599|  2.17M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  484|  4.35M|    {
  485|  4.35M|        return m_has_value;
  486|  4.35M|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  2.17M|    {
 1663|  2.17M|        return std::move(value());
 1664|  2.17M|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  2.17M|    {
 1627|  2.17M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.17M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.17M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.17M|        return this->get_value();
 1629|  2.17M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.17M|    {
  451|  2.17M|        return m_value;
  452|  2.17M|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISD_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISD_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SD_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1473|  10.0k|        : base(unexpect, std::move(e.error())),
 1474|  10.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  10.0k|    {
 1476|  10.0k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  624|  10.0k|        : m_has_value(false)
  625|  10.0k|    {
  626|  10.0k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  10.0k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESE_EEEvDpOT_:
  688|  10.0k|    {
  689|  10.0k|        scn::detail::construct_at(unexpected_ptr(),
  690|  10.0k|                                  std::forward<Args>(args)...);
  691|  10.0k|        m_has_value = false;
  692|  10.0k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  30.0k|    {
  718|  30.0k|        return reinterpret_cast<unexpected<E>*>(
  719|  30.0k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  30.0k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  30.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   321k|    {
 1177|   321k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISC_vEEOT_:
 1427|   311k|        : base(std::in_place, std::forward<U>(val)),
 1428|   311k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   311k|    {
 1430|   311k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSD_EvEENS3_10in_place_tEDpOT_:
  614|   311k|        : m_has_value(true)
  615|   311k|    {
  616|   311k|        construct(std::forward<Args>(args)...);
  617|   311k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9constructIJSD_EEEvDpOT_:
  681|   311k|    {
  682|   311k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|   311k|        m_has_value = true;
  684|   311k|    }
_ZN3scn2v36detail12construct_atINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEEJSD_EEEPT_SF_DpOT0_:
  391|   311k|{
  392|   311k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|   311k|        T(std::forward<Args>(args)...);
  394|   311k|}
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9value_ptrEv:
  705|   933k|    {
  706|   933k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|   933k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|   933k|    }
_ZNK3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEcvbEv:
 1597|   321k|    {
 1598|   321k|        return has_value();
 1599|   321k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9has_valueEv:
  674|   963k|    {
  675|   963k|        return m_has_value;
  676|   963k|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5errorEv:
 1603|  10.0k|    {
 1604|  10.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  10.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  10.0k|        return this->get_unexpected().error();
 1606|  10.0k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|  10.0k|    {
  658|  10.0k|        return *unexpected_ptr();
  659|  10.0k|    }
_ZNO3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEdeISC_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSH_v:
 1662|   311k|    {
 1663|   311k|        return std::move(value());
 1664|   311k|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5valueISC_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1626|   311k|    {
 1627|   311k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   311k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   311k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   311k|        return this->get_value();
 1629|   311k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9get_valueEv:
  640|   311k|    {
  641|   311k|        return *value_ptr();
  642|   311k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EED2Ev:
  630|   321k|    {
  631|   321k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 311k, False: 10.0k]
  ------------------
  632|   311k|            destroy_value();
  633|   311k|        }
  634|  10.0k|        else {
  635|  10.0k|            destroy_unexpected();
  636|  10.0k|        }
  637|   321k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|   311k|    {
  696|   311k|        scn::detail::destroy_at(value_ptr());
  697|   311k|    }
_ZN3scn2v36detail10destroy_atINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEEEEvPT_:
  397|   311k|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|   311k|    else {
  404|   311k|        p->~T();
  405|   311k|    }
  406|   311k|}
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  10.0k|    {
  700|  10.0k|        scn::detail::destroy_at(unexpected_ptr());
  701|  10.0k|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  3.86M|    {
 2855|  3.86M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  3.86M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  3.86M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  3.86M|    {
 2836|  3.86M|        return t.data();
 2837|  3.86M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1473|  1.57M|        : base(unexpect, std::move(e.error())),
 1474|  1.57M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.57M|    {
 1476|  1.57M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  444|  1.57M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.57M|          m_has_value(false)
  446|  1.57M|    {
  447|  1.57M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  5.61M|    {
 1177|  5.61M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1427|  4.04M|        : base(std::in_place, std::forward<U>(val)),
 1428|  4.04M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  4.04M|    {
 1430|  4.04M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  435|  4.04M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  4.04M|    {
  437|  4.04M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1652|  1.56M|    {
 1653|  1.56M|        return value();
 1654|  1.56M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1652|  1.55M|    {
 1653|  1.55M|        return value();
 1654|  1.55M|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3646|  1.66M|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|  1.66M|    static_cast<    \
  |  |  929|  1.66M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3647|  1.66M|    {
 3648|  1.66M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|   673k|        : base(unexpect, std::move(e.error())),
 1474|   673k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   673k|    {
 1476|   673k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4279|  1.75M|    {
 4280|  1.75M|        return x.is_at_end();
 4281|  1.75M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4323|   105M|    {
 4324|   105M|        if (m_end) {
  ------------------
  |  Branch (4324:13): [True: 0, False: 105M]
  ------------------
 4325|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4326|      0|        }
 4327|   105M|        if (!m_begin) {
  ------------------
  |  Branch (4327:13): [True: 0, False: 105M]
  ------------------
 4328|      0|            return true;
 4329|      0|        }
 4330|   105M|        return !read_at_position();
 4331|   105M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4303|   210G|    {
 4304|   210G|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|   210G|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   210G|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4305|       |
 4306|   210G|        if (!stores_parent()) {
  ------------------
  |  Branch (4306:13): [True: 0, False: 210G]
  ------------------
 4307|      0|            return true;
 4308|      0|        }
 4309|       |
 4310|   210G|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|   210G|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 210G, False: 103M]
  |  |  ------------------
  ------------------
 4311|   210G|            return true;
 4312|   210G|        }
 4313|       |
 4314|   206M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4314:16): [True: 103M, False: 103M]
  ------------------
 4315|   103M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4315:17): [True: 174k, False: 103M]
  ------------------
 4316|   174k|                return false;
 4317|   174k|            }
 4318|   103M|        }
 4319|   103M|        return true;
 4320|   103M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE15chars_availableEv:
 4080|   210G|    {
 4081|   210G|        return m_putback_buffer.size() + m_current_view.size();
 4082|   210G|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4238|   105M|    {
 4239|   105M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|   105M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   105M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4240|       |
 4241|   105M|        if (!stores_parent()) {
  ------------------
  |  Branch (4241:13): [True: 0, False: 105M]
  ------------------
 4242|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4243|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4244|      0|            return *ptr;
 4245|      0|        }
 4246|       |
 4247|   105M|        auto res = read_at_position();
 4248|   105M|        SCN_EXPECT(res);
  ------------------
  |  |  924|   105M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   105M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|   105M|        return parent()->get_character_at(m_position);
 4250|   105M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16get_character_atEl:
 4111|   105M|    {
 4112|   105M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|   105M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.08M, False: 103M]
  |  |  ------------------
  ------------------
 4113|   105M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4114|  2.08M|            return m_putback_buffer[pos];
 4115|  2.08M|        }
 4116|   103M|        const auto start = pos - m_putback_buffer.size();
 4117|   103M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|   103M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   103M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4118|   103M|        return m_current_view[start];
 4119|   103M|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3806|   759k|{
 3807|       |    if constexpr (sizeof(U) == 1) {
 3808|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|       |    }
 3810|       |    else if constexpr (sizeof(U) == 2) {
 3811|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|       |    }
 3813|   759k|    else {
 3814|       |        // utf-32
 3815|   759k|        static_assert(sizeof(U) == 4);
 3816|   759k|        SCN_UNUSED(ch);
  ------------------
  |  |  909|   759k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3817|   759k|        return 1;
 3818|   759k|    }
 3819|   759k|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1427|  1.12M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.12M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.12M|    {
 1430|  1.12M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  1.12M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.12M|    {
  437|  1.12M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.15M|    {
 1177|  1.15M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|  33.6k|        : base(unexpect, std::move(e.error())),
 1474|  33.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  33.6k|    {
 1476|  33.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  33.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  33.6k|          m_has_value(false)
  446|  33.6k|    {
  447|  33.6k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1597|   477k|    {
 1598|   477k|        return has_value();
 1599|   477k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1652|  2.67k|    {
 1653|  2.67k|        return value();
 1654|  2.67k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4273|   210G|    {
 4274|   210G|        return !(lhs == rhs);
 4275|   210G|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4268|   210G|    {
 4269|   210G|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4269:16): [True: 210G, False: 0]
  |  Branch (4269:46): [True: 102M, False: 209G]
  ------------------
 4270|   210G|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4224|   210G|    {
 4225|   210G|        ++m_position;
 4226|   210G|        (void)read_at_position();
 4227|   210G|        return *this;
 4228|   210G|    }
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|   759k|{
 4013|       |    if constexpr (sizeof(CharT) == 1) {
 4014|       |        return decode_utf8_code_point_exhaustive(input);
 4015|       |    }
 4016|       |    else if constexpr (sizeof(CharT) == 2) {
 4017|       |        return decode_utf16_code_point_exhaustive(input);
 4018|       |    }
 4019|   759k|    else {
 4020|   759k|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|   759k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   759k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4021|   759k|        auto cp = static_cast<char32_t>(input.front());
 4022|   759k|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   759k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 349k, False: 409k]
  |  |  ------------------
  ------------------
 4023|   349k|            return invalid_code_point;
 4024|   349k|        }
 4025|   409k|        return cp;
 4026|   759k|    }
 4027|   759k|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  1.89k|        : base(unexpect, std::move(e.error())),
 1474|  1.89k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.89k|    {
 1476|  1.89k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|  1.89k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.89k|          m_has_value(false)
  446|  1.89k|    {
  447|  1.89k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   305k|    {
 1177|   305k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   303k|        : base(std::in_place, std::forward<U>(val)),
 1428|   303k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   303k|    {
 1430|   303k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  435|   303k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   303k|    {
  437|   303k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|   305k|    {
 1598|   305k|        return has_value();
 1599|   305k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|   611k|    {
  485|   611k|        return m_has_value;
  486|   611k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  1.89k|    {
 1604|  1.89k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.89k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.89k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.89k|        return this->get_unexpected().error();
 1606|  1.89k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  1.89k|    {
  468|  1.89k|        return m_unexpected;
  469|  1.89k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|   303k|    {
 1663|   303k|        return std::move(value());
 1664|   303k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|   303k|    {
 1627|   303k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   303k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   303k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   303k|        return this->get_value();
 1629|   303k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|   303k|    {
  451|   303k|        return m_value;
  452|   303k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3333|   106M|    {
 3334|   106M|        return m_sentinel;
 3335|   106M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1603|    120|    {
 1604|    120|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    120|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    120|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    120|        return this->get_unexpected().error();
 1606|    120|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|  31.2k|        : base(unexpect, std::move(e.error())),
 1474|  31.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  31.2k|    {
 1476|  31.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  62.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  62.4k|          m_has_value(false)
  446|  62.4k|    {
  447|  62.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.50M|    {
 1177|  1.50M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1427|  3.07k|        : base(std::in_place, std::forward<U>(val)),
 1428|  3.07k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  3.07k|    {
 1430|  3.07k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  435|  3.07k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  3.07k|    {
  437|  3.07k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  1.16M|        : base(unexpect, std::move(e.error())),
 1474|  1.16M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.16M|    {
 1476|  1.16M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|  1.16M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.16M|          m_has_value(false)
  446|  1.16M|    {
  447|  1.16M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1597|  1.18M|    {
 1598|  1.18M|        return has_value();
 1599|  1.18M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  2.51M|    {
  485|  2.51M|        return m_has_value;
  486|  2.51M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1603|   405k|    {
 1604|   405k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   405k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   405k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   405k|        return this->get_unexpected().error();
 1606|   405k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|   727k|    {
  468|   727k|        return m_unexpected;
  469|   727k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1427|   377k|        : base(std::in_place, std::forward<U>(val)),
 1428|   377k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   377k|    {
 1430|   377k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  435|   377k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   377k|    {
  437|   377k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   377k|    {
 1177|   377k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1652|  3.07k|    {
 1653|  3.07k|        return value();
 1654|  3.07k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|   277k|    {
 1627|   277k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   277k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   277k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   277k|        return this->get_value();
 1629|   277k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  450|   277k|    {
  451|   277k|        return m_value;
  452|   277k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1597|   377k|    {
 1598|   377k|        return has_value();
 1599|   377k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  484|   754k|    {
  485|   754k|        return m_has_value;
  486|   754k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   377k|    {
 1177|   377k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|   377k|    {
 1663|   377k|        return std::move(value());
 1664|   377k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|   377k|    {
 1627|   377k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   377k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   377k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   377k|        return this->get_value();
 1629|   377k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  450|   377k|    {
  451|   377k|        return m_value;
  452|   377k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   301k|    {
 1837|   301k|        return detail::transform_error_impl(std::move(*this),
 1838|   301k|                                            std::forward<F>(f));
 1839|   301k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|   301k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   301k|    else {
 1333|   301k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   301k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   301k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 270k, False: 31.1k]
  |  |  ------------------
  ------------------
 1335|   301k|                   ? result(*std::forward<Exp>(exp))
 1336|   301k|                   : result(unexpect,
 1337|  31.1k|                            trivial_invoke(std::forward<F>(f),
 1338|  31.1k|                                           std::forward<Exp>(exp).error()));
 1339|   301k|    }
 1340|   301k|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1427|   274k|        : base(std::in_place, std::forward<U>(val)),
 1428|   274k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   274k|    {
 1430|   274k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|   274k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   274k|    {
  437|   274k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1483|  31.1k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  31.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  31.1k|    {
 1486|  31.1k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|   274k|    {
 1663|   274k|        return std::move(value());
 1664|   274k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEEC2IS8_vEEOT_:
 1427|   377k|        : base(std::in_place, std::forward<U>(val)),
 1428|   377k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   377k|    {
 1430|   377k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  435|   377k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   377k|    {
  437|   377k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|   377k|    {
 1837|   377k|        return detail::transform_error_impl(std::move(*this),
 1838|   377k|                                            std::forward<F>(f));
 1839|   377k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS4_9eof_errorEEERFNS0_10scan_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1322|   377k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   377k|    else {
 1333|   377k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   377k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   377k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 377k, False: 0]
  |  |  ------------------
  ------------------
 1335|   377k|                   ? result(*std::forward<Exp>(exp))
 1336|   377k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   377k|    }
 1340|   377k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EE9has_valueEv:
  484|   754k|    {
  485|   754k|        return m_has_value;
  486|   754k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|   377k|    {
 1663|   377k|        return std::move(value());
 1664|   377k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|   377k|    {
 1627|   377k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   377k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   377k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   377k|        return this->get_value();
 1629|   377k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EE9get_valueEv:
  450|   377k|    {
  451|   377k|        return m_value;
  452|   377k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   377k|        : base(std::in_place, std::forward<U>(val)),
 1428|   377k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   377k|    {
 1430|   377k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  435|   377k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   377k|    {
  437|   377k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   377k|    {
 1177|   377k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEcvbEv:
 1597|   377k|    {
 1598|   377k|        return has_value();
 1599|   377k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   754k|    {
  485|   754k|        return m_has_value;
  486|   754k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|   377k|    {
 1663|   377k|        return std::move(value());
 1664|   377k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|   377k|    {
 1627|   377k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   377k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   377k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   377k|        return this->get_value();
 1629|   377k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   377k|    {
  451|   377k|        return m_value;
  452|   377k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|   325k|    {
 1837|   325k|        return detail::transform_error_impl(std::move(*this),
 1838|   325k|                                            std::forward<F>(f));
 1839|   325k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1322|   325k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   325k|    else {
 1333|   325k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   325k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   325k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.79k, False: 321k]
  |  |  ------------------
  ------------------
 1335|   325k|                   ? result(*std::forward<Exp>(exp))
 1336|   325k|                   : result(unexpect,
 1337|   321k|                            trivial_invoke(std::forward<F>(f),
 1338|   321k|                                           std::forward<Exp>(exp).error()));
 1339|   325k|    }
 1340|   325k|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1613|   321k|    {
 1614|   321k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   321k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   321k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|   321k|        return std::move(this->get_unexpected().error());
 1616|   321k|    }
_ZN3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEC2ISI_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1473|  49.3k|        : base(unexpect, std::move(e.error())),
 1474|  49.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  49.3k|    {
 1476|  49.3k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  624|  49.3k|        : m_has_value(false)
  625|  49.3k|    {
  626|  49.3k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  49.3k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESI_EEEvDpOT_:
  688|  49.3k|    {
  689|  49.3k|        scn::detail::construct_at(unexpected_ptr(),
  690|  49.3k|                                  std::forward<Args>(args)...);
  691|  49.3k|        m_has_value = false;
  692|  49.3k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|   148k|    {
  718|   148k|        return reinterpret_cast<unexpected<E>*>(
  719|   148k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|   148k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|   148k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  50.1k|    {
 1177|  50.1k|    }
_ZN3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1427|    760|        : base(std::in_place, std::forward<U>(val)),
 1428|    760|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    760|    {
 1430|    760|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS3_10in_place_tEDpOT_:
  614|    760|        : m_has_value(true)
  615|    760|    {
  616|    760|        construct(std::forward<Args>(args)...);
  617|    760|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9constructIJSH_EEEvDpOT_:
  681|    760|    {
  682|    760|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|    760|        m_has_value = true;
  684|    760|    }
_ZN3scn2v36detail12construct_atINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEEJSH_EEEPT_SJ_DpOT0_:
  391|    760|{
  392|    760|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|    760|        T(std::forward<Args>(args)...);
  394|    760|}
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  2.28k|    {
  706|  2.28k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  2.28k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  2.28k|    }
_ZNK3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|  50.1k|    {
 1598|  50.1k|        return has_value();
 1599|  50.1k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|   150k|    {
  675|   150k|        return m_has_value;
  676|   150k|    }
_ZNR3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1603|  49.3k|    {
 1604|  49.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  49.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  49.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  49.3k|        return this->get_unexpected().error();
 1606|  49.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|  49.3k|    {
  658|  49.3k|        return *unexpected_ptr();
  659|  49.3k|    }
_ZNO3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEdeISH_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSM_v:
 1662|    760|    {
 1663|    760|        return std::move(value());
 1664|    760|    }
_ZNR3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEE5valueISH_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1626|    760|    {
 1627|    760|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    760|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    760|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    760|        return this->get_value();
 1629|    760|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|    760|    {
  641|    760|        return *value_ptr();
  642|    760|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3329|  8.73k|    {
 3330|  8.73k|        return m_iterator;
 3331|  8.73k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3333|  8.73k|    {
 3334|  8.73k|        return m_sentinel;
 3335|  8.73k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  50.1k|    {
  631|  50.1k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 760, False: 49.3k]
  ------------------
  632|    760|            destroy_value();
  633|    760|        }
  634|  49.3k|        else {
  635|  49.3k|            destroy_unexpected();
  636|  49.3k|        }
  637|  50.1k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|    760|    {
  696|    760|        scn::detail::destroy_at(value_ptr());
  697|    760|    }
_ZN3scn2v36detail10destroy_atINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEEEEvPT_:
  397|    760|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|    760|    else {
  404|    760|        p->~T();
  405|    760|    }
  406|    760|}
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  49.3k|    {
  700|  49.3k|        scn::detail::destroy_at(unexpected_ptr());
  701|  49.3k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|  1.38M|    {
 1598|  1.38M|        return has_value();
 1599|  1.38M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.77M|    {
  485|  2.77M|        return m_has_value;
  486|  2.77M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|   997k|    {
 1604|   997k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   997k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   997k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   997k|        return this->get_unexpected().error();
 1606|   997k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   997k|    {
  468|   997k|        return m_unexpected;
  469|   997k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|   385k|    {
 1663|   385k|        return std::move(value());
 1664|   385k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|   388k|    {
 1627|   388k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   388k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   388k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   388k|        return this->get_value();
 1629|   388k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|   388k|    {
  451|   388k|        return m_value;
  452|   388k|    }
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  7.58k|{
  304|  7.58k|    return p;
  305|  7.58k|}
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  7.58k|{
  326|  7.58k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  7.58k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  7.58k|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3314|  3.94k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  3.94k|    static_cast<    \
  |  |  929|  3.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  3.94k|    static_cast<    \
  |  |  929|  3.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3315|  3.94k|    {
 3316|  3.94k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4290|   103M|    {
 4291|   103M|        return !x.is_at_end();
 4292|   103M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  33.6k|        : base(unexpect, std::move(e.error())),
 1474|  33.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  33.6k|    {
 1476|  33.6k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  33.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  33.6k|          m_has_value(false)
  446|  33.6k|    {
  447|  33.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.15M|    {
 1177|  1.15M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1427|  1.12M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.12M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.12M|    {
 1430|  1.12M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  1.12M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.12M|    {
  437|  1.12M|    }
_ZNK3scn2v38expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1597|   477k|    {
 1598|   477k|        return has_value();
 1599|   477k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  1.84M|    {
  485|  1.84M|        return m_has_value;
  486|  1.84M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1652|  2.67k|    {
 1653|  2.67k|        return value();
 1654|  2.67k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|   650k|    {
 1627|   650k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   650k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   650k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   650k|        return this->get_value();
 1629|   650k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|   650k|    {
  451|   650k|        return m_value;
  452|   650k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  1.89k|        : base(unexpect, std::move(e.error())),
 1474|  1.89k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.89k|    {
 1476|  1.89k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  444|  1.89k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.89k|          m_has_value(false)
  446|  1.89k|    {
  447|  1.89k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   305k|    {
 1177|   305k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|   303k|        : base(std::in_place, std::forward<U>(val)),
 1428|   303k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   303k|    {
 1430|   303k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  435|   303k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   303k|    {
  437|   303k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|   379k|    {
 1837|   379k|        return detail::transform_error_impl(std::move(*this),
 1838|   379k|                                            std::forward<F>(f));
 1839|   379k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|   379k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   379k|    else {
 1333|   379k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   379k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   379k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 377k, False: 2.37k]
  |  |  ------------------
  ------------------
 1335|   379k|                   ? result(*std::forward<Exp>(exp))
 1336|   379k|                   : result(unexpect,
 1337|  2.37k|                            trivial_invoke(std::forward<F>(f),
 1338|  2.37k|                                           std::forward<Exp>(exp).error()));
 1339|   379k|    }
 1340|   379k|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|   647k|    {
 1663|   647k|        return std::move(value());
 1664|   647k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1613|  33.5k|    {
 1614|  33.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  33.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  33.5k|        return std::move(this->get_unexpected().error());
 1616|  33.5k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  33.6k|    {
  468|  33.6k|        return m_unexpected;
  469|  33.6k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1483|  2.37k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  2.37k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  2.37k|    {
 1486|  2.37k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1597|   305k|    {
 1598|   305k|        return has_value();
 1599|   305k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  484|   611k|    {
  485|   611k|        return m_has_value;
  486|   611k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1603|  1.89k|    {
 1604|  1.89k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.89k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.89k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.89k|        return this->get_unexpected().error();
 1606|  1.89k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  1.89k|    {
  468|  1.89k|        return m_unexpected;
  469|  1.89k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|   303k|    {
 1663|   303k|        return std::move(value());
 1664|   303k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|   303k|    {
 1627|   303k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   303k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   303k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   303k|        return this->get_value();
 1629|   303k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  450|   303k|    {
  451|   303k|        return m_value;
  452|   303k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1603|    120|    {
 1604|    120|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    120|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    120|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    120|        return this->get_unexpected().error();
 1606|    120|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  31.2k|        : base(unexpect, std::move(e.error())),
 1474|  31.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  31.2k|    {
 1476|  31.2k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  62.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  62.4k|          m_has_value(false)
  446|  62.4k|    {
  447|  62.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.18M|    {
 1177|  1.18M|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1427|  3.07k|        : base(std::in_place, std::forward<U>(val)),
 1428|  3.07k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  3.07k|    {
 1430|  3.07k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  435|  3.07k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  3.07k|    {
  437|  3.07k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|   845k|        : base(unexpect, std::move(e.error())),
 1474|   845k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   845k|    {
 1476|   845k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|   845k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   845k|          m_has_value(false)
  446|   845k|    {
  447|   845k|    }
_ZNK3scn2v38expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1597|  1.18M|    {
 1598|  1.18M|        return has_value();
 1599|  1.18M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  1.86M|    {
  485|  1.86M|        return m_has_value;
  486|  1.86M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1603|   405k|    {
 1604|   405k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   405k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   405k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   405k|        return this->get_unexpected().error();
 1606|   405k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|   405k|    {
  468|   405k|        return m_unexpected;
  469|   405k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1427|   377k|        : base(std::in_place, std::forward<U>(val)),
 1428|   377k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   377k|    {
 1430|   377k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|   377k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   377k|    {
  437|   377k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   377k|    {
 1177|   377k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1652|  3.07k|    {
 1653|  3.07k|        return value();
 1654|  3.07k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|   273k|    {
 1627|   273k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   273k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   273k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   273k|        return this->get_value();
 1629|   273k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|   273k|    {
  451|   273k|        return m_value;
  452|   273k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|   377k|    {
 1598|   377k|        return has_value();
 1599|   377k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|   754k|    {
  485|   754k|        return m_has_value;
  486|   754k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   377k|    {
 1177|   377k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|   377k|    {
 1663|   377k|        return std::move(value());
 1664|   377k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|   377k|    {
 1627|   377k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   377k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   377k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   377k|        return this->get_value();
 1629|   377k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|   377k|    {
  451|   377k|        return m_value;
  452|   377k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|   301k|    {
 1837|   301k|        return detail::transform_error_impl(std::move(*this),
 1838|   301k|                                            std::forward<F>(f));
 1839|   301k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|   301k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   301k|    else {
 1333|   301k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   301k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   301k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 270k, False: 31.1k]
  |  |  ------------------
  ------------------
 1335|   301k|                   ? result(*std::forward<Exp>(exp))
 1336|   301k|                   : result(unexpect,
 1337|  31.1k|                            trivial_invoke(std::forward<F>(f),
 1338|  31.1k|                                           std::forward<Exp>(exp).error()));
 1339|   301k|    }
 1340|   301k|}
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1427|   270k|        : base(std::in_place, std::forward<U>(val)),
 1428|   270k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   270k|    {
 1430|   270k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|   270k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   270k|    {
  437|   270k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1483|  31.1k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  31.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  31.1k|    {
 1486|  31.1k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|   270k|    {
 1663|   270k|        return std::move(value());
 1664|   270k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1427|   377k|        : base(std::in_place, std::forward<U>(val)),
 1428|   377k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   377k|    {
 1430|   377k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  435|   377k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   377k|    {
  437|   377k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   377k|    {
 1837|   377k|        return detail::transform_error_impl(std::move(*this),
 1838|   377k|                                            std::forward<F>(f));
 1839|   377k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1322|   377k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   377k|    else {
 1333|   377k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   377k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   377k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 377k, False: 0]
  |  |  ------------------
  ------------------
 1335|   377k|                   ? result(*std::forward<Exp>(exp))
 1336|   377k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   377k|    }
 1340|   377k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  484|   754k|    {
  485|   754k|        return m_has_value;
  486|   754k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|   377k|    {
 1663|   377k|        return std::move(value());
 1664|   377k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|   377k|    {
 1627|   377k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   377k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   377k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   377k|        return this->get_value();
 1629|   377k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  450|   377k|    {
  451|   377k|        return m_value;
  452|   377k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|   377k|        : base(std::in_place, std::forward<U>(val)),
 1428|   377k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   377k|    {
 1430|   377k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  435|   377k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   377k|    {
  437|   377k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   377k|    {
 1177|   377k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1597|   377k|    {
 1598|   377k|        return has_value();
 1599|   377k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  484|   754k|    {
  485|   754k|        return m_has_value;
  486|   754k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|   377k|    {
 1663|   377k|        return std::move(value());
 1664|   377k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|   377k|    {
 1627|   377k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   377k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   377k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   377k|        return this->get_value();
 1629|   377k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  450|   377k|    {
  451|   377k|        return m_value;
  452|   377k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISG_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1473|  49.3k|        : base(unexpect, std::move(e.error())),
 1474|  49.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  49.3k|    {
 1476|  49.3k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  624|  49.3k|        : m_has_value(false)
  625|  49.3k|    {
  626|  49.3k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  49.3k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESH_EEEvDpOT_:
  688|  49.3k|    {
  689|  49.3k|        scn::detail::construct_at(unexpected_ptr(),
  690|  49.3k|                                  std::forward<Args>(args)...);
  691|  49.3k|        m_has_value = false;
  692|  49.3k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|   148k|    {
  718|   148k|        return reinterpret_cast<unexpected<E>*>(
  719|   148k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|   148k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|   148k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  50.1k|    {
 1177|  50.1k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1427|    760|        : base(std::in_place, std::forward<U>(val)),
 1428|    760|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    760|    {
 1430|    760|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSG_EvEENS3_10in_place_tEDpOT_:
  614|    760|        : m_has_value(true)
  615|    760|    {
  616|    760|        construct(std::forward<Args>(args)...);
  617|    760|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9constructIJSG_EEEvDpOT_:
  681|    760|    {
  682|    760|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|    760|        m_has_value = true;
  684|    760|    }
_ZN3scn2v36detail12construct_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEJSG_EEEPT_SI_DpOT0_:
  391|    760|{
  392|    760|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|    760|        T(std::forward<Args>(args)...);
  394|    760|}
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  2.28k|    {
  706|  2.28k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  2.28k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  2.28k|    }
_ZNK3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|  50.1k|    {
 1598|  50.1k|        return has_value();
 1599|  50.1k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|   150k|    {
  675|   150k|        return m_has_value;
  676|   150k|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1603|  49.3k|    {
 1604|  49.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  49.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  49.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  49.3k|        return this->get_unexpected().error();
 1606|  49.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|  49.3k|    {
  658|  49.3k|        return *unexpected_ptr();
  659|  49.3k|    }
_ZNO3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEdeISF_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSK_v:
 1662|    760|    {
 1663|    760|        return std::move(value());
 1664|    760|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5valueISF_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1626|    760|    {
 1627|    760|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    760|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    760|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    760|        return this->get_value();
 1629|    760|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|    760|    {
  641|    760|        return *value_ptr();
  642|    760|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  50.1k|    {
  631|  50.1k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 760, False: 49.3k]
  ------------------
  632|    760|            destroy_value();
  633|    760|        }
  634|  49.3k|        else {
  635|  49.3k|            destroy_unexpected();
  636|  49.3k|        }
  637|  50.1k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|    760|    {
  696|    760|        scn::detail::destroy_at(value_ptr());
  697|    760|    }
_ZN3scn2v36detail10destroy_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEEEvPT_:
  397|    760|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|    760|    else {
  404|    760|        p->~T();
  405|    760|    }
  406|    760|}
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  49.3k|    {
  700|  49.3k|        scn::detail::destroy_at(unexpected_ptr());
  701|  49.3k|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   325k|    {
 2855|   325k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   325k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   325k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   325k|    {
 2836|   325k|        return t.data();
 2837|   325k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1652|  3.20k|    {
 1653|  3.20k|        return value();
 1654|  3.20k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1652|  3.20k|    {
 1653|  3.20k|        return value();
 1654|  3.20k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3646|   325k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|   325k|    static_cast<    \
  |  |  929|   325k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3647|   325k|    {
 3648|   325k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA17_KcEEEDaDpOT_:
 3653|  60.5k|{
 3654|  60.5k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  60.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  60.5k|}
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5465|  4.23M|    {
 5466|  4.23M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  4.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.23M]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|  4.23M|        return static_cast<std::size_t>(m_desc &
 5471|  4.23M|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|  4.23M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5490|  8.46M|    {
 5491|  8.46M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|  8.46M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5433|  4.23M|    {
 5434|  4.23M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  4.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.23M]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|  4.23M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  4.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.23M]
  |  |  ------------------
  ------------------
 5442|      0|            return {};
 5443|      0|        }
 5444|       |
 5445|  4.23M|        const auto t = type(id);
 5446|  4.23M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  4.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.23M]
  |  |  ------------------
  ------------------
 5447|      0|            return {};
 5448|      0|        }
 5449|       |
 5450|  4.23M|        basic_scan_arg<Context> arg;
 5451|  4.23M|        arg.m_type = t;
 5452|  4.23M|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 4.23M, False: 0]
  ------------------
 5453|  4.23M|            arg.m_value.ref_value = m_builtin_values[id];
 5454|  4.23M|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|  4.23M|        return arg;
 5459|  4.23M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5499|  4.23M|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|  4.23M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|  4.23M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|  4.23M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|  4.23M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5494|  4.23M|    {
 5495|  4.23M|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|  4.23M|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5246|  7.98M|    {
 5247|  7.98M|        return m_type != detail::arg_type::none_type;
 5248|  7.98M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   493k|{
 8417|   493k|#define SCN_VISIT(Type)                                         \
 8418|   493k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   493k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   493k|    }                                                           \
 8421|   493k|    else {                                                      \
 8422|   493k|        return vis(monostate_val);                              \
 8423|   493k|    }
 8424|       |
 8425|   493k|    monostate monostate_val{};
 8426|       |
 8427|   493k|    switch (arg.m_type) {
 8428|  79.3k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 79.3k, False: 414k]
  ------------------
 8429|  79.3k|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|  79.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  79.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  79.3k|    }                                                           \
  |  | 8421|  79.3k|    else {                                                      \
  |  | 8422|  79.3k|        return vis(monostate_val);                              \
  |  | 8423|  79.3k|    }
  ------------------
 8430|  79.3k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 493k]
  ------------------
 8431|  79.3k|            SCN_VISIT(short);
  ------------------
  |  | 8418|  79.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  79.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  79.3k|    }                                                           \
  |  | 8421|  79.3k|    else {                                                      \
  |  | 8422|  79.3k|        return vis(monostate_val);                              \
  |  | 8423|  79.3k|    }
  ------------------
 8432|   171k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 91.8k, False: 401k]
  ------------------
 8433|   171k|            SCN_VISIT(int);
  ------------------
  |  | 8418|   171k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   171k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   171k|    }                                                           \
  |  | 8421|   171k|    else {                                                      \
  |  | 8422|   171k|        return vis(monostate_val);                              \
  |  | 8423|   171k|    }
  ------------------
 8434|   171k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 493k]
  ------------------
 8435|   171k|            SCN_VISIT(long);
  ------------------
  |  | 8418|   171k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   171k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   171k|    }                                                           \
  |  | 8421|   171k|    else {                                                      \
  |  | 8422|   171k|        return vis(monostate_val);                              \
  |  | 8423|   171k|    }
  ------------------
 8436|   264k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 93.6k, False: 400k]
  ------------------
 8437|   264k|            SCN_VISIT(long long);
  ------------------
  |  | 8418|   264k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   264k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   264k|    }                                                           \
  |  | 8421|   264k|    else {                                                      \
  |  | 8422|   264k|        return vis(monostate_val);                              \
  |  | 8423|   264k|    }
  ------------------
 8438|   335k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 70.5k, False: 423k]
  ------------------
 8439|   335k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|   335k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   335k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   335k|    }                                                           \
  |  | 8421|   335k|    else {                                                      \
  |  | 8422|   335k|        return vis(monostate_val);                              \
  |  | 8423|   335k|    }
  ------------------
 8440|   335k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 493k]
  ------------------
 8441|   335k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|   335k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   335k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   335k|    }                                                           \
  |  | 8421|   335k|    else {                                                      \
  |  | 8422|   335k|        return vis(monostate_val);                              \
  |  | 8423|   335k|    }
  ------------------
 8442|   414k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 78.6k, False: 415k]
  ------------------
 8443|   414k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|   414k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   414k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   414k|    }                                                           \
  |  | 8421|   414k|    else {                                                      \
  |  | 8422|   414k|        return vis(monostate_val);                              \
  |  | 8423|   414k|    }
  ------------------
 8444|   414k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 493k]
  ------------------
 8445|   414k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|   414k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   414k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   414k|    }                                                           \
  |  | 8421|   414k|    else {                                                      \
  |  | 8422|   414k|        return vis(monostate_val);                              \
  |  | 8423|   414k|    }
  ------------------
 8446|   493k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 79.7k, False: 414k]
  ------------------
 8447|   493k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|   493k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   493k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   493k|    }                                                           \
  |  | 8421|   493k|    else {                                                      \
  |  | 8422|   493k|        return vis(monostate_val);                              \
  |  | 8423|   493k|    }
  ------------------
 8448|   493k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 493k]
  ------------------
 8449|   493k|            SCN_VISIT(void*);
  ------------------
  |  | 8418|   493k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   493k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   493k|    }                                                           \
  |  | 8421|   493k|    else {                                                      \
  |  | 8422|   493k|        return vis(monostate_val);                              \
  |  | 8423|   493k|    }
  ------------------
 8450|   493k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 493k]
  ------------------
 8451|   493k|            SCN_VISIT(bool);
  ------------------
  |  | 8418|   493k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   493k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   493k|    }                                                           \
  |  | 8421|   493k|    else {                                                      \
  |  | 8422|   493k|        return vis(monostate_val);                              \
  |  | 8423|   493k|    }
  ------------------
 8452|   493k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 493k]
  ------------------
 8453|   493k|            SCN_VISIT(char);
  ------------------
  |  | 8418|   493k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   493k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   493k|    }                                                           \
  |  | 8421|   493k|    else {                                                      \
  |  | 8422|   493k|        return vis(monostate_val);                              \
  |  | 8423|   493k|    }
  ------------------
 8454|   493k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 493k]
  ------------------
 8455|   493k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|   493k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   493k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   493k|    }                                                           \
  |  | 8421|   493k|    else {                                                      \
  |  | 8422|   493k|        return vis(monostate_val);                              \
  |  | 8423|   493k|    }
  ------------------
 8456|   493k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 493k]
  ------------------
 8457|   493k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|   493k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   493k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   493k|    }                                                           \
  |  | 8421|   493k|    else {                                                      \
  |  | 8422|   493k|        return vis(monostate_val);                              \
  |  | 8423|   493k|    }
  ------------------
 8458|   493k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 493k]
  ------------------
 8459|   493k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   493k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   493k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   493k|    }                                                           \
  |  | 8421|   493k|    else {                                                      \
  |  | 8422|   493k|        return vis(monostate_val);                              \
  |  | 8423|   493k|    }
  ------------------
 8460|   493k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 493k]
  ------------------
 8461|   493k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   493k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   493k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   493k|    }                                                           \
  |  | 8421|   493k|    else {                                                      \
  |  | 8422|   493k|        return vis(monostate_val);                              \
  |  | 8423|   493k|    }
  ------------------
 8462|   493k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 493k]
  ------------------
 8463|   493k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   493k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   493k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   493k|    }                                                           \
  |  | 8421|   493k|    else {                                                      \
  |  | 8422|   493k|        return vis(monostate_val);                              \
  |  | 8423|   493k|    }
  ------------------
 8464|   493k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 493k]
  ------------------
 8465|   493k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|   493k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   493k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   493k|    }                                                           \
  |  | 8421|   493k|    else {                                                      \
  |  | 8422|   493k|        return vis(monostate_val);                              \
  |  | 8423|   493k|    }
  ------------------
 8466|   493k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 493k]
  ------------------
 8467|   493k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|   493k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   493k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   493k|    }                                                           \
  |  | 8421|   493k|    else {                                                      \
  |  | 8422|   493k|        return vis(monostate_val);                              \
  |  | 8423|   493k|    }
  ------------------
 8468|   493k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 493k]
  ------------------
 8469|   493k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|   493k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   493k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   493k|    }                                                           \
  |  | 8421|   493k|    else {                                                      \
  |  | 8422|   493k|        return vis(monostate_val);                              \
  |  | 8423|   493k|    }
  ------------------
 8470|   493k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 493k]
  ------------------
 8471|   493k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|   493k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   493k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   493k|    }                                                           \
  |  | 8421|   493k|    else {                                                      \
  |  | 8422|   493k|        return vis(monostate_val);                              \
  |  | 8423|   493k|    }
  ------------------
 8472|   493k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 493k]
  ------------------
 8473|   493k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|   493k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   493k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   493k|    }                                                           \
  |  | 8421|   493k|    else {                                                      \
  |  | 8422|   493k|        return vis(monostate_val);                              \
  |  | 8423|   493k|    }
  ------------------
 8474|   493k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 493k]
  ------------------
 8475|   493k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|   493k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   493k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   493k|    }                                                           \
  |  | 8421|   493k|    else {                                                      \
  |  | 8422|   493k|        return vis(monostate_val);                              \
  |  | 8423|   493k|    }
  ------------------
 8476|       |
 8477|   493k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 493k]
  ------------------
 8478|   493k|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|   493k|            return vis(
 8480|   493k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 493k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 493k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   493k|            SCN_CLANG_POP
 8495|   493k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5543|  3.57M|        : m_format{format}, m_next_arg_id{next_arg_id}
 5544|  3.57M|    {
 5545|  3.57M|    }
_ZN3scn2v318basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8136|  1.79M|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  928|  1.79M|    static_cast<    \
  |  |  929|  1.79M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8137|  1.79M|    {
 8138|  1.79M|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8054|  3.57M|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|  3.57M|    static_cast<    \
  |  |  929|  3.57M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|  3.57M|    static_cast<    \
  |  |  929|  3.57M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8055|  3.57M|    {
 8056|  3.57M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE3getEv:
 4343|  2.28M|{
 4344|  2.28M|    if (is_contiguous()) {
  ------------------
  |  Branch (4344:9): [True: 0, False: 2.28M]
  ------------------
 4345|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4346|      0|                                ranges::default_sentinel};
 4347|      0|    }
 4348|  2.28M|    return ranges::subrange{forward_iterator{this, 0},
 4349|  2.28M|                            ranges::default_sentinel};
 4350|  2.28M|}
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4175|  2.28M|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4176|  2.28M|    {
 4177|  2.28M|        SCN_EXPECT(parent);
  ------------------
  |  |  924|  2.28M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.28M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4178|  2.28M|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|  2.28M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.28M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4179|  2.28M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   489k|{
 8417|   489k|#define SCN_VISIT(Type)                                         \
 8418|   489k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   489k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   489k|    }                                                           \
 8421|   489k|    else {                                                      \
 8422|   489k|        return vis(monostate_val);                              \
 8423|   489k|    }
 8424|       |
 8425|   489k|    monostate monostate_val{};
 8426|       |
 8427|   489k|    switch (arg.m_type) {
 8428|  79.2k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 79.2k, False: 410k]
  ------------------
 8429|  79.2k|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|  79.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  79.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  79.2k|    }                                                           \
  |  | 8421|  79.2k|    else {                                                      \
  |  | 8422|  79.2k|        return vis(monostate_val);                              \
  |  | 8423|  79.2k|    }
  ------------------
 8430|  79.2k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 489k]
  ------------------
 8431|  79.2k|            SCN_VISIT(short);
  ------------------
  |  | 8418|  79.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  79.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  79.2k|    }                                                           \
  |  | 8421|  79.2k|    else {                                                      \
  |  | 8422|  79.2k|        return vis(monostate_val);                              \
  |  | 8423|  79.2k|    }
  ------------------
 8432|   169k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 90.2k, False: 399k]
  ------------------
 8433|   169k|            SCN_VISIT(int);
  ------------------
  |  | 8418|   169k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   169k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   169k|    }                                                           \
  |  | 8421|   169k|    else {                                                      \
  |  | 8422|   169k|        return vis(monostate_val);                              \
  |  | 8423|   169k|    }
  ------------------
 8434|   169k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 489k]
  ------------------
 8435|   169k|            SCN_VISIT(long);
  ------------------
  |  | 8418|   169k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   169k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   169k|    }                                                           \
  |  | 8421|   169k|    else {                                                      \
  |  | 8422|   169k|        return vis(monostate_val);                              \
  |  | 8423|   169k|    }
  ------------------
 8436|   261k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 91.8k, False: 397k]
  ------------------
 8437|   261k|            SCN_VISIT(long long);
  ------------------
  |  | 8418|   261k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   261k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   261k|    }                                                           \
  |  | 8421|   261k|    else {                                                      \
  |  | 8422|   261k|        return vis(monostate_val);                              \
  |  | 8423|   261k|    }
  ------------------
 8438|   331k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 70.4k, False: 419k]
  ------------------
 8439|   331k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|   331k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   331k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   331k|    }                                                           \
  |  | 8421|   331k|    else {                                                      \
  |  | 8422|   331k|        return vis(monostate_val);                              \
  |  | 8423|   331k|    }
  ------------------
 8440|   331k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 489k]
  ------------------
 8441|   331k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|   331k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   331k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   331k|    }                                                           \
  |  | 8421|   331k|    else {                                                      \
  |  | 8422|   331k|        return vis(monostate_val);                              \
  |  | 8423|   331k|    }
  ------------------
 8442|   410k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 78.5k, False: 411k]
  ------------------
 8443|   410k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|   410k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   410k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   410k|    }                                                           \
  |  | 8421|   410k|    else {                                                      \
  |  | 8422|   410k|        return vis(monostate_val);                              \
  |  | 8423|   410k|    }
  ------------------
 8444|   410k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 489k]
  ------------------
 8445|   410k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|   410k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   410k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   410k|    }                                                           \
  |  | 8421|   410k|    else {                                                      \
  |  | 8422|   410k|        return vis(monostate_val);                              \
  |  | 8423|   410k|    }
  ------------------
 8446|   489k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 79.5k, False: 410k]
  ------------------
 8447|   489k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|   489k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   489k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   489k|    }                                                           \
  |  | 8421|   489k|    else {                                                      \
  |  | 8422|   489k|        return vis(monostate_val);                              \
  |  | 8423|   489k|    }
  ------------------
 8448|   489k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 489k]
  ------------------
 8449|   489k|            SCN_VISIT(void*);
  ------------------
  |  | 8418|   489k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   489k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   489k|    }                                                           \
  |  | 8421|   489k|    else {                                                      \
  |  | 8422|   489k|        return vis(monostate_val);                              \
  |  | 8423|   489k|    }
  ------------------
 8450|   489k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 489k]
  ------------------
 8451|   489k|            SCN_VISIT(bool);
  ------------------
  |  | 8418|   489k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   489k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   489k|    }                                                           \
  |  | 8421|   489k|    else {                                                      \
  |  | 8422|   489k|        return vis(monostate_val);                              \
  |  | 8423|   489k|    }
  ------------------
 8452|   489k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 489k]
  ------------------
 8453|   489k|            SCN_VISIT(char);
  ------------------
  |  | 8418|   489k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   489k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   489k|    }                                                           \
  |  | 8421|   489k|    else {                                                      \
  |  | 8422|   489k|        return vis(monostate_val);                              \
  |  | 8423|   489k|    }
  ------------------
 8454|   489k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 489k]
  ------------------
 8455|   489k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|   489k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   489k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   489k|    }                                                           \
  |  | 8421|   489k|    else {                                                      \
  |  | 8422|   489k|        return vis(monostate_val);                              \
  |  | 8423|   489k|    }
  ------------------
 8456|   489k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 489k]
  ------------------
 8457|   489k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|   489k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   489k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   489k|    }                                                           \
  |  | 8421|   489k|    else {                                                      \
  |  | 8422|   489k|        return vis(monostate_val);                              \
  |  | 8423|   489k|    }
  ------------------
 8458|   489k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 489k]
  ------------------
 8459|   489k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   489k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   489k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   489k|    }                                                           \
  |  | 8421|   489k|    else {                                                      \
  |  | 8422|   489k|        return vis(monostate_val);                              \
  |  | 8423|   489k|    }
  ------------------
 8460|   489k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 489k]
  ------------------
 8461|   489k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   489k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   489k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   489k|    }                                                           \
  |  | 8421|   489k|    else {                                                      \
  |  | 8422|   489k|        return vis(monostate_val);                              \
  |  | 8423|   489k|    }
  ------------------
 8462|   489k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 489k]
  ------------------
 8463|   489k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   489k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   489k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   489k|    }                                                           \
  |  | 8421|   489k|    else {                                                      \
  |  | 8422|   489k|        return vis(monostate_val);                              \
  |  | 8423|   489k|    }
  ------------------
 8464|   489k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 489k]
  ------------------
 8465|   489k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|   489k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   489k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   489k|    }                                                           \
  |  | 8421|   489k|    else {                                                      \
  |  | 8422|   489k|        return vis(monostate_val);                              \
  |  | 8423|   489k|    }
  ------------------
 8466|   489k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 489k]
  ------------------
 8467|   489k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|   489k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   489k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   489k|    }                                                           \
  |  | 8421|   489k|    else {                                                      \
  |  | 8422|   489k|        return vis(monostate_val);                              \
  |  | 8423|   489k|    }
  ------------------
 8468|   489k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 489k]
  ------------------
 8469|   489k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|   489k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   489k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   489k|    }                                                           \
  |  | 8421|   489k|    else {                                                      \
  |  | 8422|   489k|        return vis(monostate_val);                              \
  |  | 8423|   489k|    }
  ------------------
 8470|   489k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 489k]
  ------------------
 8471|   489k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|   489k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   489k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   489k|    }                                                           \
  |  | 8421|   489k|    else {                                                      \
  |  | 8422|   489k|        return vis(monostate_val);                              \
  |  | 8423|   489k|    }
  ------------------
 8472|   489k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 489k]
  ------------------
 8473|   489k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|   489k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   489k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   489k|    }                                                           \
  |  | 8421|   489k|    else {                                                      \
  |  | 8422|   489k|        return vis(monostate_val);                              \
  |  | 8423|   489k|    }
  ------------------
 8474|   489k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 489k]
  ------------------
 8475|   489k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|   489k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   489k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   489k|    }                                                           \
  |  | 8421|   489k|    else {                                                      \
  |  | 8422|   489k|        return vis(monostate_val);                              \
  |  | 8423|   489k|    }
  ------------------
 8476|       |
 8477|   489k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 489k]
  ------------------
 8478|   489k|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|   489k|            return vis(
 8480|   489k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 489k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 489k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   489k|            SCN_CLANG_POP
 8495|   489k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|  1.78M|{
 7044|  1.78M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|  1.78M|    handler.check_args_exhausted();
 7046|  1.78M|    return handler.get_error();
 7047|  1.78M|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|  1.78M|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|  1.78M|    auto begin = format.data();
 7013|  1.78M|    auto it = begin;
 7014|  1.78M|    const auto end = format.data() + format.size();
 7015|       |
 7016|  3.33M|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 1.78M, False: 1.55M]
  ------------------
 7017|  1.78M|        const auto ch = *it++;
 7018|  1.78M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 1.78M, False: 0]
  ------------------
 7019|  1.78M|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|  1.78M|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|  1.78M|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 225k, False: 1.55M]
  ------------------
 7023|   225k|                return;
 7024|   225k|            }
 7025|  1.78M|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|  1.78M|    }
 7036|       |
 7037|  1.55M|    handler.on_literal_text(begin, end);
 7038|  1.55M|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6941|  1.78M|{
 6942|  1.78M|    struct id_adapter {
 6943|  1.78M|        constexpr void operator()()
 6944|  1.78M|        {
 6945|  1.78M|            arg_id = handler.on_arg_id();
 6946|  1.78M|        }
 6947|  1.78M|        constexpr void operator()(std::size_t id)
 6948|  1.78M|        {
 6949|  1.78M|            arg_id = handler.on_arg_id(id);
 6950|  1.78M|        }
 6951|       |
 6952|  1.78M|        constexpr void on_error(const char* msg)
 6953|  1.78M|        {
 6954|  1.78M|            SCN_UNLIKELY_ATTR
 6955|  1.78M|            handler.on_error(msg);
 6956|  1.78M|        }
 6957|       |
 6958|  1.78M|        Handler& handler;
 6959|  1.78M|        std::size_t arg_id;
 6960|  1.78M|    };
 6961|       |
 6962|  1.78M|    ++begin;
 6963|  1.78M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.78M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.78M]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|  1.78M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 1.78M]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|  1.78M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 1.78M]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|  1.78M|    else {
 6975|  1.78M|        auto adapter = id_adapter{handler, 0};
 6976|  1.78M|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|  1.78M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.78M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.78M]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|  1.78M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 1.78M]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|  1.78M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 1.78M, False: 0]
  ------------------
 6987|  1.78M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  1.78M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.78M]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|  1.78M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|  1.78M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  3.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 75.0k, False: 1.70M]
  |  |  |  Branch (859:45): [True: 0, False: 1.78M]
  |  |  |  Branch (859:45): [True: 75.0k, False: 1.70M]
  |  |  ------------------
  ------------------
 6993|  75.0k|                handler.on_error("Unknown format specifier");
 6994|  75.0k|                return begin;
 6995|  75.0k|            }
 6996|  1.78M|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|  1.78M|    }
 7003|  1.70M|    return begin + 1;
 7004|  1.78M|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8038|  3.57M|    {
 8039|  3.57M|        return m_args.get(id);
 8040|  3.57M|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8048|  3.42M|    {
 8049|  3.42M|        return m_locale;
 8050|  3.42M|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5565|  3.57M|    {
 5566|  3.57M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  3.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.57M]
  |  |  ------------------
  ------------------
 5567|      0|            on_error(
 5568|      0|                "Cannot switch from manual to automatic argument indexing");
 5569|      0|            return 0;
 5570|      0|        }
 5571|       |
 5572|  3.57M|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|  3.57M|        do_check_arg_id(id);
 5574|  3.57M|        return id;
 5575|  3.57M|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6053|  3.57M|{
 6054|  3.57M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|  3.57M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|  3.57M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|  1.78M|{
 6443|  1.78M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.78M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.78M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|  1.78M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 1.78M, False: 0]
  |  Branch (6444:26): [True: 0, False: 1.78M]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|  1.78M|    handler();
 6449|  1.78M|    return begin;
 6450|  1.78M|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|  1.78M|        {
 6945|  1.78M|            arg_id = handler.on_arg_id();
 6946|  1.78M|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5251|  7.14M|    {
 5252|  7.14M|        return m_type;
 5253|  7.14M|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5560|  3.42M|    {
 5561|  3.42M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|  3.42M|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5549|  6.99M|    {
 5550|  6.99M|        return m_format.data();
 5551|  6.99M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7120|  1.78M|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|  1.78M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7121|  1.78M|    {
 7122|  1.78M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  1.78M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.78M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|  1.78M|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6857|  1.78M|{
 6858|  1.78M|    auto do_presentation = [&]() -> const CharT* {
 6859|  1.78M|        if (*begin == CharT{'['}) {
 6860|  1.78M|            auto set = parse_presentation_set(begin, end, handler);
 6861|  1.78M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|  1.78M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|  1.78M|                return begin;
 6866|  1.78M|            }
 6867|  1.78M|            handler.on_character_set_string(set);
 6868|  1.78M|            return begin;
 6869|  1.78M|        }
 6870|  1.78M|        if (*begin == CharT{'/'}) {
 6871|  1.78M|            return parse_presentation_regex(begin, end, handler);
 6872|  1.78M|        }
 6873|  1.78M|        presentation_type type = parse_presentation_type(*begin++);
 6874|  1.78M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|  1.78M|            handler.on_error("Invalid type specifier in format string");
 6876|  1.78M|            return begin;
 6877|  1.78M|        }
 6878|  1.78M|        handler.on_type(type);
 6879|  1.78M|        return begin;
 6880|  1.78M|    };
 6881|       |
 6882|  1.78M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 1.78M, False: 0]
  |  Branch (6882:28): [True: 1.73M, False: 50.0k]
  ------------------
 6883|  1.78M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 1.70M, False: 25.0k]
  |  Branch (6883:36): [True: 1.37M, False: 329k]
  ------------------
 6884|  1.37M|        return do_presentation();
 6885|  1.37M|    }
 6886|       |
 6887|   404k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   404k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 404k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|   404k|    begin = parse_align(begin, end, handler);
 6893|   404k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   404k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 404k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|   404k|    begin = parse_width(begin, end, handler);
 6899|   404k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   404k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 404k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|   404k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 404k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|   404k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 329k, False: 75.0k]
  ------------------
 6918|   329k|        handler.on_localized();
 6919|   329k|        ++begin;
 6920|   329k|    }
 6921|   404k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   404k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 404k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|   404k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 404k, False: 0]
  |  Branch (6926:25): [True: 75.0k, False: 329k]
  ------------------
 6927|  75.0k|        do_presentation();
 6928|  75.0k|    }
 6929|   404k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   404k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 404k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|   404k|    return begin;
 6935|   404k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6506|  3.47M|{
 6507|  3.47M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 2.76M, False: 710k]
  |  Branch (6507:33): [True: 2.76M, False: 0]
  ------------------
 6508|  3.47M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 660k, False: 50.0k]
  |  Branch (6508:33): [True: 660k, False: 0]
  ------------------
 6509|  3.47M|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|  1.45M|    auto do_presentation = [&]() -> const CharT* {
 6859|  1.45M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 1.45M]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|  1.45M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 1.45M]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|  1.45M|        presentation_type type = parse_presentation_type(*begin++);
 6874|  1.45M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  1.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 50.0k, False: 1.40M]
  |  |  ------------------
  ------------------
 6875|  50.0k|            handler.on_error("Invalid type specifier in format string");
 6876|  50.0k|            return begin;
 6877|  50.0k|        }
 6878|  1.40M|        handler.on_type(type);
 6879|  1.40M|        return begin;
 6880|  1.45M|    };
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6454|  2.91M|{
 6455|  2.91M|    switch (type) {
 6456|   135k|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 135k, False: 2.77M]
  ------------------
 6457|   185k|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 50.0k, False: 2.86M]
  ------------------
 6458|   185k|            return presentation_type::int_binary;
 6459|   659k|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 659k, False: 2.25M]
  ------------------
 6460|   659k|            return presentation_type::int_decimal;
 6461|   948k|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 948k, False: 1.96M]
  ------------------
 6462|   948k|            return presentation_type::int_generic;
 6463|      0|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 0, False: 2.91M]
  ------------------
 6464|      0|            return presentation_type::int_unsigned_decimal;
 6465|   263k|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 263k, False: 2.64M]
  ------------------
 6466|   263k|            return presentation_type::int_octal;
 6467|   755k|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 755k, False: 2.15M]
  ------------------
 6468|   755k|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 0, False: 2.91M]
  ------------------
 6469|   755k|            return presentation_type::int_hex;
 6470|      0|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 0, False: 2.91M]
  ------------------
 6471|      0|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 0, False: 2.91M]
  ------------------
 6472|      0|            return presentation_type::int_arbitrary_base;
 6473|      0|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 0, False: 2.91M]
  ------------------
 6474|      0|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 0, False: 2.91M]
  ------------------
 6475|      0|            return presentation_type::float_hex;
 6476|      0|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 0, False: 2.91M]
  ------------------
 6477|      0|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 0, False: 2.91M]
  ------------------
 6478|      0|            return presentation_type::float_scientific;
 6479|      0|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 0, False: 2.91M]
  ------------------
 6480|      0|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 0, False: 2.91M]
  ------------------
 6481|      0|            return presentation_type::float_fixed;
 6482|      0|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 0, False: 2.91M]
  ------------------
 6483|      0|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 0, False: 2.91M]
  ------------------
 6484|      0|            return presentation_type::float_general;
 6485|      0|        case 's':
  ------------------
  |  Branch (6485:9): [True: 0, False: 2.91M]
  ------------------
 6486|      0|            return presentation_type::string;
 6487|      0|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 0, False: 2.91M]
  ------------------
 6488|      0|            return presentation_type::character;
 6489|      0|        case '?':
  ------------------
  |  Branch (6489:9): [True: 0, False: 2.91M]
  ------------------
 6490|      0|            return presentation_type::escaped_character;
 6491|      0|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 0, False: 2.91M]
  ------------------
 6492|      0|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 2.91M]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 2.91M]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|   100k|        default:
  ------------------
  |  Branch (6499:9): [True: 100k, False: 2.81M]
  ------------------
 6500|   100k|            return presentation_type::none;
 6501|  2.91M|    }
 6502|  2.91M|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6531|   404k|{
 6532|   404k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   404k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   404k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|   404k|    auto check_align = [](wchar_t ch) {
 6535|   404k|        switch (ch) {
 6536|   404k|            case L'<':
 6537|   404k|                return align_type::left;
 6538|   404k|            case L'>':
 6539|   404k|                return align_type::right;
 6540|   404k|            case L'^':
 6541|   404k|                return align_type::center;
 6542|   404k|            default:
 6543|   404k|                return align_type::none;
 6544|   404k|        }
 6545|   404k|    };
 6546|       |
 6547|   404k|    auto potential_fill_len = code_point_length(begin, end);
 6548|   404k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   809k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 404k]
  |  |  |  Branch (859:45): [True: 0, False: 404k]
  |  |  |  Branch (859:45): [True: 0, False: 404k]
  |  |  ------------------
  ------------------
 6549|   404k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|   404k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|   404k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|   404k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|   404k|    const auto begin_before_fill = begin;
 6559|   404k|    begin += potential_fill_len;
 6560|       |
 6561|   404k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 404k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|   404k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|   404k|    const auto begin_after_fill = begin;
 6567|   404k|    ++begin;
 6568|       |
 6569|   404k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 404k, False: 0]
  ------------------
 6570|   404k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   404k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 404k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|   404k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 404k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|   404k|    }
 6578|       |
 6579|   404k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 404k, False: 0]
  ------------------
 6580|   404k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 404k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|   404k|        return begin_before_fill;
 6585|   404k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|   404k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6513|   810k|{
 6514|   810k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   810k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   810k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|       |    if constexpr (sizeof(CharT) != 1) {
 6516|       |        return 1;
 6517|       |    }
 6518|   810k|    else {
 6519|   810k|        const auto lengths =
 6520|   810k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|   810k|            "\3\4";
 6522|   810k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|   810k|        return len;
 6524|   810k|    }
 6525|   810k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|   809k|    auto check_align = [](wchar_t ch) {
 6535|   809k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 809k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 809k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 809k]
  ------------------
 6541|      0|                return align_type::center;
 6542|   809k|            default:
  ------------------
  |  Branch (6542:13): [True: 809k, False: 0]
  ------------------
 6543|   809k|                return align_type::none;
 6544|   809k|        }
 6545|   809k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6596|   404k|{
 6597|   404k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   404k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   404k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|   404k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 354k, False: 50.0k]
  |  Branch (6599:33): [True: 0, False: 354k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|   404k|    return begin;
 6610|   404k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7126|   329k|    {
 7127|   329k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|   329k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 153k, False: 176k]
  ------------------
 7129|   329k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 0, False: 153k]
  ------------------
 7130|   329k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 0]
  ------------------
 7131|   329k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|   329k|        Handler::on_localized();
 7139|   329k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  1.70M|{
 8417|  1.70M|#define SCN_VISIT(Type)                                         \
 8418|  1.70M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  1.70M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  1.70M|    }                                                           \
 8421|  1.70M|    else {                                                      \
 8422|  1.70M|        return vis(monostate_val);                              \
 8423|  1.70M|    }
 8424|       |
 8425|  1.70M|    monostate monostate_val{};
 8426|       |
 8427|  1.70M|    switch (arg.m_type) {
 8428|   249k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 249k, False: 1.45M]
  ------------------
 8429|   249k|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|   249k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   249k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   249k|    }                                                           \
  |  | 8421|   249k|    else {                                                      \
  |  | 8422|   249k|        return vis(monostate_val);                              \
  |  | 8423|   249k|    }
  ------------------
 8430|   249k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 1.70M]
  ------------------
 8431|   249k|            SCN_VISIT(short);
  ------------------
  |  | 8418|   249k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   249k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   249k|    }                                                           \
  |  | 8421|   249k|    else {                                                      \
  |  | 8422|   249k|        return vis(monostate_val);                              \
  |  | 8423|   249k|    }
  ------------------
 8432|   572k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 323k, False: 1.38M]
  ------------------
 8433|   572k|            SCN_VISIT(int);
  ------------------
  |  | 8418|   572k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   572k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   572k|    }                                                           \
  |  | 8421|   572k|    else {                                                      \
  |  | 8422|   572k|        return vis(monostate_val);                              \
  |  | 8423|   572k|    }
  ------------------
 8434|   572k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 1.70M]
  ------------------
 8435|   572k|            SCN_VISIT(long);
  ------------------
  |  | 8418|   572k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   572k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   572k|    }                                                           \
  |  | 8421|   572k|    else {                                                      \
  |  | 8422|   572k|        return vis(monostate_val);                              \
  |  | 8423|   572k|    }
  ------------------
 8436|   902k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 329k, False: 1.37M]
  ------------------
 8437|   902k|            SCN_VISIT(long long);
  ------------------
  |  | 8418|   902k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   902k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   902k|    }                                                           \
  |  | 8421|   902k|    else {                                                      \
  |  | 8422|   902k|        return vis(monostate_val);                              \
  |  | 8423|   902k|    }
  ------------------
 8438|  1.14M|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 244k, False: 1.46M]
  ------------------
 8439|  1.14M|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|  1.14M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.14M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.14M|    }                                                           \
  |  | 8421|  1.14M|    else {                                                      \
  |  | 8422|  1.14M|        return vis(monostate_val);                              \
  |  | 8423|  1.14M|    }
  ------------------
 8440|  1.14M|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 1.70M]
  ------------------
 8441|  1.14M|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|  1.14M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.14M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.14M|    }                                                           \
  |  | 8421|  1.14M|    else {                                                      \
  |  | 8422|  1.14M|        return vis(monostate_val);                              \
  |  | 8423|  1.14M|    }
  ------------------
 8442|  1.42M|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 278k, False: 1.42M]
  ------------------
 8443|  1.42M|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|  1.42M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.42M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.42M|    }                                                           \
  |  | 8421|  1.42M|    else {                                                      \
  |  | 8422|  1.42M|        return vis(monostate_val);                              \
  |  | 8423|  1.42M|    }
  ------------------
 8444|  1.42M|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 1.70M]
  ------------------
 8445|  1.42M|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|  1.42M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.42M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.42M|    }                                                           \
  |  | 8421|  1.42M|    else {                                                      \
  |  | 8422|  1.42M|        return vis(monostate_val);                              \
  |  | 8423|  1.42M|    }
  ------------------
 8446|  1.70M|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 281k, False: 1.42M]
  ------------------
 8447|  1.70M|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|  1.70M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.70M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.70M|    }                                                           \
  |  | 8421|  1.70M|    else {                                                      \
  |  | 8422|  1.70M|        return vis(monostate_val);                              \
  |  | 8423|  1.70M|    }
  ------------------
 8448|  1.70M|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 1.70M]
  ------------------
 8449|  1.70M|            SCN_VISIT(void*);
  ------------------
  |  | 8418|  1.70M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.70M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.70M|    }                                                           \
  |  | 8421|  1.70M|    else {                                                      \
  |  | 8422|  1.70M|        return vis(monostate_val);                              \
  |  | 8423|  1.70M|    }
  ------------------
 8450|  1.70M|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 1.70M]
  ------------------
 8451|  1.70M|            SCN_VISIT(bool);
  ------------------
  |  | 8418|  1.70M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.70M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.70M|    }                                                           \
  |  | 8421|  1.70M|    else {                                                      \
  |  | 8422|  1.70M|        return vis(monostate_val);                              \
  |  | 8423|  1.70M|    }
  ------------------
 8452|  1.70M|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 1.70M]
  ------------------
 8453|  1.70M|            SCN_VISIT(char);
  ------------------
  |  | 8418|  1.70M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.70M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.70M|    }                                                           \
  |  | 8421|  1.70M|    else {                                                      \
  |  | 8422|  1.70M|        return vis(monostate_val);                              \
  |  | 8423|  1.70M|    }
  ------------------
 8454|  1.70M|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 1.70M]
  ------------------
 8455|  1.70M|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|  1.70M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.70M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.70M|    }                                                           \
  |  | 8421|  1.70M|    else {                                                      \
  |  | 8422|  1.70M|        return vis(monostate_val);                              \
  |  | 8423|  1.70M|    }
  ------------------
 8456|  1.70M|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 1.70M]
  ------------------
 8457|  1.70M|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|  1.70M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.70M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.70M|    }                                                           \
  |  | 8421|  1.70M|    else {                                                      \
  |  | 8422|  1.70M|        return vis(monostate_val);                              \
  |  | 8423|  1.70M|    }
  ------------------
 8458|  1.70M|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 1.70M]
  ------------------
 8459|  1.70M|            SCN_VISIT(float);
  ------------------
  |  | 8418|  1.70M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.70M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.70M|    }                                                           \
  |  | 8421|  1.70M|    else {                                                      \
  |  | 8422|  1.70M|        return vis(monostate_val);                              \
  |  | 8423|  1.70M|    }
  ------------------
 8460|  1.70M|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 1.70M]
  ------------------
 8461|  1.70M|            SCN_VISIT(double);
  ------------------
  |  | 8418|  1.70M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.70M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.70M|    }                                                           \
  |  | 8421|  1.70M|    else {                                                      \
  |  | 8422|  1.70M|        return vis(monostate_val);                              \
  |  | 8423|  1.70M|    }
  ------------------
 8462|  1.70M|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 1.70M]
  ------------------
 8463|  1.70M|            SCN_VISIT(long double);
  ------------------
  |  | 8418|  1.70M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.70M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.70M|    }                                                           \
  |  | 8421|  1.70M|    else {                                                      \
  |  | 8422|  1.70M|        return vis(monostate_val);                              \
  |  | 8423|  1.70M|    }
  ------------------
 8464|  1.70M|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 1.70M]
  ------------------
 8465|  1.70M|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|  1.70M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.70M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.70M|    }                                                           \
  |  | 8421|  1.70M|    else {                                                      \
  |  | 8422|  1.70M|        return vis(monostate_val);                              \
  |  | 8423|  1.70M|    }
  ------------------
 8466|  1.70M|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 1.70M]
  ------------------
 8467|  1.70M|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|  1.70M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.70M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.70M|    }                                                           \
  |  | 8421|  1.70M|    else {                                                      \
  |  | 8422|  1.70M|        return vis(monostate_val);                              \
  |  | 8423|  1.70M|    }
  ------------------
 8468|  1.70M|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 1.70M]
  ------------------
 8469|  1.70M|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|  1.70M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.70M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.70M|    }                                                           \
  |  | 8421|  1.70M|    else {                                                      \
  |  | 8422|  1.70M|        return vis(monostate_val);                              \
  |  | 8423|  1.70M|    }
  ------------------
 8470|  1.70M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 1.70M]
  ------------------
 8471|  1.70M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|  1.70M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.70M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.70M|    }                                                           \
  |  | 8421|  1.70M|    else {                                                      \
  |  | 8422|  1.70M|        return vis(monostate_val);                              \
  |  | 8423|  1.70M|    }
  ------------------
 8472|  1.70M|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 1.70M]
  ------------------
 8473|  1.70M|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|  1.70M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.70M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.70M|    }                                                           \
  |  | 8421|  1.70M|    else {                                                      \
  |  | 8422|  1.70M|        return vis(monostate_val);                              \
  |  | 8423|  1.70M|    }
  ------------------
 8474|  1.70M|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 1.70M]
  ------------------
 8475|  1.70M|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|  1.70M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.70M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.70M|    }                                                           \
  |  | 8421|  1.70M|    else {                                                      \
  |  | 8422|  1.70M|        return vis(monostate_val);                              \
  |  | 8423|  1.70M|    }
  ------------------
 8476|       |
 8477|  1.70M|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 1.70M]
  ------------------
 8478|  1.70M|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|  1.70M|            return vis(
 8480|  1.70M|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 1.70M]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 1.70M]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  1.70M|            SCN_CLANG_POP
 8495|  1.70M|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|  1.79M|{
 7044|  1.79M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|  1.79M|    handler.check_args_exhausted();
 7046|  1.79M|    return handler.get_error();
 7047|  1.79M|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|  1.79M|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|  1.79M|    auto begin = format.data();
 7013|  1.79M|    auto it = begin;
 7014|  1.79M|    const auto end = format.data() + format.size();
 7015|       |
 7016|  3.35M|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 1.79M, False: 1.56M]
  ------------------
 7017|  1.79M|        const auto ch = *it++;
 7018|  1.79M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 1.79M, False: 0]
  ------------------
 7019|  1.79M|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|  1.79M|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|  1.79M|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 225k, False: 1.56M]
  ------------------
 7023|   225k|                return;
 7024|   225k|            }
 7025|  1.79M|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|  1.79M|    }
 7036|       |
 7037|  1.56M|    handler.on_literal_text(begin, end);
 7038|  1.56M|}
_ZN3scn2v318basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
 8174|  1.56M|    {
 8175|  1.56M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  1.56M|    static_cast<    \
  |  |  929|  1.56M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8176|  1.56M|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 6941|  1.79M|{
 6942|  1.79M|    struct id_adapter {
 6943|  1.79M|        constexpr void operator()()
 6944|  1.79M|        {
 6945|  1.79M|            arg_id = handler.on_arg_id();
 6946|  1.79M|        }
 6947|  1.79M|        constexpr void operator()(std::size_t id)
 6948|  1.79M|        {
 6949|  1.79M|            arg_id = handler.on_arg_id(id);
 6950|  1.79M|        }
 6951|       |
 6952|  1.79M|        constexpr void on_error(const char* msg)
 6953|  1.79M|        {
 6954|  1.79M|            SCN_UNLIKELY_ATTR
 6955|  1.79M|            handler.on_error(msg);
 6956|  1.79M|        }
 6957|       |
 6958|  1.79M|        Handler& handler;
 6959|  1.79M|        std::size_t arg_id;
 6960|  1.79M|    };
 6961|       |
 6962|  1.79M|    ++begin;
 6963|  1.79M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.79M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.79M]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|  1.79M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 1.79M]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|  1.79M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 1.79M]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|  1.79M|    else {
 6975|  1.79M|        auto adapter = id_adapter{handler, 0};
 6976|  1.79M|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|  1.79M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.79M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.79M]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|  1.79M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 1.79M]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|  1.79M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 1.79M, False: 0]
  ------------------
 6987|  1.79M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  1.79M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.79M]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|  1.79M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|  1.79M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  3.58M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 75.0k, False: 1.71M]
  |  |  |  Branch (859:45): [True: 0, False: 1.79M]
  |  |  |  Branch (859:45): [True: 75.0k, False: 1.71M]
  |  |  ------------------
  ------------------
 6993|  75.0k|                handler.on_error("Unknown format specifier");
 6994|  75.0k|                return begin;
 6995|  75.0k|            }
 6996|  1.79M|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|  1.79M|    }
 7003|  1.71M|    return begin + 1;
 7004|  1.79M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|  1.79M|{
 6443|  1.79M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.79M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.79M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|  1.79M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 1.79M, False: 0]
  |  Branch (6444:26): [True: 0, False: 1.79M]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|  1.79M|    handler();
 6449|  1.79M|    return begin;
 6450|  1.79M|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|  1.79M|        {
 6945|  1.79M|            arg_id = handler.on_arg_id();
 6946|  1.79M|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7120|  1.79M|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|  1.79M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7121|  1.79M|    {
 7122|  1.79M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  1.79M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.79M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|  1.79M|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6857|  1.79M|{
 6858|  1.79M|    auto do_presentation = [&]() -> const CharT* {
 6859|  1.79M|        if (*begin == CharT{'['}) {
 6860|  1.79M|            auto set = parse_presentation_set(begin, end, handler);
 6861|  1.79M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|  1.79M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|  1.79M|                return begin;
 6866|  1.79M|            }
 6867|  1.79M|            handler.on_character_set_string(set);
 6868|  1.79M|            return begin;
 6869|  1.79M|        }
 6870|  1.79M|        if (*begin == CharT{'/'}) {
 6871|  1.79M|            return parse_presentation_regex(begin, end, handler);
 6872|  1.79M|        }
 6873|  1.79M|        presentation_type type = parse_presentation_type(*begin++);
 6874|  1.79M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|  1.79M|            handler.on_error("Invalid type specifier in format string");
 6876|  1.79M|            return begin;
 6877|  1.79M|        }
 6878|  1.79M|        handler.on_type(type);
 6879|  1.79M|        return begin;
 6880|  1.79M|    };
 6881|       |
 6882|  1.79M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 1.79M, False: 0]
  |  Branch (6882:28): [True: 1.74M, False: 50.0k]
  ------------------
 6883|  1.79M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 1.71M, False: 25.0k]
  |  Branch (6883:36): [True: 1.38M, False: 331k]
  ------------------
 6884|  1.38M|        return do_presentation();
 6885|  1.38M|    }
 6886|       |
 6887|   406k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   406k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 406k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|   406k|    begin = parse_align(begin, end, handler);
 6893|   406k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   406k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 406k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|   406k|    begin = parse_width(begin, end, handler);
 6899|   406k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   406k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 406k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|   406k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 406k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|   406k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 331k, False: 75.0k]
  ------------------
 6918|   331k|        handler.on_localized();
 6919|   331k|        ++begin;
 6920|   331k|    }
 6921|   406k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   406k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 406k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|   406k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 406k, False: 0]
  |  Branch (6926:25): [True: 75.0k, False: 331k]
  ------------------
 6927|  75.0k|        do_presentation();
 6928|  75.0k|    }
 6929|   406k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   406k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 406k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|   406k|    return begin;
 6935|   406k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6858|  1.46M|    auto do_presentation = [&]() -> const CharT* {
 6859|  1.46M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 1.46M]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|  1.46M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 1.46M]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|  1.46M|        presentation_type type = parse_presentation_type(*begin++);
 6874|  1.46M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  1.46M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 50.0k, False: 1.41M]
  |  |  ------------------
  ------------------
 6875|  50.0k|            handler.on_error("Invalid type specifier in format string");
 6876|  50.0k|            return begin;
 6877|  50.0k|        }
 6878|  1.41M|        handler.on_type(type);
 6879|  1.41M|        return begin;
 6880|  1.46M|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6531|   406k|{
 6532|   406k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   406k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   406k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|   406k|    auto check_align = [](wchar_t ch) {
 6535|   406k|        switch (ch) {
 6536|   406k|            case L'<':
 6537|   406k|                return align_type::left;
 6538|   406k|            case L'>':
 6539|   406k|                return align_type::right;
 6540|   406k|            case L'^':
 6541|   406k|                return align_type::center;
 6542|   406k|            default:
 6543|   406k|                return align_type::none;
 6544|   406k|        }
 6545|   406k|    };
 6546|       |
 6547|   406k|    auto potential_fill_len = code_point_length(begin, end);
 6548|   406k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   812k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 406k]
  |  |  |  Branch (859:45): [True: 0, False: 406k]
  |  |  |  Branch (859:45): [True: 0, False: 406k]
  |  |  ------------------
  ------------------
 6549|   406k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|   406k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|   406k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|   406k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|   406k|    const auto begin_before_fill = begin;
 6559|   406k|    begin += potential_fill_len;
 6560|       |
 6561|   406k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 406k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|   406k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|   406k|    const auto begin_after_fill = begin;
 6567|   406k|    ++begin;
 6568|       |
 6569|   406k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 406k, False: 0]
  ------------------
 6570|   406k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   406k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 406k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|   406k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 406k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|   406k|    }
 6578|       |
 6579|   406k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 406k, False: 0]
  ------------------
 6580|   406k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 406k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|   406k|        return begin_before_fill;
 6585|   406k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|   406k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6534|   812k|    auto check_align = [](wchar_t ch) {
 6535|   812k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 812k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 812k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 812k]
  ------------------
 6541|      0|                return align_type::center;
 6542|   812k|            default:
  ------------------
  |  Branch (6542:13): [True: 812k, False: 0]
  ------------------
 6543|   812k|                return align_type::none;
 6544|   812k|        }
 6545|   812k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6596|   406k|{
 6597|   406k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   406k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   406k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|   406k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 356k, False: 50.0k]
  |  Branch (6599:33): [True: 0, False: 356k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|   406k|    return begin;
 6610|   406k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 7126|   331k|    {
 7127|   331k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|   331k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 153k, False: 177k]
  ------------------
 7129|   331k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 0, False: 153k]
  ------------------
 7130|   331k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 0]
  ------------------
 7131|   331k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|   331k|        Handler::on_localized();
 7139|   331k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  1.71M|{
 8417|  1.71M|#define SCN_VISIT(Type)                                         \
 8418|  1.71M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  1.71M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  1.71M|    }                                                           \
 8421|  1.71M|    else {                                                      \
 8422|  1.71M|        return vis(monostate_val);                              \
 8423|  1.71M|    }
 8424|       |
 8425|  1.71M|    monostate monostate_val{};
 8426|       |
 8427|  1.71M|    switch (arg.m_type) {
 8428|   250k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 250k, False: 1.46M]
  ------------------
 8429|   250k|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|   250k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   250k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   250k|    }                                                           \
  |  | 8421|   250k|    else {                                                      \
  |  | 8422|   250k|        return vis(monostate_val);                              \
  |  | 8423|   250k|    }
  ------------------
 8430|   250k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 1.71M]
  ------------------
 8431|   250k|            SCN_VISIT(short);
  ------------------
  |  | 8418|   250k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   250k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   250k|    }                                                           \
  |  | 8421|   250k|    else {                                                      \
  |  | 8422|   250k|        return vis(monostate_val);                              \
  |  | 8423|   250k|    }
  ------------------
 8432|   575k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 325k, False: 1.39M]
  ------------------
 8433|   575k|            SCN_VISIT(int);
  ------------------
  |  | 8418|   575k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   575k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   575k|    }                                                           \
  |  | 8421|   575k|    else {                                                      \
  |  | 8422|   575k|        return vis(monostate_val);                              \
  |  | 8423|   575k|    }
  ------------------
 8434|   575k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 1.71M]
  ------------------
 8435|   575k|            SCN_VISIT(long);
  ------------------
  |  | 8418|   575k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   575k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   575k|    }                                                           \
  |  | 8421|   575k|    else {                                                      \
  |  | 8422|   575k|        return vis(monostate_val);                              \
  |  | 8423|   575k|    }
  ------------------
 8436|   907k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 331k, False: 1.38M]
  ------------------
 8437|   907k|            SCN_VISIT(long long);
  ------------------
  |  | 8418|   907k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   907k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   907k|    }                                                           \
  |  | 8421|   907k|    else {                                                      \
  |  | 8422|   907k|        return vis(monostate_val);                              \
  |  | 8423|   907k|    }
  ------------------
 8438|  1.15M|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 245k, False: 1.47M]
  ------------------
 8439|  1.15M|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|  1.15M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.15M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.15M|    }                                                           \
  |  | 8421|  1.15M|    else {                                                      \
  |  | 8422|  1.15M|        return vis(monostate_val);                              \
  |  | 8423|  1.15M|    }
  ------------------
 8440|  1.15M|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 1.71M]
  ------------------
 8441|  1.15M|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|  1.15M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.15M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.15M|    }                                                           \
  |  | 8421|  1.15M|    else {                                                      \
  |  | 8422|  1.15M|        return vis(monostate_val);                              \
  |  | 8423|  1.15M|    }
  ------------------
 8442|  1.43M|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 280k, False: 1.43M]
  ------------------
 8443|  1.43M|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|  1.43M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.43M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.43M|    }                                                           \
  |  | 8421|  1.43M|    else {                                                      \
  |  | 8422|  1.43M|        return vis(monostate_val);                              \
  |  | 8423|  1.43M|    }
  ------------------
 8444|  1.43M|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 1.71M]
  ------------------
 8445|  1.43M|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|  1.43M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.43M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.43M|    }                                                           \
  |  | 8421|  1.43M|    else {                                                      \
  |  | 8422|  1.43M|        return vis(monostate_val);                              \
  |  | 8423|  1.43M|    }
  ------------------
 8446|  1.71M|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 283k, False: 1.43M]
  ------------------
 8447|  1.71M|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|  1.71M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.71M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.71M|    }                                                           \
  |  | 8421|  1.71M|    else {                                                      \
  |  | 8422|  1.71M|        return vis(monostate_val);                              \
  |  | 8423|  1.71M|    }
  ------------------
 8448|  1.71M|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 1.71M]
  ------------------
 8449|  1.71M|            SCN_VISIT(void*);
  ------------------
  |  | 8418|  1.71M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.71M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.71M|    }                                                           \
  |  | 8421|  1.71M|    else {                                                      \
  |  | 8422|  1.71M|        return vis(monostate_val);                              \
  |  | 8423|  1.71M|    }
  ------------------
 8450|  1.71M|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 1.71M]
  ------------------
 8451|  1.71M|            SCN_VISIT(bool);
  ------------------
  |  | 8418|  1.71M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.71M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.71M|    }                                                           \
  |  | 8421|  1.71M|    else {                                                      \
  |  | 8422|  1.71M|        return vis(monostate_val);                              \
  |  | 8423|  1.71M|    }
  ------------------
 8452|  1.71M|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 1.71M]
  ------------------
 8453|  1.71M|            SCN_VISIT(char);
  ------------------
  |  | 8418|  1.71M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.71M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.71M|    }                                                           \
  |  | 8421|  1.71M|    else {                                                      \
  |  | 8422|  1.71M|        return vis(monostate_val);                              \
  |  | 8423|  1.71M|    }
  ------------------
 8454|  1.71M|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 1.71M]
  ------------------
 8455|  1.71M|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|  1.71M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.71M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.71M|    }                                                           \
  |  | 8421|  1.71M|    else {                                                      \
  |  | 8422|  1.71M|        return vis(monostate_val);                              \
  |  | 8423|  1.71M|    }
  ------------------
 8456|  1.71M|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 1.71M]
  ------------------
 8457|  1.71M|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|  1.71M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.71M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.71M|    }                                                           \
  |  | 8421|  1.71M|    else {                                                      \
  |  | 8422|  1.71M|        return vis(monostate_val);                              \
  |  | 8423|  1.71M|    }
  ------------------
 8458|  1.71M|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 1.71M]
  ------------------
 8459|  1.71M|            SCN_VISIT(float);
  ------------------
  |  | 8418|  1.71M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.71M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.71M|    }                                                           \
  |  | 8421|  1.71M|    else {                                                      \
  |  | 8422|  1.71M|        return vis(monostate_val);                              \
  |  | 8423|  1.71M|    }
  ------------------
 8460|  1.71M|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 1.71M]
  ------------------
 8461|  1.71M|            SCN_VISIT(double);
  ------------------
  |  | 8418|  1.71M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.71M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.71M|    }                                                           \
  |  | 8421|  1.71M|    else {                                                      \
  |  | 8422|  1.71M|        return vis(monostate_val);                              \
  |  | 8423|  1.71M|    }
  ------------------
 8462|  1.71M|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 1.71M]
  ------------------
 8463|  1.71M|            SCN_VISIT(long double);
  ------------------
  |  | 8418|  1.71M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.71M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.71M|    }                                                           \
  |  | 8421|  1.71M|    else {                                                      \
  |  | 8422|  1.71M|        return vis(monostate_val);                              \
  |  | 8423|  1.71M|    }
  ------------------
 8464|  1.71M|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 1.71M]
  ------------------
 8465|  1.71M|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|  1.71M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.71M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.71M|    }                                                           \
  |  | 8421|  1.71M|    else {                                                      \
  |  | 8422|  1.71M|        return vis(monostate_val);                              \
  |  | 8423|  1.71M|    }
  ------------------
 8466|  1.71M|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 1.71M]
  ------------------
 8467|  1.71M|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|  1.71M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.71M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.71M|    }                                                           \
  |  | 8421|  1.71M|    else {                                                      \
  |  | 8422|  1.71M|        return vis(monostate_val);                              \
  |  | 8423|  1.71M|    }
  ------------------
 8468|  1.71M|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 1.71M]
  ------------------
 8469|  1.71M|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|  1.71M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.71M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.71M|    }                                                           \
  |  | 8421|  1.71M|    else {                                                      \
  |  | 8422|  1.71M|        return vis(monostate_val);                              \
  |  | 8423|  1.71M|    }
  ------------------
 8470|  1.71M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 1.71M]
  ------------------
 8471|  1.71M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|  1.71M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.71M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.71M|    }                                                           \
  |  | 8421|  1.71M|    else {                                                      \
  |  | 8422|  1.71M|        return vis(monostate_val);                              \
  |  | 8423|  1.71M|    }
  ------------------
 8472|  1.71M|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 1.71M]
  ------------------
 8473|  1.71M|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|  1.71M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.71M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.71M|    }                                                           \
  |  | 8421|  1.71M|    else {                                                      \
  |  | 8422|  1.71M|        return vis(monostate_val);                              \
  |  | 8423|  1.71M|    }
  ------------------
 8474|  1.71M|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 1.71M]
  ------------------
 8475|  1.71M|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|  1.71M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.71M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.71M|    }                                                           \
  |  | 8421|  1.71M|    else {                                                      \
  |  | 8422|  1.71M|        return vis(monostate_val);                              \
  |  | 8423|  1.71M|    }
  ------------------
 8476|       |
 8477|  1.71M|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 1.71M]
  ------------------
 8478|  1.71M|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|  1.71M|            return vis(
 8480|  1.71M|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 1.71M]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 1.71M]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  1.71M|            SCN_CLANG_POP
 8495|  1.71M|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v36detail17basic_scan_bufferIcE8sync_allEv:
 4075|   262k|    {
 4076|   262k|        sync(0);
 4077|   262k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5465|  1.00M|    {
 5466|  1.00M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.00M]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|  1.00M|        return static_cast<std::size_t>(m_desc &
 5471|  1.00M|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|  1.00M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5490|  2.01M|    {
 5491|  2.01M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|  2.01M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5433|  1.00M|    {
 5434|  1.00M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.00M]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|  1.00M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.00M]
  |  |  ------------------
  ------------------
 5442|      0|            return {};
 5443|      0|        }
 5444|       |
 5445|  1.00M|        const auto t = type(id);
 5446|  1.00M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.00M]
  |  |  ------------------
  ------------------
 5447|      0|            return {};
 5448|      0|        }
 5449|       |
 5450|  1.00M|        basic_scan_arg<Context> arg;
 5451|  1.00M|        arg.m_type = t;
 5452|  1.00M|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 1.00M, False: 0]
  ------------------
 5453|  1.00M|            arg.m_value.ref_value = m_builtin_values[id];
 5454|  1.00M|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|  1.00M|        return arg;
 5459|  1.00M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5499|  1.00M|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|  1.00M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|  1.00M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|  1.00M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|  1.00M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5494|  1.00M|    {
 5495|  1.00M|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|  1.00M|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5246|  1.66M|    {
 5247|  1.66M|        return m_type != detail::arg_type::none_type;
 5248|  1.66M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  76.0k|{
 8417|  76.0k|#define SCN_VISIT(Type)                                         \
 8418|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  76.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  76.0k|    }                                                           \
 8421|  76.0k|    else {                                                      \
 8422|  76.0k|        return vis(monostate_val);                              \
 8423|  76.0k|    }
 8424|       |
 8425|  76.0k|    monostate monostate_val{};
 8426|       |
 8427|  76.0k|    switch (arg.m_type) {
 8428|  12.6k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 12.6k, False: 63.3k]
  ------------------
 8429|  12.6k|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|  12.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  12.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  12.6k|    }                                                           \
  |  | 8421|  12.6k|    else {                                                      \
  |  | 8422|  12.6k|        return vis(monostate_val);                              \
  |  | 8423|  12.6k|    }
  ------------------
 8430|  12.6k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 76.0k]
  ------------------
 8431|  12.6k|            SCN_VISIT(short);
  ------------------
  |  | 8418|  12.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  12.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  12.6k|    }                                                           \
  |  | 8421|  12.6k|    else {                                                      \
  |  | 8422|  12.6k|        return vis(monostate_val);                              \
  |  | 8423|  12.6k|    }
  ------------------
 8432|  25.3k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 12.6k, False: 63.3k]
  ------------------
 8433|  25.3k|            SCN_VISIT(int);
  ------------------
  |  | 8418|  25.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  25.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  25.3k|    }                                                           \
  |  | 8421|  25.3k|    else {                                                      \
  |  | 8422|  25.3k|        return vis(monostate_val);                              \
  |  | 8423|  25.3k|    }
  ------------------
 8434|  25.3k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 76.0k]
  ------------------
 8435|  25.3k|            SCN_VISIT(long);
  ------------------
  |  | 8418|  25.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  25.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  25.3k|    }                                                           \
  |  | 8421|  25.3k|    else {                                                      \
  |  | 8422|  25.3k|        return vis(monostate_val);                              \
  |  | 8423|  25.3k|    }
  ------------------
 8436|  38.0k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 12.7k, False: 63.2k]
  ------------------
 8437|  38.0k|            SCN_VISIT(long long);
  ------------------
  |  | 8418|  38.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  38.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  38.0k|    }                                                           \
  |  | 8421|  38.0k|    else {                                                      \
  |  | 8422|  38.0k|        return vis(monostate_val);                              \
  |  | 8423|  38.0k|    }
  ------------------
 8438|  50.6k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 12.6k, False: 63.3k]
  ------------------
 8439|  50.6k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|  50.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  50.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  50.6k|    }                                                           \
  |  | 8421|  50.6k|    else {                                                      \
  |  | 8422|  50.6k|        return vis(monostate_val);                              \
  |  | 8423|  50.6k|    }
  ------------------
 8440|  50.6k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 76.0k]
  ------------------
 8441|  50.6k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|  50.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  50.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  50.6k|    }                                                           \
  |  | 8421|  50.6k|    else {                                                      \
  |  | 8422|  50.6k|        return vis(monostate_val);                              \
  |  | 8423|  50.6k|    }
  ------------------
 8442|  63.3k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 12.6k, False: 63.3k]
  ------------------
 8443|  63.3k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|  63.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  63.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  63.3k|    }                                                           \
  |  | 8421|  63.3k|    else {                                                      \
  |  | 8422|  63.3k|        return vis(monostate_val);                              \
  |  | 8423|  63.3k|    }
  ------------------
 8444|  63.3k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 76.0k]
  ------------------
 8445|  63.3k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|  63.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  63.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  63.3k|    }                                                           \
  |  | 8421|  63.3k|    else {                                                      \
  |  | 8422|  63.3k|        return vis(monostate_val);                              \
  |  | 8423|  63.3k|    }
  ------------------
 8446|  76.0k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 12.6k, False: 63.3k]
  ------------------
 8447|  76.0k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  76.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  76.0k|    }                                                           \
  |  | 8421|  76.0k|    else {                                                      \
  |  | 8422|  76.0k|        return vis(monostate_val);                              \
  |  | 8423|  76.0k|    }
  ------------------
 8448|  76.0k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 76.0k]
  ------------------
 8449|  76.0k|            SCN_VISIT(void*);
  ------------------
  |  | 8418|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  76.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  76.0k|    }                                                           \
  |  | 8421|  76.0k|    else {                                                      \
  |  | 8422|  76.0k|        return vis(monostate_val);                              \
  |  | 8423|  76.0k|    }
  ------------------
 8450|  76.0k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 76.0k]
  ------------------
 8451|  76.0k|            SCN_VISIT(bool);
  ------------------
  |  | 8418|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  76.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  76.0k|    }                                                           \
  |  | 8421|  76.0k|    else {                                                      \
  |  | 8422|  76.0k|        return vis(monostate_val);                              \
  |  | 8423|  76.0k|    }
  ------------------
 8452|  76.0k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 76.0k]
  ------------------
 8453|  76.0k|            SCN_VISIT(char);
  ------------------
  |  | 8418|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  76.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  76.0k|    }                                                           \
  |  | 8421|  76.0k|    else {                                                      \
  |  | 8422|  76.0k|        return vis(monostate_val);                              \
  |  | 8423|  76.0k|    }
  ------------------
 8454|  76.0k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 76.0k]
  ------------------
 8455|  76.0k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  76.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  76.0k|    }                                                           \
  |  | 8421|  76.0k|    else {                                                      \
  |  | 8422|  76.0k|        return vis(monostate_val);                              \
  |  | 8423|  76.0k|    }
  ------------------
 8456|  76.0k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 76.0k]
  ------------------
 8457|  76.0k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  76.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  76.0k|    }                                                           \
  |  | 8421|  76.0k|    else {                                                      \
  |  | 8422|  76.0k|        return vis(monostate_val);                              \
  |  | 8423|  76.0k|    }
  ------------------
 8458|  76.0k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 76.0k]
  ------------------
 8459|  76.0k|            SCN_VISIT(float);
  ------------------
  |  | 8418|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  76.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  76.0k|    }                                                           \
  |  | 8421|  76.0k|    else {                                                      \
  |  | 8422|  76.0k|        return vis(monostate_val);                              \
  |  | 8423|  76.0k|    }
  ------------------
 8460|  76.0k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 76.0k]
  ------------------
 8461|  76.0k|            SCN_VISIT(double);
  ------------------
  |  | 8418|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  76.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  76.0k|    }                                                           \
  |  | 8421|  76.0k|    else {                                                      \
  |  | 8422|  76.0k|        return vis(monostate_val);                              \
  |  | 8423|  76.0k|    }
  ------------------
 8462|  76.0k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 76.0k]
  ------------------
 8463|  76.0k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  76.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  76.0k|    }                                                           \
  |  | 8421|  76.0k|    else {                                                      \
  |  | 8422|  76.0k|        return vis(monostate_val);                              \
  |  | 8423|  76.0k|    }
  ------------------
 8464|  76.0k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 76.0k]
  ------------------
 8465|  76.0k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  76.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  76.0k|    }                                                           \
  |  | 8421|  76.0k|    else {                                                      \
  |  | 8422|  76.0k|        return vis(monostate_val);                              \
  |  | 8423|  76.0k|    }
  ------------------
 8466|  76.0k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 76.0k]
  ------------------
 8467|  76.0k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  76.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  76.0k|    }                                                           \
  |  | 8421|  76.0k|    else {                                                      \
  |  | 8422|  76.0k|        return vis(monostate_val);                              \
  |  | 8423|  76.0k|    }
  ------------------
 8468|  76.0k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 76.0k]
  ------------------
 8469|  76.0k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  76.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  76.0k|    }                                                           \
  |  | 8421|  76.0k|    else {                                                      \
  |  | 8422|  76.0k|        return vis(monostate_val);                              \
  |  | 8423|  76.0k|    }
  ------------------
 8470|  76.0k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 76.0k]
  ------------------
 8471|  76.0k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  76.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  76.0k|    }                                                           \
  |  | 8421|  76.0k|    else {                                                      \
  |  | 8422|  76.0k|        return vis(monostate_val);                              \
  |  | 8423|  76.0k|    }
  ------------------
 8472|  76.0k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 76.0k]
  ------------------
 8473|  76.0k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  76.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  76.0k|    }                                                           \
  |  | 8421|  76.0k|    else {                                                      \
  |  | 8422|  76.0k|        return vis(monostate_val);                              \
  |  | 8423|  76.0k|    }
  ------------------
 8474|  76.0k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 76.0k]
  ------------------
 8475|  76.0k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  76.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  76.0k|    }                                                           \
  |  | 8421|  76.0k|    else {                                                      \
  |  | 8422|  76.0k|        return vis(monostate_val);                              \
  |  | 8423|  76.0k|    }
  ------------------
 8476|       |
 8477|  76.0k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 76.0k]
  ------------------
 8478|  76.0k|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|  76.0k|            return vis(
 8480|  76.0k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 76.0k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 76.0k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  76.0k|            SCN_CLANG_POP
 8495|  76.0k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5543|   907k|        : m_format{format}, m_next_arg_id{next_arg_id}
 5544|   907k|    {
 5545|   907k|    }
_ZN3scn2v318basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8136|   453k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  928|   453k|    static_cast<    \
  |  |  929|   453k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8137|   453k|    {
 8138|   453k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8054|   907k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   907k|    static_cast<    \
  |  |  929|   907k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   907k|    static_cast<    \
  |  |  929|   907k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8055|   907k|    {
 8056|   907k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   453k|{
 7044|   453k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   453k|    handler.check_args_exhausted();
 7046|   453k|    return handler.get_error();
 7047|   453k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   453k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   453k|    auto begin = format.data();
 7013|   453k|    auto it = begin;
 7014|   453k|    const auto end = format.data() + format.size();
 7015|       |
 7016|   456k|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 453k, False: 3.20k]
  ------------------
 7017|   453k|        const auto ch = *it++;
 7018|   453k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 453k, False: 0]
  ------------------
 7019|   453k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   453k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   453k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 450k, False: 3.20k]
  ------------------
 7023|   450k|                return;
 7024|   450k|            }
 7025|   453k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|   453k|    }
 7036|       |
 7037|  3.20k|    handler.on_literal_text(begin, end);
 7038|  3.20k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6941|   453k|{
 6942|   453k|    struct id_adapter {
 6943|   453k|        constexpr void operator()()
 6944|   453k|        {
 6945|   453k|            arg_id = handler.on_arg_id();
 6946|   453k|        }
 6947|   453k|        constexpr void operator()(std::size_t id)
 6948|   453k|        {
 6949|   453k|            arg_id = handler.on_arg_id(id);
 6950|   453k|        }
 6951|       |
 6952|   453k|        constexpr void on_error(const char* msg)
 6953|   453k|        {
 6954|   453k|            SCN_UNLIKELY_ATTR
 6955|   453k|            handler.on_error(msg);
 6956|   453k|        }
 6957|       |
 6958|   453k|        Handler& handler;
 6959|   453k|        std::size_t arg_id;
 6960|   453k|    };
 6961|       |
 6962|   453k|    ++begin;
 6963|   453k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   453k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 453k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|   453k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 453k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|   453k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 453k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|   453k|    else {
 6975|   453k|        auto adapter = id_adapter{handler, 0};
 6976|   453k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   453k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   453k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 453k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|   453k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 453k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|   453k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 453k, False: 0]
  ------------------
 6987|   453k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   453k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 453k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|   453k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   453k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   907k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 150k, False: 303k]
  |  |  |  Branch (859:45): [True: 0, False: 453k]
  |  |  |  Branch (859:45): [True: 150k, False: 303k]
  |  |  ------------------
  ------------------
 6993|   150k|                handler.on_error("Unknown format specifier");
 6994|   150k|                return begin;
 6995|   150k|            }
 6996|   453k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|   453k|    }
 7003|   303k|    return begin + 1;
 7004|   453k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8038|   907k|    {
 8039|   907k|        return m_args.get(id);
 8040|   907k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8048|   606k|    {
 8049|   606k|        return m_locale;
 8050|   606k|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5565|   907k|    {
 5566|   907k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   907k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 907k]
  |  |  ------------------
  ------------------
 5567|      0|            on_error(
 5568|      0|                "Cannot switch from manual to automatic argument indexing");
 5569|      0|            return 0;
 5570|      0|        }
 5571|       |
 5572|   907k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|   907k|        do_check_arg_id(id);
 5574|   907k|        return id;
 5575|   907k|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6053|   907k|{
 6054|   907k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|   907k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|   907k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   453k|{
 6443|   453k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   453k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   453k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   453k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 453k, False: 0]
  |  Branch (6444:26): [True: 0, False: 453k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|   453k|    handler();
 6449|   453k|    return begin;
 6450|   453k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   453k|        {
 6945|   453k|            arg_id = handler.on_arg_id();
 6946|   453k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5251|  1.81M|    {
 5252|  1.81M|        return m_type;
 5253|  1.81M|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5560|   606k|    {
 5561|   606k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|   606k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE3getEv:
 4343|   529k|{
 4344|   529k|    if (is_contiguous()) {
  ------------------
  |  Branch (4344:9): [True: 0, False: 529k]
  ------------------
 4345|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4346|      0|                                ranges::default_sentinel};
 4347|      0|    }
 4348|   529k|    return ranges::subrange{forward_iterator{this, 0},
 4349|   529k|                            ranges::default_sentinel};
 4350|   529k|}
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4175|   529k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4176|   529k|    {
 4177|   529k|        SCN_EXPECT(parent);
  ------------------
  |  |  924|   529k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   529k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4178|   529k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|   529k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   529k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4179|   529k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5549|  1.51M|    {
 5550|  1.51M|        return m_format.data();
 5551|  1.51M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7120|   453k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   453k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7121|   453k|    {
 7122|   453k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   453k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   453k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   453k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6857|   453k|{
 6858|   453k|    auto do_presentation = [&]() -> const CharT* {
 6859|   453k|        if (*begin == CharT{'['}) {
 6860|   453k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   453k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   453k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   453k|                return begin;
 6866|   453k|            }
 6867|   453k|            handler.on_character_set_string(set);
 6868|   453k|            return begin;
 6869|   453k|        }
 6870|   453k|        if (*begin == CharT{'/'}) {
 6871|   453k|            return parse_presentation_regex(begin, end, handler);
 6872|   453k|        }
 6873|   453k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   453k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   453k|            handler.on_error("Invalid type specifier in format string");
 6876|   453k|            return begin;
 6877|   453k|        }
 6878|   453k|        handler.on_type(type);
 6879|   453k|        return begin;
 6880|   453k|    };
 6881|       |
 6882|   453k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 453k, False: 0]
  |  Branch (6882:28): [True: 353k, False: 100k]
  ------------------
 6883|   453k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 303k, False: 50.0k]
  |  Branch (6883:36): [True: 252k, False: 50.5k]
  ------------------
 6884|   252k|        return do_presentation();
 6885|   252k|    }
 6886|       |
 6887|   200k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 200k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|   200k|    begin = parse_align(begin, end, handler);
 6893|   200k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 200k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|   200k|    begin = parse_width(begin, end, handler);
 6899|   200k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 200k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|   200k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 200k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|   200k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 50.5k, False: 150k]
  ------------------
 6918|  50.5k|        handler.on_localized();
 6919|  50.5k|        ++begin;
 6920|  50.5k|    }
 6921|   200k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 200k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|   200k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 200k, False: 0]
  |  Branch (6926:25): [True: 150k, False: 50.5k]
  ------------------
 6927|   150k|        do_presentation();
 6928|   150k|    }
 6929|   200k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 200k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|   200k|    return begin;
 6935|   200k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6506|   706k|{
 6507|   706k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 505k, False: 201k]
  |  Branch (6507:33): [True: 505k, False: 0]
  ------------------
 6508|   706k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 101k, False: 100k]
  |  Branch (6508:33): [True: 101k, False: 0]
  ------------------
 6509|   706k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|   403k|    auto do_presentation = [&]() -> const CharT* {
 6859|   403k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 403k]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|   403k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 403k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   403k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   403k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   403k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 100k, False: 302k]
  |  |  ------------------
  ------------------
 6875|   100k|            handler.on_error("Invalid type specifier in format string");
 6876|   100k|            return begin;
 6877|   100k|        }
 6878|   302k|        handler.on_type(type);
 6879|   302k|        return begin;
 6880|   403k|    };
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6454|   806k|{
 6455|   806k|    switch (type) {
 6456|   100k|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 100k, False: 705k]
  ------------------
 6457|   200k|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 100k, False: 705k]
  ------------------
 6458|   200k|            return presentation_type::int_binary;
 6459|   101k|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 101k, False: 704k]
  ------------------
 6460|   101k|            return presentation_type::int_decimal;
 6461|   101k|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 101k, False: 704k]
  ------------------
 6462|   101k|            return presentation_type::int_generic;
 6463|      0|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 0, False: 806k]
  ------------------
 6464|      0|            return presentation_type::int_unsigned_decimal;
 6465|   100k|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 100k, False: 705k]
  ------------------
 6466|   100k|            return presentation_type::int_octal;
 6467|   101k|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 101k, False: 704k]
  ------------------
 6468|   101k|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 0, False: 806k]
  ------------------
 6469|   101k|            return presentation_type::int_hex;
 6470|      0|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 0, False: 806k]
  ------------------
 6471|      0|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 0, False: 806k]
  ------------------
 6472|      0|            return presentation_type::int_arbitrary_base;
 6473|      0|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 0, False: 806k]
  ------------------
 6474|      0|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 0, False: 806k]
  ------------------
 6475|      0|            return presentation_type::float_hex;
 6476|      0|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 0, False: 806k]
  ------------------
 6477|      0|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 0, False: 806k]
  ------------------
 6478|      0|            return presentation_type::float_scientific;
 6479|      0|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 0, False: 806k]
  ------------------
 6480|      0|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 0, False: 806k]
  ------------------
 6481|      0|            return presentation_type::float_fixed;
 6482|      0|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 0, False: 806k]
  ------------------
 6483|      0|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 0, False: 806k]
  ------------------
 6484|      0|            return presentation_type::float_general;
 6485|      0|        case 's':
  ------------------
  |  Branch (6485:9): [True: 0, False: 806k]
  ------------------
 6486|      0|            return presentation_type::string;
 6487|      0|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 0, False: 806k]
  ------------------
 6488|      0|            return presentation_type::character;
 6489|      0|        case '?':
  ------------------
  |  Branch (6489:9): [True: 0, False: 806k]
  ------------------
 6490|      0|            return presentation_type::escaped_character;
 6491|      0|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 0, False: 806k]
  ------------------
 6492|      0|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 806k]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 806k]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|   200k|        default:
  ------------------
  |  Branch (6499:9): [True: 200k, False: 605k]
  ------------------
 6500|   200k|            return presentation_type::none;
 6501|   806k|    }
 6502|   806k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6531|   200k|{
 6532|   200k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   200k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   200k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|   200k|    auto check_align = [](wchar_t ch) {
 6535|   200k|        switch (ch) {
 6536|   200k|            case L'<':
 6537|   200k|                return align_type::left;
 6538|   200k|            case L'>':
 6539|   200k|                return align_type::right;
 6540|   200k|            case L'^':
 6541|   200k|                return align_type::center;
 6542|   200k|            default:
 6543|   200k|                return align_type::none;
 6544|   200k|        }
 6545|   200k|    };
 6546|       |
 6547|   200k|    auto potential_fill_len = code_point_length(begin, end);
 6548|   200k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   401k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 200k]
  |  |  |  Branch (859:45): [True: 0, False: 200k]
  |  |  |  Branch (859:45): [True: 0, False: 200k]
  |  |  ------------------
  ------------------
 6549|   200k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|   200k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|   200k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|   200k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|   200k|    const auto begin_before_fill = begin;
 6559|   200k|    begin += potential_fill_len;
 6560|       |
 6561|   200k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 200k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|   200k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|   200k|    const auto begin_after_fill = begin;
 6567|   200k|    ++begin;
 6568|       |
 6569|   200k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 200k, False: 0]
  ------------------
 6570|   200k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 200k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|   200k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 200k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|   200k|    }
 6578|       |
 6579|   200k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 200k, False: 0]
  ------------------
 6580|   200k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 200k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|   200k|        return begin_before_fill;
 6585|   200k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|   200k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6513|   401k|{
 6514|   401k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   401k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   401k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|   401k|    if constexpr (sizeof(CharT) != 1) {
 6516|   401k|        return 1;
 6517|       |    }
 6518|       |    else {
 6519|       |        const auto lengths =
 6520|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|       |            "\3\4";
 6522|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|       |        return len;
 6524|       |    }
 6525|   401k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|   401k|    auto check_align = [](wchar_t ch) {
 6535|   401k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 401k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 401k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 401k]
  ------------------
 6541|      0|                return align_type::center;
 6542|   401k|            default:
  ------------------
  |  Branch (6542:13): [True: 401k, False: 0]
  ------------------
 6543|   401k|                return align_type::none;
 6544|   401k|        }
 6545|   401k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6596|   200k|{
 6597|   200k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   200k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   200k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|   200k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 100k, False: 100k]
  |  Branch (6599:33): [True: 0, False: 100k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|   200k|    return begin;
 6610|   200k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7126|  50.5k|    {
 7127|  50.5k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|  50.5k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 25.2k, False: 25.3k]
  ------------------
 7129|  50.5k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 0, False: 25.2k]
  ------------------
 7130|  50.5k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 0]
  ------------------
 7131|  50.5k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|  50.5k|        Handler::on_localized();
 7139|  50.5k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   303k|{
 8417|   303k|#define SCN_VISIT(Type)                                         \
 8418|   303k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   303k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   303k|    }                                                           \
 8421|   303k|    else {                                                      \
 8422|   303k|        return vis(monostate_val);                              \
 8423|   303k|    }
 8424|       |
 8425|   303k|    monostate monostate_val{};
 8426|       |
 8427|   303k|    switch (arg.m_type) {
 8428|  50.5k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 50.5k, False: 252k]
  ------------------
 8429|  50.5k|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|  50.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  50.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  50.5k|    }                                                           \
  |  | 8421|  50.5k|    else {                                                      \
  |  | 8422|  50.5k|        return vis(monostate_val);                              \
  |  | 8423|  50.5k|    }
  ------------------
 8430|  50.5k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 303k]
  ------------------
 8431|  50.5k|            SCN_VISIT(short);
  ------------------
  |  | 8418|  50.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  50.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  50.5k|    }                                                           \
  |  | 8421|  50.5k|    else {                                                      \
  |  | 8422|  50.5k|        return vis(monostate_val);                              \
  |  | 8423|  50.5k|    }
  ------------------
 8432|   101k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 50.6k, False: 252k]
  ------------------
 8433|   101k|            SCN_VISIT(int);
  ------------------
  |  | 8418|   101k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   101k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   101k|    }                                                           \
  |  | 8421|   101k|    else {                                                      \
  |  | 8422|   101k|        return vis(monostate_val);                              \
  |  | 8423|   101k|    }
  ------------------
 8434|   101k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 303k]
  ------------------
 8435|   101k|            SCN_VISIT(long);
  ------------------
  |  | 8418|   101k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   101k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   101k|    }                                                           \
  |  | 8421|   101k|    else {                                                      \
  |  | 8422|   101k|        return vis(monostate_val);                              \
  |  | 8423|   101k|    }
  ------------------
 8436|   151k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 50.7k, False: 252k]
  ------------------
 8437|   151k|            SCN_VISIT(long long);
  ------------------
  |  | 8418|   151k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   151k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   151k|    }                                                           \
  |  | 8421|   151k|    else {                                                      \
  |  | 8422|   151k|        return vis(monostate_val);                              \
  |  | 8423|   151k|    }
  ------------------
 8438|   202k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 50.4k, False: 252k]
  ------------------
 8439|   202k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|   202k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   202k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   202k|    }                                                           \
  |  | 8421|   202k|    else {                                                      \
  |  | 8422|   202k|        return vis(monostate_val);                              \
  |  | 8423|   202k|    }
  ------------------
 8440|   202k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 303k]
  ------------------
 8441|   202k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|   202k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   202k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   202k|    }                                                           \
  |  | 8421|   202k|    else {                                                      \
  |  | 8422|   202k|        return vis(monostate_val);                              \
  |  | 8423|   202k|    }
  ------------------
 8442|   252k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 50.5k, False: 252k]
  ------------------
 8443|   252k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|   252k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   252k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   252k|    }                                                           \
  |  | 8421|   252k|    else {                                                      \
  |  | 8422|   252k|        return vis(monostate_val);                              \
  |  | 8423|   252k|    }
  ------------------
 8444|   252k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 303k]
  ------------------
 8445|   252k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|   252k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   252k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   252k|    }                                                           \
  |  | 8421|   252k|    else {                                                      \
  |  | 8422|   252k|        return vis(monostate_val);                              \
  |  | 8423|   252k|    }
  ------------------
 8446|   303k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 50.6k, False: 252k]
  ------------------
 8447|   303k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|   303k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   303k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   303k|    }                                                           \
  |  | 8421|   303k|    else {                                                      \
  |  | 8422|   303k|        return vis(monostate_val);                              \
  |  | 8423|   303k|    }
  ------------------
 8448|   303k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 303k]
  ------------------
 8449|   303k|            SCN_VISIT(void*);
  ------------------
  |  | 8418|   303k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   303k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   303k|    }                                                           \
  |  | 8421|   303k|    else {                                                      \
  |  | 8422|   303k|        return vis(monostate_val);                              \
  |  | 8423|   303k|    }
  ------------------
 8450|   303k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 303k]
  ------------------
 8451|   303k|            SCN_VISIT(bool);
  ------------------
  |  | 8418|   303k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   303k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   303k|    }                                                           \
  |  | 8421|   303k|    else {                                                      \
  |  | 8422|   303k|        return vis(monostate_val);                              \
  |  | 8423|   303k|    }
  ------------------
 8452|   303k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 303k]
  ------------------
 8453|   303k|            SCN_VISIT(char);
  ------------------
  |  | 8418|   303k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   303k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   303k|    }                                                           \
  |  | 8421|   303k|    else {                                                      \
  |  | 8422|   303k|        return vis(monostate_val);                              \
  |  | 8423|   303k|    }
  ------------------
 8454|   303k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 303k]
  ------------------
 8455|   303k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|   303k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   303k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   303k|    }                                                           \
  |  | 8421|   303k|    else {                                                      \
  |  | 8422|   303k|        return vis(monostate_val);                              \
  |  | 8423|   303k|    }
  ------------------
 8456|   303k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 303k]
  ------------------
 8457|   303k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|   303k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   303k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   303k|    }                                                           \
  |  | 8421|   303k|    else {                                                      \
  |  | 8422|   303k|        return vis(monostate_val);                              \
  |  | 8423|   303k|    }
  ------------------
 8458|   303k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 303k]
  ------------------
 8459|   303k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   303k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   303k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   303k|    }                                                           \
  |  | 8421|   303k|    else {                                                      \
  |  | 8422|   303k|        return vis(monostate_val);                              \
  |  | 8423|   303k|    }
  ------------------
 8460|   303k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 303k]
  ------------------
 8461|   303k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   303k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   303k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   303k|    }                                                           \
  |  | 8421|   303k|    else {                                                      \
  |  | 8422|   303k|        return vis(monostate_val);                              \
  |  | 8423|   303k|    }
  ------------------
 8462|   303k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 303k]
  ------------------
 8463|   303k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   303k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   303k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   303k|    }                                                           \
  |  | 8421|   303k|    else {                                                      \
  |  | 8422|   303k|        return vis(monostate_val);                              \
  |  | 8423|   303k|    }
  ------------------
 8464|   303k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 303k]
  ------------------
 8465|   303k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|   303k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   303k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   303k|    }                                                           \
  |  | 8421|   303k|    else {                                                      \
  |  | 8422|   303k|        return vis(monostate_val);                              \
  |  | 8423|   303k|    }
  ------------------
 8466|   303k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 303k]
  ------------------
 8467|   303k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|   303k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   303k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   303k|    }                                                           \
  |  | 8421|   303k|    else {                                                      \
  |  | 8422|   303k|        return vis(monostate_val);                              \
  |  | 8423|   303k|    }
  ------------------
 8468|   303k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 303k]
  ------------------
 8469|   303k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|   303k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   303k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   303k|    }                                                           \
  |  | 8421|   303k|    else {                                                      \
  |  | 8422|   303k|        return vis(monostate_val);                              \
  |  | 8423|   303k|    }
  ------------------
 8470|   303k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 303k]
  ------------------
 8471|   303k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|   303k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   303k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   303k|    }                                                           \
  |  | 8421|   303k|    else {                                                      \
  |  | 8422|   303k|        return vis(monostate_val);                              \
  |  | 8423|   303k|    }
  ------------------
 8472|   303k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 303k]
  ------------------
 8473|   303k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|   303k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   303k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   303k|    }                                                           \
  |  | 8421|   303k|    else {                                                      \
  |  | 8422|   303k|        return vis(monostate_val);                              \
  |  | 8423|   303k|    }
  ------------------
 8474|   303k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 303k]
  ------------------
 8475|   303k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|   303k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   303k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   303k|    }                                                           \
  |  | 8421|   303k|    else {                                                      \
  |  | 8422|   303k|        return vis(monostate_val);                              \
  |  | 8423|   303k|    }
  ------------------
 8476|       |
 8477|   303k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 303k]
  ------------------
 8478|   303k|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|   303k|            return vis(
 8480|   303k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 303k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 303k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   303k|            SCN_CLANG_POP
 8495|   303k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  76.0k|{
 8417|  76.0k|#define SCN_VISIT(Type)                                         \
 8418|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  76.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  76.0k|    }                                                           \
 8421|  76.0k|    else {                                                      \
 8422|  76.0k|        return vis(monostate_val);                              \
 8423|  76.0k|    }
 8424|       |
 8425|  76.0k|    monostate monostate_val{};
 8426|       |
 8427|  76.0k|    switch (arg.m_type) {
 8428|  12.6k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 12.6k, False: 63.3k]
  ------------------
 8429|  12.6k|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|  12.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  12.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  12.6k|    }                                                           \
  |  | 8421|  12.6k|    else {                                                      \
  |  | 8422|  12.6k|        return vis(monostate_val);                              \
  |  | 8423|  12.6k|    }
  ------------------
 8430|  12.6k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 76.0k]
  ------------------
 8431|  12.6k|            SCN_VISIT(short);
  ------------------
  |  | 8418|  12.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  12.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  12.6k|    }                                                           \
  |  | 8421|  12.6k|    else {                                                      \
  |  | 8422|  12.6k|        return vis(monostate_val);                              \
  |  | 8423|  12.6k|    }
  ------------------
 8432|  25.3k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 12.6k, False: 63.3k]
  ------------------
 8433|  25.3k|            SCN_VISIT(int);
  ------------------
  |  | 8418|  25.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  25.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  25.3k|    }                                                           \
  |  | 8421|  25.3k|    else {                                                      \
  |  | 8422|  25.3k|        return vis(monostate_val);                              \
  |  | 8423|  25.3k|    }
  ------------------
 8434|  25.3k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 76.0k]
  ------------------
 8435|  25.3k|            SCN_VISIT(long);
  ------------------
  |  | 8418|  25.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  25.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  25.3k|    }                                                           \
  |  | 8421|  25.3k|    else {                                                      \
  |  | 8422|  25.3k|        return vis(monostate_val);                              \
  |  | 8423|  25.3k|    }
  ------------------
 8436|  38.0k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 12.7k, False: 63.2k]
  ------------------
 8437|  38.0k|            SCN_VISIT(long long);
  ------------------
  |  | 8418|  38.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  38.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  38.0k|    }                                                           \
  |  | 8421|  38.0k|    else {                                                      \
  |  | 8422|  38.0k|        return vis(monostate_val);                              \
  |  | 8423|  38.0k|    }
  ------------------
 8438|  50.6k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 12.6k, False: 63.3k]
  ------------------
 8439|  50.6k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|  50.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  50.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  50.6k|    }                                                           \
  |  | 8421|  50.6k|    else {                                                      \
  |  | 8422|  50.6k|        return vis(monostate_val);                              \
  |  | 8423|  50.6k|    }
  ------------------
 8440|  50.6k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 76.0k]
  ------------------
 8441|  50.6k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|  50.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  50.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  50.6k|    }                                                           \
  |  | 8421|  50.6k|    else {                                                      \
  |  | 8422|  50.6k|        return vis(monostate_val);                              \
  |  | 8423|  50.6k|    }
  ------------------
 8442|  63.3k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 12.6k, False: 63.3k]
  ------------------
 8443|  63.3k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|  63.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  63.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  63.3k|    }                                                           \
  |  | 8421|  63.3k|    else {                                                      \
  |  | 8422|  63.3k|        return vis(monostate_val);                              \
  |  | 8423|  63.3k|    }
  ------------------
 8444|  63.3k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 76.0k]
  ------------------
 8445|  63.3k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|  63.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  63.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  63.3k|    }                                                           \
  |  | 8421|  63.3k|    else {                                                      \
  |  | 8422|  63.3k|        return vis(monostate_val);                              \
  |  | 8423|  63.3k|    }
  ------------------
 8446|  76.0k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 12.6k, False: 63.3k]
  ------------------
 8447|  76.0k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  76.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  76.0k|    }                                                           \
  |  | 8421|  76.0k|    else {                                                      \
  |  | 8422|  76.0k|        return vis(monostate_val);                              \
  |  | 8423|  76.0k|    }
  ------------------
 8448|  76.0k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 76.0k]
  ------------------
 8449|  76.0k|            SCN_VISIT(void*);
  ------------------
  |  | 8418|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  76.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  76.0k|    }                                                           \
  |  | 8421|  76.0k|    else {                                                      \
  |  | 8422|  76.0k|        return vis(monostate_val);                              \
  |  | 8423|  76.0k|    }
  ------------------
 8450|  76.0k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 76.0k]
  ------------------
 8451|  76.0k|            SCN_VISIT(bool);
  ------------------
  |  | 8418|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  76.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  76.0k|    }                                                           \
  |  | 8421|  76.0k|    else {                                                      \
  |  | 8422|  76.0k|        return vis(monostate_val);                              \
  |  | 8423|  76.0k|    }
  ------------------
 8452|  76.0k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 76.0k]
  ------------------
 8453|  76.0k|            SCN_VISIT(char);
  ------------------
  |  | 8418|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  76.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  76.0k|    }                                                           \
  |  | 8421|  76.0k|    else {                                                      \
  |  | 8422|  76.0k|        return vis(monostate_val);                              \
  |  | 8423|  76.0k|    }
  ------------------
 8454|  76.0k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 76.0k]
  ------------------
 8455|  76.0k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  76.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  76.0k|    }                                                           \
  |  | 8421|  76.0k|    else {                                                      \
  |  | 8422|  76.0k|        return vis(monostate_val);                              \
  |  | 8423|  76.0k|    }
  ------------------
 8456|  76.0k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 76.0k]
  ------------------
 8457|  76.0k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  76.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  76.0k|    }                                                           \
  |  | 8421|  76.0k|    else {                                                      \
  |  | 8422|  76.0k|        return vis(monostate_val);                              \
  |  | 8423|  76.0k|    }
  ------------------
 8458|  76.0k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 76.0k]
  ------------------
 8459|  76.0k|            SCN_VISIT(float);
  ------------------
  |  | 8418|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  76.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  76.0k|    }                                                           \
  |  | 8421|  76.0k|    else {                                                      \
  |  | 8422|  76.0k|        return vis(monostate_val);                              \
  |  | 8423|  76.0k|    }
  ------------------
 8460|  76.0k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 76.0k]
  ------------------
 8461|  76.0k|            SCN_VISIT(double);
  ------------------
  |  | 8418|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  76.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  76.0k|    }                                                           \
  |  | 8421|  76.0k|    else {                                                      \
  |  | 8422|  76.0k|        return vis(monostate_val);                              \
  |  | 8423|  76.0k|    }
  ------------------
 8462|  76.0k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 76.0k]
  ------------------
 8463|  76.0k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  76.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  76.0k|    }                                                           \
  |  | 8421|  76.0k|    else {                                                      \
  |  | 8422|  76.0k|        return vis(monostate_val);                              \
  |  | 8423|  76.0k|    }
  ------------------
 8464|  76.0k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 76.0k]
  ------------------
 8465|  76.0k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  76.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  76.0k|    }                                                           \
  |  | 8421|  76.0k|    else {                                                      \
  |  | 8422|  76.0k|        return vis(monostate_val);                              \
  |  | 8423|  76.0k|    }
  ------------------
 8466|  76.0k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 76.0k]
  ------------------
 8467|  76.0k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  76.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  76.0k|    }                                                           \
  |  | 8421|  76.0k|    else {                                                      \
  |  | 8422|  76.0k|        return vis(monostate_val);                              \
  |  | 8423|  76.0k|    }
  ------------------
 8468|  76.0k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 76.0k]
  ------------------
 8469|  76.0k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  76.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  76.0k|    }                                                           \
  |  | 8421|  76.0k|    else {                                                      \
  |  | 8422|  76.0k|        return vis(monostate_val);                              \
  |  | 8423|  76.0k|    }
  ------------------
 8470|  76.0k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 76.0k]
  ------------------
 8471|  76.0k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  76.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  76.0k|    }                                                           \
  |  | 8421|  76.0k|    else {                                                      \
  |  | 8422|  76.0k|        return vis(monostate_val);                              \
  |  | 8423|  76.0k|    }
  ------------------
 8472|  76.0k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 76.0k]
  ------------------
 8473|  76.0k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  76.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  76.0k|    }                                                           \
  |  | 8421|  76.0k|    else {                                                      \
  |  | 8422|  76.0k|        return vis(monostate_val);                              \
  |  | 8423|  76.0k|    }
  ------------------
 8474|  76.0k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 76.0k]
  ------------------
 8475|  76.0k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  76.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  76.0k|    }                                                           \
  |  | 8421|  76.0k|    else {                                                      \
  |  | 8422|  76.0k|        return vis(monostate_val);                              \
  |  | 8423|  76.0k|    }
  ------------------
 8476|       |
 8477|  76.0k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 76.0k]
  ------------------
 8478|  76.0k|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|  76.0k|            return vis(
 8480|  76.0k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 76.0k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 76.0k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  76.0k|            SCN_CLANG_POP
 8495|  76.0k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   453k|{
 7044|   453k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   453k|    handler.check_args_exhausted();
 7046|   453k|    return handler.get_error();
 7047|   453k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   453k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   453k|    auto begin = format.data();
 7013|   453k|    auto it = begin;
 7014|   453k|    const auto end = format.data() + format.size();
 7015|       |
 7016|   456k|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 453k, False: 3.20k]
  ------------------
 7017|   453k|        const auto ch = *it++;
 7018|   453k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 453k, False: 0]
  ------------------
 7019|   453k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   453k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   453k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 450k, False: 3.20k]
  ------------------
 7023|   450k|                return;
 7024|   450k|            }
 7025|   453k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|   453k|    }
 7036|       |
 7037|  3.20k|    handler.on_literal_text(begin, end);
 7038|  3.20k|}
_ZN3scn2v318basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
 8174|  3.20k|    {
 8175|  3.20k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  3.20k|    static_cast<    \
  |  |  929|  3.20k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8176|  3.20k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 6941|   453k|{
 6942|   453k|    struct id_adapter {
 6943|   453k|        constexpr void operator()()
 6944|   453k|        {
 6945|   453k|            arg_id = handler.on_arg_id();
 6946|   453k|        }
 6947|   453k|        constexpr void operator()(std::size_t id)
 6948|   453k|        {
 6949|   453k|            arg_id = handler.on_arg_id(id);
 6950|   453k|        }
 6951|       |
 6952|   453k|        constexpr void on_error(const char* msg)
 6953|   453k|        {
 6954|   453k|            SCN_UNLIKELY_ATTR
 6955|   453k|            handler.on_error(msg);
 6956|   453k|        }
 6957|       |
 6958|   453k|        Handler& handler;
 6959|   453k|        std::size_t arg_id;
 6960|   453k|    };
 6961|       |
 6962|   453k|    ++begin;
 6963|   453k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   453k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 453k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|   453k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 453k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|   453k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 453k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|   453k|    else {
 6975|   453k|        auto adapter = id_adapter{handler, 0};
 6976|   453k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   453k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   453k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 453k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|   453k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 453k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|   453k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 453k, False: 0]
  ------------------
 6987|   453k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   453k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 453k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|   453k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   453k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   907k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 150k, False: 303k]
  |  |  |  Branch (859:45): [True: 0, False: 453k]
  |  |  |  Branch (859:45): [True: 150k, False: 303k]
  |  |  ------------------
  ------------------
 6993|   150k|                handler.on_error("Unknown format specifier");
 6994|   150k|                return begin;
 6995|   150k|            }
 6996|   453k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|   453k|    }
 7003|   303k|    return begin + 1;
 7004|   453k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   453k|{
 6443|   453k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   453k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   453k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   453k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 453k, False: 0]
  |  Branch (6444:26): [True: 0, False: 453k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|   453k|    handler();
 6449|   453k|    return begin;
 6450|   453k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   453k|        {
 6945|   453k|            arg_id = handler.on_arg_id();
 6946|   453k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7120|   453k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   453k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7121|   453k|    {
 7122|   453k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   453k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   453k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   453k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6857|   453k|{
 6858|   453k|    auto do_presentation = [&]() -> const CharT* {
 6859|   453k|        if (*begin == CharT{'['}) {
 6860|   453k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   453k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   453k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   453k|                return begin;
 6866|   453k|            }
 6867|   453k|            handler.on_character_set_string(set);
 6868|   453k|            return begin;
 6869|   453k|        }
 6870|   453k|        if (*begin == CharT{'/'}) {
 6871|   453k|            return parse_presentation_regex(begin, end, handler);
 6872|   453k|        }
 6873|   453k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   453k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   453k|            handler.on_error("Invalid type specifier in format string");
 6876|   453k|            return begin;
 6877|   453k|        }
 6878|   453k|        handler.on_type(type);
 6879|   453k|        return begin;
 6880|   453k|    };
 6881|       |
 6882|   453k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 453k, False: 0]
  |  Branch (6882:28): [True: 353k, False: 100k]
  ------------------
 6883|   453k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 303k, False: 50.0k]
  |  Branch (6883:36): [True: 252k, False: 50.5k]
  ------------------
 6884|   252k|        return do_presentation();
 6885|   252k|    }
 6886|       |
 6887|   200k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 200k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|   200k|    begin = parse_align(begin, end, handler);
 6893|   200k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 200k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|   200k|    begin = parse_width(begin, end, handler);
 6899|   200k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 200k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|   200k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 200k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|   200k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 50.5k, False: 150k]
  ------------------
 6918|  50.5k|        handler.on_localized();
 6919|  50.5k|        ++begin;
 6920|  50.5k|    }
 6921|   200k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 200k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|   200k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 200k, False: 0]
  |  Branch (6926:25): [True: 150k, False: 50.5k]
  ------------------
 6927|   150k|        do_presentation();
 6928|   150k|    }
 6929|   200k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 200k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|   200k|    return begin;
 6935|   200k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6858|   403k|    auto do_presentation = [&]() -> const CharT* {
 6859|   403k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 403k]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|   403k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 403k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   403k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   403k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   403k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 100k, False: 302k]
  |  |  ------------------
  ------------------
 6875|   100k|            handler.on_error("Invalid type specifier in format string");
 6876|   100k|            return begin;
 6877|   100k|        }
 6878|   302k|        handler.on_type(type);
 6879|   302k|        return begin;
 6880|   403k|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6531|   200k|{
 6532|   200k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   200k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   200k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|   200k|    auto check_align = [](wchar_t ch) {
 6535|   200k|        switch (ch) {
 6536|   200k|            case L'<':
 6537|   200k|                return align_type::left;
 6538|   200k|            case L'>':
 6539|   200k|                return align_type::right;
 6540|   200k|            case L'^':
 6541|   200k|                return align_type::center;
 6542|   200k|            default:
 6543|   200k|                return align_type::none;
 6544|   200k|        }
 6545|   200k|    };
 6546|       |
 6547|   200k|    auto potential_fill_len = code_point_length(begin, end);
 6548|   200k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   401k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 200k]
  |  |  |  Branch (859:45): [True: 0, False: 200k]
  |  |  |  Branch (859:45): [True: 0, False: 200k]
  |  |  ------------------
  ------------------
 6549|   200k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|   200k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|   200k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|   200k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|   200k|    const auto begin_before_fill = begin;
 6559|   200k|    begin += potential_fill_len;
 6560|       |
 6561|   200k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 200k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|   200k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|   200k|    const auto begin_after_fill = begin;
 6567|   200k|    ++begin;
 6568|       |
 6569|   200k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 200k, False: 0]
  ------------------
 6570|   200k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 200k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|   200k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 200k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|   200k|    }
 6578|       |
 6579|   200k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 200k, False: 0]
  ------------------
 6580|   200k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 200k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|   200k|        return begin_before_fill;
 6585|   200k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|   200k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6534|   401k|    auto check_align = [](wchar_t ch) {
 6535|   401k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 401k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 401k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 401k]
  ------------------
 6541|      0|                return align_type::center;
 6542|   401k|            default:
  ------------------
  |  Branch (6542:13): [True: 401k, False: 0]
  ------------------
 6543|   401k|                return align_type::none;
 6544|   401k|        }
 6545|   401k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6596|   200k|{
 6597|   200k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   200k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   200k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|   200k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 100k, False: 100k]
  |  Branch (6599:33): [True: 0, False: 100k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|   200k|    return begin;
 6610|   200k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 7126|  50.5k|    {
 7127|  50.5k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|  50.5k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 25.2k, False: 25.3k]
  ------------------
 7129|  50.5k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 0, False: 25.2k]
  ------------------
 7130|  50.5k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 0]
  ------------------
 7131|  50.5k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|  50.5k|        Handler::on_localized();
 7139|  50.5k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   303k|{
 8417|   303k|#define SCN_VISIT(Type)                                         \
 8418|   303k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   303k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   303k|    }                                                           \
 8421|   303k|    else {                                                      \
 8422|   303k|        return vis(monostate_val);                              \
 8423|   303k|    }
 8424|       |
 8425|   303k|    monostate monostate_val{};
 8426|       |
 8427|   303k|    switch (arg.m_type) {
 8428|  50.5k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 50.5k, False: 252k]
  ------------------
 8429|  50.5k|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|  50.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  50.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  50.5k|    }                                                           \
  |  | 8421|  50.5k|    else {                                                      \
  |  | 8422|  50.5k|        return vis(monostate_val);                              \
  |  | 8423|  50.5k|    }
  ------------------
 8430|  50.5k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 303k]
  ------------------
 8431|  50.5k|            SCN_VISIT(short);
  ------------------
  |  | 8418|  50.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  50.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  50.5k|    }                                                           \
  |  | 8421|  50.5k|    else {                                                      \
  |  | 8422|  50.5k|        return vis(monostate_val);                              \
  |  | 8423|  50.5k|    }
  ------------------
 8432|   101k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 50.6k, False: 252k]
  ------------------
 8433|   101k|            SCN_VISIT(int);
  ------------------
  |  | 8418|   101k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   101k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   101k|    }                                                           \
  |  | 8421|   101k|    else {                                                      \
  |  | 8422|   101k|        return vis(monostate_val);                              \
  |  | 8423|   101k|    }
  ------------------
 8434|   101k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 303k]
  ------------------
 8435|   101k|            SCN_VISIT(long);
  ------------------
  |  | 8418|   101k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   101k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   101k|    }                                                           \
  |  | 8421|   101k|    else {                                                      \
  |  | 8422|   101k|        return vis(monostate_val);                              \
  |  | 8423|   101k|    }
  ------------------
 8436|   151k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 50.7k, False: 252k]
  ------------------
 8437|   151k|            SCN_VISIT(long long);
  ------------------
  |  | 8418|   151k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   151k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   151k|    }                                                           \
  |  | 8421|   151k|    else {                                                      \
  |  | 8422|   151k|        return vis(monostate_val);                              \
  |  | 8423|   151k|    }
  ------------------
 8438|   202k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 50.4k, False: 252k]
  ------------------
 8439|   202k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|   202k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   202k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   202k|    }                                                           \
  |  | 8421|   202k|    else {                                                      \
  |  | 8422|   202k|        return vis(monostate_val);                              \
  |  | 8423|   202k|    }
  ------------------
 8440|   202k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 303k]
  ------------------
 8441|   202k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|   202k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   202k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   202k|    }                                                           \
  |  | 8421|   202k|    else {                                                      \
  |  | 8422|   202k|        return vis(monostate_val);                              \
  |  | 8423|   202k|    }
  ------------------
 8442|   252k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 50.5k, False: 252k]
  ------------------
 8443|   252k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|   252k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   252k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   252k|    }                                                           \
  |  | 8421|   252k|    else {                                                      \
  |  | 8422|   252k|        return vis(monostate_val);                              \
  |  | 8423|   252k|    }
  ------------------
 8444|   252k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 303k]
  ------------------
 8445|   252k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|   252k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   252k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   252k|    }                                                           \
  |  | 8421|   252k|    else {                                                      \
  |  | 8422|   252k|        return vis(monostate_val);                              \
  |  | 8423|   252k|    }
  ------------------
 8446|   303k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 50.6k, False: 252k]
  ------------------
 8447|   303k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|   303k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   303k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   303k|    }                                                           \
  |  | 8421|   303k|    else {                                                      \
  |  | 8422|   303k|        return vis(monostate_val);                              \
  |  | 8423|   303k|    }
  ------------------
 8448|   303k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 303k]
  ------------------
 8449|   303k|            SCN_VISIT(void*);
  ------------------
  |  | 8418|   303k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   303k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   303k|    }                                                           \
  |  | 8421|   303k|    else {                                                      \
  |  | 8422|   303k|        return vis(monostate_val);                              \
  |  | 8423|   303k|    }
  ------------------
 8450|   303k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 303k]
  ------------------
 8451|   303k|            SCN_VISIT(bool);
  ------------------
  |  | 8418|   303k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   303k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   303k|    }                                                           \
  |  | 8421|   303k|    else {                                                      \
  |  | 8422|   303k|        return vis(monostate_val);                              \
  |  | 8423|   303k|    }
  ------------------
 8452|   303k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 303k]
  ------------------
 8453|   303k|            SCN_VISIT(char);
  ------------------
  |  | 8418|   303k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   303k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   303k|    }                                                           \
  |  | 8421|   303k|    else {                                                      \
  |  | 8422|   303k|        return vis(monostate_val);                              \
  |  | 8423|   303k|    }
  ------------------
 8454|   303k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 303k]
  ------------------
 8455|   303k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|   303k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   303k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   303k|    }                                                           \
  |  | 8421|   303k|    else {                                                      \
  |  | 8422|   303k|        return vis(monostate_val);                              \
  |  | 8423|   303k|    }
  ------------------
 8456|   303k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 303k]
  ------------------
 8457|   303k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|   303k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   303k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   303k|    }                                                           \
  |  | 8421|   303k|    else {                                                      \
  |  | 8422|   303k|        return vis(monostate_val);                              \
  |  | 8423|   303k|    }
  ------------------
 8458|   303k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 303k]
  ------------------
 8459|   303k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   303k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   303k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   303k|    }                                                           \
  |  | 8421|   303k|    else {                                                      \
  |  | 8422|   303k|        return vis(monostate_val);                              \
  |  | 8423|   303k|    }
  ------------------
 8460|   303k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 303k]
  ------------------
 8461|   303k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   303k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   303k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   303k|    }                                                           \
  |  | 8421|   303k|    else {                                                      \
  |  | 8422|   303k|        return vis(monostate_val);                              \
  |  | 8423|   303k|    }
  ------------------
 8462|   303k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 303k]
  ------------------
 8463|   303k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   303k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   303k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   303k|    }                                                           \
  |  | 8421|   303k|    else {                                                      \
  |  | 8422|   303k|        return vis(monostate_val);                              \
  |  | 8423|   303k|    }
  ------------------
 8464|   303k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 303k]
  ------------------
 8465|   303k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|   303k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   303k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   303k|    }                                                           \
  |  | 8421|   303k|    else {                                                      \
  |  | 8422|   303k|        return vis(monostate_val);                              \
  |  | 8423|   303k|    }
  ------------------
 8466|   303k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 303k]
  ------------------
 8467|   303k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|   303k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   303k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   303k|    }                                                           \
  |  | 8421|   303k|    else {                                                      \
  |  | 8422|   303k|        return vis(monostate_val);                              \
  |  | 8423|   303k|    }
  ------------------
 8468|   303k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 303k]
  ------------------
 8469|   303k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|   303k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   303k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   303k|    }                                                           \
  |  | 8421|   303k|    else {                                                      \
  |  | 8422|   303k|        return vis(monostate_val);                              \
  |  | 8423|   303k|    }
  ------------------
 8470|   303k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 303k]
  ------------------
 8471|   303k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|   303k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   303k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   303k|    }                                                           \
  |  | 8421|   303k|    else {                                                      \
  |  | 8422|   303k|        return vis(monostate_val);                              \
  |  | 8423|   303k|    }
  ------------------
 8472|   303k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 303k]
  ------------------
 8473|   303k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|   303k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   303k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   303k|    }                                                           \
  |  | 8421|   303k|    else {                                                      \
  |  | 8422|   303k|        return vis(monostate_val);                              \
  |  | 8423|   303k|    }
  ------------------
 8474|   303k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 303k]
  ------------------
 8475|   303k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|   303k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   303k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   303k|    }                                                           \
  |  | 8421|   303k|    else {                                                      \
  |  | 8422|   303k|        return vis(monostate_val);                              \
  |  | 8423|   303k|    }
  ------------------
 8476|       |
 8477|   303k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 303k]
  ------------------
 8478|   303k|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|   303k|            return vis(
 8480|   303k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 303k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 303k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   303k|            SCN_CLANG_POP
 8495|   303k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v36detail17basic_scan_bufferIwE8sync_allEv:
 4075|   525k|    {
 4076|   525k|        sync(0);
 4077|   525k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
 5419|   327k|    constexpr basic_scan_args() = default;
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
 5419|  50.6k|    constexpr basic_scan_args() = default;

_ZN3scn2v34scanIJaENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  41.9k|{
   89|  41.9k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  41.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  41.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  41.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.9k|    static_cast<    \
  |  |  929|  41.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.9k|    static_cast<    \
  |  |  929|  41.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  41.9k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   252k|{
   44|   252k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   252k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   252k|}
_ZN3scn2v34scanIJaENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  41.9k|{
  127|  41.9k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  41.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  41.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  41.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.9k|    static_cast<    \
  |  |  929|  41.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.9k|    static_cast<    \
  |  |  929|  41.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  41.9k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   252k|{
   60|   252k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   252k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   252k|}
_ZN3scn2v310scan_valueIaNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  162|  4.21k|{
  163|  4.21k|    T value;
  164|  4.21k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  4.21k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  4.21k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  4.21k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  4.21k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.21k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.17k, False: 48]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.17k|    }                                                  \
  |  |  |  | 3671|  4.21k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     48|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     48|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     48|    static_cast<    \
  |  |  929|     48|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     48|    static_cast<    \
  |  |  929|     48|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  4.21k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  25.3k|{
   72|  25.3k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  25.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  25.3k|}
_ZN3scn2v34scanIJhENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  41.9k|{
   89|  41.9k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  41.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  41.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  41.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.9k|    static_cast<    \
  |  |  929|  41.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.9k|    static_cast<    \
  |  |  929|  41.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  41.9k|}
_ZN3scn2v34scanIJhENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  41.9k|{
  127|  41.9k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  41.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  41.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  41.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.9k|    static_cast<    \
  |  |  929|  41.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.9k|    static_cast<    \
  |  |  929|  41.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  41.9k|}
_ZN3scn2v310scan_valueIhNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  162|  4.20k|{
  163|  4.20k|    T value;
  164|  4.20k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  4.20k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  4.20k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  4.20k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  4.20k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.17k, False: 39]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.17k|    }                                                  \
  |  |  |  | 3671|  4.20k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     39|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     39|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     39|    static_cast<    \
  |  |  929|     39|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     39|    static_cast<    \
  |  |  929|     39|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  4.20k|}
_ZN3scn2v34scanIJiENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  42.0k|{
   89|  42.0k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  42.0k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  42.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  42.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  42.0k|    static_cast<    \
  |  |  929|  42.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  42.0k|    static_cast<    \
  |  |  929|  42.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  42.0k|}
_ZN3scn2v34scanIJiENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  42.0k|{
  127|  42.0k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  42.0k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  42.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  42.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  42.0k|    static_cast<    \
  |  |  929|  42.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  42.0k|    static_cast<    \
  |  |  929|  42.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  42.0k|}
_ZN3scn2v310scan_valueIiNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  162|  4.22k|{
  163|  4.22k|    T value;
  164|  4.22k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  4.22k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  4.22k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  4.22k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  4.22k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.17k, False: 58]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.17k|    }                                                  \
  |  |  |  | 3671|  4.22k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     58|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     58|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     58|    static_cast<    \
  |  |  929|     58|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     58|    static_cast<    \
  |  |  929|     58|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  4.22k|}
_ZN3scn2v34scanIJjENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  41.9k|{
   89|  41.9k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  41.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  41.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  41.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.9k|    static_cast<    \
  |  |  929|  41.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.9k|    static_cast<    \
  |  |  929|  41.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  41.9k|}
_ZN3scn2v34scanIJjENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  41.9k|{
  127|  41.9k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  41.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  41.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  41.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.9k|    static_cast<    \
  |  |  929|  41.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.9k|    static_cast<    \
  |  |  929|  41.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  41.9k|}
_ZN3scn2v310scan_valueIjNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  162|  4.21k|{
  163|  4.21k|    T value;
  164|  4.21k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  4.21k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  4.21k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  4.21k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  4.21k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.21k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.17k, False: 45]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.17k|    }                                                  \
  |  |  |  | 3671|  4.21k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     45|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     45|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     45|    static_cast<    \
  |  |  929|     45|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     45|    static_cast<    \
  |  |  929|     45|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  4.21k|}
_ZN3scn2v34scanIJxENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  42.1k|{
   89|  42.1k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  42.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  42.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  42.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  42.1k|    static_cast<    \
  |  |  929|  42.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  42.1k|    static_cast<    \
  |  |  929|  42.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  42.1k|}
_ZN3scn2v34scanIJxENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  42.1k|{
  127|  42.1k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  42.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  42.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  42.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  42.1k|    static_cast<    \
  |  |  929|  42.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  42.1k|    static_cast<    \
  |  |  929|  42.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  42.1k|}
_ZN3scn2v310scan_valueIxNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  162|  4.24k|{
  163|  4.24k|    T value;
  164|  4.24k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  4.24k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  4.24k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  4.24k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  4.24k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.17k, False: 73]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.17k|    }                                                  \
  |  |  |  | 3671|  4.24k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     73|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     73|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     73|    static_cast<    \
  |  |  929|     73|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     73|    static_cast<    \
  |  |  929|     73|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  4.24k|}
_ZN3scn2v34scanIJyENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  42.0k|{
   89|  42.0k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  42.0k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  42.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  42.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  42.0k|    static_cast<    \
  |  |  929|  42.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  42.0k|    static_cast<    \
  |  |  929|  42.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  42.0k|}
_ZN3scn2v34scanIJyENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  42.0k|{
  127|  42.0k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  42.0k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  42.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  42.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  42.0k|    static_cast<    \
  |  |  929|  42.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  42.0k|    static_cast<    \
  |  |  929|  42.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  42.0k|}
_ZN3scn2v310scan_valueIyNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  162|  4.22k|{
  163|  4.22k|    T value;
  164|  4.22k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  4.22k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  4.22k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  4.22k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  4.22k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.17k, False: 57]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.17k|    }                                                  \
  |  |  |  | 3671|  4.22k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     57|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     57|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     57|    static_cast<    \
  |  |  929|     57|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     57|    static_cast<    \
  |  |  929|     57|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  4.22k|}
_ZN3scn2v34scanIJaENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  41.9k|{
   89|  41.9k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  41.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  41.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  41.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.9k|    static_cast<    \
  |  |  929|  41.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.9k|    static_cast<    \
  |  |  929|  41.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  41.9k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   252k|{
   44|   252k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   252k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   252k|}
_ZN3scn2v34scanIJaENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  126|  41.9k|{
  127|  41.9k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  41.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  41.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  41.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.9k|    static_cast<    \
  |  |  929|  41.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.9k|    static_cast<    \
  |  |  929|  41.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  41.9k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   252k|{
   60|   252k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   252k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   252k|}
_ZN3scn2v310scan_valueIaNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  162|  4.21k|{
  163|  4.21k|    T value;
  164|  4.21k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  4.21k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  4.21k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  4.21k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  4.21k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.21k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.17k, False: 48]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.17k|    }                                                  \
  |  |  |  | 3671|  4.21k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     48|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     48|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     48|    static_cast<    \
  |  |  929|     48|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     48|    static_cast<    \
  |  |  929|     48|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  4.21k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  25.3k|{
   72|  25.3k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  25.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  25.3k|}
_ZN3scn2v34scanIJhENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  41.9k|{
   89|  41.9k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  41.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  41.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  41.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.9k|    static_cast<    \
  |  |  929|  41.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.9k|    static_cast<    \
  |  |  929|  41.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  41.9k|}
_ZN3scn2v34scanIJhENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  126|  41.9k|{
  127|  41.9k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  41.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  41.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  41.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.9k|    static_cast<    \
  |  |  929|  41.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.9k|    static_cast<    \
  |  |  929|  41.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  41.9k|}
_ZN3scn2v310scan_valueIhNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  162|  4.20k|{
  163|  4.20k|    T value;
  164|  4.20k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  4.20k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  4.20k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  4.20k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  4.20k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.17k, False: 39]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.17k|    }                                                  \
  |  |  |  | 3671|  4.20k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     39|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     39|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     39|    static_cast<    \
  |  |  929|     39|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     39|    static_cast<    \
  |  |  929|     39|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  4.20k|}
_ZN3scn2v34scanIJiENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  42.0k|{
   89|  42.0k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  42.0k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  42.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  42.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  42.0k|    static_cast<    \
  |  |  929|  42.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  42.0k|    static_cast<    \
  |  |  929|  42.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  42.0k|}
_ZN3scn2v34scanIJiENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  126|  42.0k|{
  127|  42.0k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  42.0k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  42.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  42.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  42.0k|    static_cast<    \
  |  |  929|  42.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  42.0k|    static_cast<    \
  |  |  929|  42.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  42.0k|}
_ZN3scn2v310scan_valueIiNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  162|  4.22k|{
  163|  4.22k|    T value;
  164|  4.22k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  4.22k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  4.22k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  4.22k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  4.22k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.17k, False: 58]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.17k|    }                                                  \
  |  |  |  | 3671|  4.22k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     58|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     58|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     58|    static_cast<    \
  |  |  929|     58|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     58|    static_cast<    \
  |  |  929|     58|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  4.22k|}
_ZN3scn2v34scanIJjENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  41.9k|{
   89|  41.9k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  41.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  41.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  41.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.9k|    static_cast<    \
  |  |  929|  41.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.9k|    static_cast<    \
  |  |  929|  41.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  41.9k|}
_ZN3scn2v34scanIJjENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  126|  41.9k|{
  127|  41.9k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  41.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  41.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  41.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.9k|    static_cast<    \
  |  |  929|  41.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.9k|    static_cast<    \
  |  |  929|  41.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  41.9k|}
_ZN3scn2v310scan_valueIjNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  162|  4.21k|{
  163|  4.21k|    T value;
  164|  4.21k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  4.21k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  4.21k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  4.21k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  4.21k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.21k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.17k, False: 45]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.17k|    }                                                  \
  |  |  |  | 3671|  4.21k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     45|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     45|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     45|    static_cast<    \
  |  |  929|     45|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     45|    static_cast<    \
  |  |  929|     45|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  4.21k|}
_ZN3scn2v34scanIJxENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  42.1k|{
   89|  42.1k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  42.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  42.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  42.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  42.1k|    static_cast<    \
  |  |  929|  42.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  42.1k|    static_cast<    \
  |  |  929|  42.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  42.1k|}
_ZN3scn2v34scanIJxENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  126|  42.1k|{
  127|  42.1k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  42.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  42.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  42.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  42.1k|    static_cast<    \
  |  |  929|  42.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  42.1k|    static_cast<    \
  |  |  929|  42.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  42.1k|}
_ZN3scn2v310scan_valueIxNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  162|  4.24k|{
  163|  4.24k|    T value;
  164|  4.24k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  4.24k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  4.24k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  4.24k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  4.24k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.17k, False: 73]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.17k|    }                                                  \
  |  |  |  | 3671|  4.24k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     73|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     73|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     73|    static_cast<    \
  |  |  929|     73|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     73|    static_cast<    \
  |  |  929|     73|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  4.24k|}
_ZN3scn2v34scanIJyENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  42.0k|{
   89|  42.0k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  42.0k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  42.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  42.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  42.0k|    static_cast<    \
  |  |  929|  42.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  42.0k|    static_cast<    \
  |  |  929|  42.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  42.0k|}
_ZN3scn2v34scanIJyENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  126|  42.0k|{
  127|  42.0k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  42.0k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  42.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  42.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  42.0k|    static_cast<    \
  |  |  929|  42.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  42.0k|    static_cast<    \
  |  |  929|  42.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  42.0k|}
_ZN3scn2v310scan_valueIyNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  162|  4.22k|{
  163|  4.22k|    T value;
  164|  4.22k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  4.22k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  4.22k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  4.22k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  4.22k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.17k, False: 57]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.17k|    }                                                  \
  |  |  |  | 3671|  4.22k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     57|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     57|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     57|    static_cast<    \
  |  |  929|     57|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     57|    static_cast<    \
  |  |  929|     57|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  4.22k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  651|  2.61M|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  652|  2.61M|{
  653|  2.61M|    static_assert(std::is_same_v<Locale, std::locale>);
  654|  2.61M|}
_ZNK3scn2v36detail10locale_ref3getINSt3__16localeEEET_v:
  658|   743k|{
  659|   743k|    static_assert(std::is_same_v<Locale, std::locale>);
  660|   743k|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (660:12): [True: 371k, False: 371k]
  ------------------
  661|   743k|                    : std::locale{};
  662|   743k|}
_ZN3scn2v34impl19parse_integer_valueIcaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|   581k|{
 1461|   581k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|   581k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   581k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|   581k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|   581k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   581k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|   581k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|   581k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   581k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|   581k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|   581k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   581k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|   581k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 14.2k, False: 567k]
  ------------------
 1467|  14.2k|        SCN_UNLIKELY_ATTR
 1468|  14.2k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  14.2k|                                     "Invalid integer value");
 1470|  14.2k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|   567k|    auto start = source.data();
 1474|   567k|    const auto end = source.data() + source.size();
 1475|   567k|    {
 1476|  1.42M|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 1.34M, False: 86.1k]
  ------------------
 1477|  1.34M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 481k, False: 860k]
  ------------------
 1478|   481k|                break;
 1479|   481k|            }
 1480|  1.34M|        }
 1481|   567k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 143k, False: 423k]
  |  |  |  Branch (859:45): [True: 86.1k, False: 481k]
  |  |  |  Branch (859:45): [True: 57.5k, False: 423k]
  |  |  ------------------
  ------------------
 1482|   143k|            value = 0;
 1483|   143k|            return ranges::next(source.begin(),
 1484|   143k|                                ranges::distance(source.data(), start));
 1485|   143k|        }
 1486|   567k|    }
 1487|       |
 1488|   423k|    if constexpr (std::is_same_v<CharT, char>) {
 1489|   423k|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 334k, False: 89.6k]
  ------------------
 1490|   334k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3672|   334k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   334k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   334k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   334k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14.8k, False: 319k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  14.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  14.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  14.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  14.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  14.8k|    }                                                  \
  |  |  |  | 3671|   334k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   319k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|   319k|                             detail::make_string_view_from_pointers(start, end),
 1492|   319k|                             value, sign == sign_type::minus_sign));
 1493|   319k|            return ranges::next(source.begin(),
 1494|   319k|                                ranges::distance(source.data(), ptr));
 1495|   334k|        }
 1496|   423k|    }
 1497|       |
 1498|   415k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|   423k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   423k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   423k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   423k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.89k, False: 415k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  7.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  7.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  7.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  7.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  7.89k|    }                                                  \
  |  |  |  | 3671|   423k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   415k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|   415k|                     detail::make_string_view_from_pointers(start, end), value,
 1500|   415k|                     base, sign == sign_type::minus_sign));
 1501|   415k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|   423k|}
_ZN3scn2v34impl19parse_integer_valueIwaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|  55.1k|{
 1461|  55.1k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  55.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  55.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|  55.1k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  55.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  55.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  55.1k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  55.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  55.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  55.1k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  55.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  55.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|  55.1k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 53.6k, False: 1.54k]
  ------------------
 1467|  53.6k|        SCN_UNLIKELY_ATTR
 1468|  53.6k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  53.6k|                                     "Invalid integer value");
 1470|  53.6k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|  1.54k|    auto start = source.data();
 1474|  1.54k|    const auto end = source.data() + source.size();
 1475|  1.54k|    {
 1476|  2.00k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 1.75k, False: 252]
  ------------------
 1477|  1.75k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 1.29k, False: 460]
  ------------------
 1478|  1.29k|                break;
 1479|  1.29k|            }
 1480|  1.75k|        }
 1481|  1.54k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|  2.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 372, False: 1.17k]
  |  |  |  Branch (859:45): [True: 252, False: 1.29k]
  |  |  |  Branch (859:45): [True: 120, False: 1.17k]
  |  |  ------------------
  ------------------
 1482|    372|            value = 0;
 1483|    372|            return ranges::next(source.begin(),
 1484|    372|                                ranges::distance(source.data(), start));
 1485|    372|        }
 1486|  1.54k|    }
 1487|       |
 1488|       |    if constexpr (std::is_same_v<CharT, char>) {
 1489|       |        if (base == 10) {
 1490|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|       |                             detail::make_string_view_from_pointers(start, end),
 1492|       |                             value, sign == sign_type::minus_sign));
 1493|       |            return ranges::next(source.begin(),
 1494|       |                                ranges::distance(source.data(), ptr));
 1495|       |        }
 1496|       |    }
 1497|       |
 1498|  1.17k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|  1.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 376, False: 796]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    376|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    376|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    376|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    376|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    376|    }                                                  \
  |  |  |  | 3671|  1.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    796|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|    796|                     detail::make_string_view_from_pointers(start, end), value,
 1500|    796|                     base, sign == sign_type::minus_sign));
 1501|    796|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|  1.17k|}
_ZN3scn2v34impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|   740k|{
 1461|   740k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|   740k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   740k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|   740k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|   740k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   740k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|   740k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|   740k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   740k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|   740k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|   740k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   740k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|   740k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 17.5k, False: 723k]
  ------------------
 1467|  17.5k|        SCN_UNLIKELY_ATTR
 1468|  17.5k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  17.5k|                                     "Invalid integer value");
 1470|  17.5k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|   723k|    auto start = source.data();
 1474|   723k|    const auto end = source.data() + source.size();
 1475|   723k|    {
 1476|  1.70M|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 1.60M, False: 103k]
  ------------------
 1477|  1.60M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 619k, False: 983k]
  ------------------
 1478|   619k|                break;
 1479|   619k|            }
 1480|  1.60M|        }
 1481|   723k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|  1.34M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 175k, False: 547k]
  |  |  |  Branch (859:45): [True: 103k, False: 619k]
  |  |  |  Branch (859:45): [True: 72.0k, False: 547k]
  |  |  ------------------
  ------------------
 1482|   175k|            value = 0;
 1483|   175k|            return ranges::next(source.begin(),
 1484|   175k|                                ranges::distance(source.data(), start));
 1485|   175k|        }
 1486|   723k|    }
 1487|       |
 1488|   547k|    if constexpr (std::is_same_v<CharT, char>) {
 1489|   547k|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 387k, False: 159k]
  ------------------
 1490|   387k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3672|   387k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   387k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   387k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   387k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.26k, False: 380k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  7.26k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  7.26k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  7.26k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  7.26k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  7.26k|    }                                                  \
  |  |  |  | 3671|   387k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   380k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|   380k|                             detail::make_string_view_from_pointers(start, end),
 1492|   380k|                             value, sign == sign_type::minus_sign));
 1493|   380k|            return ranges::next(source.begin(),
 1494|   380k|                                ranges::distance(source.data(), ptr));
 1495|   387k|        }
 1496|   547k|    }
 1497|       |
 1498|   543k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|   547k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   547k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   547k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   547k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.57k, False: 543k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.57k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.57k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.57k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.57k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.57k|    }                                                  \
  |  |  |  | 3671|   547k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   543k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|   543k|                     detail::make_string_view_from_pointers(start, end), value,
 1500|   543k|                     base, sign == sign_type::minus_sign));
 1501|   543k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|   547k|}
_ZN3scn2v34impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|  55.2k|{
 1461|  55.2k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  55.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  55.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|  55.2k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  55.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  55.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  55.2k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  55.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  55.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  55.2k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  55.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  55.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|  55.2k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 53.6k, False: 1.58k]
  ------------------
 1467|  53.6k|        SCN_UNLIKELY_ATTR
 1468|  53.6k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  53.6k|                                     "Invalid integer value");
 1470|  53.6k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|  1.58k|    auto start = source.data();
 1474|  1.58k|    const auto end = source.data() + source.size();
 1475|  1.58k|    {
 1476|  2.06k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 1.80k, False: 263]
  ------------------
 1477|  1.80k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 1.32k, False: 478]
  ------------------
 1478|  1.32k|                break;
 1479|  1.32k|            }
 1480|  1.80k|        }
 1481|  1.58k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|  2.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 390, False: 1.19k]
  |  |  |  Branch (859:45): [True: 263, False: 1.32k]
  |  |  |  Branch (859:45): [True: 127, False: 1.19k]
  |  |  ------------------
  ------------------
 1482|    390|            value = 0;
 1483|    390|            return ranges::next(source.begin(),
 1484|    390|                                ranges::distance(source.data(), start));
 1485|    390|        }
 1486|  1.58k|    }
 1487|       |
 1488|       |    if constexpr (std::is_same_v<CharT, char>) {
 1489|       |        if (base == 10) {
 1490|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|       |                             detail::make_string_view_from_pointers(start, end),
 1492|       |                             value, sign == sign_type::minus_sign));
 1493|       |            return ranges::next(source.begin(),
 1494|       |                                ranges::distance(source.data(), ptr));
 1495|       |        }
 1496|       |    }
 1497|       |
 1498|  1.19k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|  1.19k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.19k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.19k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 192, False: 1.00k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    192|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    192|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    192|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    192|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    192|    }                                                  \
  |  |  |  | 3671|  1.19k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.00k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|  1.00k|                     detail::make_string_view_from_pointers(start, end), value,
 1500|  1.00k|                     base, sign == sign_type::minus_sign));
 1501|  1.00k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|  1.19k|}
_ZN3scn2v34impl19parse_integer_valueIcxEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|   753k|{
 1461|   753k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|   753k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   753k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|   753k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|   753k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   753k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|   753k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|   753k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   753k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|   753k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|   753k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   753k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|   753k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 18.8k, False: 734k]
  ------------------
 1467|  18.8k|        SCN_UNLIKELY_ATTR
 1468|  18.8k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  18.8k|                                     "Invalid integer value");
 1470|  18.8k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|   734k|    auto start = source.data();
 1474|   734k|    const auto end = source.data() + source.size();
 1475|   734k|    {
 1476|  1.72M|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 1.62M, False: 104k]
  ------------------
 1477|  1.62M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 630k, False: 992k]
  ------------------
 1478|   630k|                break;
 1479|   630k|            }
 1480|  1.62M|        }
 1481|   734k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|  1.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 177k, False: 557k]
  |  |  |  Branch (859:45): [True: 104k, False: 630k]
  |  |  |  Branch (859:45): [True: 72.5k, False: 557k]
  |  |  ------------------
  ------------------
 1482|   177k|            value = 0;
 1483|   177k|            return ranges::next(source.begin(),
 1484|   177k|                                ranges::distance(source.data(), start));
 1485|   177k|        }
 1486|   734k|    }
 1487|       |
 1488|   557k|    if constexpr (std::is_same_v<CharT, char>) {
 1489|   557k|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 394k, False: 162k]
  ------------------
 1490|   394k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3672|   394k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   394k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   394k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   394k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.55k, False: 390k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.55k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.55k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.55k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.55k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.55k|    }                                                  \
  |  |  |  | 3671|   394k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   390k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|   390k|                             detail::make_string_view_from_pointers(start, end),
 1492|   390k|                             value, sign == sign_type::minus_sign));
 1493|   390k|            return ranges::next(source.begin(),
 1494|   390k|                                ranges::distance(source.data(), ptr));
 1495|   394k|        }
 1496|   557k|    }
 1497|       |
 1498|   555k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|   557k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   557k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   557k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   557k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.17k, False: 555k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.17k|    }                                                  \
  |  |  |  | 3671|   557k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   555k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|   555k|                     detail::make_string_view_from_pointers(start, end), value,
 1500|   555k|                     base, sign == sign_type::minus_sign));
 1501|   555k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|   557k|}
_ZN3scn2v34impl19parse_integer_valueIwxEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|  55.4k|{
 1461|  55.4k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  55.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  55.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|  55.4k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  55.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  55.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  55.4k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  55.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  55.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  55.4k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  55.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  55.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|  55.4k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 53.7k, False: 1.71k]
  ------------------
 1467|  53.7k|        SCN_UNLIKELY_ATTR
 1468|  53.7k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  53.7k|                                     "Invalid integer value");
 1470|  53.7k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|  1.71k|    auto start = source.data();
 1474|  1.71k|    const auto end = source.data() + source.size();
 1475|  1.71k|    {
 1476|  2.25k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 1.95k, False: 296]
  ------------------
 1477|  1.95k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 1.42k, False: 532]
  ------------------
 1478|  1.42k|                break;
 1479|  1.42k|            }
 1480|  1.95k|        }
 1481|  1.71k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|  3.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 444, False: 1.27k]
  |  |  |  Branch (859:45): [True: 296, False: 1.42k]
  |  |  |  Branch (859:45): [True: 148, False: 1.27k]
  |  |  ------------------
  ------------------
 1482|    444|            value = 0;
 1483|    444|            return ranges::next(source.begin(),
 1484|    444|                                ranges::distance(source.data(), start));
 1485|    444|        }
 1486|  1.71k|    }
 1487|       |
 1488|       |    if constexpr (std::is_same_v<CharT, char>) {
 1489|       |        if (base == 10) {
 1490|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|       |                             detail::make_string_view_from_pointers(start, end),
 1492|       |                             value, sign == sign_type::minus_sign));
 1493|       |            return ranges::next(source.begin(),
 1494|       |                                ranges::distance(source.data(), ptr));
 1495|       |        }
 1496|       |    }
 1497|       |
 1498|  1.27k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|  1.27k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.27k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.27k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.27k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 28, False: 1.24k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     28|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     28|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     28|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     28|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     28|    }                                                  \
  |  |  |  | 3671|  1.27k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.24k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|  1.24k|                     detail::make_string_view_from_pointers(start, end), value,
 1500|  1.24k|                     base, sign == sign_type::minus_sign));
 1501|  1.24k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|  1.27k|}
_ZN3scn2v34impl19parse_integer_valueIchEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|   542k|{
 1461|   542k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|   542k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   542k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|   542k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|   542k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   542k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|   542k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|   542k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   542k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|   542k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|   542k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   542k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|   542k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 10.8k, False: 531k]
  ------------------
 1467|  10.8k|        SCN_UNLIKELY_ATTR
 1468|  10.8k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  10.8k|                                     "Invalid integer value");
 1470|  10.8k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|   531k|    auto start = source.data();
 1474|   531k|    const auto end = source.data() + source.size();
 1475|   531k|    {
 1476|  1.39M|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 1.30M, False: 87.5k]
  ------------------
 1477|  1.30M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 443k, False: 859k]
  ------------------
 1478|   443k|                break;
 1479|   443k|            }
 1480|  1.30M|        }
 1481|   531k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|   975k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 148k, False: 383k]
  |  |  |  Branch (859:45): [True: 87.5k, False: 443k]
  |  |  |  Branch (859:45): [True: 60.4k, False: 383k]
  |  |  ------------------
  ------------------
 1482|   148k|            value = 0;
 1483|   148k|            return ranges::next(source.begin(),
 1484|   148k|                                ranges::distance(source.data(), start));
 1485|   148k|        }
 1486|   531k|    }
 1487|       |
 1488|   383k|    if constexpr (std::is_same_v<CharT, char>) {
 1489|   383k|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 283k, False: 100k]
  ------------------
 1490|   283k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3672|   283k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   283k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   283k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   283k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.26k, False: 275k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  7.26k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  7.26k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  7.26k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  7.26k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  7.26k|    }                                                  \
  |  |  |  | 3671|   283k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   275k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|   275k|                             detail::make_string_view_from_pointers(start, end),
 1492|   275k|                             value, sign == sign_type::minus_sign));
 1493|   275k|            return ranges::next(source.begin(),
 1494|   275k|                                ranges::distance(source.data(), ptr));
 1495|   283k|        }
 1496|   383k|    }
 1497|       |
 1498|   379k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|   383k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   383k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   383k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   383k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.90k, False: 379k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.90k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.90k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.90k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.90k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.90k|    }                                                  \
  |  |  |  | 3671|   383k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   379k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|   379k|                     detail::make_string_view_from_pointers(start, end), value,
 1500|   379k|                     base, sign == sign_type::minus_sign));
 1501|   379k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|   383k|}
_ZN3scn2v34impl19parse_integer_valueIwhEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|  54.7k|{
 1461|  54.7k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  54.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  54.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|  54.7k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  54.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  54.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  54.7k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  54.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  54.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  54.7k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  54.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  54.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|  54.7k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 53.4k, False: 1.27k]
  ------------------
 1467|  53.4k|        SCN_UNLIKELY_ATTR
 1468|  53.4k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  53.4k|                                     "Invalid integer value");
 1470|  53.4k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|  1.27k|    auto start = source.data();
 1474|  1.27k|    const auto end = source.data() + source.size();
 1475|  1.27k|    {
 1476|  1.71k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 1.47k, False: 241]
  ------------------
 1477|  1.47k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 1.03k, False: 442]
  ------------------
 1478|  1.03k|                break;
 1479|  1.03k|            }
 1480|  1.47k|        }
 1481|  1.27k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|  2.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 354, False: 922]
  |  |  |  Branch (859:45): [True: 241, False: 1.03k]
  |  |  |  Branch (859:45): [True: 113, False: 922]
  |  |  ------------------
  ------------------
 1482|    354|            value = 0;
 1483|    354|            return ranges::next(source.begin(),
 1484|    354|                                ranges::distance(source.data(), start));
 1485|    354|        }
 1486|  1.27k|    }
 1487|       |
 1488|       |    if constexpr (std::is_same_v<CharT, char>) {
 1489|       |        if (base == 10) {
 1490|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|       |                             detail::make_string_view_from_pointers(start, end),
 1492|       |                             value, sign == sign_type::minus_sign));
 1493|       |            return ranges::next(source.begin(),
 1494|       |                                ranges::distance(source.data(), ptr));
 1495|       |        }
 1496|       |    }
 1497|       |
 1498|    922|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|    922|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    922|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    922|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    922|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 294, False: 628]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    294|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    294|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    294|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    294|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    294|    }                                                  \
  |  |  |  | 3671|    922|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    628|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|    628|                     detail::make_string_view_from_pointers(start, end), value,
 1500|    628|                     base, sign == sign_type::minus_sign));
 1501|    628|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|    922|}
_ZN3scn2v34impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|   618k|{
 1461|   618k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|   618k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   618k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|   618k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|   618k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   618k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|   618k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|   618k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   618k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|   618k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|   618k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   618k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|   618k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 12.3k, False: 605k]
  ------------------
 1467|  12.3k|        SCN_UNLIKELY_ATTR
 1468|  12.3k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  12.3k|                                     "Invalid integer value");
 1470|  12.3k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|   605k|    auto start = source.data();
 1474|   605k|    const auto end = source.data() + source.size();
 1475|   605k|    {
 1476|  1.51M|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 1.42M, False: 95.3k]
  ------------------
 1477|  1.42M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 510k, False: 910k]
  ------------------
 1478|   510k|                break;
 1479|   510k|            }
 1480|  1.42M|        }
 1481|   605k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|  1.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 161k, False: 444k]
  |  |  |  Branch (859:45): [True: 95.3k, False: 510k]
  |  |  |  Branch (859:45): [True: 66.0k, False: 444k]
  |  |  ------------------
  ------------------
 1482|   161k|            value = 0;
 1483|   161k|            return ranges::next(source.begin(),
 1484|   161k|                                ranges::distance(source.data(), start));
 1485|   161k|        }
 1486|   605k|    }
 1487|       |
 1488|   444k|    if constexpr (std::is_same_v<CharT, char>) {
 1489|   444k|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 317k, False: 126k]
  ------------------
 1490|   317k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3672|   317k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   317k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   317k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   317k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.18k, False: 314k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.18k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.18k|    }                                                  \
  |  |  |  | 3671|   317k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   314k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|   314k|                             detail::make_string_view_from_pointers(start, end),
 1492|   314k|                             value, sign == sign_type::minus_sign));
 1493|   314k|            return ranges::next(source.begin(),
 1494|   314k|                                ranges::distance(source.data(), ptr));
 1495|   317k|        }
 1496|   444k|    }
 1497|       |
 1498|   442k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|   444k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   444k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   444k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   444k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.67k, False: 442k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.67k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.67k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.67k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.67k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.67k|    }                                                  \
  |  |  |  | 3671|   444k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   442k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|   442k|                     detail::make_string_view_from_pointers(start, end), value,
 1500|   442k|                     base, sign == sign_type::minus_sign));
 1501|   442k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|   444k|}
_ZN3scn2v34impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|  54.8k|{
 1461|  54.8k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  54.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  54.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|  54.8k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  54.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  54.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  54.8k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  54.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  54.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  54.8k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  54.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  54.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|  54.8k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 53.5k, False: 1.29k]
  ------------------
 1467|  53.5k|        SCN_UNLIKELY_ATTR
 1468|  53.5k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  53.5k|                                     "Invalid integer value");
 1470|  53.5k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|  1.29k|    auto start = source.data();
 1474|  1.29k|    const auto end = source.data() + source.size();
 1475|  1.29k|    {
 1476|  1.74k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 1.49k, False: 241]
  ------------------
 1477|  1.49k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 1.05k, False: 442]
  ------------------
 1478|  1.05k|                break;
 1479|  1.05k|            }
 1480|  1.49k|        }
 1481|  1.29k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|  2.35k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 354, False: 944]
  |  |  |  Branch (859:45): [True: 241, False: 1.05k]
  |  |  |  Branch (859:45): [True: 113, False: 944]
  |  |  ------------------
  ------------------
 1482|    354|            value = 0;
 1483|    354|            return ranges::next(source.begin(),
 1484|    354|                                ranges::distance(source.data(), start));
 1485|    354|        }
 1486|  1.29k|    }
 1487|       |
 1488|       |    if constexpr (std::is_same_v<CharT, char>) {
 1489|       |        if (base == 10) {
 1490|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|       |                             detail::make_string_view_from_pointers(start, end),
 1492|       |                             value, sign == sign_type::minus_sign));
 1493|       |            return ranges::next(source.begin(),
 1494|       |                                ranges::distance(source.data(), ptr));
 1495|       |        }
 1496|       |    }
 1497|       |
 1498|    944|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|    944|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    944|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    944|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    944|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 188, False: 756]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    188|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    188|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    188|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    188|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    188|    }                                                  \
  |  |  |  | 3671|    944|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    756|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|    756|                     detail::make_string_view_from_pointers(start, end), value,
 1500|    756|                     base, sign == sign_type::minus_sign));
 1501|    756|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|    944|}
_ZN3scn2v34impl19parse_integer_valueIcyEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|   624k|{
 1461|   624k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|   624k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   624k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|   624k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|   624k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   624k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|   624k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|   624k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   624k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|   624k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|   624k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   624k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|   624k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 12.6k, False: 612k]
  ------------------
 1467|  12.6k|        SCN_UNLIKELY_ATTR
 1468|  12.6k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  12.6k|                                     "Invalid integer value");
 1470|  12.6k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|   612k|    auto start = source.data();
 1474|   612k|    const auto end = source.data() + source.size();
 1475|   612k|    {
 1476|  1.52M|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 1.42M, False: 95.5k]
  ------------------
 1477|  1.42M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 516k, False: 911k]
  ------------------
 1478|   516k|                break;
 1479|   516k|            }
 1480|  1.42M|        }
 1481|   612k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 161k, False: 450k]
  |  |  |  Branch (859:45): [True: 95.5k, False: 516k]
  |  |  |  Branch (859:45): [True: 66.1k, False: 450k]
  |  |  ------------------
  ------------------
 1482|   161k|            value = 0;
 1483|   161k|            return ranges::next(source.begin(),
 1484|   161k|                                ranges::distance(source.data(), start));
 1485|   161k|        }
 1486|   612k|    }
 1487|       |
 1488|   450k|    if constexpr (std::is_same_v<CharT, char>) {
 1489|   450k|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 322k, False: 128k]
  ------------------
 1490|   322k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3672|   322k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   322k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   322k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   322k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.03k, False: 320k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.03k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.03k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.03k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.03k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.03k|    }                                                  \
  |  |  |  | 3671|   322k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   320k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|   320k|                             detail::make_string_view_from_pointers(start, end),
 1492|   320k|                             value, sign == sign_type::minus_sign));
 1493|   320k|            return ranges::next(source.begin(),
 1494|   320k|                                ranges::distance(source.data(), ptr));
 1495|   322k|        }
 1496|   450k|    }
 1497|       |
 1498|   449k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|   450k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   450k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   450k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   450k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.08k, False: 449k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.08k|    }                                                  \
  |  |  |  | 3671|   450k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   449k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|   449k|                     detail::make_string_view_from_pointers(start, end), value,
 1500|   449k|                     base, sign == sign_type::minus_sign));
 1501|   449k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|   450k|}
_ZN3scn2v34impl19parse_integer_valueIwyEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|  54.9k|{
 1461|  54.9k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  54.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  54.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|  54.9k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  54.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  54.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  54.9k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  54.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  54.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  54.9k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  54.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  54.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|  54.9k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 53.5k, False: 1.38k]
  ------------------
 1467|  53.5k|        SCN_UNLIKELY_ATTR
 1468|  53.5k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  53.5k|                                     "Invalid integer value");
 1470|  53.5k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|  1.38k|    auto start = source.data();
 1474|  1.38k|    const auto end = source.data() + source.size();
 1475|  1.38k|    {
 1476|  1.82k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 1.58k, False: 241]
  ------------------
 1477|  1.58k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 1.14k, False: 442]
  ------------------
 1478|  1.14k|                break;
 1479|  1.14k|            }
 1480|  1.58k|        }
 1481|  1.38k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|  2.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 354, False: 1.02k]
  |  |  |  Branch (859:45): [True: 241, False: 1.14k]
  |  |  |  Branch (859:45): [True: 113, False: 1.02k]
  |  |  ------------------
  ------------------
 1482|    354|            value = 0;
 1483|    354|            return ranges::next(source.begin(),
 1484|    354|                                ranges::distance(source.data(), start));
 1485|    354|        }
 1486|  1.38k|    }
 1487|       |
 1488|       |    if constexpr (std::is_same_v<CharT, char>) {
 1489|       |        if (base == 10) {
 1490|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|       |                             detail::make_string_view_from_pointers(start, end),
 1492|       |                             value, sign == sign_type::minus_sign));
 1493|       |            return ranges::next(source.begin(),
 1494|       |                                ranges::distance(source.data(), ptr));
 1495|       |        }
 1496|       |    }
 1497|       |
 1498|  1.02k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|  1.02k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.02k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.02k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 1.01k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     12|    }                                                  \
  |  |  |  | 3671|  1.02k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.01k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|  1.01k|                     detail::make_string_view_from_pointers(start, end), value,
 1500|  1.01k|                     base, sign == sign_type::minus_sign));
 1501|  1.01k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|  1.02k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2183|  1.05M|{
 2184|  1.05M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2185|  1.05M|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2191|  1.05M|{
 2192|  1.05M|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2193|  1.05M|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  1.05M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 934k, False: 125k]
  |  |  ------------------
  ------------------
 2194|   934k|        source.sync(*n);
 2195|   934k|    }
 2196|   125k|    else {
 2197|   125k|        source.sync_all();
 2198|   125k|    }
 2199|  1.05M|    return n;
 2200|  1.05M|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2207|   252k|{
 2208|   252k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2209|   252k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2215|   252k|{
 2216|   252k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2217|   252k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   252k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.92k, False: 250k]
  |  |  ------------------
  ------------------
 2218|  1.92k|        source.sync(*n);
 2219|  1.92k|    }
 2220|   250k|    else {
 2221|   250k|        source.sync_all();
 2222|   250k|    }
 2223|   252k|    return n;
 2224|   252k|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|  4.39M|{
  202|  4.39M|    return find_classic_impl(
  203|  4.39M|        source, [](char ch) { return !is_ascii_space(ch); },
  204|  4.39M|        [](char32_t cp) { return !is_cp_space(cp); });
  205|  4.39M|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2140|  1.05M|{
 2141|  1.05M|    return vscan_internal(source, format, args);
 2142|  1.05M|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2146|  1.05M|{
 2147|  1.05M|    auto n = vscan_internal(source, format, args);
 2148|  1.05M|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  1.05M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 934k, False: 125k]
  |  |  ------------------
  ------------------
 2149|   934k|        source.sync(*n);
 2150|   934k|    }
 2151|   125k|    else {
 2152|   125k|        source.sync_all();
 2153|   125k|    }
 2154|  1.05M|    return n;
 2155|  1.05M|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2160|   252k|{
 2161|   252k|    return vscan_internal(source, format, args);
 2162|   252k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2166|   252k|{
 2167|   252k|    auto n = vscan_internal(source, format, args);
 2168|   252k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   252k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.92k, False: 250k]
  |  |  ------------------
  ------------------
 2169|  1.92k|        source.sync(*n);
 2170|  1.92k|    }
 2171|   250k|    else {
 2172|   250k|        source.sync_all();
 2173|   250k|    }
 2174|   252k|    return n;
 2175|   252k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2250|   164k|{
 2251|   164k|    return vscan_value_internal(source, arg);
 2252|   164k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2255|   163k|{
 2256|   163k|    auto n = vscan_value_internal(source, arg);
 2257|   163k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   163k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 150k, False: 12.5k]
  |  |  ------------------
  ------------------
 2258|   150k|        source.sync(*n);
 2259|   150k|    }
 2260|  12.5k|    else {
 2261|  12.5k|        source.sync_all();
 2262|  12.5k|    }
 2263|   163k|    return n;
 2264|   163k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2269|  25.3k|{
 2270|  25.3k|    return vscan_value_internal(source, arg);
 2271|  25.3k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2275|  25.3k|{
 2276|  25.3k|    auto n = vscan_value_internal(source, arg);
 2277|  25.3k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  25.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 320, False: 25.0k]
  |  |  ------------------
  ------------------
 2278|    320|        source.sync(*n);
 2279|    320|    }
 2280|  25.0k|    else {
 2281|  25.0k|        source.sync_all();
 2282|  25.0k|    }
 2283|  25.3k|    return n;
 2284|  25.3k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_122check_integer_overflowIaEEbmmib:
 1368|   425k|{
 1369|   425k|    auto max_digits = maxdigits_u64(base);
 1370|   425k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1370:9): [True: 4.98k, False: 420k]
  ------------------
 1371|  4.98k|        return true;
 1372|  4.98k|    }
 1373|   420k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1373:9): [True: 788, False: 419k]
  |  Branch (1373:39): [True: 334, False: 454]
  ------------------
 1374|    334|        return true;
 1375|    334|    }
 1376|   419k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1377|   419k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1377:13): [True: 17.7k, False: 401k]
  ------------------
 1378|   419k|                      static_cast<uint64_t>(is_negative)) {
 1379|  17.7k|            SCN_UNLIKELY_ATTR
 1380|  17.7k|            return true;
 1381|  17.7k|        }
 1382|   419k|    }
 1383|       |
 1384|   401k|    return false;
 1385|   420k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113maxdigits_u64Ei:
 1314|  2.81M|{
 1315|  2.81M|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  |  924|  2.81M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.81M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1316|  2.81M|    return maxdigits_u64_table[static_cast<size_t>(base)];
 1317|  2.81M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_112min_safe_u64Ei:
 1358|  4.56k|{
 1359|  4.56k|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  |  924|  4.56k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.56k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1360|  4.56k|    return min_safe_u64_table[static_cast<size_t>(base)];
 1361|  4.56k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_112store_resultIaEET_mb:
 1389|   401k|{
 1390|   401k|    if (is_negative) {
  ------------------
  |  Branch (1390:9): [True: 47.8k, False: 354k]
  ------------------
 1391|  47.8k|        SCN_MSVC_PUSH
 1392|  47.8k|        SCN_MSVC_IGNORE(4146)
 1393|  47.8k|        return static_cast<T>(
 1394|  47.8k|            -std::numeric_limits<T>::max() -
 1395|  47.8k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1396|  47.8k|        SCN_MSVC_POP
 1397|  47.8k|    }
 1398|       |
 1399|   354k|    return static_cast<T>(u64val);
 1400|   401k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_122check_integer_overflowIiEEbmmib:
 1368|   548k|{
 1369|   548k|    auto max_digits = maxdigits_u64(base);
 1370|   548k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1370:9): [True: 5.22k, False: 543k]
  ------------------
 1371|  5.22k|        return true;
 1372|  5.22k|    }
 1373|   543k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1373:9): [True: 990, False: 542k]
  |  Branch (1373:39): [True: 496, False: 494]
  ------------------
 1374|    496|        return true;
 1375|    496|    }
 1376|   542k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1377|   542k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1377:13): [True: 5.31k, False: 537k]
  ------------------
 1378|   542k|                      static_cast<uint64_t>(is_negative)) {
 1379|  5.31k|            SCN_UNLIKELY_ATTR
 1380|  5.31k|            return true;
 1381|  5.31k|        }
 1382|   542k|    }
 1383|       |
 1384|   537k|    return false;
 1385|   543k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_112store_resultIiEET_mb:
 1389|   537k|{
 1390|   537k|    if (is_negative) {
  ------------------
  |  Branch (1390:9): [True: 54.0k, False: 483k]
  ------------------
 1391|  54.0k|        SCN_MSVC_PUSH
 1392|  54.0k|        SCN_MSVC_IGNORE(4146)
 1393|  54.0k|        return static_cast<T>(
 1394|  54.0k|            -std::numeric_limits<T>::max() -
 1395|  54.0k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1396|  54.0k|        SCN_MSVC_POP
 1397|  54.0k|    }
 1398|       |
 1399|   483k|    return static_cast<T>(u64val);
 1400|   537k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_122check_integer_overflowIxEEbmmib:
 1368|   558k|{
 1369|   558k|    auto max_digits = maxdigits_u64(base);
 1370|   558k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1370:9): [True: 5.82k, False: 553k]
  ------------------
 1371|  5.82k|        return true;
 1372|  5.82k|    }
 1373|   553k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1373:9): [True: 1.52k, False: 551k]
  |  Branch (1373:39): [True: 626, False: 898]
  ------------------
 1374|    626|        return true;
 1375|    626|    }
 1376|   552k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1377|   552k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1377:13): [True: 314, False: 552k]
  ------------------
 1378|   552k|                      static_cast<uint64_t>(is_negative)) {
 1379|    314|            SCN_UNLIKELY_ATTR
 1380|    314|            return true;
 1381|    314|        }
 1382|   552k|    }
 1383|       |
 1384|   552k|    return false;
 1385|   553k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_112store_resultIxEET_mb:
 1389|   552k|{
 1390|   552k|    if (is_negative) {
  ------------------
  |  Branch (1390:9): [True: 57.7k, False: 494k]
  ------------------
 1391|  57.7k|        SCN_MSVC_PUSH
 1392|  57.7k|        SCN_MSVC_IGNORE(4146)
 1393|  57.7k|        return static_cast<T>(
 1394|  57.7k|            -std::numeric_limits<T>::max() -
 1395|  57.7k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1396|  57.7k|        SCN_MSVC_POP
 1397|  57.7k|    }
 1398|       |
 1399|   494k|    return static_cast<T>(u64val);
 1400|   552k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_122check_integer_overflowIhEEbmmib:
 1368|   384k|{
 1369|   384k|    auto max_digits = maxdigits_u64(base);
 1370|   384k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1370:9): [True: 2.96k, False: 381k]
  ------------------
 1371|  2.96k|        return true;
 1372|  2.96k|    }
 1373|   381k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1373:9): [True: 364, False: 381k]
  |  Branch (1373:39): [True: 132, False: 232]
  ------------------
 1374|    132|        return true;
 1375|    132|    }
 1376|   381k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1377|   381k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1377:13): [True: 8.36k, False: 372k]
  ------------------
 1378|   381k|                      static_cast<uint64_t>(is_negative)) {
 1379|  8.36k|            SCN_UNLIKELY_ATTR
 1380|  8.36k|            return true;
 1381|  8.36k|        }
 1382|   381k|    }
 1383|       |
 1384|   372k|    return false;
 1385|   381k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_112store_resultIhEET_mb:
 1389|   372k|{
 1390|   372k|    if (is_negative) {
  ------------------
  |  Branch (1390:9): [True: 0, False: 372k]
  ------------------
 1391|      0|        SCN_MSVC_PUSH
 1392|      0|        SCN_MSVC_IGNORE(4146)
 1393|      0|        return static_cast<T>(
 1394|      0|            -std::numeric_limits<T>::max() -
 1395|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1396|      0|        SCN_MSVC_POP
 1397|      0|    }
 1398|       |
 1399|   372k|    return static_cast<T>(u64val);
 1400|   372k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_122check_integer_overflowIjEEbmmib:
 1368|   445k|{
 1369|   445k|    auto max_digits = maxdigits_u64(base);
 1370|   445k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1370:9): [True: 2.98k, False: 442k]
  ------------------
 1371|  2.98k|        return true;
 1372|  2.98k|    }
 1373|   442k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1373:9): [True: 380, False: 441k]
  |  Branch (1373:39): [True: 132, False: 248]
  ------------------
 1374|    132|        return true;
 1375|    132|    }
 1376|   442k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1377|   442k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1377:13): [True: 1.93k, False: 440k]
  ------------------
 1378|   442k|                      static_cast<uint64_t>(is_negative)) {
 1379|  1.93k|            SCN_UNLIKELY_ATTR
 1380|  1.93k|            return true;
 1381|  1.93k|        }
 1382|   442k|    }
 1383|       |
 1384|   440k|    return false;
 1385|   442k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_112store_resultIjEET_mb:
 1389|   440k|{
 1390|   440k|    if (is_negative) {
  ------------------
  |  Branch (1390:9): [True: 0, False: 440k]
  ------------------
 1391|      0|        SCN_MSVC_PUSH
 1392|      0|        SCN_MSVC_IGNORE(4146)
 1393|      0|        return static_cast<T>(
 1394|      0|            -std::numeric_limits<T>::max() -
 1395|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1396|      0|        SCN_MSVC_POP
 1397|      0|    }
 1398|       |
 1399|   440k|    return static_cast<T>(u64val);
 1400|   440k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_122check_integer_overflowIyEEbmmib:
 1368|   451k|{
 1369|   451k|    auto max_digits = maxdigits_u64(base);
 1370|   451k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1370:9): [True: 3.00k, False: 448k]
  ------------------
 1371|  3.00k|        return true;
 1372|  3.00k|    }
 1373|   448k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1373:9): [True: 516, False: 447k]
  |  Branch (1373:39): [True: 132, False: 384]
  ------------------
 1374|    132|        return true;
 1375|    132|    }
 1376|   448k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1377|   448k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1377:13): [True: 0, False: 448k]
  ------------------
 1378|   448k|                      static_cast<uint64_t>(is_negative)) {
 1379|      0|            SCN_UNLIKELY_ATTR
 1380|      0|            return true;
 1381|      0|        }
 1382|   448k|    }
 1383|       |
 1384|   448k|    return false;
 1385|   448k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_112store_resultIyEET_mb:
 1389|   448k|{
 1390|   448k|    if (is_negative) {
  ------------------
  |  Branch (1390:9): [True: 0, False: 448k]
  ------------------
 1391|      0|        SCN_MSVC_PUSH
 1392|      0|        SCN_MSVC_IGNORE(4146)
 1393|      0|        return static_cast<T>(
 1394|      0|            -std::numeric_limits<T>::max() -
 1395|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1396|      0|        SCN_MSVC_POP
 1397|      0|    }
 1398|       |
 1399|   448k|    return static_cast<T>(u64val);
 1400|   448k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121get_eight_digits_wordEPKc:
 1252|  1.24M|{
 1253|  1.24M|    uint64_t val{};
 1254|  1.24M|    std::memcpy(&val, input, sizeof(uint64_t));
 1255|       |    if constexpr (SCN_IS_BIG_ENDIAN) {
 1256|       |        val = byteswap(val);
 1257|       |    }
 1258|  1.24M|    return val;
 1259|  1.24M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_140parse_eight_decimal_digits_unrolled_fastEm:
 1262|   246k|{
 1263|   246k|    constexpr uint64_t mask = 0x000000FF000000FF;
 1264|   246k|    constexpr uint64_t mul1 = 0x000F424000000064;  // 100 + (1000000ULL << 32)
 1265|   246k|    constexpr uint64_t mul2 = 0x0000271000000001;  // 1 + (10000ULL << 32)
 1266|   246k|    word -= 0x3030303030303030;
 1267|   246k|    word = (word * 10) + (word >> 8);  // val = (val * 2561) >> 8;
 1268|   246k|    word = (((word & mask) * mul1) + (((word >> 16) & mask) * mul2)) >> 32;
 1269|   246k|    return static_cast<uint32_t>(word);
 1270|   246k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_141is_word_made_of_eight_decimal_digits_fastEm:
 1273|   998k|{
 1274|   998k|    return !((((word + 0x4646464646464646) | (word - 0x3030303030303030)) &
 1275|   998k|              0x8080808080808080));
 1276|   998k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|  2.70M|{
  105|  2.70M|    static_assert(sizeof(*source.data()) == 1);
  106|  2.70M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|  2.70M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.70M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|  2.70M|    uint64_t word{};
  108|  2.70M|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|  2.70M|    return has_byte_greater(word, 127) != 0;
  111|  2.70M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  4.39M|{
  118|  4.39M|    auto it = source.begin();
  119|       |
  120|  4.85M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 2.70M, False: 2.14M]
  ------------------
  121|  2.70M|        auto sv =
  122|  2.70M|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  2.70M|                .substr(0, 8);
  124|       |
  125|  2.70M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 2.62M, False: 76.2k]
  ------------------
  126|  2.62M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  2.62M|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  2.62M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 2.17M, False: 448k]
  ------------------
  129|  2.17M|                break;
  130|  2.17M|            }
  131|   448k|            continue;
  132|  2.62M|        }
  133|       |
  134|   110k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 107k, False: 3.24k]
  ------------------
  135|   107k|            auto tmp =
  136|   107k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   107k|            auto res = get_next_code_point(tmp);
  138|   107k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 72.9k, False: 34.4k]
  ------------------
  139|  72.9k|                return it;
  140|  72.9k|            }
  141|  34.4k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  34.4k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  34.4k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  34.4k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  34.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  34.4k|        }
  145|  76.2k|    }
  146|       |
  147|  4.32M|    return detail::make_string_view_iterator(source, it);
  148|  4.39M|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|  4.83M|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|   107k|        [](char32_t cp) { return !is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_126parse_decimal_integer_fastIaEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1406|   334k|{
 1407|   334k|    uint64_t u64val{};
 1408|   334k|    auto ptr = parse_decimal_integer_fast_impl(
 1409|   334k|        input.data(), input.data() + input.size(), u64val);
 1410|       |
 1411|   334k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1412|   334k|    if (SCN_UNLIKELY(
  ------------------
  |  |  859|   334k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.8k, False: 319k]
  |  |  ------------------
  ------------------
 1413|   334k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1414|  14.8k|        return unexpected_scan_error(scan_error::value_out_of_range,
 1415|  14.8k|                                     "Integer overflow");
 1416|  14.8k|    }
 1417|       |
 1418|   319k|    val = store_result<T>(u64val, is_negative);
 1419|   319k|    return ptr;
 1420|   334k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_131parse_decimal_integer_fast_implEPKcS4_Rm:
 1294|  2.03M|{
 1295|  2.03M|    loop_parse_if_eight_decimal_digits(begin, end, val);
 1296|       |
 1297|  4.63M|    while (begin != end) {
  ------------------
  |  Branch (1297:12): [True: 3.38M, False: 1.25M]
  ------------------
 1298|  3.38M|        const auto digit = char_to_int(*begin);
 1299|  3.38M|        if (digit >= 10) {
  ------------------
  |  Branch (1299:13): [True: 787k, False: 2.59M]
  ------------------
 1300|   787k|            break;
 1301|   787k|        }
 1302|  2.59M|        val = 10ull * val + static_cast<uint64_t>(digit);
 1303|  2.59M|        ++begin;
 1304|  2.59M|    }
 1305|       |
 1306|  2.03M|    return begin;
 1307|  2.03M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_134loop_parse_if_eight_decimal_digitsERPKcS4_Rm:
 1281|  2.03M|{
 1282|  2.03M|    while (
 1283|  2.28M|        std::distance(p, end) >= 8 &&
  ------------------
  |  Branch (1283:9): [True: 998k, False: 1.28M]
  ------------------
 1284|  2.28M|        is_word_made_of_eight_decimal_digits_fast(get_eight_digits_word(p))) {
  ------------------
  |  Branch (1284:9): [True: 246k, False: 752k]
  ------------------
 1285|   246k|        val = val * 100'000'000 + parse_eight_decimal_digits_unrolled_fast(
 1286|   246k|                                      get_eight_digits_word(p));
 1287|   246k|        p += 8;
 1288|   246k|    }
 1289|  2.03M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIcaEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1427|  89.6k|{
 1428|  89.6k|    uint64_t u64val{};
 1429|  89.6k|    const CharT* begin = input.data();
 1430|  89.6k|    const CharT* const end = input.data() + input.size();
 1431|       |
 1432|   430k|    while (begin != end) {
  ------------------
  |  Branch (1432:12): [True: 384k, False: 45.6k]
  ------------------
 1433|   384k|        const auto digit = char_to_int(*begin);
 1434|   384k|        if (digit >= base) {
  ------------------
  |  Branch (1434:13): [True: 43.9k, False: 340k]
  ------------------
 1435|  43.9k|            break;
 1436|  43.9k|        }
 1437|   340k|        u64val =
 1438|   340k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1439|   340k|        ++begin;
 1440|   340k|    }
 1441|       |
 1442|  89.6k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1443|  89.6k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|  89.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.89k, False: 81.7k]
  |  |  ------------------
  ------------------
 1444|  89.6k|                                               is_negative))) {
 1445|  7.89k|        return unexpected_scan_error(scan_error::value_out_of_range,
 1446|  7.89k|                                     "Integer overflow");
 1447|  7.89k|    }
 1448|       |
 1449|  81.7k|    val = store_result<T>(u64val, is_negative);
 1450|  81.7k|    return begin;
 1451|  89.6k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIwaEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1427|  1.17k|{
 1428|  1.17k|    uint64_t u64val{};
 1429|  1.17k|    const CharT* begin = input.data();
 1430|  1.17k|    const CharT* const end = input.data() + input.size();
 1431|       |
 1432|  5.85k|    while (begin != end) {
  ------------------
  |  Branch (1432:12): [True: 5.04k, False: 809]
  ------------------
 1433|  5.04k|        const auto digit = char_to_int(*begin);
 1434|  5.04k|        if (digit >= base) {
  ------------------
  |  Branch (1434:13): [True: 363, False: 4.68k]
  ------------------
 1435|    363|            break;
 1436|    363|        }
 1437|  4.68k|        u64val =
 1438|  4.68k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1439|  4.68k|        ++begin;
 1440|  4.68k|    }
 1441|       |
 1442|  1.17k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1443|  1.17k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|  1.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 376, False: 796]
  |  |  ------------------
  ------------------
 1444|  1.17k|                                               is_negative))) {
 1445|    376|        return unexpected_scan_error(scan_error::value_out_of_range,
 1446|    376|                                     "Integer overflow");
 1447|    376|    }
 1448|       |
 1449|    796|    val = store_result<T>(u64val, is_negative);
 1450|    796|    return begin;
 1451|  1.17k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_126parse_decimal_integer_fastIiEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1406|   387k|{
 1407|   387k|    uint64_t u64val{};
 1408|   387k|    auto ptr = parse_decimal_integer_fast_impl(
 1409|   387k|        input.data(), input.data() + input.size(), u64val);
 1410|       |
 1411|   387k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1412|   387k|    if (SCN_UNLIKELY(
  ------------------
  |  |  859|   387k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.26k, False: 380k]
  |  |  ------------------
  ------------------
 1413|   387k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1414|  7.26k|        return unexpected_scan_error(scan_error::value_out_of_range,
 1415|  7.26k|                                     "Integer overflow");
 1416|  7.26k|    }
 1417|       |
 1418|   380k|    val = store_result<T>(u64val, is_negative);
 1419|   380k|    return ptr;
 1420|   387k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIciEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1427|   159k|{
 1428|   159k|    uint64_t u64val{};
 1429|   159k|    const CharT* begin = input.data();
 1430|   159k|    const CharT* const end = input.data() + input.size();
 1431|       |
 1432|   601k|    while (begin != end) {
  ------------------
  |  Branch (1432:12): [True: 520k, False: 81.2k]
  ------------------
 1433|   520k|        const auto digit = char_to_int(*begin);
 1434|   520k|        if (digit >= base) {
  ------------------
  |  Branch (1434:13): [True: 78.5k, False: 441k]
  ------------------
 1435|  78.5k|            break;
 1436|  78.5k|        }
 1437|   441k|        u64val =
 1438|   441k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1439|   441k|        ++begin;
 1440|   441k|    }
 1441|       |
 1442|   159k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1443|   159k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.57k, False: 156k]
  |  |  ------------------
  ------------------
 1444|   159k|                                               is_negative))) {
 1445|  3.57k|        return unexpected_scan_error(scan_error::value_out_of_range,
 1446|  3.57k|                                     "Integer overflow");
 1447|  3.57k|    }
 1448|       |
 1449|   156k|    val = store_result<T>(u64val, is_negative);
 1450|   156k|    return begin;
 1451|   159k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIwiEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1427|  1.19k|{
 1428|  1.19k|    uint64_t u64val{};
 1429|  1.19k|    const CharT* begin = input.data();
 1430|  1.19k|    const CharT* const end = input.data() + input.size();
 1431|       |
 1432|  5.90k|    while (begin != end) {
  ------------------
  |  Branch (1432:12): [True: 5.08k, False: 824]
  ------------------
 1433|  5.08k|        const auto digit = char_to_int(*begin);
 1434|  5.08k|        if (digit >= base) {
  ------------------
  |  Branch (1434:13): [True: 374, False: 4.70k]
  ------------------
 1435|    374|            break;
 1436|    374|        }
 1437|  4.70k|        u64val =
 1438|  4.70k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1439|  4.70k|        ++begin;
 1440|  4.70k|    }
 1441|       |
 1442|  1.19k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1443|  1.19k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|  1.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 192, False: 1.00k]
  |  |  ------------------
  ------------------
 1444|  1.19k|                                               is_negative))) {
 1445|    192|        return unexpected_scan_error(scan_error::value_out_of_range,
 1446|    192|                                     "Integer overflow");
 1447|    192|    }
 1448|       |
 1449|  1.00k|    val = store_result<T>(u64val, is_negative);
 1450|  1.00k|    return begin;
 1451|  1.19k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_126parse_decimal_integer_fastIxEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1406|   394k|{
 1407|   394k|    uint64_t u64val{};
 1408|   394k|    auto ptr = parse_decimal_integer_fast_impl(
 1409|   394k|        input.data(), input.data() + input.size(), u64val);
 1410|       |
 1411|   394k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1412|   394k|    if (SCN_UNLIKELY(
  ------------------
  |  |  859|   394k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.55k, False: 390k]
  |  |  ------------------
  ------------------
 1413|   394k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1414|  4.55k|        return unexpected_scan_error(scan_error::value_out_of_range,
 1415|  4.55k|                                     "Integer overflow");
 1416|  4.55k|    }
 1417|       |
 1418|   390k|    val = store_result<T>(u64val, is_negative);
 1419|   390k|    return ptr;
 1420|   394k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIcxEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1427|   162k|{
 1428|   162k|    uint64_t u64val{};
 1429|   162k|    const CharT* begin = input.data();
 1430|   162k|    const CharT* const end = input.data() + input.size();
 1431|       |
 1432|   631k|    while (begin != end) {
  ------------------
  |  Branch (1432:12): [True: 548k, False: 82.8k]
  ------------------
 1433|   548k|        const auto digit = char_to_int(*begin);
 1434|   548k|        if (digit >= base) {
  ------------------
  |  Branch (1434:13): [True: 80.0k, False: 468k]
  ------------------
 1435|  80.0k|            break;
 1436|  80.0k|        }
 1437|   468k|        u64val =
 1438|   468k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1439|   468k|        ++begin;
 1440|   468k|    }
 1441|       |
 1442|   162k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1443|   162k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|   162k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.17k, False: 160k]
  |  |  ------------------
  ------------------
 1444|   162k|                                               is_negative))) {
 1445|  2.17k|        return unexpected_scan_error(scan_error::value_out_of_range,
 1446|  2.17k|                                     "Integer overflow");
 1447|  2.17k|    }
 1448|       |
 1449|   160k|    val = store_result<T>(u64val, is_negative);
 1450|   160k|    return begin;
 1451|   162k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIwxEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1427|  1.27k|{
 1428|  1.27k|    uint64_t u64val{};
 1429|  1.27k|    const CharT* begin = input.data();
 1430|  1.27k|    const CharT* const end = input.data() + input.size();
 1431|       |
 1432|  6.05k|    while (begin != end) {
  ------------------
  |  Branch (1432:12): [True: 5.18k, False: 870]
  ------------------
 1433|  5.18k|        const auto digit = char_to_int(*begin);
 1434|  5.18k|        if (digit >= base) {
  ------------------
  |  Branch (1434:13): [True: 404, False: 4.78k]
  ------------------
 1435|    404|            break;
 1436|    404|        }
 1437|  4.78k|        u64val =
 1438|  4.78k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1439|  4.78k|        ++begin;
 1440|  4.78k|    }
 1441|       |
 1442|  1.27k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1443|  1.27k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|  1.27k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28, False: 1.24k]
  |  |  ------------------
  ------------------
 1444|  1.27k|                                               is_negative))) {
 1445|     28|        return unexpected_scan_error(scan_error::value_out_of_range,
 1446|     28|                                     "Integer overflow");
 1447|     28|    }
 1448|       |
 1449|  1.24k|    val = store_result<T>(u64val, is_negative);
 1450|  1.24k|    return begin;
 1451|  1.27k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_126parse_decimal_integer_fastIhEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1406|   283k|{
 1407|   283k|    uint64_t u64val{};
 1408|   283k|    auto ptr = parse_decimal_integer_fast_impl(
 1409|   283k|        input.data(), input.data() + input.size(), u64val);
 1410|       |
 1411|   283k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1412|   283k|    if (SCN_UNLIKELY(
  ------------------
  |  |  859|   283k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.26k, False: 275k]
  |  |  ------------------
  ------------------
 1413|   283k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1414|  7.26k|        return unexpected_scan_error(scan_error::value_out_of_range,
 1415|  7.26k|                                     "Integer overflow");
 1416|  7.26k|    }
 1417|       |
 1418|   275k|    val = store_result<T>(u64val, is_negative);
 1419|   275k|    return ptr;
 1420|   283k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIchEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1427|   100k|{
 1428|   100k|    uint64_t u64val{};
 1429|   100k|    const CharT* begin = input.data();
 1430|   100k|    const CharT* const end = input.data() + input.size();
 1431|       |
 1432|   318k|    while (begin != end) {
  ------------------
  |  Branch (1432:12): [True: 268k, False: 50.8k]
  ------------------
 1433|   268k|        const auto digit = char_to_int(*begin);
 1434|   268k|        if (digit >= base) {
  ------------------
  |  Branch (1434:13): [True: 49.5k, False: 218k]
  ------------------
 1435|  49.5k|            break;
 1436|  49.5k|        }
 1437|   218k|        u64val =
 1438|   218k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1439|   218k|        ++begin;
 1440|   218k|    }
 1441|       |
 1442|   100k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1443|   100k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.90k, False: 96.5k]
  |  |  ------------------
  ------------------
 1444|   100k|                                               is_negative))) {
 1445|  3.90k|        return unexpected_scan_error(scan_error::value_out_of_range,
 1446|  3.90k|                                     "Integer overflow");
 1447|  3.90k|    }
 1448|       |
 1449|  96.5k|    val = store_result<T>(u64val, is_negative);
 1450|  96.5k|    return begin;
 1451|   100k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIwhEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1427|    922|{
 1428|    922|    uint64_t u64val{};
 1429|    922|    const CharT* begin = input.data();
 1430|    922|    const CharT* const end = input.data() + input.size();
 1431|       |
 1432|  5.19k|    while (begin != end) {
  ------------------
  |  Branch (1432:12): [True: 4.58k, False: 604]
  ------------------
 1433|  4.58k|        const auto digit = char_to_int(*begin);
 1434|  4.58k|        if (digit >= base) {
  ------------------
  |  Branch (1434:13): [True: 318, False: 4.27k]
  ------------------
 1435|    318|            break;
 1436|    318|        }
 1437|  4.27k|        u64val =
 1438|  4.27k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1439|  4.27k|        ++begin;
 1440|  4.27k|    }
 1441|       |
 1442|    922|    auto digits_count = static_cast<size_t>(begin - input.data());
 1443|    922|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|    922|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 294, False: 628]
  |  |  ------------------
  ------------------
 1444|    922|                                               is_negative))) {
 1445|    294|        return unexpected_scan_error(scan_error::value_out_of_range,
 1446|    294|                                     "Integer overflow");
 1447|    294|    }
 1448|       |
 1449|    628|    val = store_result<T>(u64val, is_negative);
 1450|    628|    return begin;
 1451|    922|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_126parse_decimal_integer_fastIjEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1406|   317k|{
 1407|   317k|    uint64_t u64val{};
 1408|   317k|    auto ptr = parse_decimal_integer_fast_impl(
 1409|   317k|        input.data(), input.data() + input.size(), u64val);
 1410|       |
 1411|   317k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1412|   317k|    if (SCN_UNLIKELY(
  ------------------
  |  |  859|   317k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.18k, False: 314k]
  |  |  ------------------
  ------------------
 1413|   317k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1414|  3.18k|        return unexpected_scan_error(scan_error::value_out_of_range,
 1415|  3.18k|                                     "Integer overflow");
 1416|  3.18k|    }
 1417|       |
 1418|   314k|    val = store_result<T>(u64val, is_negative);
 1419|   314k|    return ptr;
 1420|   317k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIcjEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1427|   126k|{
 1428|   126k|    uint64_t u64val{};
 1429|   126k|    const CharT* begin = input.data();
 1430|   126k|    const CharT* const end = input.data() + input.size();
 1431|       |
 1432|   388k|    while (begin != end) {
  ------------------
  |  Branch (1432:12): [True: 324k, False: 64.3k]
  ------------------
 1433|   324k|        const auto digit = char_to_int(*begin);
 1434|   324k|        if (digit >= base) {
  ------------------
  |  Branch (1434:13): [True: 62.5k, False: 262k]
  ------------------
 1435|  62.5k|            break;
 1436|  62.5k|        }
 1437|   262k|        u64val =
 1438|   262k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1439|   262k|        ++begin;
 1440|   262k|    }
 1441|       |
 1442|   126k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1443|   126k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.67k, False: 125k]
  |  |  ------------------
  ------------------
 1444|   126k|                                               is_negative))) {
 1445|  1.67k|        return unexpected_scan_error(scan_error::value_out_of_range,
 1446|  1.67k|                                     "Integer overflow");
 1447|  1.67k|    }
 1448|       |
 1449|   125k|    val = store_result<T>(u64val, is_negative);
 1450|   125k|    return begin;
 1451|   126k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIwjEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1427|    944|{
 1428|    944|    uint64_t u64val{};
 1429|    944|    const CharT* begin = input.data();
 1430|    944|    const CharT* const end = input.data() + input.size();
 1431|       |
 1432|  5.23k|    while (begin != end) {
  ------------------
  |  Branch (1432:12): [True: 4.61k, False: 617]
  ------------------
 1433|  4.61k|        const auto digit = char_to_int(*begin);
 1434|  4.61k|        if (digit >= base) {
  ------------------
  |  Branch (1434:13): [True: 327, False: 4.29k]
  ------------------
 1435|    327|            break;
 1436|    327|        }
 1437|  4.29k|        u64val =
 1438|  4.29k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1439|  4.29k|        ++begin;
 1440|  4.29k|    }
 1441|       |
 1442|    944|    auto digits_count = static_cast<size_t>(begin - input.data());
 1443|    944|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|    944|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 188, False: 756]
  |  |  ------------------
  ------------------
 1444|    944|                                               is_negative))) {
 1445|    188|        return unexpected_scan_error(scan_error::value_out_of_range,
 1446|    188|                                     "Integer overflow");
 1447|    188|    }
 1448|       |
 1449|    756|    val = store_result<T>(u64val, is_negative);
 1450|    756|    return begin;
 1451|    944|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_126parse_decimal_integer_fastIyEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1406|   322k|{
 1407|   322k|    uint64_t u64val{};
 1408|   322k|    auto ptr = parse_decimal_integer_fast_impl(
 1409|   322k|        input.data(), input.data() + input.size(), u64val);
 1410|       |
 1411|   322k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1412|   322k|    if (SCN_UNLIKELY(
  ------------------
  |  |  859|   322k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.03k, False: 320k]
  |  |  ------------------
  ------------------
 1413|   322k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1414|  2.03k|        return unexpected_scan_error(scan_error::value_out_of_range,
 1415|  2.03k|                                     "Integer overflow");
 1416|  2.03k|    }
 1417|       |
 1418|   320k|    val = store_result<T>(u64val, is_negative);
 1419|   320k|    return ptr;
 1420|   322k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIcyEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1427|   128k|{
 1428|   128k|    uint64_t u64val{};
 1429|   128k|    const CharT* begin = input.data();
 1430|   128k|    const CharT* const end = input.data() + input.size();
 1431|       |
 1432|   396k|    while (begin != end) {
  ------------------
  |  Branch (1432:12): [True: 331k, False: 64.9k]
  ------------------
 1433|   331k|        const auto digit = char_to_int(*begin);
 1434|   331k|        if (digit >= base) {
  ------------------
  |  Branch (1434:13): [True: 63.0k, False: 268k]
  ------------------
 1435|  63.0k|            break;
 1436|  63.0k|        }
 1437|   268k|        u64val =
 1438|   268k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1439|   268k|        ++begin;
 1440|   268k|    }
 1441|       |
 1442|   128k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1443|   128k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.08k, False: 126k]
  |  |  ------------------
  ------------------
 1444|   128k|                                               is_negative))) {
 1445|  1.08k|        return unexpected_scan_error(scan_error::value_out_of_range,
 1446|  1.08k|                                     "Integer overflow");
 1447|  1.08k|    }
 1448|       |
 1449|   126k|    val = store_result<T>(u64val, is_negative);
 1450|   126k|    return begin;
 1451|   128k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIwyEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1427|  1.02k|{
 1428|  1.02k|    uint64_t u64val{};
 1429|  1.02k|    const CharT* begin = input.data();
 1430|  1.02k|    const CharT* const end = input.data() + input.size();
 1431|       |
 1432|  5.40k|    while (begin != end) {
  ------------------
  |  Branch (1432:12): [True: 4.73k, False: 667]
  ------------------
 1433|  4.73k|        const auto digit = char_to_int(*begin);
 1434|  4.73k|        if (digit >= base) {
  ------------------
  |  Branch (1434:13): [True: 361, False: 4.37k]
  ------------------
 1435|    361|            break;
 1436|    361|        }
 1437|  4.37k|        u64val =
 1438|  4.37k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1439|  4.37k|        ++begin;
 1440|  4.37k|    }
 1441|       |
 1442|  1.02k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1443|  1.02k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|  1.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 1.01k]
  |  |  ------------------
  ------------------
 1444|  1.02k|                                               is_negative))) {
 1445|     12|        return unexpected_scan_error(scan_error::value_out_of_range,
 1446|     12|                                     "Integer overflow");
 1447|     12|    }
 1448|       |
 1449|  1.01k|    val = store_result<T>(u64val, is_negative);
 1450|  1.01k|    return begin;
 1451|  1.02k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|  2.11M|{
 2073|  2.11M|    const auto argcount = args.size();
 2074|  2.11M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 326k, False: 1.79M]
  |  Branch (2074:60): [True: 326k, False: 0]
  ------------------
 2075|   326k|        auto arg = args.get(0);
 2076|   326k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   326k|    static_cast<    \
  |  |  929|   326k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|   326k|    }
 2078|       |
 2079|  1.79M|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 1.79M]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|  1.79M|    SCN_UNLIKELY_ATTR
 2087|  1.79M|    {
 2088|  1.79M|        auto handler = format_handler<false, CharT>{
 2089|  1.79M|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.79M|    static_cast<    \
  |  |  929|  1.79M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.79M|    static_cast<    \
  |  |  929|  1.79M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|  1.79M|        return vscan_parse_format_string(format, handler);
 2091|  1.79M|    }
 2092|  1.79M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  4.23M|{
 1625|  4.23M|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 3.57M, False: 655k]
  ------------------
 1626|  3.57M|        return false;
 1627|  3.57M|    }
 1628|   655k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 655k, False: 0]
  |  Branch (1628:39): [True: 655k, False: 0]
  ------------------
 1629|  4.23M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|   489k|{
 1658|   489k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   489k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 489k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|   489k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|   489k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 489k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|   489k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|   489k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|   489k|    static_cast<    \
  |  |  929|   489k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|   489k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   489k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   489k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   489k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   489k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 37.5k, False: 452k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  37.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  37.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  37.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  37.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  37.5k|    }                                                  \
  |  |  |  | 3671|   489k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   452k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|   452k|    return it.position();
 1675|   489k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1899|  1.78M|        : format_handler_base{argcount},
 1900|  1.78M|          parse_ctx{format},
 1901|  1.78M|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|  1.78M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|  1.78M|    static_cast<    \
  |  |  929|  1.78M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|  1.78M|    static_cast<    \
  |  |  929|  1.78M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|  1.78M|    {
 1903|  1.78M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1720|  4.48M|    format_handler_base(size_t argcount) : args_count(argcount)
 1721|  4.48M|    {
 1722|  4.48M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|  4.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.48M]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|  4.48M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1851|  1.78M|        : contiguous_ctx(source, args, loc)
 1852|  1.78M|    {
 1853|  1.78M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|  1.78M|{
 2038|  1.78M|    const auto beg = handler.get_ctx().begin();
 2039|  1.78M|    detail::parse_format_string<false>(format, handler);
 2040|  1.78M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.78M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 225k, False: 1.55M]
  |  |  ------------------
  ------------------
 2041|   225k|        return unexpected(handler.error);
 2042|   225k|    }
 2043|  1.55M|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|  1.78M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2021|  11.8M|    {
 2022|  11.8M|        return ctx.get();
 2023|  11.8M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|  11.8M|    {
 1857|  11.8M|        return contiguous_ctx;
 1858|  11.8M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|  3.33M|    {
 1907|  3.33M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 3.33M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  3.33M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  1.78M|{
 1681|  1.78M|    auto arg = ctx.arg(id);
 1682|  1.78M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  1.78M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.78M]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  1.78M|    return arg;
 1686|  1.78M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|  4.48M|    {
 1797|  4.48M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  4.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.48M]
  |  |  ------------------
  ------------------
 1798|      0|            on_error("Invalid out-of-range argument ID");
 1799|      0|            return;
 1800|      0|        }
 1801|       |
 1802|  4.48M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|  4.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.48M]
  |  |  ------------------
  ------------------
 1803|      0|            return on_error("Argument with this ID has already been scanned");
 1804|      0|        }
 1805|       |
 1806|  4.48M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  4.48M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.48M, False: 0]
  |  |  ------------------
  ------------------
 1807|  4.48M|            visited_args_lower64 |= (1ull << id);
 1808|  4.48M|            return;
 1809|  4.48M|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|  4.48M|    {
 1782|  4.48M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  4.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.48M]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|  4.48M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  4.48M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.48M, False: 0]
  |  |  ------------------
  ------------------
 1788|  4.48M|            return (visited_args_lower64 >> id) & 1ull;
 1789|  4.48M|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|  4.48M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|   900k|    {
 1766|   900k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|   900k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 900k, False: 0]
  |  |  ------------------
  ------------------
 1767|   900k|            error = err;
 1768|   900k|        }
 1769|   900k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1943|  1.78M|    {
 1944|  1.78M|        return parse_ctx.next_arg_id();
 1945|  1.78M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1984|  1.78M|    {
 1985|  1.78M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  1.78M|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  1.78M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 1.78M]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  1.78M|        auto specs = detail::format_specs{};
 1998|  1.78M|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  1.78M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  1.78M|            arg.type()};
 2001|       |
 2002|  1.78M|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  1.78M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 1.78M]
  |  Branch (2003:29): [True: 50.0k, False: 1.73M]
  ------------------
 2004|  50.0k|            SCN_UNLIKELY_ATTR
 2005|  50.0k|            on_error("Missing '}' in format string");
 2006|  50.0k|            return parse_ctx.begin();
 2007|  50.0k|        }
 2008|  1.73M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.73M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.0k, False: 1.70M]
  |  |  ------------------
  ------------------
 2009|  25.0k|            return parse_ctx.begin();
 2010|  25.0k|        }
 2011|  1.70M|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  1.70M|        on_visit_scan_arg(
 2014|  1.70M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  1.70M|                                           get_ctx().locale()},
 2016|  1.70M|            arg);
 2017|  1.70M|        return parse_ctx.begin();
 2018|  1.73M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1699|  1.78M|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|  1.78M|    {
 1701|  1.78M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1955|  1.70M|    {
 1956|  1.70M|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 1.70M]
  |  Branch (1956:23): [True: 0, False: 1.70M]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|  1.70M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  1.70M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  1.70M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.70M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 150k, False: 1.55M]
  |  |  ------------------
  ------------------
 1963|   150k|            on_error(r.error());
 1964|   150k|        }
 1965|  1.55M|        else {
 1966|  1.55M|            get_ctx().advance_to(*r);
 1967|  1.55M|        }
 1968|  1.70M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1760|   750k|    {
 1761|   750k|        SCN_UNLIKELY_ATTR
 1762|   750k|        error = scan_error{scan_error::invalid_format_string, msg};
 1763|   750k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|  4.48M|    {
 1729|  4.48M|        {
 1730|  4.48M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 4.48M]
  ------------------
 1731|  4.48M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 4.48M]
  ------------------
 1732|  4.48M|                                      ? std::numeric_limits<uint64_t>::max()
 1733|  4.48M|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|  4.48M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 0, False: 4.48M]
  ------------------
 1736|      0|                return on_error("Argument list not exhausted");
 1737|      0|            }
 1738|  4.48M|        }
 1739|       |
 1740|  4.48M|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 4.48M, False: 0]
  ------------------
 1741|  4.48M|            return;
 1742|  4.48M|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|  4.48M|    {
 1777|  4.48M|        return error;
 1778|  4.48M|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|  12.9M|    {
 1773|  12.9M|        return static_cast<bool>(error);
 1774|  12.9M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
 1899|  1.79M|        : format_handler_base{argcount},
 1900|  1.79M|          parse_ctx{format},
 1901|  1.79M|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|  1.79M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|  1.79M|    static_cast<    \
  |  |  929|  1.79M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|  1.79M|    static_cast<    \
  |  |  929|  1.79M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|  1.79M|    {
 1903|  1.79M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
 1828|  1.79M|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  928|  1.79M|    static_cast<    \
  |  |  929|  1.79M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1829|  1.79M|    {
 1830|  1.79M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|  1.79M|{
 2038|  1.79M|    const auto beg = handler.get_ctx().begin();
 2039|  1.79M|    detail::parse_format_string<false>(format, handler);
 2040|  1.79M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.79M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 225k, False: 1.56M]
  |  |  ------------------
  ------------------
 2041|   225k|        return unexpected(handler.error);
 2042|   225k|    }
 2043|  1.56M|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|  1.79M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2021|  11.9M|    {
 2022|  11.9M|        return ctx.get();
 2023|  11.9M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1833|  11.9M|    {
 1834|  11.9M|        return ctx;
 1835|  11.9M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1906|  3.35M|    {
 1907|  3.35M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 3.35M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  3.35M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
 1680|  1.79M|{
 1681|  1.79M|    auto arg = ctx.arg(id);
 1682|  1.79M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  1.79M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.79M]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  1.79M|    return arg;
 1686|  1.79M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1943|  1.79M|    {
 1944|  1.79M|        return parse_ctx.next_arg_id();
 1945|  1.79M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1984|  1.79M|    {
 1985|  1.79M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  1.79M|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  1.79M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 1.79M]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  1.79M|        auto specs = detail::format_specs{};
 1998|  1.79M|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  1.79M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  1.79M|            arg.type()};
 2001|       |
 2002|  1.79M|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  1.79M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 1.79M]
  |  Branch (2003:29): [True: 50.0k, False: 1.74M]
  ------------------
 2004|  50.0k|            SCN_UNLIKELY_ATTR
 2005|  50.0k|            on_error("Missing '}' in format string");
 2006|  50.0k|            return parse_ctx.begin();
 2007|  50.0k|        }
 2008|  1.74M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.74M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.0k, False: 1.71M]
  |  |  ------------------
  ------------------
 2009|  25.0k|            return parse_ctx.begin();
 2010|  25.0k|        }
 2011|  1.71M|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  1.71M|        on_visit_scan_arg(
 2014|  1.71M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  1.71M|                                           get_ctx().locale()},
 2016|  1.71M|            arg);
 2017|  1.71M|        return parse_ctx.begin();
 2018|  1.74M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
 1699|  1.79M|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|  1.79M|    {
 1701|  1.79M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|  1.71M|    {
 1956|  1.71M|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 1.71M]
  |  Branch (1956:23): [True: 0, False: 1.71M]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|  1.71M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  1.71M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  1.71M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.71M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 150k, False: 1.56M]
  |  |  ------------------
  ------------------
 1963|   150k|            on_error(r.error());
 1964|   150k|        }
 1965|  1.56M|        else {
 1966|  1.56M|            get_ctx().advance_to(*r);
 1967|  1.56M|        }
 1968|  1.71M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|  2.11M|{
 2053|  2.11M|    const auto argcount = args.size();
 2054|  2.11M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 329k, False: 1.78M]
  |  Branch (2054:60): [True: 329k, False: 0]
  ------------------
 2055|   329k|        auto arg = args.get(0);
 2056|   329k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   329k|    static_cast<    \
  |  |  929|   329k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|   329k|    }
 2058|       |
 2059|  1.78M|    auto handler = format_handler<true, CharT>{
 2060|  1.78M|        ranges::subrange<const CharT*>{source.data(),
 2061|  1.78M|                                       source.data() + source.size()},
 2062|  1.78M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.78M|    static_cast<    \
  |  |  929|  1.78M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.78M|    static_cast<    \
  |  |  929|  1.78M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|  1.78M|    return vscan_parse_format_string(format, handler);
 2064|  2.11M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|   493k|{
 1638|   493k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   493k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 493k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|   493k|    auto reader =
 1644|   493k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|   493k|            ranges::subrange<const CharT*>{source.data(),
 1646|   493k|                                           source.data() + source.size()},
 1647|   493k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   493k|    static_cast<    \
  |  |  929|   493k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|   493k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   493k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   493k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   493k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   493k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 37.5k, False: 456k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  37.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  37.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  37.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  37.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  37.5k|    }                                                  \
  |  |  |  | 3671|   493k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   456k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|   456k|    return ranges::distance(source.data(), it);
 1650|   493k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   504k|{
 2053|   504k|    const auto argcount = args.size();
 2054|   504k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 50.6k, False: 453k]
  |  Branch (2054:60): [True: 50.6k, False: 0]
  ------------------
 2055|  50.6k|        auto arg = args.get(0);
 2056|  50.6k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  50.6k|    static_cast<    \
  |  |  929|  50.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|  50.6k|    }
 2058|       |
 2059|   453k|    auto handler = format_handler<true, CharT>{
 2060|   453k|        ranges::subrange<const CharT*>{source.data(),
 2061|   453k|                                       source.data() + source.size()},
 2062|   453k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   453k|    static_cast<    \
  |  |  929|   453k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   453k|    static_cast<    \
  |  |  929|   453k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   453k|    return vscan_parse_format_string(format, handler);
 2064|   504k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  1.00M|{
 1625|  1.00M|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 907k, False: 101k]
  ------------------
 1626|   907k|        return false;
 1627|   907k|    }
 1628|   101k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 101k, False: 0]
  |  Branch (1628:39): [True: 101k, False: 0]
  ------------------
 1629|  1.00M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|  76.0k|{
 1638|  76.0k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  76.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 76.0k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|  76.0k|    auto reader =
 1644|  76.0k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|  76.0k|            ranges::subrange<const CharT*>{source.data(),
 1646|  76.0k|                                           source.data() + source.size()},
 1647|  76.0k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|  76.0k|    static_cast<    \
  |  |  929|  76.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|  76.0k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|  76.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  76.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  76.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  76.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 75.0k, False: 960]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  75.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  75.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  75.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  75.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  75.0k|    }                                                  \
  |  |  |  | 3671|  76.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    960|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|    960|    return ranges::distance(source.data(), it);
 1650|  76.0k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1899|   453k|        : format_handler_base{argcount},
 1900|   453k|          parse_ctx{format},
 1901|   453k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   453k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   453k|    static_cast<    \
  |  |  929|   453k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   453k|    static_cast<    \
  |  |  929|   453k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|   453k|    {
 1903|   453k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1851|   453k|        : contiguous_ctx(source, args, loc)
 1852|   453k|    {
 1853|   453k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   453k|{
 2038|   453k|    const auto beg = handler.get_ctx().begin();
 2039|   453k|    detail::parse_format_string<false>(format, handler);
 2040|   453k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   453k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 450k, False: 3.20k]
  |  |  ------------------
  ------------------
 2041|   450k|        return unexpected(handler.error);
 2042|   450k|    }
 2043|  3.20k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   453k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2021|  1.97M|    {
 2022|  1.97M|        return ctx.get();
 2023|  1.97M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|  1.97M|    {
 1857|  1.97M|        return contiguous_ctx;
 1858|  1.97M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|   456k|    {
 1907|   456k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 456k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   456k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   453k|{
 1681|   453k|    auto arg = ctx.arg(id);
 1682|   453k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   453k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 453k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   453k|    return arg;
 1686|   453k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1943|   453k|    {
 1944|   453k|        return parse_ctx.next_arg_id();
 1945|   453k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1984|   453k|    {
 1985|   453k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   453k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   453k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 453k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   453k|        auto specs = detail::format_specs{};
 1998|   453k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   453k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   453k|            arg.type()};
 2001|       |
 2002|   453k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   453k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 453k]
  |  Branch (2003:29): [True: 100k, False: 353k]
  ------------------
 2004|   100k|            SCN_UNLIKELY_ATTR
 2005|   100k|            on_error("Missing '}' in format string");
 2006|   100k|            return parse_ctx.begin();
 2007|   100k|        }
 2008|   353k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   353k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 50.0k, False: 303k]
  |  |  ------------------
  ------------------
 2009|  50.0k|            return parse_ctx.begin();
 2010|  50.0k|        }
 2011|   303k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   303k|        on_visit_scan_arg(
 2014|   303k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   303k|                                           get_ctx().locale()},
 2016|   303k|            arg);
 2017|   303k|        return parse_ctx.begin();
 2018|   353k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1699|   453k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|   453k|    {
 1701|   453k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1955|   303k|    {
 1956|   303k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 303k]
  |  Branch (1956:23): [True: 0, False: 303k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   303k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   303k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   303k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   303k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 300k, False: 3.20k]
  |  |  ------------------
  ------------------
 1963|   300k|            on_error(r.error());
 1964|   300k|        }
 1965|  3.20k|        else {
 1966|  3.20k|            get_ctx().advance_to(*r);
 1967|  3.20k|        }
 1968|   303k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|   504k|{
 2073|   504k|    const auto argcount = args.size();
 2074|   504k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 50.6k, False: 453k]
  |  Branch (2074:60): [True: 50.6k, False: 0]
  ------------------
 2075|  50.6k|        auto arg = args.get(0);
 2076|  50.6k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  50.6k|    static_cast<    \
  |  |  929|  50.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|  50.6k|    }
 2078|       |
 2079|   453k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 453k]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|   453k|    SCN_UNLIKELY_ATTR
 2087|   453k|    {
 2088|   453k|        auto handler = format_handler<false, CharT>{
 2089|   453k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   453k|    static_cast<    \
  |  |  929|   453k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   453k|    static_cast<    \
  |  |  929|   453k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|   453k|        return vscan_parse_format_string(format, handler);
 2091|   453k|    }
 2092|   453k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|  76.0k|{
 1658|  76.0k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  76.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 76.0k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|  76.0k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|  76.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 76.0k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|  76.0k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|  76.0k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|  76.0k|    static_cast<    \
  |  |  929|  76.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|  76.0k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|  76.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  76.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  76.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  76.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 75.0k, False: 960]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  75.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  75.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  75.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  75.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  75.0k|    }                                                  \
  |  |  |  | 3671|  76.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    960|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|    960|    return it.position();
 1675|  76.0k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
 1899|   453k|        : format_handler_base{argcount},
 1900|   453k|          parse_ctx{format},
 1901|   453k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   453k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   453k|    static_cast<    \
  |  |  929|   453k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   453k|    static_cast<    \
  |  |  929|   453k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|   453k|    {
 1903|   453k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
 1828|   453k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  928|   453k|    static_cast<    \
  |  |  929|   453k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1829|   453k|    {
 1830|   453k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   453k|{
 2038|   453k|    const auto beg = handler.get_ctx().begin();
 2039|   453k|    detail::parse_format_string<false>(format, handler);
 2040|   453k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   453k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 450k, False: 3.20k]
  |  |  ------------------
  ------------------
 2041|   450k|        return unexpected(handler.error);
 2042|   450k|    }
 2043|  3.20k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   453k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2021|  1.97M|    {
 2022|  1.97M|        return ctx.get();
 2023|  1.97M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1833|  1.97M|    {
 1834|  1.97M|        return ctx;
 1835|  1.97M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1906|   456k|    {
 1907|   456k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 456k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   456k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
 1680|   453k|{
 1681|   453k|    auto arg = ctx.arg(id);
 1682|   453k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   453k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 453k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   453k|    return arg;
 1686|   453k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1943|   453k|    {
 1944|   453k|        return parse_ctx.next_arg_id();
 1945|   453k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1984|   453k|    {
 1985|   453k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   453k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   453k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 453k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   453k|        auto specs = detail::format_specs{};
 1998|   453k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   453k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   453k|            arg.type()};
 2001|       |
 2002|   453k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   453k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 453k]
  |  Branch (2003:29): [True: 100k, False: 353k]
  ------------------
 2004|   100k|            SCN_UNLIKELY_ATTR
 2005|   100k|            on_error("Missing '}' in format string");
 2006|   100k|            return parse_ctx.begin();
 2007|   100k|        }
 2008|   353k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   353k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 50.0k, False: 303k]
  |  |  ------------------
  ------------------
 2009|  50.0k|            return parse_ctx.begin();
 2010|  50.0k|        }
 2011|   303k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   303k|        on_visit_scan_arg(
 2014|   303k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   303k|                                           get_ctx().locale()},
 2016|   303k|            arg);
 2017|   303k|        return parse_ctx.begin();
 2018|   353k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
 1699|   453k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|   453k|    {
 1701|   453k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|   303k|    {
 1956|   303k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 303k]
  |  Branch (1956:23): [True: 0, False: 303k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   303k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   303k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   303k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   303k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 300k, False: 3.20k]
  |  |  ------------------
  ------------------
 1963|   300k|            on_error(r.error());
 1964|   300k|        }
 1965|  3.20k|        else {
 1966|  3.20k|            get_ctx().advance_to(*r);
 1967|  3.20k|        }
 1968|   303k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|   164k|{
 2099|   164k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   164k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|   164k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|   163k|{
 2099|   163k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   163k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|   163k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  25.3k|{
 2099|  25.3k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  25.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  25.3k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  25.3k|{
 2099|  25.3k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  25.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  25.3k|}

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1362|  2.08k|{
 1363|  2.08k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1364|       |
 1365|  2.08k|    if constexpr (sizeof(SourceCharT) == 1) {
 1366|       |        if constexpr (sizeof(DestCharT) == 2) {
 1367|       |            std::u32string tmp;
 1368|       |            transcode_to_string_impl_to32(src, tmp);
 1369|       |            return transcode_to_string_impl_32to16<false>(
 1370|       |                std::u32string_view{tmp}, dest);
 1371|       |        }
 1372|  2.08k|        else if constexpr (sizeof(DestCharT) == 4) {
 1373|  2.08k|            return transcode_to_string_impl_to32(src, dest);
 1374|  2.08k|        }
 1375|       |    }
 1376|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1377|       |        if constexpr (sizeof(DestCharT) == 1) {
 1378|       |            std::u32string tmp;
 1379|       |            transcode_to_string_impl_to32(src, tmp);
 1380|       |            return transcode_to_string_impl_32to8<false>(
 1381|       |                std::u32string_view{tmp}, dest);
 1382|       |        }
 1383|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1384|       |            return trasncode_to_string_impl_to32(src, dest);
 1385|       |        }
 1386|       |    }
 1387|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1388|       |        if constexpr (sizeof(DestCharT) == 1) {
 1389|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1390|       |        }
 1391|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1392|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1393|       |        }
 1394|       |    }
 1395|       |
 1396|  2.08k|    SCN_EXPECT(false);
  ------------------
  |  |  924|  2.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1397|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1398|  2.08k|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1255|  2.08k|{
 1256|  2.08k|    static_assert(sizeof(DestCharT) == 4);
 1257|       |
 1258|  2.08k|    auto it = src.begin();
 1259|   296k|    while (it != src.end()) {
  ------------------
  |  Branch (1259:12): [True: 293k, False: 2.08k]
  ------------------
 1260|   293k|        auto res = get_next_code_point(
 1261|   293k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1262|   293k|                                                                 src.end()));
 1263|   293k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|   293k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.37k, False: 292k]
  |  |  ------------------
  ------------------
 1264|  1.37k|            dest.push_back(DestCharT{0xfffd});
 1265|  1.37k|        }
 1266|   292k|        else {
 1267|   292k|            dest.push_back(res.value);
 1268|   292k|        }
 1269|   293k|        it = detail::make_string_view_iterator(src, res.iterator);
 1270|   293k|    }
 1271|  2.08k|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|   401k|{
 1169|   401k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   401k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   401k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|   401k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|   401k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   401k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.12k, False: 395k]
  |  |  ------------------
  ------------------
 1173|  6.12k|        return {get_start_for_next_code_point(input),
 1174|  6.12k|                detail::invalid_code_point};
 1175|  6.12k|    }
 1176|   395k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|   395k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.79k, False: 389k]
  |  |  ------------------
  ------------------
 1177|  5.79k|        return {input.end(), detail::invalid_code_point};
 1178|  5.79k|    }
 1179|       |
 1180|   389k|    return {input.begin() + len,
 1181|   389k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|   395k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  6.12k|{
 1155|  6.12k|    auto it = input.begin();
 1156|  46.1k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 44.0k, False: 2.07k]
  ------------------
 1157|  44.0k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 4.04k, False: 39.9k]
  ------------------
 1158|  4.04k|            break;
 1159|  4.04k|        }
 1160|  44.0k|    }
 1161|  6.12k|    return it;
 1162|  6.12k|}
_ZN3scn2v34impl11parse_errorC2ENS2_4codeE:
  807|  16.8M|    constexpr parse_error(code c) : m_code(c)
  808|  16.8M|    {
  809|  16.8M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  16.8M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  16.8M|    }
_ZN3scn2v34impleqENS1_11parse_errorES2_:
  822|  5.55M|    {
  823|  5.55M|        return a.m_code == b.m_code;
  824|  5.55M|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2935|  4.03M|    {
 2936|  4.03M|        return m_msg == nullptr;
 2937|  4.03M|    }
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  4.83M|{
  458|  4.83M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  4.83M|        static_cast<unsigned char>(ch))];
  460|  4.83M|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|  2.70M|{
  539|  2.70M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  2.70M|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  14.7M|{
  784|  14.7M|    return e != eof_error::good;
  785|  14.7M|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  55.3k|{
  798|  55.3k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|  55.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  55.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  55.3k|    return scan_error{scan_error::end_of_range, "EOF"};
  800|  55.3k|}
_ZN3scn2v34impl20make_eof_parse_errorENS1_9eof_errorE:
  844|   105k|{
  845|   105k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|   105k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   105k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|   105k|    return parse_error::eof;
  847|   105k|}
_ZN3scn2v34impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|   408k|{
  854|   408k|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 408k]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|   408k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 0, False: 408k]
  ------------------
  859|      0|        return scan_error{scan_error::end_of_range, "EOF"};
  860|      0|    }
  861|       |
  862|   408k|    return scan_error{code, msg};
  863|   408k|}
_ZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  1.99M|{
  868|  1.99M|    return [code, msg](parse_error err) {
  869|  1.99M|        return make_scan_error_from_parse_error(err, code, msg);
  870|  1.99M|    };
  871|  1.99M|}
_ZN3scn2v34impl11is_cp_spaceEDi:
 1199|  5.25M|{
 1200|       |    // Pattern_White_Space property
 1201|  5.25M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (1201:13): [True: 4.86M, False: 389k]
  |  Branch (1201:27): [True: 2.24M, False: 2.61M]
  ------------------
 1202|  5.25M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (1202:12): [True: 50.8k, False: 2.95M]
  ------------------
 1203|  5.25M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (1203:12): [True: 10.2k, False: 2.94M]
  ------------------
 1204|  5.25M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (1204:12): [True: 3.04k, False: 2.94M]
  ------------------
 1205|  5.25M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (1205:12): [True: 4.61k, False: 2.93M]
  ------------------
 1206|  5.25M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (1206:12): [True: 3.23k, False: 2.93M]
  ------------------
 1207|  5.25M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (1207:12): [True: 0, False: 2.93M]
  ------------------
 1208|  5.25M|}
_ZN3scn2v34impl17fast_streq_nocaseEPKcS3_m:
 2219|  1.94M|{
 2220|  1.94M|    unsigned char running_diff{0};
 2221|  5.82M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2221:24): [True: 3.88M, False: 1.94M]
  ------------------
 2222|  3.88M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2223|  3.88M|    }
 2224|  1.94M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2224:12): [True: 17.6k, False: 1.92M]
  |  Branch (2224:33): [True: 1.19k, False: 1.92M]
  ------------------
 2225|  1.94M|}
_ZN3scn2v34impl11char_to_intEc:
 3122|  27.4M|{
 3123|  27.4M|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3124|  27.4M|}
_ZN3scn2v34impl11char_to_intEw:
 3126|  1.56M|{
 3127|  1.56M|#if WCHAR_MIN < 0
 3128|  1.56M|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3128:9): [True: 1.49M, False: 62.9k]
  |  Branch (3128:20): [True: 788k, False: 710k]
  ------------------
 3129|       |#else
 3130|       |    if (ch <= 255) {
 3131|       |#endif
 3132|   788k|        return char_to_int(static_cast<char>(ch));
 3133|   788k|    }
 3134|   773k|    return 255;
 3135|  1.56M|}
_ZN3scn2v34impl23transform_thsep_indicesERNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEl:
 3158|  9.30k|{
 3159|   149k|    for (auto thsep_it = indices.rbegin(); thsep_it != indices.rend();
  ------------------
  |  Branch (3159:44): [True: 140k, False: 9.30k]
  ------------------
 3160|   140k|         ++thsep_it) {
 3161|   140k|        const auto tmp = *thsep_it;
 3162|   140k|        *thsep_it = static_cast<char>(last_thsep_index - tmp - 1);
 3163|   140k|        last_thsep_index = static_cast<std::ptrdiff_t>(tmp);
 3164|   140k|    }
 3165|  9.30k|    indices.insert(indices.begin(), static_cast<char>(last_thsep_index));
 3166|  9.30k|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6007|  3.13M|{
 6008|  3.13M|    if (specs.width != 0) {
  ------------------
  |  Branch (6008:9): [True: 0, False: 3.13M]
  ------------------
 6009|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6009:13): [True: 0, False: 0]
  ------------------
 6010|      0|            return {scan_error::invalid_scanned_value,
 6011|      0|                    "Scanned value too narrow, width did not exceed what "
 6012|      0|                    "was specified in the format string"};
 6013|      0|        }
 6014|      0|    }
 6015|  3.13M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6015:9): [True: 0, False: 3.13M]
  ------------------
 6016|      0|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6016:13): [True: 0, False: 0]
  ------------------
 6017|      0|            return {scan_error::invalid_scanned_value,
 6018|      0|                    "Scanned value too wide, width exceeded the specified "
 6019|      0|                    "precision"};
 6020|      0|        }
 6021|      0|    }
 6022|  3.13M|    return {};
 6023|  3.13M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  7.78M|    {
  304|  7.78M|        ranges::advance(x, n);
  305|  7.78M|        return x;
  306|  7.78M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  7.78M|    {
  268|  7.78M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  7.78M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  7.78M|    {
  151|  7.78M|        i += n;
  152|  7.78M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  11.8M|    {
  108|  11.8M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  11.8M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  11.8M|    {
   87|  11.8M|        return s - i;
   88|  11.8M|    }
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|   282k|    {
  304|   282k|        ranges::advance(x, n);
  305|   282k|        return x;
  306|   282k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|   282k|    {
  268|   282k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   282k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   282k|    {
  151|   282k|        i += n;
  152|   282k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   102M|    {
  108|   102M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   102M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   102M|    {
   87|   102M|        return s - i;
   88|   102M|    }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|  2.20M|{
  981|       |    if constexpr (ranges::contiguous_range<Range> &&
  982|       |                  ranges::sized_range<Range>) {
  983|       |        return true;
  984|       |    }
  985|       |    else if constexpr (std::is_same_v<
  986|       |                           ranges::const_iterator_t<Range>,
  987|       |                           typename detail::basic_scan_buffer<
  988|  2.20M|                               detail::char_t<Range>>::forward_iterator>) {
  989|  2.20M|        auto beg = r.begin();
  990|  2.20M|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 2.20M, False: 0]
  ------------------
  991|  2.20M|            return false;
  992|  2.20M|        }
  993|       |        if constexpr (ranges::common_range<Range>) {
  994|       |            return beg.contiguous_segment().end() ==
  995|       |                   ranges::end(r).contiguous_segment().end();
  996|       |        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|       |    }
 1005|       |    else {
 1006|       |        return false;
 1007|       |    }
 1008|  2.20M|}
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  13.0M|    {
  763|  13.0M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  13.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  13.0M|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1856|  1.97M|{
 1857|  1.97M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  1.97M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.97M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|       |    if constexpr (ranges::sized_range<Range>) {
 1860|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|       |        if (sz < count) {
 1862|       |            return unexpected(eof_error::eof);
 1863|       |        }
 1864|       |
 1865|       |        return ranges::next(range.begin(), count);
 1866|       |    }
 1867|  1.97M|    else {
 1868|  1.97M|        auto it = range.begin();
 1869|  1.97M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 1.86M, False: 104k]
  ------------------
 1870|  1.86M|            return ranges::next(it, count);
 1871|  1.86M|        }
 1872|       |
 1873|   290k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 207k, False: 83.2k]
  ------------------
 1874|   207k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 21.3k, False: 186k]
  ------------------
 1875|  21.3k|                return unexpected(eof_error::eof);
 1876|  21.3k|            }
 1877|   207k|        }
 1878|       |
 1879|  83.2k|        return it;
 1880|   104k|    }
 1881|  1.97M|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|  1.97M|{
 1095|       |    if constexpr (ranges::sized_range<Range>) {
 1096|       |        return r.size();
 1097|       |    }
 1098|       |    else if constexpr (std::is_same_v<
 1099|       |                           ranges::const_iterator_t<Range>,
 1100|       |                           typename detail::basic_scan_buffer<
 1101|  1.97M|                               detail::char_t<Range>>::forward_iterator>) {
 1102|       |        if constexpr (ranges::common_range<Range>) {
 1103|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|       |        }
 1105|  1.97M|        else {
 1106|  1.97M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 1.97M, False: 0]
  ------------------
 1107|  1.97M|                return static_cast<size_t>(
 1108|  1.97M|                    r.begin().parent()->chars_available() -
 1109|  1.97M|                    r.begin().position());
 1110|  1.97M|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|  1.97M|        }
 1113|       |    }
 1114|       |    else {
 1115|       |        return 0;
 1116|       |    }
 1117|  1.97M|}
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  1.66M|        : m_fptr([](storage fn,
  743|  1.66M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.66M|              cvref<T> obj = *get<T>(fn);
  745|  1.66M|              if constexpr (std::is_void_v<R>) {
  746|  1.66M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.66M|              }
  748|  1.66M|              else {
  749|  1.66M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.66M|              }
  751|  1.66M|          }),
  752|  1.66M|          m_storage(std::addressof(f))
  753|  1.66M|    {
  754|  1.66M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  6.54M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.54M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  6.54M|              else {
  749|  6.54M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.54M|              }
  751|  6.54M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  6.54M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  6.54M|        else if constexpr (std::is_object_v<T>) {
  688|  6.54M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  6.54M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  1.66M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.66M|        {
  662|  1.66M|        }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|  10.2M|    {
  763|  10.2M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  10.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  10.2M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  2.88M|        : m_fptr([](storage fn,
  743|  2.88M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.88M|              cvref<T> obj = *get<T>(fn);
  745|  2.88M|              if constexpr (std::is_void_v<R>) {
  746|  2.88M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.88M|              }
  748|  2.88M|              else {
  749|  2.88M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.88M|              }
  751|  2.88M|          }),
  752|  2.88M|          m_storage(std::addressof(f))
  753|  2.88M|    {
  754|  2.88M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|  5.14M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.14M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  5.14M|              else {
  749|  5.14M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.14M|              }
  751|  5.14M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  5.14M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  5.14M|        else if constexpr (std::is_object_v<T>) {
  688|  5.14M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  5.14M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  2.88M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.88M|        {
  662|  2.88M|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6036|  1.71M|    {
 6037|  1.71M|        const bool need_skipped_width =
 6038|  1.71M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 1.71M]
  |  Branch (6038:33): [True: 0, False: 1.71M]
  ------------------
 6039|  1.71M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  1.71M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 1.71M]
  ------------------
 6043|  1.71M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 1.71M]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|  1.71M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 1.71M, False: 0]
  |  Branch (6047:56): [True: 1.71M, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  1.71M|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 1.71M]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  3.41M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|  1.71M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.71M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.71M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.71M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20.9k, False: 1.69M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  20.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  20.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  20.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  20.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  20.9k|    }                                                  \
  |  |  |  | 3671|  1.71M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.69M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  3.41M|                            make_eof_scan_error));
 6058|       |
 6059|  3.41M|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 1.69M]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|  1.69M|            return result_type{it, 0};
 6067|  3.41M|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|  1.71M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|  1.66M|{
 1976|  1.66M|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  1.66M|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|  1.66M|{
 1957|       |    if constexpr (ranges::common_range<Range>) {
 1958|       |        return std::find_if(range.begin(), range.end(), pred);
 1959|       |    }
 1960|  1.66M|    else {
 1961|  1.66M|        auto first = range.begin();
 1962|  6.56M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 6.54M, False: 18.9k]
  ------------------
 1963|  6.54M|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 1.64M, False: 4.90M]
  ------------------
 1964|  1.64M|                return first;
 1965|  1.64M|            }
 1966|  6.54M|        }
 1967|  18.9k|        return first;
 1968|  1.66M|    }
 1969|  1.66M|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  1.64M|    {
  108|  1.64M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  1.64M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  1.64M|    {
   94|  1.64M|        iter_difference_t<I> counter{0};
   95|  14.4M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 12.8M, False: 1.64M]
  ------------------
   96|  12.8M|            ++i;
   97|  12.8M|            ++counter;
   98|  12.8M|        }
   99|  1.64M|        return counter;
  100|  1.64M|    }
_ZZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|   408k|    return [code, msg](parse_error err) {
  869|   408k|        return make_scan_error_from_parse_error(err, code, msg);
  870|   408k|    };
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1779|   643k|    {
 1780|   643k|        auto stdloc = loc.get<std::locale>();
 1781|   643k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|   643k|        grouping = numpunct.grouping();
 1783|   643k|        thousands_sep =
 1784|   643k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 643k]
  ------------------
 1785|   643k|        decimal_point = numpunct.decimal_point();
 1786|   643k|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1716|   643k|{
 1717|   643k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 643k, False: 0]
  ------------------
 1718|   643k|        return std::use_facet<Facet>(stdloc);
 1719|   643k|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|   643k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1845|  2.76M|{
 1846|  2.76M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.76M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 588, False: 2.76M]
  |  |  ------------------
  ------------------
 1847|    588|        return unexpected(e);
 1848|    588|    }
 1849|       |
 1850|  2.76M|    return ranges::next(range.begin());
 1851|  2.76M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  5.46M|{
  950|  5.46M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  5.46M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.7k, False: 5.43M]
  |  |  ------------------
  ------------------
  951|  26.7k|        return eof_error::eof;
  952|  26.7k|    }
  953|  5.43M|    return eof_error::good;
  954|  5.46M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  9.85M|{
  944|  9.85M|    return is_range_eof(r.begin(), r.end());
  945|  9.85M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  9.85M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  9.85M|    {
  937|  9.85M|        return begin == end;
  938|  9.85M|    }
  939|  9.85M|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  2.76M|    {
  296|  2.76M|        ++x;
  297|  2.76M|        return x;
  298|  2.76M|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3538|   247k|    {
 3539|   247k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|   247k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   247k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   247k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   247k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 247k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   247k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   247k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|   247k|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|   247k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 24.3k, False: 223k]
  ------------------
 3543|       |            if constexpr (!std::is_signed_v<T>) {
 3544|       |                return unexpected_scan_error(
 3545|       |                    scan_error::invalid_scanned_value,
 3546|       |                    "Unexpected '-' sign when parsing an "
 3547|       |                    "unsigned value");
 3548|       |            }
 3549|  24.3k|            else {
 3550|  24.3k|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 24.3k]
  ------------------
 3551|  24.3k|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|  24.3k|            }
 3557|  24.3k|        }
 3558|       |
 3559|   247k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 25.5k, False: 221k]
  ------------------
 3560|  25.5k|            value = T{0};
 3561|  25.5k|            return std::next(prefix_result.iterator);
 3562|  25.5k|        }
 3563|       |
 3564|   221k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|   221k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 169k, False: 52.6k]
  |  |  ------------------
  ------------------
 3565|   169k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|   169k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   169k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   169k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   169k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 11.5k, False: 157k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  11.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  11.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  11.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  11.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  11.5k|    }                                                  \
  |  |  |  | 3671|   169k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|   157k|                    parse_integer_digits_without_thsep(
 3567|   157k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|   157k|                        prefix_result.parsed_base));
 3569|       |
 3570|   157k|            auto buf = make_contiguous_buffer(
 3571|   157k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|   157k|            SCN_TRY(result_it,
  ------------------
  |  | 3672|   157k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   157k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   157k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.09k, False: 150k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  7.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  7.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  7.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  7.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  7.09k|    }                                                  \
  |  |  |  | 3671|   157k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   150k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|   150k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|   150k|                                        prefix_result.parsed_base));
 3575|       |
 3576|   150k|            return ranges::next(
 3577|   150k|                prefix_result.iterator,
 3578|   150k|                ranges::distance(buf.view().begin(), result_it));
 3579|   157k|        }
 3580|       |
 3581|  52.6k|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|  52.6k|            localized_number_formatting_options<CharT>{loc};
 3586|  52.6k|#endif
 3587|       |
 3588|  52.6k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|  52.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  52.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  52.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  52.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.53k, False: 51.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.53k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.53k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.53k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.53k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.53k|    }                                                  \
  |  |  |  | 3671|  52.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  51.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|  51.1k|                parse_integer_digits_with_thsep(
 3590|  51.1k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|  51.1k|                    prefix_result.parsed_base, locale_options));
 3592|  51.1k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|  51.1k|            parse_digits_result;
 3594|       |
 3595|  51.1k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 804, False: 50.3k]
  ------------------
 3596|    804|            if (auto e = check_thsep_grouping(
 3597|    804|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|    804|                    thsep_indices, locale_options.grouping);
 3599|    804|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    804|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 410, False: 394]
  |  |  ------------------
  ------------------
 3600|    410|                return unexpected(e);
 3601|    410|            }
 3602|    804|        }
 3603|       |
 3604|  50.7k|        auto nothsep_source_view =
 3605|  50.7k|            std::basic_string_view<CharT>{nothsep_source};
 3606|  50.7k|        SCN_TRY(
  ------------------
  |  | 3672|  50.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  50.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  50.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  50.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.65k, False: 49.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.65k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.65k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.65k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.65k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.65k|    }                                                  \
  |  |  |  | 3671|  50.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  49.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|  49.0k|            nothsep_source_it,
 3608|  49.0k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|  49.0k|                                prefix_result.parsed_base));
 3610|       |
 3611|  49.0k|        return ranges::next(
 3612|  49.0k|            prefix_result.iterator,
 3613|  49.0k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|  49.0k|                ranges::ssize(thsep_indices));
 3615|  50.7k|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESH_i:
 3325|  2.18M|{
 3326|  2.18M|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3672|  2.18M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.18M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.18M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.18M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  2.18M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.18M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|  2.18M|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|  2.18M|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|  2.18M|        parse_integer_base_prefix(
 3331|  2.18M|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|  2.18M|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 272k, False: 1.90M]
  ------------------
 3334|   272k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 950, False: 271k]
  ------------------
 3335|   272k|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 159k, False: 112k]
  ------------------
 3336|   160k|            digits_begin_it = base_prefix_begin_it;
 3337|   160k|        }
 3338|   112k|        else {
 3339|   112k|            parsed_zero = false;
 3340|   112k|        }
 3341|   272k|    }
 3342|  1.90M|    else {
 3343|  1.90M|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 3.56k, False: 1.90M]
  ------------------
 3344|  1.90M|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 101k, False: 1.80M]
  ------------------
 3345|   105k|            digits_begin_it = base_prefix_begin_it;
 3346|   105k|        }
 3347|  1.90M|    }
 3348|       |
 3349|  2.18M|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 1.99M, False: 185k]
  ------------------
 3350|  1.99M|        sign = sign_type::plus_sign;
 3351|  1.99M|    }
 3352|  2.18M|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|  2.18M|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|  2.18M|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3140|  2.18M|{
 3141|  2.18M|    auto r = read_one_of_code_unit(range, "+-");
 3142|  2.18M|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 1.99M, False: 185k]
  ------------------
 3143|  1.99M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 1.99M, False: 0]
  ------------------
 3144|  1.99M|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  1.99M|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|  1.99M|    }
 3148|       |
 3149|   185k|    auto& it = *r;
 3150|   185k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 132k, False: 52.5k]
  ------------------
 3151|   132k|        return std::pair{it, sign_type::minus_sign};
 3152|   132k|    }
 3153|  52.5k|    return std::pair{it, sign_type::plus_sign};
 3154|   185k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2271|  2.18M|{
 2272|  2.18M|    auto it = read_code_unit(range);
 2273|  2.18M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.18M]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  4.30M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 4.30M, False: 1.99M]
  ------------------
 2278|  4.30M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 185k, False: 4.12M]
  ------------------
 2279|   185k|            return *it;
 2280|   185k|        }
 2281|  4.30M|    }
 2282|       |
 2283|  1.99M|    return unexpected(parse_error::error);
 2284|  2.18M|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEEibEEESG_i:
 3292|  2.18M|{
 3293|  2.18M|    switch (base) {
 3294|  66.9k|        case 2:
  ------------------
  |  Branch (3294:9): [True: 66.9k, False: 2.11M]
  ------------------
 3295|       |            // allow 0b/0B
 3296|  66.9k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|  66.9k|                    false};
 3298|       |
 3299|   130k|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 130k, False: 2.05M]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|   130k|            bool zero_parsed = false;
 3302|   130k|            auto it = apply_opt(
 3303|   130k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|   130k|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|   373k|        case 16:
  ------------------
  |  Branch (3307:9): [True: 373k, False: 1.80M]
  ------------------
 3308|       |            // allow 0x/0X
 3309|   373k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|   373k|                    false};
 3311|       |
 3312|   471k|        case 0:
  ------------------
  |  Branch (3312:9): [True: 471k, False: 1.70M]
  ------------------
 3313|       |            // detect base
 3314|   471k|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|  1.13M|        default:
  ------------------
  |  Branch (3316:9): [True: 1.13M, False: 1.04M]
  ------------------
 3317|       |            // no base prefix allowed
 3318|  1.13M|            return {range.begin(), base, false};
 3319|  2.18M|    }
 3320|  2.18M|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEENS1_14parse_expectedESA_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEE4typeEOSI_SK_:
 2290|   570k|{
 2291|   570k|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 505k, False: 65.0k]
  ------------------
 2292|   505k|        return range.begin();
 2293|   505k|    }
 2294|  65.0k|    return *result;
 2295|   570k|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 3243|   533k|{
 3244|   533k|    return read_matching_string_classic_nocase(range, "0b");
 3245|   533k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2230|  1.97M|{
 2231|  1.97M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|       |    if constexpr (ranges::contiguous_range<Range> &&
 2234|       |                  std::is_same_v<char_type, char>) {
 2235|       |        if (range.size() < str.size()) {
 2236|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|       |        }
 2238|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|       |            return unexpected(parse_error::error);
 2240|       |        }
 2241|       |        return ranges::next(range.begin(), str.size());
 2242|       |    }
 2243|  1.97M|    else {
 2244|  1.97M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.97M|            if (ch < 'A' || ch > 'Z') {
 2246|  1.97M|                return ch;
 2247|  1.97M|            }
 2248|  1.97M|            return static_cast<char_type>(ch +
 2249|  1.97M|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.97M|        };
 2251|       |
 2252|  1.97M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  1.97M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.97M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.97M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.97M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 21.3k, False: 1.95M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  21.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  21.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  21.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  21.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  21.3k|    }                                                  \
  |  |  |  | 3671|  1.97M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.95M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  1.95M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  1.95M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  1.95M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  1.95M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.93M, False: 19.1k]
  |  |  ------------------
  ------------------
 2257|  1.95M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  1.95M|                    return ascii_tolower(a) ==
 2259|  1.95M|                           static_cast<detail::char_t<Range>>(b);
 2260|  1.95M|                }))) {
 2261|  1.93M|            return unexpected(parse_error::error);
 2262|  1.93M|        }
 2263|       |
 2264|  19.1k|        return it;
 2265|  1.95M|    }
 2266|  1.97M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlcE_clEc:
 2244|  2.92M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  2.92M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 2.86M, False: 59.4k]
  |  Branch (2245:29): [True: 46.1k, False: 13.3k]
  ------------------
 2246|  2.90M|                return ch;
 2247|  2.90M|            }
 2248|  13.3k|            return static_cast<char_type>(ch +
 2249|  13.3k|                                          static_cast<char_type>('a' - 'A'));
 2250|  2.92M|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 3257|   593k|{
 3258|   593k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 6.39k, False: 587k]
  ------------------
 3259|  6.39k|        return *r;
 3260|  6.39k|    }
 3261|       |
 3262|   587k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 272k, False: 314k]
  ------------------
 3263|   272k|        zero_parsed = true;
 3264|   272k|        return *r;
 3265|   272k|    }
 3266|       |
 3267|   314k|    return unexpected(parse_error::error);
 3268|   587k|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2145|   587k|{
 2146|   587k|    auto it = read_code_unit(range);
 2147|   587k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   587k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 588, False: 586k]
  |  |  ------------------
  ------------------
 2148|    588|        return unexpected(make_eof_parse_error(it.error()));
 2149|    588|    }
 2150|       |
 2151|   586k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   586k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 314k, False: 272k]
  |  |  ------------------
  ------------------
 2152|   586k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|   314k|        return unexpected(parse_error::error);
 2154|   314k|    }
 2155|       |
 2156|   272k|    return *it;
 2157|   586k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 3250|   844k|{
 3251|   844k|    return read_matching_string_classic_nocase(range, "0x");
 3252|   844k|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEEibEEESG_:
 3273|   471k|{
 3274|   471k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 5.08k, False: 466k]
  ------------------
 3275|  5.08k|        return {*r, 16, false};
 3276|  5.08k|    }
 3277|   466k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 2.37k, False: 463k]
  ------------------
 3278|  2.37k|        return {*r, 2, false};
 3279|  2.37k|    }
 3280|   463k|    {
 3281|   463k|        bool zero_parsed{false};
 3282|   463k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 219k, False: 244k]
  ------------------
 3283|   219k|            return {*r, 8, zero_parsed};
 3284|   219k|        }
 3285|   463k|    }
 3286|   244k|    return {range.begin(), 10, false};
 3287|   463k|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_i:
 3359|  1.66M|{
 3360|  1.66M|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|       |    if constexpr (ranges::contiguous_range<Range>) {
 3363|       |        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3364|       |            return unexpected_scan_error(
 3365|       |                scan_error::invalid_scanned_value,
 3366|       |                "Failed to parse integer: No digits found");
 3367|       |        }
 3368|       |        return range.end();
 3369|       |    }
 3370|  1.66M|    else {
 3371|  1.66M|        return read_while1_code_unit(range,
 3372|  1.66M|                                     [&](char_type ch) noexcept {
 3373|  1.66M|                                         return char_to_int(ch) < base;
 3374|  1.66M|                                     })
 3375|  1.66M|            .transform_error(map_parse_error_to_scan_error(
 3376|  1.66M|                scan_error::invalid_scanned_value,
 3377|  1.66M|                "Failed to parse integer: No digits found"));
 3378|  1.66M|    }
 3379|  1.66M|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1995|  1.66M|{
 1996|  1.66M|    auto it = read_while_code_unit(range, pred);
 1997|  1.66M|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 86.8k, False: 1.57M]
  ------------------
 1998|  86.8k|        return unexpected(parse_error::error);
 1999|  86.8k|    }
 2000|  1.57M|    return it;
 2001|  1.66M|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlcE_SQ_TnPNSI_9enable_ifIXaaaasr6detailE11is_not_selfISK_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSS_EEvE4typeELPv0EEEOSK_:
  742|  1.66M|        : m_fptr([](storage fn,
  743|  1.66M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.66M|              cvref<T> obj = *get<T>(fn);
  745|  1.66M|              if constexpr (std::is_void_v<R>) {
  746|  1.66M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.66M|              }
  748|  1.66M|              else {
  749|  1.66M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.66M|              }
  751|  1.66M|          }),
  752|  1.66M|          m_storage(std::addressof(f))
  753|  1.66M|    {
  754|  1.66M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlcE_SQ_TnPNSI_9enable_ifIXaaaasr6detailE11is_not_selfISK_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSS_EEvE4typeELPv0EEEOSK_ENKUlNS1_12fnref_detail4base7storageEcE_clES11_c:
  743|  6.54M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.54M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  6.54M|              else {
  749|  6.54M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.54M|              }
  751|  6.54M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_iEUlcE_EEDaNS3_7storageE:
  683|  6.54M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  6.54M|        else if constexpr (std::is_object_v<T>) {
  688|  6.54M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  6.54M|    }
_ZZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_iENKUlcE_clEc:
 3372|  6.54M|                                     [&](char_type ch) noexcept {
 3373|  6.54M|                                         return char_to_int(ch) < base;
 3374|  6.54M|                                     })
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlcE_TnPNSI_9enable_ifIXsr3stdE11is_object_vISK_EEvE4typeELPv0EEEPSK_:
  660|  1.66M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.66M|        {
  662|  1.66M|        }
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENSE_12basic_stringIT0_NSE_11char_traitsISN_EENSE_9allocatorISN_EEEENSM_IcNSO_IcEENSQ_IcEEEEEEEEESH_iRKNS1_35localized_number_formatting_optionsISN_EE:
 3389|   322k|{
 3390|   322k|    std::basic_string<CharT> output;
 3391|   322k|    std::string thsep_indices;
 3392|   322k|    auto it = range.begin();
 3393|   322k|    bool digit_matched = false;
 3394|  1.57M|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3394:12): [True: 1.56M, False: 4.66k]
  ------------------
 3395|  1.56M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3395:13): [True: 71.1k, False: 1.49M]
  ------------------
 3396|  71.1k|            thsep_indices.push_back(
 3397|  71.1k|                static_cast<char>(ranges::distance(range.begin(), it)));
 3398|  71.1k|        }
 3399|  1.49M|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3399:18): [True: 317k, False: 1.17M]
  ------------------
 3400|   317k|            break;
 3401|   317k|        }
 3402|  1.17M|        else {
 3403|  1.17M|            output.push_back(*it);
 3404|  1.17M|            digit_matched = true;
 3405|  1.17M|        }
 3406|  1.56M|    }
 3407|   322k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|   322k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.56k, False: 312k]
  |  |  ------------------
  ------------------
 3408|  9.56k|        return unexpected_scan_error(
 3409|  9.56k|            scan_error::invalid_scanned_value,
 3410|  9.56k|            "Failed to parse integer: No digits found");
 3411|  9.56k|    }
 3412|   312k|    return std::tuple{it, output, thsep_indices};
 3413|   322k|}
_ZN3scn2v34impl20check_thsep_groupingINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_EEEENS0_10scan_errorET_NSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEENSE_17basic_string_viewIcSH_EE:
 3210|  4.51k|{
 3211|  4.51k|    SCN_EXPECT(!thsep_indices.empty());
  ------------------
  |  |  924|  4.51k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.51k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3212|       |
 3213|  4.51k|    if (!check_thsep_grouping_impl(range, thsep_indices, grouping)) {
  ------------------
  |  Branch (3213:9): [True: 2.20k, False: 2.31k]
  ------------------
 3214|  2.20k|        SCN_UNLIKELY_ATTR
 3215|  2.20k|        return {scan_error::invalid_scanned_value,
 3216|  2.20k|                "Invalid thousands separator grouping"};
 3217|  2.20k|    }
 3218|       |
 3219|  2.31k|    return {};
 3220|  4.51k|}
_ZN3scn2v34impl25check_thsep_grouping_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_EEEEbT_RNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEENSD_17basic_string_viewIcSG_EE:
 3172|  4.51k|{
 3173|  4.51k|    transform_thsep_indices(thsep_indices,
 3174|  4.51k|                            ranges::distance(range.begin(), range.end()));
 3175|       |
 3176|  4.51k|    auto thsep_it = thsep_indices.rbegin();
 3177|  4.51k|    for (auto grouping_it = grouping.begin();
 3178|  4.51k|         grouping_it != grouping.end() && thsep_it != thsep_indices.rend() - 1;
  ------------------
  |  Branch (3178:10): [True: 0, False: 4.51k]
  |  Branch (3178:10): [True: 0, False: 4.51k]
  |  Branch (3178:43): [True: 0, False: 0]
  ------------------
 3179|  4.51k|         ++grouping_it, (void)++thsep_it) {
 3180|      0|        if (*thsep_it != *grouping_it) {
  ------------------
  |  Branch (3180:13): [True: 0, False: 0]
  ------------------
 3181|      0|            return false;
 3182|      0|        }
 3183|      0|    }
 3184|       |
 3185|  4.51k|    SCN_CLANG_PUSH
 3186|       |    // false positive
 3187|  4.51k|    SCN_CLANG_IGNORE("-Wzero-as-null-pointer-constant")
 3188|       |
 3189|  55.4k|    for (; thsep_it < thsep_indices.rend() - 1; ++thsep_it) {
  ------------------
  |  Branch (3189:12): [True: 52.0k, False: 3.42k]
  ------------------
 3190|  52.0k|        if (*thsep_it != grouping.back()) {
  ------------------
  |  Branch (3190:13): [True: 1.09k, False: 50.9k]
  ------------------
 3191|  1.09k|            return false;
 3192|  1.09k|        }
 3193|  52.0k|    }
 3194|       |
 3195|  3.42k|    if (thsep_it == thsep_indices.rend() - 1) {
  ------------------
  |  Branch (3195:9): [True: 3.42k, False: 0]
  ------------------
 3196|  3.42k|        if (*thsep_it > grouping.back()) {
  ------------------
  |  Branch (3196:13): [True: 1.11k, False: 2.31k]
  ------------------
 3197|  1.11k|            return false;
 3198|  1.11k|        }
 3199|  3.42k|    }
 3200|       |
 3201|  2.31k|    SCN_CLANG_POP
 3202|       |
 3203|  2.31k|    return true;
 3204|  3.42k|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_EEEEDaOT_:
 1682|  1.57M|{
 1683|       |    if constexpr (ranges::borrowed_range<Range> &&
 1684|       |                  ranges::contiguous_range<Range> &&
 1685|       |                  ranges::sized_range<Range>) {
 1686|       |        return string_view_wrapper{SCN_FWD(range)};
 1687|       |    }
 1688|  1.57M|    else {
 1689|  1.57M|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|  1.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1690|  1.57M|    }
 1691|  1.57M|}
_ZN3scn2v34impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1536|  1.57M|    {
 1537|  1.57M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  1.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1538|  1.57M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1620|  1.57M|    {
 1621|  1.57M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|       |        if constexpr (ranges::borrowed_range<Range> &&
 1624|       |                      ranges::contiguous_range<Range> &&
 1625|       |                      ranges::sized_range<Range>) {
 1626|       |            m_storage.reset();
 1627|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1628|       |        }
 1629|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|       |                                          std::basic_string<CharT>>) {
 1631|       |            m_storage.emplace(SCN_FWD(range));
 1632|       |            m_view = string_view_type{*m_storage};
 1633|       |        }
 1634|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|       |                                          typename detail::basic_scan_buffer<
 1636|       |                                              value_t>::forward_iterator> &&
 1637|  1.57M|                           ranges::common_range<Range>) {
 1638|  1.57M|            auto beg_seg = range.begin().contiguous_segment();
 1639|  1.57M|            auto end_seg = range.end().contiguous_segment();
 1640|  1.57M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|  1.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.11M, False: 464k]
  |  |  ------------------
  ------------------
 1641|  1.57M|                             detail::to_address(end_seg.end()))) {
 1642|  1.11M|                auto& str = m_storage.emplace();
 1643|  1.11M|                str.reserve(range.end().position() - range.begin().position());
 1644|  1.11M|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  1.11M|                m_view = string_view_type{str};
 1646|  1.11M|                return;
 1647|  1.11M|            }
 1648|       |
 1649|   464k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   464k|                                                            end_seg.data());
 1651|   464k|            m_storage.reset();
 1652|       |        }
 1653|       |        else {
 1654|       |            auto& str = m_storage.emplace();
 1655|       |            if constexpr (ranges::sized_range<Range>) {
 1656|       |                str.reserve(range.size());
 1657|       |            }
 1658|       |            if constexpr (ranges::common_range<Range>) {
 1659|       |                std::copy(ranges::begin(range), ranges::end(range),
 1660|       |                          std::back_inserter(str));
 1661|       |            }
 1662|       |            else {
 1663|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|       |                     ++it) {
 1665|       |                    str.push_back(*it);
 1666|       |                }
 1667|       |            }
 1668|       |            m_view = string_view_type{str};
 1669|       |        }
 1670|  1.57M|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1581|  3.13M|    {
 1582|  3.13M|        return m_view;
 1583|  3.13M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1571|  1.57M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6078|  1.55M|    {
 6079|  1.55M|        const bool need_skipped_width =
 6080|  1.55M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 1.55M]
  |  Branch (6080:33): [True: 0, False: 1.55M]
  ------------------
 6081|  1.55M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  1.55M|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 1.55M]
  ------------------
 6084|  1.55M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 1.55M]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|  1.55M|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 1.55M, False: 0]
  ------------------
 6093|  1.55M|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 1.55M]
  ------------------
 6094|  1.55M|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|  1.55M|        return result_type{rng.begin(), 0};
 6118|  1.55M|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|  2.76M|{
 1846|  2.76M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.76M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 588, False: 2.76M]
  |  |  ------------------
  ------------------
 1847|    588|        return unexpected(e);
 1848|    588|    }
 1849|       |
 1850|  2.76M|    return ranges::next(range.begin());
 1851|  2.76M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|  7.11M|{
  950|  7.11M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  7.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.4k, False: 7.09M]
  |  |  ------------------
  ------------------
  951|  26.4k|        return eof_error::eof;
  952|  26.4k|    }
  953|  7.09M|    return eof_error::good;
  954|  7.11M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|  7.11M|{
  944|  7.11M|    return is_range_eof(r.begin(), r.end());
  945|  7.11M|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|  7.11M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  7.11M|    {
  937|  7.11M|        return begin == end;
  938|  7.11M|    }
  939|  7.11M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  2.76M|    {
  296|  2.76M|        ++x;
  297|  2.76M|        return x;
  298|  2.76M|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|   246k|    {
 3539|   246k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|   246k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   246k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   246k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   246k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 246k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   246k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   246k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|   246k|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|   246k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 24.3k, False: 222k]
  ------------------
 3543|       |            if constexpr (!std::is_signed_v<T>) {
 3544|       |                return unexpected_scan_error(
 3545|       |                    scan_error::invalid_scanned_value,
 3546|       |                    "Unexpected '-' sign when parsing an "
 3547|       |                    "unsigned value");
 3548|       |            }
 3549|  24.3k|            else {
 3550|  24.3k|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 24.3k]
  ------------------
 3551|  24.3k|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|  24.3k|            }
 3557|  24.3k|        }
 3558|       |
 3559|   246k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 25.3k, False: 221k]
  ------------------
 3560|  25.3k|            value = T{0};
 3561|  25.3k|            return std::next(prefix_result.iterator);
 3562|  25.3k|        }
 3563|       |
 3564|   221k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|   221k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 169k, False: 52.5k]
  |  |  ------------------
  ------------------
 3565|   169k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|   169k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   169k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   169k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   169k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 242, False: 168k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    242|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    242|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    242|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    242|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    242|    }                                                  \
  |  |  |  | 3671|   169k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   168k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|   168k|                    parse_integer_digits_without_thsep(
 3567|   168k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|   168k|                        prefix_result.parsed_base));
 3569|       |
 3570|   168k|            auto buf = make_contiguous_buffer(
 3571|   168k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|   168k|            SCN_TRY(result_it,
  ------------------
  |  | 3672|   168k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   168k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   168k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   168k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18.6k, False: 150k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  18.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  18.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  18.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  18.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  18.6k|    }                                                  \
  |  |  |  | 3671|   168k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   150k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|   150k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|   150k|                                        prefix_result.parsed_base));
 3575|       |
 3576|   150k|            return ranges::next(
 3577|   150k|                prefix_result.iterator,
 3578|   150k|                ranges::distance(buf.view().begin(), result_it));
 3579|   168k|        }
 3580|       |
 3581|  52.5k|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|  52.5k|            localized_number_formatting_options<CharT>{loc};
 3586|  52.5k|#endif
 3587|       |
 3588|  52.5k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|  52.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  52.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  52.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  52.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.59k, False: 50.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.59k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.59k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.59k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.59k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.59k|    }                                                  \
  |  |  |  | 3671|  52.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  50.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|  50.9k|                parse_integer_digits_with_thsep(
 3590|  50.9k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|  50.9k|                    prefix_result.parsed_base, locale_options));
 3592|  50.9k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|  50.9k|            parse_digits_result;
 3594|       |
 3595|  50.9k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 802, False: 50.1k]
  ------------------
 3596|    802|            if (auto e = check_thsep_grouping(
 3597|    802|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|    802|                    thsep_indices, locale_options.grouping);
 3599|    802|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    802|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 408, False: 394]
  |  |  ------------------
  ------------------
 3600|    408|                return unexpected(e);
 3601|    408|            }
 3602|    802|        }
 3603|       |
 3604|  50.4k|        auto nothsep_source_view =
 3605|  50.4k|            std::basic_string_view<CharT>{nothsep_source};
 3606|  50.4k|        SCN_TRY(
  ------------------
  |  | 3672|  50.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  50.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  50.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  50.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.64k, False: 48.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.64k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.64k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.64k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.64k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.64k|    }                                                  \
  |  |  |  | 3671|  50.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  48.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|  48.8k|            nothsep_source_it,
 3608|  48.8k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|  48.8k|                                prefix_result.parsed_base));
 3610|       |
 3611|  48.8k|        return ranges::next(
 3612|  48.8k|            prefix_result.iterator,
 3613|  48.8k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|  48.8k|                ranges::ssize(thsep_indices));
 3615|  50.4k|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3325|  2.17M|{
 3326|  2.17M|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3672|  2.17M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.17M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.17M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.17M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  2.17M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.17M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|  2.17M|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|  2.17M|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|  2.17M|        parse_integer_base_prefix(
 3331|  2.17M|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|  2.17M|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 270k, False: 1.90M]
  ------------------
 3334|   270k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 790, False: 269k]
  ------------------
 3335|   270k|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 157k, False: 112k]
  ------------------
 3336|   158k|            digits_begin_it = base_prefix_begin_it;
 3337|   158k|        }
 3338|   112k|        else {
 3339|   112k|            parsed_zero = false;
 3340|   112k|        }
 3341|   270k|    }
 3342|  1.90M|    else {
 3343|  1.90M|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 3.53k, False: 1.90M]
  ------------------
 3344|  1.90M|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 103k, False: 1.79M]
  ------------------
 3345|   107k|            digits_begin_it = base_prefix_begin_it;
 3346|   107k|        }
 3347|  1.90M|    }
 3348|       |
 3349|  2.17M|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 1.99M, False: 185k]
  ------------------
 3350|  1.99M|        sign = sign_type::plus_sign;
 3351|  1.99M|    }
 3352|  2.17M|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|  2.17M|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|  2.17M|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|  2.17M|{
 3141|  2.17M|    auto r = read_one_of_code_unit(range, "+-");
 3142|  2.17M|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 1.99M, False: 185k]
  ------------------
 3143|  1.99M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 1.99M, False: 0]
  ------------------
 3144|  1.99M|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  1.99M|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|  1.99M|    }
 3148|       |
 3149|   185k|    auto& it = *r;
 3150|   185k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 132k, False: 52.5k]
  ------------------
 3151|   132k|        return std::pair{it, sign_type::minus_sign};
 3152|   132k|    }
 3153|  52.5k|    return std::pair{it, sign_type::plus_sign};
 3154|   185k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|  2.17M|{
 2272|  2.17M|    auto it = read_code_unit(range);
 2273|  2.17M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.17M]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  4.30M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 4.30M, False: 1.99M]
  ------------------
 2278|  4.30M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 185k, False: 4.11M]
  ------------------
 2279|   185k|            return *it;
 2280|   185k|        }
 2281|  4.30M|    }
 2282|       |
 2283|  1.99M|    return unexpected(parse_error::error);
 2284|  2.17M|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3292|  2.17M|{
 3293|  2.17M|    switch (base) {
 3294|  66.7k|        case 2:
  ------------------
  |  Branch (3294:9): [True: 66.7k, False: 2.11M]
  ------------------
 3295|       |            // allow 0b/0B
 3296|  66.7k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|  66.7k|                    false};
 3298|       |
 3299|   130k|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 130k, False: 2.04M]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|   130k|            bool zero_parsed = false;
 3302|   130k|            auto it = apply_opt(
 3303|   130k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|   130k|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|   371k|        case 16:
  ------------------
  |  Branch (3307:9): [True: 371k, False: 1.80M]
  ------------------
 3308|       |            // allow 0x/0X
 3309|   371k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|   371k|                    false};
 3311|       |
 3312|   468k|        case 0:
  ------------------
  |  Branch (3312:9): [True: 468k, False: 1.70M]
  ------------------
 3313|       |            // detect base
 3314|   468k|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|  1.13M|        default:
  ------------------
  |  Branch (3316:9): [True: 1.13M, False: 1.03M]
  ------------------
 3317|       |            // no base prefix allowed
 3318|  1.13M|            return {range.begin(), base, false};
 3319|  2.17M|    }
 3320|  2.17M|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2290|   568k|{
 2291|   568k|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 503k, False: 64.5k]
  ------------------
 2292|   503k|        return range.begin();
 2293|   503k|    }
 2294|  64.5k|    return *result;
 2295|   568k|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3243|   530k|{
 3244|   530k|    return read_matching_string_classic_nocase(range, "0b");
 3245|   530k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  1.96M|{
 2231|  1.96M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|       |    if constexpr (ranges::contiguous_range<Range> &&
 2234|  1.96M|                  std::is_same_v<char_type, char>) {
 2235|  1.96M|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2235:13): [True: 20.9k, False: 1.94M]
  ------------------
 2236|  20.9k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  20.9k|        }
 2238|  1.94M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2238:13): [True: 1.92M, False: 18.8k]
  ------------------
 2239|  1.92M|            return unexpected(parse_error::error);
 2240|  1.92M|        }
 2241|  18.8k|        return ranges::next(range.begin(), str.size());
 2242|       |    }
 2243|       |    else {
 2244|       |        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|       |            if (ch < 'A' || ch > 'Z') {
 2246|       |                return ch;
 2247|       |            }
 2248|       |            return static_cast<char_type>(ch +
 2249|       |                                          static_cast<char_type>('a' - 'A'));
 2250|       |        };
 2251|       |
 2252|       |        SCN_TRY(it, read_exactly_n_code_units(
 2253|       |                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|       |                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|       |        if (SCN_UNLIKELY(!std::equal(
 2257|       |                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|       |                    return ascii_tolower(a) ==
 2259|       |                           static_cast<detail::char_t<Range>>(b);
 2260|       |                }))) {
 2261|       |            return unexpected(parse_error::error);
 2262|       |        }
 2263|       |
 2264|       |        return it;
 2265|       |    }
 2266|  1.96M|}
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3257|   591k|{
 3258|   591k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 6.39k, False: 584k]
  ------------------
 3259|  6.39k|        return *r;
 3260|  6.39k|    }
 3261|       |
 3262|   584k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 270k, False: 314k]
  ------------------
 3263|   270k|        zero_parsed = true;
 3264|   270k|        return *r;
 3265|   270k|    }
 3266|       |
 3267|   314k|    return unexpected(parse_error::error);
 3268|   584k|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|   584k|{
 2146|   584k|    auto it = read_code_unit(range);
 2147|   584k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   584k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 588, False: 584k]
  |  |  ------------------
  ------------------
 2148|    588|        return unexpected(make_eof_parse_error(it.error()));
 2149|    588|    }
 2150|       |
 2151|   584k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   584k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 313k, False: 270k]
  |  |  ------------------
  ------------------
 2152|   584k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|   313k|        return unexpected(parse_error::error);
 2154|   313k|    }
 2155|       |
 2156|   270k|    return *it;
 2157|   584k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3250|   840k|{
 3251|   840k|    return read_matching_string_classic_nocase(range, "0x");
 3252|   840k|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3273|   468k|{
 3274|   468k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 4.91k, False: 463k]
  ------------------
 3275|  4.91k|        return {*r, 16, false};
 3276|  4.91k|    }
 3277|   463k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 2.37k, False: 461k]
  ------------------
 3278|  2.37k|        return {*r, 2, false};
 3279|  2.37k|    }
 3280|   461k|    {
 3281|   461k|        bool zero_parsed{false};
 3282|   461k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 217k, False: 243k]
  ------------------
 3283|   217k|            return {*r, 8, zero_parsed};
 3284|   217k|        }
 3285|   461k|    }
 3286|   243k|    return {range.begin(), 10, false};
 3287|   461k|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3359|  1.66M|{
 3360|  1.66M|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|  1.66M|    if constexpr (ranges::contiguous_range<Range>) {
 3363|  1.66M|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.66M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.42k, False: 1.66M]
  |  |  ------------------
  ------------------
 3364|  1.42k|            return unexpected_scan_error(
 3365|  1.42k|                scan_error::invalid_scanned_value,
 3366|  1.42k|                "Failed to parse integer: No digits found");
 3367|  1.42k|        }
 3368|  1.66M|        return range.end();
 3369|       |    }
 3370|       |    else {
 3371|       |        return read_while1_code_unit(range,
 3372|       |                                     [&](char_type ch) noexcept {
 3373|       |                                         return char_to_int(ch) < base;
 3374|       |                                     })
 3375|       |            .transform_error(map_parse_error_to_scan_error(
 3376|       |                scan_error::invalid_scanned_value,
 3377|       |                "Failed to parse integer: No digits found"));
 3378|       |    }
 3379|  1.66M|}
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3389|   321k|{
 3390|   321k|    std::basic_string<CharT> output;
 3391|   321k|    std::string thsep_indices;
 3392|   321k|    auto it = range.begin();
 3393|   321k|    bool digit_matched = false;
 3394|  1.56M|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3394:12): [True: 1.56M, False: 4.46k]
  ------------------
 3395|  1.56M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3395:13): [True: 70.7k, False: 1.49M]
  ------------------
 3396|  70.7k|            thsep_indices.push_back(
 3397|  70.7k|                static_cast<char>(ranges::distance(range.begin(), it)));
 3398|  70.7k|        }
 3399|  1.49M|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3399:18): [True: 316k, False: 1.17M]
  ------------------
 3400|   316k|            break;
 3401|   316k|        }
 3402|  1.17M|        else {
 3403|  1.17M|            output.push_back(*it);
 3404|  1.17M|            digit_matched = true;
 3405|  1.17M|        }
 3406|  1.56M|    }
 3407|   321k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|   321k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.0k, False: 311k]
  |  |  ------------------
  ------------------
 3408|  10.0k|        return unexpected_scan_error(
 3409|  10.0k|            scan_error::invalid_scanned_value,
 3410|  10.0k|            "Failed to parse integer: No digits found");
 3411|  10.0k|    }
 3412|   311k|    return std::tuple{it, output, thsep_indices};
 3413|   321k|}
_ZN3scn2v34impl20check_thsep_groupingINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_10scan_errorET_NSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEENSC_17basic_string_viewIcSF_EE:
 3210|  4.49k|{
 3211|  4.49k|    SCN_EXPECT(!thsep_indices.empty());
  ------------------
  |  |  924|  4.49k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.49k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3212|       |
 3213|  4.49k|    if (!check_thsep_grouping_impl(range, thsep_indices, grouping)) {
  ------------------
  |  Branch (3213:9): [True: 2.18k, False: 2.31k]
  ------------------
 3214|  2.18k|        SCN_UNLIKELY_ATTR
 3215|  2.18k|        return {scan_error::invalid_scanned_value,
 3216|  2.18k|                "Invalid thousands separator grouping"};
 3217|  2.18k|    }
 3218|       |
 3219|  2.31k|    return {};
 3220|  4.49k|}
_ZN3scn2v34impl25check_thsep_grouping_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_RNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEENSB_17basic_string_viewIcSE_EE:
 3172|  4.49k|{
 3173|  4.49k|    transform_thsep_indices(thsep_indices,
 3174|  4.49k|                            ranges::distance(range.begin(), range.end()));
 3175|       |
 3176|  4.49k|    auto thsep_it = thsep_indices.rbegin();
 3177|  4.49k|    for (auto grouping_it = grouping.begin();
 3178|  4.49k|         grouping_it != grouping.end() && thsep_it != thsep_indices.rend() - 1;
  ------------------
  |  Branch (3178:10): [True: 0, False: 4.49k]
  |  Branch (3178:10): [True: 0, False: 4.49k]
  |  Branch (3178:43): [True: 0, False: 0]
  ------------------
 3179|  4.49k|         ++grouping_it, (void)++thsep_it) {
 3180|      0|        if (*thsep_it != *grouping_it) {
  ------------------
  |  Branch (3180:13): [True: 0, False: 0]
  ------------------
 3181|      0|            return false;
 3182|      0|        }
 3183|      0|    }
 3184|       |
 3185|  4.49k|    SCN_CLANG_PUSH
 3186|       |    // false positive
 3187|  4.49k|    SCN_CLANG_IGNORE("-Wzero-as-null-pointer-constant")
 3188|       |
 3189|  55.1k|    for (; thsep_it < thsep_indices.rend() - 1; ++thsep_it) {
  ------------------
  |  Branch (3189:12): [True: 51.7k, False: 3.41k]
  ------------------
 3190|  51.7k|        if (*thsep_it != grouping.back()) {
  ------------------
  |  Branch (3190:13): [True: 1.08k, False: 50.6k]
  ------------------
 3191|  1.08k|            return false;
 3192|  1.08k|        }
 3193|  51.7k|    }
 3194|       |
 3195|  3.41k|    if (thsep_it == thsep_indices.rend() - 1) {
  ------------------
  |  Branch (3195:9): [True: 3.41k, False: 0]
  ------------------
 3196|  3.41k|        if (*thsep_it > grouping.back()) {
  ------------------
  |  Branch (3196:13): [True: 1.10k, False: 2.31k]
  ------------------
 3197|  1.10k|            return false;
 3198|  1.10k|        }
 3199|  3.41k|    }
 3200|       |
 3201|  2.31k|    SCN_CLANG_POP
 3202|       |
 3203|  2.31k|    return true;
 3204|  3.41k|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|  1.66M|{
 1683|       |    if constexpr (ranges::borrowed_range<Range> &&
 1684|       |                  ranges::contiguous_range<Range> &&
 1685|  1.66M|                  ranges::sized_range<Range>) {
 1686|  1.66M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  1.66M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|       |    }
 1688|       |    else {
 1689|       |        return contiguous_range_factory{SCN_FWD(range)};
 1690|       |    }
 1691|  1.66M|}
_ZN3scn2v34impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1488|  1.66M|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1489|  1.66M|    {
 1490|  1.66M|    }
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1502|  7.60M|    {
 1503|  7.60M|        return sv;
 1504|  7.60M|    }
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  2.19M|{
 2951|  2.19M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 2.19M, False: 0]
  ------------------
 2952|  2.19M|        auto it = read_while_classic_space(range);
 2953|  2.19M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  2.19M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.4k, False: 2.17M]
  |  |  ------------------
  ------------------
 2955|  20.4k|            return unexpected(e);
 2956|  20.4k|        }
 2957|       |
 2958|  2.17M|        return it;
 2959|  2.19M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  2.19M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  2.19M|{
 2117|       |    if constexpr (ranges::contiguous_range<Range> &&
 2118|       |                  ranges::sized_range<Range> &&
 2119|  2.19M|                  std::is_same_v<detail::char_t<Range>, char>) {
 2120|  2.19M|        auto buf = make_contiguous_buffer(range);
 2121|  2.19M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  2.19M|        return ranges::next(range.begin(),
 2123|  2.19M|                            ranges::distance(buf.view().begin(), it));
 2124|       |    }
 2125|       |    else {
 2126|       |        auto it = range.begin();
 2127|       |
 2128|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|       |            auto seg = get_contiguous_beginning(range);
 2130|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|       |                seg_it != seg.end()) {
 2132|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|       |            }
 2134|       |            ranges::advance(it, seg.size());
 2135|       |        }
 2136|       |
 2137|       |        return read_while_code_point(
 2138|       |            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|       |    }
 2140|  2.19M|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|  2.19M|{
 1683|       |    if constexpr (ranges::borrowed_range<Range> &&
 1684|       |                  ranges::contiguous_range<Range> &&
 1685|  2.19M|                  ranges::sized_range<Range>) {
 1686|  2.19M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  2.19M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|       |    }
 1688|       |    else {
 1689|       |        return contiguous_range_factory{SCN_FWD(range)};
 1690|       |    }
 1691|  2.19M|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1488|  2.19M|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1489|  2.19M|    {
 1490|  2.19M|    }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  3.80M|    {
  304|  3.80M|        ranges::advance(x, n);
  305|  3.80M|        return x;
  306|  3.80M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  5.92M|    {
  268|  5.92M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  5.92M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  5.92M|    {
  181|  14.4M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 8.55M, False: 5.92M]
  ------------------
  182|  8.55M|            ++i;
  183|  8.55M|        }
  184|  5.92M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6192|   250k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|       |                          basic_contiguous_scan_context<char_type>>) {
 6197|       |            auto rd = make_reader<T, char_type>();
 6198|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|       |                return unexpected(e);
 6200|       |            }
 6201|       |
 6202|       |            return impl(rd, range, value);
 6203|       |        }
 6204|   250k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   250k|            auto rd = make_reader<T, char_type>();
 6206|   250k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   250k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 250k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   250k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 250k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   250k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   250k|                return impl(rd, range, value);
 6213|   250k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   250k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  3.42M|    {
 3040|  3.42M|        reader_error_handler eh{};
 3041|  3.42M|        get_derived().check_specs_impl(specs, eh);
 3042|  3.42M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  3.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.42M]
  |  |  ------------------
  ------------------
 3043|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|      0|        }
 3045|  3.42M|        return {};
 3046|  3.42M|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
 3050|  3.42M|    {
 3051|  3.42M|        return static_cast<Derived&>(*this);
 3052|  3.42M|    }
_ZN3scn2v34impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3484|  3.42M|    {
 3485|  3.42M|        detail::check_int_type_specs(specs, eh);
 3486|  3.42M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   250k|    {
 6124|   250k|        const bool need_skipped_width =
 6125|   250k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 250k]
  |  Branch (6125:33): [True: 0, False: 250k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   250k|        auto it = rng.begin();
 6129|   250k|        std::ptrdiff_t prefix_width = 0;
 6130|   250k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 250k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   250k|        else {
 6138|   250k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   250k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   250k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   250k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   250k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.74k, False: 247k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.74k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.74k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.74k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.74k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.74k|    }                                                  \
  |  |  |  | 3671|   250k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   247k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   247k|            std::tie(it, prefix_width) = prefix_result;
 6140|   247k|        }
 6141|   247k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   247k|        std::ptrdiff_t value_width = 0;
 6145|   247k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 247k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   247k|        else {
 6161|   247k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   247k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   247k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   247k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 22.2k, False: 225k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  22.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  22.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  22.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  22.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  22.2k|    }                                                  \
  |  | 3671|   247k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   247k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   225k|                                             specs, value, loc));
 6163|       |
 6164|   225k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 225k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   225k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   225k|        std::ptrdiff_t postfix_width = 0;
 6173|   225k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 223k, False: 1.85k]
  ------------------
 6174|   223k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   223k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   223k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   223k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   223k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 223k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   223k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   223k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   223k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   223k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   223k|                                 value_width));
 6178|   223k|            std::tie(it, postfix_width) = postfix_result;
 6179|   223k|        }
 6180|       |
 6181|   225k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   225k|                                                 value_width, postfix_width);
 6183|   225k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 225k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   225k|        return it;
 6188|   225k|    }
_ZNK3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
 3034|  7.50M|    {
 3035|  7.50M|        return true;
 3036|  7.50M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6192|   325k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|       |                          basic_contiguous_scan_context<char_type>>) {
 6197|       |            auto rd = make_reader<T, char_type>();
 6198|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|       |                return unexpected(e);
 6200|       |            }
 6201|       |
 6202|       |            return impl(rd, range, value);
 6203|       |        }
 6204|   325k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   325k|            auto rd = make_reader<T, char_type>();
 6206|   325k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   325k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 325k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   325k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 325k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   325k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   325k|                return impl(rd, range, value);
 6213|   325k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   325k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   325k|    {
 6124|   325k|        const bool need_skipped_width =
 6125|   325k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 325k]
  |  Branch (6125:33): [True: 0, False: 325k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   325k|        auto it = rng.begin();
 6129|   325k|        std::ptrdiff_t prefix_width = 0;
 6130|   325k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 325k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   325k|        else {
 6138|   325k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   325k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   325k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   325k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   325k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.45k, False: 321k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.45k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.45k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.45k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.45k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.45k|    }                                                  \
  |  |  |  | 3671|   325k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   321k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   321k|            std::tie(it, prefix_width) = prefix_result;
 6140|   321k|        }
 6141|   321k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   321k|        std::ptrdiff_t value_width = 0;
 6145|   321k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 321k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   321k|        else {
 6161|   321k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   321k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   321k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   321k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 20.5k, False: 300k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  20.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  20.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  20.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  20.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  20.5k|    }                                                  \
  |  | 3671|   321k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   321k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   300k|                                             specs, value, loc));
 6163|       |
 6164|   300k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 300k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   300k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   300k|        std::ptrdiff_t postfix_width = 0;
 6173|   300k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 297k, False: 3.07k]
  ------------------
 6174|   297k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   297k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   297k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   297k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   297k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 297k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   297k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   297k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   297k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   297k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   297k|                                 value_width));
 6178|   297k|            std::tie(it, postfix_width) = postfix_result;
 6179|   297k|        }
 6180|       |
 6181|   300k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   300k|                                                 value_width, postfix_width);
 6183|   300k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 300k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   300k|        return it;
 6188|   300k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3538|   321k|    {
 3539|   321k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|   321k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   321k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   321k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   321k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 321k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   321k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   321k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|   321k|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|   321k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 25.8k, False: 295k]
  ------------------
 3543|       |            if constexpr (!std::is_signed_v<T>) {
 3544|       |                return unexpected_scan_error(
 3545|       |                    scan_error::invalid_scanned_value,
 3546|       |                    "Unexpected '-' sign when parsing an "
 3547|       |                    "unsigned value");
 3548|       |            }
 3549|  25.8k|            else {
 3550|  25.8k|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 25.8k]
  ------------------
 3551|  25.8k|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|  25.8k|            }
 3557|  25.8k|        }
 3558|       |
 3559|   321k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 28.2k, False: 292k]
  ------------------
 3560|  28.2k|            value = T{0};
 3561|  28.2k|            return std::next(prefix_result.iterator);
 3562|  28.2k|        }
 3563|       |
 3564|   292k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|   292k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 232k, False: 60.6k]
  |  |  ------------------
  ------------------
 3565|   232k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|   232k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   232k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   232k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   232k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 13.9k, False: 218k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  13.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  13.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  13.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  13.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  13.9k|    }                                                  \
  |  |  |  | 3671|   232k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   218k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|   218k|                    parse_integer_digits_without_thsep(
 3567|   218k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|   218k|                        prefix_result.parsed_base));
 3569|       |
 3570|   218k|            auto buf = make_contiguous_buffer(
 3571|   218k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|   218k|            SCN_TRY(result_it,
  ------------------
  |  | 3672|   218k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   218k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   218k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   218k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.32k, False: 214k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.32k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.32k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.32k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.32k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.32k|    }                                                  \
  |  |  |  | 3671|   218k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   214k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|   214k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|   214k|                                        prefix_result.parsed_base));
 3575|       |
 3576|   214k|            return ranges::next(
 3577|   214k|                prefix_result.iterator,
 3578|   214k|                ranges::distance(buf.view().begin(), result_it));
 3579|   218k|        }
 3580|       |
 3581|  60.6k|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|  60.6k|            localized_number_formatting_options<CharT>{loc};
 3586|  60.6k|#endif
 3587|       |
 3588|  60.6k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|  60.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  60.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  60.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  60.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.02k, False: 58.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.02k|    }                                                  \
  |  |  |  | 3671|  60.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  58.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|  58.6k|                parse_integer_digits_with_thsep(
 3590|  58.6k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|  58.6k|                    prefix_result.parsed_base, locale_options));
 3592|  58.6k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|  58.6k|            parse_digits_result;
 3594|       |
 3595|  58.6k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 868, False: 57.7k]
  ------------------
 3596|    868|            if (auto e = check_thsep_grouping(
 3597|    868|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|    868|                    thsep_indices, locale_options.grouping);
 3599|    868|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    868|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 474, False: 394]
  |  |  ------------------
  ------------------
 3600|    474|                return unexpected(e);
 3601|    474|            }
 3602|    868|        }
 3603|       |
 3604|  58.1k|        auto nothsep_source_view =
 3605|  58.1k|            std::basic_string_view<CharT>{nothsep_source};
 3606|  58.1k|        SCN_TRY(
  ------------------
  |  | 3672|  58.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  58.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  58.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  58.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 796, False: 57.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    796|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    796|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    796|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    796|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    796|    }                                                  \
  |  |  |  | 3671|  58.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  57.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|  57.3k|            nothsep_source_it,
 3608|  57.3k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|  57.3k|                                prefix_result.parsed_base));
 3610|       |
 3611|  57.3k|        return ranges::next(
 3612|  57.3k|            prefix_result.iterator,
 3613|  57.3k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|  57.3k|                ranges::ssize(thsep_indices));
 3615|  58.1k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|   319k|    {
 3539|   319k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|   319k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   319k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   319k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   319k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 319k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   319k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   319k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|   319k|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|   319k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 25.8k, False: 293k]
  ------------------
 3543|       |            if constexpr (!std::is_signed_v<T>) {
 3544|       |                return unexpected_scan_error(
 3545|       |                    scan_error::invalid_scanned_value,
 3546|       |                    "Unexpected '-' sign when parsing an "
 3547|       |                    "unsigned value");
 3548|       |            }
 3549|  25.8k|            else {
 3550|  25.8k|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 25.8k]
  ------------------
 3551|  25.8k|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|  25.8k|            }
 3557|  25.8k|        }
 3558|       |
 3559|   319k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 27.9k, False: 291k]
  ------------------
 3560|  27.9k|            value = T{0};
 3561|  27.9k|            return std::next(prefix_result.iterator);
 3562|  27.9k|        }
 3563|       |
 3564|   291k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|   291k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 231k, False: 60.4k]
  |  |  ------------------
  ------------------
 3565|   231k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|   231k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   231k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   231k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   231k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 322, False: 230k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    322|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    322|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    322|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    322|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    322|    }                                                  \
  |  |  |  | 3671|   231k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   230k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|   230k|                    parse_integer_digits_without_thsep(
 3567|   230k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|   230k|                        prefix_result.parsed_base));
 3569|       |
 3570|   230k|            auto buf = make_contiguous_buffer(
 3571|   230k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|   230k|            SCN_TRY(result_it,
  ------------------
  |  | 3672|   230k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   230k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   230k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   230k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 17.2k, False: 213k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  17.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  17.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  17.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  17.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  17.2k|    }                                                  \
  |  |  |  | 3671|   230k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   213k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|   213k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|   213k|                                        prefix_result.parsed_base));
 3575|       |
 3576|   213k|            return ranges::next(
 3577|   213k|                prefix_result.iterator,
 3578|   213k|                ranges::distance(buf.view().begin(), result_it));
 3579|   230k|        }
 3580|       |
 3581|  60.4k|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|  60.4k|            localized_number_formatting_options<CharT>{loc};
 3586|  60.4k|#endif
 3587|       |
 3588|  60.4k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|  60.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  60.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  60.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  60.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.11k, False: 58.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.11k|    }                                                  \
  |  |  |  | 3671|  60.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  58.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|  58.3k|                parse_integer_digits_with_thsep(
 3590|  58.3k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|  58.3k|                    prefix_result.parsed_base, locale_options));
 3592|  58.3k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|  58.3k|            parse_digits_result;
 3594|       |
 3595|  58.3k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 864, False: 57.5k]
  ------------------
 3596|    864|            if (auto e = check_thsep_grouping(
 3597|    864|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|    864|                    thsep_indices, locale_options.grouping);
 3599|    864|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    864|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 470, False: 394]
  |  |  ------------------
  ------------------
 3600|    470|                return unexpected(e);
 3601|    470|            }
 3602|    864|        }
 3603|       |
 3604|  57.9k|        auto nothsep_source_view =
 3605|  57.9k|            std::basic_string_view<CharT>{nothsep_source};
 3606|  57.9k|        SCN_TRY(
  ------------------
  |  | 3672|  57.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  57.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  57.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  57.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 794, False: 57.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    794|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    794|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    794|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    794|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    794|    }                                                  \
  |  |  |  | 3671|  57.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  57.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|  57.1k|            nothsep_source_it,
 3608|  57.1k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|  57.1k|                                prefix_result.parsed_base));
 3610|       |
 3611|  57.1k|        return ranges::next(
 3612|  57.1k|            prefix_result.iterator,
 3613|  57.1k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|  57.1k|                ranges::ssize(thsep_indices));
 3615|  57.9k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6192|   331k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|       |                          basic_contiguous_scan_context<char_type>>) {
 6197|       |            auto rd = make_reader<T, char_type>();
 6198|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|       |                return unexpected(e);
 6200|       |            }
 6201|       |
 6202|       |            return impl(rd, range, value);
 6203|       |        }
 6204|   331k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   331k|            auto rd = make_reader<T, char_type>();
 6206|   331k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   331k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 331k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   331k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 331k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   331k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   331k|                return impl(rd, range, value);
 6213|   331k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   331k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   331k|    {
 6124|   331k|        const bool need_skipped_width =
 6125|   331k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 331k]
  |  Branch (6125:33): [True: 0, False: 331k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   331k|        auto it = rng.begin();
 6129|   331k|        std::ptrdiff_t prefix_width = 0;
 6130|   331k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 331k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   331k|        else {
 6138|   331k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   331k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   331k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   331k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   331k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.91k, False: 326k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.91k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.91k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.91k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.91k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.91k|    }                                                  \
  |  |  |  | 3671|   331k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   326k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   326k|            std::tie(it, prefix_width) = prefix_result;
 6140|   326k|        }
 6141|   326k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   326k|        std::ptrdiff_t value_width = 0;
 6145|   326k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 326k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   326k|        else {
 6161|   326k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   326k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   326k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   326k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 20.1k, False: 306k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  20.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  20.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  20.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  20.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  20.1k|    }                                                  \
  |  | 3671|   326k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   326k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   306k|                                             specs, value, loc));
 6163|       |
 6164|   306k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 306k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   306k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   306k|        std::ptrdiff_t postfix_width = 0;
 6173|   306k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 303k, False: 3.38k]
  ------------------
 6174|   303k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   303k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   303k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   303k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   303k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 303k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   303k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   303k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   303k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   303k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   303k|                                 value_width));
 6178|   303k|            std::tie(it, postfix_width) = postfix_result;
 6179|   303k|        }
 6180|       |
 6181|   306k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   306k|                                                 value_width, postfix_width);
 6183|   306k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 306k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   306k|        return it;
 6188|   306k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3538|   326k|    {
 3539|   326k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|   326k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   326k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   326k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   326k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 326k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   326k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   326k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|   326k|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|   326k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 26.9k, False: 300k]
  ------------------
 3543|       |            if constexpr (!std::is_signed_v<T>) {
 3544|       |                return unexpected_scan_error(
 3545|       |                    scan_error::invalid_scanned_value,
 3546|       |                    "Unexpected '-' sign when parsing an "
 3547|       |                    "unsigned value");
 3548|       |            }
 3549|  26.9k|            else {
 3550|  26.9k|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 26.9k]
  ------------------
 3551|  26.9k|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|  26.9k|            }
 3557|  26.9k|        }
 3558|       |
 3559|   326k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 28.5k, False: 298k]
  ------------------
 3560|  28.5k|            value = T{0};
 3561|  28.5k|            return std::next(prefix_result.iterator);
 3562|  28.5k|        }
 3563|       |
 3564|   298k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|   298k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 236k, False: 61.7k]
  |  |  ------------------
  ------------------
 3565|   236k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|   236k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   236k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   236k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   236k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14.8k, False: 221k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  14.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  14.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  14.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  14.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  14.8k|    }                                                  \
  |  |  |  | 3671|   236k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   221k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|   221k|                    parse_integer_digits_without_thsep(
 3567|   221k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|   221k|                        prefix_result.parsed_base));
 3569|       |
 3570|   221k|            auto buf = make_contiguous_buffer(
 3571|   221k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|   221k|            SCN_TRY(result_it,
  ------------------
  |  | 3672|   221k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   221k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   221k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   221k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.01k, False: 219k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.01k|    }                                                  \
  |  |  |  | 3671|   221k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   219k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|   219k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|   219k|                                        prefix_result.parsed_base));
 3575|       |
 3576|   219k|            return ranges::next(
 3577|   219k|                prefix_result.iterator,
 3578|   219k|                ranges::distance(buf.view().begin(), result_it));
 3579|   221k|        }
 3580|       |
 3581|  61.7k|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|  61.7k|            localized_number_formatting_options<CharT>{loc};
 3586|  61.7k|#endif
 3587|       |
 3588|  61.7k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|  61.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  61.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  61.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  61.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.18k, False: 59.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.18k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.18k|    }                                                  \
  |  |  |  | 3671|  61.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  59.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|  59.5k|                parse_integer_digits_with_thsep(
 3590|  59.5k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|  59.5k|                    prefix_result.parsed_base, locale_options));
 3592|  59.5k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|  59.5k|            parse_digits_result;
 3594|       |
 3595|  59.5k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 928, False: 58.5k]
  ------------------
 3596|    928|            if (auto e = check_thsep_grouping(
 3597|    928|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|    928|                    thsep_indices, locale_options.grouping);
 3599|    928|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    928|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 532, False: 396]
  |  |  ------------------
  ------------------
 3600|    532|                return unexpected(e);
 3601|    532|            }
 3602|    928|        }
 3603|       |
 3604|  58.9k|        auto nothsep_source_view =
 3605|  58.9k|            std::basic_string_view<CharT>{nothsep_source};
 3606|  58.9k|        SCN_TRY(
  ------------------
  |  | 3672|  58.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  58.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  58.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  58.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 494, False: 58.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    494|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    494|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    494|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    494|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    494|    }                                                  \
  |  |  |  | 3671|  58.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  58.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|  58.4k|            nothsep_source_it,
 3608|  58.4k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|  58.4k|                                prefix_result.parsed_base));
 3610|       |
 3611|  58.4k|        return ranges::next(
 3612|  58.4k|            prefix_result.iterator,
 3613|  58.4k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|  58.4k|                ranges::ssize(thsep_indices));
 3615|  58.9k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|   325k|    {
 3539|   325k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|   325k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   325k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   325k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   325k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 325k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   325k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   325k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|   325k|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|   325k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 26.9k, False: 298k]
  ------------------
 3543|       |            if constexpr (!std::is_signed_v<T>) {
 3544|       |                return unexpected_scan_error(
 3545|       |                    scan_error::invalid_scanned_value,
 3546|       |                    "Unexpected '-' sign when parsing an "
 3547|       |                    "unsigned value");
 3548|       |            }
 3549|  26.9k|            else {
 3550|  26.9k|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 26.9k]
  ------------------
 3551|  26.9k|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|  26.9k|            }
 3557|  26.9k|        }
 3558|       |
 3559|   325k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 28.1k, False: 297k]
  ------------------
 3560|  28.1k|            value = T{0};
 3561|  28.1k|            return std::next(prefix_result.iterator);
 3562|  28.1k|        }
 3563|       |
 3564|   297k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|   297k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 235k, False: 61.5k]
  |  |  ------------------
  ------------------
 3565|   235k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|   235k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   235k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   235k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   235k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 354, False: 235k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    354|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    354|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    354|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    354|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    354|    }                                                  \
  |  |  |  | 3671|   235k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   235k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|   235k|                    parse_integer_digits_without_thsep(
 3567|   235k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|   235k|                        prefix_result.parsed_base));
 3569|       |
 3570|   235k|            auto buf = make_contiguous_buffer(
 3571|   235k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|   235k|            SCN_TRY(result_it,
  ------------------
  |  | 3672|   235k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   235k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   235k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   235k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16.8k, False: 218k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  16.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  16.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  16.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  16.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  16.8k|    }                                                  \
  |  |  |  | 3671|   235k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   218k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|   218k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|   218k|                                        prefix_result.parsed_base));
 3575|       |
 3576|   218k|            return ranges::next(
 3577|   218k|                prefix_result.iterator,
 3578|   218k|                ranges::distance(buf.view().begin(), result_it));
 3579|   235k|        }
 3580|       |
 3581|  61.5k|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|  61.5k|            localized_number_formatting_options<CharT>{loc};
 3586|  61.5k|#endif
 3587|       |
 3588|  61.5k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|  61.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  61.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  61.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  61.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.27k, False: 59.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.27k|    }                                                  \
  |  |  |  | 3671|  61.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  59.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|  59.2k|                parse_integer_digits_with_thsep(
 3590|  59.2k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|  59.2k|                    prefix_result.parsed_base, locale_options));
 3592|  59.2k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|  59.2k|            parse_digits_result;
 3594|       |
 3595|  59.2k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 924, False: 58.3k]
  ------------------
 3596|    924|            if (auto e = check_thsep_grouping(
 3597|    924|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|    924|                    thsep_indices, locale_options.grouping);
 3599|    924|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    924|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 528, False: 396]
  |  |  ------------------
  ------------------
 3600|    528|                return unexpected(e);
 3601|    528|            }
 3602|    924|        }
 3603|       |
 3604|  58.7k|        auto nothsep_source_view =
 3605|  58.7k|            std::basic_string_view<CharT>{nothsep_source};
 3606|  58.7k|        SCN_TRY(
  ------------------
  |  | 3672|  58.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  58.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  58.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  58.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 492, False: 58.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    492|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    492|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    492|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    492|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    492|    }                                                  \
  |  |  |  | 3671|  58.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  58.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|  58.2k|            nothsep_source_it,
 3608|  58.2k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|  58.2k|                                prefix_result.parsed_base));
 3610|       |
 3611|  58.2k|        return ranges::next(
 3612|  58.2k|            prefix_result.iterator,
 3613|  58.2k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|  58.2k|                ranges::ssize(thsep_indices));
 3615|  58.7k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6192|   245k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|       |                          basic_contiguous_scan_context<char_type>>) {
 6197|       |            auto rd = make_reader<T, char_type>();
 6198|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|       |                return unexpected(e);
 6200|       |            }
 6201|       |
 6202|       |            return impl(rd, range, value);
 6203|       |        }
 6204|   245k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   245k|            auto rd = make_reader<T, char_type>();
 6206|   245k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   245k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 245k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   245k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 245k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   245k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   245k|                return impl(rd, range, value);
 6213|   245k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   245k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   245k|    {
 6124|   245k|        const bool need_skipped_width =
 6125|   245k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 245k]
  |  Branch (6125:33): [True: 0, False: 245k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   245k|        auto it = rng.begin();
 6129|   245k|        std::ptrdiff_t prefix_width = 0;
 6130|   245k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 245k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   245k|        else {
 6138|   245k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   245k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   245k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   245k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   245k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.32k, False: 243k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.32k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.32k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.32k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.32k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.32k|    }                                                  \
  |  |  |  | 3671|   245k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   243k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   243k|            std::tie(it, prefix_width) = prefix_result;
 6140|   243k|        }
 6141|   243k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   243k|        std::ptrdiff_t value_width = 0;
 6145|   243k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 243k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   243k|        else {
 6161|   243k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   243k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   243k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   243k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 22.6k, False: 220k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  22.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  22.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  22.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  22.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  22.6k|    }                                                  \
  |  | 3671|   243k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   243k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   220k|                                             specs, value, loc));
 6163|       |
 6164|   220k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 220k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   220k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   220k|        std::ptrdiff_t postfix_width = 0;
 6173|   220k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 219k, False: 1.54k]
  ------------------
 6174|   219k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   219k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   219k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   219k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   219k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 219k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   219k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   219k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   219k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   219k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   219k|                                 value_width));
 6178|   219k|            std::tie(it, postfix_width) = postfix_result;
 6179|   219k|        }
 6180|       |
 6181|   220k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   220k|                                                 value_width, postfix_width);
 6183|   220k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 220k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   220k|        return it;
 6188|   220k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3538|   243k|    {
 3539|   243k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|   243k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   243k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   243k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   243k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 243k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   243k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   243k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|   243k|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|   243k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 8.47k, False: 234k]
  ------------------
 3543|  8.47k|            if constexpr (!std::is_signed_v<T>) {
 3544|  8.47k|                return unexpected_scan_error(
 3545|  8.47k|                    scan_error::invalid_scanned_value,
 3546|  8.47k|                    "Unexpected '-' sign when parsing an "
 3547|  8.47k|                    "unsigned value");
 3548|       |            }
 3549|       |            else {
 3550|       |                if (specs.type ==
 3551|       |                    detail::presentation_type::int_unsigned_decimal) {
 3552|       |                    return unexpected_scan_error(
 3553|       |                        scan_error::invalid_scanned_value,
 3554|       |                        "'u'-option disallows negative values");
 3555|       |                }
 3556|       |            }
 3557|  8.47k|        }
 3558|       |
 3559|   243k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 24.3k, False: 219k]
  ------------------
 3560|  24.3k|            value = T{0};
 3561|  24.3k|            return std::next(prefix_result.iterator);
 3562|  24.3k|        }
 3563|       |
 3564|   219k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|   219k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 165k, False: 53.8k]
  |  |  ------------------
  ------------------
 3565|   165k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|   165k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   165k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   165k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   165k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8.57k, False: 156k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  8.57k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  8.57k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  8.57k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  8.57k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  8.57k|    }                                                  \
  |  |  |  | 3671|   165k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   156k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|   156k|                    parse_integer_digits_without_thsep(
 3567|   156k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|   156k|                        prefix_result.parsed_base));
 3569|       |
 3570|   156k|            auto buf = make_contiguous_buffer(
 3571|   156k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|   156k|            SCN_TRY(result_it,
  ------------------
  |  | 3672|   156k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   156k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   156k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.46k, False: 153k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.46k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.46k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.46k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.46k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.46k|    }                                                  \
  |  |  |  | 3671|   156k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   153k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|   153k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|   153k|                                        prefix_result.parsed_base));
 3575|       |
 3576|   153k|            return ranges::next(
 3577|   153k|                prefix_result.iterator,
 3578|   153k|                ranges::distance(buf.view().begin(), result_it));
 3579|   156k|        }
 3580|       |
 3581|  53.8k|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|  53.8k|            localized_number_formatting_options<CharT>{loc};
 3586|  53.8k|#endif
 3587|       |
 3588|  53.8k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|  53.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  53.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  53.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  53.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.10k, False: 52.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.10k|    }                                                  \
  |  |  |  | 3671|  53.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  52.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|  52.7k|                parse_integer_digits_with_thsep(
 3590|  52.7k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|  52.7k|                    prefix_result.parsed_base, locale_options));
 3592|  52.7k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|  52.7k|            parse_digits_result;
 3594|       |
 3595|  52.7k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 606, False: 52.1k]
  ------------------
 3596|    606|            if (auto e = check_thsep_grouping(
 3597|    606|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|    606|                    thsep_indices, locale_options.grouping);
 3599|    606|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    606|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 230, False: 376]
  |  |  ------------------
  ------------------
 3600|    230|                return unexpected(e);
 3601|    230|            }
 3602|    606|        }
 3603|       |
 3604|  52.5k|        auto nothsep_source_view =
 3605|  52.5k|            std::basic_string_view<CharT>{nothsep_source};
 3606|  52.5k|        SCN_TRY(
  ------------------
  |  | 3672|  52.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  52.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  52.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  52.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 846, False: 51.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    846|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    846|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    846|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    846|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    846|    }                                                  \
  |  |  |  | 3671|  52.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  51.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|  51.6k|            nothsep_source_it,
 3608|  51.6k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|  51.6k|                                prefix_result.parsed_base));
 3610|       |
 3611|  51.6k|        return ranges::next(
 3612|  51.6k|            prefix_result.iterator,
 3613|  51.6k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|  51.6k|                ranges::ssize(thsep_indices));
 3615|  52.5k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|   242k|    {
 3539|   242k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|   242k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   242k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   242k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   242k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 242k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   242k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   242k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|   242k|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|   242k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 8.46k, False: 234k]
  ------------------
 3543|  8.46k|            if constexpr (!std::is_signed_v<T>) {
 3544|  8.46k|                return unexpected_scan_error(
 3545|  8.46k|                    scan_error::invalid_scanned_value,
 3546|  8.46k|                    "Unexpected '-' sign when parsing an "
 3547|  8.46k|                    "unsigned value");
 3548|       |            }
 3549|       |            else {
 3550|       |                if (specs.type ==
 3551|       |                    detail::presentation_type::int_unsigned_decimal) {
 3552|       |                    return unexpected_scan_error(
 3553|       |                        scan_error::invalid_scanned_value,
 3554|       |                        "'u'-option disallows negative values");
 3555|       |                }
 3556|       |            }
 3557|  8.46k|        }
 3558|       |
 3559|   242k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 24.1k, False: 218k]
  ------------------
 3560|  24.1k|            value = T{0};
 3561|  24.1k|            return std::next(prefix_result.iterator);
 3562|  24.1k|        }
 3563|       |
 3564|   218k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|   218k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 164k, False: 53.7k]
  |  |  ------------------
  ------------------
 3565|   164k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|   164k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   164k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   164k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   164k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 38, False: 164k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     38|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     38|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     38|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     38|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     38|    }                                                  \
  |  |  |  | 3671|   164k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   164k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|   164k|                    parse_integer_digits_without_thsep(
 3567|   164k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|   164k|                        prefix_result.parsed_base));
 3569|       |
 3570|   164k|            auto buf = make_contiguous_buffer(
 3571|   164k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|   164k|            SCN_TRY(result_it,
  ------------------
  |  | 3672|   164k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   164k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   164k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   164k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12.2k, False: 152k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  12.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  12.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  12.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  12.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  12.2k|    }                                                  \
  |  |  |  | 3671|   164k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   152k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|   152k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|   152k|                                        prefix_result.parsed_base));
 3575|       |
 3576|   152k|            return ranges::next(
 3577|   152k|                prefix_result.iterator,
 3578|   152k|                ranges::distance(buf.view().begin(), result_it));
 3579|   164k|        }
 3580|       |
 3581|  53.7k|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|  53.7k|            localized_number_formatting_options<CharT>{loc};
 3586|  53.7k|#endif
 3587|       |
 3588|  53.7k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|  53.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  53.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  53.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  53.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.17k, False: 52.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.17k|    }                                                  \
  |  |  |  | 3671|  53.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  52.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|  52.5k|                parse_integer_digits_with_thsep(
 3590|  52.5k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|  52.5k|                    prefix_result.parsed_base, locale_options));
 3592|  52.5k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|  52.5k|            parse_digits_result;
 3594|       |
 3595|  52.5k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 604, False: 51.9k]
  ------------------
 3596|    604|            if (auto e = check_thsep_grouping(
 3597|    604|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|    604|                    thsep_indices, locale_options.grouping);
 3599|    604|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    604|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 228, False: 376]
  |  |  ------------------
  ------------------
 3600|    228|                return unexpected(e);
 3601|    228|            }
 3602|    604|        }
 3603|       |
 3604|  52.3k|        auto nothsep_source_view =
 3605|  52.3k|            std::basic_string_view<CharT>{nothsep_source};
 3606|  52.3k|        SCN_TRY(
  ------------------
  |  | 3672|  52.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  52.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  52.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  52.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 838, False: 51.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    838|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    838|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    838|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    838|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    838|    }                                                  \
  |  |  |  | 3671|  52.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  51.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|  51.4k|            nothsep_source_it,
 3608|  51.4k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|  51.4k|                                prefix_result.parsed_base));
 3610|       |
 3611|  51.4k|        return ranges::next(
 3612|  51.4k|            prefix_result.iterator,
 3613|  51.4k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|  51.4k|                ranges::ssize(thsep_indices));
 3615|  52.3k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6192|   280k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|       |                          basic_contiguous_scan_context<char_type>>) {
 6197|       |            auto rd = make_reader<T, char_type>();
 6198|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|       |                return unexpected(e);
 6200|       |            }
 6201|       |
 6202|       |            return impl(rd, range, value);
 6203|       |        }
 6204|   280k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   280k|            auto rd = make_reader<T, char_type>();
 6206|   280k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   280k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 280k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   280k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 280k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   280k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   280k|                return impl(rd, range, value);
 6213|   280k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   280k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   280k|    {
 6124|   280k|        const bool need_skipped_width =
 6125|   280k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 280k]
  |  Branch (6125:33): [True: 0, False: 280k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   280k|        auto it = rng.begin();
 6129|   280k|        std::ptrdiff_t prefix_width = 0;
 6130|   280k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 280k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   280k|        else {
 6138|   280k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   280k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   280k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   280k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   280k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.16k, False: 276k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.16k|    }                                                  \
  |  |  |  | 3671|   280k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   276k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   276k|            std::tie(it, prefix_width) = prefix_result;
 6140|   276k|        }
 6141|   276k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   276k|        std::ptrdiff_t value_width = 0;
 6145|   276k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 276k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   276k|        else {
 6161|   276k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   276k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   276k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   276k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 21.8k, False: 255k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  21.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  21.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  21.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  21.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  21.8k|    }                                                  \
  |  | 3671|   276k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   276k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   255k|                                             specs, value, loc));
 6163|       |
 6164|   255k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 255k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   255k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   255k|        std::ptrdiff_t postfix_width = 0;
 6173|   255k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 252k, False: 2.13k]
  ------------------
 6174|   252k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   252k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   252k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   252k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   252k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 252k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   252k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   252k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   252k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   252k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   252k|                                 value_width));
 6178|   252k|            std::tie(it, postfix_width) = postfix_result;
 6179|   252k|        }
 6180|       |
 6181|   255k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   255k|                                                 value_width, postfix_width);
 6183|   255k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 255k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   255k|        return it;
 6188|   255k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3538|   276k|    {
 3539|   276k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|   276k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   276k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   276k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   276k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 276k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   276k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   276k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|   276k|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|   276k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 8.76k, False: 268k]
  ------------------
 3543|  8.76k|            if constexpr (!std::is_signed_v<T>) {
 3544|  8.76k|                return unexpected_scan_error(
 3545|  8.76k|                    scan_error::invalid_scanned_value,
 3546|  8.76k|                    "Unexpected '-' sign when parsing an "
 3547|  8.76k|                    "unsigned value");
 3548|       |            }
 3549|       |            else {
 3550|       |                if (specs.type ==
 3551|       |                    detail::presentation_type::int_unsigned_decimal) {
 3552|       |                    return unexpected_scan_error(
 3553|       |                        scan_error::invalid_scanned_value,
 3554|       |                        "'u'-option disallows negative values");
 3555|       |                }
 3556|       |            }
 3557|  8.76k|        }
 3558|       |
 3559|   276k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 26.3k, False: 250k]
  ------------------
 3560|  26.3k|            value = T{0};
 3561|  26.3k|            return std::next(prefix_result.iterator);
 3562|  26.3k|        }
 3563|       |
 3564|   250k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|   250k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 191k, False: 59.3k]
  |  |  ------------------
  ------------------
 3565|   191k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|   191k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   191k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   191k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   191k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 9.62k, False: 181k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  9.62k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  9.62k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  9.62k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  9.62k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  9.62k|    }                                                  \
  |  |  |  | 3671|   191k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   181k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|   181k|                    parse_integer_digits_without_thsep(
 3567|   181k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|   181k|                        prefix_result.parsed_base));
 3569|       |
 3570|   181k|            auto buf = make_contiguous_buffer(
 3571|   181k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|   181k|            SCN_TRY(result_it,
  ------------------
  |  | 3672|   181k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   181k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   181k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   181k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.49k, False: 180k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.49k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.49k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.49k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.49k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.49k|    }                                                  \
  |  |  |  | 3671|   181k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   180k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|   180k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|   180k|                                        prefix_result.parsed_base));
 3575|       |
 3576|   180k|            return ranges::next(
 3577|   180k|                prefix_result.iterator,
 3578|   180k|                ranges::distance(buf.view().begin(), result_it));
 3579|   181k|        }
 3580|       |
 3581|  59.3k|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|  59.3k|            localized_number_formatting_options<CharT>{loc};
 3586|  59.3k|#endif
 3587|       |
 3588|  59.3k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|  59.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  59.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  59.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  59.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.33k, False: 58.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.33k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.33k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.33k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.33k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.33k|    }                                                  \
  |  |  |  | 3671|  59.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  58.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|  58.0k|                parse_integer_digits_with_thsep(
 3590|  58.0k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|  58.0k|                    prefix_result.parsed_base, locale_options));
 3592|  58.0k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|  58.0k|            parse_digits_result;
 3594|       |
 3595|  58.0k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 654, False: 57.4k]
  ------------------
 3596|    654|            if (auto e = check_thsep_grouping(
 3597|    654|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|    654|                    thsep_indices, locale_options.grouping);
 3599|    654|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    654|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 278, False: 376]
  |  |  ------------------
  ------------------
 3600|    278|                return unexpected(e);
 3601|    278|            }
 3602|    654|        }
 3603|       |
 3604|  57.7k|        auto nothsep_source_view =
 3605|  57.7k|            std::basic_string_view<CharT>{nothsep_source};
 3606|  57.7k|        SCN_TRY(
  ------------------
  |  | 3672|  57.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  57.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  57.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  57.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 368, False: 57.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    368|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    368|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    368|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    368|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    368|    }                                                  \
  |  |  |  | 3671|  57.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  57.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|  57.4k|            nothsep_source_it,
 3608|  57.4k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|  57.4k|                                prefix_result.parsed_base));
 3610|       |
 3611|  57.4k|        return ranges::next(
 3612|  57.4k|            prefix_result.iterator,
 3613|  57.4k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|  57.4k|                ranges::ssize(thsep_indices));
 3615|  57.7k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|   275k|    {
 3539|   275k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|   275k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   275k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   275k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   275k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 275k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   275k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   275k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|   275k|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|   275k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 8.75k, False: 266k]
  ------------------
 3543|  8.75k|            if constexpr (!std::is_signed_v<T>) {
 3544|  8.75k|                return unexpected_scan_error(
 3545|  8.75k|                    scan_error::invalid_scanned_value,
 3546|  8.75k|                    "Unexpected '-' sign when parsing an "
 3547|  8.75k|                    "unsigned value");
 3548|       |            }
 3549|       |            else {
 3550|       |                if (specs.type ==
 3551|       |                    detail::presentation_type::int_unsigned_decimal) {
 3552|       |                    return unexpected_scan_error(
 3553|       |                        scan_error::invalid_scanned_value,
 3554|       |                        "'u'-option disallows negative values");
 3555|       |                }
 3556|       |            }
 3557|  8.75k|        }
 3558|       |
 3559|   275k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 25.9k, False: 249k]
  ------------------
 3560|  25.9k|            value = T{0};
 3561|  25.9k|            return std::next(prefix_result.iterator);
 3562|  25.9k|        }
 3563|       |
 3564|   249k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|   249k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 190k, False: 59.2k]
  |  |  ------------------
  ------------------
 3565|   190k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|   190k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   190k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   190k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   190k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 40, False: 190k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     40|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     40|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     40|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     40|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     40|    }                                                  \
  |  |  |  | 3671|   190k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   190k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|   190k|                    parse_integer_digits_without_thsep(
 3567|   190k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|   190k|                        prefix_result.parsed_base));
 3569|       |
 3570|   190k|            auto buf = make_contiguous_buffer(
 3571|   190k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|   190k|            SCN_TRY(result_it,
  ------------------
  |  | 3672|   190k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   190k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   190k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   190k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 11.3k, False: 179k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  11.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  11.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  11.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  11.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  11.3k|    }                                                  \
  |  |  |  | 3671|   190k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   179k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|   179k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|   179k|                                        prefix_result.parsed_base));
 3575|       |
 3576|   179k|            return ranges::next(
 3577|   179k|                prefix_result.iterator,
 3578|   179k|                ranges::distance(buf.view().begin(), result_it));
 3579|   190k|        }
 3580|       |
 3581|  59.2k|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|  59.2k|            localized_number_formatting_options<CharT>{loc};
 3586|  59.2k|#endif
 3587|       |
 3588|  59.2k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|  59.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  59.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  59.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  59.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.40k, False: 57.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.40k|    }                                                  \
  |  |  |  | 3671|  59.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  57.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|  57.8k|                parse_integer_digits_with_thsep(
 3590|  57.8k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|  57.8k|                    prefix_result.parsed_base, locale_options));
 3592|  57.8k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|  57.8k|            parse_digits_result;
 3594|       |
 3595|  57.8k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 650, False: 57.1k]
  ------------------
 3596|    650|            if (auto e = check_thsep_grouping(
 3597|    650|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|    650|                    thsep_indices, locale_options.grouping);
 3599|    650|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    650|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 274, False: 376]
  |  |  ------------------
  ------------------
 3600|    274|                return unexpected(e);
 3601|    274|            }
 3602|    650|        }
 3603|       |
 3604|  57.5k|        auto nothsep_source_view =
 3605|  57.5k|            std::basic_string_view<CharT>{nothsep_source};
 3606|  57.5k|        SCN_TRY(
  ------------------
  |  | 3672|  57.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  57.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  57.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  57.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 366, False: 57.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    366|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    366|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    366|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    366|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    366|    }                                                  \
  |  |  |  | 3671|  57.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  57.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|  57.1k|            nothsep_source_it,
 3608|  57.1k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|  57.1k|                                prefix_result.parsed_base));
 3610|       |
 3611|  57.1k|        return ranges::next(
 3612|  57.1k|            prefix_result.iterator,
 3613|  57.1k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|  57.1k|                ranges::ssize(thsep_indices));
 3615|  57.5k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6192|   283k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|       |                          basic_contiguous_scan_context<char_type>>) {
 6197|       |            auto rd = make_reader<T, char_type>();
 6198|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|       |                return unexpected(e);
 6200|       |            }
 6201|       |
 6202|       |            return impl(rd, range, value);
 6203|       |        }
 6204|   283k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   283k|            auto rd = make_reader<T, char_type>();
 6206|   283k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   283k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 283k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   283k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 283k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   283k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   283k|                return impl(rd, range, value);
 6213|   283k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   283k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   283k|    {
 6124|   283k|        const bool need_skipped_width =
 6125|   283k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 283k]
  |  Branch (6125:33): [True: 0, False: 283k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   283k|        auto it = rng.begin();
 6129|   283k|        std::ptrdiff_t prefix_width = 0;
 6130|   283k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 283k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   283k|        else {
 6138|   283k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   283k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   283k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   283k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   283k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.39k, False: 279k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.39k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.39k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.39k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.39k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.39k|    }                                                  \
  |  |  |  | 3671|   283k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   279k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   279k|            std::tie(it, prefix_width) = prefix_result;
 6140|   279k|        }
 6141|   279k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   279k|        std::ptrdiff_t value_width = 0;
 6145|   279k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 279k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   279k|        else {
 6161|   279k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   279k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   279k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   279k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 21.6k, False: 258k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  21.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  21.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  21.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  21.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  21.6k|    }                                                  \
  |  | 3671|   279k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   279k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   258k|                                             specs, value, loc));
 6163|       |
 6164|   258k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 258k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   258k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   258k|        std::ptrdiff_t postfix_width = 0;
 6173|   258k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 255k, False: 2.32k]
  ------------------
 6174|   255k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   255k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   255k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   255k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   255k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 255k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   255k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   255k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   255k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   255k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   255k|                                 value_width));
 6178|   255k|            std::tie(it, postfix_width) = postfix_result;
 6179|   255k|        }
 6180|       |
 6181|   258k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   258k|                                                 value_width, postfix_width);
 6183|   258k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 258k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   258k|        return it;
 6188|   258k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3538|   279k|    {
 3539|   279k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|   279k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   279k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   279k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   279k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 279k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   279k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   279k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|   279k|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|   279k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 8.96k, False: 270k]
  ------------------
 3543|  8.96k|            if constexpr (!std::is_signed_v<T>) {
 3544|  8.96k|                return unexpected_scan_error(
 3545|  8.96k|                    scan_error::invalid_scanned_value,
 3546|  8.96k|                    "Unexpected '-' sign when parsing an "
 3547|  8.96k|                    "unsigned value");
 3548|       |            }
 3549|       |            else {
 3550|       |                if (specs.type ==
 3551|       |                    detail::presentation_type::int_unsigned_decimal) {
 3552|       |                    return unexpected_scan_error(
 3553|       |                        scan_error::invalid_scanned_value,
 3554|       |                        "'u'-option disallows negative values");
 3555|       |                }
 3556|       |            }
 3557|  8.96k|        }
 3558|       |
 3559|   279k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 26.4k, False: 253k]
  ------------------
 3560|  26.4k|            value = T{0};
 3561|  26.4k|            return std::next(prefix_result.iterator);
 3562|  26.4k|        }
 3563|       |
 3564|   253k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|   253k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 193k, False: 60.1k]
  |  |  ------------------
  ------------------
 3565|   193k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|   193k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   193k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   193k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   193k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 9.83k, False: 183k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  9.83k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  9.83k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  9.83k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  9.83k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  9.83k|    }                                                  \
  |  |  |  | 3671|   193k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   183k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|   183k|                    parse_integer_digits_without_thsep(
 3567|   183k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|   183k|                        prefix_result.parsed_base));
 3569|       |
 3570|   183k|            auto buf = make_contiguous_buffer(
 3571|   183k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|   183k|            SCN_TRY(result_it,
  ------------------
  |  | 3672|   183k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   183k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   183k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   183k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 948, False: 182k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    948|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    948|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    948|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    948|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    948|    }                                                  \
  |  |  |  | 3671|   183k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   182k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|   182k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|   182k|                                        prefix_result.parsed_base));
 3575|       |
 3576|   182k|            return ranges::next(
 3577|   182k|                prefix_result.iterator,
 3578|   182k|                ranges::distance(buf.view().begin(), result_it));
 3579|   183k|        }
 3580|       |
 3581|  60.1k|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|  60.1k|            localized_number_formatting_options<CharT>{loc};
 3586|  60.1k|#endif
 3587|       |
 3588|  60.1k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|  60.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  60.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  60.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  60.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.37k, False: 58.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.37k|    }                                                  \
  |  |  |  | 3671|  60.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  58.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|  58.8k|                parse_integer_digits_with_thsep(
 3590|  58.8k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|  58.8k|                    prefix_result.parsed_base, locale_options));
 3592|  58.8k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|  58.8k|            parse_digits_result;
 3594|       |
 3595|  58.8k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 654, False: 58.1k]
  ------------------
 3596|    654|            if (auto e = check_thsep_grouping(
 3597|    654|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|    654|                    thsep_indices, locale_options.grouping);
 3599|    654|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    654|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 278, False: 376]
  |  |  ------------------
  ------------------
 3600|    278|                return unexpected(e);
 3601|    278|            }
 3602|    654|        }
 3603|       |
 3604|  58.5k|        auto nothsep_source_view =
 3605|  58.5k|            std::basic_string_view<CharT>{nothsep_source};
 3606|  58.5k|        SCN_TRY(
  ------------------
  |  | 3672|  58.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  58.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  58.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  58.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 236, False: 58.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    236|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    236|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    236|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    236|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    236|    }                                                  \
  |  |  |  | 3671|  58.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  58.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|  58.2k|            nothsep_source_it,
 3608|  58.2k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|  58.2k|                                prefix_result.parsed_base));
 3610|       |
 3611|  58.2k|        return ranges::next(
 3612|  58.2k|            prefix_result.iterator,
 3613|  58.2k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|  58.2k|                ranges::ssize(thsep_indices));
 3615|  58.5k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|   278k|    {
 3539|   278k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|   278k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   278k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   278k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   278k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 278k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   278k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   278k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|   278k|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|   278k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 8.94k, False: 269k]
  ------------------
 3543|  8.94k|            if constexpr (!std::is_signed_v<T>) {
 3544|  8.94k|                return unexpected_scan_error(
 3545|  8.94k|                    scan_error::invalid_scanned_value,
 3546|  8.94k|                    "Unexpected '-' sign when parsing an "
 3547|  8.94k|                    "unsigned value");
 3548|       |            }
 3549|       |            else {
 3550|       |                if (specs.type ==
 3551|       |                    detail::presentation_type::int_unsigned_decimal) {
 3552|       |                    return unexpected_scan_error(
 3553|       |                        scan_error::invalid_scanned_value,
 3554|       |                        "'u'-option disallows negative values");
 3555|       |                }
 3556|       |            }
 3557|  8.94k|        }
 3558|       |
 3559|   278k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 26.0k, False: 252k]
  ------------------
 3560|  26.0k|            value = T{0};
 3561|  26.0k|            return std::next(prefix_result.iterator);
 3562|  26.0k|        }
 3563|       |
 3564|   252k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|   252k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 192k, False: 59.9k]
  |  |  ------------------
  ------------------
 3565|   192k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|   192k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   192k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   192k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   192k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 40, False: 192k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     40|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     40|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     40|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     40|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     40|    }                                                  \
  |  |  |  | 3671|   192k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   192k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|   192k|                    parse_integer_digits_without_thsep(
 3567|   192k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|   192k|                        prefix_result.parsed_base));
 3569|       |
 3570|   192k|            auto buf = make_contiguous_buffer(
 3571|   192k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|   192k|            SCN_TRY(result_it,
  ------------------
  |  | 3672|   192k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   192k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   192k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   192k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 11.0k, False: 181k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  11.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  11.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  11.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  11.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  11.0k|    }                                                  \
  |  |  |  | 3671|   192k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   181k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|   181k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|   181k|                                        prefix_result.parsed_base));
 3575|       |
 3576|   181k|            return ranges::next(
 3577|   181k|                prefix_result.iterator,
 3578|   181k|                ranges::distance(buf.view().begin(), result_it));
 3579|   192k|        }
 3580|       |
 3581|  59.9k|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|  59.9k|            localized_number_formatting_options<CharT>{loc};
 3586|  59.9k|#endif
 3587|       |
 3588|  59.9k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|  59.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  59.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  59.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  59.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.45k, False: 58.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.45k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.45k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.45k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.45k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.45k|    }                                                  \
  |  |  |  | 3671|  59.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  58.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|  58.5k|                parse_integer_digits_with_thsep(
 3590|  58.5k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|  58.5k|                    prefix_result.parsed_base, locale_options));
 3592|  58.5k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|  58.5k|            parse_digits_result;
 3594|       |
 3595|  58.5k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 650, False: 57.8k]
  ------------------
 3596|    650|            if (auto e = check_thsep_grouping(
 3597|    650|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|    650|                    thsep_indices, locale_options.grouping);
 3599|    650|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    650|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 274, False: 376]
  |  |  ------------------
  ------------------
 3600|    274|                return unexpected(e);
 3601|    274|            }
 3602|    650|        }
 3603|       |
 3604|  58.2k|        auto nothsep_source_view =
 3605|  58.2k|            std::basic_string_view<CharT>{nothsep_source};
 3606|  58.2k|        SCN_TRY(
  ------------------
  |  | 3672|  58.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  58.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  58.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  58.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 234, False: 58.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    234|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    234|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    234|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    234|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    234|    }                                                  \
  |  |  |  | 3671|  58.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  58.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|  58.0k|            nothsep_source_it,
 3608|  58.0k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|  58.0k|                                prefix_result.parsed_base));
 3610|       |
 3611|  58.0k|        return ranges::next(
 3612|  58.0k|            prefix_result.iterator,
 3613|  58.0k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|  58.0k|                ranges::ssize(thsep_indices));
 3615|  58.2k|    }
_ZN3scn2v34impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1038|  2.20M|{
 1039|       |    if constexpr (ranges::contiguous_range<Range> &&
 1040|       |                  ranges::sized_range<Range>) {
 1041|       |        return r;
 1042|       |    }
 1043|       |    else if constexpr (std::is_same_v<
 1044|       |                           ranges::const_iterator_t<Range>,
 1045|       |                           typename detail::basic_scan_buffer<
 1046|  2.20M|                               detail::char_t<Range>>::forward_iterator>) {
 1047|       |        if constexpr (ranges::common_range<Range>) {
 1048|       |            auto seg = r.begin().contiguous_segment();
 1049|       |            auto dist =
 1050|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|       |            return seg.substr(0, std::min(seg.size(), dist));
 1052|       |        }
 1053|  2.20M|        else {
 1054|  2.20M|            return r.begin().contiguous_segment();
 1055|  2.20M|        }
 1056|       |    }
 1057|       |    else {
 1058|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1059|       |    }
 1060|  2.20M|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|  2.12M|{
 2061|  2.12M|    auto it = range.begin();
 2062|  4.41M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 4.39M, False: 22.2k]
  ------------------
 2063|  4.39M|        const auto val =
 2064|  4.39M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  4.39M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  4.39M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.38M, False: 4.07k]
  |  |  ------------------
  ------------------
 2066|  4.38M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  4.38M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  4.38M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 2.10M, False: 2.28M]
  ------------------
 2069|  2.10M|                return it;
 2070|  2.10M|            }
 2071|  4.38M|        }
 2072|  2.28M|        it = val.iterator;
 2073|  2.28M|    }
 2074|       |
 2075|  22.2k|    return it;
 2076|  2.12M|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|  4.39M|{
 1899|  4.39M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  4.39M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.39M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  4.39M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  4.39M|    auto it = range.begin();
 1903|  4.39M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  4.39M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  4.39M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.07k, False: 4.38M]
  |  |  ------------------
  ------------------
 1906|  4.07k|        ++it;
 1907|  4.07k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  4.07k|        return {it, {}};
 1909|  4.07k|    }
 1910|       |
 1911|  4.38M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 4.37M, False: 17.7k]
  ------------------
 1912|  4.37M|        ++it;
 1913|  4.37M|        return {it, string_type(1, *range.begin())};
 1914|  4.37M|    }
 1915|       |
 1916|  17.7k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  17.7k|    return {it, string_type{range.begin(), it}};
 1918|  4.38M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1154|  4.07k|{
 1155|  4.07k|    auto it = input.begin();
 1156|  28.3k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 27.3k, False: 1.07k]
  ------------------
 1157|  27.3k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 3.00k, False: 24.3k]
  ------------------
 1158|  3.00k|            break;
 1159|  3.00k|        }
 1160|  27.3k|    }
 1161|  4.07k|    return it;
 1162|  4.07k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  17.7k|    {
  283|  17.7k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  17.7k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  17.7k|    {
  252|  17.7k|        constexpr iter_difference_t<I> zero{0};
  253|  17.7k|        iter_difference_t<I> counter{0};
  254|       |
  255|  60.7k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 45.2k, False: 15.5k]
  |  Branch (255:30): [True: 43.0k, False: 2.20k]
  ------------------
  256|  43.0k|            ++i;
  257|  43.0k|            ++counter;
  258|  43.0k|        }
  259|       |
  260|  17.7k|        return counter;
  261|  17.7k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1889|  4.39M|    {
 1890|  4.39M|        return !codepoint.empty();
 1891|  4.39M|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|  2.12M|{
 2082|  2.12M|    return read_until_code_point(range, std::not_fn(pred));
 2083|  2.12M|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|  2.20M|{
 2951|  2.20M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 2.20M, False: 0]
  ------------------
 2952|  2.20M|        auto it = read_while_classic_space(range);
 2953|  2.20M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  2.20M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.20M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22.2k, False: 2.18M]
  |  |  ------------------
  ------------------
 2955|  22.2k|            return unexpected(e);
 2956|  22.2k|        }
 2957|       |
 2958|  2.18M|        return it;
 2959|  2.20M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  2.20M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|  2.20M|{
 2117|       |    if constexpr (ranges::contiguous_range<Range> &&
 2118|       |                  ranges::sized_range<Range> &&
 2119|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2120|       |        auto buf = make_contiguous_buffer(range);
 2121|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|       |        return ranges::next(range.begin(),
 2123|       |                            ranges::distance(buf.view().begin(), it));
 2124|       |    }
 2125|  2.20M|    else {
 2126|  2.20M|        auto it = range.begin();
 2127|       |
 2128|  2.20M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|  2.20M|            auto seg = get_contiguous_beginning(range);
 2130|  2.20M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  2.20M|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 74.8k, False: 2.12M]
  ------------------
 2132|  74.8k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  74.8k|            }
 2134|  2.12M|            ranges::advance(it, seg.size());
 2135|  2.12M|        }
 2136|       |
 2137|      0|        return read_while_code_point(
 2138|  2.20M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  2.20M|    }
 2140|  2.20M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|  2.12M|        : m_fptr([](storage fn,
  743|  2.12M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.12M|              cvref<T> obj = *get<T>(fn);
  745|  2.12M|              if constexpr (std::is_void_v<R>) {
  746|  2.12M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.12M|              }
  748|  2.12M|              else {
  749|  2.12M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.12M|              }
  751|  2.12M|          }),
  752|  2.12M|          m_storage(std::addressof(f))
  753|  2.12M|    {
  754|  2.12M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  4.38M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.38M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  4.38M|              else {
  749|  4.38M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.38M|              }
  751|  4.38M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  4.38M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  4.38M|        else if constexpr (std::is_object_v<T>) {
  688|  4.38M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  4.38M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|  4.38M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  2.12M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.12M|        {
  662|  2.12M|        }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|   379k|{
  981|       |    if constexpr (ranges::contiguous_range<Range> &&
  982|       |                  ranges::sized_range<Range>) {
  983|       |        return true;
  984|       |    }
  985|       |    else if constexpr (std::is_same_v<
  986|       |                           ranges::const_iterator_t<Range>,
  987|       |                           typename detail::basic_scan_buffer<
  988|   379k|                               detail::char_t<Range>>::forward_iterator>) {
  989|   379k|        auto beg = r.begin();
  990|   379k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 379k, False: 0]
  ------------------
  991|   379k|            return false;
  992|   379k|        }
  993|       |        if constexpr (ranges::common_range<Range>) {
  994|       |            return beg.contiguous_segment().end() ==
  995|       |                   ranges::end(r).contiguous_segment().end();
  996|       |        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|       |    }
 1005|       |    else {
 1006|       |        return false;
 1007|       |    }
 1008|   379k|}
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|   673k|    {
  763|   673k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   673k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   673k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1856|   301k|{
 1857|   301k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|   301k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   301k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|       |    if constexpr (ranges::sized_range<Range>) {
 1860|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|       |        if (sz < count) {
 1862|       |            return unexpected(eof_error::eof);
 1863|       |        }
 1864|       |
 1865|       |        return ranges::next(range.begin(), count);
 1866|       |    }
 1867|   301k|    else {
 1868|   301k|        auto it = range.begin();
 1869|   301k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 269k, False: 31.8k]
  ------------------
 1870|   269k|            return ranges::next(it, count);
 1871|   269k|        }
 1872|       |
 1873|  64.1k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 63.3k, False: 718]
  ------------------
 1874|  63.3k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 31.1k, False: 32.2k]
  ------------------
 1875|  31.1k|                return unexpected(eof_error::eof);
 1876|  31.1k|            }
 1877|  63.3k|        }
 1878|       |
 1879|    718|        return it;
 1880|  31.8k|    }
 1881|   301k|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|   301k|{
 1095|       |    if constexpr (ranges::sized_range<Range>) {
 1096|       |        return r.size();
 1097|       |    }
 1098|       |    else if constexpr (std::is_same_v<
 1099|       |                           ranges::const_iterator_t<Range>,
 1100|       |                           typename detail::basic_scan_buffer<
 1101|   301k|                               detail::char_t<Range>>::forward_iterator>) {
 1102|       |        if constexpr (ranges::common_range<Range>) {
 1103|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|       |        }
 1105|   301k|        else {
 1106|   301k|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 301k, False: 0]
  ------------------
 1107|   301k|                return static_cast<size_t>(
 1108|   301k|                    r.begin().parent()->chars_available() -
 1109|   301k|                    r.begin().position());
 1110|   301k|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|   301k|        }
 1113|       |    }
 1114|       |    else {
 1115|       |        return 0;
 1116|       |    }
 1117|   301k|}
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|   325k|        : m_fptr([](storage fn,
  743|   325k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   325k|              cvref<T> obj = *get<T>(fn);
  745|   325k|              if constexpr (std::is_void_v<R>) {
  746|   325k|                  obj(static_cast<decltype(args)>(args)...);
  747|   325k|              }
  748|   325k|              else {
  749|   325k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   325k|              }
  751|   325k|          }),
  752|   325k|          m_storage(std::addressof(f))
  753|   325k|    {
  754|   325k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|   336k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   336k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   336k|              else {
  749|   336k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   336k|              }
  751|   336k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|   336k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   336k|        else if constexpr (std::is_object_v<T>) {
  688|   336k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   336k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|   325k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   325k|        {
  662|   325k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6036|   303k|    {
 6037|   303k|        const bool need_skipped_width =
 6038|   303k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 303k]
  |  Branch (6038:33): [True: 0, False: 303k]
  ------------------
 6039|   303k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   303k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 303k]
  ------------------
 6043|   303k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 303k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   303k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 303k, False: 0]
  |  Branch (6047:56): [True: 303k, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   303k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 303k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|   604k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|   303k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   303k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   303k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   303k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.89k, False: 301k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.89k|    }                                                  \
  |  |  |  | 3671|   303k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   301k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|   604k|                            make_eof_scan_error));
 6058|       |
 6059|   604k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 301k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   301k|            return result_type{it, 0};
 6067|   604k|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|   303k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|   325k|{
 1976|   325k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|   325k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|   325k|{
 1957|       |    if constexpr (ranges::common_range<Range>) {
 1958|       |        return std::find_if(range.begin(), range.end(), pred);
 1959|       |    }
 1960|   325k|    else {
 1961|   325k|        auto first = range.begin();
 1962|   338k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 336k, False: 1.14k]
  ------------------
 1963|   336k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 324k, False: 12.4k]
  ------------------
 1964|   324k|                return first;
 1965|   324k|            }
 1966|   336k|        }
 1967|  1.14k|        return first;
 1968|   325k|    }
 1969|   325k|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   102M|    {
  108|   102M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   102M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   102M|    {
   94|   102M|        iter_difference_t<I> counter{0};
   95|   210G|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 209G, False: 102M]
  ------------------
   96|   209G|            ++i;
   97|   209G|            ++counter;
   98|   209G|        }
   99|   102M|        return counter;
  100|   102M|    }
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1779|   100k|    {
 1780|   100k|        auto stdloc = loc.get<std::locale>();
 1781|   100k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|   100k|        grouping = numpunct.grouping();
 1783|   100k|        thousands_sep =
 1784|   100k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 100k]
  ------------------
 1785|   100k|        decimal_point = numpunct.decimal_point();
 1786|   100k|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1716|   100k|{
 1717|   100k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 100k, False: 0]
  ------------------
 1718|   100k|        return std::use_facet<Facet>(stdloc);
 1719|   100k|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|   100k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1845|   477k|{
 1846|   477k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   477k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 120, False: 477k]
  |  |  ------------------
  ------------------
 1847|    120|        return unexpected(e);
 1848|    120|    }
 1849|       |
 1850|   477k|    return ranges::next(range.begin());
 1851|   477k|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|   932k|{
  950|   932k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   932k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.49k, False: 930k]
  |  |  ------------------
  ------------------
  951|  2.49k|        return eof_error::eof;
  952|  2.49k|    }
  953|   930k|    return eof_error::good;
  954|   932k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  1.31M|{
  944|  1.31M|    return is_range_eof(r.begin(), r.end());
  945|  1.31M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  1.31M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  1.31M|    {
  937|  1.31M|        return begin == end;
  938|  1.31M|    }
  939|  1.31M|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|   477k|    {
  296|   477k|        ++x;
  297|   477k|        return x;
  298|   477k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3538|  50.2k|    {
 3539|  50.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|  50.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  50.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  50.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  50.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 50.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  50.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  50.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|  50.2k|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|  50.2k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 276, False: 49.9k]
  ------------------
 3543|       |            if constexpr (!std::is_signed_v<T>) {
 3544|       |                return unexpected_scan_error(
 3545|       |                    scan_error::invalid_scanned_value,
 3546|       |                    "Unexpected '-' sign when parsing an "
 3547|       |                    "unsigned value");
 3548|       |            }
 3549|    276|            else {
 3550|    276|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 276]
  ------------------
 3551|    276|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|    276|            }
 3557|    276|        }
 3558|       |
 3559|  50.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 52, False: 50.2k]
  ------------------
 3560|     52|            value = T{0};
 3561|     52|            return std::next(prefix_result.iterator);
 3562|     52|        }
 3563|       |
 3564|  50.2k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  50.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 41.8k, False: 8.37k]
  |  |  ------------------
  ------------------
 3565|  41.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|  41.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  41.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  41.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  41.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 41.3k, False: 484]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  41.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  41.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  41.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  41.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  41.3k|    }                                                  \
  |  |  |  | 3671|  41.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    484|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    484|                    parse_integer_digits_without_thsep(
 3567|    484|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    484|                        prefix_result.parsed_base));
 3569|       |
 3570|    484|            auto buf = make_contiguous_buffer(
 3571|    484|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    484|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    484|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    484|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    484|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    484|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 56, False: 428]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     56|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     56|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     56|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     56|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     56|    }                                                  \
  |  |  |  | 3671|    484|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    428|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|    428|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|    428|                                        prefix_result.parsed_base));
 3575|       |
 3576|    428|            return ranges::next(
 3577|    428|                prefix_result.iterator,
 3578|    428|                ranges::distance(buf.view().begin(), result_it));
 3579|    484|        }
 3580|       |
 3581|  8.37k|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|  8.37k|            localized_number_formatting_options<CharT>{loc};
 3586|  8.37k|#endif
 3587|       |
 3588|  8.37k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|  8.37k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  8.37k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  8.37k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8.23k, False: 138]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  8.23k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  8.23k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  8.23k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  8.23k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  8.23k|    }                                                  \
  |  |  |  | 3671|  8.37k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    138|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|    138|                parse_integer_digits_with_thsep(
 3590|    138|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|    138|                    prefix_result.parsed_base, locale_options));
 3592|    138|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|    138|            parse_digits_result;
 3594|       |
 3595|    138|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 26, False: 112]
  ------------------
 3596|     26|            if (auto e = check_thsep_grouping(
 3597|     26|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|     26|                    thsep_indices, locale_options.grouping);
 3599|     26|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26, False: 0]
  |  |  ------------------
  ------------------
 3600|     26|                return unexpected(e);
 3601|     26|            }
 3602|     26|        }
 3603|       |
 3604|    112|        auto nothsep_source_view =
 3605|    112|            std::basic_string_view<CharT>{nothsep_source};
 3606|    112|        SCN_TRY(
  ------------------
  |  | 3672|    112|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    112|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    112|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    112|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16, False: 96]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     16|    }                                                  \
  |  |  |  | 3671|    112|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     96|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|     96|            nothsep_source_it,
 3608|     96|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|     96|                                prefix_result.parsed_base));
 3610|       |
 3611|     96|        return ranges::next(
 3612|     96|            prefix_result.iterator,
 3613|     96|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|     96|                ranges::ssize(thsep_indices));
 3615|    112|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESH_i:
 3325|   377k|{
 3326|   377k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3672|   377k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   377k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   377k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   377k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 377k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   377k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   377k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|   377k|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|   377k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|   377k|        parse_integer_base_prefix(
 3331|   377k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|   377k|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 404, False: 376k]
  ------------------
 3334|    404|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 96, False: 308]
  ------------------
 3335|    404|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 212, False: 96]
  ------------------
 3336|    308|            digits_begin_it = base_prefix_begin_it;
 3337|    308|        }
 3338|     96|        else {
 3339|     96|            parsed_zero = false;
 3340|     96|        }
 3341|    404|    }
 3342|   376k|    else {
 3343|   376k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 450, False: 376k]
  ------------------
 3344|   376k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 371k, False: 4.82k]
  ------------------
 3345|   371k|            digits_begin_it = base_prefix_begin_it;
 3346|   371k|        }
 3347|   376k|    }
 3348|       |
 3349|   377k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 374k, False: 2.27k]
  ------------------
 3350|   374k|        sign = sign_type::plus_sign;
 3351|   374k|    }
 3352|   377k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|   377k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|   377k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3140|   377k|{
 3141|   377k|    auto r = read_one_of_code_unit(range, "+-");
 3142|   377k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 374k, False: 2.27k]
  ------------------
 3143|   374k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 374k, False: 0]
  ------------------
 3144|   374k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|   374k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|   374k|    }
 3148|       |
 3149|  2.27k|    auto& it = *r;
 3150|  2.27k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 2.05k, False: 217]
  ------------------
 3151|  2.05k|        return std::pair{it, sign_type::minus_sign};
 3152|  2.05k|    }
 3153|    217|    return std::pair{it, sign_type::plus_sign};
 3154|  2.27k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2271|   377k|{
 2272|   377k|    auto it = read_code_unit(range);
 2273|   377k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   377k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 377k]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|   753k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 753k, False: 374k]
  ------------------
 2278|   753k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 2.27k, False: 751k]
  ------------------
 2279|  2.27k|            return *it;
 2280|  2.27k|        }
 2281|   753k|    }
 2282|       |
 2283|   374k|    return unexpected(parse_error::error);
 2284|   377k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEEibEEESG_i:
 3292|   377k|{
 3293|   377k|    switch (base) {
 3294|  50.0k|        case 2:
  ------------------
  |  Branch (3294:9): [True: 50.0k, False: 327k]
  ------------------
 3295|       |            // allow 0b/0B
 3296|  50.0k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|  50.0k|                    false};
 3298|       |
 3299|  50.1k|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 50.1k, False: 326k]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|  50.1k|            bool zero_parsed = false;
 3302|  50.1k|            auto it = apply_opt(
 3303|  50.1k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|  50.1k|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|  50.3k|        case 16:
  ------------------
  |  Branch (3307:9): [True: 50.3k, False: 326k]
  ------------------
 3308|       |            // allow 0x/0X
 3309|  50.3k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|  50.3k|                    false};
 3311|       |
 3312|  50.3k|        case 0:
  ------------------
  |  Branch (3312:9): [True: 50.3k, False: 326k]
  ------------------
 3313|       |            // detect base
 3314|  50.3k|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|   176k|        default:
  ------------------
  |  Branch (3316:9): [True: 176k, False: 200k]
  ------------------
 3317|       |            // no base prefix allowed
 3318|   176k|            return {range.begin(), base, false};
 3319|   377k|    }
 3320|   377k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEENS1_14parse_expectedESA_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEE4typeEOSI_SK_:
 2290|   150k|{
 2291|   150k|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 150k, False: 192]
  ------------------
 2292|   150k|        return range.begin();
 2293|   150k|    }
 2294|    192|    return *result;
 2295|   150k|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 3243|   100k|{
 3244|   100k|    return read_matching_string_classic_nocase(range, "0b");
 3245|   100k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2230|   301k|{
 2231|   301k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|       |    if constexpr (ranges::contiguous_range<Range> &&
 2234|       |                  std::is_same_v<char_type, char>) {
 2235|       |        if (range.size() < str.size()) {
 2236|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|       |        }
 2238|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|       |            return unexpected(parse_error::error);
 2240|       |        }
 2241|       |        return ranges::next(range.begin(), str.size());
 2242|       |    }
 2243|   301k|    else {
 2244|   301k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|   301k|            if (ch < 'A' || ch > 'Z') {
 2246|   301k|                return ch;
 2247|   301k|            }
 2248|   301k|            return static_cast<char_type>(ch +
 2249|   301k|                                          static_cast<char_type>('a' - 'A'));
 2250|   301k|        };
 2251|       |
 2252|   301k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|   301k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   301k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   301k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   301k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 31.1k, False: 270k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  31.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  31.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  31.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  31.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  31.1k|    }                                                  \
  |  |  |  | 3671|   301k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   270k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|   270k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|   270k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|   270k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|   270k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 270k, False: 0]
  |  |  ------------------
  ------------------
 2257|   270k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|   270k|                    return ascii_tolower(a) ==
 2259|   270k|                           static_cast<detail::char_t<Range>>(b);
 2260|   270k|                }))) {
 2261|   270k|            return unexpected(parse_error::error);
 2262|   270k|        }
 2263|       |
 2264|      0|        return it;
 2265|   270k|    }
 2266|   301k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlwE_clEw:
 2244|   271k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|   271k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 160k, False: 110k]
  |  Branch (2245:29): [True: 110k, False: 432]
  ------------------
 2246|   271k|                return ch;
 2247|   271k|            }
 2248|    432|            return static_cast<char_type>(ch +
 2249|    432|                                          static_cast<char_type>('a' - 'A'));
 2250|   271k|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 3257|   100k|{
 3258|   100k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 100k]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|   100k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 404, False: 100k]
  ------------------
 3263|    404|        zero_parsed = true;
 3264|    404|        return *r;
 3265|    404|    }
 3266|       |
 3267|   100k|    return unexpected(parse_error::error);
 3268|   100k|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2145|   100k|{
 2146|   100k|    auto it = read_code_unit(range);
 2147|   100k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 120, False: 100k]
  |  |  ------------------
  ------------------
 2148|    120|        return unexpected(make_eof_parse_error(it.error()));
 2149|    120|    }
 2150|       |
 2151|   100k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 100k, False: 404]
  |  |  ------------------
  ------------------
 2152|   100k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|   100k|        return unexpected(parse_error::error);
 2154|   100k|    }
 2155|       |
 2156|    404|    return *it;
 2157|   100k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 3250|   100k|{
 3251|   100k|    return read_matching_string_classic_nocase(range, "0x");
 3252|   100k|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEEibEEESG_:
 3273|  50.3k|{
 3274|  50.3k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 50.3k]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|  50.3k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 50.3k]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|  50.3k|    {
 3281|  50.3k|        bool zero_parsed{false};
 3282|  50.3k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 212, False: 50.1k]
  ------------------
 3283|    212|            return {*r, 8, zero_parsed};
 3284|    212|        }
 3285|  50.3k|    }
 3286|  50.1k|    return {range.begin(), 10, false};
 3287|  50.3k|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_i:
 3359|   325k|{
 3360|   325k|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|       |    if constexpr (ranges::contiguous_range<Range>) {
 3363|       |        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3364|       |            return unexpected_scan_error(
 3365|       |                scan_error::invalid_scanned_value,
 3366|       |                "Failed to parse integer: No digits found");
 3367|       |        }
 3368|       |        return range.end();
 3369|       |    }
 3370|   325k|    else {
 3371|   325k|        return read_while1_code_unit(range,
 3372|   325k|                                     [&](char_type ch) noexcept {
 3373|   325k|                                         return char_to_int(ch) < base;
 3374|   325k|                                     })
 3375|   325k|            .transform_error(map_parse_error_to_scan_error(
 3376|   325k|                scan_error::invalid_scanned_value,
 3377|   325k|                "Failed to parse integer: No digits found"));
 3378|   325k|    }
 3379|   325k|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1995|   325k|{
 1996|   325k|    auto it = read_while_code_unit(range, pred);
 1997|   325k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 321k, False: 3.79k]
  ------------------
 1998|   321k|        return unexpected(parse_error::error);
 1999|   321k|    }
 2000|  3.79k|    return it;
 2001|   325k|}
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlwE_SQ_TnPNSI_9enable_ifIXaaaasr6detailE11is_not_selfISK_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSS_EEvE4typeELPv0EEEOSK_:
  742|   325k|        : m_fptr([](storage fn,
  743|   325k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   325k|              cvref<T> obj = *get<T>(fn);
  745|   325k|              if constexpr (std::is_void_v<R>) {
  746|   325k|                  obj(static_cast<decltype(args)>(args)...);
  747|   325k|              }
  748|   325k|              else {
  749|   325k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   325k|              }
  751|   325k|          }),
  752|   325k|          m_storage(std::addressof(f))
  753|   325k|    {
  754|   325k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlwE_SQ_TnPNSI_9enable_ifIXaaaasr6detailE11is_not_selfISK_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSS_EEvE4typeELPv0EEEOSK_ENKUlNS1_12fnref_detail4base7storageEwE_clES11_w:
  743|   336k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   336k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   336k|              else {
  749|   336k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   336k|              }
  751|   336k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_iEUlwE_EEDaNS3_7storageE:
  683|   336k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   336k|        else if constexpr (std::is_object_v<T>) {
  688|   336k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   336k|    }
_ZZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_iENKUlwE_clEw:
 3372|   336k|                                     [&](char_type ch) noexcept {
 3373|   336k|                                         return char_to_int(ch) < base;
 3374|   336k|                                     })
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlwE_TnPNSI_9enable_ifIXsr3stdE11is_object_vISK_EEvE4typeELPv0EEEPSK_:
  660|   325k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   325k|        {
  662|   325k|        }
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENSE_12basic_stringIT0_NSE_11char_traitsISN_EENSE_9allocatorISN_EEEENSM_IcNSO_IcEENSQ_IcEEEEEEEEESH_iRKNS1_35localized_number_formatting_optionsISN_EE:
 3389|  50.1k|{
 3390|  50.1k|    std::basic_string<CharT> output;
 3391|  50.1k|    std::string thsep_indices;
 3392|  50.1k|    auto it = range.begin();
 3393|  50.1k|    bool digit_matched = false;
 3394|   102M|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3394:12): [True: 102M, False: 420]
  ------------------
 3395|   102M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3395:13): [True: 102M, False: 52.3k]
  ------------------
 3396|   102M|            thsep_indices.push_back(
 3397|   102M|                static_cast<char>(ranges::distance(range.begin(), it)));
 3398|   102M|        }
 3399|  52.3k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3399:18): [True: 49.6k, False: 2.65k]
  ------------------
 3400|  49.6k|            break;
 3401|  49.6k|        }
 3402|  2.65k|        else {
 3403|  2.65k|            output.push_back(*it);
 3404|  2.65k|            digit_matched = true;
 3405|  2.65k|        }
 3406|   102M|    }
 3407|  50.1k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|  50.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 49.3k, False: 760]
  |  |  ------------------
  ------------------
 3408|  49.3k|        return unexpected_scan_error(
 3409|  49.3k|            scan_error::invalid_scanned_value,
 3410|  49.3k|            "Failed to parse integer: No digits found");
 3411|  49.3k|    }
 3412|    760|    return std::tuple{it, output, thsep_indices};
 3413|  50.1k|}
_ZN3scn2v34impl20check_thsep_groupingINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_EEEENS0_10scan_errorET_NSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEENSE_17basic_string_viewIcSH_EE:
 3210|    150|{
 3211|    150|    SCN_EXPECT(!thsep_indices.empty());
  ------------------
  |  |  924|    150|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    150|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3212|       |
 3213|    150|    if (!check_thsep_grouping_impl(range, thsep_indices, grouping)) {
  ------------------
  |  Branch (3213:9): [True: 150, False: 0]
  ------------------
 3214|    150|        SCN_UNLIKELY_ATTR
 3215|    150|        return {scan_error::invalid_scanned_value,
 3216|    150|                "Invalid thousands separator grouping"};
 3217|    150|    }
 3218|       |
 3219|      0|    return {};
 3220|    150|}
_ZN3scn2v34impl25check_thsep_grouping_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_EEEEbT_RNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEENSD_17basic_string_viewIcSG_EE:
 3172|    150|{
 3173|    150|    transform_thsep_indices(thsep_indices,
 3174|    150|                            ranges::distance(range.begin(), range.end()));
 3175|       |
 3176|    150|    auto thsep_it = thsep_indices.rbegin();
 3177|    150|    for (auto grouping_it = grouping.begin();
 3178|    150|         grouping_it != grouping.end() && thsep_it != thsep_indices.rend() - 1;
  ------------------
  |  Branch (3178:10): [True: 0, False: 150]
  |  Branch (3178:10): [True: 0, False: 150]
  |  Branch (3178:43): [True: 0, False: 0]
  ------------------
 3179|    150|         ++grouping_it, (void)++thsep_it) {
 3180|      0|        if (*thsep_it != *grouping_it) {
  ------------------
  |  Branch (3180:13): [True: 0, False: 0]
  ------------------
 3181|      0|            return false;
 3182|      0|        }
 3183|      0|    }
 3184|       |
 3185|    150|    SCN_CLANG_PUSH
 3186|       |    // false positive
 3187|    150|    SCN_CLANG_IGNORE("-Wzero-as-null-pointer-constant")
 3188|       |
 3189|  1.21k|    for (; thsep_it < thsep_indices.rend() - 1; ++thsep_it) {
  ------------------
  |  Branch (3189:12): [True: 1.09k, False: 120]
  ------------------
 3190|  1.09k|        if (*thsep_it != grouping.back()) {
  ------------------
  |  Branch (3190:13): [True: 30, False: 1.06k]
  ------------------
 3191|     30|            return false;
 3192|     30|        }
 3193|  1.09k|    }
 3194|       |
 3195|    120|    if (thsep_it == thsep_indices.rend() - 1) {
  ------------------
  |  Branch (3195:9): [True: 120, False: 0]
  ------------------
 3196|    120|        if (*thsep_it > grouping.back()) {
  ------------------
  |  Branch (3196:13): [True: 120, False: 0]
  ------------------
 3197|    120|            return false;
 3198|    120|        }
 3199|    120|    }
 3200|       |
 3201|      0|    SCN_CLANG_POP
 3202|       |
 3203|      0|    return true;
 3204|    120|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_EEEEDaOT_:
 1682|  3.79k|{
 1683|       |    if constexpr (ranges::borrowed_range<Range> &&
 1684|       |                  ranges::contiguous_range<Range> &&
 1685|       |                  ranges::sized_range<Range>) {
 1686|       |        return string_view_wrapper{SCN_FWD(range)};
 1687|       |    }
 1688|  3.79k|    else {
 1689|  3.79k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|  3.79k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1690|  3.79k|    }
 1691|  3.79k|}
_ZN3scn2v34impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1536|  3.79k|    {
 1537|  3.79k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  3.79k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1538|  3.79k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1620|  3.79k|    {
 1621|  3.79k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|       |        if constexpr (ranges::borrowed_range<Range> &&
 1624|       |                      ranges::contiguous_range<Range> &&
 1625|       |                      ranges::sized_range<Range>) {
 1626|       |            m_storage.reset();
 1627|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1628|       |        }
 1629|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|       |                                          std::basic_string<CharT>>) {
 1631|       |            m_storage.emplace(SCN_FWD(range));
 1632|       |            m_view = string_view_type{*m_storage};
 1633|       |        }
 1634|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|       |                                          typename detail::basic_scan_buffer<
 1636|       |                                              value_t>::forward_iterator> &&
 1637|  3.79k|                           ranges::common_range<Range>) {
 1638|  3.79k|            auto beg_seg = range.begin().contiguous_segment();
 1639|  3.79k|            auto end_seg = range.end().contiguous_segment();
 1640|  3.79k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|  3.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.39k, False: 1.39k]
  |  |  ------------------
  ------------------
 1641|  3.79k|                             detail::to_address(end_seg.end()))) {
 1642|  2.39k|                auto& str = m_storage.emplace();
 1643|  2.39k|                str.reserve(range.end().position() - range.begin().position());
 1644|  2.39k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  2.39k|                m_view = string_view_type{str};
 1646|  2.39k|                return;
 1647|  2.39k|            }
 1648|       |
 1649|  1.39k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  1.39k|                                                            end_seg.data());
 1651|  1.39k|            m_storage.reset();
 1652|       |        }
 1653|       |        else {
 1654|       |            auto& str = m_storage.emplace();
 1655|       |            if constexpr (ranges::sized_range<Range>) {
 1656|       |                str.reserve(range.size());
 1657|       |            }
 1658|       |            if constexpr (ranges::common_range<Range>) {
 1659|       |                std::copy(ranges::begin(range), ranges::end(range),
 1660|       |                          std::back_inserter(str));
 1661|       |            }
 1662|       |            else {
 1663|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|       |                     ++it) {
 1665|       |                    str.push_back(*it);
 1666|       |                }
 1667|       |            }
 1668|       |            m_view = string_view_type{str};
 1669|       |        }
 1670|  3.79k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1581|  7.13k|    {
 1582|  7.13k|        return m_view;
 1583|  7.13k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1571|  3.79k|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6078|  2.29k|    {
 6079|  2.29k|        const bool need_skipped_width =
 6080|  2.29k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 2.29k]
  |  Branch (6080:33): [True: 0, False: 2.29k]
  ------------------
 6081|  2.29k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  2.29k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 2.29k]
  ------------------
 6084|  2.29k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 2.29k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|  2.29k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 2.29k, False: 0]
  ------------------
 6093|  2.29k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 2.29k]
  ------------------
 6094|  2.29k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|  2.29k|        return result_type{rng.begin(), 0};
 6118|  2.29k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1856|   301k|{
 1857|   301k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|   301k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   301k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|   301k|    if constexpr (ranges::sized_range<Range>) {
 1860|   301k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|   301k|        if (sz < count) {
  ------------------
  |  Branch (1861:13): [True: 31.1k, False: 270k]
  ------------------
 1862|  31.1k|            return unexpected(eof_error::eof);
 1863|  31.1k|        }
 1864|       |
 1865|   270k|        return ranges::next(range.begin(), count);
 1866|       |    }
 1867|       |    else {
 1868|       |        auto it = range.begin();
 1869|       |        if (guaranteed_minimum_size(range) >= count) {
 1870|       |            return ranges::next(it, count);
 1871|       |        }
 1872|       |
 1873|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1874|       |            if (it == range.end()) {
 1875|       |                return unexpected(eof_error::eof);
 1876|       |            }
 1877|       |        }
 1878|       |
 1879|       |        return it;
 1880|       |    }
 1881|   301k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|   379k|{
 1899|   379k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   379k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   379k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   379k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   379k|    auto it = range.begin();
 1903|   379k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   379k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   379k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 379k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|   379k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 379k, False: 0]
  ------------------
 1912|   379k|        ++it;
 1913|   379k|        return {it, string_type(1, *range.begin())};
 1914|   379k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|   379k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|  1.63M|{
  944|  1.63M|    return is_range_eof(r.begin(), r.end());
  945|  1.63M|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|  1.63M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  1.63M|    {
  937|  1.63M|        return begin == end;
  938|  1.63M|    }
  939|  1.63M|}
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1889|   379k|    {
 1890|   379k|        return !codepoint.empty();
 1891|   379k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|  1.25M|{
  950|  1.25M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.73k, False: 1.25M]
  |  |  ------------------
  ------------------
  951|  2.73k|        return eof_error::eof;
  952|  2.73k|    }
  953|  1.25M|    return eof_error::good;
  954|  1.25M|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|   477k|{
 1846|   477k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   477k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 120, False: 477k]
  |  |  ------------------
  ------------------
 1847|    120|        return unexpected(e);
 1848|    120|    }
 1849|       |
 1850|   477k|    return ranges::next(range.begin());
 1851|   477k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   477k|    {
  296|   477k|        ++x;
  297|   477k|        return x;
  298|   477k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|  50.2k|    {
 3539|  50.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|  50.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  50.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  50.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  50.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 50.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  50.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  50.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|  50.2k|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|  50.2k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 276, False: 49.9k]
  ------------------
 3543|       |            if constexpr (!std::is_signed_v<T>) {
 3544|       |                return unexpected_scan_error(
 3545|       |                    scan_error::invalid_scanned_value,
 3546|       |                    "Unexpected '-' sign when parsing an "
 3547|       |                    "unsigned value");
 3548|       |            }
 3549|    276|            else {
 3550|    276|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 276]
  ------------------
 3551|    276|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|    276|            }
 3557|    276|        }
 3558|       |
 3559|  50.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 52, False: 50.2k]
  ------------------
 3560|     52|            value = T{0};
 3561|     52|            return std::next(prefix_result.iterator);
 3562|     52|        }
 3563|       |
 3564|  50.2k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  50.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 41.8k, False: 8.37k]
  |  |  ------------------
  ------------------
 3565|  41.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|  41.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  41.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  41.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  41.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 50, False: 41.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     50|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     50|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     50|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     50|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     50|    }                                                  \
  |  |  |  | 3671|  41.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  41.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|  41.7k|                    parse_integer_digits_without_thsep(
 3567|  41.7k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|  41.7k|                        prefix_result.parsed_base));
 3569|       |
 3570|  41.7k|            auto buf = make_contiguous_buffer(
 3571|  41.7k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|  41.7k|            SCN_TRY(result_it,
  ------------------
  |  | 3672|  41.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  41.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  41.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  41.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 41.3k, False: 428]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  41.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  41.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  41.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  41.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  41.3k|    }                                                  \
  |  |  |  | 3671|  41.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    428|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|    428|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|    428|                                        prefix_result.parsed_base));
 3575|       |
 3576|    428|            return ranges::next(
 3577|    428|                prefix_result.iterator,
 3578|    428|                ranges::distance(buf.view().begin(), result_it));
 3579|  41.7k|        }
 3580|       |
 3581|  8.37k|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|  8.37k|            localized_number_formatting_options<CharT>{loc};
 3586|  8.37k|#endif
 3587|       |
 3588|  8.37k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|  8.37k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  8.37k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  8.37k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8.23k, False: 138]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  8.23k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  8.23k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  8.23k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  8.23k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  8.23k|    }                                                  \
  |  |  |  | 3671|  8.37k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    138|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|    138|                parse_integer_digits_with_thsep(
 3590|    138|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|    138|                    prefix_result.parsed_base, locale_options));
 3592|    138|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|    138|            parse_digits_result;
 3594|       |
 3595|    138|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 26, False: 112]
  ------------------
 3596|     26|            if (auto e = check_thsep_grouping(
 3597|     26|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|     26|                    thsep_indices, locale_options.grouping);
 3599|     26|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26, False: 0]
  |  |  ------------------
  ------------------
 3600|     26|                return unexpected(e);
 3601|     26|            }
 3602|     26|        }
 3603|       |
 3604|    112|        auto nothsep_source_view =
 3605|    112|            std::basic_string_view<CharT>{nothsep_source};
 3606|    112|        SCN_TRY(
  ------------------
  |  | 3672|    112|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    112|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    112|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    112|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16, False: 96]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     16|    }                                                  \
  |  |  |  | 3671|    112|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     96|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|     96|            nothsep_source_it,
 3608|     96|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|     96|                                prefix_result.parsed_base));
 3610|       |
 3611|     96|        return ranges::next(
 3612|     96|            prefix_result.iterator,
 3613|     96|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|     96|                ranges::ssize(thsep_indices));
 3615|    112|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3325|   377k|{
 3326|   377k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3672|   377k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   377k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   377k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   377k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 377k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   377k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   377k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|   377k|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|   377k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|   377k|        parse_integer_base_prefix(
 3331|   377k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|   377k|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 404, False: 376k]
  ------------------
 3334|    404|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 96, False: 308]
  ------------------
 3335|    404|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 212, False: 96]
  ------------------
 3336|    308|            digits_begin_it = base_prefix_begin_it;
 3337|    308|        }
 3338|     96|        else {
 3339|     96|            parsed_zero = false;
 3340|     96|        }
 3341|    404|    }
 3342|   376k|    else {
 3343|   376k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 450, False: 376k]
  ------------------
 3344|   376k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 371k, False: 4.82k]
  ------------------
 3345|   371k|            digits_begin_it = base_prefix_begin_it;
 3346|   371k|        }
 3347|   376k|    }
 3348|       |
 3349|   377k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 374k, False: 2.27k]
  ------------------
 3350|   374k|        sign = sign_type::plus_sign;
 3351|   374k|    }
 3352|   377k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|   377k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|   377k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|   377k|{
 3141|   377k|    auto r = read_one_of_code_unit(range, "+-");
 3142|   377k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 374k, False: 2.27k]
  ------------------
 3143|   374k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 374k, False: 0]
  ------------------
 3144|   374k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|   374k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|   374k|    }
 3148|       |
 3149|  2.27k|    auto& it = *r;
 3150|  2.27k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 2.05k, False: 217]
  ------------------
 3151|  2.05k|        return std::pair{it, sign_type::minus_sign};
 3152|  2.05k|    }
 3153|    217|    return std::pair{it, sign_type::plus_sign};
 3154|  2.27k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|   377k|{
 2272|   377k|    auto it = read_code_unit(range);
 2273|   377k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   377k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 377k]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|   753k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 753k, False: 374k]
  ------------------
 2278|   753k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 2.27k, False: 751k]
  ------------------
 2279|  2.27k|            return *it;
 2280|  2.27k|        }
 2281|   753k|    }
 2282|       |
 2283|   374k|    return unexpected(parse_error::error);
 2284|   377k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3292|   377k|{
 3293|   377k|    switch (base) {
 3294|  50.0k|        case 2:
  ------------------
  |  Branch (3294:9): [True: 50.0k, False: 327k]
  ------------------
 3295|       |            // allow 0b/0B
 3296|  50.0k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|  50.0k|                    false};
 3298|       |
 3299|  50.1k|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 50.1k, False: 326k]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|  50.1k|            bool zero_parsed = false;
 3302|  50.1k|            auto it = apply_opt(
 3303|  50.1k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|  50.1k|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|  50.3k|        case 16:
  ------------------
  |  Branch (3307:9): [True: 50.3k, False: 326k]
  ------------------
 3308|       |            // allow 0x/0X
 3309|  50.3k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|  50.3k|                    false};
 3311|       |
 3312|  50.3k|        case 0:
  ------------------
  |  Branch (3312:9): [True: 50.3k, False: 326k]
  ------------------
 3313|       |            // detect base
 3314|  50.3k|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|   176k|        default:
  ------------------
  |  Branch (3316:9): [True: 176k, False: 200k]
  ------------------
 3317|       |            // no base prefix allowed
 3318|   176k|            return {range.begin(), base, false};
 3319|   377k|    }
 3320|   377k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2290|   150k|{
 2291|   150k|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 150k, False: 192]
  ------------------
 2292|   150k|        return range.begin();
 2293|   150k|    }
 2294|    192|    return *result;
 2295|   150k|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3243|   100k|{
 3244|   100k|    return read_matching_string_classic_nocase(range, "0b");
 3245|   100k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|   301k|{
 2231|   301k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|       |    if constexpr (ranges::contiguous_range<Range> &&
 2234|       |                  std::is_same_v<char_type, char>) {
 2235|       |        if (range.size() < str.size()) {
 2236|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|       |        }
 2238|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|       |            return unexpected(parse_error::error);
 2240|       |        }
 2241|       |        return ranges::next(range.begin(), str.size());
 2242|       |    }
 2243|   301k|    else {
 2244|   301k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|   301k|            if (ch < 'A' || ch > 'Z') {
 2246|   301k|                return ch;
 2247|   301k|            }
 2248|   301k|            return static_cast<char_type>(ch +
 2249|   301k|                                          static_cast<char_type>('a' - 'A'));
 2250|   301k|        };
 2251|       |
 2252|   301k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|   301k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   301k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   301k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   301k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 31.1k, False: 270k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  31.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  31.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  31.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  31.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  31.1k|    }                                                  \
  |  |  |  | 3671|   301k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   270k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|   270k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|   270k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|   270k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|   270k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 270k, False: 0]
  |  |  ------------------
  ------------------
 2257|   270k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|   270k|                    return ascii_tolower(a) ==
 2259|   270k|                           static_cast<detail::char_t<Range>>(b);
 2260|   270k|                }))) {
 2261|   270k|            return unexpected(parse_error::error);
 2262|   270k|        }
 2263|       |
 2264|      0|        return it;
 2265|   270k|    }
 2266|   301k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2244|   271k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|   271k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 160k, False: 110k]
  |  Branch (2245:29): [True: 110k, False: 432]
  ------------------
 2246|   271k|                return ch;
 2247|   271k|            }
 2248|    432|            return static_cast<char_type>(ch +
 2249|    432|                                          static_cast<char_type>('a' - 'A'));
 2250|   271k|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3257|   100k|{
 3258|   100k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 100k]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|   100k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 404, False: 100k]
  ------------------
 3263|    404|        zero_parsed = true;
 3264|    404|        return *r;
 3265|    404|    }
 3266|       |
 3267|   100k|    return unexpected(parse_error::error);
 3268|   100k|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|   100k|{
 2146|   100k|    auto it = read_code_unit(range);
 2147|   100k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 120, False: 100k]
  |  |  ------------------
  ------------------
 2148|    120|        return unexpected(make_eof_parse_error(it.error()));
 2149|    120|    }
 2150|       |
 2151|   100k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 100k, False: 404]
  |  |  ------------------
  ------------------
 2152|   100k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|   100k|        return unexpected(parse_error::error);
 2154|   100k|    }
 2155|       |
 2156|    404|    return *it;
 2157|   100k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3250|   100k|{
 3251|   100k|    return read_matching_string_classic_nocase(range, "0x");
 3252|   100k|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3273|  50.3k|{
 3274|  50.3k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 50.3k]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|  50.3k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 50.3k]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|  50.3k|    {
 3281|  50.3k|        bool zero_parsed{false};
 3282|  50.3k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 212, False: 50.1k]
  ------------------
 3283|    212|            return {*r, 8, zero_parsed};
 3284|    212|        }
 3285|  50.3k|    }
 3286|  50.1k|    return {range.begin(), 10, false};
 3287|  50.3k|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3359|   325k|{
 3360|   325k|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|   325k|    if constexpr (ranges::contiguous_range<Range>) {
 3363|   325k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   325k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 234, False: 325k]
  |  |  ------------------
  ------------------
 3364|    234|            return unexpected_scan_error(
 3365|    234|                scan_error::invalid_scanned_value,
 3366|    234|                "Failed to parse integer: No digits found");
 3367|    234|        }
 3368|   325k|        return range.end();
 3369|       |    }
 3370|       |    else {
 3371|       |        return read_while1_code_unit(range,
 3372|       |                                     [&](char_type ch) noexcept {
 3373|       |                                         return char_to_int(ch) < base;
 3374|       |                                     })
 3375|       |            .transform_error(map_parse_error_to_scan_error(
 3376|       |                scan_error::invalid_scanned_value,
 3377|       |                "Failed to parse integer: No digits found"));
 3378|       |    }
 3379|   325k|}
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3389|  50.1k|{
 3390|  50.1k|    std::basic_string<CharT> output;
 3391|  50.1k|    std::string thsep_indices;
 3392|  50.1k|    auto it = range.begin();
 3393|  50.1k|    bool digit_matched = false;
 3394|   102M|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3394:12): [True: 102M, False: 420]
  ------------------
 3395|   102M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3395:13): [True: 102M, False: 52.3k]
  ------------------
 3396|   102M|            thsep_indices.push_back(
 3397|   102M|                static_cast<char>(ranges::distance(range.begin(), it)));
 3398|   102M|        }
 3399|  52.3k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3399:18): [True: 49.6k, False: 2.65k]
  ------------------
 3400|  49.6k|            break;
 3401|  49.6k|        }
 3402|  2.65k|        else {
 3403|  2.65k|            output.push_back(*it);
 3404|  2.65k|            digit_matched = true;
 3405|  2.65k|        }
 3406|   102M|    }
 3407|  50.1k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|  50.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 49.3k, False: 760]
  |  |  ------------------
  ------------------
 3408|  49.3k|        return unexpected_scan_error(
 3409|  49.3k|            scan_error::invalid_scanned_value,
 3410|  49.3k|            "Failed to parse integer: No digits found");
 3411|  49.3k|    }
 3412|    760|    return std::tuple{it, output, thsep_indices};
 3413|  50.1k|}
_ZN3scn2v34impl20check_thsep_groupingINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_10scan_errorET_NSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEENSC_17basic_string_viewIcSF_EE:
 3210|    150|{
 3211|    150|    SCN_EXPECT(!thsep_indices.empty());
  ------------------
  |  |  924|    150|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    150|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3212|       |
 3213|    150|    if (!check_thsep_grouping_impl(range, thsep_indices, grouping)) {
  ------------------
  |  Branch (3213:9): [True: 150, False: 0]
  ------------------
 3214|    150|        SCN_UNLIKELY_ATTR
 3215|    150|        return {scan_error::invalid_scanned_value,
 3216|    150|                "Invalid thousands separator grouping"};
 3217|    150|    }
 3218|       |
 3219|      0|    return {};
 3220|    150|}
_ZN3scn2v34impl25check_thsep_grouping_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_RNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEENSB_17basic_string_viewIcSE_EE:
 3172|    150|{
 3173|    150|    transform_thsep_indices(thsep_indices,
 3174|    150|                            ranges::distance(range.begin(), range.end()));
 3175|       |
 3176|    150|    auto thsep_it = thsep_indices.rbegin();
 3177|    150|    for (auto grouping_it = grouping.begin();
 3178|    150|         grouping_it != grouping.end() && thsep_it != thsep_indices.rend() - 1;
  ------------------
  |  Branch (3178:10): [True: 0, False: 150]
  |  Branch (3178:10): [True: 0, False: 150]
  |  Branch (3178:43): [True: 0, False: 0]
  ------------------
 3179|    150|         ++grouping_it, (void)++thsep_it) {
 3180|      0|        if (*thsep_it != *grouping_it) {
  ------------------
  |  Branch (3180:13): [True: 0, False: 0]
  ------------------
 3181|      0|            return false;
 3182|      0|        }
 3183|      0|    }
 3184|       |
 3185|    150|    SCN_CLANG_PUSH
 3186|       |    // false positive
 3187|    150|    SCN_CLANG_IGNORE("-Wzero-as-null-pointer-constant")
 3188|       |
 3189|  1.21k|    for (; thsep_it < thsep_indices.rend() - 1; ++thsep_it) {
  ------------------
  |  Branch (3189:12): [True: 1.09k, False: 120]
  ------------------
 3190|  1.09k|        if (*thsep_it != grouping.back()) {
  ------------------
  |  Branch (3190:13): [True: 30, False: 1.06k]
  ------------------
 3191|     30|            return false;
 3192|     30|        }
 3193|  1.09k|    }
 3194|       |
 3195|    120|    if (thsep_it == thsep_indices.rend() - 1) {
  ------------------
  |  Branch (3195:9): [True: 120, False: 0]
  ------------------
 3196|    120|        if (*thsep_it > grouping.back()) {
  ------------------
  |  Branch (3196:13): [True: 120, False: 0]
  ------------------
 3197|    120|            return false;
 3198|    120|        }
 3199|    120|    }
 3200|       |
 3201|      0|    SCN_CLANG_POP
 3202|       |
 3203|      0|    return true;
 3204|    120|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1682|   325k|{
 1683|       |    if constexpr (ranges::borrowed_range<Range> &&
 1684|       |                  ranges::contiguous_range<Range> &&
 1685|   325k|                  ranges::sized_range<Range>) {
 1686|   325k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|   325k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|       |    }
 1688|       |    else {
 1689|       |        return contiguous_range_factory{SCN_FWD(range)};
 1690|       |    }
 1691|   325k|}
_ZN3scn2v34impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1488|   325k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1489|   325k|    {
 1490|   325k|    }
_ZNK3scn2v34impl19string_view_wrapperIwE4viewEv:
 1502|   328k|    {
 1503|   328k|        return sv;
 1504|   328k|    }
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|   379k|{
 2951|   379k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 379k, False: 0]
  ------------------
 2952|   379k|        auto it = read_while_classic_space(range);
 2953|   379k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   379k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   379k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.13k, False: 377k]
  |  |  ------------------
  ------------------
 2955|  2.13k|            return unexpected(e);
 2956|  2.13k|        }
 2957|       |
 2958|   377k|        return it;
 2959|   379k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   379k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|   379k|{
 2117|       |    if constexpr (ranges::contiguous_range<Range> &&
 2118|       |                  ranges::sized_range<Range> &&
 2119|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2120|       |        auto buf = make_contiguous_buffer(range);
 2121|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|       |        return ranges::next(range.begin(),
 2123|       |                            ranges::distance(buf.view().begin(), it));
 2124|       |    }
 2125|   379k|    else {
 2126|   379k|        auto it = range.begin();
 2127|       |
 2128|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|       |            auto seg = get_contiguous_beginning(range);
 2130|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|       |                seg_it != seg.end()) {
 2132|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|       |            }
 2134|       |            ranges::advance(it, seg.size());
 2135|       |        }
 2136|       |
 2137|   379k|        return read_while_code_point(
 2138|   379k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   379k|    }
 2140|   379k|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|   379k|{
 2082|   379k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   379k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|   379k|{
 2061|   379k|    auto it = range.begin();
 2062|   381k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 379k, False: 2.13k]
  ------------------
 2063|   379k|        const auto val =
 2064|   379k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   379k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   379k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 379k, False: 0]
  |  |  ------------------
  ------------------
 2066|   379k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   379k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   379k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 377k, False: 2.53k]
  ------------------
 2069|   377k|                return it;
 2070|   377k|            }
 2071|   379k|        }
 2072|  2.53k|        it = val.iterator;
 2073|  2.53k|    }
 2074|       |
 2075|  2.13k|    return it;
 2076|   379k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|   379k|        : m_fptr([](storage fn,
  743|   379k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   379k|              cvref<T> obj = *get<T>(fn);
  745|   379k|              if constexpr (std::is_void_v<R>) {
  746|   379k|                  obj(static_cast<decltype(args)>(args)...);
  747|   379k|              }
  748|   379k|              else {
  749|   379k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   379k|              }
  751|   379k|          }),
  752|   379k|          m_storage(std::addressof(f))
  753|   379k|    {
  754|   379k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|   379k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   379k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   379k|              else {
  749|   379k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   379k|              }
  751|   379k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   379k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   379k|        else if constexpr (std::is_object_v<T>) {
  688|   379k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   379k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2138|   379k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|   379k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   379k|        {
  662|   379k|        }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|   273k|    {
  304|   273k|        ranges::advance(x, n);
  305|   273k|        return x;
  306|   273k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|   273k|    {
  268|   273k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   273k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|   273k|    {
  181|   821k|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 547k, False: 273k]
  ------------------
  182|   547k|            ++i;
  183|   547k|        }
  184|   273k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6192|  50.5k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|       |                          basic_contiguous_scan_context<char_type>>) {
 6197|       |            auto rd = make_reader<T, char_type>();
 6198|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|       |                return unexpected(e);
 6200|       |            }
 6201|       |
 6202|       |            return impl(rd, range, value);
 6203|       |        }
 6204|  50.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  50.5k|            auto rd = make_reader<T, char_type>();
 6206|  50.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  50.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 50.5k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|  50.5k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 50.5k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|  50.5k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|  50.5k|                return impl(rd, range, value);
 6213|  50.5k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|  50.5k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|   606k|    {
 3040|   606k|        reader_error_handler eh{};
 3041|   606k|        get_derived().check_specs_impl(specs, eh);
 3042|   606k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|   606k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 606k]
  |  |  ------------------
  ------------------
 3043|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|      0|        }
 3045|   606k|        return {};
 3046|   606k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
 3050|   606k|    {
 3051|   606k|        return static_cast<Derived&>(*this);
 3052|   606k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3484|   606k|    {
 3485|   606k|        detail::check_int_type_specs(specs, eh);
 3486|   606k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|  50.5k|    {
 6124|  50.5k|        const bool need_skipped_width =
 6125|  50.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 50.5k]
  |  Branch (6125:33): [True: 0, False: 50.5k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  50.5k|        auto it = rng.begin();
 6129|  50.5k|        std::ptrdiff_t prefix_width = 0;
 6130|  50.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 50.5k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  50.5k|        else {
 6138|  50.5k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  50.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  50.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  50.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  50.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 332, False: 50.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    332|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    332|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    332|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    332|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    332|    }                                                  \
  |  |  |  | 3671|  50.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  50.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  50.1k|            std::tie(it, prefix_width) = prefix_result;
 6140|  50.1k|        }
 6141|  50.1k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  50.1k|        std::ptrdiff_t value_width = 0;
 6145|  50.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 50.1k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  50.1k|        else {
 6161|  50.1k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  50.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  50.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  50.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 49.7k, False: 490]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  49.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  49.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  49.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  49.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  49.7k|    }                                                  \
  |  | 3671|  50.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  50.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|    490|                                             specs, value, loc));
 6163|       |
 6164|    490|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 490]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|    490|        }
 6170|       |
 6171|       |        // Read postfix
 6172|    490|        std::ptrdiff_t postfix_width = 0;
 6173|    490|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 322, False: 168]
  ------------------
 6174|    322|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|    322|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    322|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    322|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    322|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 322]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    322|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    322|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|    322|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|    322|                                 rd.skip_ws_before_read(), prefix_width,
 6177|    322|                                 value_width));
 6178|    322|            std::tie(it, postfix_width) = postfix_result;
 6179|    322|        }
 6180|       |
 6181|    490|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|    490|                                                 value_width, postfix_width);
 6183|    490|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 490]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|    490|        return it;
 6188|    490|    }
_ZNK3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
 3034|   763k|    {
 3035|   763k|        return true;
 3036|   763k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3538|  50.1k|    {
 3539|  50.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|  50.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  50.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  50.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  50.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 50.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  50.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  50.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|  50.1k|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|  50.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 266, False: 49.9k]
  ------------------
 3543|       |            if constexpr (!std::is_signed_v<T>) {
 3544|       |                return unexpected_scan_error(
 3545|       |                    scan_error::invalid_scanned_value,
 3546|       |                    "Unexpected '-' sign when parsing an "
 3547|       |                    "unsigned value");
 3548|       |            }
 3549|    266|            else {
 3550|    266|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 266]
  ------------------
 3551|    266|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|    266|            }
 3557|    266|        }
 3558|       |
 3559|  50.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 50, False: 50.1k]
  ------------------
 3560|     50|            value = T{0};
 3561|     50|            return std::next(prefix_result.iterator);
 3562|     50|        }
 3563|       |
 3564|  50.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  50.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 41.7k, False: 8.35k]
  |  |  ------------------
  ------------------
 3565|  41.7k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|  41.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  41.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  41.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  41.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 41.3k, False: 472]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  41.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  41.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  41.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  41.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  41.3k|    }                                                  \
  |  |  |  | 3671|  41.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    472|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    472|                    parse_integer_digits_without_thsep(
 3567|    472|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    472|                        prefix_result.parsed_base));
 3569|       |
 3570|    472|            auto buf = make_contiguous_buffer(
 3571|    472|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    472|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    472|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    472|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    472|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    472|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 108, False: 364]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    108|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    108|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    108|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    108|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    108|    }                                                  \
  |  |  |  | 3671|    472|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    364|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|    364|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|    364|                                        prefix_result.parsed_base));
 3575|       |
 3576|    364|            return ranges::next(
 3577|    364|                prefix_result.iterator,
 3578|    364|                ranges::distance(buf.view().begin(), result_it));
 3579|    472|        }
 3580|       |
 3581|  8.35k|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|  8.35k|            localized_number_formatting_options<CharT>{loc};
 3586|  8.35k|#endif
 3587|       |
 3588|  8.35k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|  8.35k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  8.35k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  8.35k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.35k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8.22k, False: 134]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  8.22k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  8.22k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  8.22k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  8.22k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  8.22k|    }                                                  \
  |  |  |  | 3671|  8.35k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    134|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|    134|                parse_integer_digits_with_thsep(
 3590|    134|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|    134|                    prefix_result.parsed_base, locale_options));
 3592|    134|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|    134|            parse_digits_result;
 3594|       |
 3595|    134|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 26, False: 108]
  ------------------
 3596|     26|            if (auto e = check_thsep_grouping(
 3597|     26|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|     26|                    thsep_indices, locale_options.grouping);
 3599|     26|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26, False: 0]
  |  |  ------------------
  ------------------
 3600|     26|                return unexpected(e);
 3601|     26|            }
 3602|     26|        }
 3603|       |
 3604|    108|        auto nothsep_source_view =
 3605|    108|            std::basic_string_view<CharT>{nothsep_source};
 3606|    108|        SCN_TRY(
  ------------------
  |  | 3672|    108|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    108|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    108|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    108|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 32, False: 76]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     32|    }                                                  \
  |  |  |  | 3671|    108|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     76|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|     76|            nothsep_source_it,
 3608|     76|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|     76|                                prefix_result.parsed_base));
 3610|       |
 3611|     76|        return ranges::next(
 3612|     76|            prefix_result.iterator,
 3613|     76|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|     76|                ranges::ssize(thsep_indices));
 3615|    108|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|  50.1k|    {
 3539|  50.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|  50.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  50.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  50.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  50.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 50.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  50.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  50.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|  50.1k|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|  50.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 266, False: 49.9k]
  ------------------
 3543|       |            if constexpr (!std::is_signed_v<T>) {
 3544|       |                return unexpected_scan_error(
 3545|       |                    scan_error::invalid_scanned_value,
 3546|       |                    "Unexpected '-' sign when parsing an "
 3547|       |                    "unsigned value");
 3548|       |            }
 3549|    266|            else {
 3550|    266|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 266]
  ------------------
 3551|    266|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|    266|            }
 3557|    266|        }
 3558|       |
 3559|  50.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 50, False: 50.1k]
  ------------------
 3560|     50|            value = T{0};
 3561|     50|            return std::next(prefix_result.iterator);
 3562|     50|        }
 3563|       |
 3564|  50.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  50.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 41.7k, False: 8.35k]
  |  |  ------------------
  ------------------
 3565|  41.7k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|  41.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  41.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  41.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  41.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 50, False: 41.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     50|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     50|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     50|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     50|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     50|    }                                                  \
  |  |  |  | 3671|  41.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  41.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|  41.7k|                    parse_integer_digits_without_thsep(
 3567|  41.7k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|  41.7k|                        prefix_result.parsed_base));
 3569|       |
 3570|  41.7k|            auto buf = make_contiguous_buffer(
 3571|  41.7k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|  41.7k|            SCN_TRY(result_it,
  ------------------
  |  | 3672|  41.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  41.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  41.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  41.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 41.3k, False: 364]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  41.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  41.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  41.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  41.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  41.3k|    }                                                  \
  |  |  |  | 3671|  41.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    364|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|    364|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|    364|                                        prefix_result.parsed_base));
 3575|       |
 3576|    364|            return ranges::next(
 3577|    364|                prefix_result.iterator,
 3578|    364|                ranges::distance(buf.view().begin(), result_it));
 3579|  41.7k|        }
 3580|       |
 3581|  8.35k|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|  8.35k|            localized_number_formatting_options<CharT>{loc};
 3586|  8.35k|#endif
 3587|       |
 3588|  8.35k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|  8.35k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  8.35k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  8.35k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.35k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8.22k, False: 134]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  8.22k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  8.22k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  8.22k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  8.22k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  8.22k|    }                                                  \
  |  |  |  | 3671|  8.35k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    134|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|    134|                parse_integer_digits_with_thsep(
 3590|    134|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|    134|                    prefix_result.parsed_base, locale_options));
 3592|    134|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|    134|            parse_digits_result;
 3594|       |
 3595|    134|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 26, False: 108]
  ------------------
 3596|     26|            if (auto e = check_thsep_grouping(
 3597|     26|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|     26|                    thsep_indices, locale_options.grouping);
 3599|     26|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26, False: 0]
  |  |  ------------------
  ------------------
 3600|     26|                return unexpected(e);
 3601|     26|            }
 3602|     26|        }
 3603|       |
 3604|    108|        auto nothsep_source_view =
 3605|    108|            std::basic_string_view<CharT>{nothsep_source};
 3606|    108|        SCN_TRY(
  ------------------
  |  | 3672|    108|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    108|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    108|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    108|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 32, False: 76]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     32|    }                                                  \
  |  |  |  | 3671|    108|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     76|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|     76|            nothsep_source_it,
 3608|     76|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|     76|                                prefix_result.parsed_base));
 3610|       |
 3611|     76|        return ranges::next(
 3612|     76|            prefix_result.iterator,
 3613|     76|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|     76|                ranges::ssize(thsep_indices));
 3615|    108|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6192|  50.6k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|       |                          basic_contiguous_scan_context<char_type>>) {
 6197|       |            auto rd = make_reader<T, char_type>();
 6198|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|       |                return unexpected(e);
 6200|       |            }
 6201|       |
 6202|       |            return impl(rd, range, value);
 6203|       |        }
 6204|  50.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  50.6k|            auto rd = make_reader<T, char_type>();
 6206|  50.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  50.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 50.6k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|  50.6k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 50.6k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|  50.6k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|  50.6k|                return impl(rd, range, value);
 6213|  50.6k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|  50.6k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|  50.6k|    {
 6124|  50.6k|        const bool need_skipped_width =
 6125|  50.6k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 50.6k]
  |  Branch (6125:33): [True: 0, False: 50.6k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  50.6k|        auto it = rng.begin();
 6129|  50.6k|        std::ptrdiff_t prefix_width = 0;
 6130|  50.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 50.6k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  50.6k|        else {
 6138|  50.6k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  50.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  50.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  50.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  50.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 344, False: 50.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    344|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    344|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    344|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    344|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    344|    }                                                  \
  |  |  |  | 3671|  50.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  50.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  50.2k|            std::tie(it, prefix_width) = prefix_result;
 6140|  50.2k|        }
 6141|  50.2k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  50.2k|        std::ptrdiff_t value_width = 0;
 6145|  50.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 50.2k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  50.2k|        else {
 6161|  50.2k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  50.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  50.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  50.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 49.6k, False: 576]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  49.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  49.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  49.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  49.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  49.6k|    }                                                  \
  |  | 3671|  50.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  50.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|    576|                                             specs, value, loc));
 6163|       |
 6164|    576|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 576]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|    576|        }
 6170|       |
 6171|       |        // Read postfix
 6172|    576|        std::ptrdiff_t postfix_width = 0;
 6173|    576|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 396, False: 180]
  ------------------
 6174|    396|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|    396|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    396|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    396|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    396|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 396]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    396|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    396|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|    396|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|    396|                                 rd.skip_ws_before_read(), prefix_width,
 6177|    396|                                 value_width));
 6178|    396|            std::tie(it, postfix_width) = postfix_result;
 6179|    396|        }
 6180|       |
 6181|    576|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|    576|                                                 value_width, postfix_width);
 6183|    576|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 576]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|    576|        return it;
 6188|    576|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6192|  50.7k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|       |                          basic_contiguous_scan_context<char_type>>) {
 6197|       |            auto rd = make_reader<T, char_type>();
 6198|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|       |                return unexpected(e);
 6200|       |            }
 6201|       |
 6202|       |            return impl(rd, range, value);
 6203|       |        }
 6204|  50.7k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  50.7k|            auto rd = make_reader<T, char_type>();
 6206|  50.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  50.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 50.7k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|  50.7k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 50.7k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|  50.7k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|  50.7k|                return impl(rd, range, value);
 6213|  50.7k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|  50.7k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|  50.7k|    {
 6124|  50.7k|        const bool need_skipped_width =
 6125|  50.7k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 50.7k]
  |  Branch (6125:33): [True: 0, False: 50.7k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  50.7k|        auto it = rng.begin();
 6129|  50.7k|        std::ptrdiff_t prefix_width = 0;
 6130|  50.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 50.7k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  50.7k|        else {
 6138|  50.7k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  50.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  50.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  50.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  50.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 344, False: 50.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    344|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    344|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    344|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    344|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    344|    }                                                  \
  |  |  |  | 3671|  50.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  50.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  50.3k|            std::tie(it, prefix_width) = prefix_result;
 6140|  50.3k|        }
 6141|  50.3k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  50.3k|        std::ptrdiff_t value_width = 0;
 6145|  50.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 50.3k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  50.3k|        else {
 6161|  50.3k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  50.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  50.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  50.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 49.6k, False: 684]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  49.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  49.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  49.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  49.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  49.6k|    }                                                  \
  |  | 3671|  50.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  50.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|    684|                                             specs, value, loc));
 6163|       |
 6164|    684|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 684]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|    684|        }
 6170|       |
 6171|       |        // Read postfix
 6172|    684|        std::ptrdiff_t postfix_width = 0;
 6173|    684|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 504, False: 180]
  ------------------
 6174|    504|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|    504|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    504|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    504|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    504|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 504]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    504|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    504|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|    504|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|    504|                                 rd.skip_ws_before_read(), prefix_width,
 6177|    504|                                 value_width));
 6178|    504|            std::tie(it, postfix_width) = postfix_result;
 6179|    504|        }
 6180|       |
 6181|    684|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|    684|                                                 value_width, postfix_width);
 6183|    684|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 684]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|    684|        return it;
 6188|    684|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3538|  50.3k|    {
 3539|  50.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|  50.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  50.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  50.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  50.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 50.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  50.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  50.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|  50.3k|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|  50.3k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 292, False: 50.0k]
  ------------------
 3543|       |            if constexpr (!std::is_signed_v<T>) {
 3544|       |                return unexpected_scan_error(
 3545|       |                    scan_error::invalid_scanned_value,
 3546|       |                    "Unexpected '-' sign when parsing an "
 3547|       |                    "unsigned value");
 3548|       |            }
 3549|    292|            else {
 3550|    292|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 292]
  ------------------
 3551|    292|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|    292|            }
 3557|    292|        }
 3558|       |
 3559|  50.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 58, False: 50.3k]
  ------------------
 3560|     58|            value = T{0};
 3561|     58|            return std::next(prefix_result.iterator);
 3562|     58|        }
 3563|       |
 3564|  50.3k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  50.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 41.9k, False: 8.40k]
  |  |  ------------------
  ------------------
 3565|  41.9k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|  41.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  41.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  41.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  41.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 41.4k, False: 514]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  41.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  41.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  41.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  41.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  41.4k|    }                                                  \
  |  |  |  | 3671|  41.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    514|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    514|                    parse_integer_digits_without_thsep(
 3567|    514|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    514|                        prefix_result.parsed_base));
 3569|       |
 3570|    514|            auto buf = make_contiguous_buffer(
 3571|    514|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    514|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    514|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    514|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    514|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    514|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14, False: 500]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     14|    }                                                  \
  |  |  |  | 3671|    514|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    500|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|    500|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|    500|                                        prefix_result.parsed_base));
 3575|       |
 3576|    500|            return ranges::next(
 3577|    500|                prefix_result.iterator,
 3578|    500|                ranges::distance(buf.view().begin(), result_it));
 3579|    514|        }
 3580|       |
 3581|  8.40k|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|  8.40k|            localized_number_formatting_options<CharT>{loc};
 3586|  8.40k|#endif
 3587|       |
 3588|  8.40k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|  8.40k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  8.40k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  8.40k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8.25k, False: 152]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  8.25k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  8.25k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  8.25k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  8.25k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  8.25k|    }                                                  \
  |  |  |  | 3671|  8.40k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    152|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|    152|                parse_integer_digits_with_thsep(
 3590|    152|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|    152|                    prefix_result.parsed_base, locale_options));
 3592|    152|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|    152|            parse_digits_result;
 3594|       |
 3595|    152|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 26, False: 126]
  ------------------
 3596|     26|            if (auto e = check_thsep_grouping(
 3597|     26|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|     26|                    thsep_indices, locale_options.grouping);
 3599|     26|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26, False: 0]
  |  |  ------------------
  ------------------
 3600|     26|                return unexpected(e);
 3601|     26|            }
 3602|     26|        }
 3603|       |
 3604|    126|        auto nothsep_source_view =
 3605|    126|            std::basic_string_view<CharT>{nothsep_source};
 3606|    126|        SCN_TRY(
  ------------------
  |  | 3672|    126|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    126|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    126|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    126|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 126]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    126|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    126|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|    126|            nothsep_source_it,
 3608|    126|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|    126|                                prefix_result.parsed_base));
 3610|       |
 3611|    126|        return ranges::next(
 3612|    126|            prefix_result.iterator,
 3613|    126|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|    126|                ranges::ssize(thsep_indices));
 3615|    126|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|  50.3k|    {
 3539|  50.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|  50.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  50.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  50.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  50.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 50.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  50.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  50.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|  50.3k|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|  50.3k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 292, False: 50.0k]
  ------------------
 3543|       |            if constexpr (!std::is_signed_v<T>) {
 3544|       |                return unexpected_scan_error(
 3545|       |                    scan_error::invalid_scanned_value,
 3546|       |                    "Unexpected '-' sign when parsing an "
 3547|       |                    "unsigned value");
 3548|       |            }
 3549|    292|            else {
 3550|    292|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 292]
  ------------------
 3551|    292|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|    292|            }
 3557|    292|        }
 3558|       |
 3559|  50.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 58, False: 50.3k]
  ------------------
 3560|     58|            value = T{0};
 3561|     58|            return std::next(prefix_result.iterator);
 3562|     58|        }
 3563|       |
 3564|  50.3k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  50.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 41.9k, False: 8.40k]
  |  |  ------------------
  ------------------
 3565|  41.9k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|  41.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  41.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  41.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  41.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 50, False: 41.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     50|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     50|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     50|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     50|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     50|    }                                                  \
  |  |  |  | 3671|  41.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  41.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|  41.8k|                    parse_integer_digits_without_thsep(
 3567|  41.8k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|  41.8k|                        prefix_result.parsed_base));
 3569|       |
 3570|  41.8k|            auto buf = make_contiguous_buffer(
 3571|  41.8k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|  41.8k|            SCN_TRY(result_it,
  ------------------
  |  | 3672|  41.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  41.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  41.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  41.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 41.3k, False: 500]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  41.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  41.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  41.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  41.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  41.3k|    }                                                  \
  |  |  |  | 3671|  41.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    500|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|    500|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|    500|                                        prefix_result.parsed_base));
 3575|       |
 3576|    500|            return ranges::next(
 3577|    500|                prefix_result.iterator,
 3578|    500|                ranges::distance(buf.view().begin(), result_it));
 3579|  41.8k|        }
 3580|       |
 3581|  8.40k|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|  8.40k|            localized_number_formatting_options<CharT>{loc};
 3586|  8.40k|#endif
 3587|       |
 3588|  8.40k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|  8.40k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  8.40k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  8.40k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8.25k, False: 152]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  8.25k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  8.25k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  8.25k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  8.25k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  8.25k|    }                                                  \
  |  |  |  | 3671|  8.40k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    152|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|    152|                parse_integer_digits_with_thsep(
 3590|    152|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|    152|                    prefix_result.parsed_base, locale_options));
 3592|    152|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|    152|            parse_digits_result;
 3594|       |
 3595|    152|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 26, False: 126]
  ------------------
 3596|     26|            if (auto e = check_thsep_grouping(
 3597|     26|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|     26|                    thsep_indices, locale_options.grouping);
 3599|     26|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26, False: 0]
  |  |  ------------------
  ------------------
 3600|     26|                return unexpected(e);
 3601|     26|            }
 3602|     26|        }
 3603|       |
 3604|    126|        auto nothsep_source_view =
 3605|    126|            std::basic_string_view<CharT>{nothsep_source};
 3606|    126|        SCN_TRY(
  ------------------
  |  | 3672|    126|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    126|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    126|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    126|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 126]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    126|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    126|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|    126|            nothsep_source_it,
 3608|    126|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|    126|                                prefix_result.parsed_base));
 3610|       |
 3611|    126|        return ranges::next(
 3612|    126|            prefix_result.iterator,
 3613|    126|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|    126|                ranges::ssize(thsep_indices));
 3615|    126|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6192|  50.4k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|       |                          basic_contiguous_scan_context<char_type>>) {
 6197|       |            auto rd = make_reader<T, char_type>();
 6198|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|       |                return unexpected(e);
 6200|       |            }
 6201|       |
 6202|       |            return impl(rd, range, value);
 6203|       |        }
 6204|  50.4k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  50.4k|            auto rd = make_reader<T, char_type>();
 6206|  50.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  50.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 50.4k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|  50.4k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 50.4k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|  50.4k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|  50.4k|                return impl(rd, range, value);
 6213|  50.4k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|  50.4k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|  50.4k|    {
 6124|  50.4k|        const bool need_skipped_width =
 6125|  50.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 50.4k]
  |  Branch (6125:33): [True: 0, False: 50.4k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  50.4k|        auto it = rng.begin();
 6129|  50.4k|        std::ptrdiff_t prefix_width = 0;
 6130|  50.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 50.4k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  50.4k|        else {
 6138|  50.4k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  50.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  50.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  50.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  50.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 292, False: 50.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    292|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    292|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    292|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    292|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    292|    }                                                  \
  |  |  |  | 3671|  50.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  50.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  50.1k|            std::tie(it, prefix_width) = prefix_result;
 6140|  50.1k|        }
 6141|  50.1k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  50.1k|        std::ptrdiff_t value_width = 0;
 6145|  50.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 50.1k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  50.1k|        else {
 6161|  50.1k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  50.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  50.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  50.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 49.7k, False: 422]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  49.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  49.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  49.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  49.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  49.7k|    }                                                  \
  |  | 3671|  50.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  50.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|    422|                                             specs, value, loc));
 6163|       |
 6164|    422|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 422]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|    422|        }
 6170|       |
 6171|       |        // Read postfix
 6172|    422|        std::ptrdiff_t postfix_width = 0;
 6173|    422|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 294, False: 128]
  ------------------
 6174|    294|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|    294|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    294|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    294|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    294|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 294]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    294|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    294|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|    294|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|    294|                                 rd.skip_ws_before_read(), prefix_width,
 6177|    294|                                 value_width));
 6178|    294|            std::tie(it, postfix_width) = postfix_result;
 6179|    294|        }
 6180|       |
 6181|    422|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|    422|                                                 value_width, postfix_width);
 6183|    422|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 422]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|    422|        return it;
 6188|    422|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3538|  50.1k|    {
 3539|  50.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|  50.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  50.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  50.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  50.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 50.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  50.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  50.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|  50.1k|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|  50.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 260, False: 49.9k]
  ------------------
 3543|    260|            if constexpr (!std::is_signed_v<T>) {
 3544|    260|                return unexpected_scan_error(
 3545|    260|                    scan_error::invalid_scanned_value,
 3546|    260|                    "Unexpected '-' sign when parsing an "
 3547|    260|                    "unsigned value");
 3548|       |            }
 3549|       |            else {
 3550|       |                if (specs.type ==
 3551|       |                    detail::presentation_type::int_unsigned_decimal) {
 3552|       |                    return unexpected_scan_error(
 3553|       |                        scan_error::invalid_scanned_value,
 3554|       |                        "'u'-option disallows negative values");
 3555|       |                }
 3556|       |            }
 3557|    260|        }
 3558|       |
 3559|  50.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 48, False: 50.1k]
  ------------------
 3560|     48|            value = T{0};
 3561|     48|            return std::next(prefix_result.iterator);
 3562|     48|        }
 3563|       |
 3564|  50.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  50.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 41.5k, False: 8.56k]
  |  |  ------------------
  ------------------
 3565|  41.5k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|  41.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  41.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  41.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  41.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 41.1k, False: 398]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  41.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  41.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  41.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  41.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  41.1k|    }                                                  \
  |  |  |  | 3671|  41.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    398|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    398|                    parse_integer_digits_without_thsep(
 3567|    398|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    398|                        prefix_result.parsed_base));
 3569|       |
 3570|    398|            auto buf = make_contiguous_buffer(
 3571|    398|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    398|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    398|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    398|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    398|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    398|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 82, False: 316]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     82|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     82|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     82|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     82|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     82|    }                                                  \
  |  |  |  | 3671|    398|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    316|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|    316|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|    316|                                        prefix_result.parsed_base));
 3575|       |
 3576|    316|            return ranges::next(
 3577|    316|                prefix_result.iterator,
 3578|    316|                ranges::distance(buf.view().begin(), result_it));
 3579|    398|        }
 3580|       |
 3581|  8.56k|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|  8.56k|            localized_number_formatting_options<CharT>{loc};
 3586|  8.56k|#endif
 3587|       |
 3588|  8.56k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|  8.56k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  8.56k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  8.56k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8.19k, False: 368]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  8.19k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  8.19k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  8.19k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  8.19k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  8.19k|    }                                                  \
  |  |  |  | 3671|  8.56k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    368|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|    368|                parse_integer_digits_with_thsep(
 3590|    368|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|    368|                    prefix_result.parsed_base, locale_options));
 3592|    368|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|    368|            parse_digits_result;
 3594|       |
 3595|    368|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 24, False: 344]
  ------------------
 3596|     24|            if (auto e = check_thsep_grouping(
 3597|     24|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|     24|                    thsep_indices, locale_options.grouping);
 3599|     24|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24, False: 0]
  |  |  ------------------
  ------------------
 3600|     24|                return unexpected(e);
 3601|     24|            }
 3602|     24|        }
 3603|       |
 3604|    344|        auto nothsep_source_view =
 3605|    344|            std::basic_string_view<CharT>{nothsep_source};
 3606|    344|        SCN_TRY(
  ------------------
  |  | 3672|    344|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    344|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    344|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    344|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 26, False: 318]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     26|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     26|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     26|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     26|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     26|    }                                                  \
  |  |  |  | 3671|    344|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    318|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|    318|            nothsep_source_it,
 3608|    318|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|    318|                                prefix_result.parsed_base));
 3610|       |
 3611|    318|        return ranges::next(
 3612|    318|            prefix_result.iterator,
 3613|    318|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|    318|                ranges::ssize(thsep_indices));
 3615|    344|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|  50.1k|    {
 3539|  50.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|  50.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  50.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  50.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  50.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 50.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  50.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  50.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|  50.1k|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|  50.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 260, False: 49.9k]
  ------------------
 3543|    260|            if constexpr (!std::is_signed_v<T>) {
 3544|    260|                return unexpected_scan_error(
 3545|    260|                    scan_error::invalid_scanned_value,
 3546|    260|                    "Unexpected '-' sign when parsing an "
 3547|    260|                    "unsigned value");
 3548|       |            }
 3549|       |            else {
 3550|       |                if (specs.type ==
 3551|       |                    detail::presentation_type::int_unsigned_decimal) {
 3552|       |                    return unexpected_scan_error(
 3553|       |                        scan_error::invalid_scanned_value,
 3554|       |                        "'u'-option disallows negative values");
 3555|       |                }
 3556|       |            }
 3557|    260|        }
 3558|       |
 3559|  50.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 48, False: 50.1k]
  ------------------
 3560|     48|            value = T{0};
 3561|     48|            return std::next(prefix_result.iterator);
 3562|     48|        }
 3563|       |
 3564|  50.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  50.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 41.5k, False: 8.56k]
  |  |  ------------------
  ------------------
 3565|  41.5k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|  41.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  41.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  41.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  41.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 41.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     10|    }                                                  \
  |  |  |  | 3671|  41.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  41.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|  41.5k|                    parse_integer_digits_without_thsep(
 3567|  41.5k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|  41.5k|                        prefix_result.parsed_base));
 3569|       |
 3570|  41.5k|            auto buf = make_contiguous_buffer(
 3571|  41.5k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|  41.5k|            SCN_TRY(result_it,
  ------------------
  |  | 3672|  41.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  41.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  41.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  41.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 41.2k, False: 316]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  41.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  41.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  41.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  41.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  41.2k|    }                                                  \
  |  |  |  | 3671|  41.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    316|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|    316|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|    316|                                        prefix_result.parsed_base));
 3575|       |
 3576|    316|            return ranges::next(
 3577|    316|                prefix_result.iterator,
 3578|    316|                ranges::distance(buf.view().begin(), result_it));
 3579|  41.5k|        }
 3580|       |
 3581|  8.56k|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|  8.56k|            localized_number_formatting_options<CharT>{loc};
 3586|  8.56k|#endif
 3587|       |
 3588|  8.56k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|  8.56k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  8.56k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  8.56k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8.19k, False: 368]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  8.19k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  8.19k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  8.19k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  8.19k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  8.19k|    }                                                  \
  |  |  |  | 3671|  8.56k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    368|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|    368|                parse_integer_digits_with_thsep(
 3590|    368|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|    368|                    prefix_result.parsed_base, locale_options));
 3592|    368|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|    368|            parse_digits_result;
 3594|       |
 3595|    368|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 24, False: 344]
  ------------------
 3596|     24|            if (auto e = check_thsep_grouping(
 3597|     24|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|     24|                    thsep_indices, locale_options.grouping);
 3599|     24|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24, False: 0]
  |  |  ------------------
  ------------------
 3600|     24|                return unexpected(e);
 3601|     24|            }
 3602|     24|        }
 3603|       |
 3604|    344|        auto nothsep_source_view =
 3605|    344|            std::basic_string_view<CharT>{nothsep_source};
 3606|    344|        SCN_TRY(
  ------------------
  |  | 3672|    344|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    344|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    344|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    344|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 26, False: 318]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     26|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     26|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     26|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     26|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     26|    }                                                  \
  |  |  |  | 3671|    344|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    318|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|    318|            nothsep_source_it,
 3608|    318|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|    318|                                prefix_result.parsed_base));
 3610|       |
 3611|    318|        return ranges::next(
 3612|    318|            prefix_result.iterator,
 3613|    318|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|    318|                ranges::ssize(thsep_indices));
 3615|    344|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6192|  50.5k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|       |                          basic_contiguous_scan_context<char_type>>) {
 6197|       |            auto rd = make_reader<T, char_type>();
 6198|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|       |                return unexpected(e);
 6200|       |            }
 6201|       |
 6202|       |            return impl(rd, range, value);
 6203|       |        }
 6204|  50.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  50.5k|            auto rd = make_reader<T, char_type>();
 6206|  50.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  50.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 50.5k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|  50.5k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 50.5k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|  50.5k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|  50.5k|                return impl(rd, range, value);
 6213|  50.5k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|  50.5k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|  50.5k|    {
 6124|  50.5k|        const bool need_skipped_width =
 6125|  50.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 50.5k]
  |  Branch (6125:33): [True: 0, False: 50.5k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  50.5k|        auto it = rng.begin();
 6129|  50.5k|        std::ptrdiff_t prefix_width = 0;
 6130|  50.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 50.5k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  50.5k|        else {
 6138|  50.5k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  50.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  50.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  50.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  50.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 292, False: 50.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    292|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    292|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    292|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    292|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    292|    }                                                  \
  |  |  |  | 3671|  50.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  50.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  50.2k|            std::tie(it, prefix_width) = prefix_result;
 6140|  50.2k|        }
 6141|  50.2k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  50.2k|        std::ptrdiff_t value_width = 0;
 6145|  50.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 50.2k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  50.2k|        else {
 6161|  50.2k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  50.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  50.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  50.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 49.7k, False: 468]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  49.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  49.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  49.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  49.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  49.7k|    }                                                  \
  |  | 3671|  50.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  50.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|    468|                                             specs, value, loc));
 6163|       |
 6164|    468|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 468]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|    468|        }
 6170|       |
 6171|       |        // Read postfix
 6172|    468|        std::ptrdiff_t postfix_width = 0;
 6173|    468|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 340, False: 128]
  ------------------
 6174|    340|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|    340|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    340|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    340|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    340|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 340]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    340|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    340|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|    340|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|    340|                                 rd.skip_ws_before_read(), prefix_width,
 6177|    340|                                 value_width));
 6178|    340|            std::tie(it, postfix_width) = postfix_result;
 6179|    340|        }
 6180|       |
 6181|    468|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|    468|                                                 value_width, postfix_width);
 6183|    468|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 468]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|    468|        return it;
 6188|    468|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3538|  50.2k|    {
 3539|  50.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|  50.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  50.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  50.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  50.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 50.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  50.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  50.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|  50.2k|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|  50.2k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 260, False: 49.9k]
  ------------------
 3543|    260|            if constexpr (!std::is_signed_v<T>) {
 3544|    260|                return unexpected_scan_error(
 3545|    260|                    scan_error::invalid_scanned_value,
 3546|    260|                    "Unexpected '-' sign when parsing an "
 3547|    260|                    "unsigned value");
 3548|       |            }
 3549|       |            else {
 3550|       |                if (specs.type ==
 3551|       |                    detail::presentation_type::int_unsigned_decimal) {
 3552|       |                    return unexpected_scan_error(
 3553|       |                        scan_error::invalid_scanned_value,
 3554|       |                        "'u'-option disallows negative values");
 3555|       |                }
 3556|       |            }
 3557|    260|        }
 3558|       |
 3559|  50.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 48, False: 50.1k]
  ------------------
 3560|     48|            value = T{0};
 3561|     48|            return std::next(prefix_result.iterator);
 3562|     48|        }
 3563|       |
 3564|  50.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  50.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 41.5k, False: 8.57k]
  |  |  ------------------
  ------------------
 3565|  41.5k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|  41.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  41.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  41.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  41.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 41.1k, False: 404]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  41.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  41.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  41.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  41.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  41.1k|    }                                                  \
  |  |  |  | 3671|  41.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    404|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    404|                    parse_integer_digits_without_thsep(
 3567|    404|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    404|                        prefix_result.parsed_base));
 3569|       |
 3570|    404|            auto buf = make_contiguous_buffer(
 3571|    404|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    404|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    404|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    404|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    404|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    404|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 54, False: 350]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     54|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     54|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     54|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     54|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     54|    }                                                  \
  |  |  |  | 3671|    404|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    350|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|    350|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|    350|                                        prefix_result.parsed_base));
 3575|       |
 3576|    350|            return ranges::next(
 3577|    350|                prefix_result.iterator,
 3578|    350|                ranges::distance(buf.view().begin(), result_it));
 3579|    404|        }
 3580|       |
 3581|  8.57k|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|  8.57k|            localized_number_formatting_options<CharT>{loc};
 3586|  8.57k|#endif
 3587|       |
 3588|  8.57k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|  8.57k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  8.57k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  8.57k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8.20k, False: 370]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  8.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  8.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  8.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  8.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  8.20k|    }                                                  \
  |  |  |  | 3671|  8.57k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    370|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|    370|                parse_integer_digits_with_thsep(
 3590|    370|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|    370|                    prefix_result.parsed_base, locale_options));
 3592|    370|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|    370|            parse_digits_result;
 3594|       |
 3595|    370|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 24, False: 346]
  ------------------
 3596|     24|            if (auto e = check_thsep_grouping(
 3597|     24|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|     24|                    thsep_indices, locale_options.grouping);
 3599|     24|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24, False: 0]
  |  |  ------------------
  ------------------
 3600|     24|                return unexpected(e);
 3601|     24|            }
 3602|     24|        }
 3603|       |
 3604|    346|        auto nothsep_source_view =
 3605|    346|            std::basic_string_view<CharT>{nothsep_source};
 3606|    346|        SCN_TRY(
  ------------------
  |  | 3672|    346|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    346|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    346|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    346|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16, False: 330]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     16|    }                                                  \
  |  |  |  | 3671|    346|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    330|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|    330|            nothsep_source_it,
 3608|    330|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|    330|                                prefix_result.parsed_base));
 3610|       |
 3611|    330|        return ranges::next(
 3612|    330|            prefix_result.iterator,
 3613|    330|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|    330|                ranges::ssize(thsep_indices));
 3615|    346|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|  50.2k|    {
 3539|  50.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|  50.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  50.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  50.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  50.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 50.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  50.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  50.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|  50.2k|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|  50.2k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 260, False: 49.9k]
  ------------------
 3543|    260|            if constexpr (!std::is_signed_v<T>) {
 3544|    260|                return unexpected_scan_error(
 3545|    260|                    scan_error::invalid_scanned_value,
 3546|    260|                    "Unexpected '-' sign when parsing an "
 3547|    260|                    "unsigned value");
 3548|       |            }
 3549|       |            else {
 3550|       |                if (specs.type ==
 3551|       |                    detail::presentation_type::int_unsigned_decimal) {
 3552|       |                    return unexpected_scan_error(
 3553|       |                        scan_error::invalid_scanned_value,
 3554|       |                        "'u'-option disallows negative values");
 3555|       |                }
 3556|       |            }
 3557|    260|        }
 3558|       |
 3559|  50.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 48, False: 50.1k]
  ------------------
 3560|     48|            value = T{0};
 3561|     48|            return std::next(prefix_result.iterator);
 3562|     48|        }
 3563|       |
 3564|  50.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  50.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 41.5k, False: 8.57k]
  |  |  ------------------
  ------------------
 3565|  41.5k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|  41.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  41.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  41.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  41.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 41.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     10|    }                                                  \
  |  |  |  | 3671|  41.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  41.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|  41.5k|                    parse_integer_digits_without_thsep(
 3567|  41.5k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|  41.5k|                        prefix_result.parsed_base));
 3569|       |
 3570|  41.5k|            auto buf = make_contiguous_buffer(
 3571|  41.5k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|  41.5k|            SCN_TRY(result_it,
  ------------------
  |  | 3672|  41.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  41.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  41.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  41.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 41.2k, False: 350]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  41.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  41.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  41.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  41.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  41.2k|    }                                                  \
  |  |  |  | 3671|  41.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    350|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|    350|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|    350|                                        prefix_result.parsed_base));
 3575|       |
 3576|    350|            return ranges::next(
 3577|    350|                prefix_result.iterator,
 3578|    350|                ranges::distance(buf.view().begin(), result_it));
 3579|  41.5k|        }
 3580|       |
 3581|  8.57k|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|  8.57k|            localized_number_formatting_options<CharT>{loc};
 3586|  8.57k|#endif
 3587|       |
 3588|  8.57k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|  8.57k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  8.57k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  8.57k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8.20k, False: 370]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  8.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  8.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  8.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  8.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  8.20k|    }                                                  \
  |  |  |  | 3671|  8.57k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    370|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|    370|                parse_integer_digits_with_thsep(
 3590|    370|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|    370|                    prefix_result.parsed_base, locale_options));
 3592|    370|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|    370|            parse_digits_result;
 3594|       |
 3595|    370|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 24, False: 346]
  ------------------
 3596|     24|            if (auto e = check_thsep_grouping(
 3597|     24|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|     24|                    thsep_indices, locale_options.grouping);
 3599|     24|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24, False: 0]
  |  |  ------------------
  ------------------
 3600|     24|                return unexpected(e);
 3601|     24|            }
 3602|     24|        }
 3603|       |
 3604|    346|        auto nothsep_source_view =
 3605|    346|            std::basic_string_view<CharT>{nothsep_source};
 3606|    346|        SCN_TRY(
  ------------------
  |  | 3672|    346|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    346|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    346|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    346|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16, False: 330]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     16|    }                                                  \
  |  |  |  | 3671|    346|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    330|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|    330|            nothsep_source_it,
 3608|    330|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|    330|                                prefix_result.parsed_base));
 3610|       |
 3611|    330|        return ranges::next(
 3612|    330|            prefix_result.iterator,
 3613|    330|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|    330|                ranges::ssize(thsep_indices));
 3615|    346|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6192|  50.6k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|       |                          basic_contiguous_scan_context<char_type>>) {
 6197|       |            auto rd = make_reader<T, char_type>();
 6198|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|       |                return unexpected(e);
 6200|       |            }
 6201|       |
 6202|       |            return impl(rd, range, value);
 6203|       |        }
 6204|  50.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  50.6k|            auto rd = make_reader<T, char_type>();
 6206|  50.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  50.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 50.6k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|  50.6k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 50.6k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|  50.6k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|  50.6k|                return impl(rd, range, value);
 6213|  50.6k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|  50.6k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|  50.6k|    {
 6124|  50.6k|        const bool need_skipped_width =
 6125|  50.6k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 50.6k]
  |  Branch (6125:33): [True: 0, False: 50.6k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  50.6k|        auto it = rng.begin();
 6129|  50.6k|        std::ptrdiff_t prefix_width = 0;
 6130|  50.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 50.6k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  50.6k|        else {
 6138|  50.6k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  50.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  50.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  50.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  50.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 292, False: 50.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    292|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    292|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    292|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    292|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    292|    }                                                  \
  |  |  |  | 3671|  50.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  50.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  50.3k|            std::tie(it, prefix_width) = prefix_result;
 6140|  50.3k|        }
 6141|  50.3k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  50.3k|        std::ptrdiff_t value_width = 0;
 6145|  50.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 50.3k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  50.3k|        else {
 6161|  50.3k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  50.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  50.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  50.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 49.7k, False: 562]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  49.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  49.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  49.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  49.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  49.7k|    }                                                  \
  |  | 3671|  50.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  50.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|    562|                                             specs, value, loc));
 6163|       |
 6164|    562|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 562]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|    562|        }
 6170|       |
 6171|       |        // Read postfix
 6172|    562|        std::ptrdiff_t postfix_width = 0;
 6173|    562|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 434, False: 128]
  ------------------
 6174|    434|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|    434|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    434|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    434|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    434|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 434]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    434|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    434|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|    434|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|    434|                                 rd.skip_ws_before_read(), prefix_width,
 6177|    434|                                 value_width));
 6178|    434|            std::tie(it, postfix_width) = postfix_result;
 6179|    434|        }
 6180|       |
 6181|    562|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|    562|                                                 value_width, postfix_width);
 6183|    562|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 562]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|    562|        return it;
 6188|    562|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3538|  50.3k|    {
 3539|  50.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|  50.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  50.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  50.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  50.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 50.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  50.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  50.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|  50.3k|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|  50.3k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 276, False: 50.0k]
  ------------------
 3543|    276|            if constexpr (!std::is_signed_v<T>) {
 3544|    276|                return unexpected_scan_error(
 3545|    276|                    scan_error::invalid_scanned_value,
 3546|    276|                    "Unexpected '-' sign when parsing an "
 3547|    276|                    "unsigned value");
 3548|       |            }
 3549|       |            else {
 3550|       |                if (specs.type ==
 3551|       |                    detail::presentation_type::int_unsigned_decimal) {
 3552|       |                    return unexpected_scan_error(
 3553|       |                        scan_error::invalid_scanned_value,
 3554|       |                        "'u'-option disallows negative values");
 3555|       |                }
 3556|       |            }
 3557|    276|        }
 3558|       |
 3559|  50.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 48, False: 50.2k]
  ------------------
 3560|     48|            value = T{0};
 3561|     48|            return std::next(prefix_result.iterator);
 3562|     48|        }
 3563|       |
 3564|  50.2k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  50.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 41.6k, False: 8.61k]
  |  |  ------------------
  ------------------
 3565|  41.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|  41.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  41.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  41.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  41.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 41.2k, False: 426]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  41.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  41.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  41.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  41.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  41.2k|    }                                                  \
  |  |  |  | 3671|  41.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    426|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    426|                    parse_integer_digits_without_thsep(
 3567|    426|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    426|                        prefix_result.parsed_base));
 3569|       |
 3570|    426|            auto buf = make_contiguous_buffer(
 3571|    426|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    426|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    426|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    426|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    426|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    426|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6, False: 420]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      6|    }                                                  \
  |  |  |  | 3671|    426|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    420|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|    420|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|    420|                                        prefix_result.parsed_base));
 3575|       |
 3576|    420|            return ranges::next(
 3577|    420|                prefix_result.iterator,
 3578|    420|                ranges::distance(buf.view().begin(), result_it));
 3579|    426|        }
 3580|       |
 3581|  8.61k|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|  8.61k|            localized_number_formatting_options<CharT>{loc};
 3586|  8.61k|#endif
 3587|       |
 3588|  8.61k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|  8.61k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  8.61k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  8.61k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8.22k, False: 394]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  8.22k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  8.22k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  8.22k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  8.22k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  8.22k|    }                                                  \
  |  |  |  | 3671|  8.61k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    394|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|    394|                parse_integer_digits_with_thsep(
 3590|    394|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|    394|                    prefix_result.parsed_base, locale_options));
 3592|    394|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|    394|            parse_digits_result;
 3594|       |
 3595|    394|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 24, False: 370]
  ------------------
 3596|     24|            if (auto e = check_thsep_grouping(
 3597|     24|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|     24|                    thsep_indices, locale_options.grouping);
 3599|     24|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24, False: 0]
  |  |  ------------------
  ------------------
 3600|     24|                return unexpected(e);
 3601|     24|            }
 3602|     24|        }
 3603|       |
 3604|    370|        auto nothsep_source_view =
 3605|    370|            std::basic_string_view<CharT>{nothsep_source};
 3606|    370|        SCN_TRY(
  ------------------
  |  | 3672|    370|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    370|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    370|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    370|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 370]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    370|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    370|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|    370|            nothsep_source_it,
 3608|    370|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|    370|                                prefix_result.parsed_base));
 3610|       |
 3611|    370|        return ranges::next(
 3612|    370|            prefix_result.iterator,
 3613|    370|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|    370|                ranges::ssize(thsep_indices));
 3615|    370|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|  50.3k|    {
 3539|  50.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|  50.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  50.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  50.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  50.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 50.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  50.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  50.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|  50.3k|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|  50.3k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 276, False: 50.0k]
  ------------------
 3543|    276|            if constexpr (!std::is_signed_v<T>) {
 3544|    276|                return unexpected_scan_error(
 3545|    276|                    scan_error::invalid_scanned_value,
 3546|    276|                    "Unexpected '-' sign when parsing an "
 3547|    276|                    "unsigned value");
 3548|       |            }
 3549|       |            else {
 3550|       |                if (specs.type ==
 3551|       |                    detail::presentation_type::int_unsigned_decimal) {
 3552|       |                    return unexpected_scan_error(
 3553|       |                        scan_error::invalid_scanned_value,
 3554|       |                        "'u'-option disallows negative values");
 3555|       |                }
 3556|       |            }
 3557|    276|        }
 3558|       |
 3559|  50.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 48, False: 50.2k]
  ------------------
 3560|     48|            value = T{0};
 3561|     48|            return std::next(prefix_result.iterator);
 3562|     48|        }
 3563|       |
 3564|  50.2k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  50.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 41.6k, False: 8.61k]
  |  |  ------------------
  ------------------
 3565|  41.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|  41.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  41.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  41.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  41.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 41.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     10|    }                                                  \
  |  |  |  | 3671|  41.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  41.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|  41.6k|                    parse_integer_digits_without_thsep(
 3567|  41.6k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|  41.6k|                        prefix_result.parsed_base));
 3569|       |
 3570|  41.6k|            auto buf = make_contiguous_buffer(
 3571|  41.6k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|  41.6k|            SCN_TRY(result_it,
  ------------------
  |  | 3672|  41.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  41.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  41.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  41.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 41.2k, False: 420]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  41.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  41.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  41.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  41.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  41.2k|    }                                                  \
  |  |  |  | 3671|  41.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    420|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|    420|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|    420|                                        prefix_result.parsed_base));
 3575|       |
 3576|    420|            return ranges::next(
 3577|    420|                prefix_result.iterator,
 3578|    420|                ranges::distance(buf.view().begin(), result_it));
 3579|  41.6k|        }
 3580|       |
 3581|  8.61k|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|  8.61k|            localized_number_formatting_options<CharT>{loc};
 3586|  8.61k|#endif
 3587|       |
 3588|  8.61k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|  8.61k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  8.61k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  8.61k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8.22k, False: 394]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  8.22k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  8.22k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  8.22k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  8.22k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  8.22k|    }                                                  \
  |  |  |  | 3671|  8.61k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    394|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|    394|                parse_integer_digits_with_thsep(
 3590|    394|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|    394|                    prefix_result.parsed_base, locale_options));
 3592|    394|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|    394|            parse_digits_result;
 3594|       |
 3595|    394|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 24, False: 370]
  ------------------
 3596|     24|            if (auto e = check_thsep_grouping(
 3597|     24|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|     24|                    thsep_indices, locale_options.grouping);
 3599|     24|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24, False: 0]
  |  |  ------------------
  ------------------
 3600|     24|                return unexpected(e);
 3601|     24|            }
 3602|     24|        }
 3603|       |
 3604|    370|        auto nothsep_source_view =
 3605|    370|            std::basic_string_view<CharT>{nothsep_source};
 3606|    370|        SCN_TRY(
  ------------------
  |  | 3672|    370|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    370|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    370|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    370|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 370]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    370|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    370|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|    370|            nothsep_source_it,
 3608|    370|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|    370|                                prefix_result.parsed_base));
 3610|       |
 3611|    370|        return ranges::next(
 3612|    370|            prefix_result.iterator,
 3613|    370|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|    370|                ranges::ssize(thsep_indices));
 3615|    370|    }
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|   379k|{
 2061|   379k|    auto it = range.begin();
 2062|   381k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 379k, False: 2.13k]
  ------------------
 2063|   379k|        const auto val =
 2064|   379k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   379k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   379k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 379k, False: 0]
  |  |  ------------------
  ------------------
 2066|   379k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   379k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   379k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 377k, False: 2.53k]
  ------------------
 2069|   377k|                return it;
 2070|   377k|            }
 2071|   379k|        }
 2072|  2.53k|        it = val.iterator;
 2073|  2.53k|    }
 2074|       |
 2075|  2.13k|    return it;
 2076|   379k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|   379k|{
 1899|   379k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   379k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   379k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   379k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   379k|    auto it = range.begin();
 1903|   379k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   379k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   379k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 379k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|   379k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 379k, False: 0]
  ------------------
 1912|   379k|        ++it;
 1913|   379k|        return {it, string_type(1, *range.begin())};
 1914|   379k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|   379k|}
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1889|   379k|    {
 1890|   379k|        return !codepoint.empty();
 1891|   379k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|   379k|{
 2082|   379k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   379k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|   379k|{
 2951|   379k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 379k, False: 0]
  ------------------
 2952|   379k|        auto it = read_while_classic_space(range);
 2953|   379k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   379k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   379k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.13k, False: 377k]
  |  |  ------------------
  ------------------
 2955|  2.13k|            return unexpected(e);
 2956|  2.13k|        }
 2957|       |
 2958|   377k|        return it;
 2959|   379k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   379k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|   379k|{
 2117|       |    if constexpr (ranges::contiguous_range<Range> &&
 2118|       |                  ranges::sized_range<Range> &&
 2119|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2120|       |        auto buf = make_contiguous_buffer(range);
 2121|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|       |        return ranges::next(range.begin(),
 2123|       |                            ranges::distance(buf.view().begin(), it));
 2124|       |    }
 2125|   379k|    else {
 2126|   379k|        auto it = range.begin();
 2127|       |
 2128|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|       |            auto seg = get_contiguous_beginning(range);
 2130|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|       |                seg_it != seg.end()) {
 2132|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|       |            }
 2134|       |            ranges::advance(it, seg.size());
 2135|       |        }
 2136|       |
 2137|   379k|        return read_while_code_point(
 2138|   379k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   379k|    }
 2140|   379k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   379k|        : m_fptr([](storage fn,
  743|   379k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   379k|              cvref<T> obj = *get<T>(fn);
  745|   379k|              if constexpr (std::is_void_v<R>) {
  746|   379k|                  obj(static_cast<decltype(args)>(args)...);
  747|   379k|              }
  748|   379k|              else {
  749|   379k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   379k|              }
  751|   379k|          }),
  752|   379k|          m_storage(std::addressof(f))
  753|   379k|    {
  754|   379k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   379k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   379k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   379k|              else {
  749|   379k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   379k|              }
  751|   379k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   379k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   379k|        else if constexpr (std::is_object_v<T>) {
  688|   379k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   379k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|   379k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   379k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   379k|        {
  662|   379k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIaEENS0_13scan_expectedIPKcEERT_:
 5870|  79.3k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|  79.3k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  79.3k|            auto rd = make_reader<T, char_type>();
 5876|  79.3k|            return impl(rd, range, value);
 5877|       |        }
 5878|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5879|       |            auto rd = make_reader<T, char_type>();
 5880|       |            if (!is_segment_contiguous(range)) {
 5881|       |                return impl(rd, range, value);
 5882|       |            }
 5883|       |            auto crange = get_as_contiguous(range);
 5884|       |            SCN_TRY(it, impl(rd, crange, value));
 5885|       |            return ranges::next(range.begin(),
 5886|       |                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|  79.3k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEaEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  79.3k|    {
 5863|  79.3k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  79.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  79.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  79.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  79.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 762, False: 78.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    762|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    762|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    762|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    762|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    762|    }                                                  \
  |  |  |  | 3671|  79.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  78.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  78.6k|                        .transform_error(make_eof_scan_error));
 5865|  78.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  79.3k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|   493k|{
 5795|   493k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   493k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.91k, False: 489k]
  |  |  ------------------
  ------------------
 5796|  3.91k|        return unexpected(e);
 5797|  3.91k|    }
 5798|       |
 5799|   489k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 489k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   489k|    return skip_classic_whitespace(range);
 5804|   489k|}
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|  78.6k|    {
 3528|  78.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  78.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|  78.6k|        return read_default_with_base(range, value, 10);
 3530|  78.6k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
 5870|  91.8k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|  91.8k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  91.8k|            auto rd = make_reader<T, char_type>();
 5876|  91.8k|            return impl(rd, range, value);
 5877|       |        }
 5878|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5879|       |            auto rd = make_reader<T, char_type>();
 5880|       |            if (!is_segment_contiguous(range)) {
 5881|       |                return impl(rd, range, value);
 5882|       |            }
 5883|       |            auto crange = get_as_contiguous(range);
 5884|       |            SCN_TRY(it, impl(rd, crange, value));
 5885|       |            return ranges::next(range.begin(),
 5886|       |                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|  91.8k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  91.8k|    {
 5863|  91.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  91.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  91.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  91.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  91.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.16k, False: 90.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.16k|    }                                                  \
  |  |  |  | 3671|  91.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  90.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  90.7k|                        .transform_error(make_eof_scan_error));
 5865|  90.7k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  91.8k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|  90.7k|    {
 3528|  90.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  90.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|  90.7k|        return read_default_with_base(range, value, 10);
 3530|  90.7k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIxEENS0_13scan_expectedIPKcEERT_:
 5870|  93.6k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|  93.6k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  93.6k|            auto rd = make_reader<T, char_type>();
 5876|  93.6k|            return impl(rd, range, value);
 5877|       |        }
 5878|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5879|       |            auto rd = make_reader<T, char_type>();
 5880|       |            if (!is_segment_contiguous(range)) {
 5881|       |                return impl(rd, range, value);
 5882|       |            }
 5883|       |            auto crange = get_as_contiguous(range);
 5884|       |            SCN_TRY(it, impl(rd, crange, value));
 5885|       |            return ranges::next(range.begin(),
 5886|       |                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|  93.6k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EExEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  93.6k|    {
 5863|  93.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  93.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  93.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  93.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  93.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.29k, False: 92.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.29k|    }                                                  \
  |  |  |  | 3671|  93.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  92.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  92.3k|                        .transform_error(make_eof_scan_error));
 5865|  92.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  93.6k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|  92.3k|    {
 3528|  92.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  92.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|  92.3k|        return read_default_with_base(range, value, 10);
 3530|  92.3k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIhEENS0_13scan_expectedIPKcEERT_:
 5870|  70.5k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|  70.5k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  70.5k|            auto rd = make_reader<T, char_type>();
 5876|  70.5k|            return impl(rd, range, value);
 5877|       |        }
 5878|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5879|       |            auto rd = make_reader<T, char_type>();
 5880|       |            if (!is_segment_contiguous(range)) {
 5881|       |                return impl(rd, range, value);
 5882|       |            }
 5883|       |            auto crange = get_as_contiguous(range);
 5884|       |            SCN_TRY(it, impl(rd, crange, value));
 5885|       |            return ranges::next(range.begin(),
 5886|       |                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|  70.5k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEhEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  70.5k|    {
 5863|  70.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  70.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  70.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  70.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  70.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 582, False: 69.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    582|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    582|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    582|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    582|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    582|    }                                                  \
  |  |  |  | 3671|  70.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  69.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  69.9k|                        .transform_error(make_eof_scan_error));
 5865|  69.9k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  70.5k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|  69.9k|    {
 3528|  69.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  69.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|  69.9k|        return read_default_with_base(range, value, 10);
 3530|  69.9k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
 5870|  78.6k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|  78.6k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  78.6k|            auto rd = make_reader<T, char_type>();
 5876|  78.6k|            return impl(rd, range, value);
 5877|       |        }
 5878|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5879|       |            auto rd = make_reader<T, char_type>();
 5880|       |            if (!is_segment_contiguous(range)) {
 5881|       |                return impl(rd, range, value);
 5882|       |            }
 5883|       |            auto crange = get_as_contiguous(range);
 5884|       |            SCN_TRY(it, impl(rd, crange, value));
 5885|       |            return ranges::next(range.begin(),
 5886|       |                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|  78.6k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  78.6k|    {
 5863|  78.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  78.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  78.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  78.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  78.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 783, False: 77.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    783|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    783|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    783|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    783|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    783|    }                                                  \
  |  |  |  | 3671|  78.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  77.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  77.8k|                        .transform_error(make_eof_scan_error));
 5865|  77.8k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  78.6k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|  77.8k|    {
 3528|  77.8k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  77.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|  77.8k|        return read_default_with_base(range, value, 10);
 3530|  77.8k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIyEENS0_13scan_expectedIPKcEERT_:
 5870|  79.7k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|  79.7k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  79.7k|            auto rd = make_reader<T, char_type>();
 5876|  79.7k|            return impl(rd, range, value);
 5877|       |        }
 5878|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5879|       |            auto rd = make_reader<T, char_type>();
 5880|       |            if (!is_segment_contiguous(range)) {
 5881|       |                return impl(rd, range, value);
 5882|       |            }
 5883|       |            auto crange = get_as_contiguous(range);
 5884|       |            SCN_TRY(it, impl(rd, crange, value));
 5885|       |            return ranges::next(range.begin(),
 5886|       |                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|  79.7k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEyEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  79.7k|    {
 5863|  79.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  79.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  79.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  79.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  79.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 843, False: 78.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    843|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    843|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    843|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    843|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    843|    }                                                  \
  |  |  |  | 3671|  79.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  78.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  78.8k|                        .transform_error(make_eof_scan_error));
 5865|  78.8k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  79.7k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|  78.8k|    {
 3528|  78.8k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  78.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|  78.8k|        return read_default_with_base(range, value, 10);
 3530|  78.8k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|  79.2k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|       |                          basic_contiguous_scan_context<char_type>>) {
 5875|       |            auto rd = make_reader<T, char_type>();
 5876|       |            return impl(rd, range, value);
 5877|       |        }
 5878|  79.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  79.2k|            auto rd = make_reader<T, char_type>();
 5880|  79.2k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 79.2k, False: 0]
  ------------------
 5881|  79.2k|                return impl(rd, range, value);
 5882|  79.2k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|  79.2k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  79.2k|    {
 5863|  79.2k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  79.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  79.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  79.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  79.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 717, False: 78.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    717|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    717|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    717|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    717|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    717|    }                                                  \
  |  |  |  | 3671|  79.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  78.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  78.5k|                        .transform_error(make_eof_scan_error));
 5865|  78.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  79.2k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5794|   489k|{
 5795|   489k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   489k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.91k, False: 485k]
  |  |  ------------------
  ------------------
 5796|  3.91k|        return unexpected(e);
 5797|  3.91k|    }
 5798|       |
 5799|   485k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 485k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   485k|    return skip_classic_whitespace(range);
 5804|   485k|}
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3527|  78.5k|    {
 3528|  78.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  78.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|  78.5k|        return read_default_with_base(range, value, 10);
 3530|  78.5k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3491|  78.5k|    {
 3492|  78.5k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|  78.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  78.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  78.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  78.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 78.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  78.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  78.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|  78.5k|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|       |        if constexpr (!std::is_signed_v<T>) {
 3496|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3497|       |                return unexpected_scan_error(
 3498|       |                    scan_error::invalid_scanned_value,
 3499|       |                    "Unexpected '-' sign when parsing an "
 3500|       |                    "unsigned value");
 3501|       |            }
 3502|       |        }
 3503|       |
 3504|  78.5k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 78.5k]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|   154k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|  78.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  78.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  78.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  78.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.94k, False: 75.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.94k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.94k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.94k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.94k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.94k|    }                                                  \
  |  |  |  | 3671|  78.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  75.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|   154k|                parse_integer_digits_without_thsep(
 3511|   154k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|   154k|                    prefix_result.parsed_base));
 3513|       |
 3514|   154k|        auto buf = make_contiguous_buffer(
 3515|   154k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|   154k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|  75.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  75.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  75.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  75.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.59k, False: 73.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.59k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.59k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.59k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.59k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.59k|    }                                                  \
  |  |  |  | 3671|  75.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  73.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|  73.0k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|  73.0k|                                    prefix_result.parsed_base));
 3519|       |
 3520|  73.0k|        return ranges::next(prefix_result.iterator,
 3521|  73.0k|                            ranges::distance(buf.view().begin(), result_it));
 3522|   154k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|  90.2k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|       |                          basic_contiguous_scan_context<char_type>>) {
 5875|       |            auto rd = make_reader<T, char_type>();
 5876|       |            return impl(rd, range, value);
 5877|       |        }
 5878|  90.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  90.2k|            auto rd = make_reader<T, char_type>();
 5880|  90.2k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 90.2k, False: 0]
  ------------------
 5881|  90.2k|                return impl(rd, range, value);
 5882|  90.2k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|  90.2k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  90.2k|    {
 5863|  90.2k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  90.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  90.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  90.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  90.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.10k, False: 89.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.10k|    }                                                  \
  |  |  |  | 3671|  90.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  89.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  89.1k|                        .transform_error(make_eof_scan_error));
 5865|  89.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  90.2k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3527|  89.1k|    {
 3528|  89.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  89.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|  89.1k|        return read_default_with_base(range, value, 10);
 3530|  89.1k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3491|  89.1k|    {
 3492|  89.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|  89.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  89.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  89.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  89.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 89.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  89.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  89.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|  89.1k|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|       |        if constexpr (!std::is_signed_v<T>) {
 3496|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3497|       |                return unexpected_scan_error(
 3498|       |                    scan_error::invalid_scanned_value,
 3499|       |                    "Unexpected '-' sign when parsing an "
 3500|       |                    "unsigned value");
 3501|       |            }
 3502|       |        }
 3503|       |
 3504|  89.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 89.1k]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|   174k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|  89.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  89.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  89.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  89.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.86k, False: 85.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.86k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.86k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.86k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.86k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.86k|    }                                                  \
  |  |  |  | 3671|  89.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  85.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|   174k|                parse_integer_digits_without_thsep(
 3511|   174k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|   174k|                    prefix_result.parsed_base));
 3513|       |
 3514|   174k|        auto buf = make_contiguous_buffer(
 3515|   174k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|   174k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|  85.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  85.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  85.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  85.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.28k, False: 83.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.28k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.28k|    }                                                  \
  |  |  |  | 3671|  85.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  83.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|  83.9k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|  83.9k|                                    prefix_result.parsed_base));
 3519|       |
 3520|  83.9k|        return ranges::next(prefix_result.iterator,
 3521|  83.9k|                            ranges::distance(buf.view().begin(), result_it));
 3522|   174k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|  91.8k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|       |                          basic_contiguous_scan_context<char_type>>) {
 5875|       |            auto rd = make_reader<T, char_type>();
 5876|       |            return impl(rd, range, value);
 5877|       |        }
 5878|  91.8k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  91.8k|            auto rd = make_reader<T, char_type>();
 5880|  91.8k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 91.8k, False: 0]
  ------------------
 5881|  91.8k|                return impl(rd, range, value);
 5882|  91.8k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|  91.8k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  91.8k|    {
 5863|  91.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  91.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  91.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  91.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  91.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.22k, False: 90.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.22k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.22k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.22k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.22k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.22k|    }                                                  \
  |  |  |  | 3671|  91.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  90.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  90.6k|                        .transform_error(make_eof_scan_error));
 5865|  90.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  91.8k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3527|  90.6k|    {
 3528|  90.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  90.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|  90.6k|        return read_default_with_base(range, value, 10);
 3530|  90.6k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3491|  90.6k|    {
 3492|  90.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|  90.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  90.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  90.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  90.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 90.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  90.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  90.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|  90.6k|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|       |        if constexpr (!std::is_signed_v<T>) {
 3496|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3497|       |                return unexpected_scan_error(
 3498|       |                    scan_error::invalid_scanned_value,
 3499|       |                    "Unexpected '-' sign when parsing an "
 3500|       |                    "unsigned value");
 3501|       |            }
 3502|       |        }
 3503|       |
 3504|  90.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 90.6k]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|   177k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|  90.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  90.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  90.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  90.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.16k, False: 86.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.16k|    }                                                  \
  |  |  |  | 3671|  90.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  86.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|   177k|                parse_integer_digits_without_thsep(
 3511|   177k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|   177k|                    prefix_result.parsed_base));
 3513|       |
 3514|   177k|        auto buf = make_contiguous_buffer(
 3515|   177k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|   177k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|  86.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  86.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  86.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  86.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 864, False: 85.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    864|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    864|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    864|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    864|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    864|    }                                                  \
  |  |  |  | 3671|  86.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  85.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|  85.6k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|  85.6k|                                    prefix_result.parsed_base));
 3519|       |
 3520|  85.6k|        return ranges::next(prefix_result.iterator,
 3521|  85.6k|                            ranges::distance(buf.view().begin(), result_it));
 3522|   177k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|  70.4k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|       |                          basic_contiguous_scan_context<char_type>>) {
 5875|       |            auto rd = make_reader<T, char_type>();
 5876|       |            return impl(rd, range, value);
 5877|       |        }
 5878|  70.4k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  70.4k|            auto rd = make_reader<T, char_type>();
 5880|  70.4k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 70.4k, False: 0]
  ------------------
 5881|  70.4k|                return impl(rd, range, value);
 5882|  70.4k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|  70.4k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  70.4k|    {
 5863|  70.4k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  70.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  70.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  70.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  70.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 564, False: 69.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    564|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    564|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    564|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    564|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    564|    }                                                  \
  |  |  |  | 3671|  70.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  69.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  69.8k|                        .transform_error(make_eof_scan_error));
 5865|  69.8k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  70.4k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3527|  69.8k|    {
 3528|  69.8k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  69.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|  69.8k|        return read_default_with_base(range, value, 10);
 3530|  69.8k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3491|  69.8k|    {
 3492|  69.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|  69.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  69.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  69.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  69.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 69.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  69.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  69.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|  69.8k|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|  69.8k|        if constexpr (!std::is_signed_v<T>) {
 3496|  69.8k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3496:17): [True: 2.25k, False: 67.6k]
  ------------------
 3497|  2.25k|                return unexpected_scan_error(
 3498|  2.25k|                    scan_error::invalid_scanned_value,
 3499|  2.25k|                    "Unexpected '-' sign when parsing an "
 3500|  2.25k|                    "unsigned value");
 3501|  2.25k|            }
 3502|  69.8k|        }
 3503|       |
 3504|  69.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 69.8k]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|   137k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|  69.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  69.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  69.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  69.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.16k, False: 67.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.16k|    }                                                  \
  |  |  |  | 3671|  69.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  67.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|   137k|                parse_integer_digits_without_thsep(
 3511|   137k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|   137k|                    prefix_result.parsed_base));
 3513|       |
 3514|   137k|        auto buf = make_contiguous_buffer(
 3515|   137k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|   137k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|  67.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  67.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  67.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  67.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.27k, False: 66.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.27k|    }                                                  \
  |  |  |  | 3671|  67.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  66.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|  66.4k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|  66.4k|                                    prefix_result.parsed_base));
 3519|       |
 3520|  66.4k|        return ranges::next(prefix_result.iterator,
 3521|  66.4k|                            ranges::distance(buf.view().begin(), result_it));
 3522|   137k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|  78.5k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|       |                          basic_contiguous_scan_context<char_type>>) {
 5875|       |            auto rd = make_reader<T, char_type>();
 5876|       |            return impl(rd, range, value);
 5877|       |        }
 5878|  78.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  78.5k|            auto rd = make_reader<T, char_type>();
 5880|  78.5k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 78.5k, False: 0]
  ------------------
 5881|  78.5k|                return impl(rd, range, value);
 5882|  78.5k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|  78.5k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  78.5k|    {
 5863|  78.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  78.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  78.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  78.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  78.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 762, False: 77.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    762|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    762|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    762|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    762|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    762|    }                                                  \
  |  |  |  | 3671|  78.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  77.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  77.7k|                        .transform_error(make_eof_scan_error));
 5865|  77.7k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  78.5k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3527|  77.7k|    {
 3528|  77.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  77.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|  77.7k|        return read_default_with_base(range, value, 10);
 3530|  77.7k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3491|  77.7k|    {
 3492|  77.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|  77.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  77.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  77.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  77.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 77.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  77.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  77.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|  77.7k|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|  77.7k|        if constexpr (!std::is_signed_v<T>) {
 3496|  77.7k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3496:17): [True: 2.32k, False: 75.4k]
  ------------------
 3497|  2.32k|                return unexpected_scan_error(
 3498|  2.32k|                    scan_error::invalid_scanned_value,
 3499|  2.32k|                    "Unexpected '-' sign when parsing an "
 3500|  2.32k|                    "unsigned value");
 3501|  2.32k|            }
 3502|  77.7k|        }
 3503|       |
 3504|  77.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 77.7k]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|   152k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|  77.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  77.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  77.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  77.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.61k, False: 75.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.61k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.61k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.61k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.61k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.61k|    }                                                  \
  |  |  |  | 3671|  77.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  75.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|   152k|                parse_integer_digits_without_thsep(
 3511|   152k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|   152k|                    prefix_result.parsed_base));
 3513|       |
 3514|   152k|        auto buf = make_contiguous_buffer(
 3515|   152k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|   152k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|  75.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  75.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  75.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  75.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 558, False: 74.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    558|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    558|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    558|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    558|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    558|    }                                                  \
  |  |  |  | 3671|  75.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  74.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|  74.5k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|  74.5k|                                    prefix_result.parsed_base));
 3519|       |
 3520|  74.5k|        return ranges::next(prefix_result.iterator,
 3521|  74.5k|                            ranges::distance(buf.view().begin(), result_it));
 3522|   152k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|  79.5k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|       |                          basic_contiguous_scan_context<char_type>>) {
 5875|       |            auto rd = make_reader<T, char_type>();
 5876|       |            return impl(rd, range, value);
 5877|       |        }
 5878|  79.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  79.5k|            auto rd = make_reader<T, char_type>();
 5880|  79.5k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 79.5k, False: 0]
  ------------------
 5881|  79.5k|                return impl(rd, range, value);
 5882|  79.5k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|  79.5k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  79.5k|    {
 5863|  79.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  79.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  79.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  79.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  79.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 822, False: 78.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    822|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    822|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    822|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    822|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    822|    }                                                  \
  |  |  |  | 3671|  79.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  78.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  78.6k|                        .transform_error(make_eof_scan_error));
 5865|  78.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  79.5k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3527|  78.6k|    {
 3528|  78.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  78.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|  78.6k|        return read_default_with_base(range, value, 10);
 3530|  78.6k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3491|  78.6k|    {
 3492|  78.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|  78.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  78.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  78.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  78.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 78.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  78.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  78.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|  78.6k|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|  78.6k|        if constexpr (!std::is_signed_v<T>) {
 3496|  78.6k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3496:17): [True: 2.37k, False: 76.3k]
  ------------------
 3497|  2.37k|                return unexpected_scan_error(
 3498|  2.37k|                    scan_error::invalid_scanned_value,
 3499|  2.37k|                    "Unexpected '-' sign when parsing an "
 3500|  2.37k|                    "unsigned value");
 3501|  2.37k|            }
 3502|  78.6k|        }
 3503|       |
 3504|  78.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 78.6k]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|   154k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|  78.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  78.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  78.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  78.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.67k, False: 76.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.67k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.67k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.67k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.67k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.67k|    }                                                  \
  |  |  |  | 3671|  78.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  76.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|   154k|                parse_integer_digits_without_thsep(
 3511|   154k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|   154k|                    prefix_result.parsed_base));
 3513|       |
 3514|   154k|        auto buf = make_contiguous_buffer(
 3515|   154k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|   154k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|  76.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  76.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  76.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  76.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 381, False: 75.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    381|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    381|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    381|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    381|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    381|    }                                                  \
  |  |  |  | 3671|  76.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  75.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|  75.6k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|  75.6k|                                    prefix_result.parsed_base));
 3519|       |
 3520|  75.6k|        return ranges::next(prefix_result.iterator,
 3521|  75.6k|                            ranges::distance(buf.view().begin(), result_it));
 3522|   154k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISF_EEvE4typeELPv0EEEOSF_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2875|  1.78M|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  928|  1.78M|    static_cast<    \
  |  |  929|  1.78M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2876|  1.78M|          m_range(SCN_FWD(r)),
  ------------------
  |  |  930|  1.78M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2877|  1.78M|          m_current(m_range.begin())
 2878|  1.78M|    {
 2879|  1.78M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2882|  5.04M|    {
 2883|  5.04M|        return m_current;
 2884|  5.04M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2887|  3.26M|    {
 2888|  3.26M|        return m_range.end();
 2889|  3.26M|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2902|  1.55M|    {
 2903|  1.55M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  1.55M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.55M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|  1.55M|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 2905|  1.55M|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 1.55M]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|  1.55M|        }
 2909|  1.55M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  1.55M|    static_cast<    \
  |  |  929|  1.55M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|  1.55M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2892|  1.70M|    {
 2893|  1.70M|        return ranges::subrange{begin(), end()};
 2894|  1.70M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIaEENS0_13scan_expectedIPKcEERT_:
 6192|   249k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|   249k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   249k|            auto rd = make_reader<T, char_type>();
 6198|   249k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   249k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 249k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   249k|            return impl(rd, range, value);
 6203|       |        }
 6204|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6205|       |            auto rd = make_reader<T, char_type>();
 6206|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|       |                return unexpected(e);
 6208|       |            }
 6209|       |
 6210|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|       |                specs.width != 0) {
 6212|       |                return impl(rd, range, value);
 6213|       |            }
 6214|       |
 6215|       |            auto crange = get_as_contiguous(range);
 6216|       |            SCN_TRY(it, impl(rd, crange, value));
 6217|       |            return ranges::next(range.begin(),
 6218|       |                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   249k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEaEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   249k|    {
 6124|   249k|        const bool need_skipped_width =
 6125|   249k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 249k]
  |  Branch (6125:33): [True: 0, False: 249k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   249k|        auto it = rng.begin();
 6129|   249k|        std::ptrdiff_t prefix_width = 0;
 6130|   249k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 249k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   249k|        else {
 6138|   249k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   249k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   249k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   249k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   249k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.50k, False: 246k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.50k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.50k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.50k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.50k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.50k|    }                                                  \
  |  |  |  | 3671|   249k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   246k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   246k|            std::tie(it, prefix_width) = prefix_result;
 6140|   246k|        }
 6141|   246k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   246k|        std::ptrdiff_t value_width = 0;
 6145|   246k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 246k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   246k|        else {
 6161|   246k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   246k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   246k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   246k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 22.5k, False: 224k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  22.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  22.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  22.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  22.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  22.5k|    }                                                  \
  |  | 3671|   246k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   246k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   224k|                                             specs, value, loc));
 6163|       |
 6164|   224k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 224k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   224k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   224k|        std::ptrdiff_t postfix_width = 0;
 6173|   224k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 222k, False: 1.76k]
  ------------------
 6174|   222k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   222k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   222k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   222k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   222k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 222k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   222k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   222k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   222k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   222k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   222k|                                 value_width));
 6178|   222k|            std::tie(it, postfix_width) = postfix_result;
 6179|   222k|        }
 6180|       |
 6181|   224k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   224k|                                                 value_width, postfix_width);
 6183|   224k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 224k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   224k|        return it;
 6188|   224k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|  1.70M|    {
 6037|  1.70M|        const bool need_skipped_width =
 6038|  1.70M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 1.70M]
  |  Branch (6038:33): [True: 0, False: 1.70M]
  ------------------
 6039|  1.70M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  1.70M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 1.70M]
  ------------------
 6043|  1.70M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 1.70M]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|  1.70M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 1.70M, False: 0]
  |  Branch (6047:56): [True: 1.70M, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  1.70M|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 1.70M]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  3.39M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|  1.70M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.70M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.70M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.70M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18.9k, False: 1.68M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  18.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  18.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  18.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  18.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  18.9k|    }                                                  \
  |  |  |  | 3671|  1.70M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.68M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  3.39M|                            make_eof_scan_error));
 6058|       |
 6059|  3.39M|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 1.68M]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|  1.68M|            return result_type{it, 0};
 6067|  3.39M|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|  1.70M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|  1.54M|    {
 6079|  1.54M|        const bool need_skipped_width =
 6080|  1.54M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 1.54M]
  |  Branch (6080:33): [True: 0, False: 1.54M]
  ------------------
 6081|  1.54M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  1.54M|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 1.54M]
  ------------------
 6084|  1.54M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 1.54M]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|  1.54M|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 1.54M, False: 0]
  ------------------
 6093|  1.54M|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 1.54M]
  ------------------
 6094|  1.54M|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|  1.54M|        return result_type{rng.begin(), 0};
 6118|  1.54M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
 6192|   323k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|   323k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   323k|            auto rd = make_reader<T, char_type>();
 6198|   323k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   323k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 323k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   323k|            return impl(rd, range, value);
 6203|       |        }
 6204|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6205|       |            auto rd = make_reader<T, char_type>();
 6206|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|       |                return unexpected(e);
 6208|       |            }
 6209|       |
 6210|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|       |                specs.width != 0) {
 6212|       |                return impl(rd, range, value);
 6213|       |            }
 6214|       |
 6215|       |            auto crange = get_as_contiguous(range);
 6216|       |            SCN_TRY(it, impl(rd, crange, value));
 6217|       |            return ranges::next(range.begin(),
 6218|       |                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   323k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   323k|    {
 6124|   323k|        const bool need_skipped_width =
 6125|   323k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 323k]
  |  Branch (6125:33): [True: 0, False: 323k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   323k|        auto it = rng.begin();
 6129|   323k|        std::ptrdiff_t prefix_width = 0;
 6130|   323k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 323k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   323k|        else {
 6138|   323k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   323k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   323k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   323k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   323k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.05k, False: 319k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.05k|    }                                                  \
  |  |  |  | 3671|   323k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   319k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   319k|            std::tie(it, prefix_width) = prefix_result;
 6140|   319k|        }
 6141|   319k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   319k|        std::ptrdiff_t value_width = 0;
 6145|   319k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 319k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   319k|        else {
 6161|   319k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   319k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   319k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   319k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 20.9k, False: 298k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  20.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  20.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  20.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  20.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  20.9k|    }                                                  \
  |  | 3671|   319k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   319k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   298k|                                             specs, value, loc));
 6163|       |
 6164|   298k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 298k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   298k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   298k|        std::ptrdiff_t postfix_width = 0;
 6173|   298k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 295k, False: 2.91k]
  ------------------
 6174|   295k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   295k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   295k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   295k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   295k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 295k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   295k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   295k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   295k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   295k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   295k|                                 value_width));
 6178|   295k|            std::tie(it, postfix_width) = postfix_result;
 6179|   295k|        }
 6180|       |
 6181|   298k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   298k|                                                 value_width, postfix_width);
 6183|   298k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 298k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   298k|        return it;
 6188|   298k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIxEENS0_13scan_expectedIPKcEERT_:
 6192|   329k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|   329k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   329k|            auto rd = make_reader<T, char_type>();
 6198|   329k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   329k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 329k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   329k|            return impl(rd, range, value);
 6203|       |        }
 6204|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6205|       |            auto rd = make_reader<T, char_type>();
 6206|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|       |                return unexpected(e);
 6208|       |            }
 6209|       |
 6210|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|       |                specs.width != 0) {
 6212|       |                return impl(rd, range, value);
 6213|       |            }
 6214|       |
 6215|       |            auto crange = get_as_contiguous(range);
 6216|       |            SCN_TRY(it, impl(rd, crange, value));
 6217|       |            return ranges::next(range.begin(),
 6218|       |                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   329k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EExEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   329k|    {
 6124|   329k|        const bool need_skipped_width =
 6125|   329k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 329k]
  |  Branch (6125:33): [True: 0, False: 329k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   329k|        auto it = rng.begin();
 6129|   329k|        std::ptrdiff_t prefix_width = 0;
 6130|   329k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 329k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   329k|        else {
 6138|   329k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   329k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   329k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   329k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   329k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.49k, False: 325k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.49k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.49k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.49k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.49k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.49k|    }                                                  \
  |  |  |  | 3671|   329k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   325k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   325k|            std::tie(it, prefix_width) = prefix_result;
 6140|   325k|        }
 6141|   325k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   325k|        std::ptrdiff_t value_width = 0;
 6145|   325k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 325k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   325k|        else {
 6161|   325k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   325k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   325k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   325k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 20.5k, False: 304k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  20.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  20.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  20.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  20.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  20.5k|    }                                                  \
  |  | 3671|   325k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   325k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   304k|                                             specs, value, loc));
 6163|       |
 6164|   304k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 304k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   304k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   304k|        std::ptrdiff_t postfix_width = 0;
 6173|   304k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 301k, False: 3.22k]
  ------------------
 6174|   301k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   301k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   301k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   301k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   301k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 301k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   301k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   301k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   301k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   301k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   301k|                                 value_width));
 6178|   301k|            std::tie(it, postfix_width) = postfix_result;
 6179|   301k|        }
 6180|       |
 6181|   304k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   304k|                                                 value_width, postfix_width);
 6183|   304k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 304k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   304k|        return it;
 6188|   304k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIhEENS0_13scan_expectedIPKcEERT_:
 6192|   244k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|   244k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   244k|            auto rd = make_reader<T, char_type>();
 6198|   244k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   244k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 244k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   244k|            return impl(rd, range, value);
 6203|       |        }
 6204|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6205|       |            auto rd = make_reader<T, char_type>();
 6206|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|       |                return unexpected(e);
 6208|       |            }
 6209|       |
 6210|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|       |                specs.width != 0) {
 6212|       |                return impl(rd, range, value);
 6213|       |            }
 6214|       |
 6215|       |            auto crange = get_as_contiguous(range);
 6216|       |            SCN_TRY(it, impl(rd, crange, value));
 6217|       |            return ranges::next(range.begin(),
 6218|       |                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   244k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEhEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   244k|    {
 6124|   244k|        const bool need_skipped_width =
 6125|   244k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 244k]
  |  Branch (6125:33): [True: 0, False: 244k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   244k|        auto it = rng.begin();
 6129|   244k|        std::ptrdiff_t prefix_width = 0;
 6130|   244k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 244k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   244k|        else {
 6138|   244k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   244k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   244k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   244k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   244k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.05k, False: 242k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.05k|    }                                                  \
  |  |  |  | 3671|   244k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   242k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   242k|            std::tie(it, prefix_width) = prefix_result;
 6140|   242k|        }
 6141|   242k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   242k|        std::ptrdiff_t value_width = 0;
 6145|   242k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 242k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   242k|        else {
 6161|   242k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   242k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   242k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   242k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 22.9k, False: 219k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  22.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  22.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  22.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  22.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  22.9k|    }                                                  \
  |  | 3671|   242k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   242k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   219k|                                             specs, value, loc));
 6163|       |
 6164|   219k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 219k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   219k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   219k|        std::ptrdiff_t postfix_width = 0;
 6173|   219k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 218k, False: 1.43k]
  ------------------
 6174|   218k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   218k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   218k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   218k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   218k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 218k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   218k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   218k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   218k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   218k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   218k|                                 value_width));
 6178|   218k|            std::tie(it, postfix_width) = postfix_result;
 6179|   218k|        }
 6180|       |
 6181|   219k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   219k|                                                 value_width, postfix_width);
 6183|   219k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 219k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   219k|        return it;
 6188|   219k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
 6192|   278k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|   278k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   278k|            auto rd = make_reader<T, char_type>();
 6198|   278k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   278k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 278k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   278k|            return impl(rd, range, value);
 6203|       |        }
 6204|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6205|       |            auto rd = make_reader<T, char_type>();
 6206|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|       |                return unexpected(e);
 6208|       |            }
 6209|       |
 6210|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|       |                specs.width != 0) {
 6212|       |                return impl(rd, range, value);
 6213|       |            }
 6214|       |
 6215|       |            auto crange = get_as_contiguous(range);
 6216|       |            SCN_TRY(it, impl(rd, crange, value));
 6217|       |            return ranges::next(range.begin(),
 6218|       |                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   278k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   278k|    {
 6124|   278k|        const bool need_skipped_width =
 6125|   278k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 278k]
  |  Branch (6125:33): [True: 0, False: 278k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   278k|        auto it = rng.begin();
 6129|   278k|        std::ptrdiff_t prefix_width = 0;
 6130|   278k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 278k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   278k|        else {
 6138|   278k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   278k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   278k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   278k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   278k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.82k, False: 275k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.82k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.82k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.82k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.82k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.82k|    }                                                  \
  |  |  |  | 3671|   278k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   275k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   275k|            std::tie(it, prefix_width) = prefix_result;
 6140|   275k|        }
 6141|   275k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   275k|        std::ptrdiff_t value_width = 0;
 6145|   275k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 275k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   275k|        else {
 6161|   275k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   275k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   275k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   275k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 22.1k, False: 253k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  22.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  22.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  22.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  22.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  22.1k|    }                                                  \
  |  | 3671|   275k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   275k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   253k|                                             specs, value, loc));
 6163|       |
 6164|   253k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 253k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   253k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   253k|        std::ptrdiff_t postfix_width = 0;
 6173|   253k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 251k, False: 2.00k]
  ------------------
 6174|   251k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   251k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   251k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   251k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   251k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 251k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   251k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   251k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   251k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   251k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   251k|                                 value_width));
 6178|   251k|            std::tie(it, postfix_width) = postfix_result;
 6179|   251k|        }
 6180|       |
 6181|   253k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   253k|                                                 value_width, postfix_width);
 6183|   253k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 253k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   253k|        return it;
 6188|   253k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIyEENS0_13scan_expectedIPKcEERT_:
 6192|   281k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|   281k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   281k|            auto rd = make_reader<T, char_type>();
 6198|   281k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   281k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 281k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   281k|            return impl(rd, range, value);
 6203|       |        }
 6204|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6205|       |            auto rd = make_reader<T, char_type>();
 6206|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|       |                return unexpected(e);
 6208|       |            }
 6209|       |
 6210|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|       |                specs.width != 0) {
 6212|       |                return impl(rd, range, value);
 6213|       |            }
 6214|       |
 6215|       |            auto crange = get_as_contiguous(range);
 6216|       |            SCN_TRY(it, impl(rd, crange, value));
 6217|       |            return ranges::next(range.begin(),
 6218|       |                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   281k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEyEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   281k|    {
 6124|   281k|        const bool need_skipped_width =
 6125|   281k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 281k]
  |  Branch (6125:33): [True: 0, False: 281k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   281k|        auto it = rng.begin();
 6129|   281k|        std::ptrdiff_t prefix_width = 0;
 6130|   281k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 281k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   281k|        else {
 6138|   281k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   281k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   281k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   281k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   281k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.05k, False: 278k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.05k|    }                                                  \
  |  |  |  | 3671|   281k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   278k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   278k|            std::tie(it, prefix_width) = prefix_result;
 6140|   278k|        }
 6141|   278k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   278k|        std::ptrdiff_t value_width = 0;
 6145|   278k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 278k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   278k|        else {
 6161|   278k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   278k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   278k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   278k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 21.9k, False: 256k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  21.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  21.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  21.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  21.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  21.9k|    }                                                  \
  |  | 3671|   278k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   278k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   256k|                                             specs, value, loc));
 6163|       |
 6164|   256k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 256k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   256k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   256k|        std::ptrdiff_t postfix_width = 0;
 6173|   256k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 254k, False: 2.18k]
  ------------------
 6174|   254k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   254k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   254k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   254k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   254k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 254k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   254k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   254k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   254k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   254k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   254k|                                 value_width));
 6178|   254k|            std::tie(it, postfix_width) = postfix_result;
 6179|   254k|        }
 6180|       |
 6181|   256k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   256k|                                                 value_width, postfix_width);
 6183|   256k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 256k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   256k|        return it;
 6188|   256k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIaEENS0_13scan_expectedIPKwEERT_:
 5870|  12.6k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|  12.6k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  12.6k|            auto rd = make_reader<T, char_type>();
 5876|  12.6k|            return impl(rd, range, value);
 5877|       |        }
 5878|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5879|       |            auto rd = make_reader<T, char_type>();
 5880|       |            if (!is_segment_contiguous(range)) {
 5881|       |                return impl(rd, range, value);
 5882|       |            }
 5883|       |            auto crange = get_as_contiguous(range);
 5884|       |            SCN_TRY(it, impl(rd, crange, value));
 5885|       |            return ranges::next(range.begin(),
 5886|       |                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|  12.6k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEaEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  12.6k|    {
 5863|  12.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 87, False: 12.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     87|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     87|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     87|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     87|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     87|    }                                                  \
  |  |  |  | 3671|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  12.5k|                        .transform_error(make_eof_scan_error));
 5865|  12.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  12.6k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|  76.0k|{
 5795|  76.0k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  76.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 249, False: 75.7k]
  |  |  ------------------
  ------------------
 5796|    249|        return unexpected(e);
 5797|    249|    }
 5798|       |
 5799|  75.7k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 75.7k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|  75.7k|    return skip_classic_whitespace(range);
 5804|  75.7k|}
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|  12.5k|    {
 3528|  12.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  12.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|  12.5k|        return read_default_with_base(range, value, 10);
 3530|  12.5k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|  12.5k|    {
 3492|  12.5k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|  12.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 12.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  12.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|  12.5k|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|       |        if constexpr (!std::is_signed_v<T>) {
 3496|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3497|       |                return unexpected_scan_error(
 3498|       |                    scan_error::invalid_scanned_value,
 3499|       |                    "Unexpected '-' sign when parsing an "
 3500|       |                    "unsigned value");
 3501|       |            }
 3502|       |        }
 3503|       |
 3504|  12.5k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 12.5k]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  25.1k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|  12.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 15, False: 12.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     15|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     15|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     15|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     15|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     15|    }                                                  \
  |  |  |  | 3671|  12.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  25.1k|                parse_integer_digits_without_thsep(
 3511|  25.1k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  25.1k|                    prefix_result.parsed_base));
 3513|       |
 3514|  25.1k|        auto buf = make_contiguous_buffer(
 3515|  25.1k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  25.1k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|  12.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12.4k, False: 144]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  12.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  12.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  12.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  12.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  12.4k|    }                                                  \
  |  |  |  | 3671|  12.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    144|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|    144|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|    144|                                    prefix_result.parsed_base));
 3519|       |
 3520|    144|        return ranges::next(prefix_result.iterator,
 3521|    144|                            ranges::distance(buf.view().begin(), result_it));
 3522|  25.1k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
 5870|  12.6k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|  12.6k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  12.6k|            auto rd = make_reader<T, char_type>();
 5876|  12.6k|            return impl(rd, range, value);
 5877|       |        }
 5878|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5879|       |            auto rd = make_reader<T, char_type>();
 5880|       |            if (!is_segment_contiguous(range)) {
 5881|       |                return impl(rd, range, value);
 5882|       |            }
 5883|       |            auto crange = get_as_contiguous(range);
 5884|       |            SCN_TRY(it, impl(rd, crange, value));
 5885|       |            return ranges::next(range.begin(),
 5886|       |                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|  12.6k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  12.6k|    {
 5863|  12.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 90, False: 12.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     90|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     90|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     90|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     90|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     90|    }                                                  \
  |  |  |  | 3671|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  12.5k|                        .transform_error(make_eof_scan_error));
 5865|  12.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  12.6k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|  12.5k|    {
 3528|  12.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  12.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|  12.5k|        return read_default_with_base(range, value, 10);
 3530|  12.5k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|  12.5k|    {
 3492|  12.5k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|  12.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 12.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  12.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|  12.5k|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|       |        if constexpr (!std::is_signed_v<T>) {
 3496|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3497|       |                return unexpected_scan_error(
 3498|       |                    scan_error::invalid_scanned_value,
 3499|       |                    "Unexpected '-' sign when parsing an "
 3500|       |                    "unsigned value");
 3501|       |            }
 3502|       |        }
 3503|       |
 3504|  12.5k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 12.5k]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  25.1k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|  12.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 15, False: 12.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     15|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     15|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     15|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     15|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     15|    }                                                  \
  |  |  |  | 3671|  12.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  25.1k|                parse_integer_digits_without_thsep(
 3511|  25.1k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  25.1k|                    prefix_result.parsed_base));
 3513|       |
 3514|  25.1k|        auto buf = make_contiguous_buffer(
 3515|  25.1k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  25.1k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|  12.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12.4k, False: 174]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  12.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  12.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  12.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  12.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  12.4k|    }                                                  \
  |  |  |  | 3671|  12.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    174|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|    174|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|    174|                                    prefix_result.parsed_base));
 3519|       |
 3520|    174|        return ranges::next(prefix_result.iterator,
 3521|    174|                            ranges::distance(buf.view().begin(), result_it));
 3522|  25.1k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIxEENS0_13scan_expectedIPKwEERT_:
 5870|  12.7k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|  12.7k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  12.7k|            auto rd = make_reader<T, char_type>();
 5876|  12.7k|            return impl(rd, range, value);
 5877|       |        }
 5878|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5879|       |            auto rd = make_reader<T, char_type>();
 5880|       |            if (!is_segment_contiguous(range)) {
 5881|       |                return impl(rd, range, value);
 5882|       |            }
 5883|       |            auto crange = get_as_contiguous(range);
 5884|       |            SCN_TRY(it, impl(rd, crange, value));
 5885|       |            return ranges::next(range.begin(),
 5886|       |                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|  12.7k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EExEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  12.7k|    {
 5863|  12.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  12.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 90, False: 12.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     90|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     90|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     90|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     90|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     90|    }                                                  \
  |  |  |  | 3671|  12.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  12.6k|                        .transform_error(make_eof_scan_error));
 5865|  12.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  12.7k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|  12.6k|    {
 3528|  12.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  12.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|  12.6k|        return read_default_with_base(range, value, 10);
 3530|  12.6k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|  12.6k|    {
 3492|  12.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 12.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|  12.6k|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|       |        if constexpr (!std::is_signed_v<T>) {
 3496|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3497|       |                return unexpected_scan_error(
 3498|       |                    scan_error::invalid_scanned_value,
 3499|       |                    "Unexpected '-' sign when parsing an "
 3500|       |                    "unsigned value");
 3501|       |            }
 3502|       |        }
 3503|       |
 3504|  12.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 12.6k]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  25.2k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 15, False: 12.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     15|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     15|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     15|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     15|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     15|    }                                                  \
  |  |  |  | 3671|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  25.2k|                parse_integer_digits_without_thsep(
 3511|  25.2k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  25.2k|                    prefix_result.parsed_base));
 3513|       |
 3514|  25.2k|        auto buf = make_contiguous_buffer(
 3515|  25.2k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  25.2k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12.4k, False: 219]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  12.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  12.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  12.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  12.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  12.4k|    }                                                  \
  |  |  |  | 3671|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    219|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|    219|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|    219|                                    prefix_result.parsed_base));
 3519|       |
 3520|    219|        return ranges::next(prefix_result.iterator,
 3521|    219|                            ranges::distance(buf.view().begin(), result_it));
 3522|  25.2k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIhEENS0_13scan_expectedIPKwEERT_:
 5870|  12.6k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|  12.6k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  12.6k|            auto rd = make_reader<T, char_type>();
 5876|  12.6k|            return impl(rd, range, value);
 5877|       |        }
 5878|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5879|       |            auto rd = make_reader<T, char_type>();
 5880|       |            if (!is_segment_contiguous(range)) {
 5881|       |                return impl(rd, range, value);
 5882|       |            }
 5883|       |            auto crange = get_as_contiguous(range);
 5884|       |            SCN_TRY(it, impl(rd, crange, value));
 5885|       |            return ranges::next(range.begin(),
 5886|       |                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|  12.6k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEhEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  12.6k|    {
 5863|  12.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 72, False: 12.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     72|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     72|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     72|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     72|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     72|    }                                                  \
  |  |  |  | 3671|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  12.5k|                        .transform_error(make_eof_scan_error));
 5865|  12.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  12.6k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|  12.5k|    {
 3528|  12.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  12.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|  12.5k|        return read_default_with_base(range, value, 10);
 3530|  12.5k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|  12.5k|    {
 3492|  12.5k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|  12.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 12.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  12.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|  12.5k|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|  12.5k|        if constexpr (!std::is_signed_v<T>) {
 3496|  12.5k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3496:17): [True: 66, False: 12.4k]
  ------------------
 3497|     66|                return unexpected_scan_error(
 3498|     66|                    scan_error::invalid_scanned_value,
 3499|     66|                    "Unexpected '-' sign when parsing an "
 3500|     66|                    "unsigned value");
 3501|     66|            }
 3502|  12.5k|        }
 3503|       |
 3504|  12.5k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 12.5k]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  25.1k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|  12.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3, False: 12.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      3|    }                                                  \
  |  |  |  | 3671|  12.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  25.1k|                parse_integer_digits_without_thsep(
 3511|  25.1k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  25.1k|                    prefix_result.parsed_base));
 3513|       |
 3514|  25.1k|        auto buf = make_contiguous_buffer(
 3515|  25.1k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  25.1k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|  12.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12.3k, False: 183]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  12.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  12.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  12.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  12.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  12.3k|    }                                                  \
  |  |  |  | 3671|  12.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    183|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|    183|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|    183|                                    prefix_result.parsed_base));
 3519|       |
 3520|    183|        return ranges::next(prefix_result.iterator,
 3521|    183|                            ranges::distance(buf.view().begin(), result_it));
 3522|  25.1k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
 5870|  12.6k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|  12.6k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  12.6k|            auto rd = make_reader<T, char_type>();
 5876|  12.6k|            return impl(rd, range, value);
 5877|       |        }
 5878|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5879|       |            auto rd = make_reader<T, char_type>();
 5880|       |            if (!is_segment_contiguous(range)) {
 5881|       |                return impl(rd, range, value);
 5882|       |            }
 5883|       |            auto crange = get_as_contiguous(range);
 5884|       |            SCN_TRY(it, impl(rd, crange, value));
 5885|       |            return ranges::next(range.begin(),
 5886|       |                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|  12.6k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  12.6k|    {
 5863|  12.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 72, False: 12.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     72|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     72|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     72|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     72|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     72|    }                                                  \
  |  |  |  | 3671|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  12.5k|                        .transform_error(make_eof_scan_error));
 5865|  12.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  12.6k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|  12.5k|    {
 3528|  12.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  12.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|  12.5k|        return read_default_with_base(range, value, 10);
 3530|  12.5k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|  12.5k|    {
 3492|  12.5k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|  12.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 12.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  12.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|  12.5k|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|  12.5k|        if constexpr (!std::is_signed_v<T>) {
 3496|  12.5k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3496:17): [True: 66, False: 12.5k]
  ------------------
 3497|     66|                return unexpected_scan_error(
 3498|     66|                    scan_error::invalid_scanned_value,
 3499|     66|                    "Unexpected '-' sign when parsing an "
 3500|     66|                    "unsigned value");
 3501|     66|            }
 3502|  12.5k|        }
 3503|       |
 3504|  12.5k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 12.5k]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  25.1k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|  12.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3, False: 12.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      3|    }                                                  \
  |  |  |  | 3671|  12.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  25.1k|                parse_integer_digits_without_thsep(
 3511|  25.1k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  25.1k|                    prefix_result.parsed_base));
 3513|       |
 3514|  25.1k|        auto buf = make_contiguous_buffer(
 3515|  25.1k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  25.1k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|  12.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12.3k, False: 201]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  12.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  12.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  12.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  12.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  12.3k|    }                                                  \
  |  |  |  | 3671|  12.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    201|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|    201|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|    201|                                    prefix_result.parsed_base));
 3519|       |
 3520|    201|        return ranges::next(prefix_result.iterator,
 3521|    201|                            ranges::distance(buf.view().begin(), result_it));
 3522|  25.1k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIyEENS0_13scan_expectedIPKwEERT_:
 5870|  12.6k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|  12.6k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  12.6k|            auto rd = make_reader<T, char_type>();
 5876|  12.6k|            return impl(rd, range, value);
 5877|       |        }
 5878|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5879|       |            auto rd = make_reader<T, char_type>();
 5880|       |            if (!is_segment_contiguous(range)) {
 5881|       |                return impl(rd, range, value);
 5882|       |            }
 5883|       |            auto crange = get_as_contiguous(range);
 5884|       |            SCN_TRY(it, impl(rd, crange, value));
 5885|       |            return ranges::next(range.begin(),
 5886|       |                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|  12.6k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEyEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  12.6k|    {
 5863|  12.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 72, False: 12.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     72|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     72|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     72|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     72|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     72|    }                                                  \
  |  |  |  | 3671|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  12.6k|                        .transform_error(make_eof_scan_error));
 5865|  12.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  12.6k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|  12.6k|    {
 3528|  12.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  12.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|  12.6k|        return read_default_with_base(range, value, 10);
 3530|  12.6k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|  12.6k|    {
 3492|  12.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 12.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|  12.6k|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|  12.6k|        if constexpr (!std::is_signed_v<T>) {
 3496|  12.6k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3496:17): [True: 72, False: 12.5k]
  ------------------
 3497|     72|                return unexpected_scan_error(
 3498|     72|                    scan_error::invalid_scanned_value,
 3499|     72|                    "Unexpected '-' sign when parsing an "
 3500|     72|                    "unsigned value");
 3501|     72|            }
 3502|  12.6k|        }
 3503|       |
 3504|  12.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 12.6k]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  25.2k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3, False: 12.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      3|    }                                                  \
  |  |  |  | 3671|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  25.2k|                parse_integer_digits_without_thsep(
 3511|  25.2k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  25.2k|                    prefix_result.parsed_base));
 3513|       |
 3514|  25.2k|        auto buf = make_contiguous_buffer(
 3515|  25.2k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  25.2k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12.3k, False: 243]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  12.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  12.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  12.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  12.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  12.3k|    }                                                  \
  |  |  |  | 3671|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    243|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|    243|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|    243|                                    prefix_result.parsed_base));
 3519|       |
 3520|    243|        return ranges::next(prefix_result.iterator,
 3521|    243|                            ranges::distance(buf.view().begin(), result_it));
 3522|  25.2k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISF_EEvE4typeELPv0EEEOSF_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2875|   453k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  928|   453k|    static_cast<    \
  |  |  929|   453k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2876|   453k|          m_range(SCN_FWD(r)),
  ------------------
  |  |  930|   453k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2877|   453k|          m_current(m_range.begin())
 2878|   453k|    {
 2879|   453k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2882|   760k|    {
 2883|   760k|        return m_current;
 2884|   760k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2887|   306k|    {
 2888|   306k|        return m_range.end();
 2889|   306k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2902|  3.20k|    {
 2903|  3.20k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  3.20k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.20k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|  3.20k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 2905|  3.20k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 3.20k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|  3.20k|        }
 2909|  3.20k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  3.20k|    static_cast<    \
  |  |  929|  3.20k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|  3.20k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2892|   303k|    {
 2893|   303k|        return ranges::subrange{begin(), end()};
 2894|   303k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIaEENS0_13scan_expectedIPKwEERT_:
 6192|  50.5k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|  50.5k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  50.5k|            auto rd = make_reader<T, char_type>();
 6198|  50.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  50.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 50.5k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|  50.5k|            return impl(rd, range, value);
 6203|       |        }
 6204|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6205|       |            auto rd = make_reader<T, char_type>();
 6206|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|       |                return unexpected(e);
 6208|       |            }
 6209|       |
 6210|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|       |                specs.width != 0) {
 6212|       |                return impl(rd, range, value);
 6213|       |            }
 6214|       |
 6215|       |            auto crange = get_as_contiguous(range);
 6216|       |            SCN_TRY(it, impl(rd, crange, value));
 6217|       |            return ranges::next(range.begin(),
 6218|       |                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|  50.5k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEaEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|  50.5k|    {
 6124|  50.5k|        const bool need_skipped_width =
 6125|  50.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 50.5k]
  |  Branch (6125:33): [True: 0, False: 50.5k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  50.5k|        auto it = rng.begin();
 6129|  50.5k|        std::ptrdiff_t prefix_width = 0;
 6130|  50.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 50.5k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  50.5k|        else {
 6138|  50.5k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  50.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  50.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  50.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  50.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 332, False: 50.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    332|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    332|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    332|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    332|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    332|    }                                                  \
  |  |  |  | 3671|  50.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  50.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  50.1k|            std::tie(it, prefix_width) = prefix_result;
 6140|  50.1k|        }
 6141|  50.1k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  50.1k|        std::ptrdiff_t value_width = 0;
 6145|  50.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 50.1k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  50.1k|        else {
 6161|  50.1k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  50.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  50.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  50.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 49.7k, False: 490]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  49.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  49.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  49.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  49.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  49.7k|    }                                                  \
  |  | 3671|  50.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  50.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|    490|                                             specs, value, loc));
 6163|       |
 6164|    490|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 490]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|    490|        }
 6170|       |
 6171|       |        // Read postfix
 6172|    490|        std::ptrdiff_t postfix_width = 0;
 6173|    490|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 322, False: 168]
  ------------------
 6174|    322|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|    322|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    322|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    322|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    322|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 322]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    322|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    322|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|    322|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|    322|                                 rd.skip_ws_before_read(), prefix_width,
 6177|    322|                                 value_width));
 6178|    322|            std::tie(it, postfix_width) = postfix_result;
 6179|    322|        }
 6180|       |
 6181|    490|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|    490|                                                 value_width, postfix_width);
 6183|    490|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 490]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|    490|        return it;
 6188|    490|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|   303k|    {
 6037|   303k|        const bool need_skipped_width =
 6038|   303k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 303k]
  |  Branch (6038:33): [True: 0, False: 303k]
  ------------------
 6039|   303k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   303k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 303k]
  ------------------
 6043|   303k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 303k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   303k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 303k, False: 0]
  |  Branch (6047:56): [True: 303k, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   303k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 303k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|   604k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|   303k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   303k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   303k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   303k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.89k, False: 301k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.89k|    }                                                  \
  |  |  |  | 3671|   303k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   301k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|   604k|                            make_eof_scan_error));
 6058|       |
 6059|   604k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 301k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   301k|            return result_type{it, 0};
 6067|   604k|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|   303k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|  2.29k|    {
 6079|  2.29k|        const bool need_skipped_width =
 6080|  2.29k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 2.29k]
  |  Branch (6080:33): [True: 0, False: 2.29k]
  ------------------
 6081|  2.29k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  2.29k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 2.29k]
  ------------------
 6084|  2.29k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 2.29k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|  2.29k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 2.29k, False: 0]
  ------------------
 6093|  2.29k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 2.29k]
  ------------------
 6094|  2.29k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|  2.29k|        return result_type{rng.begin(), 0};
 6118|  2.29k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
 6192|  50.6k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|  50.6k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  50.6k|            auto rd = make_reader<T, char_type>();
 6198|  50.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  50.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 50.6k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|  50.6k|            return impl(rd, range, value);
 6203|       |        }
 6204|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6205|       |            auto rd = make_reader<T, char_type>();
 6206|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|       |                return unexpected(e);
 6208|       |            }
 6209|       |
 6210|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|       |                specs.width != 0) {
 6212|       |                return impl(rd, range, value);
 6213|       |            }
 6214|       |
 6215|       |            auto crange = get_as_contiguous(range);
 6216|       |            SCN_TRY(it, impl(rd, crange, value));
 6217|       |            return ranges::next(range.begin(),
 6218|       |                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|  50.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|  50.6k|    {
 6124|  50.6k|        const bool need_skipped_width =
 6125|  50.6k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 50.6k]
  |  Branch (6125:33): [True: 0, False: 50.6k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  50.6k|        auto it = rng.begin();
 6129|  50.6k|        std::ptrdiff_t prefix_width = 0;
 6130|  50.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 50.6k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  50.6k|        else {
 6138|  50.6k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  50.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  50.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  50.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  50.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 344, False: 50.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    344|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    344|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    344|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    344|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    344|    }                                                  \
  |  |  |  | 3671|  50.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  50.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  50.2k|            std::tie(it, prefix_width) = prefix_result;
 6140|  50.2k|        }
 6141|  50.2k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  50.2k|        std::ptrdiff_t value_width = 0;
 6145|  50.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 50.2k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  50.2k|        else {
 6161|  50.2k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  50.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  50.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  50.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 49.6k, False: 576]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  49.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  49.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  49.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  49.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  49.6k|    }                                                  \
  |  | 3671|  50.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  50.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|    576|                                             specs, value, loc));
 6163|       |
 6164|    576|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 576]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|    576|        }
 6170|       |
 6171|       |        // Read postfix
 6172|    576|        std::ptrdiff_t postfix_width = 0;
 6173|    576|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 396, False: 180]
  ------------------
 6174|    396|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|    396|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    396|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    396|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    396|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 396]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    396|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    396|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|    396|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|    396|                                 rd.skip_ws_before_read(), prefix_width,
 6177|    396|                                 value_width));
 6178|    396|            std::tie(it, postfix_width) = postfix_result;
 6179|    396|        }
 6180|       |
 6181|    576|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|    576|                                                 value_width, postfix_width);
 6183|    576|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 576]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|    576|        return it;
 6188|    576|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIxEENS0_13scan_expectedIPKwEERT_:
 6192|  50.7k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|  50.7k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  50.7k|            auto rd = make_reader<T, char_type>();
 6198|  50.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  50.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 50.7k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|  50.7k|            return impl(rd, range, value);
 6203|       |        }
 6204|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6205|       |            auto rd = make_reader<T, char_type>();
 6206|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|       |                return unexpected(e);
 6208|       |            }
 6209|       |
 6210|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|       |                specs.width != 0) {
 6212|       |                return impl(rd, range, value);
 6213|       |            }
 6214|       |
 6215|       |            auto crange = get_as_contiguous(range);
 6216|       |            SCN_TRY(it, impl(rd, crange, value));
 6217|       |            return ranges::next(range.begin(),
 6218|       |                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|  50.7k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EExEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|  50.7k|    {
 6124|  50.7k|        const bool need_skipped_width =
 6125|  50.7k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 50.7k]
  |  Branch (6125:33): [True: 0, False: 50.7k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  50.7k|        auto it = rng.begin();
 6129|  50.7k|        std::ptrdiff_t prefix_width = 0;
 6130|  50.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 50.7k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  50.7k|        else {
 6138|  50.7k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  50.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  50.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  50.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  50.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 344, False: 50.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    344|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    344|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    344|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    344|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    344|    }                                                  \
  |  |  |  | 3671|  50.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  50.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  50.3k|            std::tie(it, prefix_width) = prefix_result;
 6140|  50.3k|        }
 6141|  50.3k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  50.3k|        std::ptrdiff_t value_width = 0;
 6145|  50.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 50.3k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  50.3k|        else {
 6161|  50.3k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  50.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  50.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  50.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 49.6k, False: 684]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  49.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  49.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  49.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  49.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  49.6k|    }                                                  \
  |  | 3671|  50.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  50.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|    684|                                             specs, value, loc));
 6163|       |
 6164|    684|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 684]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|    684|        }
 6170|       |
 6171|       |        // Read postfix
 6172|    684|        std::ptrdiff_t postfix_width = 0;
 6173|    684|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 504, False: 180]
  ------------------
 6174|    504|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|    504|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    504|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    504|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    504|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 504]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    504|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    504|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|    504|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|    504|                                 rd.skip_ws_before_read(), prefix_width,
 6177|    504|                                 value_width));
 6178|    504|            std::tie(it, postfix_width) = postfix_result;
 6179|    504|        }
 6180|       |
 6181|    684|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|    684|                                                 value_width, postfix_width);
 6183|    684|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 684]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|    684|        return it;
 6188|    684|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIhEENS0_13scan_expectedIPKwEERT_:
 6192|  50.4k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|  50.4k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  50.4k|            auto rd = make_reader<T, char_type>();
 6198|  50.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  50.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 50.4k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|  50.4k|            return impl(rd, range, value);
 6203|       |        }
 6204|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6205|       |            auto rd = make_reader<T, char_type>();
 6206|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|       |                return unexpected(e);
 6208|       |            }
 6209|       |
 6210|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|       |                specs.width != 0) {
 6212|       |                return impl(rd, range, value);
 6213|       |            }
 6214|       |
 6215|       |            auto crange = get_as_contiguous(range);
 6216|       |            SCN_TRY(it, impl(rd, crange, value));
 6217|       |            return ranges::next(range.begin(),
 6218|       |                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|  50.4k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEhEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|  50.4k|    {
 6124|  50.4k|        const bool need_skipped_width =
 6125|  50.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 50.4k]
  |  Branch (6125:33): [True: 0, False: 50.4k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  50.4k|        auto it = rng.begin();
 6129|  50.4k|        std::ptrdiff_t prefix_width = 0;
 6130|  50.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 50.4k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  50.4k|        else {
 6138|  50.4k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  50.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  50.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  50.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  50.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 292, False: 50.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    292|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    292|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    292|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    292|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    292|    }                                                  \
  |  |  |  | 3671|  50.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  50.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  50.1k|            std::tie(it, prefix_width) = prefix_result;
 6140|  50.1k|        }
 6141|  50.1k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  50.1k|        std::ptrdiff_t value_width = 0;
 6145|  50.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 50.1k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  50.1k|        else {
 6161|  50.1k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  50.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  50.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  50.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 49.7k, False: 422]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  49.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  49.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  49.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  49.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  49.7k|    }                                                  \
  |  | 3671|  50.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  50.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|    422|                                             specs, value, loc));
 6163|       |
 6164|    422|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 422]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|    422|        }
 6170|       |
 6171|       |        // Read postfix
 6172|    422|        std::ptrdiff_t postfix_width = 0;
 6173|    422|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 294, False: 128]
  ------------------
 6174|    294|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|    294|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    294|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    294|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    294|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 294]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    294|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    294|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|    294|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|    294|                                 rd.skip_ws_before_read(), prefix_width,
 6177|    294|                                 value_width));
 6178|    294|            std::tie(it, postfix_width) = postfix_result;
 6179|    294|        }
 6180|       |
 6181|    422|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|    422|                                                 value_width, postfix_width);
 6183|    422|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 422]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|    422|        return it;
 6188|    422|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
 6192|  50.5k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|  50.5k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  50.5k|            auto rd = make_reader<T, char_type>();
 6198|  50.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  50.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 50.5k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|  50.5k|            return impl(rd, range, value);
 6203|       |        }
 6204|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6205|       |            auto rd = make_reader<T, char_type>();
 6206|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|       |                return unexpected(e);
 6208|       |            }
 6209|       |
 6210|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|       |                specs.width != 0) {
 6212|       |                return impl(rd, range, value);
 6213|       |            }
 6214|       |
 6215|       |            auto crange = get_as_contiguous(range);
 6216|       |            SCN_TRY(it, impl(rd, crange, value));
 6217|       |            return ranges::next(range.begin(),
 6218|       |                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|  50.5k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|  50.5k|    {
 6124|  50.5k|        const bool need_skipped_width =
 6125|  50.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 50.5k]
  |  Branch (6125:33): [True: 0, False: 50.5k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  50.5k|        auto it = rng.begin();
 6129|  50.5k|        std::ptrdiff_t prefix_width = 0;
 6130|  50.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 50.5k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  50.5k|        else {
 6138|  50.5k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  50.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  50.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  50.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  50.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 292, False: 50.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    292|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    292|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    292|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    292|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    292|    }                                                  \
  |  |  |  | 3671|  50.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  50.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  50.2k|            std::tie(it, prefix_width) = prefix_result;
 6140|  50.2k|        }
 6141|  50.2k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  50.2k|        std::ptrdiff_t value_width = 0;
 6145|  50.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 50.2k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  50.2k|        else {
 6161|  50.2k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  50.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  50.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  50.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 49.7k, False: 468]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  49.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  49.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  49.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  49.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  49.7k|    }                                                  \
  |  | 3671|  50.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  50.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|    468|                                             specs, value, loc));
 6163|       |
 6164|    468|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 468]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|    468|        }
 6170|       |
 6171|       |        // Read postfix
 6172|    468|        std::ptrdiff_t postfix_width = 0;
 6173|    468|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 340, False: 128]
  ------------------
 6174|    340|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|    340|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    340|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    340|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    340|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 340]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    340|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    340|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|    340|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|    340|                                 rd.skip_ws_before_read(), prefix_width,
 6177|    340|                                 value_width));
 6178|    340|            std::tie(it, postfix_width) = postfix_result;
 6179|    340|        }
 6180|       |
 6181|    468|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|    468|                                                 value_width, postfix_width);
 6183|    468|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 468]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|    468|        return it;
 6188|    468|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIyEENS0_13scan_expectedIPKwEERT_:
 6192|  50.6k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|  50.6k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  50.6k|            auto rd = make_reader<T, char_type>();
 6198|  50.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  50.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 50.6k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|  50.6k|            return impl(rd, range, value);
 6203|       |        }
 6204|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6205|       |            auto rd = make_reader<T, char_type>();
 6206|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|       |                return unexpected(e);
 6208|       |            }
 6209|       |
 6210|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|       |                specs.width != 0) {
 6212|       |                return impl(rd, range, value);
 6213|       |            }
 6214|       |
 6215|       |            auto crange = get_as_contiguous(range);
 6216|       |            SCN_TRY(it, impl(rd, crange, value));
 6217|       |            return ranges::next(range.begin(),
 6218|       |                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|  50.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEyEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|  50.6k|    {
 6124|  50.6k|        const bool need_skipped_width =
 6125|  50.6k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 50.6k]
  |  Branch (6125:33): [True: 0, False: 50.6k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  50.6k|        auto it = rng.begin();
 6129|  50.6k|        std::ptrdiff_t prefix_width = 0;
 6130|  50.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 50.6k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  50.6k|        else {
 6138|  50.6k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  50.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  50.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  50.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  50.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 292, False: 50.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    292|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    292|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    292|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    292|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    292|    }                                                  \
  |  |  |  | 3671|  50.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  50.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  50.3k|            std::tie(it, prefix_width) = prefix_result;
 6140|  50.3k|        }
 6141|  50.3k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  50.3k|        std::ptrdiff_t value_width = 0;
 6145|  50.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 50.3k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  50.3k|        else {
 6161|  50.3k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  50.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  50.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  50.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 49.7k, False: 562]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  49.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  49.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  49.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  49.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  49.7k|    }                                                  \
  |  | 3671|  50.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  50.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|    562|                                             specs, value, loc));
 6163|       |
 6164|    562|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 562]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|    562|        }
 6170|       |
 6171|       |        // Read postfix
 6172|    562|        std::ptrdiff_t postfix_width = 0;
 6173|    562|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 434, False: 128]
  ------------------
 6174|    434|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|    434|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    434|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    434|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    434|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 434]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    434|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    434|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|    434|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|    434|                                 rd.skip_ws_before_read(), prefix_width,
 6177|    434|                                 value_width));
 6178|    434|            std::tie(it, postfix_width) = postfix_result;
 6179|    434|        }
 6180|       |
 6181|    562|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|    562|                                                 value_width, postfix_width);
 6183|    562|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 562]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|    562|        return it;
 6188|    562|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  12.6k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|       |                          basic_contiguous_scan_context<char_type>>) {
 5875|       |            auto rd = make_reader<T, char_type>();
 5876|       |            return impl(rd, range, value);
 5877|       |        }
 5878|  12.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  12.6k|            auto rd = make_reader<T, char_type>();
 5880|  12.6k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 12.6k, False: 0]
  ------------------
 5881|  12.6k|                return impl(rd, range, value);
 5882|  12.6k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|  12.6k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  12.6k|    {
 5863|  12.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 87, False: 12.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     87|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     87|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     87|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     87|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     87|    }                                                  \
  |  |  |  | 3671|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  12.5k|                        .transform_error(make_eof_scan_error));
 5865|  12.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  12.6k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5794|  76.0k|{
 5795|  76.0k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  76.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 249, False: 75.7k]
  |  |  ------------------
  ------------------
 5796|    249|        return unexpected(e);
 5797|    249|    }
 5798|       |
 5799|  75.7k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 75.7k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|  75.7k|    return skip_classic_whitespace(range);
 5804|  75.7k|}
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3527|  12.5k|    {
 3528|  12.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  12.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|  12.5k|        return read_default_with_base(range, value, 10);
 3530|  12.5k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3491|  12.5k|    {
 3492|  12.5k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|  12.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 12.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  12.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|  12.5k|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|       |        if constexpr (!std::is_signed_v<T>) {
 3496|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3497|       |                return unexpected_scan_error(
 3498|       |                    scan_error::invalid_scanned_value,
 3499|       |                    "Unexpected '-' sign when parsing an "
 3500|       |                    "unsigned value");
 3501|       |            }
 3502|       |        }
 3503|       |
 3504|  12.5k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 12.5k]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  12.7k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|  12.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12.3k, False: 192]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  12.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  12.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  12.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  12.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  12.3k|    }                                                  \
  |  |  |  | 3671|  12.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    192|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  12.7k|                parse_integer_digits_without_thsep(
 3511|  12.7k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  12.7k|                    prefix_result.parsed_base));
 3513|       |
 3514|  12.7k|        auto buf = make_contiguous_buffer(
 3515|  12.7k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  12.7k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|    192|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    192|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    192|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    192|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 48, False: 144]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     48|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     48|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     48|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     48|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     48|    }                                                  \
  |  |  |  | 3671|    192|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    144|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|    144|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|    144|                                    prefix_result.parsed_base));
 3519|       |
 3520|    144|        return ranges::next(prefix_result.iterator,
 3521|    144|                            ranges::distance(buf.view().begin(), result_it));
 3522|  12.7k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  12.6k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|       |                          basic_contiguous_scan_context<char_type>>) {
 5875|       |            auto rd = make_reader<T, char_type>();
 5876|       |            return impl(rd, range, value);
 5877|       |        }
 5878|  12.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  12.6k|            auto rd = make_reader<T, char_type>();
 5880|  12.6k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 12.6k, False: 0]
  ------------------
 5881|  12.6k|                return impl(rd, range, value);
 5882|  12.6k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|  12.6k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  12.6k|    {
 5863|  12.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 90, False: 12.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     90|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     90|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     90|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     90|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     90|    }                                                  \
  |  |  |  | 3671|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  12.5k|                        .transform_error(make_eof_scan_error));
 5865|  12.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  12.6k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3527|  12.5k|    {
 3528|  12.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  12.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|  12.5k|        return read_default_with_base(range, value, 10);
 3530|  12.5k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3491|  12.5k|    {
 3492|  12.5k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|  12.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 12.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  12.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|  12.5k|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|       |        if constexpr (!std::is_signed_v<T>) {
 3496|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3497|       |                return unexpected_scan_error(
 3498|       |                    scan_error::invalid_scanned_value,
 3499|       |                    "Unexpected '-' sign when parsing an "
 3500|       |                    "unsigned value");
 3501|       |            }
 3502|       |        }
 3503|       |
 3504|  12.5k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 12.5k]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  12.7k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|  12.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12.3k, False: 198]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  12.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  12.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  12.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  12.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  12.3k|    }                                                  \
  |  |  |  | 3671|  12.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    198|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  12.7k|                parse_integer_digits_without_thsep(
 3511|  12.7k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  12.7k|                    prefix_result.parsed_base));
 3513|       |
 3514|  12.7k|        auto buf = make_contiguous_buffer(
 3515|  12.7k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  12.7k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|    198|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    198|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    198|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    198|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 24, False: 174]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     24|    }                                                  \
  |  |  |  | 3671|    198|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    174|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|    174|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|    174|                                    prefix_result.parsed_base));
 3519|       |
 3520|    174|        return ranges::next(prefix_result.iterator,
 3521|    174|                            ranges::distance(buf.view().begin(), result_it));
 3522|  12.7k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  12.7k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|       |                          basic_contiguous_scan_context<char_type>>) {
 5875|       |            auto rd = make_reader<T, char_type>();
 5876|       |            return impl(rd, range, value);
 5877|       |        }
 5878|  12.7k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  12.7k|            auto rd = make_reader<T, char_type>();
 5880|  12.7k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 12.7k, False: 0]
  ------------------
 5881|  12.7k|                return impl(rd, range, value);
 5882|  12.7k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|  12.7k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  12.7k|    {
 5863|  12.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  12.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 90, False: 12.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     90|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     90|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     90|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     90|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     90|    }                                                  \
  |  |  |  | 3671|  12.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  12.6k|                        .transform_error(make_eof_scan_error));
 5865|  12.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  12.7k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3527|  12.6k|    {
 3528|  12.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  12.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|  12.6k|        return read_default_with_base(range, value, 10);
 3530|  12.6k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3491|  12.6k|    {
 3492|  12.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 12.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|  12.6k|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|       |        if constexpr (!std::is_signed_v<T>) {
 3496|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3497|       |                return unexpected_scan_error(
 3498|       |                    scan_error::invalid_scanned_value,
 3499|       |                    "Unexpected '-' sign when parsing an "
 3500|       |                    "unsigned value");
 3501|       |            }
 3502|       |        }
 3503|       |
 3504|  12.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 12.6k]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  12.8k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12.4k, False: 219]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  12.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  12.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  12.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  12.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  12.4k|    }                                                  \
  |  |  |  | 3671|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    219|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  12.8k|                parse_integer_digits_without_thsep(
 3511|  12.8k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  12.8k|                    prefix_result.parsed_base));
 3513|       |
 3514|  12.8k|        auto buf = make_contiguous_buffer(
 3515|  12.8k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  12.8k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|    219|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    219|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    219|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    219|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 219]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    219|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    219|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|    219|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|    219|                                    prefix_result.parsed_base));
 3519|       |
 3520|    219|        return ranges::next(prefix_result.iterator,
 3521|    219|                            ranges::distance(buf.view().begin(), result_it));
 3522|  12.8k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  12.6k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|       |                          basic_contiguous_scan_context<char_type>>) {
 5875|       |            auto rd = make_reader<T, char_type>();
 5876|       |            return impl(rd, range, value);
 5877|       |        }
 5878|  12.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  12.6k|            auto rd = make_reader<T, char_type>();
 5880|  12.6k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 12.6k, False: 0]
  ------------------
 5881|  12.6k|                return impl(rd, range, value);
 5882|  12.6k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|  12.6k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  12.6k|    {
 5863|  12.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 72, False: 12.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     72|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     72|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     72|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     72|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     72|    }                                                  \
  |  |  |  | 3671|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  12.5k|                        .transform_error(make_eof_scan_error));
 5865|  12.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  12.6k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3527|  12.5k|    {
 3528|  12.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  12.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|  12.5k|        return read_default_with_base(range, value, 10);
 3530|  12.5k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3491|  12.5k|    {
 3492|  12.5k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|  12.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 12.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  12.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|  12.5k|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|  12.5k|        if constexpr (!std::is_signed_v<T>) {
 3496|  12.5k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3496:17): [True: 66, False: 12.4k]
  ------------------
 3497|     66|                return unexpected_scan_error(
 3498|     66|                    scan_error::invalid_scanned_value,
 3499|     66|                    "Unexpected '-' sign when parsing an "
 3500|     66|                    "unsigned value");
 3501|     66|            }
 3502|  12.5k|        }
 3503|       |
 3504|  12.5k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 12.5k]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  12.7k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|  12.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12.3k, False: 222]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  12.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  12.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  12.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  12.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  12.3k|    }                                                  \
  |  |  |  | 3671|  12.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    222|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  12.7k|                parse_integer_digits_without_thsep(
 3511|  12.7k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  12.7k|                    prefix_result.parsed_base));
 3513|       |
 3514|  12.7k|        auto buf = make_contiguous_buffer(
 3515|  12.7k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  12.7k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|    222|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    222|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    222|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    222|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 39, False: 183]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     39|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     39|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     39|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     39|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     39|    }                                                  \
  |  |  |  | 3671|    222|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    183|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|    183|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|    183|                                    prefix_result.parsed_base));
 3519|       |
 3520|    183|        return ranges::next(prefix_result.iterator,
 3521|    183|                            ranges::distance(buf.view().begin(), result_it));
 3522|  12.7k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  12.6k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|       |                          basic_contiguous_scan_context<char_type>>) {
 5875|       |            auto rd = make_reader<T, char_type>();
 5876|       |            return impl(rd, range, value);
 5877|       |        }
 5878|  12.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  12.6k|            auto rd = make_reader<T, char_type>();
 5880|  12.6k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 12.6k, False: 0]
  ------------------
 5881|  12.6k|                return impl(rd, range, value);
 5882|  12.6k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|  12.6k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  12.6k|    {
 5863|  12.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 72, False: 12.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     72|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     72|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     72|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     72|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     72|    }                                                  \
  |  |  |  | 3671|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  12.5k|                        .transform_error(make_eof_scan_error));
 5865|  12.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  12.6k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3527|  12.5k|    {
 3528|  12.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  12.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|  12.5k|        return read_default_with_base(range, value, 10);
 3530|  12.5k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3491|  12.5k|    {
 3492|  12.5k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|  12.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 12.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  12.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|  12.5k|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|  12.5k|        if constexpr (!std::is_signed_v<T>) {
 3496|  12.5k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3496:17): [True: 66, False: 12.5k]
  ------------------
 3497|     66|                return unexpected_scan_error(
 3498|     66|                    scan_error::invalid_scanned_value,
 3499|     66|                    "Unexpected '-' sign when parsing an "
 3500|     66|                    "unsigned value");
 3501|     66|            }
 3502|  12.5k|        }
 3503|       |
 3504|  12.5k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 12.5k]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  12.7k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|  12.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12.3k, False: 225]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  12.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  12.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  12.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  12.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  12.3k|    }                                                  \
  |  |  |  | 3671|  12.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    225|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  12.7k|                parse_integer_digits_without_thsep(
 3511|  12.7k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  12.7k|                    prefix_result.parsed_base));
 3513|       |
 3514|  12.7k|        auto buf = make_contiguous_buffer(
 3515|  12.7k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  12.7k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|    225|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    225|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    225|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    225|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 24, False: 201]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     24|    }                                                  \
  |  |  |  | 3671|    225|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    201|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|    201|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|    201|                                    prefix_result.parsed_base));
 3519|       |
 3520|    201|        return ranges::next(prefix_result.iterator,
 3521|    201|                            ranges::distance(buf.view().begin(), result_it));
 3522|  12.7k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  12.6k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|       |                          basic_contiguous_scan_context<char_type>>) {
 5875|       |            auto rd = make_reader<T, char_type>();
 5876|       |            return impl(rd, range, value);
 5877|       |        }
 5878|  12.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  12.6k|            auto rd = make_reader<T, char_type>();
 5880|  12.6k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 12.6k, False: 0]
  ------------------
 5881|  12.6k|                return impl(rd, range, value);
 5882|  12.6k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|  12.6k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  12.6k|    {
 5863|  12.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 72, False: 12.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     72|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     72|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     72|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     72|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     72|    }                                                  \
  |  |  |  | 3671|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  12.6k|                        .transform_error(make_eof_scan_error));
 5865|  12.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  12.6k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3527|  12.6k|    {
 3528|  12.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  12.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|  12.6k|        return read_default_with_base(range, value, 10);
 3530|  12.6k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3491|  12.6k|    {
 3492|  12.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 12.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|  12.6k|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|  12.6k|        if constexpr (!std::is_signed_v<T>) {
 3496|  12.6k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3496:17): [True: 72, False: 12.5k]
  ------------------
 3497|     72|                return unexpected_scan_error(
 3498|     72|                    scan_error::invalid_scanned_value,
 3499|     72|                    "Unexpected '-' sign when parsing an "
 3500|     72|                    "unsigned value");
 3501|     72|            }
 3502|  12.6k|        }
 3503|       |
 3504|  12.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 12.6k]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  12.8k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12.3k, False: 243]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  12.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  12.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  12.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  12.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  12.3k|    }                                                  \
  |  |  |  | 3671|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    243|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  12.8k|                parse_integer_digits_without_thsep(
 3511|  12.8k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  12.8k|                    prefix_result.parsed_base));
 3513|       |
 3514|  12.8k|        auto buf = make_contiguous_buffer(
 3515|  12.8k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  12.8k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|    243|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    243|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    243|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    243|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 243]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    243|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    243|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|    243|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|    243|                                    prefix_result.parsed_base));
 3519|       |
 3520|    243|        return ranges::next(prefix_result.iterator,
 3521|    243|                            ranges::distance(buf.view().begin(), result_it));
 3522|  12.8k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|  78.6k|    {
 3492|  78.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|  78.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  78.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  78.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  78.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 78.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  78.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  78.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|  78.6k|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|       |        if constexpr (!std::is_signed_v<T>) {
 3496|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3497|       |                return unexpected_scan_error(
 3498|       |                    scan_error::invalid_scanned_value,
 3499|       |                    "Unexpected '-' sign when parsing an "
 3500|       |                    "unsigned value");
 3501|       |            }
 3502|       |        }
 3503|       |
 3504|  78.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 78.6k]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|   157k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|  78.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  78.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  78.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  78.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 93, False: 78.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     93|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     93|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     93|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     93|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     93|    }                                                  \
  |  |  |  | 3671|  78.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  78.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|   157k|                parse_integer_digits_without_thsep(
 3511|   157k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|   157k|                    prefix_result.parsed_base));
 3513|       |
 3514|   157k|        auto buf = make_contiguous_buffer(
 3515|   157k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|   157k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|  78.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  78.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  78.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  78.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.40k, False: 73.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  5.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  5.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  5.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  5.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  5.40k|    }                                                  \
  |  |  |  | 3671|  78.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  73.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|  73.1k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|  73.1k|                                    prefix_result.parsed_base));
 3519|       |
 3520|  73.1k|        return ranges::next(prefix_result.iterator,
 3521|  73.1k|                            ranges::distance(buf.view().begin(), result_it));
 3522|   157k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|  90.7k|    {
 3492|  90.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|  90.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  90.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  90.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  90.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 90.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  90.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  90.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|  90.7k|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|       |        if constexpr (!std::is_signed_v<T>) {
 3496|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3497|       |                return unexpected_scan_error(
 3498|       |                    scan_error::invalid_scanned_value,
 3499|       |                    "Unexpected '-' sign when parsing an "
 3500|       |                    "unsigned value");
 3501|       |            }
 3502|       |        }
 3503|       |
 3504|  90.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 90.7k]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|   181k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|  90.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  90.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  90.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  90.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 123, False: 90.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    123|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    123|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    123|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    123|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    123|    }                                                  \
  |  |  |  | 3671|  90.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  90.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|   181k|                parse_integer_digits_without_thsep(
 3511|   181k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|   181k|                    prefix_result.parsed_base));
 3513|       |
 3514|   181k|        auto buf = make_contiguous_buffer(
 3515|   181k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|   181k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|  90.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  90.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  90.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  90.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.96k, False: 85.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.96k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.96k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.96k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.96k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.96k|    }                                                  \
  |  |  |  | 3671|  90.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  85.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|  85.6k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|  85.6k|                                    prefix_result.parsed_base));
 3519|       |
 3520|  85.6k|        return ranges::next(prefix_result.iterator,
 3521|  85.6k|                            ranges::distance(buf.view().begin(), result_it));
 3522|   181k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|  92.3k|    {
 3492|  92.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|  92.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  92.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  92.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  92.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 92.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  92.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  92.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|  92.3k|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|       |        if constexpr (!std::is_signed_v<T>) {
 3496|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3497|       |                return unexpected_scan_error(
 3498|       |                    scan_error::invalid_scanned_value,
 3499|       |                    "Unexpected '-' sign when parsing an "
 3500|       |                    "unsigned value");
 3501|       |            }
 3502|       |        }
 3503|       |
 3504|  92.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 92.3k]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|   184k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|  92.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  92.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  92.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  92.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 135, False: 92.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    135|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    135|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    135|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    135|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    135|    }                                                  \
  |  |  |  | 3671|  92.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  92.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|   184k|                parse_integer_digits_without_thsep(
 3511|   184k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|   184k|                    prefix_result.parsed_base));
 3513|       |
 3514|   184k|        auto buf = make_contiguous_buffer(
 3515|   184k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|   184k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|  92.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  92.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  92.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  92.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.83k, False: 87.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.83k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.83k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.83k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.83k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.83k|    }                                                  \
  |  |  |  | 3671|  92.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  87.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|  87.3k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|  87.3k|                                    prefix_result.parsed_base));
 3519|       |
 3520|  87.3k|        return ranges::next(prefix_result.iterator,
 3521|  87.3k|                            ranges::distance(buf.view().begin(), result_it));
 3522|   184k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|  69.9k|    {
 3492|  69.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|  69.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  69.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  69.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  69.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 69.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  69.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  69.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|  69.9k|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|  69.9k|        if constexpr (!std::is_signed_v<T>) {
 3496|  69.9k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3496:17): [True: 2.27k, False: 67.6k]
  ------------------
 3497|  2.27k|                return unexpected_scan_error(
 3498|  2.27k|                    scan_error::invalid_scanned_value,
 3499|  2.27k|                    "Unexpected '-' sign when parsing an "
 3500|  2.27k|                    "unsigned value");
 3501|  2.27k|            }
 3502|  69.9k|        }
 3503|       |
 3504|  69.9k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 69.9k]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|   139k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|  69.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  69.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  69.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  69.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 69.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     12|    }                                                  \
  |  |  |  | 3671|  69.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  69.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|   139k|                parse_integer_digits_without_thsep(
 3511|   139k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|   139k|                    prefix_result.parsed_base));
 3513|       |
 3514|   139k|        auto buf = make_contiguous_buffer(
 3515|   139k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|   139k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|  69.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  69.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  69.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  69.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.39k, False: 66.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.39k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.39k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.39k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.39k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.39k|    }                                                  \
  |  |  |  | 3671|  69.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  66.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|  66.5k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|  66.5k|                                    prefix_result.parsed_base));
 3519|       |
 3520|  66.5k|        return ranges::next(prefix_result.iterator,
 3521|  66.5k|                            ranges::distance(buf.view().begin(), result_it));
 3522|   139k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|  77.8k|    {
 3492|  77.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|  77.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  77.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  77.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  77.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 77.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  77.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  77.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|  77.8k|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|  77.8k|        if constexpr (!std::is_signed_v<T>) {
 3496|  77.8k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3496:17): [True: 2.36k, False: 75.5k]
  ------------------
 3497|  2.36k|                return unexpected_scan_error(
 3498|  2.36k|                    scan_error::invalid_scanned_value,
 3499|  2.36k|                    "Unexpected '-' sign when parsing an "
 3500|  2.36k|                    "unsigned value");
 3501|  2.36k|            }
 3502|  77.8k|        }
 3503|       |
 3504|  77.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 77.8k]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|   155k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|  77.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  77.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  77.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  77.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 77.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     12|    }                                                  \
  |  |  |  | 3671|  77.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  77.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|   155k|                parse_integer_digits_without_thsep(
 3511|   155k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|   155k|                    prefix_result.parsed_base));
 3513|       |
 3514|   155k|        auto buf = make_contiguous_buffer(
 3515|   155k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|   155k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|  77.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  77.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  77.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  77.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.09k, False: 74.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.09k|    }                                                  \
  |  |  |  | 3671|  77.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  74.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|  74.7k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|  74.7k|                                    prefix_result.parsed_base));
 3519|       |
 3520|  74.7k|        return ranges::next(prefix_result.iterator,
 3521|  74.7k|                            ranges::distance(buf.view().begin(), result_it));
 3522|   155k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|  78.8k|    {
 3492|  78.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|  78.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  78.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  78.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  78.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 78.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  78.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  78.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|  78.8k|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|  78.8k|        if constexpr (!std::is_signed_v<T>) {
 3496|  78.8k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3496:17): [True: 2.43k, False: 76.4k]
  ------------------
 3497|  2.43k|                return unexpected_scan_error(
 3498|  2.43k|                    scan_error::invalid_scanned_value,
 3499|  2.43k|                    "Unexpected '-' sign when parsing an "
 3500|  2.43k|                    "unsigned value");
 3501|  2.43k|            }
 3502|  78.8k|        }
 3503|       |
 3504|  78.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 78.8k]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|   157k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|  78.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  78.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  78.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  78.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 78.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     12|    }                                                  \
  |  |  |  | 3671|  78.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  78.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|   157k|                parse_integer_digits_without_thsep(
 3511|   157k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|   157k|                    prefix_result.parsed_base));
 3513|       |
 3514|   157k|        auto buf = make_contiguous_buffer(
 3515|   157k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|   157k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|  78.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  78.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  78.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  78.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.97k, False: 75.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.97k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.97k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.97k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.97k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.97k|    }                                                  \
  |  |  |  | 3671|  78.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  75.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|  75.8k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|  75.8k|                                    prefix_result.parsed_base));
 3519|       |
 3520|  75.8k|        return ranges::next(prefix_result.iterator,
 3521|  75.8k|                            ranges::distance(buf.view().begin(), result_it));
 3522|   157k|    }

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  2.08k|{
   52|  2.08k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|  2.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  2.08k|    string_buffer.resize(size);
   56|  2.08k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  2.08k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  2.08k|    const auto wsv_reinterpret_size =
   61|  2.08k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 138, False: 1.94k]
  ------------------
   62|  2.08k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  2.08k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  2.08k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  2.08k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  2.08k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  2.08k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  2.08k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  2.08k|{
  122|  2.08k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  2.08k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  2.08k|    buf.resize(sizeof...(Args));
  125|  2.08k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  2.08k|    return buf;
  127|  2.08k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  107|  2.08k|{
  108|  2.08k|    if constexpr (std::is_same_v<CharT, char>) {
  109|  2.08k|        return format_string_view_buffer;
  110|       |    }
  111|       |    else {
  112|       |        return wformat_string_view_buffer;
  113|       |    }
  114|  2.08k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  2.08k|{
  185|  2.08k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  2.08k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  2.08k|                                   format_strings);
  188|  2.08k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcaNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.08k|{
  133|       |    // Regular scan
  134|  20.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 20.8k, False: 2.08k]
  ------------------
  135|  20.8k|        auto it = scn::ranges::begin(source);
  136|   157k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   157k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   157k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   157k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   157k|            auto result = scn::scan<T>(
  139|   157k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   157k|                scn::runtime_format(f));
  141|   157k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 20.8k, False: 136k]
  ------------------
  142|  20.8k|                break;
  143|  20.8k|            }
  144|   136k|            it = result->begin();
  145|   136k|        }
  146|  20.8k|    }
  147|       |
  148|       |    // scan localized
  149|  20.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 20.8k, False: 2.08k]
  ------------------
  150|  20.8k|        auto it = scn::ranges::begin(source);
  151|   157k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   157k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   157k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   157k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   157k|            auto result = scn::scan<T>(
  154|   157k|                global_locale,
  155|   157k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   157k|                scn::runtime_format(f));
  157|   157k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 20.8k, False: 136k]
  ------------------
  158|  20.8k|                break;
  159|  20.8k|            }
  160|   136k|            it = result->begin();
  161|   136k|        }
  162|  20.8k|    }
  163|       |
  164|       |    // scan_value
  165|  2.08k|    {
  166|  2.08k|        auto it = scn::ranges::begin(source);
  167|  26.4k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  26.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  26.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  26.4k|            auto result = scn::scan_value<T>(
  170|  26.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  26.4k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.08k, False: 24.3k]
  ------------------
  172|  2.08k|                break;
  173|  2.08k|            }
  174|  24.3k|            it = result->begin();
  175|  24.3k|        }
  176|  2.08k|    }
  177|  2.08k|}
_ZN3scn4fuzz21do_basic_run_for_typeIchNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.08k|{
  133|       |    // Regular scan
  134|  20.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 20.8k, False: 2.08k]
  ------------------
  135|  20.8k|        auto it = scn::ranges::begin(source);
  136|   152k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   152k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   152k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   152k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   152k|            auto result = scn::scan<T>(
  139|   152k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   152k|                scn::runtime_format(f));
  141|   152k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 20.8k, False: 131k]
  ------------------
  142|  20.8k|                break;
  143|  20.8k|            }
  144|   131k|            it = result->begin();
  145|   131k|        }
  146|  20.8k|    }
  147|       |
  148|       |    // scan localized
  149|  20.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 20.8k, False: 2.08k]
  ------------------
  150|  20.8k|        auto it = scn::ranges::begin(source);
  151|   152k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   152k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   152k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   152k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   152k|            auto result = scn::scan<T>(
  154|   152k|                global_locale,
  155|   152k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   152k|                scn::runtime_format(f));
  157|   152k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 20.8k, False: 131k]
  ------------------
  158|  20.8k|                break;
  159|  20.8k|            }
  160|   131k|            it = result->begin();
  161|   131k|        }
  162|  20.8k|    }
  163|       |
  164|       |    // scan_value
  165|  2.08k|    {
  166|  2.08k|        auto it = scn::ranges::begin(source);
  167|  23.5k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  23.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  23.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  23.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  23.5k|            auto result = scn::scan_value<T>(
  170|  23.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  23.5k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.08k, False: 21.4k]
  ------------------
  172|  2.08k|                break;
  173|  2.08k|            }
  174|  21.4k|            it = result->begin();
  175|  21.4k|        }
  176|  2.08k|    }
  177|  2.08k|}
_ZN3scn4fuzz21do_basic_run_for_typeIciNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.08k|{
  133|       |    // Regular scan
  134|  20.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 20.8k, False: 2.08k]
  ------------------
  135|  20.8k|        auto it = scn::ranges::begin(source);
  136|   198k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   198k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   198k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   198k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   198k|            auto result = scn::scan<T>(
  139|   198k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   198k|                scn::runtime_format(f));
  141|   198k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 20.8k, False: 177k]
  ------------------
  142|  20.8k|                break;
  143|  20.8k|            }
  144|   177k|            it = result->begin();
  145|   177k|        }
  146|  20.8k|    }
  147|       |
  148|       |    // scan localized
  149|  20.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 20.8k, False: 2.08k]
  ------------------
  150|  20.8k|        auto it = scn::ranges::begin(source);
  151|   198k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   198k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   198k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   198k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   198k|            auto result = scn::scan<T>(
  154|   198k|                global_locale,
  155|   198k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   198k|                scn::runtime_format(f));
  157|   198k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 20.8k, False: 177k]
  ------------------
  158|  20.8k|                break;
  159|  20.8k|            }
  160|   177k|            it = result->begin();
  161|   177k|        }
  162|  20.8k|    }
  163|       |
  164|       |    // scan_value
  165|  2.08k|    {
  166|  2.08k|        auto it = scn::ranges::begin(source);
  167|  30.6k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  30.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  30.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  30.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  30.6k|            auto result = scn::scan_value<T>(
  170|  30.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  30.6k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.08k, False: 28.5k]
  ------------------
  172|  2.08k|                break;
  173|  2.08k|            }
  174|  28.5k|            it = result->begin();
  175|  28.5k|        }
  176|  2.08k|    }
  177|  2.08k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcjNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.08k|{
  133|       |    // Regular scan
  134|  20.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 20.8k, False: 2.08k]
  ------------------
  135|  20.8k|        auto it = scn::ranges::begin(source);
  136|   171k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   171k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   171k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   171k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   171k|            auto result = scn::scan<T>(
  139|   171k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   171k|                scn::runtime_format(f));
  141|   171k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 20.8k, False: 150k]
  ------------------
  142|  20.8k|                break;
  143|  20.8k|            }
  144|   150k|            it = result->begin();
  145|   150k|        }
  146|  20.8k|    }
  147|       |
  148|       |    // scan localized
  149|  20.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 20.8k, False: 2.08k]
  ------------------
  150|  20.8k|        auto it = scn::ranges::begin(source);
  151|   171k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   171k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   171k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   171k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   171k|            auto result = scn::scan<T>(
  154|   171k|                global_locale,
  155|   171k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   171k|                scn::runtime_format(f));
  157|   171k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 20.8k, False: 150k]
  ------------------
  158|  20.8k|                break;
  159|  20.8k|            }
  160|   150k|            it = result->begin();
  161|   150k|        }
  162|  20.8k|    }
  163|       |
  164|       |    // scan_value
  165|  2.08k|    {
  166|  2.08k|        auto it = scn::ranges::begin(source);
  167|  26.2k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  26.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  26.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  26.2k|            auto result = scn::scan_value<T>(
  170|  26.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  26.2k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.08k, False: 24.1k]
  ------------------
  172|  2.08k|                break;
  173|  2.08k|            }
  174|  24.1k|            it = result->begin();
  175|  24.1k|        }
  176|  2.08k|    }
  177|  2.08k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcxNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.08k|{
  133|       |    // Regular scan
  134|  20.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 20.8k, False: 2.08k]
  ------------------
  135|  20.8k|        auto it = scn::ranges::begin(source);
  136|   202k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   202k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   202k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   202k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   202k|            auto result = scn::scan<T>(
  139|   202k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   202k|                scn::runtime_format(f));
  141|   202k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 20.8k, False: 181k]
  ------------------
  142|  20.8k|                break;
  143|  20.8k|            }
  144|   181k|            it = result->begin();
  145|   181k|        }
  146|  20.8k|    }
  147|       |
  148|       |    // scan localized
  149|  20.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 20.8k, False: 2.08k]
  ------------------
  150|  20.8k|        auto it = scn::ranges::begin(source);
  151|   202k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   202k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   202k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   202k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   202k|            auto result = scn::scan<T>(
  154|   202k|                global_locale,
  155|   202k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   202k|                scn::runtime_format(f));
  157|   202k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 20.8k, False: 181k]
  ------------------
  158|  20.8k|                break;
  159|  20.8k|            }
  160|   181k|            it = result->begin();
  161|   181k|        }
  162|  20.8k|    }
  163|       |
  164|       |    // scan_value
  165|  2.08k|    {
  166|  2.08k|        auto it = scn::ranges::begin(source);
  167|  31.2k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  31.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  31.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  31.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  31.2k|            auto result = scn::scan_value<T>(
  170|  31.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  31.2k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.08k, False: 29.1k]
  ------------------
  172|  2.08k|                break;
  173|  2.08k|            }
  174|  29.1k|            it = result->begin();
  175|  29.1k|        }
  176|  2.08k|    }
  177|  2.08k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcyNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.08k|{
  133|       |    // Regular scan
  134|  20.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 20.8k, False: 2.08k]
  ------------------
  135|  20.8k|        auto it = scn::ranges::begin(source);
  136|   173k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   173k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   173k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   173k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   173k|            auto result = scn::scan<T>(
  139|   173k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   173k|                scn::runtime_format(f));
  141|   173k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 20.8k, False: 152k]
  ------------------
  142|  20.8k|                break;
  143|  20.8k|            }
  144|   152k|            it = result->begin();
  145|   152k|        }
  146|  20.8k|    }
  147|       |
  148|       |    // scan localized
  149|  20.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 20.8k, False: 2.08k]
  ------------------
  150|  20.8k|        auto it = scn::ranges::begin(source);
  151|   173k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   173k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   173k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   173k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   173k|            auto result = scn::scan<T>(
  154|   173k|                global_locale,
  155|   173k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   173k|                scn::runtime_format(f));
  157|   173k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 20.8k, False: 152k]
  ------------------
  158|  20.8k|                break;
  159|  20.8k|            }
  160|   152k|            it = result->begin();
  161|   152k|        }
  162|  20.8k|    }
  163|       |
  164|       |    // scan_value
  165|  2.08k|    {
  166|  2.08k|        auto it = scn::ranges::begin(source);
  167|  26.5k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  26.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  26.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  26.5k|            auto result = scn::scan_value<T>(
  170|  26.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  26.5k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.08k, False: 24.4k]
  ------------------
  172|  2.08k|                break;
  173|  2.08k|            }
  174|  24.4k|            it = result->begin();
  175|  24.4k|        }
  176|  2.08k|    }
  177|  2.08k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcaKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  2.08k|{
  133|       |    // Regular scan
  134|  20.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 20.8k, False: 2.08k]
  ------------------
  135|  20.8k|        auto it = scn::ranges::begin(source);
  136|   157k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   157k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   157k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   157k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   157k|            auto result = scn::scan<T>(
  139|   157k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   157k|                scn::runtime_format(f));
  141|   157k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 20.8k, False: 136k]
  ------------------
  142|  20.8k|                break;
  143|  20.8k|            }
  144|   136k|            it = result->begin();
  145|   136k|        }
  146|  20.8k|    }
  147|       |
  148|       |    // scan localized
  149|  20.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 20.8k, False: 2.08k]
  ------------------
  150|  20.8k|        auto it = scn::ranges::begin(source);
  151|   157k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   157k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   157k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   157k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   157k|            auto result = scn::scan<T>(
  154|   157k|                global_locale,
  155|   157k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   157k|                scn::runtime_format(f));
  157|   157k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 20.8k, False: 136k]
  ------------------
  158|  20.8k|                break;
  159|  20.8k|            }
  160|   136k|            it = result->begin();
  161|   136k|        }
  162|  20.8k|    }
  163|       |
  164|       |    // scan_value
  165|  2.08k|    {
  166|  2.08k|        auto it = scn::ranges::begin(source);
  167|  26.4k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  26.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  26.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  26.4k|            auto result = scn::scan_value<T>(
  170|  26.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  26.4k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.08k, False: 24.3k]
  ------------------
  172|  2.08k|                break;
  173|  2.08k|            }
  174|  24.3k|            it = result->begin();
  175|  24.3k|        }
  176|  2.08k|    }
  177|  2.08k|}
_ZN3scn4fuzz21do_basic_run_for_typeIchKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  2.08k|{
  133|       |    // Regular scan
  134|  20.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 20.8k, False: 2.08k]
  ------------------
  135|  20.8k|        auto it = scn::ranges::begin(source);
  136|   152k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   152k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   152k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   152k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   152k|            auto result = scn::scan<T>(
  139|   152k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   152k|                scn::runtime_format(f));
  141|   152k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 20.8k, False: 131k]
  ------------------
  142|  20.8k|                break;
  143|  20.8k|            }
  144|   131k|            it = result->begin();
  145|   131k|        }
  146|  20.8k|    }
  147|       |
  148|       |    // scan localized
  149|  20.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 20.8k, False: 2.08k]
  ------------------
  150|  20.8k|        auto it = scn::ranges::begin(source);
  151|   152k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   152k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   152k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   152k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   152k|            auto result = scn::scan<T>(
  154|   152k|                global_locale,
  155|   152k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   152k|                scn::runtime_format(f));
  157|   152k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 20.8k, False: 131k]
  ------------------
  158|  20.8k|                break;
  159|  20.8k|            }
  160|   131k|            it = result->begin();
  161|   131k|        }
  162|  20.8k|    }
  163|       |
  164|       |    // scan_value
  165|  2.08k|    {
  166|  2.08k|        auto it = scn::ranges::begin(source);
  167|  23.4k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  23.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  23.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  23.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  23.4k|            auto result = scn::scan_value<T>(
  170|  23.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  23.4k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.08k, False: 21.3k]
  ------------------
  172|  2.08k|                break;
  173|  2.08k|            }
  174|  21.3k|            it = result->begin();
  175|  21.3k|        }
  176|  2.08k|    }
  177|  2.08k|}
_ZN3scn4fuzz21do_basic_run_for_typeIciKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  2.08k|{
  133|       |    // Regular scan
  134|  20.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 20.8k, False: 2.08k]
  ------------------
  135|  20.8k|        auto it = scn::ranges::begin(source);
  136|   199k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   199k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   199k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   199k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   199k|            auto result = scn::scan<T>(
  139|   199k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   199k|                scn::runtime_format(f));
  141|   199k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 20.8k, False: 178k]
  ------------------
  142|  20.8k|                break;
  143|  20.8k|            }
  144|   178k|            it = result->begin();
  145|   178k|        }
  146|  20.8k|    }
  147|       |
  148|       |    // scan localized
  149|  20.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 20.8k, False: 2.08k]
  ------------------
  150|  20.8k|        auto it = scn::ranges::begin(source);
  151|   199k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   199k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   199k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   199k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   199k|            auto result = scn::scan<T>(
  154|   199k|                global_locale,
  155|   199k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   199k|                scn::runtime_format(f));
  157|   199k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 20.8k, False: 178k]
  ------------------
  158|  20.8k|                break;
  159|  20.8k|            }
  160|   178k|            it = result->begin();
  161|   178k|        }
  162|  20.8k|    }
  163|       |
  164|       |    // scan_value
  165|  2.08k|    {
  166|  2.08k|        auto it = scn::ranges::begin(source);
  167|  30.0k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  30.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  30.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  30.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  30.0k|            auto result = scn::scan_value<T>(
  170|  30.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  30.0k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.08k, False: 27.9k]
  ------------------
  172|  2.08k|                break;
  173|  2.08k|            }
  174|  27.9k|            it = result->begin();
  175|  27.9k|        }
  176|  2.08k|    }
  177|  2.08k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcjKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  2.08k|{
  133|       |    // Regular scan
  134|  20.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 20.8k, False: 2.08k]
  ------------------
  135|  20.8k|        auto it = scn::ranges::begin(source);
  136|   172k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   172k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   172k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   172k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   172k|            auto result = scn::scan<T>(
  139|   172k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   172k|                scn::runtime_format(f));
  141|   172k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 20.8k, False: 151k]
  ------------------
  142|  20.8k|                break;
  143|  20.8k|            }
  144|   151k|            it = result->begin();
  145|   151k|        }
  146|  20.8k|    }
  147|       |
  148|       |    // scan localized
  149|  20.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 20.8k, False: 2.08k]
  ------------------
  150|  20.8k|        auto it = scn::ranges::begin(source);
  151|   172k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   172k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   172k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   172k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   172k|            auto result = scn::scan<T>(
  154|   172k|                global_locale,
  155|   172k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   172k|                scn::runtime_format(f));
  157|   172k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 20.8k, False: 151k]
  ------------------
  158|  20.8k|                break;
  159|  20.8k|            }
  160|   151k|            it = result->begin();
  161|   151k|        }
  162|  20.8k|    }
  163|       |
  164|       |    // scan_value
  165|  2.08k|    {
  166|  2.08k|        auto it = scn::ranges::begin(source);
  167|  26.1k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  26.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  26.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  26.1k|            auto result = scn::scan_value<T>(
  170|  26.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  26.1k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.08k, False: 24.0k]
  ------------------
  172|  2.08k|                break;
  173|  2.08k|            }
  174|  24.0k|            it = result->begin();
  175|  24.0k|        }
  176|  2.08k|    }
  177|  2.08k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcxKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  2.08k|{
  133|       |    // Regular scan
  134|  20.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 20.8k, False: 2.08k]
  ------------------
  135|  20.8k|        auto it = scn::ranges::begin(source);
  136|   202k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   202k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   202k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   202k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   202k|            auto result = scn::scan<T>(
  139|   202k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   202k|                scn::runtime_format(f));
  141|   202k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 20.8k, False: 181k]
  ------------------
  142|  20.8k|                break;
  143|  20.8k|            }
  144|   181k|            it = result->begin();
  145|   181k|        }
  146|  20.8k|    }
  147|       |
  148|       |    // scan localized
  149|  20.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 20.8k, False: 2.08k]
  ------------------
  150|  20.8k|        auto it = scn::ranges::begin(source);
  151|   202k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   202k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   202k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   202k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   202k|            auto result = scn::scan<T>(
  154|   202k|                global_locale,
  155|   202k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   202k|                scn::runtime_format(f));
  157|   202k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 20.8k, False: 181k]
  ------------------
  158|  20.8k|                break;
  159|  20.8k|            }
  160|   181k|            it = result->begin();
  161|   181k|        }
  162|  20.8k|    }
  163|       |
  164|       |    // scan_value
  165|  2.08k|    {
  166|  2.08k|        auto it = scn::ranges::begin(source);
  167|  30.6k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  30.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  30.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  30.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  30.6k|            auto result = scn::scan_value<T>(
  170|  30.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  30.6k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.08k, False: 28.5k]
  ------------------
  172|  2.08k|                break;
  173|  2.08k|            }
  174|  28.5k|            it = result->begin();
  175|  28.5k|        }
  176|  2.08k|    }
  177|  2.08k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcyKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  2.08k|{
  133|       |    // Regular scan
  134|  20.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 20.8k, False: 2.08k]
  ------------------
  135|  20.8k|        auto it = scn::ranges::begin(source);
  136|   174k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   174k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   174k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   174k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   174k|            auto result = scn::scan<T>(
  139|   174k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   174k|                scn::runtime_format(f));
  141|   174k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 20.8k, False: 153k]
  ------------------
  142|  20.8k|                break;
  143|  20.8k|            }
  144|   153k|            it = result->begin();
  145|   153k|        }
  146|  20.8k|    }
  147|       |
  148|       |    // scan localized
  149|  20.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 20.8k, False: 2.08k]
  ------------------
  150|  20.8k|        auto it = scn::ranges::begin(source);
  151|   174k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   174k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   174k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   174k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   174k|            auto result = scn::scan<T>(
  154|   174k|                global_locale,
  155|   174k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   174k|                scn::runtime_format(f));
  157|   174k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 20.8k, False: 153k]
  ------------------
  158|  20.8k|                break;
  159|  20.8k|            }
  160|   153k|            it = result->begin();
  161|   153k|        }
  162|  20.8k|    }
  163|       |
  164|       |    // scan_value
  165|  2.08k|    {
  166|  2.08k|        auto it = scn::ranges::begin(source);
  167|  26.5k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  26.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  26.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  26.5k|            auto result = scn::scan_value<T>(
  170|  26.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  26.5k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.08k, False: 24.4k]
  ------------------
  172|  2.08k|                break;
  173|  2.08k|            }
  174|  24.4k|            it = result->begin();
  175|  24.4k|        }
  176|  2.08k|    }
  177|  2.08k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   89|  2.08k|{
   90|  2.08k|    using char_type = ranges::range_value_t<Source>;
   91|  2.08k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  2.08k|    deque.clear();
   93|  2.08k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  2.08k|              std::back_inserter(deque));
   95|  2.08k|    return deque;
   96|  2.08k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   78|  2.08k|{
   79|  2.08k|    if constexpr (std::is_same_v<CharT, char>) {
   80|  2.08k|        return noncontiguous_buffer;
   81|       |    }
   82|       |    else {
   83|       |        return wnoncontiguous_buffer;
   84|       |    }
   85|  2.08k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  2.08k|{
  122|  2.08k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  2.08k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  2.08k|    buf.resize(sizeof...(Args));
  125|  2.08k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  2.08k|    return buf;
  127|  2.08k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  107|  2.08k|{
  108|       |    if constexpr (std::is_same_v<CharT, char>) {
  109|       |        return format_string_view_buffer;
  110|       |    }
  111|  2.08k|    else {
  112|  2.08k|        return wformat_string_view_buffer;
  113|  2.08k|    }
  114|  2.08k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  4.17k|{
  185|  4.17k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  4.17k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  4.17k|                                   format_strings);
  188|  4.17k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwaNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  4.17k|{
  133|       |    // Regular scan
  134|  41.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 41.7k, False: 4.17k]
  ------------------
  135|  41.7k|        auto it = scn::ranges::begin(source);
  136|  41.9k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  41.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  41.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  41.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  41.9k|            auto result = scn::scan<T>(
  139|  41.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  41.9k|                scn::runtime_format(f));
  141|  41.9k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 41.7k, False: 293]
  ------------------
  142|  41.7k|                break;
  143|  41.7k|            }
  144|    293|            it = result->begin();
  145|    293|        }
  146|  41.7k|    }
  147|       |
  148|       |    // scan localized
  149|  41.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 41.7k, False: 4.17k]
  ------------------
  150|  41.7k|        auto it = scn::ranges::begin(source);
  151|  41.9k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  41.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  41.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  41.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  41.9k|            auto result = scn::scan<T>(
  154|  41.9k|                global_locale,
  155|  41.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  41.9k|                scn::runtime_format(f));
  157|  41.9k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 41.7k, False: 293]
  ------------------
  158|  41.7k|                break;
  159|  41.7k|            }
  160|    293|            it = result->begin();
  161|    293|        }
  162|  41.7k|    }
  163|       |
  164|       |    // scan_value
  165|  4.17k|    {
  166|  4.17k|        auto it = scn::ranges::begin(source);
  167|  4.21k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  4.21k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  4.21k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.21k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  4.21k|            auto result = scn::scan_value<T>(
  170|  4.21k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  4.21k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.17k, False: 48]
  ------------------
  172|  4.17k|                break;
  173|  4.17k|            }
  174|     48|            it = result->begin();
  175|     48|        }
  176|  4.17k|    }
  177|  4.17k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwhNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  4.17k|{
  133|       |    // Regular scan
  134|  41.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 41.7k, False: 4.17k]
  ------------------
  135|  41.7k|        auto it = scn::ranges::begin(source);
  136|  41.9k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  41.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  41.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  41.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  41.9k|            auto result = scn::scan<T>(
  139|  41.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  41.9k|                scn::runtime_format(f));
  141|  41.9k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 41.7k, False: 250]
  ------------------
  142|  41.7k|                break;
  143|  41.7k|            }
  144|    250|            it = result->begin();
  145|    250|        }
  146|  41.7k|    }
  147|       |
  148|       |    // scan localized
  149|  41.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 41.7k, False: 4.17k]
  ------------------
  150|  41.7k|        auto it = scn::ranges::begin(source);
  151|  41.9k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  41.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  41.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  41.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  41.9k|            auto result = scn::scan<T>(
  154|  41.9k|                global_locale,
  155|  41.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  41.9k|                scn::runtime_format(f));
  157|  41.9k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 41.7k, False: 250]
  ------------------
  158|  41.7k|                break;
  159|  41.7k|            }
  160|    250|            it = result->begin();
  161|    250|        }
  162|  41.7k|    }
  163|       |
  164|       |    // scan_value
  165|  4.17k|    {
  166|  4.17k|        auto it = scn::ranges::begin(source);
  167|  4.20k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  4.20k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  4.20k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.20k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  4.20k|            auto result = scn::scan_value<T>(
  170|  4.20k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  4.20k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.17k, False: 39]
  ------------------
  172|  4.17k|                break;
  173|  4.17k|            }
  174|     39|            it = result->begin();
  175|     39|        }
  176|  4.17k|    }
  177|  4.17k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwiNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  4.17k|{
  133|       |    // Regular scan
  134|  41.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 41.7k, False: 4.17k]
  ------------------
  135|  41.7k|        auto it = scn::ranges::begin(source);
  136|  42.0k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  42.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  42.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  42.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  42.0k|            auto result = scn::scan<T>(
  139|  42.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  42.0k|                scn::runtime_format(f));
  141|  42.0k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 41.7k, False: 346]
  ------------------
  142|  41.7k|                break;
  143|  41.7k|            }
  144|    346|            it = result->begin();
  145|    346|        }
  146|  41.7k|    }
  147|       |
  148|       |    // scan localized
  149|  41.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 41.7k, False: 4.17k]
  ------------------
  150|  41.7k|        auto it = scn::ranges::begin(source);
  151|  42.0k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  42.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  42.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  42.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  42.0k|            auto result = scn::scan<T>(
  154|  42.0k|                global_locale,
  155|  42.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  42.0k|                scn::runtime_format(f));
  157|  42.0k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 41.7k, False: 346]
  ------------------
  158|  41.7k|                break;
  159|  41.7k|            }
  160|    346|            it = result->begin();
  161|    346|        }
  162|  41.7k|    }
  163|       |
  164|       |    // scan_value
  165|  4.17k|    {
  166|  4.17k|        auto it = scn::ranges::begin(source);
  167|  4.22k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  4.22k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  4.22k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.22k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  4.22k|            auto result = scn::scan_value<T>(
  170|  4.22k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  4.22k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.17k, False: 58]
  ------------------
  172|  4.17k|                break;
  173|  4.17k|            }
  174|     58|            it = result->begin();
  175|     58|        }
  176|  4.17k|    }
  177|  4.17k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwjNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  4.17k|{
  133|       |    // Regular scan
  134|  41.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 41.7k, False: 4.17k]
  ------------------
  135|  41.7k|        auto it = scn::ranges::begin(source);
  136|  41.9k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  41.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  41.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  41.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  41.9k|            auto result = scn::scan<T>(
  139|  41.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  41.9k|                scn::runtime_format(f));
  141|  41.9k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 41.7k, False: 279]
  ------------------
  142|  41.7k|                break;
  143|  41.7k|            }
  144|    279|            it = result->begin();
  145|    279|        }
  146|  41.7k|    }
  147|       |
  148|       |    // scan localized
  149|  41.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 41.7k, False: 4.17k]
  ------------------
  150|  41.7k|        auto it = scn::ranges::begin(source);
  151|  41.9k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  41.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  41.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  41.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  41.9k|            auto result = scn::scan<T>(
  154|  41.9k|                global_locale,
  155|  41.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  41.9k|                scn::runtime_format(f));
  157|  41.9k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 41.7k, False: 279]
  ------------------
  158|  41.7k|                break;
  159|  41.7k|            }
  160|    279|            it = result->begin();
  161|    279|        }
  162|  41.7k|    }
  163|       |
  164|       |    // scan_value
  165|  4.17k|    {
  166|  4.17k|        auto it = scn::ranges::begin(source);
  167|  4.21k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  4.21k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  4.21k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.21k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  4.21k|            auto result = scn::scan_value<T>(
  170|  4.21k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  4.21k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.17k, False: 45]
  ------------------
  172|  4.17k|                break;
  173|  4.17k|            }
  174|     45|            it = result->begin();
  175|     45|        }
  176|  4.17k|    }
  177|  4.17k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwxNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  4.17k|{
  133|       |    // Regular scan
  134|  41.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 41.7k, False: 4.17k]
  ------------------
  135|  41.7k|        auto it = scn::ranges::begin(source);
  136|  42.1k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  42.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  42.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  42.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  42.1k|            auto result = scn::scan<T>(
  139|  42.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  42.1k|                scn::runtime_format(f));
  141|  42.1k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 41.7k, False: 415]
  ------------------
  142|  41.7k|                break;
  143|  41.7k|            }
  144|    415|            it = result->begin();
  145|    415|        }
  146|  41.7k|    }
  147|       |
  148|       |    // scan localized
  149|  41.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 41.7k, False: 4.17k]
  ------------------
  150|  41.7k|        auto it = scn::ranges::begin(source);
  151|  42.1k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  42.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  42.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  42.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  42.1k|            auto result = scn::scan<T>(
  154|  42.1k|                global_locale,
  155|  42.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  42.1k|                scn::runtime_format(f));
  157|  42.1k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 41.7k, False: 415]
  ------------------
  158|  41.7k|                break;
  159|  41.7k|            }
  160|    415|            it = result->begin();
  161|    415|        }
  162|  41.7k|    }
  163|       |
  164|       |    // scan_value
  165|  4.17k|    {
  166|  4.17k|        auto it = scn::ranges::begin(source);
  167|  4.24k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  4.24k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  4.24k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.24k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  4.24k|            auto result = scn::scan_value<T>(
  170|  4.24k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  4.24k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.17k, False: 73]
  ------------------
  172|  4.17k|                break;
  173|  4.17k|            }
  174|     73|            it = result->begin();
  175|     73|        }
  176|  4.17k|    }
  177|  4.17k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwyNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  4.17k|{
  133|       |    // Regular scan
  134|  41.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 41.7k, False: 4.17k]
  ------------------
  135|  41.7k|        auto it = scn::ranges::begin(source);
  136|  42.0k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  42.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  42.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  42.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  42.0k|            auto result = scn::scan<T>(
  139|  42.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  42.0k|                scn::runtime_format(f));
  141|  42.0k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 41.7k, False: 338]
  ------------------
  142|  41.7k|                break;
  143|  41.7k|            }
  144|    338|            it = result->begin();
  145|    338|        }
  146|  41.7k|    }
  147|       |
  148|       |    // scan localized
  149|  41.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 41.7k, False: 4.17k]
  ------------------
  150|  41.7k|        auto it = scn::ranges::begin(source);
  151|  42.0k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  42.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  42.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  42.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  42.0k|            auto result = scn::scan<T>(
  154|  42.0k|                global_locale,
  155|  42.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  42.0k|                scn::runtime_format(f));
  157|  42.0k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 41.7k, False: 338]
  ------------------
  158|  41.7k|                break;
  159|  41.7k|            }
  160|    338|            it = result->begin();
  161|    338|        }
  162|  41.7k|    }
  163|       |
  164|       |    // scan_value
  165|  4.17k|    {
  166|  4.17k|        auto it = scn::ranges::begin(source);
  167|  4.22k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  4.22k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  4.22k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.22k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  4.22k|            auto result = scn::scan_value<T>(
  170|  4.22k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  4.22k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.17k, False: 57]
  ------------------
  172|  4.17k|                break;
  173|  4.17k|            }
  174|     57|            it = result->begin();
  175|     57|        }
  176|  4.17k|    }
  177|  4.17k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwaKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  4.17k|{
  133|       |    // Regular scan
  134|  41.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 41.7k, False: 4.17k]
  ------------------
  135|  41.7k|        auto it = scn::ranges::begin(source);
  136|  41.9k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  41.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  41.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  41.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  41.9k|            auto result = scn::scan<T>(
  139|  41.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  41.9k|                scn::runtime_format(f));
  141|  41.9k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 41.7k, False: 293]
  ------------------
  142|  41.7k|                break;
  143|  41.7k|            }
  144|    293|            it = result->begin();
  145|    293|        }
  146|  41.7k|    }
  147|       |
  148|       |    // scan localized
  149|  41.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 41.7k, False: 4.17k]
  ------------------
  150|  41.7k|        auto it = scn::ranges::begin(source);
  151|  41.9k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  41.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  41.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  41.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  41.9k|            auto result = scn::scan<T>(
  154|  41.9k|                global_locale,
  155|  41.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  41.9k|                scn::runtime_format(f));
  157|  41.9k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 41.7k, False: 293]
  ------------------
  158|  41.7k|                break;
  159|  41.7k|            }
  160|    293|            it = result->begin();
  161|    293|        }
  162|  41.7k|    }
  163|       |
  164|       |    // scan_value
  165|  4.17k|    {
  166|  4.17k|        auto it = scn::ranges::begin(source);
  167|  4.21k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  4.21k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  4.21k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.21k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  4.21k|            auto result = scn::scan_value<T>(
  170|  4.21k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  4.21k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.17k, False: 48]
  ------------------
  172|  4.17k|                break;
  173|  4.17k|            }
  174|     48|            it = result->begin();
  175|     48|        }
  176|  4.17k|    }
  177|  4.17k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwhKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  4.17k|{
  133|       |    // Regular scan
  134|  41.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 41.7k, False: 4.17k]
  ------------------
  135|  41.7k|        auto it = scn::ranges::begin(source);
  136|  41.9k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  41.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  41.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  41.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  41.9k|            auto result = scn::scan<T>(
  139|  41.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  41.9k|                scn::runtime_format(f));
  141|  41.9k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 41.7k, False: 250]
  ------------------
  142|  41.7k|                break;
  143|  41.7k|            }
  144|    250|            it = result->begin();
  145|    250|        }
  146|  41.7k|    }
  147|       |
  148|       |    // scan localized
  149|  41.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 41.7k, False: 4.17k]
  ------------------
  150|  41.7k|        auto it = scn::ranges::begin(source);
  151|  41.9k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  41.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  41.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  41.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  41.9k|            auto result = scn::scan<T>(
  154|  41.9k|                global_locale,
  155|  41.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  41.9k|                scn::runtime_format(f));
  157|  41.9k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 41.7k, False: 250]
  ------------------
  158|  41.7k|                break;
  159|  41.7k|            }
  160|    250|            it = result->begin();
  161|    250|        }
  162|  41.7k|    }
  163|       |
  164|       |    // scan_value
  165|  4.17k|    {
  166|  4.17k|        auto it = scn::ranges::begin(source);
  167|  4.20k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  4.20k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  4.20k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.20k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  4.20k|            auto result = scn::scan_value<T>(
  170|  4.20k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  4.20k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.17k, False: 39]
  ------------------
  172|  4.17k|                break;
  173|  4.17k|            }
  174|     39|            it = result->begin();
  175|     39|        }
  176|  4.17k|    }
  177|  4.17k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwiKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  4.17k|{
  133|       |    // Regular scan
  134|  41.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 41.7k, False: 4.17k]
  ------------------
  135|  41.7k|        auto it = scn::ranges::begin(source);
  136|  42.0k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  42.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  42.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  42.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  42.0k|            auto result = scn::scan<T>(
  139|  42.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  42.0k|                scn::runtime_format(f));
  141|  42.0k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 41.7k, False: 346]
  ------------------
  142|  41.7k|                break;
  143|  41.7k|            }
  144|    346|            it = result->begin();
  145|    346|        }
  146|  41.7k|    }
  147|       |
  148|       |    // scan localized
  149|  41.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 41.7k, False: 4.17k]
  ------------------
  150|  41.7k|        auto it = scn::ranges::begin(source);
  151|  42.0k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  42.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  42.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  42.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  42.0k|            auto result = scn::scan<T>(
  154|  42.0k|                global_locale,
  155|  42.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  42.0k|                scn::runtime_format(f));
  157|  42.0k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 41.7k, False: 346]
  ------------------
  158|  41.7k|                break;
  159|  41.7k|            }
  160|    346|            it = result->begin();
  161|    346|        }
  162|  41.7k|    }
  163|       |
  164|       |    // scan_value
  165|  4.17k|    {
  166|  4.17k|        auto it = scn::ranges::begin(source);
  167|  4.22k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  4.22k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  4.22k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.22k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  4.22k|            auto result = scn::scan_value<T>(
  170|  4.22k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  4.22k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.17k, False: 58]
  ------------------
  172|  4.17k|                break;
  173|  4.17k|            }
  174|     58|            it = result->begin();
  175|     58|        }
  176|  4.17k|    }
  177|  4.17k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwjKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  4.17k|{
  133|       |    // Regular scan
  134|  41.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 41.7k, False: 4.17k]
  ------------------
  135|  41.7k|        auto it = scn::ranges::begin(source);
  136|  41.9k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  41.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  41.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  41.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  41.9k|            auto result = scn::scan<T>(
  139|  41.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  41.9k|                scn::runtime_format(f));
  141|  41.9k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 41.7k, False: 279]
  ------------------
  142|  41.7k|                break;
  143|  41.7k|            }
  144|    279|            it = result->begin();
  145|    279|        }
  146|  41.7k|    }
  147|       |
  148|       |    // scan localized
  149|  41.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 41.7k, False: 4.17k]
  ------------------
  150|  41.7k|        auto it = scn::ranges::begin(source);
  151|  41.9k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  41.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  41.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  41.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  41.9k|            auto result = scn::scan<T>(
  154|  41.9k|                global_locale,
  155|  41.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  41.9k|                scn::runtime_format(f));
  157|  41.9k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 41.7k, False: 279]
  ------------------
  158|  41.7k|                break;
  159|  41.7k|            }
  160|    279|            it = result->begin();
  161|    279|        }
  162|  41.7k|    }
  163|       |
  164|       |    // scan_value
  165|  4.17k|    {
  166|  4.17k|        auto it = scn::ranges::begin(source);
  167|  4.21k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  4.21k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  4.21k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.21k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  4.21k|            auto result = scn::scan_value<T>(
  170|  4.21k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  4.21k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.17k, False: 45]
  ------------------
  172|  4.17k|                break;
  173|  4.17k|            }
  174|     45|            it = result->begin();
  175|     45|        }
  176|  4.17k|    }
  177|  4.17k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwxKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  4.17k|{
  133|       |    // Regular scan
  134|  41.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 41.7k, False: 4.17k]
  ------------------
  135|  41.7k|        auto it = scn::ranges::begin(source);
  136|  42.1k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  42.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  42.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  42.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  42.1k|            auto result = scn::scan<T>(
  139|  42.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  42.1k|                scn::runtime_format(f));
  141|  42.1k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 41.7k, False: 415]
  ------------------
  142|  41.7k|                break;
  143|  41.7k|            }
  144|    415|            it = result->begin();
  145|    415|        }
  146|  41.7k|    }
  147|       |
  148|       |    // scan localized
  149|  41.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 41.7k, False: 4.17k]
  ------------------
  150|  41.7k|        auto it = scn::ranges::begin(source);
  151|  42.1k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  42.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  42.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  42.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  42.1k|            auto result = scn::scan<T>(
  154|  42.1k|                global_locale,
  155|  42.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  42.1k|                scn::runtime_format(f));
  157|  42.1k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 41.7k, False: 415]
  ------------------
  158|  41.7k|                break;
  159|  41.7k|            }
  160|    415|            it = result->begin();
  161|    415|        }
  162|  41.7k|    }
  163|       |
  164|       |    // scan_value
  165|  4.17k|    {
  166|  4.17k|        auto it = scn::ranges::begin(source);
  167|  4.24k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  4.24k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  4.24k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.24k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  4.24k|            auto result = scn::scan_value<T>(
  170|  4.24k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  4.24k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.17k, False: 73]
  ------------------
  172|  4.17k|                break;
  173|  4.17k|            }
  174|     73|            it = result->begin();
  175|     73|        }
  176|  4.17k|    }
  177|  4.17k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwyKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  4.17k|{
  133|       |    // Regular scan
  134|  41.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 41.7k, False: 4.17k]
  ------------------
  135|  41.7k|        auto it = scn::ranges::begin(source);
  136|  42.0k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  42.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  42.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  42.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  42.0k|            auto result = scn::scan<T>(
  139|  42.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  42.0k|                scn::runtime_format(f));
  141|  42.0k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 41.7k, False: 338]
  ------------------
  142|  41.7k|                break;
  143|  41.7k|            }
  144|    338|            it = result->begin();
  145|    338|        }
  146|  41.7k|    }
  147|       |
  148|       |    // scan localized
  149|  41.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 41.7k, False: 4.17k]
  ------------------
  150|  41.7k|        auto it = scn::ranges::begin(source);
  151|  42.0k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  42.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  42.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  42.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  42.0k|            auto result = scn::scan<T>(
  154|  42.0k|                global_locale,
  155|  42.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  42.0k|                scn::runtime_format(f));
  157|  42.0k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 41.7k, False: 338]
  ------------------
  158|  41.7k|                break;
  159|  41.7k|            }
  160|    338|            it = result->begin();
  161|    338|        }
  162|  41.7k|    }
  163|       |
  164|       |    // scan_value
  165|  4.17k|    {
  166|  4.17k|        auto it = scn::ranges::begin(source);
  167|  4.22k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  4.22k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  4.22k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.22k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  4.22k|            auto result = scn::scan_value<T>(
  170|  4.22k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  4.22k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.17k, False: 57]
  ------------------
  172|  4.17k|                break;
  173|  4.17k|            }
  174|     57|            it = result->begin();
  175|     57|        }
  176|  4.17k|    }
  177|  4.17k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   89|  4.17k|{
   90|  4.17k|    using char_type = ranges::range_value_t<Source>;
   91|  4.17k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  4.17k|    deque.clear();
   93|  4.17k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  4.17k|              std::back_inserter(deque));
   95|  4.17k|    return deque;
   96|  4.17k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   78|  4.17k|{
   79|       |    if constexpr (std::is_same_v<CharT, char>) {
   80|       |        return noncontiguous_buffer;
   81|       |    }
   82|  4.17k|    else {
   83|  4.17k|        return wnoncontiguous_buffer;
   84|  4.17k|    }
   85|  4.17k|}

LLVMFuzzerTestOneInput:
   59|  2.08k|{
   60|  2.08k|    scn::fuzz::run(data, size);
   61|  2.08k|    return 0;
   62|  2.08k|}
int_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   35|  2.08k|{
   36|  2.08k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (36:9): [True: 0, False: 2.08k]
  |  Branch (36:35): [True: 0, False: 2.08k]
  ------------------
   37|      0|        return;
   38|      0|    }
   39|       |
   40|  2.08k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   41|       |
   42|  2.08k|    const auto& f =
   43|  2.08k|        get_format_strings<char>("{}", "{:i}", "{:d}", "{:L}", "{:x}", "{:b}",
   44|  2.08k|                                 "{:o}", "{:B36}", "{:'}", "{:'L}");
   45|  2.08k|    do_basic_run(sv, f);
   46|       |
   47|  2.08k|    const auto& wf = get_format_strings<wchar_t>(
   48|  2.08k|        L"{}", L"{:i}", L"{:d}", L"{:L}", L"{:x}", L"{:b}", L"{:o}", L"{:B36}",
   49|  2.08k|        L"{:'}", L"{:'L}");
   50|  2.08k|    do_basic_run(wsv_reinterpret, wf);
   51|  2.08k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (51:9): [True: 2.08k, False: 0]
  ------------------
   52|  2.08k|        do_basic_run(wsv_transcode, wf);
   53|  2.08k|    }
   54|  2.08k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  2.08k|{
   25|  2.08k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  2.08k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  2.08k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  2.08k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  2.08k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  2.08k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  2.08k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  2.08k|{
   25|  2.08k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  2.08k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  2.08k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  2.08k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  2.08k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  2.08k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  2.08k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  4.17k|{
   25|  4.17k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  4.17k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  4.17k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  4.17k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  4.17k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  4.17k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  4.17k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  4.17k|{
   25|  4.17k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  4.17k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  4.17k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  4.17k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  4.17k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  4.17k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  4.17k|}

