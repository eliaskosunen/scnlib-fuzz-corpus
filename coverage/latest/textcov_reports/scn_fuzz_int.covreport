_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIccEEDaSG_SQ_:
  859|   467k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIwcEEDaSG_SQ_:
  859|  84.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  859|  84.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3802|   877k|{
 3803|   877k|    if constexpr (sizeof(U) == 1) {
 3804|   877k|        return utf8_code_point_length_by_starting_code_unit(ch);
 3805|       |    }
 3806|       |    else if constexpr (sizeof(U) == 2) {
 3807|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 3808|       |    }
 3809|       |    else {
 3810|       |        // utf-32
 3811|       |        static_assert(sizeof(U) == 4);
 3812|       |        SCN_UNUSED(ch);
 3813|       |        return 1;
 3814|       |    }
 3815|   877k|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3766|   877k|{
 3767|   877k|    static_assert(sizeof(U8) == 1);
 3768|       |
 3769|   877k|    SCN_GCC_COMPAT_PUSH
 3770|   877k|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3771|   877k|    constexpr char lengths[] =
 3772|   877k|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3773|   877k|        "\1\1\1\1\1\1\1\1"
 3774|   877k|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3775|       |                            // byte
 3776|   877k|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3777|   877k|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3778|   877k|        "\4";               // highest bits 11110 -> 4-byte cp
 3779|   877k|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3780|   877k|    SCN_GCC_COMPAT_POP
 3781|   877k|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4008|   859k|{
 4009|   859k|    if constexpr (sizeof(CharT) == 1) {
 4010|   859k|        return decode_utf8_code_point_exhaustive(input);
 4011|       |    }
 4012|       |    else if constexpr (sizeof(CharT) == 2) {
 4013|       |        return decode_utf16_code_point_exhaustive(input);
 4014|       |    }
 4015|       |    else {
 4016|       |        SCN_EXPECT(input.size() == 1);
 4017|       |        auto cp = static_cast<char32_t>(input.front());
 4018|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4019|       |            return invalid_code_point;
 4020|       |        }
 4021|       |        return cp;
 4022|       |    }
 4023|   859k|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3821|   859k|{
 3822|   859k|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|   859k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   859k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3823|       |
 3824|   859k|    const auto is_trailing_code_unit = [](char ch) {
 3825|   859k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3826|   859k|    };
 3827|       |
 3828|   859k|    if (input.size() == 1) {
  ------------------
  |  Branch (3828:9): [True: 850k, False: 9.33k]
  ------------------
 3829|   850k|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3829:13): [True: 1.07k, False: 849k]
  ------------------
 3830|  1.07k|            SCN_UNLIKELY_ATTR
 3831|  1.07k|            return invalid_code_point;
 3832|  1.07k|        }
 3833|   849k|        return static_cast<char32_t>(input[0]);
 3834|   850k|    }
 3835|       |
 3836|  9.33k|    if (input.size() == 2) {
  ------------------
  |  Branch (3836:9): [True: 4.04k, False: 5.29k]
  ------------------
 3837|  4.04k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3837:13): [True: 44, False: 3.99k]
  ------------------
 3838|     44|            SCN_UNLIKELY_ATTR
 3839|     44|            return invalid_code_point;
 3840|     44|        }
 3841|  3.99k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3841:13): [True: 782, False: 3.21k]
  ------------------
 3842|    782|            SCN_UNLIKELY_ATTR
 3843|    782|            return invalid_code_point;
 3844|    782|        }
 3845|       |
 3846|  3.21k|        char32_t cp{};
 3847|  3.21k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3848|  3.21k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3849|  3.21k|        return cp;
 3850|  3.99k|    }
 3851|       |
 3852|  5.29k|    if (input.size() == 3) {
  ------------------
  |  Branch (3852:9): [True: 4.14k, False: 1.15k]
  ------------------
 3853|  4.14k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3853:13): [True: 53, False: 4.08k]
  ------------------
 3854|     53|            SCN_UNLIKELY_ATTR
 3855|     53|            return invalid_code_point;
 3856|     53|        }
 3857|  4.08k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3857:13): [True: 613, False: 3.47k]
  ------------------
 3858|  4.08k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3858:13): [True: 260, False: 3.21k]
  ------------------
 3859|    873|            SCN_UNLIKELY_ATTR
 3860|    873|            return invalid_code_point;
 3861|    873|        }
 3862|       |
 3863|  3.21k|        char32_t cp{};
 3864|  3.21k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3865|  3.21k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3866|  3.21k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3867|  3.21k|        return cp;
 3868|  4.08k|    }
 3869|       |
 3870|  1.15k|    if (input.size() == 4) {
  ------------------
  |  Branch (3870:9): [True: 1.15k, False: 0]
  ------------------
 3871|  1.15k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3871:13): [True: 0, False: 1.15k]
  ------------------
 3872|      0|            SCN_UNLIKELY_ATTR
 3873|      0|            return invalid_code_point;
 3874|      0|        }
 3875|  1.15k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3875:13): [True: 263, False: 893]
  ------------------
 3876|    263|            SCN_UNLIKELY_ATTR
 3877|    263|            return invalid_code_point;
 3878|    263|        }
 3879|    893|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3879:13): [True: 391, False: 502]
  ------------------
 3880|    893|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3880:13): [True: 13, False: 489]
  ------------------
 3881|    893|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3881:13): [True: 2, False: 487]
  ------------------
 3882|    406|            SCN_UNLIKELY_ATTR
 3883|    406|            return invalid_code_point;
 3884|    406|        }
 3885|       |
 3886|    487|        char32_t cp{};
 3887|    487|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3888|    487|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3889|    487|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3890|    487|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3891|    487|        return cp;
 3892|    893|    }
 3893|       |
 3894|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3895|       |    // gcc 7 thinks we'll get here, even when we won't
 3896|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3897|      0|#endif
 3898|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3899|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3824|  13.4k|    const auto is_trailing_code_unit = [](char ch) {
 3825|  13.4k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3826|  13.4k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3694|   605k|{
 3695|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3696|       |                                          decltype(first), decltype(last)> &&
 3697|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3698|       |        return {first, last};
 3699|       |    }
 3700|   605k|    else {
 3701|   605k|        return {to_address(first), static_cast<size_t>(std::distance(
 3702|   605k|                                       to_address(first), to_address(last)))};
 3703|   605k|    }
 3704|   605k|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  1.82M|{
  326|  1.82M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  1.82M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  1.82M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  3.93M|{
  304|  3.93M|    return p;
  305|  3.93M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3725|  1.39M|{
 3726|       |    if constexpr (std::is_constructible_v<
 3727|       |                      typename std::basic_string_view<CharT>::iterator,
 3728|       |                      decltype(it)> &&
 3729|  1.39M|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3730|  1.39M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  1.39M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3731|  1.39M|        return it;
 3732|       |    }
 3733|       |    else {
 3734|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3735|       |    }
 3736|  1.39M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  89.6k|    {
 2724|  89.6k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  89.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  89.6k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  89.6k|    {
 2705|  89.6k|        return decay_copy(t.begin());
 2706|  89.6k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1948|  3.64M|{
 1949|  3.64M|    return SCN_FWD(t);
  ------------------
  |  |  930|  3.64M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  3.64M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   915k|    {
 2781|   915k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   915k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   915k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   915k|    {
 2763|   915k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   915k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   915k|    }
_ZN3scn2v34scanIJaENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8877|  34.5k|{
 8878|  34.5k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  34.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  34.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  34.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  34.5k|    static_cast<    \
  |  |  929|  34.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  34.5k|    static_cast<    \
  |  |  929|  34.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  34.5k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJaEEEDav:
 5405|   138k|{
 5406|   138k|    detail::check_scan_arg_types<Args...>();
 5407|   138k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   138k|}
_ZN3scn2v36detail20check_scan_arg_typesIJaEEEvv:
 5144|   209k|{
 5145|   209k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|   209k|                  "Scan argument types must be default constructible");
 5147|   209k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|   209k|                  "Scan argument types must be Destructible");
 5149|   209k|    static_assert(
 5150|   209k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|   209k|        "Scan argument types must not be references");
 5152|   209k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJaEEC2Ev:
 5357|   138k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   138k|    {
 5359|   138k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJaEE12make_argptrsIJaEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|   138k|    {
 5370|   138k|        return {detail::make_arg<
 5371|   138k|            kind, Context,
 5372|   138k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   138k|                                 typename Context::char_type>::value>(args)...};
 5374|   138k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE1EavEEPvRT2_:
 5179|   138k|{
 5180|   138k|    return make_value<Context>(value).ref_value;
 5181|   138k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEaEEDaRT0_:
 5129|   148k|{
 5130|   148k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   148k|                                  needs_context_tag>) {
 5134|   148k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   148k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   148k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERa:
 4968|   148k|    {                                                                        \
 4969|   148k|        return val;                                                          \
 4970|   148k|    }
_ZN3scn2v36detail15make_value_implIRaEEDaOT_:
 5098|   209k|{
 5099|   209k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|   209k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|   209k|    constexpr bool scannable_char =
 5103|   209k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|   209k|    static_assert(scannable_char,
 5105|   209k|                  "Cannot scan an argument of an unsupported character "
 5106|   209k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|   209k|    constexpr bool scannable_const =
 5109|   209k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|   209k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|   209k|    constexpr bool scannable_disabled =
 5113|   209k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|   209k|    static_assert(scannable_disabled,
 5115|   209k|                  "Cannot scan an argument that has been disabled by "
 5116|   209k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|   209k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|   209k|    static_assert(
 5120|   209k|        scannable,
 5121|   209k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|   209k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|   209k|    return arg_value{arg};
 5125|   209k|}
_ZN3scn2v36detail9arg_valueC2IaEERT_:
 4909|   209k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|   209k|    {
 4911|   209k|    }
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8664|   212k|{
 8665|   212k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   212k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8666|   212k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8601|   212k|{
 8602|   212k|    auto buffer = make_scan_buffer(range);
 8603|       |
 8604|   212k|    auto result = vscan_impl(buffer, format, args);
 8605|   212k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   212k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42.3k, False: 170k]
  |  |  ------------------
  ------------------
 8606|  42.3k|        return unexpected(result.error());
 8607|  42.3k|    }
 8608|   170k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   170k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8609|   212k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 4728|   457k|{
 4729|   457k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|   457k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|   457k|                  "\n"
 4733|   457k|                  "Unsupported range type given as input to a scanning "
 4734|   457k|                  "function.\n"
 4735|   457k|                  "A range needs to have a character type (value type) "
 4736|   457k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|   457k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|   457k|                  "to be included.\n"
 4739|   457k|                  "See the scnlib documentation for more details.");
 4740|   457k|    static_assert(
 4741|   457k|        !std::is_same_v<T, custom_char_traits>,
 4742|   457k|        "\n"
 4743|   457k|        "Unsupported range type given as input to a scanning "
 4744|   457k|        "function.\n"
 4745|   457k|        "String types (std::basic_string, and std::basic_string_view) "
 4746|   457k|        "need to use std::char_traits. Strings with custom Traits are "
 4747|   457k|        "not supported.");
 4748|   457k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|   457k|                  "\n"
 4750|   457k|                  "Unsupported range type given as input to a scanning "
 4751|   457k|                  "function.\n"
 4752|   457k|                  "file_marker_found cannot be used as an "
 4753|   457k|                  "source range type to scn::scan.\n"
 4754|   457k|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|   457k|                  "and do not provide an explicit source range, "
 4756|   457k|                  "or use scn::scan with a FILE* directly.");
 4757|   457k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|   457k|                  "\n"
 4759|   457k|                  "Unsupported range type given as input to a scanning "
 4760|   457k|                  "function.\n"
 4761|   457k|                  "In order to be scannable, a range needs to satisfy "
 4762|   457k|                  "`forward_range`. `input_range` is not sufficient.");
 4763|   457k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|   457k|                  "\n"
 4765|   457k|                  "Unsupported range type given as input to a scanning "
 4766|   457k|                  "function.\n"
 4767|   457k|                  "A range needs to model forward_range and have a valid "
 4768|   457k|                  "character type (char or wchar_t) to be scannable.\n"
 4769|   457k|                  "Examples of scannable ranges are std::string, "
 4770|   457k|                  "std::string_view, "
 4771|   457k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|   457k|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|   457k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|   457k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 4667|   457k|{
 4668|   457k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 4669|   457k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4670|       |    }
 4671|       |    else {
 4672|       |        return invalid_char_type{};
 4673|       |    }
 4674|   457k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   457k|    {
 2855|   457k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   457k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   457k|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   457k|    {
 2836|   457k|        return t.data();
 2837|   457k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3228|   457k|    {
 3229|   457k|        return detail::to_address(ranges::begin(derived()));
 3230|   457k|    }
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  2.10M|{
  326|  2.10M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  2.10M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  2.10M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   826k|    {
 2724|   826k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   826k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   826k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   826k|    {
 2705|   826k|        return decay_copy(t.begin());
 2706|   826k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3325|  7.41M|    {
 3326|  7.41M|        return m_iterator;
 3327|  7.41M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3184|   457k|    {
 3185|   457k|        return static_cast<const D&>(*this);
 3186|   457k|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|   457k|    {
 2930|   457k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|   457k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|   457k|    {
 2896|   457k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   457k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|   457k|    }
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1948|   752k|{
 1949|   752k|    return SCN_FWD(t);
  ------------------
  |  |  930|   752k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|   752k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3341|  1.54M|    {
 3342|  1.54M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3343|  1.54M|    }
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1597|  1.91M|    {
 1598|  1.91M|        return has_value();
 1599|  1.91M|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  484|  3.56M|    {
  485|  3.56M|        return m_has_value;
  486|  3.56M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1603|   533k|    {
 1604|   533k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   533k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   533k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   533k|        return this->get_unexpected().error();
 1606|   533k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   533k|    {
  468|   533k|        return m_unexpected;
  469|   533k|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  360|  4.61M|    {
  361|  4.61M|        return m_unexpected;
  362|  4.61M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  345|  2.27M|        : m_unexpected(std::forward<Err>(e))
  346|  2.27M|    {
  347|  2.27M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  2.27M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  2.27M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|  88.9k|        : base(unexpect, std::move(e.error())),
 1474|  88.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  88.9k|    {
 1476|  88.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|  88.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  88.9k|          m_has_value(false)
  446|  88.9k|    {
  447|  88.9k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  354|  2.65M|        : m_unexpected(std::forward<Args>(args)...)
  355|  2.65M|    {
  356|  2.65M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  2.65M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  2.65M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   457k|    {
 1177|   457k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5932|   368k|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|   368k|                      ranges::iterator_t<SourceRange>>) {
 5935|   368k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|   368k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.44M|    {
 2724|  1.44M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.44M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.44M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.44M|    {
 2705|  1.44M|        return decay_copy(t.begin());
 2706|  1.44M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 5919|   368k|{
 5920|   368k|    return ranges::end(source);
 5921|   368k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   368k|    {
 2781|   368k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   368k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   368k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   368k|    {
 2763|   368k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   368k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   368k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3329|  5.66M|    {
 3330|  5.66M|        return m_sentinel;
 3331|  5.66M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1652|  1.11M|    {
 1653|  1.11M|        return value();
 1654|  1.11M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1626|  1.11M|    {
 1627|  1.11M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.11M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.11M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.11M|        return this->get_value();
 1629|  1.11M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  450|  1.11M|    {
  451|  1.11M|        return m_value;
  452|  1.11M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   368k|        : base(std::in_place, std::forward<U>(val)),
 1428|   368k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   368k|    {
 1430|   368k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  435|   368k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   368k|    {
  437|   368k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJaEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7985|  69.0k|    {
 7986|  69.0k|        return m_str;
 7987|  69.0k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJaEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   138k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   138k|    {
 5436|   138k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJaEE12arg_pointersEv:
 5388|   138k|    {
 5389|   138k|        return m_argptrs;
 5390|   138k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5486|   849k|        : m_desc(desc), m_builtin_values(data)
 5487|   849k|    {
 5488|   849k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  69.0k|{
 8831|  69.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  69.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.1k, False: 54.9k]
  |  |  ------------------
  ------------------
 8832|  14.1k|        return unexpected(result.error());
 8833|  14.1k|    }
 8834|  54.9k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  54.9k|    static_cast<    \
  |  |  929|  54.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  54.9k|    static_cast<    \
  |  |  929|  54.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  69.0k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1597|   457k|    {
 1598|   457k|        return has_value();
 1599|   457k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   915k|    {
  485|   915k|        return m_has_value;
  486|   915k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1603|  88.9k|    {
 1604|  88.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  88.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  88.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  88.9k|        return this->get_unexpected().error();
 1606|  88.9k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  88.9k|    {
  468|  88.9k|        return m_unexpected;
  469|  88.9k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  14.8k|        : base(unexpect, std::move(e.error())),
 1474|  14.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  14.8k|    {
 1476|  14.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  14.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  14.8k|          m_has_value(false)
  446|  14.8k|    {
  447|  14.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  74.4k|    {
 1177|  74.4k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1652|   340k|    {
 1653|   340k|        return value();
 1654|   340k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|   368k|    {
 1627|   368k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   368k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   368k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   368k|        return this->get_value();
 1629|   368k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   368k|    {
  451|   368k|        return m_value;
  452|   368k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJaEEC2ES8_ONSt3__15tupleIJaEEE:
 5838|  59.6k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  59.6k|    static_cast<    \
  |  |  929|  59.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  59.6k|    static_cast<    \
  |  |  929|  59.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  59.6k|    {
 5840|  59.6k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5689|   368k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|   368k|    static_cast<    \
  |  |  929|   368k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|   368k|    {
 5691|   368k|    }
_ZN3scn2v36detail25scan_result_value_storageIJaEEC2EONSt3__15tupleIJaEEE:
 5624|   120k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|   120k|    static_cast<    \
  |  |  929|   120k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|   120k|    {
 5626|   120k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|  59.6k|        : base(std::in_place, std::forward<U>(val)),
 1428|  59.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  59.6k|    {
 1430|  59.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|  59.6k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  59.6k|    {
  437|  59.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJaEE4argsEv:
 5383|   138k|    {
 5384|   138k|        return m_args;
 5385|   138k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3310|  3.86M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  3.86M|    static_cast<    \
  |  |  929|  3.86M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  3.86M|    static_cast<    \
  |  |  929|  3.86M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  3.86M|    {
 3312|  3.86M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7701|   849k|{
 7702|   849k|    return s;
 7703|   849k|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7678|   849k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJaEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  69.0k|        : m_str(r.str)
 7981|  69.0k|    {
 7982|  69.0k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEcvbEv:
 1597|  74.4k|    {
 1598|  74.4k|        return has_value();
 1599|  74.4k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   134k|    {
  485|   134k|        return m_has_value;
  486|   134k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEptEv:
 1672|  59.6k|    {
 1673|  59.6k|        return &value();
 1674|  59.6k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|  59.6k|    {
 1627|  59.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  59.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  59.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  59.6k|        return this->get_value();
 1629|  59.6k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  59.6k|    {
  451|  59.6k|        return m_value;
  452|  59.6k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 5707|   368k|    {
 5708|   368k|        return ranges::begin(m_range);
 5709|   368k|    }
_ZN3scn2v34scanIJaENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8944|  34.5k|{
 8945|  34.5k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  34.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  34.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  34.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  34.5k|    static_cast<    \
  |  |  929|  34.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  34.5k|    static_cast<    \
  |  |  929|  34.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  34.5k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8682|   212k|{
 8683|   212k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   212k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8684|   212k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8617|   212k|{
 8618|   212k|#if !SCN_DISABLE_LOCALE
 8619|   212k|    auto buffer = detail::make_scan_buffer(range);
 8620|       |
 8621|   212k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8622|   212k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8623|   212k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8624|       |
 8625|   212k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   212k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42.3k, False: 170k]
  |  |  ------------------
  ------------------
 8626|  42.3k|        return unexpected(result.error());
 8627|  42.3k|    }
 8628|   170k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   170k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8629|       |#else
 8630|       |    static_assert(dependent_false<Locale>::value,
 8631|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8632|       |
 8633|       |    return {};
 8634|       |#endif
 8635|   212k|}
_ZN3scn2v310scan_valueIaNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8983|  5.38k|{
 8984|  5.38k|    T value;
 8985|  5.38k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  5.38k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  5.38k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  5.38k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  5.38k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 706, False: 4.67k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    706|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    706|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    706|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    706|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    706|    }                                                  \
  |  |  |  | 3667|  5.38k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  4.67k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.67k|    static_cast<    \
  |  |  929|  4.67k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.67k|    static_cast<    \
  |  |  929|  4.67k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  5.38k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEaEENS0_14basic_scan_argIT_EERT0_:
 5164|  10.7k|{
 5165|  10.7k|    check_scan_arg_types<T>();
 5166|       |
 5167|  10.7k|    basic_scan_arg<Context> arg;
 5168|  10.7k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  10.7k|    arg.m_value = make_value<Context>(value);
 5170|  10.7k|    return arg;
 5171|  10.7k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5250|   914k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4906|  1.27M|    arg_value() = default;
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8695|  32.3k|{
 8696|  32.3k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|  32.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8697|  32.3k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8641|  32.3k|{
 8642|  32.3k|    auto buffer = detail::make_scan_buffer(range);
 8643|       |
 8644|  32.3k|    auto result = detail::vscan_value_impl(buffer, arg);
 8645|  32.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  32.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.23k, False: 28.1k]
  |  |  ------------------
  ------------------
 8646|  4.23k|        return unexpected(result.error());
 8647|  4.23k|    }
 8648|  28.1k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  28.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8649|  32.3k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|  28.1k|    {
 1663|  28.1k|        return std::move(value());
 1664|  28.1k|    }
_ZN3scn2v34scanIJhENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8877|  30.4k|{
 8878|  30.4k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  30.4k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  30.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  30.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  30.4k|    static_cast<    \
  |  |  929|  30.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  30.4k|    static_cast<    \
  |  |  929|  30.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  30.4k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJhEEEDav:
 5405|   121k|{
 5406|   121k|    detail::check_scan_arg_types<Args...>();
 5407|   121k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   121k|}
_ZN3scn2v36detail20check_scan_arg_typesIJhEEEvv:
 5144|   190k|{
 5145|   190k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|   190k|                  "Scan argument types must be default constructible");
 5147|   190k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|   190k|                  "Scan argument types must be Destructible");
 5149|   190k|    static_assert(
 5150|   190k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|   190k|        "Scan argument types must not be references");
 5152|   190k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJhEEC2Ev:
 5357|   121k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   121k|    {
 5359|   121k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJhEE12make_argptrsIJhEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|   121k|    {
 5370|   121k|        return {detail::make_arg<
 5371|   121k|            kind, Context,
 5372|   121k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   121k|                                 typename Context::char_type>::value>(args)...};
 5374|   121k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE6EhvEEPvRT2_:
 5179|   121k|{
 5180|   121k|    return make_value<Context>(value).ref_value;
 5181|   121k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEhEEDaRT0_:
 5129|   130k|{
 5130|   130k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   130k|                                  needs_context_tag>) {
 5134|   130k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   130k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   130k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERh:
 4968|   130k|    {                                                                        \
 4969|   130k|        return val;                                                          \
 4970|   130k|    }
_ZN3scn2v36detail15make_value_implIRhEEDaOT_:
 5098|   190k|{
 5099|   190k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|   190k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|   190k|    constexpr bool scannable_char =
 5103|   190k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|   190k|    static_assert(scannable_char,
 5105|   190k|                  "Cannot scan an argument of an unsupported character "
 5106|   190k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|   190k|    constexpr bool scannable_const =
 5109|   190k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|   190k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|   190k|    constexpr bool scannable_disabled =
 5113|   190k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|   190k|    static_assert(scannable_disabled,
 5115|   190k|                  "Cannot scan an argument that has been disabled by "
 5116|   190k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|   190k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|   190k|    static_assert(
 5120|   190k|        scannable,
 5121|   190k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|   190k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|   190k|    return arg_value{arg};
 5125|   190k|}
_ZN3scn2v36detail9arg_valueC2IhEERT_:
 4909|   190k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|   190k|    {
 4911|   190k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJhEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7985|  60.8k|    {
 7986|  60.8k|        return m_str;
 7987|  60.8k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJhEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   121k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   121k|    {
 5436|   121k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJhEE12arg_pointersEv:
 5388|   121k|    {
 5389|   121k|        return m_argptrs;
 5390|   121k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  60.8k|{
 8831|  60.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  60.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.1k, False: 46.7k]
  |  |  ------------------
  ------------------
 8832|  14.1k|        return unexpected(result.error());
 8833|  14.1k|    }
 8834|  46.7k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  46.7k|    static_cast<    \
  |  |  929|  46.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  46.7k|    static_cast<    \
  |  |  929|  46.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  60.8k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  14.8k|        : base(unexpect, std::move(e.error())),
 1474|  14.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  14.8k|    {
 1476|  14.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  14.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  14.8k|          m_has_value(false)
  446|  14.8k|    {
  447|  14.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  65.3k|    {
 1177|  65.3k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJhEEC2ES8_ONSt3__15tupleIJhEEE:
 5838|  50.5k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  50.5k|    static_cast<    \
  |  |  929|  50.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  50.5k|    static_cast<    \
  |  |  929|  50.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  50.5k|    {
 5840|  50.5k|    }
_ZN3scn2v36detail25scan_result_value_storageIJhEEC2EONSt3__15tupleIJhEEE:
 5624|   101k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|   101k|    static_cast<    \
  |  |  929|   101k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|   101k|    {
 5626|   101k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|  50.5k|        : base(std::in_place, std::forward<U>(val)),
 1428|  50.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  50.5k|    {
 1430|  50.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|  50.5k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  50.5k|    {
  437|  50.5k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJhEE4argsEv:
 5383|   121k|    {
 5384|   121k|        return m_args;
 5385|   121k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJhEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  60.8k|        : m_str(r.str)
 7981|  60.8k|    {
 7982|  60.8k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEcvbEv:
 1597|  65.3k|    {
 1598|  65.3k|        return has_value();
 1599|  65.3k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   115k|    {
  485|   115k|        return m_has_value;
  486|   115k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEptEv:
 1672|  50.5k|    {
 1673|  50.5k|        return &value();
 1674|  50.5k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|  50.5k|    {
 1627|  50.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  50.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  50.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  50.5k|        return this->get_value();
 1629|  50.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  50.5k|    {
  451|  50.5k|        return m_value;
  452|  50.5k|    }
_ZN3scn2v34scanIJhENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8944|  30.4k|{
 8945|  30.4k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  30.4k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  30.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  30.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  30.4k|    static_cast<    \
  |  |  929|  30.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  30.4k|    static_cast<    \
  |  |  929|  30.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  30.4k|}
_ZN3scn2v310scan_valueIhNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8983|  4.49k|{
 8984|  4.49k|    T value;
 8985|  4.49k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  4.49k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  4.49k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.49k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.49k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 706, False: 3.78k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    706|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    706|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    706|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    706|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    706|    }                                                  \
  |  |  |  | 3667|  4.49k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  3.78k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  3.78k|    static_cast<    \
  |  |  929|  3.78k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  3.78k|    static_cast<    \
  |  |  929|  3.78k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  4.49k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEhEENS0_14basic_scan_argIT_EERT0_:
 5164|  8.98k|{
 5165|  8.98k|    check_scan_arg_types<T>();
 5166|       |
 5167|  8.98k|    basic_scan_arg<Context> arg;
 5168|  8.98k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  8.98k|    arg.m_value = make_value<Context>(value);
 5170|  8.98k|    return arg;
 5171|  8.98k|}
_ZN3scn2v34scanIJiENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8877|  40.3k|{
 8878|  40.3k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  40.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  40.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  40.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  40.3k|    static_cast<    \
  |  |  929|  40.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  40.3k|    static_cast<    \
  |  |  929|  40.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  40.3k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJiEEEDav:
 5405|   160k|{
 5406|   160k|    detail::check_scan_arg_types<Args...>();
 5407|   160k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   160k|}
_ZN3scn2v36detail20check_scan_arg_typesIJiEEEvv:
 5144|   233k|{
 5145|   233k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|   233k|                  "Scan argument types must be default constructible");
 5147|   233k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|   233k|                  "Scan argument types must be Destructible");
 5149|   233k|    static_assert(
 5150|   233k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|   233k|        "Scan argument types must not be references");
 5152|   233k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEEC2Ev:
 5357|   160k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   160k|    {
 5359|   160k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|   160k|    {
 5370|   160k|        return {detail::make_arg<
 5371|   160k|            kind, Context,
 5372|   160k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   160k|                                 typename Context::char_type>::value>(args)...};
 5374|   160k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE3EivEEPvRT2_:
 5179|   160k|{
 5180|   160k|    return make_value<Context>(value).ref_value;
 5181|   160k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEiEEDaRT0_:
 5129|   173k|{
 5130|   173k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   173k|                                  needs_context_tag>) {
 5134|   173k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   173k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   173k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERi:
 4968|   173k|    {                                                                        \
 4969|   173k|        return val;                                                          \
 4970|   173k|    }
_ZN3scn2v36detail15make_value_implIRiEEDaOT_:
 5098|   233k|{
 5099|   233k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|   233k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|   233k|    constexpr bool scannable_char =
 5103|   233k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|   233k|    static_assert(scannable_char,
 5105|   233k|                  "Cannot scan an argument of an unsupported character "
 5106|   233k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|   233k|    constexpr bool scannable_const =
 5109|   233k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|   233k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|   233k|    constexpr bool scannable_disabled =
 5113|   233k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|   233k|    static_assert(scannable_disabled,
 5115|   233k|                  "Cannot scan an argument that has been disabled by "
 5116|   233k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|   233k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|   233k|    static_assert(
 5120|   233k|        scannable,
 5121|   233k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|   233k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|   233k|    return arg_value{arg};
 5125|   233k|}
_ZN3scn2v36detail9arg_valueC2IiEERT_:
 4909|   233k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|   233k|    {
 4911|   233k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7985|  80.6k|    {
 7986|  80.6k|        return m_str;
 7987|  80.6k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJiEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   160k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   160k|    {
 5436|   160k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE12arg_pointersEv:
 5388|   160k|    {
 5389|   160k|        return m_argptrs;
 5390|   160k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  80.6k|{
 8831|  80.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  80.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.1k, False: 66.5k]
  |  |  ------------------
  ------------------
 8832|  14.1k|        return unexpected(result.error());
 8833|  14.1k|    }
 8834|  66.5k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  66.5k|    static_cast<    \
  |  |  929|  66.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  66.5k|    static_cast<    \
  |  |  929|  66.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  80.6k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  14.8k|        : base(unexpect, std::move(e.error())),
 1474|  14.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  14.8k|    {
 1476|  14.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  14.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  14.8k|          m_has_value(false)
  446|  14.8k|    {
  447|  14.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  86.8k|    {
 1177|  86.8k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEC2ES8_ONSt3__15tupleIJiEEE:
 5838|  72.0k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  72.0k|    static_cast<    \
  |  |  929|  72.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  72.0k|    static_cast<    \
  |  |  929|  72.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  72.0k|    {
 5840|  72.0k|    }
_ZN3scn2v36detail25scan_result_value_storageIJiEEC2EONSt3__15tupleIJiEEE:
 5624|   144k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|   144k|    static_cast<    \
  |  |  929|   144k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|   144k|    {
 5626|   144k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|  72.0k|        : base(std::in_place, std::forward<U>(val)),
 1428|  72.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  72.0k|    {
 1430|  72.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|  72.0k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  72.0k|    {
  437|  72.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE4argsEv:
 5383|   160k|    {
 5384|   160k|        return m_args;
 5385|   160k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  80.6k|        : m_str(r.str)
 7981|  80.6k|    {
 7982|  80.6k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEcvbEv:
 1597|  86.8k|    {
 1598|  86.8k|        return has_value();
 1599|  86.8k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   158k|    {
  485|   158k|        return m_has_value;
  486|   158k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEptEv:
 1672|  72.0k|    {
 1673|  72.0k|        return &value();
 1674|  72.0k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|  72.0k|    {
 1627|  72.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  72.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  72.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  72.0k|        return this->get_value();
 1629|  72.0k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  72.0k|    {
  451|  72.0k|        return m_value;
  452|  72.0k|    }
_ZN3scn2v34scanIJiENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8944|  40.3k|{
 8945|  40.3k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  40.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  40.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  40.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  40.3k|    static_cast<    \
  |  |  929|  40.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  40.3k|    static_cast<    \
  |  |  929|  40.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  40.3k|}
_ZN3scn2v310scan_valueIiNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8983|  6.21k|{
 8984|  6.21k|    T value;
 8985|  6.21k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  6.21k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  6.21k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  6.21k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  6.21k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.21k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 706, False: 5.50k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    706|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    706|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    706|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    706|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    706|    }                                                  \
  |  |  |  | 3667|  6.21k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.50k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  5.50k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.50k|    static_cast<    \
  |  |  929|  5.50k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.50k|    static_cast<    \
  |  |  929|  5.50k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  6.21k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEiEENS0_14basic_scan_argIT_EERT0_:
 5164|  12.2k|{
 5165|  12.2k|    check_scan_arg_types<T>();
 5166|       |
 5167|  12.2k|    basic_scan_arg<Context> arg;
 5168|  12.2k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  12.2k|    arg.m_value = make_value<Context>(value);
 5170|  12.2k|    return arg;
 5171|  12.2k|}
_ZN3scn2v34scanIJjENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8877|  32.9k|{
 8878|  32.9k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  32.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  32.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  32.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  32.9k|    static_cast<    \
  |  |  929|  32.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  32.9k|    static_cast<    \
  |  |  929|  32.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  32.9k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJjEEEDav:
 5405|   131k|{
 5406|   131k|    detail::check_scan_arg_types<Args...>();
 5407|   131k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   131k|}
_ZN3scn2v36detail20check_scan_arg_typesIJjEEEvv:
 5144|   202k|{
 5145|   202k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|   202k|                  "Scan argument types must be default constructible");
 5147|   202k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|   202k|                  "Scan argument types must be Destructible");
 5149|   202k|    static_assert(
 5150|   202k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|   202k|        "Scan argument types must not be references");
 5152|   202k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEEC2Ev:
 5357|   131k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   131k|    {
 5359|   131k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|   131k|    {
 5370|   131k|        return {detail::make_arg<
 5371|   131k|            kind, Context,
 5372|   131k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   131k|                                 typename Context::char_type>::value>(args)...};
 5374|   131k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE8EjvEEPvRT2_:
 5179|   131k|{
 5180|   131k|    return make_value<Context>(value).ref_value;
 5181|   131k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEjEEDaRT0_:
 5129|   141k|{
 5130|   141k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   141k|                                  needs_context_tag>) {
 5134|   141k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   141k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   141k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERj:
 4968|   141k|    {                                                                        \
 4969|   141k|        return val;                                                          \
 4970|   141k|    }
_ZN3scn2v36detail15make_value_implIRjEEDaOT_:
 5098|   202k|{
 5099|   202k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|   202k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|   202k|    constexpr bool scannable_char =
 5103|   202k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|   202k|    static_assert(scannable_char,
 5105|   202k|                  "Cannot scan an argument of an unsupported character "
 5106|   202k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|   202k|    constexpr bool scannable_const =
 5109|   202k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|   202k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|   202k|    constexpr bool scannable_disabled =
 5113|   202k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|   202k|    static_assert(scannable_disabled,
 5115|   202k|                  "Cannot scan an argument that has been disabled by "
 5116|   202k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|   202k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|   202k|    static_assert(
 5120|   202k|        scannable,
 5121|   202k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|   202k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|   202k|    return arg_value{arg};
 5125|   202k|}
_ZN3scn2v36detail9arg_valueC2IjEERT_:
 4909|   202k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|   202k|    {
 4911|   202k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7985|  65.9k|    {
 7986|  65.9k|        return m_str;
 7987|  65.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJjEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   131k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   131k|    {
 5436|   131k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE12arg_pointersEv:
 5388|   131k|    {
 5389|   131k|        return m_argptrs;
 5390|   131k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  65.9k|{
 8831|  65.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  65.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.1k, False: 51.8k]
  |  |  ------------------
  ------------------
 8832|  14.1k|        return unexpected(result.error());
 8833|  14.1k|    }
 8834|  51.8k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  51.8k|    static_cast<    \
  |  |  929|  51.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  51.8k|    static_cast<    \
  |  |  929|  51.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  65.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  14.8k|        : base(unexpect, std::move(e.error())),
 1474|  14.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  14.8k|    {
 1476|  14.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  14.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  14.8k|          m_has_value(false)
  446|  14.8k|    {
  447|  14.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  70.8k|    {
 1177|  70.8k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEC2ES8_ONSt3__15tupleIJjEEE:
 5838|  56.0k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  56.0k|    static_cast<    \
  |  |  929|  56.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  56.0k|    static_cast<    \
  |  |  929|  56.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  56.0k|    {
 5840|  56.0k|    }
_ZN3scn2v36detail25scan_result_value_storageIJjEEC2EONSt3__15tupleIJjEEE:
 5624|   113k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|   113k|    static_cast<    \
  |  |  929|   113k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|   113k|    {
 5626|   113k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|  56.0k|        : base(std::in_place, std::forward<U>(val)),
 1428|  56.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  56.0k|    {
 1430|  56.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|  56.0k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  56.0k|    {
  437|  56.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE4argsEv:
 5383|   131k|    {
 5384|   131k|        return m_args;
 5385|   131k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  65.9k|        : m_str(r.str)
 7981|  65.9k|    {
 7982|  65.9k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEcvbEv:
 1597|  70.8k|    {
 1598|  70.8k|        return has_value();
 1599|  70.8k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   126k|    {
  485|   126k|        return m_has_value;
  486|   126k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEptEv:
 1672|  56.0k|    {
 1673|  56.0k|        return &value();
 1674|  56.0k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|  56.0k|    {
 1627|  56.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  56.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  56.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  56.0k|        return this->get_value();
 1629|  56.0k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  56.0k|    {
  451|  56.0k|        return m_value;
  452|  56.0k|    }
_ZN3scn2v34scanIJjENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8944|  32.9k|{
 8945|  32.9k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  32.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  32.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  32.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  32.9k|    static_cast<    \
  |  |  929|  32.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  32.9k|    static_cast<    \
  |  |  929|  32.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  32.9k|}
_ZN3scn2v310scan_valueIjNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8983|  4.93k|{
 8984|  4.93k|    T value;
 8985|  4.93k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  4.93k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  4.93k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.93k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.93k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 706, False: 4.23k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    706|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    706|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    706|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    706|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    706|    }                                                  \
  |  |  |  | 3667|  4.93k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  4.23k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.23k|    static_cast<    \
  |  |  929|  4.23k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.23k|    static_cast<    \
  |  |  929|  4.23k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  4.93k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEjEENS0_14basic_scan_argIT_EERT0_:
 5164|  9.85k|{
 5165|  9.85k|    check_scan_arg_types<T>();
 5166|       |
 5167|  9.85k|    basic_scan_arg<Context> arg;
 5168|  9.85k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  9.85k|    arg.m_value = make_value<Context>(value);
 5170|  9.85k|    return arg;
 5171|  9.85k|}
_ZN3scn2v34scanIJxENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8877|  41.0k|{
 8878|  41.0k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  41.0k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  41.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  41.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.0k|    static_cast<    \
  |  |  929|  41.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.0k|    static_cast<    \
  |  |  929|  41.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  41.0k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJxEEEDav:
 5405|   163k|{
 5406|   163k|    detail::check_scan_arg_types<Args...>();
 5407|   163k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   163k|}
_ZN3scn2v36detail20check_scan_arg_typesIJxEEEvv:
 5144|   236k|{
 5145|   236k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|   236k|                  "Scan argument types must be default constructible");
 5147|   236k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|   236k|                  "Scan argument types must be Destructible");
 5149|   236k|    static_assert(
 5150|   236k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|   236k|        "Scan argument types must not be references");
 5152|   236k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJxEEC2Ev:
 5357|   163k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   163k|    {
 5359|   163k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJxEE12make_argptrsIJxEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|   163k|    {
 5370|   163k|        return {detail::make_arg<
 5371|   163k|            kind, Context,
 5372|   163k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   163k|                                 typename Context::char_type>::value>(args)...};
 5374|   163k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE5ExvEEPvRT2_:
 5179|   163k|{
 5180|   163k|    return make_value<Context>(value).ref_value;
 5181|   163k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEExEEDaRT0_:
 5129|   176k|{
 5130|   176k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   176k|                                  needs_context_tag>) {
 5134|   176k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   176k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   176k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERx:
 4968|   176k|    {                                                                        \
 4969|   176k|        return val;                                                          \
 4970|   176k|    }
_ZN3scn2v36detail15make_value_implIRxEEDaOT_:
 5098|   236k|{
 5099|   236k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|   236k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|   236k|    constexpr bool scannable_char =
 5103|   236k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|   236k|    static_assert(scannable_char,
 5105|   236k|                  "Cannot scan an argument of an unsupported character "
 5106|   236k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|   236k|    constexpr bool scannable_const =
 5109|   236k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|   236k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|   236k|    constexpr bool scannable_disabled =
 5113|   236k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|   236k|    static_assert(scannable_disabled,
 5115|   236k|                  "Cannot scan an argument that has been disabled by "
 5116|   236k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|   236k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|   236k|    static_assert(
 5120|   236k|        scannable,
 5121|   236k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|   236k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|   236k|    return arg_value{arg};
 5125|   236k|}
_ZN3scn2v36detail9arg_valueC2IxEERT_:
 4909|   236k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|   236k|    {
 4911|   236k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJxEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7985|  82.0k|    {
 7986|  82.0k|        return m_str;
 7987|  82.0k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJxEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   163k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   163k|    {
 5436|   163k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJxEE12arg_pointersEv:
 5388|   163k|    {
 5389|   163k|        return m_argptrs;
 5390|   163k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  82.0k|{
 8831|  82.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  82.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.1k, False: 67.8k]
  |  |  ------------------
  ------------------
 8832|  14.1k|        return unexpected(result.error());
 8833|  14.1k|    }
 8834|  67.8k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  67.8k|    static_cast<    \
  |  |  929|  67.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  67.8k|    static_cast<    \
  |  |  929|  67.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  82.0k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  14.8k|        : base(unexpect, std::move(e.error())),
 1474|  14.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  14.8k|    {
 1476|  14.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  14.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  14.8k|          m_has_value(false)
  446|  14.8k|    {
  447|  14.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  88.3k|    {
 1177|  88.3k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJxEEC2ES8_ONSt3__15tupleIJxEEE:
 5838|  73.5k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  73.5k|    static_cast<    \
  |  |  929|  73.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  73.5k|    static_cast<    \
  |  |  929|  73.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  73.5k|    {
 5840|  73.5k|    }
_ZN3scn2v36detail25scan_result_value_storageIJxEEC2EONSt3__15tupleIJxEEE:
 5624|   147k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|   147k|    static_cast<    \
  |  |  929|   147k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|   147k|    {
 5626|   147k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|  73.5k|        : base(std::in_place, std::forward<U>(val)),
 1428|  73.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  73.5k|    {
 1430|  73.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|  73.5k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  73.5k|    {
  437|  73.5k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJxEE4argsEv:
 5383|   163k|    {
 5384|   163k|        return m_args;
 5385|   163k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJxEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  82.0k|        : m_str(r.str)
 7981|  82.0k|    {
 7982|  82.0k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEcvbEv:
 1597|  88.3k|    {
 1598|  88.3k|        return has_value();
 1599|  88.3k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   161k|    {
  485|   161k|        return m_has_value;
  486|   161k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEptEv:
 1672|  73.5k|    {
 1673|  73.5k|        return &value();
 1674|  73.5k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|  73.5k|    {
 1627|  73.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  73.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  73.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  73.5k|        return this->get_value();
 1629|  73.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  73.5k|    {
  451|  73.5k|        return m_value;
  452|  73.5k|    }
_ZN3scn2v34scanIJxENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8944|  41.0k|{
 8945|  41.0k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  41.0k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  41.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  41.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.0k|    static_cast<    \
  |  |  929|  41.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.0k|    static_cast<    \
  |  |  929|  41.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  41.0k|}
_ZN3scn2v310scan_valueIxNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8983|  6.32k|{
 8984|  6.32k|    T value;
 8985|  6.32k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  6.32k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  6.32k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  6.32k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  6.32k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 706, False: 5.61k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    706|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    706|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    706|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    706|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    706|    }                                                  \
  |  |  |  | 3667|  6.32k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.61k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  5.61k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.61k|    static_cast<    \
  |  |  929|  5.61k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.61k|    static_cast<    \
  |  |  929|  5.61k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  6.32k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEExEENS0_14basic_scan_argIT_EERT0_:
 5164|  12.4k|{
 5165|  12.4k|    check_scan_arg_types<T>();
 5166|       |
 5167|  12.4k|    basic_scan_arg<Context> arg;
 5168|  12.4k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  12.4k|    arg.m_value = make_value<Context>(value);
 5170|  12.4k|    return arg;
 5171|  12.4k|}
_ZN3scn2v34scanIJyENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8877|  33.3k|{
 8878|  33.3k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  33.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  33.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  33.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  33.3k|    static_cast<    \
  |  |  929|  33.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  33.3k|    static_cast<    \
  |  |  929|  33.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  33.3k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJyEEEDav:
 5405|   133k|{
 5406|   133k|    detail::check_scan_arg_types<Args...>();
 5407|   133k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   133k|}
_ZN3scn2v36detail20check_scan_arg_typesIJyEEEvv:
 5144|   203k|{
 5145|   203k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|   203k|                  "Scan argument types must be default constructible");
 5147|   203k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|   203k|                  "Scan argument types must be Destructible");
 5149|   203k|    static_assert(
 5150|   203k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|   203k|        "Scan argument types must not be references");
 5152|   203k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJyEEC2Ev:
 5357|   133k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   133k|    {
 5359|   133k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJyEE12make_argptrsIJyEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|   133k|    {
 5370|   133k|        return {detail::make_arg<
 5371|   133k|            kind, Context,
 5372|   133k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   133k|                                 typename Context::char_type>::value>(args)...};
 5374|   133k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE10EyvEEPvRT2_:
 5179|   133k|{
 5180|   133k|    return make_value<Context>(value).ref_value;
 5181|   133k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEyEEDaRT0_:
 5129|   143k|{
 5130|   143k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   143k|                                  needs_context_tag>) {
 5134|   143k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   143k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   143k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERy:
 4968|   143k|    {                                                                        \
 4969|   143k|        return val;                                                          \
 4970|   143k|    }
_ZN3scn2v36detail15make_value_implIRyEEDaOT_:
 5098|   203k|{
 5099|   203k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|   203k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|   203k|    constexpr bool scannable_char =
 5103|   203k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|   203k|    static_assert(scannable_char,
 5105|   203k|                  "Cannot scan an argument of an unsupported character "
 5106|   203k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|   203k|    constexpr bool scannable_const =
 5109|   203k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|   203k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|   203k|    constexpr bool scannable_disabled =
 5113|   203k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|   203k|    static_assert(scannable_disabled,
 5115|   203k|                  "Cannot scan an argument that has been disabled by "
 5116|   203k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|   203k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|   203k|    static_assert(
 5120|   203k|        scannable,
 5121|   203k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|   203k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|   203k|    return arg_value{arg};
 5125|   203k|}
_ZN3scn2v36detail9arg_valueC2IyEERT_:
 4909|   203k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|   203k|    {
 4911|   203k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJyEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7985|  66.6k|    {
 7986|  66.6k|        return m_str;
 7987|  66.6k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJyEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   133k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   133k|    {
 5436|   133k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJyEE12arg_pointersEv:
 5388|   133k|    {
 5389|   133k|        return m_argptrs;
 5390|   133k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  66.6k|{
 8831|  66.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  66.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.1k, False: 52.5k]
  |  |  ------------------
  ------------------
 8832|  14.1k|        return unexpected(result.error());
 8833|  14.1k|    }
 8834|  52.5k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  52.5k|    static_cast<    \
  |  |  929|  52.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  52.5k|    static_cast<    \
  |  |  929|  52.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  66.6k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  14.8k|        : base(unexpect, std::move(e.error())),
 1474|  14.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  14.8k|    {
 1476|  14.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  14.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  14.8k|          m_has_value(false)
  446|  14.8k|    {
  447|  14.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  71.6k|    {
 1177|  71.6k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJyEEC2ES8_ONSt3__15tupleIJyEEE:
 5838|  56.7k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  56.7k|    static_cast<    \
  |  |  929|  56.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  56.7k|    static_cast<    \
  |  |  929|  56.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  56.7k|    {
 5840|  56.7k|    }
_ZN3scn2v36detail25scan_result_value_storageIJyEEC2EONSt3__15tupleIJyEEE:
 5624|   114k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|   114k|    static_cast<    \
  |  |  929|   114k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|   114k|    {
 5626|   114k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|  56.7k|        : base(std::in_place, std::forward<U>(val)),
 1428|  56.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  56.7k|    {
 1430|  56.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|  56.7k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  56.7k|    {
  437|  56.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJyEE4argsEv:
 5383|   133k|    {
 5384|   133k|        return m_args;
 5385|   133k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJyEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  66.6k|        : m_str(r.str)
 7981|  66.6k|    {
 7982|  66.6k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEcvbEv:
 1597|  71.6k|    {
 1598|  71.6k|        return has_value();
 1599|  71.6k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   128k|    {
  485|   128k|        return m_has_value;
  486|   128k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEptEv:
 1672|  56.7k|    {
 1673|  56.7k|        return &value();
 1674|  56.7k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|  56.7k|    {
 1627|  56.7k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  56.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  56.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  56.7k|        return this->get_value();
 1629|  56.7k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  56.7k|    {
  451|  56.7k|        return m_value;
  452|  56.7k|    }
_ZN3scn2v34scanIJyENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8944|  33.3k|{
 8945|  33.3k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  33.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  33.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  33.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  33.3k|    static_cast<    \
  |  |  929|  33.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  33.3k|    static_cast<    \
  |  |  929|  33.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  33.3k|}
_ZN3scn2v310scan_valueIyNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8983|  5.00k|{
 8984|  5.00k|    T value;
 8985|  5.00k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  5.00k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  5.00k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  5.00k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  5.00k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.00k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 706, False: 4.29k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    706|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    706|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    706|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    706|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    706|    }                                                  \
  |  |  |  | 3667|  5.00k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.29k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  4.29k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.29k|    static_cast<    \
  |  |  929|  4.29k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.29k|    static_cast<    \
  |  |  929|  4.29k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  5.00k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEyEENS0_14basic_scan_argIT_EERT0_:
 5164|  9.97k|{
 5165|  9.97k|    check_scan_arg_types<T>();
 5166|       |
 5167|  9.97k|    basic_scan_arg<Context> arg;
 5168|  9.97k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  9.97k|    arg.m_value = make_value<Context>(value);
 5170|  9.97k|    return arg;
 5171|  9.97k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  88.9k|    {
 2724|  88.9k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  88.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  88.9k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  88.9k|    {
 2705|  88.9k|        return decay_copy(t.begin());
 2706|  88.9k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 1948|  9.43M|{
 1949|  9.43M|    return SCN_FWD(t);
  ------------------
  |  |  930|  9.43M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  9.43M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   913k|    {
 2781|   913k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   913k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   913k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   913k|    {
 2763|   913k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   913k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   913k|    }
_ZN3scn2v34scanIJaENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8877|  34.5k|{
 8878|  34.5k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  34.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  34.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  34.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  34.5k|    static_cast<    \
  |  |  929|  34.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  34.5k|    static_cast<    \
  |  |  929|  34.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  34.5k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8664|   212k|{
 8665|   212k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   212k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8666|   212k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8601|   212k|{
 8602|   212k|    auto buffer = make_scan_buffer(range);
 8603|       |
 8604|   212k|    auto result = vscan_impl(buffer, format, args);
 8605|   212k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   212k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42.3k, False: 169k]
  |  |  ------------------
  ------------------
 8606|  42.3k|        return unexpected(result.error());
 8607|  42.3k|    }
 8608|   169k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8609|   212k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4728|   456k|{
 4729|   456k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|   456k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|   456k|                  "\n"
 4733|   456k|                  "Unsupported range type given as input to a scanning "
 4734|   456k|                  "function.\n"
 4735|   456k|                  "A range needs to have a character type (value type) "
 4736|   456k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|   456k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|   456k|                  "to be included.\n"
 4739|   456k|                  "See the scnlib documentation for more details.");
 4740|   456k|    static_assert(
 4741|   456k|        !std::is_same_v<T, custom_char_traits>,
 4742|   456k|        "\n"
 4743|   456k|        "Unsupported range type given as input to a scanning "
 4744|   456k|        "function.\n"
 4745|   456k|        "String types (std::basic_string, and std::basic_string_view) "
 4746|   456k|        "need to use std::char_traits. Strings with custom Traits are "
 4747|   456k|        "not supported.");
 4748|   456k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|   456k|                  "\n"
 4750|   456k|                  "Unsupported range type given as input to a scanning "
 4751|   456k|                  "function.\n"
 4752|   456k|                  "file_marker_found cannot be used as an "
 4753|   456k|                  "source range type to scn::scan.\n"
 4754|   456k|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|   456k|                  "and do not provide an explicit source range, "
 4756|   456k|                  "or use scn::scan with a FILE* directly.");
 4757|   456k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|   456k|                  "\n"
 4759|   456k|                  "Unsupported range type given as input to a scanning "
 4760|   456k|                  "function.\n"
 4761|   456k|                  "In order to be scannable, a range needs to satisfy "
 4762|   456k|                  "`forward_range`. `input_range` is not sufficient.");
 4763|   456k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|   456k|                  "\n"
 4765|   456k|                  "Unsupported range type given as input to a scanning "
 4766|   456k|                  "function.\n"
 4767|   456k|                  "A range needs to model forward_range and have a valid "
 4768|   456k|                  "character type (char or wchar_t) to be scannable.\n"
 4769|   456k|                  "Examples of scannable ranges are std::string, "
 4770|   456k|                  "std::string_view, "
 4771|   456k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|   456k|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|   456k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|   456k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4698|   456k|{
 4699|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 4700|       |        return file_marker_found{};
 4701|       |    }
 4702|       |    else if constexpr (!ranges::forward_range<Range>) {
 4703|       |        if constexpr (ranges::range<Range>) {
 4704|       |            return insufficient_range{};
 4705|       |        }
 4706|       |        else {
 4707|       |            return invalid_input_range{};
 4708|       |        }
 4709|       |    }
 4710|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 4711|       |        return invalid_char_type{};
 4712|       |    }
 4713|   456k|    else {
 4714|   456k|        return make_forward_scan_buffer(r);
 4715|   456k|    }
 4716|   456k|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4532|   456k|{
 4533|   456k|    return basic_scan_forward_buffer_impl(range);
 4534|   456k|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4417|   456k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  930|   456k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4418|   456k|          m_cursor(ranges::begin(*m_range))
 4419|   456k|    {
 4420|   456k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4389|   456k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4390|   456k|    {
 4391|   456k|    }
_ZN3scn2v36detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4157|   456k|        : m_current_view(sv), m_is_contiguous(false)
 4158|   456k|    {
 4159|   456k|    }
_ZN3scn2v36detail17basic_scan_bufferIcED2Ev:
 4073|   456k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   824k|    {
 2724|   824k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   824k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   824k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   824k|    {
 2705|   824k|        return decay_copy(t.begin());
 2706|   824k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3325|  1.19M|    {
 3326|  1.19M|        return m_iterator;
 3327|  1.19M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4423|  2.38M|    {
 4424|  2.38M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4424:13): [True: 144k, False: 2.24M]
  ------------------
 4425|   144k|            return false;
 4426|   144k|        }
 4427|  2.24M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4428|  2.24M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  2.24M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.24M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4429|  2.24M|        }
 4430|  2.24M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4430:13): [True: 1.81M, False: 422k]
  ------------------
 4431|  1.81M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4432|  1.81M|                                          this->m_current_view.begin(),
 4433|  1.81M|                                          this->m_current_view.end());
 4434|  1.81M|        }
 4435|  2.24M|        m_latest = *m_cursor;
 4436|  2.24M|        ++m_cursor;
 4437|  2.24M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4438|  2.24M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4439|  2.24M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  2.24M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.24M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4440|  2.24M|        }
 4441|  2.24M|        return true;
 4442|  2.38M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  6.87M|    {
 2781|  6.87M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  6.87M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  6.87M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  6.87M|    {
 2763|  6.87M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  6.87M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  6.87M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3329|  7.23M|    {
 3330|  7.23M|        return m_sentinel;
 3331|  7.23M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE4syncEl:
 4078|   456k|    {
 4079|   456k|        SCN_UNUSED(position);
  ------------------
  |  |  909|   456k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4080|   456k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1473|  88.9k|        : base(unexpect, std::move(e.error())),
 1474|  88.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  88.9k|    {
 1476|  88.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  444|  88.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  88.9k|          m_has_value(false)
  446|  88.9k|    {
  447|  88.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   456k|    {
 1177|   456k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5932|   367k|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|   367k|                      ranges::iterator_t<SourceRange>>) {
 5935|   367k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|   367k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   367k|    {
 2724|   367k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   367k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   367k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   367k|    {
 2705|   367k|        return decay_copy(t.begin());
 2706|   367k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 5919|   367k|{
 5920|   367k|    return ranges::end(source);
 5921|   367k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   367k|    {
 2781|   367k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   367k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   367k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   367k|    {
 2763|   367k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   367k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   367k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1427|   367k|        : base(std::in_place, std::forward<U>(val)),
 1428|   367k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   367k|    {
 1430|   367k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  435|   367k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   367k|    {
  437|   367k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJaEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7985|  69.0k|    {
 7986|  69.0k|        return m_str;
 7987|  69.0k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|  69.0k|{
 8831|  69.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  69.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.1k, False: 54.9k]
  |  |  ------------------
  ------------------
 8832|  14.1k|        return unexpected(result.error());
 8833|  14.1k|    }
 8834|  54.9k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  54.9k|    static_cast<    \
  |  |  929|  54.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  54.9k|    static_cast<    \
  |  |  929|  54.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  69.0k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1597|   456k|    {
 1598|   456k|        return has_value();
 1599|   456k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   913k|    {
  485|   913k|        return m_has_value;
  486|   913k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1603|  88.9k|    {
 1604|  88.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  88.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  88.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  88.9k|        return this->get_unexpected().error();
 1606|  88.9k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  88.9k|    {
  468|  88.9k|        return m_unexpected;
  469|  88.9k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  14.8k|        : base(unexpect, std::move(e.error())),
 1474|  14.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  14.8k|    {
 1476|  14.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  14.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  14.8k|          m_has_value(false)
  446|  14.8k|    {
  447|  14.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  74.4k|    {
 1177|  74.4k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1652|   339k|    {
 1653|   339k|        return value();
 1654|   339k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1626|   367k|    {
 1627|   367k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   367k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   367k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   367k|        return this->get_value();
 1629|   367k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   367k|    {
  451|   367k|        return m_value;
  452|   367k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJaEEC2ESE_ONS6_5tupleIJaEEE:
 5838|  59.6k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  59.6k|    static_cast<    \
  |  |  929|  59.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  59.6k|    static_cast<    \
  |  |  929|  59.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  59.6k|    {
 5840|  59.6k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2EOSF_:
 5689|   367k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|   367k|    static_cast<    \
  |  |  929|   367k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|   367k|    {
 5691|   367k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|  59.6k|        : base(std::in_place, std::forward<U>(val)),
 1428|  59.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  59.6k|    {
 1430|  59.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|  59.6k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  59.6k|    {
  437|  59.6k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3310|   824k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   824k|    static_cast<    \
  |  |  929|   824k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   824k|    static_cast<    \
  |  |  929|   824k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|   824k|    {
 3312|   824k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJaEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  69.0k|        : m_str(r.str)
 7981|  69.0k|    {
 7982|  69.0k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEcvbEv:
 1597|  74.4k|    {
 1598|  74.4k|        return has_value();
 1599|  74.4k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   134k|    {
  485|   134k|        return m_has_value;
  486|   134k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEptEv:
 1672|  59.6k|    {
 1673|  59.6k|        return &value();
 1674|  59.6k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|  59.6k|    {
 1627|  59.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  59.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  59.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  59.6k|        return this->get_value();
 1629|  59.6k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  59.6k|    {
  451|  59.6k|        return m_value;
  452|  59.6k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 5707|   367k|    {
 5708|   367k|        return ranges::begin(m_range);
 5709|   367k|    }
_ZN3scn2v34scanIJaENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8944|  34.5k|{
 8945|  34.5k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  34.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  34.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  34.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  34.5k|    static_cast<    \
  |  |  929|  34.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  34.5k|    static_cast<    \
  |  |  929|  34.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  34.5k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8682|   212k|{
 8683|   212k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   212k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8684|   212k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8617|   212k|{
 8618|   212k|#if !SCN_DISABLE_LOCALE
 8619|   212k|    auto buffer = detail::make_scan_buffer(range);
 8620|       |
 8621|   212k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8622|   212k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8623|   212k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8624|       |
 8625|   212k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   212k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42.3k, False: 169k]
  |  |  ------------------
  ------------------
 8626|  42.3k|        return unexpected(result.error());
 8627|  42.3k|    }
 8628|   169k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8629|       |#else
 8630|       |    static_assert(dependent_false<Locale>::value,
 8631|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8632|       |
 8633|       |    return {};
 8634|       |#endif
 8635|   212k|}
_ZN3scn2v310scan_valueIaNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8983|  5.37k|{
 8984|  5.37k|    T value;
 8985|  5.37k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  5.37k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  5.37k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  5.37k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  5.37k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 706, False: 4.67k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    706|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    706|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    706|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    706|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    706|    }                                                  \
  |  |  |  | 3667|  5.37k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  4.67k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.67k|    static_cast<    \
  |  |  929|  4.67k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.67k|    static_cast<    \
  |  |  929|  4.67k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  5.37k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8695|  31.8k|{
 8696|  31.8k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|  31.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8697|  31.8k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8641|  31.8k|{
 8642|  31.8k|    auto buffer = detail::make_scan_buffer(range);
 8643|       |
 8644|  31.8k|    auto result = detail::vscan_value_impl(buffer, arg);
 8645|  31.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  31.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.23k, False: 27.6k]
  |  |  ------------------
  ------------------
 8646|  4.23k|        return unexpected(result.error());
 8647|  4.23k|    }
 8648|  27.6k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  27.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8649|  31.8k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSJ_v:
 1662|  27.6k|    {
 1663|  27.6k|        return std::move(value());
 1664|  27.6k|    }
_ZN3scn2v34scanIJhENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8877|  30.4k|{
 8878|  30.4k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  30.4k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  30.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  30.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  30.4k|    static_cast<    \
  |  |  929|  30.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  30.4k|    static_cast<    \
  |  |  929|  30.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  30.4k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJhEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7985|  60.9k|    {
 7986|  60.9k|        return m_str;
 7987|  60.9k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|  60.9k|{
 8831|  60.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  60.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.1k, False: 46.7k]
  |  |  ------------------
  ------------------
 8832|  14.1k|        return unexpected(result.error());
 8833|  14.1k|    }
 8834|  46.7k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  46.7k|    static_cast<    \
  |  |  929|  46.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  46.7k|    static_cast<    \
  |  |  929|  46.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  60.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  14.8k|        : base(unexpect, std::move(e.error())),
 1474|  14.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  14.8k|    {
 1476|  14.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  14.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  14.8k|          m_has_value(false)
  446|  14.8k|    {
  447|  14.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  65.4k|    {
 1177|  65.4k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJhEEC2ESE_ONS6_5tupleIJhEEE:
 5838|  50.5k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  50.5k|    static_cast<    \
  |  |  929|  50.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  50.5k|    static_cast<    \
  |  |  929|  50.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  50.5k|    {
 5840|  50.5k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|  50.5k|        : base(std::in_place, std::forward<U>(val)),
 1428|  50.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  50.5k|    {
 1430|  50.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|  50.5k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  50.5k|    {
  437|  50.5k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJhEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  60.9k|        : m_str(r.str)
 7981|  60.9k|    {
 7982|  60.9k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEcvbEv:
 1597|  65.4k|    {
 1598|  65.4k|        return has_value();
 1599|  65.4k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   115k|    {
  485|   115k|        return m_has_value;
  486|   115k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEptEv:
 1672|  50.5k|    {
 1673|  50.5k|        return &value();
 1674|  50.5k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|  50.5k|    {
 1627|  50.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  50.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  50.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  50.5k|        return this->get_value();
 1629|  50.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  50.5k|    {
  451|  50.5k|        return m_value;
  452|  50.5k|    }
_ZN3scn2v34scanIJhENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8944|  30.4k|{
 8945|  30.4k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  30.4k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  30.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  30.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  30.4k|    static_cast<    \
  |  |  929|  30.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  30.4k|    static_cast<    \
  |  |  929|  30.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  30.4k|}
_ZN3scn2v310scan_valueIhNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8983|  4.48k|{
 8984|  4.48k|    T value;
 8985|  4.48k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  4.48k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  4.48k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.48k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.48k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 706, False: 3.78k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    706|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    706|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    706|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    706|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    706|    }                                                  \
  |  |  |  | 3667|  4.48k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  3.78k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  3.78k|    static_cast<    \
  |  |  929|  3.78k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  3.78k|    static_cast<    \
  |  |  929|  3.78k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  4.48k|}
_ZN3scn2v34scanIJiENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8877|  40.1k|{
 8878|  40.1k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  40.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  40.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  40.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  40.1k|    static_cast<    \
  |  |  929|  40.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  40.1k|    static_cast<    \
  |  |  929|  40.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  40.1k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJiEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7985|  80.3k|    {
 7986|  80.3k|        return m_str;
 7987|  80.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|  80.3k|{
 8831|  80.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  80.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.1k, False: 66.2k]
  |  |  ------------------
  ------------------
 8832|  14.1k|        return unexpected(result.error());
 8833|  14.1k|    }
 8834|  66.2k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  66.2k|    static_cast<    \
  |  |  929|  66.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  66.2k|    static_cast<    \
  |  |  929|  66.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  80.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  14.8k|        : base(unexpect, std::move(e.error())),
 1474|  14.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  14.8k|    {
 1476|  14.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  14.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  14.8k|          m_has_value(false)
  446|  14.8k|    {
  447|  14.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  86.3k|    {
 1177|  86.3k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJiEEC2ESE_ONS6_5tupleIJiEEE:
 5838|  71.5k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  71.5k|    static_cast<    \
  |  |  929|  71.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  71.5k|    static_cast<    \
  |  |  929|  71.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  71.5k|    {
 5840|  71.5k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|  71.5k|        : base(std::in_place, std::forward<U>(val)),
 1428|  71.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  71.5k|    {
 1430|  71.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|  71.5k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  71.5k|    {
  437|  71.5k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  80.3k|        : m_str(r.str)
 7981|  80.3k|    {
 7982|  80.3k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEcvbEv:
 1597|  86.3k|    {
 1598|  86.3k|        return has_value();
 1599|  86.3k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   157k|    {
  485|   157k|        return m_has_value;
  486|   157k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEptEv:
 1672|  71.5k|    {
 1673|  71.5k|        return &value();
 1674|  71.5k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|  71.5k|    {
 1627|  71.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  71.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  71.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  71.5k|        return this->get_value();
 1629|  71.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  71.5k|    {
  451|  71.5k|        return m_value;
  452|  71.5k|    }
_ZN3scn2v34scanIJiENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8944|  40.1k|{
 8945|  40.1k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  40.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  40.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  40.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  40.1k|    static_cast<    \
  |  |  929|  40.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  40.1k|    static_cast<    \
  |  |  929|  40.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  40.1k|}
_ZN3scn2v310scan_valueIiNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8983|  6.01k|{
 8984|  6.01k|    T value;
 8985|  6.01k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  6.01k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  6.01k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  6.01k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  6.01k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.01k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 706, False: 5.30k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    706|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    706|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    706|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    706|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    706|    }                                                  \
  |  |  |  | 3667|  6.01k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  5.30k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.30k|    static_cast<    \
  |  |  929|  5.30k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.30k|    static_cast<    \
  |  |  929|  5.30k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  6.01k|}
_ZN3scn2v34scanIJjENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8877|  32.9k|{
 8878|  32.9k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  32.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  32.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  32.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  32.9k|    static_cast<    \
  |  |  929|  32.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  32.9k|    static_cast<    \
  |  |  929|  32.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  32.9k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJjEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7985|  65.9k|    {
 7986|  65.9k|        return m_str;
 7987|  65.9k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|  65.9k|{
 8831|  65.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  65.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.1k, False: 51.8k]
  |  |  ------------------
  ------------------
 8832|  14.1k|        return unexpected(result.error());
 8833|  14.1k|    }
 8834|  51.8k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  51.8k|    static_cast<    \
  |  |  929|  51.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  51.8k|    static_cast<    \
  |  |  929|  51.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  65.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  14.8k|        : base(unexpect, std::move(e.error())),
 1474|  14.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  14.8k|    {
 1476|  14.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  14.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  14.8k|          m_has_value(false)
  446|  14.8k|    {
  447|  14.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  70.8k|    {
 1177|  70.8k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJjEEC2ESE_ONS6_5tupleIJjEEE:
 5838|  56.0k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  56.0k|    static_cast<    \
  |  |  929|  56.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  56.0k|    static_cast<    \
  |  |  929|  56.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  56.0k|    {
 5840|  56.0k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|  56.0k|        : base(std::in_place, std::forward<U>(val)),
 1428|  56.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  56.0k|    {
 1430|  56.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|  56.0k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  56.0k|    {
  437|  56.0k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  65.9k|        : m_str(r.str)
 7981|  65.9k|    {
 7982|  65.9k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEcvbEv:
 1597|  70.8k|    {
 1598|  70.8k|        return has_value();
 1599|  70.8k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   126k|    {
  485|   126k|        return m_has_value;
  486|   126k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEptEv:
 1672|  56.0k|    {
 1673|  56.0k|        return &value();
 1674|  56.0k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|  56.0k|    {
 1627|  56.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  56.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  56.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  56.0k|        return this->get_value();
 1629|  56.0k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  56.0k|    {
  451|  56.0k|        return m_value;
  452|  56.0k|    }
_ZN3scn2v34scanIJjENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8944|  32.9k|{
 8945|  32.9k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  32.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  32.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  32.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  32.9k|    static_cast<    \
  |  |  929|  32.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  32.9k|    static_cast<    \
  |  |  929|  32.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  32.9k|}
_ZN3scn2v310scan_valueIjNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8983|  4.91k|{
 8984|  4.91k|    T value;
 8985|  4.91k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  4.91k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  4.91k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.91k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.91k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 706, False: 4.21k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    706|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    706|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    706|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    706|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    706|    }                                                  \
  |  |  |  | 3667|  4.91k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.21k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  4.21k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.21k|    static_cast<    \
  |  |  929|  4.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.21k|    static_cast<    \
  |  |  929|  4.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  4.91k|}
_ZN3scn2v34scanIJxENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8877|  40.8k|{
 8878|  40.8k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  40.8k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  40.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  40.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  40.8k|    static_cast<    \
  |  |  929|  40.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  40.8k|    static_cast<    \
  |  |  929|  40.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  40.8k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJxEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7985|  81.6k|    {
 7986|  81.6k|        return m_str;
 7987|  81.6k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|  81.6k|{
 8831|  81.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  81.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.1k, False: 67.5k]
  |  |  ------------------
  ------------------
 8832|  14.1k|        return unexpected(result.error());
 8833|  14.1k|    }
 8834|  67.5k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  67.5k|    static_cast<    \
  |  |  929|  67.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  67.5k|    static_cast<    \
  |  |  929|  67.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  81.6k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  14.8k|        : base(unexpect, std::move(e.error())),
 1474|  14.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  14.8k|    {
 1476|  14.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  14.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  14.8k|          m_has_value(false)
  446|  14.8k|    {
  447|  14.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  87.8k|    {
 1177|  87.8k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJxEEC2ESE_ONS6_5tupleIJxEEE:
 5838|  72.9k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  72.9k|    static_cast<    \
  |  |  929|  72.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  72.9k|    static_cast<    \
  |  |  929|  72.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  72.9k|    {
 5840|  72.9k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|  72.9k|        : base(std::in_place, std::forward<U>(val)),
 1428|  72.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  72.9k|    {
 1430|  72.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|  72.9k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  72.9k|    {
  437|  72.9k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJxEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  81.6k|        : m_str(r.str)
 7981|  81.6k|    {
 7982|  81.6k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEcvbEv:
 1597|  87.8k|    {
 1598|  87.8k|        return has_value();
 1599|  87.8k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   160k|    {
  485|   160k|        return m_has_value;
  486|   160k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEptEv:
 1672|  72.9k|    {
 1673|  72.9k|        return &value();
 1674|  72.9k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|  72.9k|    {
 1627|  72.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  72.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  72.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  72.9k|        return this->get_value();
 1629|  72.9k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  72.9k|    {
  451|  72.9k|        return m_value;
  452|  72.9k|    }
_ZN3scn2v34scanIJxENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8944|  40.8k|{
 8945|  40.8k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  40.8k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  40.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  40.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  40.8k|    static_cast<    \
  |  |  929|  40.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  40.8k|    static_cast<    \
  |  |  929|  40.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  40.8k|}
_ZN3scn2v310scan_valueIxNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8983|  6.11k|{
 8984|  6.11k|    T value;
 8985|  6.11k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  6.11k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  6.11k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  6.11k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  6.11k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 706, False: 5.41k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    706|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    706|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    706|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    706|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    706|    }                                                  \
  |  |  |  | 3667|  6.11k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  5.41k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.41k|    static_cast<    \
  |  |  929|  5.41k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.41k|    static_cast<    \
  |  |  929|  5.41k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  6.11k|}
_ZN3scn2v34scanIJyENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8877|  33.3k|{
 8878|  33.3k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  33.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  33.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  33.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  33.3k|    static_cast<    \
  |  |  929|  33.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  33.3k|    static_cast<    \
  |  |  929|  33.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  33.3k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJyEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7985|  66.6k|    {
 7986|  66.6k|        return m_str;
 7987|  66.6k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|  66.6k|{
 8831|  66.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  66.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.1k, False: 52.5k]
  |  |  ------------------
  ------------------
 8832|  14.1k|        return unexpected(result.error());
 8833|  14.1k|    }
 8834|  52.5k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  52.5k|    static_cast<    \
  |  |  929|  52.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  52.5k|    static_cast<    \
  |  |  929|  52.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  66.6k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  14.8k|        : base(unexpect, std::move(e.error())),
 1474|  14.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  14.8k|    {
 1476|  14.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  14.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  14.8k|          m_has_value(false)
  446|  14.8k|    {
  447|  14.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  71.6k|    {
 1177|  71.6k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJyEEC2ESE_ONS6_5tupleIJyEEE:
 5838|  56.8k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  56.8k|    static_cast<    \
  |  |  929|  56.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  56.8k|    static_cast<    \
  |  |  929|  56.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  56.8k|    {
 5840|  56.8k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|  56.8k|        : base(std::in_place, std::forward<U>(val)),
 1428|  56.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  56.8k|    {
 1430|  56.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|  56.8k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  56.8k|    {
  437|  56.8k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJyEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  66.6k|        : m_str(r.str)
 7981|  66.6k|    {
 7982|  66.6k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEcvbEv:
 1597|  71.6k|    {
 1598|  71.6k|        return has_value();
 1599|  71.6k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   128k|    {
  485|   128k|        return m_has_value;
  486|   128k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEptEv:
 1672|  56.8k|    {
 1673|  56.8k|        return &value();
 1674|  56.8k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|  56.8k|    {
 1627|  56.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  56.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  56.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  56.8k|        return this->get_value();
 1629|  56.8k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  56.8k|    {
  451|  56.8k|        return m_value;
  452|  56.8k|    }
_ZN3scn2v34scanIJyENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8944|  33.3k|{
 8945|  33.3k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  33.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  33.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  33.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  33.3k|    static_cast<    \
  |  |  929|  33.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  33.3k|    static_cast<    \
  |  |  929|  33.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  33.3k|}
_ZN3scn2v310scan_valueIyNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8983|  4.97k|{
 8984|  4.97k|    T value;
 8985|  4.97k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  4.97k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  4.97k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.97k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.97k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 706, False: 4.27k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    706|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    706|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    706|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    706|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    706|    }                                                  \
  |  |  |  | 3667|  4.97k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.27k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  4.27k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.27k|    static_cast<    \
  |  |  929|  4.27k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.27k|    static_cast<    \
  |  |  929|  4.27k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  4.97k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   179k|    {
 2724|   179k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   179k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   179k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   179k|    {
 2705|   179k|        return decay_copy(t.begin());
 2706|   179k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1948|   844k|{
 1949|   844k|    return SCN_FWD(t);
  ------------------
  |  |  930|   844k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|   844k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   363k|    {
 2781|   363k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   363k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   363k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   363k|    {
 2763|   363k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   363k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   363k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJaEEEDav:
 5405|  57.3k|{
 5406|  57.3k|    detail::check_scan_arg_types<Args...>();
 5407|  57.3k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  57.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJaEEC2Ev:
 5357|  57.3k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  57.3k|    {
 5359|  57.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJaEE12make_argptrsIJaEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  57.3k|    {
 5370|  57.3k|        return {detail::make_arg<
 5371|  57.3k|            kind, Context,
 5372|  57.3k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  57.3k|                                 typename Context::char_type>::value>(args)...};
 5374|  57.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE1EavEEPvRT2_:
 5179|  57.3k|{
 5180|  57.3k|    return make_value<Context>(value).ref_value;
 5181|  57.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEaEEDaRT0_:
 5129|  60.2k|{
 5130|  60.2k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  60.2k|                                  needs_context_tag>) {
 5134|  60.2k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  60.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  60.2k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERa:
 4968|  60.2k|    {                                                                        \
 4969|  60.2k|        return val;                                                          \
 4970|  60.2k|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8601|  86.2k|{
 8602|  86.2k|    auto buffer = make_scan_buffer(range);
 8603|       |
 8604|  86.2k|    auto result = vscan_impl(buffer, format, args);
 8605|  86.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  86.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 84.7k, False: 1.50k]
  |  |  ------------------
  ------------------
 8606|  84.7k|        return unexpected(result.error());
 8607|  84.7k|    }
 8608|  1.50k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.50k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8609|  86.2k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 4728|   181k|{
 4729|   181k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|   181k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|   181k|                  "\n"
 4733|   181k|                  "Unsupported range type given as input to a scanning "
 4734|   181k|                  "function.\n"
 4735|   181k|                  "A range needs to have a character type (value type) "
 4736|   181k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|   181k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|   181k|                  "to be included.\n"
 4739|   181k|                  "See the scnlib documentation for more details.");
 4740|   181k|    static_assert(
 4741|   181k|        !std::is_same_v<T, custom_char_traits>,
 4742|   181k|        "\n"
 4743|   181k|        "Unsupported range type given as input to a scanning "
 4744|   181k|        "function.\n"
 4745|   181k|        "String types (std::basic_string, and std::basic_string_view) "
 4746|   181k|        "need to use std::char_traits. Strings with custom Traits are "
 4747|   181k|        "not supported.");
 4748|   181k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|   181k|                  "\n"
 4750|   181k|                  "Unsupported range type given as input to a scanning "
 4751|   181k|                  "function.\n"
 4752|   181k|                  "file_marker_found cannot be used as an "
 4753|   181k|                  "source range type to scn::scan.\n"
 4754|   181k|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|   181k|                  "and do not provide an explicit source range, "
 4756|   181k|                  "or use scn::scan with a FILE* directly.");
 4757|   181k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|   181k|                  "\n"
 4759|   181k|                  "Unsupported range type given as input to a scanning "
 4760|   181k|                  "function.\n"
 4761|   181k|                  "In order to be scannable, a range needs to satisfy "
 4762|   181k|                  "`forward_range`. `input_range` is not sufficient.");
 4763|   181k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|   181k|                  "\n"
 4765|   181k|                  "Unsupported range type given as input to a scanning "
 4766|   181k|                  "function.\n"
 4767|   181k|                  "A range needs to model forward_range and have a valid "
 4768|   181k|                  "character type (char or wchar_t) to be scannable.\n"
 4769|   181k|                  "Examples of scannable ranges are std::string, "
 4770|   181k|                  "std::string_view, "
 4771|   181k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|   181k|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|   181k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|   181k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 4667|   181k|{
 4668|   181k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 4669|   181k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4670|       |    }
 4671|       |    else {
 4672|       |        return invalid_char_type{};
 4673|       |    }
 4674|   181k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   181k|    {
 2855|   181k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   181k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   181k|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   181k|    {
 2836|   181k|        return t.data();
 2837|   181k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3228|   181k|    {
 3229|   181k|        return detail::to_address(ranges::begin(derived()));
 3230|   181k|    }
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|   297k|{
  326|   297k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   297k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|   297k|}
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  303|   297k|{
  304|   297k|    return p;
  305|   297k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   184k|    {
 2724|   184k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   184k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   184k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   184k|    {
 2705|   184k|        return decay_copy(t.begin());
 2706|   184k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3325|  37.2M|    {
 3326|  37.2M|        return m_iterator;
 3327|  37.2M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3184|   181k|    {
 3185|   181k|        return static_cast<const D&>(*this);
 3186|   181k|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|   181k|    {
 2930|   181k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|   181k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|   181k|    {
 2896|   181k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   181k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|   181k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3341|   394k|    {
 3342|   394k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3343|   394k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|   177k|        : base(unexpect, std::move(e.error())),
 1474|   177k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   177k|    {
 1476|   177k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|   177k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   177k|          m_has_value(false)
  446|   177k|    {
  447|   177k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   181k|    {
 1177|   181k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5932|  3.25k|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|  3.25k|                      ranges::iterator_t<SourceRange>>) {
 5935|  3.25k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|  3.25k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   113k|    {
 2724|   113k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   113k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   113k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   113k|    {
 2705|   113k|        return decay_copy(t.begin());
 2706|   113k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 5919|  3.25k|{
 5920|  3.25k|    return ranges::end(source);
 5921|  3.25k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  3.25k|    {
 2781|  3.25k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.25k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  3.25k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  3.25k|    {
 2763|  3.25k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  3.25k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  3.25k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3329|  36.4M|    {
 3330|  36.4M|        return m_sentinel;
 3331|  36.4M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|  3.25k|        : base(std::in_place, std::forward<U>(val)),
 1428|  3.25k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  3.25k|    {
 1430|  3.25k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  435|  3.25k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  3.25k|    {
  437|  3.25k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJaEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7985|  28.6k|    {
 7986|  28.6k|        return m_str;
 7987|  28.6k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJaEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  57.3k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  57.3k|    {
 5436|  57.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJaEE12arg_pointersEv:
 5388|  57.3k|    {
 5389|  57.3k|        return m_argptrs;
 5390|  57.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5486|   344k|        : m_desc(desc), m_builtin_values(data)
 5487|   344k|    {
 5488|   344k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  28.6k|{
 8831|  28.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  28.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.2k, False: 448]
  |  |  ------------------
  ------------------
 8832|  28.2k|        return unexpected(result.error());
 8833|  28.2k|    }
 8834|    448|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    448|    static_cast<    \
  |  |  929|    448|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    448|    static_cast<    \
  |  |  929|    448|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  28.6k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1597|   181k|    {
 1598|   181k|        return has_value();
 1599|   181k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   362k|    {
  485|   362k|        return m_has_value;
  486|   362k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1603|   177k|    {
 1604|   177k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   177k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   177k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   177k|        return this->get_unexpected().error();
 1606|   177k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   177k|    {
  468|   177k|        return m_unexpected;
  469|   177k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  29.6k|        : base(unexpect, std::move(e.error())),
 1474|  29.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  29.6k|    {
 1476|  29.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  29.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  29.6k|          m_has_value(false)
  446|  29.6k|    {
  447|  29.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  30.1k|    {
 1177|  30.1k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1652|  3.00k|    {
 1653|  3.00k|        return value();
 1654|  3.00k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|  3.25k|    {
 1627|  3.25k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.25k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.25k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.25k|        return this->get_value();
 1629|  3.25k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  3.25k|    {
  451|  3.25k|        return m_value;
  452|  3.25k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJaEEC2ES8_ONSt3__15tupleIJaEEE:
 5838|    484|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    484|    static_cast<    \
  |  |  929|    484|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    484|    static_cast<    \
  |  |  929|    484|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    484|    {
 5840|    484|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5689|  3.25k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|  3.25k|    static_cast<    \
  |  |  929|  3.25k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|  3.25k|    {
 5691|  3.25k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|    484|        : base(std::in_place, std::forward<U>(val)),
 1428|    484|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    484|    {
 1430|    484|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|    484|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    484|    {
  437|    484|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJaEE4argsEv:
 5383|  57.3k|    {
 5384|  57.3k|        return m_args;
 5385|  57.3k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3310|  1.22M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.22M|    static_cast<    \
  |  |  929|  1.22M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.22M|    static_cast<    \
  |  |  929|  1.22M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  1.22M|    {
 3312|  1.22M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7706|   344k|{
 7707|   344k|    return s;
 7708|   344k|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7678|   344k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJaEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  28.6k|        : m_str(r.str)
 7981|  28.6k|    {
 7982|  28.6k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEcvbEv:
 1597|  30.1k|    {
 1598|  30.1k|        return has_value();
 1599|  30.1k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  30.6k|    {
  485|  30.6k|        return m_has_value;
  486|  30.6k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEptEv:
 1672|    484|    {
 1673|    484|        return &value();
 1674|    484|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|    484|    {
 1627|    484|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    484|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    484|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    484|        return this->get_value();
 1629|    484|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    484|    {
  451|    484|        return m_value;
  452|    484|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 5707|  3.25k|    {
 5708|  3.25k|        return ranges::begin(m_range);
 5709|  3.25k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8617|  86.2k|{
 8618|  86.2k|#if !SCN_DISABLE_LOCALE
 8619|  86.2k|    auto buffer = detail::make_scan_buffer(range);
 8620|       |
 8621|  86.2k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8622|  86.2k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8623|  86.2k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8624|       |
 8625|  86.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  86.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 84.7k, False: 1.50k]
  |  |  ------------------
  ------------------
 8626|  84.7k|        return unexpected(result.error());
 8627|  84.7k|    }
 8628|  1.50k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.50k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8629|       |#else
 8630|       |    static_assert(dependent_false<Locale>::value,
 8631|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8632|       |
 8633|       |    return {};
 8634|       |#endif
 8635|  86.2k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEaEENS0_14basic_scan_argIT_EERT0_:
 5164|  2.89k|{
 5165|  2.89k|    check_scan_arg_types<T>();
 5166|       |
 5167|  2.89k|    basic_scan_arg<Context> arg;
 5168|  2.89k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  2.89k|    arg.m_value = make_value<Context>(value);
 5170|  2.89k|    return arg;
 5171|  2.89k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5250|   362k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8641|  8.71k|{
 8642|  8.71k|    auto buffer = detail::make_scan_buffer(range);
 8643|       |
 8644|  8.71k|    auto result = detail::vscan_value_impl(buffer, arg);
 8645|  8.71k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.47k, False: 246]
  |  |  ------------------
  ------------------
 8646|  8.47k|        return unexpected(result.error());
 8647|  8.47k|    }
 8648|    246|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|    246|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8649|  8.71k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|    246|    {
 1663|    246|        return std::move(value());
 1664|    246|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJhEEEDav:
 5405|  57.2k|{
 5406|  57.2k|    detail::check_scan_arg_types<Args...>();
 5407|  57.2k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  57.2k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJhEEC2Ev:
 5357|  57.2k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  57.2k|    {
 5359|  57.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJhEE12make_argptrsIJhEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  57.2k|    {
 5370|  57.2k|        return {detail::make_arg<
 5371|  57.2k|            kind, Context,
 5372|  57.2k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  57.2k|                                 typename Context::char_type>::value>(args)...};
 5374|  57.2k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE6EhvEEPvRT2_:
 5179|  57.2k|{
 5180|  57.2k|    return make_value<Context>(value).ref_value;
 5181|  57.2k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEhEEDaRT0_:
 5129|  60.1k|{
 5130|  60.1k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  60.1k|                                  needs_context_tag>) {
 5134|  60.1k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  60.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  60.1k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERh:
 4968|  60.1k|    {                                                                        \
 4969|  60.1k|        return val;                                                          \
 4970|  60.1k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJhEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7985|  28.6k|    {
 7986|  28.6k|        return m_str;
 7987|  28.6k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJhEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  57.2k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  57.2k|    {
 5436|  57.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJhEE12arg_pointersEv:
 5388|  57.2k|    {
 5389|  57.2k|        return m_argptrs;
 5390|  57.2k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  28.6k|{
 8831|  28.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  28.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.2k, False: 382]
  |  |  ------------------
  ------------------
 8832|  28.2k|        return unexpected(result.error());
 8833|  28.2k|    }
 8834|    382|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    382|    static_cast<    \
  |  |  929|    382|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    382|    static_cast<    \
  |  |  929|    382|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  28.6k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  29.6k|        : base(unexpect, std::move(e.error())),
 1474|  29.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  29.6k|    {
 1476|  29.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  29.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  29.6k|          m_has_value(false)
  446|  29.6k|    {
  447|  29.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  30.0k|    {
 1177|  30.0k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJhEEC2ES8_ONSt3__15tupleIJhEEE:
 5838|    411|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    411|    static_cast<    \
  |  |  929|    411|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    411|    static_cast<    \
  |  |  929|    411|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    411|    {
 5840|    411|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|    411|        : base(std::in_place, std::forward<U>(val)),
 1428|    411|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    411|    {
 1430|    411|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|    411|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    411|    {
  437|    411|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJhEE4argsEv:
 5383|  57.2k|    {
 5384|  57.2k|        return m_args;
 5385|  57.2k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJhEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  28.6k|        : m_str(r.str)
 7981|  28.6k|    {
 7982|  28.6k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEcvbEv:
 1597|  30.0k|    {
 1598|  30.0k|        return has_value();
 1599|  30.0k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  30.4k|    {
  485|  30.4k|        return m_has_value;
  486|  30.4k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEptEv:
 1672|    411|    {
 1673|    411|        return &value();
 1674|    411|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|    411|    {
 1627|    411|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    411|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    411|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    411|        return this->get_value();
 1629|    411|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    411|    {
  451|    411|        return m_value;
  452|    411|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEhEENS0_14basic_scan_argIT_EERT0_:
 5164|  2.88k|{
 5165|  2.88k|    check_scan_arg_types<T>();
 5166|       |
 5167|  2.88k|    basic_scan_arg<Context> arg;
 5168|  2.88k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  2.88k|    arg.m_value = make_value<Context>(value);
 5170|  2.88k|    return arg;
 5171|  2.88k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJiEEEDav:
 5405|  57.5k|{
 5406|  57.5k|    detail::check_scan_arg_types<Args...>();
 5407|  57.5k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  57.5k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEEC2Ev:
 5357|  57.5k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  57.5k|    {
 5359|  57.5k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  57.5k|    {
 5370|  57.5k|        return {detail::make_arg<
 5371|  57.5k|            kind, Context,
 5372|  57.5k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  57.5k|                                 typename Context::char_type>::value>(args)...};
 5374|  57.5k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE3EivEEPvRT2_:
 5179|  57.5k|{
 5180|  57.5k|    return make_value<Context>(value).ref_value;
 5181|  57.5k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEiEEDaRT0_:
 5129|  60.5k|{
 5130|  60.5k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  60.5k|                                  needs_context_tag>) {
 5134|  60.5k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  60.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  60.5k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERi:
 4968|  60.5k|    {                                                                        \
 4969|  60.5k|        return val;                                                          \
 4970|  60.5k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7985|  28.7k|    {
 7986|  28.7k|        return m_str;
 7987|  28.7k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJiEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  57.5k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  57.5k|    {
 5436|  57.5k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE12arg_pointersEv:
 5388|  57.5k|    {
 5389|  57.5k|        return m_argptrs;
 5390|  57.5k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  28.7k|{
 8831|  28.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  28.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.2k, False: 554]
  |  |  ------------------
  ------------------
 8832|  28.2k|        return unexpected(result.error());
 8833|  28.2k|    }
 8834|    554|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    554|    static_cast<    \
  |  |  929|    554|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    554|    static_cast<    \
  |  |  929|    554|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  28.7k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  29.6k|        : base(unexpect, std::move(e.error())),
 1474|  29.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  29.6k|    {
 1476|  29.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  29.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  29.6k|          m_has_value(false)
  446|  29.6k|    {
  447|  29.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  30.2k|    {
 1177|  30.2k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEC2ES8_ONSt3__15tupleIJiEEE:
 5838|    600|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    600|    static_cast<    \
  |  |  929|    600|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    600|    static_cast<    \
  |  |  929|    600|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    600|    {
 5840|    600|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|    600|        : base(std::in_place, std::forward<U>(val)),
 1428|    600|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    600|    {
 1430|    600|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|    600|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    600|    {
  437|    600|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE4argsEv:
 5383|  57.5k|    {
 5384|  57.5k|        return m_args;
 5385|  57.5k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  28.7k|        : m_str(r.str)
 7981|  28.7k|    {
 7982|  28.7k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEcvbEv:
 1597|  30.2k|    {
 1598|  30.2k|        return has_value();
 1599|  30.2k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  30.8k|    {
  485|  30.8k|        return m_has_value;
  486|  30.8k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEptEv:
 1672|    600|    {
 1673|    600|        return &value();
 1674|    600|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|    600|    {
 1627|    600|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    600|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    600|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    600|        return this->get_value();
 1629|    600|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    600|    {
  451|    600|        return m_value;
  452|    600|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEiEENS0_14basic_scan_argIT_EERT0_:
 5164|  2.91k|{
 5165|  2.91k|    check_scan_arg_types<T>();
 5166|       |
 5167|  2.91k|    basic_scan_arg<Context> arg;
 5168|  2.91k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  2.91k|    arg.m_value = make_value<Context>(value);
 5170|  2.91k|    return arg;
 5171|  2.91k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJjEEEDav:
 5405|  57.3k|{
 5406|  57.3k|    detail::check_scan_arg_types<Args...>();
 5407|  57.3k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  57.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEEC2Ev:
 5357|  57.3k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  57.3k|    {
 5359|  57.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  57.3k|    {
 5370|  57.3k|        return {detail::make_arg<
 5371|  57.3k|            kind, Context,
 5372|  57.3k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  57.3k|                                 typename Context::char_type>::value>(args)...};
 5374|  57.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE8EjvEEPvRT2_:
 5179|  57.3k|{
 5180|  57.3k|    return make_value<Context>(value).ref_value;
 5181|  57.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEjEEDaRT0_:
 5129|  60.2k|{
 5130|  60.2k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  60.2k|                                  needs_context_tag>) {
 5134|  60.2k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  60.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  60.2k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERj:
 4968|  60.2k|    {                                                                        \
 4969|  60.2k|        return val;                                                          \
 4970|  60.2k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7985|  28.6k|    {
 7986|  28.6k|        return m_str;
 7987|  28.6k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJjEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  57.3k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  57.3k|    {
 5436|  57.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE12arg_pointersEv:
 5388|  57.3k|    {
 5389|  57.3k|        return m_argptrs;
 5390|  57.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  28.6k|{
 8831|  28.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  28.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.2k, False: 440]
  |  |  ------------------
  ------------------
 8832|  28.2k|        return unexpected(result.error());
 8833|  28.2k|    }
 8834|    440|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    440|    static_cast<    \
  |  |  929|    440|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    440|    static_cast<    \
  |  |  929|    440|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  28.6k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  29.6k|        : base(unexpect, std::move(e.error())),
 1474|  29.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  29.6k|    {
 1476|  29.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  29.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  29.6k|          m_has_value(false)
  446|  29.6k|    {
  447|  29.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  30.1k|    {
 1177|  30.1k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEC2ES8_ONSt3__15tupleIJjEEE:
 5838|    475|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    475|    static_cast<    \
  |  |  929|    475|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    475|    static_cast<    \
  |  |  929|    475|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    475|    {
 5840|    475|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|    475|        : base(std::in_place, std::forward<U>(val)),
 1428|    475|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    475|    {
 1430|    475|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|    475|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    475|    {
  437|    475|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE4argsEv:
 5383|  57.3k|    {
 5384|  57.3k|        return m_args;
 5385|  57.3k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  28.6k|        : m_str(r.str)
 7981|  28.6k|    {
 7982|  28.6k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEcvbEv:
 1597|  30.1k|    {
 1598|  30.1k|        return has_value();
 1599|  30.1k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  30.6k|    {
  485|  30.6k|        return m_has_value;
  486|  30.6k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEptEv:
 1672|    475|    {
 1673|    475|        return &value();
 1674|    475|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|    475|    {
 1627|    475|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    475|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    475|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    475|        return this->get_value();
 1629|    475|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    475|    {
  451|    475|        return m_value;
  452|    475|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEjEENS0_14basic_scan_argIT_EERT0_:
 5164|  2.89k|{
 5165|  2.89k|    check_scan_arg_types<T>();
 5166|       |
 5167|  2.89k|    basic_scan_arg<Context> arg;
 5168|  2.89k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  2.89k|    arg.m_value = make_value<Context>(value);
 5170|  2.89k|    return arg;
 5171|  2.89k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJxEEEDav:
 5405|  57.8k|{
 5406|  57.8k|    detail::check_scan_arg_types<Args...>();
 5407|  57.8k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  57.8k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJxEEC2Ev:
 5357|  57.8k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  57.8k|    {
 5359|  57.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJxEE12make_argptrsIJxEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  57.8k|    {
 5370|  57.8k|        return {detail::make_arg<
 5371|  57.8k|            kind, Context,
 5372|  57.8k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  57.8k|                                 typename Context::char_type>::value>(args)...};
 5374|  57.8k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE5ExvEEPvRT2_:
 5179|  57.8k|{
 5180|  57.8k|    return make_value<Context>(value).ref_value;
 5181|  57.8k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEExEEDaRT0_:
 5129|  60.7k|{
 5130|  60.7k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  60.7k|                                  needs_context_tag>) {
 5134|  60.7k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  60.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  60.7k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERx:
 4968|  60.7k|    {                                                                        \
 4969|  60.7k|        return val;                                                          \
 4970|  60.7k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJxEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7985|  28.9k|    {
 7986|  28.9k|        return m_str;
 7987|  28.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJxEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  57.8k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  57.8k|    {
 5436|  57.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJxEE12arg_pointersEv:
 5388|  57.8k|    {
 5389|  57.8k|        return m_argptrs;
 5390|  57.8k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  28.9k|{
 8831|  28.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  28.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.2k, False: 660]
  |  |  ------------------
  ------------------
 8832|  28.2k|        return unexpected(result.error());
 8833|  28.2k|    }
 8834|    660|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    660|    static_cast<    \
  |  |  929|    660|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    660|    static_cast<    \
  |  |  929|    660|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  28.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  29.6k|        : base(unexpect, std::move(e.error())),
 1474|  29.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  29.6k|    {
 1476|  29.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  29.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  29.6k|          m_has_value(false)
  446|  29.6k|    {
  447|  29.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  30.3k|    {
 1177|  30.3k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJxEEC2ES8_ONSt3__15tupleIJxEEE:
 5838|    717|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    717|    static_cast<    \
  |  |  929|    717|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    717|    static_cast<    \
  |  |  929|    717|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    717|    {
 5840|    717|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|    717|        : base(std::in_place, std::forward<U>(val)),
 1428|    717|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    717|    {
 1430|    717|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|    717|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    717|    {
  437|    717|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJxEE4argsEv:
 5383|  57.8k|    {
 5384|  57.8k|        return m_args;
 5385|  57.8k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJxEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  28.9k|        : m_str(r.str)
 7981|  28.9k|    {
 7982|  28.9k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEcvbEv:
 1597|  30.3k|    {
 1598|  30.3k|        return has_value();
 1599|  30.3k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  31.0k|    {
  485|  31.0k|        return m_has_value;
  486|  31.0k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEptEv:
 1672|    717|    {
 1673|    717|        return &value();
 1674|    717|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|    717|    {
 1627|    717|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    717|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    717|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    717|        return this->get_value();
 1629|    717|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    717|    {
  451|    717|        return m_value;
  452|    717|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEExEENS0_14basic_scan_argIT_EERT0_:
 5164|  2.93k|{
 5165|  2.93k|    check_scan_arg_types<T>();
 5166|       |
 5167|  2.93k|    basic_scan_arg<Context> arg;
 5168|  2.93k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  2.93k|    arg.m_value = make_value<Context>(value);
 5170|  2.93k|    return arg;
 5171|  2.93k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJyEEEDav:
 5405|  57.5k|{
 5406|  57.5k|    detail::check_scan_arg_types<Args...>();
 5407|  57.5k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  57.5k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJyEEC2Ev:
 5357|  57.5k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  57.5k|    {
 5359|  57.5k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJyEE12make_argptrsIJyEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  57.5k|    {
 5370|  57.5k|        return {detail::make_arg<
 5371|  57.5k|            kind, Context,
 5372|  57.5k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  57.5k|                                 typename Context::char_type>::value>(args)...};
 5374|  57.5k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE10EyvEEPvRT2_:
 5179|  57.5k|{
 5180|  57.5k|    return make_value<Context>(value).ref_value;
 5181|  57.5k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEyEEDaRT0_:
 5129|  60.4k|{
 5130|  60.4k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  60.4k|                                  needs_context_tag>) {
 5134|  60.4k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  60.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  60.4k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERy:
 4968|  60.4k|    {                                                                        \
 4969|  60.4k|        return val;                                                          \
 4970|  60.4k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJyEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7985|  28.7k|    {
 7986|  28.7k|        return m_str;
 7987|  28.7k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJyEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  57.5k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  57.5k|    {
 5436|  57.5k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJyEE12arg_pointersEv:
 5388|  57.5k|    {
 5389|  57.5k|        return m_argptrs;
 5390|  57.5k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  28.7k|{
 8831|  28.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  28.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.2k, False: 522]
  |  |  ------------------
  ------------------
 8832|  28.2k|        return unexpected(result.error());
 8833|  28.2k|    }
 8834|    522|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    522|    static_cast<    \
  |  |  929|    522|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    522|    static_cast<    \
  |  |  929|    522|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  28.7k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  29.6k|        : base(unexpect, std::move(e.error())),
 1474|  29.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  29.6k|    {
 1476|  29.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  29.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  29.6k|          m_has_value(false)
  446|  29.6k|    {
  447|  29.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  30.2k|    {
 1177|  30.2k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJyEEC2ES8_ONSt3__15tupleIJyEEE:
 5838|    565|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    565|    static_cast<    \
  |  |  929|    565|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    565|    static_cast<    \
  |  |  929|    565|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    565|    {
 5840|    565|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|    565|        : base(std::in_place, std::forward<U>(val)),
 1428|    565|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    565|    {
 1430|    565|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|    565|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    565|    {
  437|    565|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJyEE4argsEv:
 5383|  57.5k|    {
 5384|  57.5k|        return m_args;
 5385|  57.5k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJyEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  28.7k|        : m_str(r.str)
 7981|  28.7k|    {
 7982|  28.7k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEcvbEv:
 1597|  30.2k|    {
 1598|  30.2k|        return has_value();
 1599|  30.2k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  30.7k|    {
  485|  30.7k|        return m_has_value;
  486|  30.7k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEptEv:
 1672|    565|    {
 1673|    565|        return &value();
 1674|    565|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|    565|    {
 1627|    565|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    565|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    565|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    565|        return this->get_value();
 1629|    565|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    565|    {
  451|    565|        return m_value;
  452|    565|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEyEENS0_14basic_scan_argIT_EERT0_:
 5164|  2.91k|{
 5165|  2.91k|    check_scan_arg_types<T>();
 5166|       |
 5167|  2.91k|    basic_scan_arg<Context> arg;
 5168|  2.91k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  2.91k|    arg.m_value = make_value<Context>(value);
 5170|  2.91k|    return arg;
 5171|  2.91k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   177k|    {
 2724|   177k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   177k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   177k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   177k|    {
 2705|   177k|        return decay_copy(t.begin());
 2706|   177k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 1948|   105M|{
 1949|   105M|    return SCN_FWD(t);
  ------------------
  |  |  930|   105M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|   105M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   362k|    {
 2781|   362k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   362k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   362k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   362k|    {
 2763|   362k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   362k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   362k|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8601|  86.2k|{
 8602|  86.2k|    auto buffer = make_scan_buffer(range);
 8603|       |
 8604|  86.2k|    auto result = vscan_impl(buffer, format, args);
 8605|  86.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  86.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 84.7k, False: 1.50k]
  |  |  ------------------
  ------------------
 8606|  84.7k|        return unexpected(result.error());
 8607|  84.7k|    }
 8608|  1.50k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.50k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8609|  86.2k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4728|   181k|{
 4729|   181k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|   181k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|   181k|                  "\n"
 4733|   181k|                  "Unsupported range type given as input to a scanning "
 4734|   181k|                  "function.\n"
 4735|   181k|                  "A range needs to have a character type (value type) "
 4736|   181k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|   181k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|   181k|                  "to be included.\n"
 4739|   181k|                  "See the scnlib documentation for more details.");
 4740|   181k|    static_assert(
 4741|   181k|        !std::is_same_v<T, custom_char_traits>,
 4742|   181k|        "\n"
 4743|   181k|        "Unsupported range type given as input to a scanning "
 4744|   181k|        "function.\n"
 4745|   181k|        "String types (std::basic_string, and std::basic_string_view) "
 4746|   181k|        "need to use std::char_traits. Strings with custom Traits are "
 4747|   181k|        "not supported.");
 4748|   181k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|   181k|                  "\n"
 4750|   181k|                  "Unsupported range type given as input to a scanning "
 4751|   181k|                  "function.\n"
 4752|   181k|                  "file_marker_found cannot be used as an "
 4753|   181k|                  "source range type to scn::scan.\n"
 4754|   181k|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|   181k|                  "and do not provide an explicit source range, "
 4756|   181k|                  "or use scn::scan with a FILE* directly.");
 4757|   181k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|   181k|                  "\n"
 4759|   181k|                  "Unsupported range type given as input to a scanning "
 4760|   181k|                  "function.\n"
 4761|   181k|                  "In order to be scannable, a range needs to satisfy "
 4762|   181k|                  "`forward_range`. `input_range` is not sufficient.");
 4763|   181k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|   181k|                  "\n"
 4765|   181k|                  "Unsupported range type given as input to a scanning "
 4766|   181k|                  "function.\n"
 4767|   181k|                  "A range needs to model forward_range and have a valid "
 4768|   181k|                  "character type (char or wchar_t) to be scannable.\n"
 4769|   181k|                  "Examples of scannable ranges are std::string, "
 4770|   181k|                  "std::string_view, "
 4771|   181k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|   181k|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|   181k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|   181k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4698|   181k|{
 4699|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 4700|       |        return file_marker_found{};
 4701|       |    }
 4702|       |    else if constexpr (!ranges::forward_range<Range>) {
 4703|       |        if constexpr (ranges::range<Range>) {
 4704|       |            return insufficient_range{};
 4705|       |        }
 4706|       |        else {
 4707|       |            return invalid_input_range{};
 4708|       |        }
 4709|       |    }
 4710|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 4711|       |        return invalid_char_type{};
 4712|       |    }
 4713|   181k|    else {
 4714|   181k|        return make_forward_scan_buffer(r);
 4715|   181k|    }
 4716|   181k|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4532|   181k|{
 4533|   181k|    return basic_scan_forward_buffer_impl(range);
 4534|   181k|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4417|   181k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  930|   181k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4418|   181k|          m_cursor(ranges::begin(*m_range))
 4419|   181k|    {
 4420|   181k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4389|   181k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4390|   181k|    {
 4391|   181k|    }
_ZN3scn2v36detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4157|   181k|        : m_current_view(sv), m_is_contiguous(false)
 4158|   181k|    {
 4159|   181k|    }
_ZN3scn2v36detail17basic_scan_bufferIwED2Ev:
 4073|   181k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   184k|    {
 2724|   184k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   184k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   184k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   184k|    {
 2705|   184k|        return decay_copy(t.begin());
 2706|   184k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3325|   187k|    {
 3326|   187k|        return m_iterator;
 3327|   187k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4423|  35.0M|    {
 4424|  35.0M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4424:13): [True: 107k, False: 34.9M]
  ------------------
 4425|   107k|            return false;
 4426|   107k|        }
 4427|  34.9M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4428|  34.9M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  34.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  34.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4429|  34.9M|        }
 4430|  34.9M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4430:13): [True: 34.8M, False: 129k]
  ------------------
 4431|  34.8M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4432|  34.8M|                                          this->m_current_view.begin(),
 4433|  34.8M|                                          this->m_current_view.end());
 4434|  34.8M|        }
 4435|  34.9M|        m_latest = *m_cursor;
 4436|  34.9M|        ++m_cursor;
 4437|  34.9M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4438|  34.9M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4439|  34.9M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  34.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  34.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4440|  34.9M|        }
 4441|  34.9M|        return true;
 4442|  35.0M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   105M|    {
 2781|   105M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   105M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   105M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   105M|    {
 2763|   105M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   105M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   105M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3329|   105M|    {
 3330|   105M|        return m_sentinel;
 3331|   105M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE4syncEl:
 4078|   181k|    {
 4079|   181k|        SCN_UNUSED(position);
  ------------------
  |  |  909|   181k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4080|   181k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1473|   177k|        : base(unexpect, std::move(e.error())),
 1474|   177k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   177k|    {
 1476|   177k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  444|   177k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   177k|          m_has_value(false)
  446|   177k|    {
  447|   177k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   181k|    {
 1177|   181k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5932|  3.25k|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|  3.25k|                      ranges::iterator_t<SourceRange>>) {
 5935|  3.25k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|  3.25k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  3.25k|    {
 2724|  3.25k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.25k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  3.25k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  3.25k|    {
 2705|  3.25k|        return decay_copy(t.begin());
 2706|  3.25k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 5919|  3.25k|{
 5920|  3.25k|    return ranges::end(source);
 5921|  3.25k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  3.25k|    {
 2781|  3.25k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.25k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  3.25k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  3.25k|    {
 2763|  3.25k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  3.25k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  3.25k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1427|  3.25k|        : base(std::in_place, std::forward<U>(val)),
 1428|  3.25k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  3.25k|    {
 1430|  3.25k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  435|  3.25k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  3.25k|    {
  437|  3.25k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJaEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7985|  28.6k|    {
 7986|  28.6k|        return m_str;
 7987|  28.6k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|  28.6k|{
 8831|  28.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  28.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.2k, False: 448]
  |  |  ------------------
  ------------------
 8832|  28.2k|        return unexpected(result.error());
 8833|  28.2k|    }
 8834|    448|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    448|    static_cast<    \
  |  |  929|    448|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    448|    static_cast<    \
  |  |  929|    448|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  28.6k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1597|   181k|    {
 1598|   181k|        return has_value();
 1599|   181k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   362k|    {
  485|   362k|        return m_has_value;
  486|   362k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1603|   177k|    {
 1604|   177k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   177k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   177k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   177k|        return this->get_unexpected().error();
 1606|   177k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   177k|    {
  468|   177k|        return m_unexpected;
  469|   177k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  29.6k|        : base(unexpect, std::move(e.error())),
 1474|  29.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  29.6k|    {
 1476|  29.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  29.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  29.6k|          m_has_value(false)
  446|  29.6k|    {
  447|  29.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  30.1k|    {
 1177|  30.1k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1652|  3.00k|    {
 1653|  3.00k|        return value();
 1654|  3.00k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1626|  3.25k|    {
 1627|  3.25k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.25k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.25k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.25k|        return this->get_value();
 1629|  3.25k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  3.25k|    {
  451|  3.25k|        return m_value;
  452|  3.25k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJaEEC2ESE_ONS6_5tupleIJaEEE:
 5838|    484|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    484|    static_cast<    \
  |  |  929|    484|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    484|    static_cast<    \
  |  |  929|    484|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    484|    {
 5840|    484|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2EOSF_:
 5689|  3.25k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|  3.25k|    static_cast<    \
  |  |  929|  3.25k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|  3.25k|    {
 5691|  3.25k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|    484|        : base(std::in_place, std::forward<U>(val)),
 1428|    484|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    484|    {
 1430|    484|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|    484|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    484|    {
  437|    484|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3310|   184k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   184k|    static_cast<    \
  |  |  929|   184k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   184k|    static_cast<    \
  |  |  929|   184k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|   184k|    {
 3312|   184k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJaEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  28.6k|        : m_str(r.str)
 7981|  28.6k|    {
 7982|  28.6k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEcvbEv:
 1597|  30.1k|    {
 1598|  30.1k|        return has_value();
 1599|  30.1k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  30.6k|    {
  485|  30.6k|        return m_has_value;
  486|  30.6k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEptEv:
 1672|    484|    {
 1673|    484|        return &value();
 1674|    484|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|    484|    {
 1627|    484|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    484|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    484|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    484|        return this->get_value();
 1629|    484|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    484|    {
  451|    484|        return m_value;
  452|    484|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 5707|  3.25k|    {
 5708|  3.25k|        return ranges::begin(m_range);
 5709|  3.25k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8617|  86.2k|{
 8618|  86.2k|#if !SCN_DISABLE_LOCALE
 8619|  86.2k|    auto buffer = detail::make_scan_buffer(range);
 8620|       |
 8621|  86.2k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8622|  86.2k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8623|  86.2k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8624|       |
 8625|  86.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  86.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 84.7k, False: 1.50k]
  |  |  ------------------
  ------------------
 8626|  84.7k|        return unexpected(result.error());
 8627|  84.7k|    }
 8628|  1.50k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.50k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8629|       |#else
 8630|       |    static_assert(dependent_false<Locale>::value,
 8631|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8632|       |
 8633|       |    return {};
 8634|       |#endif
 8635|  86.2k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8641|  8.71k|{
 8642|  8.71k|    auto buffer = detail::make_scan_buffer(range);
 8643|       |
 8644|  8.71k|    auto result = detail::vscan_value_impl(buffer, arg);
 8645|  8.71k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.47k, False: 246]
  |  |  ------------------
  ------------------
 8646|  8.47k|        return unexpected(result.error());
 8647|  8.47k|    }
 8648|    246|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|    246|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8649|  8.71k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSJ_v:
 1662|    246|    {
 1663|    246|        return std::move(value());
 1664|    246|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJhEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7985|  28.6k|    {
 7986|  28.6k|        return m_str;
 7987|  28.6k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|  28.6k|{
 8831|  28.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  28.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.2k, False: 382]
  |  |  ------------------
  ------------------
 8832|  28.2k|        return unexpected(result.error());
 8833|  28.2k|    }
 8834|    382|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    382|    static_cast<    \
  |  |  929|    382|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    382|    static_cast<    \
  |  |  929|    382|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  28.6k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  29.6k|        : base(unexpect, std::move(e.error())),
 1474|  29.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  29.6k|    {
 1476|  29.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  29.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  29.6k|          m_has_value(false)
  446|  29.6k|    {
  447|  29.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  30.0k|    {
 1177|  30.0k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJhEEC2ESE_ONS6_5tupleIJhEEE:
 5838|    411|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    411|    static_cast<    \
  |  |  929|    411|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    411|    static_cast<    \
  |  |  929|    411|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    411|    {
 5840|    411|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|    411|        : base(std::in_place, std::forward<U>(val)),
 1428|    411|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    411|    {
 1430|    411|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|    411|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    411|    {
  437|    411|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJhEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  28.6k|        : m_str(r.str)
 7981|  28.6k|    {
 7982|  28.6k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEcvbEv:
 1597|  30.0k|    {
 1598|  30.0k|        return has_value();
 1599|  30.0k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  30.4k|    {
  485|  30.4k|        return m_has_value;
  486|  30.4k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEptEv:
 1672|    411|    {
 1673|    411|        return &value();
 1674|    411|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|    411|    {
 1627|    411|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    411|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    411|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    411|        return this->get_value();
 1629|    411|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    411|    {
  451|    411|        return m_value;
  452|    411|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJiEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7985|  28.7k|    {
 7986|  28.7k|        return m_str;
 7987|  28.7k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|  28.7k|{
 8831|  28.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  28.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.2k, False: 554]
  |  |  ------------------
  ------------------
 8832|  28.2k|        return unexpected(result.error());
 8833|  28.2k|    }
 8834|    554|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    554|    static_cast<    \
  |  |  929|    554|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    554|    static_cast<    \
  |  |  929|    554|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  28.7k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  29.6k|        : base(unexpect, std::move(e.error())),
 1474|  29.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  29.6k|    {
 1476|  29.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  29.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  29.6k|          m_has_value(false)
  446|  29.6k|    {
  447|  29.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  30.2k|    {
 1177|  30.2k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJiEEC2ESE_ONS6_5tupleIJiEEE:
 5838|    600|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    600|    static_cast<    \
  |  |  929|    600|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    600|    static_cast<    \
  |  |  929|    600|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    600|    {
 5840|    600|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|    600|        : base(std::in_place, std::forward<U>(val)),
 1428|    600|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    600|    {
 1430|    600|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|    600|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    600|    {
  437|    600|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  28.7k|        : m_str(r.str)
 7981|  28.7k|    {
 7982|  28.7k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEcvbEv:
 1597|  30.2k|    {
 1598|  30.2k|        return has_value();
 1599|  30.2k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  30.8k|    {
  485|  30.8k|        return m_has_value;
  486|  30.8k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEptEv:
 1672|    600|    {
 1673|    600|        return &value();
 1674|    600|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|    600|    {
 1627|    600|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    600|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    600|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    600|        return this->get_value();
 1629|    600|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    600|    {
  451|    600|        return m_value;
  452|    600|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJjEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7985|  28.6k|    {
 7986|  28.6k|        return m_str;
 7987|  28.6k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|  28.6k|{
 8831|  28.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  28.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.2k, False: 440]
  |  |  ------------------
  ------------------
 8832|  28.2k|        return unexpected(result.error());
 8833|  28.2k|    }
 8834|    440|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    440|    static_cast<    \
  |  |  929|    440|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    440|    static_cast<    \
  |  |  929|    440|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  28.6k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  29.6k|        : base(unexpect, std::move(e.error())),
 1474|  29.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  29.6k|    {
 1476|  29.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  29.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  29.6k|          m_has_value(false)
  446|  29.6k|    {
  447|  29.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  30.1k|    {
 1177|  30.1k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJjEEC2ESE_ONS6_5tupleIJjEEE:
 5838|    475|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    475|    static_cast<    \
  |  |  929|    475|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    475|    static_cast<    \
  |  |  929|    475|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    475|    {
 5840|    475|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|    475|        : base(std::in_place, std::forward<U>(val)),
 1428|    475|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    475|    {
 1430|    475|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|    475|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    475|    {
  437|    475|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  28.6k|        : m_str(r.str)
 7981|  28.6k|    {
 7982|  28.6k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEcvbEv:
 1597|  30.1k|    {
 1598|  30.1k|        return has_value();
 1599|  30.1k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  30.6k|    {
  485|  30.6k|        return m_has_value;
  486|  30.6k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEptEv:
 1672|    475|    {
 1673|    475|        return &value();
 1674|    475|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|    475|    {
 1627|    475|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    475|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    475|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    475|        return this->get_value();
 1629|    475|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    475|    {
  451|    475|        return m_value;
  452|    475|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJxEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7985|  28.9k|    {
 7986|  28.9k|        return m_str;
 7987|  28.9k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|  28.9k|{
 8831|  28.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  28.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.2k, False: 660]
  |  |  ------------------
  ------------------
 8832|  28.2k|        return unexpected(result.error());
 8833|  28.2k|    }
 8834|    660|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    660|    static_cast<    \
  |  |  929|    660|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    660|    static_cast<    \
  |  |  929|    660|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  28.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  29.6k|        : base(unexpect, std::move(e.error())),
 1474|  29.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  29.6k|    {
 1476|  29.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  29.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  29.6k|          m_has_value(false)
  446|  29.6k|    {
  447|  29.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  30.3k|    {
 1177|  30.3k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJxEEC2ESE_ONS6_5tupleIJxEEE:
 5838|    717|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    717|    static_cast<    \
  |  |  929|    717|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    717|    static_cast<    \
  |  |  929|    717|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    717|    {
 5840|    717|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|    717|        : base(std::in_place, std::forward<U>(val)),
 1428|    717|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    717|    {
 1430|    717|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|    717|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    717|    {
  437|    717|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJxEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  28.9k|        : m_str(r.str)
 7981|  28.9k|    {
 7982|  28.9k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEcvbEv:
 1597|  30.3k|    {
 1598|  30.3k|        return has_value();
 1599|  30.3k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  31.0k|    {
  485|  31.0k|        return m_has_value;
  486|  31.0k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEptEv:
 1672|    717|    {
 1673|    717|        return &value();
 1674|    717|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|    717|    {
 1627|    717|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    717|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    717|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    717|        return this->get_value();
 1629|    717|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    717|    {
  451|    717|        return m_value;
  452|    717|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJyEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7985|  28.7k|    {
 7986|  28.7k|        return m_str;
 7987|  28.7k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|  28.7k|{
 8831|  28.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  28.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.2k, False: 522]
  |  |  ------------------
  ------------------
 8832|  28.2k|        return unexpected(result.error());
 8833|  28.2k|    }
 8834|    522|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    522|    static_cast<    \
  |  |  929|    522|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    522|    static_cast<    \
  |  |  929|    522|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  28.7k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  29.6k|        : base(unexpect, std::move(e.error())),
 1474|  29.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  29.6k|    {
 1476|  29.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  29.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  29.6k|          m_has_value(false)
  446|  29.6k|    {
  447|  29.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  30.2k|    {
 1177|  30.2k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJyEEC2ESE_ONS6_5tupleIJyEEE:
 5838|    565|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    565|    static_cast<    \
  |  |  929|    565|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    565|    static_cast<    \
  |  |  929|    565|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    565|    {
 5840|    565|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|    565|        : base(std::in_place, std::forward<U>(val)),
 1428|    565|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    565|    {
 1430|    565|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|    565|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    565|    {
  437|    565|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJyEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  28.7k|        : m_str(r.str)
 7981|  28.7k|    {
 7982|  28.7k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEcvbEv:
 1597|  30.2k|    {
 1598|  30.2k|        return has_value();
 1599|  30.2k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  30.7k|    {
  485|  30.7k|        return m_has_value;
  486|  30.7k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEptEv:
 1672|    565|    {
 1673|    565|        return &value();
 1674|    565|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|    565|    {
 1627|    565|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    565|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    565|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    565|        return this->get_value();
 1629|    565|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    565|    {
  451|    565|        return m_value;
  452|    565|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3562|   737k|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3563|   737k|    {
 3564|   737k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|   737k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3565|   737k|    }
_ZNK3scn2v310scan_errorcvbEv:
 3569|  5.32M|    {
 3570|  5.32M|        return m_code == good;
 3571|  5.32M|    }
_ZNK3scn2v310scan_error4codeEv:
 3580|   304k|    {
 3581|   304k|        return m_code;
 3582|   304k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3325|  10.7M|    {
 3326|  10.7M|        return m_iterator;
 3327|  10.7M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3325|  37.5M|    {
 3326|  37.5M|        return m_iterator;
 3327|  37.5M|    }
_ZNK3scn2v36detail12format_specs8get_baseEv:
 6231|   857k|    {
 6232|   857k|        SCN_GCC_COMPAT_PUSH
 6233|   857k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 6234|   857k|        switch (type) {
 6235|   160k|            case presentation_type::none:
  ------------------
  |  Branch (6235:13): [True: 160k, False: 697k]
  ------------------
 6236|   160k|                return 10;
 6237|   178k|            case presentation_type::int_generic:
  ------------------
  |  Branch (6237:13): [True: 178k, False: 679k]
  ------------------
 6238|   178k|                return 0;
 6239|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (6239:13): [True: 0, False: 857k]
  ------------------
 6240|      0|                return arbitrary_base;
 6241|       |
 6242|  78.3k|            case presentation_type::int_binary:
  ------------------
  |  Branch (6242:13): [True: 78.3k, False: 779k]
  ------------------
 6243|  78.3k|                return 2;
 6244|   113k|            case presentation_type::int_octal:
  ------------------
  |  Branch (6244:13): [True: 113k, False: 744k]
  ------------------
 6245|   113k|                return 8;
 6246|   160k|            case presentation_type::int_decimal:
  ------------------
  |  Branch (6246:13): [True: 160k, False: 697k]
  ------------------
 6247|   160k|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (6247:13): [True: 0, False: 857k]
  ------------------
 6248|   160k|                return 10;
 6249|   167k|            case presentation_type::int_hex:
  ------------------
  |  Branch (6249:13): [True: 167k, False: 690k]
  ------------------
 6250|   167k|                return 16;
 6251|       |
 6252|      0|            default:
  ------------------
  |  Branch (6252:13): [True: 0, False: 857k]
  ------------------
 6253|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6254|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6255|   857k|        }
 6256|   857k|        SCN_GCC_COMPAT_POP
 6257|   857k|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6269|  1.03M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6313|   765k|    {
 6314|   765k|        m_specs.type = type;
 6315|   765k|    }
_ZN3scn2v36detail12specs_setter8on_errorEPKc:
 6375|   101k|    {
 6376|   101k|        SCN_UNLIKELY_ATTR
 6377|   101k|        m_error = scan_error{scan_error::invalid_format_string, msg};
 6378|   101k|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6386|   929k|    {
 6387|   929k|        return static_cast<bool>(m_error);
 6388|   929k|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3604|   304k|{
 3605|   304k|    return a.code() == b;
 3606|   304k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3608|   304k|{
 3609|   304k|    return !(a == b);
 3610|   304k|}
_ZN3scn2v36detail11is_cp_spaceEDi:
 4042|  1.07M|{
 4043|       |    // Pattern_White_Space property
 4044|  1.07M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4044:13): [True: 943k, False: 134k]
  |  Branch (4044:27): [True: 383k, False: 560k]
  ------------------
 4045|  1.07M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4045:12): [True: 9.24k, False: 685k]
  ------------------
 4046|  1.07M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4046:12): [True: 3.93k, False: 681k]
  ------------------
 4047|  1.07M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4047:12): [True: 1.56k, False: 679k]
  ------------------
 4048|  1.07M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4048:12): [True: 2.08k, False: 677k]
  ------------------
 4049|  1.07M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4049:12): [True: 2.48k, False: 675k]
  ------------------
 4050|  1.07M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4050:12): [True: 0, False: 675k]
  ------------------
 4051|  1.07M|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7073|   164k|{
 7074|   164k|    switch (type) {
 7075|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7075:9): [True: 0, False: 164k]
  ------------------
 7076|      0|            return arg_type_category::none;
 7077|       |
 7078|  27.3k|        case arg_type::schar_type:
  ------------------
  |  Branch (7078:9): [True: 27.3k, False: 137k]
  ------------------
 7079|  27.3k|        case arg_type::short_type:
  ------------------
  |  Branch (7079:9): [True: 0, False: 164k]
  ------------------
 7080|  58.0k|        case arg_type::int_type:
  ------------------
  |  Branch (7080:9): [True: 30.6k, False: 133k]
  ------------------
 7081|  58.0k|        case arg_type::long_type:
  ------------------
  |  Branch (7081:9): [True: 0, False: 164k]
  ------------------
 7082|  89.1k|        case arg_type::llong_type:
  ------------------
  |  Branch (7082:9): [True: 31.1k, False: 133k]
  ------------------
 7083|  89.1k|            return arg_type_category::integer;
 7084|       |
 7085|  23.7k|        case arg_type::uchar_type:
  ------------------
  |  Branch (7085:9): [True: 23.7k, False: 140k]
  ------------------
 7086|  23.7k|        case arg_type::ushort_type:
  ------------------
  |  Branch (7086:9): [True: 0, False: 164k]
  ------------------
 7087|  49.3k|        case arg_type::uint_type:
  ------------------
  |  Branch (7087:9): [True: 25.5k, False: 138k]
  ------------------
 7088|  49.3k|        case arg_type::ulong_type:
  ------------------
  |  Branch (7088:9): [True: 0, False: 164k]
  ------------------
 7089|  75.1k|        case arg_type::ullong_type:
  ------------------
  |  Branch (7089:9): [True: 25.8k, False: 138k]
  ------------------
 7090|  75.1k|            return arg_type_category::unsigned_integer;
 7091|       |
 7092|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7092:9): [True: 0, False: 164k]
  ------------------
 7093|      0|            return arg_type_category::pointer;
 7094|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7094:9): [True: 0, False: 164k]
  ------------------
 7095|      0|            return arg_type_category::boolean;
 7096|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7096:9): [True: 0, False: 164k]
  ------------------
 7097|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7097:9): [True: 0, False: 164k]
  ------------------
 7098|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7098:9): [True: 0, False: 164k]
  ------------------
 7099|      0|            return arg_type_category::character;
 7100|       |
 7101|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7101:9): [True: 0, False: 164k]
  ------------------
 7102|      0|        case arg_type::double_type:
  ------------------
  |  Branch (7102:9): [True: 0, False: 164k]
  ------------------
 7103|      0|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7103:9): [True: 0, False: 164k]
  ------------------
 7104|      0|            return arg_type_category::floating;
 7105|       |
 7106|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7106:9): [True: 0, False: 164k]
  ------------------
 7107|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7107:9): [True: 0, False: 164k]
  ------------------
 7108|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7108:9): [True: 0, False: 164k]
  ------------------
 7109|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7109:9): [True: 0, False: 164k]
  ------------------
 7110|      0|            return arg_type_category::string;
 7111|       |
 7112|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7112:9): [True: 0, False: 164k]
  ------------------
 7113|      0|            return arg_type_category::custom;
 7114|       |
 7115|      0|            SCN_CLANG_PUSH
 7116|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7117|      0|        default:
  ------------------
  |  Branch (7117:9): [True: 0, False: 164k]
  ------------------
 7118|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7119|   164k|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7120|   164k|            SCN_CLANG_POP
 7121|   164k|    }
 7122|       |
 7123|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7124|   164k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
 3649|  40.1k|{
 3650|  40.1k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  40.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  40.1k|}
_ZN3scn2v36detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7159|   878k|{
 7160|   878k|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  |  859|   878k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 878k]
  |  |  ------------------
  ------------------
 7161|      0|        return handler.on_error("Invalid type specifier for integer type");
 7162|      0|    }
 7163|   878k|    if (specs.localized) {
  ------------------
  |  Branch (7163:9): [True: 164k, False: 714k]
  ------------------
 7164|   164k|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  |  859|   164k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 164k]
  |  |  ------------------
  ------------------
 7165|       |            // clang-format off
 7166|      0|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 7167|       |            // clang-format on
 7168|      0|            return;
 7169|      0|        }
 7170|   164k|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  |  859|   164k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 164k]
  |  |  ------------------
  ------------------
 7171|       |            // clang-format off
 7172|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 7173|       |            // clang-format on
 7174|      0|        }
 7175|   164k|    }
 7176|   878k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA51_KcEEEDaDpOT_:
 3649|  24.8k|{
 3650|  24.8k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  24.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  24.8k|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4202|  64.8M|    {
 4203|  64.8M|        assert(m_begin);
 4204|  64.8M|        return m_end == nullptr;
 4205|  64.8M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3710|   601k|{
 3711|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3712|       |                                          const CharT*, const CharT*>) {
 3713|       |        return {first, last};
 3714|       |    }
 3715|   601k|    else {
 3716|   601k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3717|   601k|    }
 3718|   601k|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4219|  1.43M|    {
 4220|  1.43M|        if (!stores_parent()) {
  ------------------
  |  Branch (4220:13): [True: 0, False: 1.43M]
  ------------------
 4221|      0|            return make_string_view_from_pointers(
 4222|      0|                static_cast<const CharT*>(m_begin) + position(),
 4223|      0|                static_cast<const CharT*>(m_end));
 4224|      0|        }
 4225|  1.43M|        return parent()->get_segment_starting_at(position());
 4226|  1.43M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4213|  35.6M|    {
 4214|  35.6M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  35.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  35.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4215|  35.6M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4216|  35.6M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4108|  1.43M|    {
 4109|  1.43M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  1.43M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 384k, False: 1.04M]
  |  |  ------------------
  ------------------
 4110|  1.43M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4111|   384k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4112|   384k|        }
 4113|  1.04M|        const auto start = pos - m_putback_buffer.size();
 4114|  1.04M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|  1.04M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.04M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4115|  1.04M|        return m_current_view.substr(start);
 4116|  1.04M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4208|   342k|    {
 4209|   342k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   342k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   342k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4210|   342k|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4211|   342k|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4197|  2.21M|    {
 4198|  2.21M|        return m_position;
 4199|  2.21M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE13is_contiguousEv:
 4130|  1.36M|    {
 4131|  1.36M|        return m_is_contiguous;
 4132|  1.36M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4202|   142G|    {
 4203|   142G|        assert(m_begin);
 4204|   142G|        return m_end == nullptr;
 4205|   142G|    }
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3710|  5.75k|{
 3711|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3712|       |                                          const CharT*, const CharT*>) {
 3713|       |        return {first, last};
 3714|       |    }
 3715|  5.75k|    else {
 3716|  5.75k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3717|  5.75k|    }
 3718|  5.75k|}
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4219|   136k|    {
 4220|   136k|        if (!stores_parent()) {
  ------------------
  |  Branch (4220:13): [True: 0, False: 136k]
  ------------------
 4221|      0|            return make_string_view_from_pointers(
 4222|      0|                static_cast<const CharT*>(m_begin) + position(),
 4223|      0|                static_cast<const CharT*>(m_end));
 4224|      0|        }
 4225|   136k|        return parent()->get_segment_starting_at(position());
 4226|   136k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4213|  71.2G|    {
 4214|  71.2G|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  71.2G|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  71.2G|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4215|  71.2G|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4216|  71.2G|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4108|   136k|    {
 4109|   136k|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.77k, False: 133k]
  |  |  ------------------
  ------------------
 4110|   136k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4111|  2.77k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4112|  2.77k|        }
 4113|   133k|        const auto start = pos - m_putback_buffer.size();
 4114|   133k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|   133k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   133k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4115|   133k|        return m_current_view.substr(start);
 4116|   133k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4208|   102k|    {
 4209|   102k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   102k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   102k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4210|   102k|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4211|   102k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4197|   243k|    {
 4198|   243k|        return m_position;
 4199|   243k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE13is_contiguousEv:
 4130|   543k|    {
 4131|   543k|        return m_is_contiguous;
 4132|   543k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3179|  1.07M|    {
 3180|  1.07M|        return static_cast<D&>(*this);
 3181|  1.07M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3220|  1.07M|    {
 3221|  1.07M|        return detail::to_address(ranges::begin(derived()));
 3222|  1.07M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3179|   110k|    {
 3180|   110k|        return static_cast<D&>(*this);
 3181|   110k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3220|   110k|    {
 3221|   110k|        return detail::to_address(ranges::begin(derived()));
 3222|   110k|    }
_ZNK3scn2v318basic_scan_contextIcE5rangeEv:
 8179|   335k|    {
 8180|   335k|        return ranges::subrange{begin(), end()};
 8181|   335k|    }
_ZNK3scn2v318basic_scan_contextIcE5beginEv:
 8163|   981k|    {
 8164|   981k|        return m_current;
 8165|   981k|    }
_ZNK3scn2v318basic_scan_contextIcE3endEv:
 8171|   335k|    {
 8172|   335k|        return ranges::default_sentinel;
 8173|   335k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3310|  3.50M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  3.50M|    static_cast<    \
  |  |  929|  3.50M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  3.50M|    static_cast<    \
  |  |  929|  3.50M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  3.50M|    {
 3312|  3.50M|    }
_ZN3scn2v36detail10locale_refC2Ev:
 8001|   842k|    constexpr locale_ref() = default;
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   431k|    {
 1837|   431k|        return detail::transform_error_impl(std::move(*this),
 1838|   431k|                                            std::forward<F>(f));
 1839|   431k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|   431k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   431k|    else {
 1333|   431k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   431k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   431k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 419k, False: 11.7k]
  |  |  ------------------
  ------------------
 1335|   431k|                   ? result(*std::forward<Exp>(exp))
 1336|   431k|                   : result(unexpect,
 1337|  11.7k|                            trivial_invoke(std::forward<F>(f),
 1338|  11.7k|                                           std::forward<Exp>(exp).error()));
 1339|   431k|    }
 1340|   431k|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  2.17M|    {
  485|  2.17M|        return m_has_value;
  486|  2.17M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|   750k|    {
 1663|   750k|        return std::move(value());
 1664|   750k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|   847k|    {
 1627|   847k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   847k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   847k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   847k|        return this->get_value();
 1629|   847k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|   847k|    {
  451|   847k|        return m_value;
  452|   847k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1427|  1.35M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.35M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.35M|    {
 1430|  1.35M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  1.35M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.35M|    {
  437|  1.35M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.50M|    {
 1177|  1.50M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|  26.5k|{
 1211|  26.5k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  26.5k|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  23.5k|    {
 1614|  23.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  23.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  23.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  23.5k|        return std::move(this->get_unexpected().error());
 1616|  23.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  23.9k|    {
  468|  23.9k|        return m_unexpected;
  469|  23.9k|    }
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  360|   155k|    {
  361|   155k|        return m_unexpected;
  362|   155k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1483|  40.9k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  40.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  40.9k|    {
 1486|  40.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|   145k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   145k|          m_has_value(false)
  446|   145k|    {
  447|   145k|    }
_ZNK3scn2v318basic_scan_contextIwE5rangeEv:
 8179|   104k|    {
 8180|   104k|        return ranges::subrange{begin(), end()};
 8181|   104k|    }
_ZNK3scn2v318basic_scan_contextIwE5beginEv:
 8163|   261k|    {
 8164|   261k|        return m_current;
 8165|   261k|    }
_ZNK3scn2v318basic_scan_contextIwE3endEv:
 8171|   104k|    {
 8172|   104k|        return ranges::default_sentinel;
 8173|   104k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3310|   932k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   932k|    static_cast<    \
  |  |  929|   932k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   932k|    static_cast<    \
  |  |  929|   932k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|   932k|    {
 3312|   932k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   130k|    {
 1837|   130k|        return detail::transform_error_impl(std::move(*this),
 1838|   130k|                                            std::forward<F>(f));
 1839|   130k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|   130k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   130k|    else {
 1333|   130k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   130k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   130k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 128k, False: 1.86k]
  |  |  ------------------
  ------------------
 1335|   130k|                   ? result(*std::forward<Exp>(exp))
 1336|   130k|                   : result(unexpect,
 1337|  1.86k|                            trivial_invoke(std::forward<F>(f),
 1338|  1.86k|                                           std::forward<Exp>(exp).error()));
 1339|   130k|    }
 1340|   130k|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|   631k|    {
  485|   631k|        return m_has_value;
  486|   631k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|   211k|    {
 1663|   211k|        return std::move(value());
 1664|   211k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|   214k|    {
 1627|   214k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   214k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   214k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   214k|        return this->get_value();
 1629|   214k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|   214k|    {
  451|   214k|        return m_value;
  452|   214k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1427|   137k|        : base(std::in_place, std::forward<U>(val)),
 1428|   137k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   137k|    {
 1430|   137k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|   137k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   137k|    {
  437|   137k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   473k|    {
 1177|   473k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  21.1k|    {
 1614|  21.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  21.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  21.1k|        return std::move(this->get_unexpected().error());
 1616|  21.1k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  21.2k|    {
  468|  21.2k|        return m_unexpected;
  469|  21.2k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1483|   109k|        : base(unexpect, std::forward<Args>(args)...),
 1484|   109k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|   109k|    {
 1486|   109k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|   336k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   336k|          m_has_value(false)
  446|   336k|    {
  447|   336k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA22_KcEEEDaDpOT_:
 3649|   136k|{
 3650|   136k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|   136k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|   136k|}
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  345|   216k|        : m_unexpected(std::forward<Err>(e))
  346|   216k|    {
  347|   216k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   216k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   216k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1473|   163k|        : base(unexpect, std::move(e.error())),
 1474|   163k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   163k|    {
 1476|   163k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  444|   174k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   174k|          m_has_value(false)
  446|   174k|    {
  447|   174k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.72M|    {
 1177|  2.72M|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1427|  2.54M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.54M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.54M|    {
 1430|  2.54M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  2.54M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.54M|    {
  437|  2.54M|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1597|  2.72M|    {
 1598|  2.72M|        return has_value();
 1599|  2.72M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  484|  5.44M|    {
  485|  5.44M|        return m_has_value;
  486|  5.44M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1603|   174k|    {
 1604|   174k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   174k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   174k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   174k|        return this->get_unexpected().error();
 1606|   174k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   174k|    {
  468|   174k|        return m_unexpected;
  469|   174k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1662|  2.26M|    {
 1663|  2.26M|        return std::move(value());
 1664|  2.26M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1626|  2.54M|    {
 1627|  2.54M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.54M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.54M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.54M|        return this->get_value();
 1629|  2.54M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  450|  2.54M|    {
  451|  2.54M|        return m_value;
  452|  2.54M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1473|   336k|        : base(unexpect, std::move(e.error())),
 1474|   336k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   336k|    {
 1476|   336k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  444|   338k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   338k|          m_has_value(false)
  446|   338k|    {
  447|   338k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   592k|    {
 1177|   592k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1427|   254k|        : base(std::in_place, std::forward<U>(val)),
 1428|   254k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   254k|    {
 1430|   254k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|   254k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   254k|    {
  437|   254k|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1597|   592k|    {
 1598|   592k|        return has_value();
 1599|   592k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  484|  1.18M|    {
  485|  1.18M|        return m_has_value;
  486|  1.18M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1603|   338k|    {
 1604|   338k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   338k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   338k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   338k|        return this->get_unexpected().error();
 1606|   338k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   338k|    {
  468|   338k|        return m_unexpected;
  469|   338k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1662|   251k|    {
 1663|   251k|        return std::move(value());
 1664|   251k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1626|   254k|    {
 1627|   254k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   254k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   254k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   254k|        return this->get_value();
 1629|   254k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  450|   254k|    {
  451|   254k|        return m_value;
  452|   254k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|   432k|    {
 1837|   432k|        return detail::transform_error_impl(std::move(*this),
 1838|   432k|                                            std::forward<F>(f));
 1839|   432k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|   432k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   432k|    else {
 1333|   432k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   432k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   432k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 421k, False: 11.0k]
  |  |  ------------------
  ------------------
 1335|   432k|                   ? result(*std::forward<Exp>(exp))
 1336|   432k|                   : result(unexpect,
 1337|  11.0k|                            trivial_invoke(std::forward<F>(f),
 1338|  11.0k|                                           std::forward<Exp>(exp).error()));
 1339|   432k|    }
 1340|   432k|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  1.49M|    {
  485|  1.49M|        return m_has_value;
  486|  1.49M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|   421k|    {
 1663|   421k|        return std::move(value());
 1664|   421k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|   518k|    {
 1627|   518k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   518k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   518k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   518k|        return this->get_value();
 1629|   518k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|   518k|    {
  451|   518k|        return m_value;
  452|   518k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1613|  11.0k|    {
 1614|  11.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  11.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  11.0k|        return std::move(this->get_unexpected().error());
 1616|  11.0k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  11.3k|    {
  468|  11.3k|        return m_unexpected;
  469|  11.3k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1483|  11.0k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  11.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  11.0k|    {
 1486|  11.0k|    }
_ZN3scn2v310scan_errorC2Ev:
 3558|  3.51M|    constexpr scan_error() noexcept = default;
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|   104k|        : base(unexpect, std::move(e.error())),
 1474|   104k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   104k|    {
 1476|   104k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4288|  2.33M|    {
 4289|  2.33M|        return x.is_at_end();
 4290|  2.33M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4332|  4.96M|    {
 4333|  4.96M|        if (m_end) {
  ------------------
  |  Branch (4333:13): [True: 0, False: 4.96M]
  ------------------
 4334|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4335|      0|        }
 4336|  4.96M|        if (!m_begin) {
  ------------------
  |  Branch (4336:13): [True: 0, False: 4.96M]
  ------------------
 4337|      0|            return true;
 4338|      0|        }
 4339|  4.96M|        return !read_at_position();
 4340|  4.96M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4312|  20.8M|    {
 4313|  20.8M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  20.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  20.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4314|       |
 4315|  20.8M|        if (!stores_parent()) {
  ------------------
  |  Branch (4315:13): [True: 0, False: 20.8M]
  ------------------
 4316|      0|            return true;
 4317|      0|        }
 4318|       |
 4319|  20.8M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|  20.8M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 18.4M, False: 2.38M]
  |  |  ------------------
  ------------------
 4320|  18.4M|            return true;
 4321|  18.4M|        }
 4322|       |
 4323|  4.62M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4323:16): [True: 2.38M, False: 2.24M]
  ------------------
 4324|  2.38M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4324:17): [True: 144k, False: 2.24M]
  ------------------
 4325|   144k|                return false;
 4326|   144k|            }
 4327|  2.38M|        }
 4328|  2.24M|        return true;
 4329|  2.38M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE15chars_availableEv:
 4088|  25.8M|    {
 4089|  25.8M|        return m_putback_buffer.size() + m_current_view.size();
 4090|  25.8M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4247|  6.31M|    {
 4248|  6.31M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  6.31M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.31M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|       |
 4250|  6.31M|        if (!stores_parent()) {
  ------------------
  |  Branch (4250:13): [True: 0, False: 6.31M]
  ------------------
 4251|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4252|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4253|      0|            return *ptr;
 4254|      0|        }
 4255|       |
 4256|  6.31M|        auto res = read_at_position();
 4257|  6.31M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  6.31M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.31M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4258|  6.31M|        return parent()->get_character_at(m_position);
 4259|  6.31M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16get_character_atEl:
 4119|  6.31M|    {
 4120|  6.31M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  6.31M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.97M, False: 2.33M]
  |  |  ------------------
  ------------------
 4121|  6.31M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4122|  3.97M|            return m_putback_buffer[pos];
 4123|  3.97M|        }
 4124|  2.33M|        const auto start = pos - m_putback_buffer.size();
 4125|  2.33M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  2.33M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.33M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4126|  2.33M|        return m_current_view[start];
 4127|  2.33M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1427|  1.27M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.27M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.27M|    {
 1430|  1.27M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  1.27M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.27M|    {
  437|  1.27M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.30M|    {
 1177|  1.30M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  345|  50.4k|        : m_unexpected(std::forward<Err>(e))
  346|  50.4k|    {
  347|  50.4k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  50.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  50.4k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|  23.9k|        : base(unexpect, std::move(e.error())),
 1474|  23.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  23.9k|    {
 1476|  23.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  23.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  23.9k|          m_has_value(false)
  446|  23.9k|    {
  447|  23.9k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  354|  77.7k|        : m_unexpected(std::forward<Args>(args)...)
  355|  77.7k|    {
  356|  77.7k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  77.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  77.7k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1597|   529k|    {
 1598|   529k|        return has_value();
 1599|   529k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1652|  97.3k|    {
 1653|  97.3k|        return value();
 1654|  97.3k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4282|  6.26M|    {
 4283|  6.26M|        return !(lhs == rhs);
 4284|  6.26M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4277|  6.58M|    {
 4278|  6.58M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4278:16): [True: 6.58M, False: 0]
  |  Branch (4278:46): [True: 544k, False: 6.03M]
  ------------------
 4279|  6.58M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4233|  9.57M|    {
 4234|  9.57M|        ++m_position;
 4235|  9.57M|        (void)read_at_position();
 4236|  9.57M|        return *this;
 4237|  9.57M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  345|  27.3k|        : m_unexpected(std::forward<Err>(e))
  346|  27.3k|    {
  347|  27.3k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  27.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  27.3k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  9.42k|        : base(unexpect, std::move(e.error())),
 1474|  9.42k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  9.42k|    {
 1476|  9.42k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|  9.42k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  9.42k|          m_has_value(false)
  446|  9.42k|    {
  447|  9.42k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   613k|    {
 1177|   613k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   604k|        : base(std::in_place, std::forward<U>(val)),
 1428|   604k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   604k|    {
 1430|   604k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  435|   604k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   604k|    {
  437|   604k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|   613k|    {
 1598|   613k|        return has_value();
 1599|   613k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.22M|    {
  485|  1.22M|        return m_has_value;
  486|  1.22M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  9.42k|    {
 1604|  9.42k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  9.42k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.42k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  9.42k|        return this->get_unexpected().error();
 1606|  9.42k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  9.42k|    {
  468|  9.42k|        return m_unexpected;
  469|  9.42k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|   604k|    {
 1663|   604k|        return std::move(value());
 1664|   604k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|   604k|    {
 1627|   604k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   604k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   604k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   604k|        return this->get_value();
 1629|   604k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|   604k|    {
  451|   604k|        return m_value;
  452|   604k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3329|  7.66M|    {
 3330|  7.66M|        return m_sentinel;
 3331|  7.66M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  345|  12.8k|        : m_unexpected(std::forward<Err>(e))
  346|  12.8k|    {
  347|  12.8k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  12.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  12.8k|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_errorEE5errorEv:
  360|  1.23M|    {
  361|  1.23M|        return m_unexpected;
  362|  1.23M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  354|   113k|        : m_unexpected(std::forward<Args>(args)...)
  355|   113k|    {
  356|   113k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   113k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|   113k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  345|  2.34M|        : m_unexpected(std::forward<Err>(e))
  346|  2.34M|    {
  347|  2.34M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  2.34M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  2.34M|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  360|  2.34M|    {
  361|  2.34M|        return m_unexpected;
  362|  2.34M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  354|  2.34M|        : m_unexpected(std::forward<Args>(args)...)
  355|  2.34M|    {
  356|  2.34M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  2.34M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  2.34M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|  50.4k|{
 1211|  50.4k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  50.4k|}
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  345|  50.4k|        : m_unexpected(std::forward<Err>(e))
  346|  50.4k|    {
  347|  50.4k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  50.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  50.4k|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JS8_EvEEDcOT_DpOT0_:
 1210|   136k|{
 1211|   136k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|   136k|}
_ZN3scn2v36detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  391|  39.1k|{
  392|  39.1k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  39.1k|        T(std::forward<Args>(args)...);
  394|  39.1k|}
_ZNK3scn2v36ranges6detail6ssize_2fnclIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSF_:
 2961|   113k|    {
 2962|   113k|        return fn::impl(std::forward<T>(t));
 2963|   113k|    }
_ZN3scn2v36ranges6detail6ssize_2fn4implIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISF_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSF_EEEEE15difference_typeEE4typeELm8EElSO_E4typeE_EEOSF_:
 2952|   113k|    {
 2953|   113k|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 2954|   113k|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSF_:
 2929|   113k|    {
 2930|   113k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|   113k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESG_E4typeEOSH_NS0_6detail12priority_tagILm2EEE:
 2895|   113k|    {
 2896|   113k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   113k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|   113k|    }
_ZN3scn2v36detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  397|  39.1k|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|  39.1k|    else {
  404|  39.1k|        p->~T();
  405|  39.1k|    }
  406|  39.1k|}
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1603|    360|    {
 1604|    360|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    360|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    360|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    360|        return this->get_unexpected().error();
 1606|    360|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|  12.1k|        : base(unexpect, std::move(e.error())),
 1474|  12.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  12.1k|    {
 1476|  12.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  23.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  23.8k|          m_has_value(false)
  446|  23.8k|    {
  447|  23.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.64M|    {
 1177|  1.64M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1427|   140k|        : base(std::in_place, std::forward<U>(val)),
 1428|   140k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   140k|    {
 1430|   140k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  435|   140k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   140k|    {
  437|   140k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|   856k|        : base(unexpect, std::move(e.error())),
 1474|   856k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   856k|    {
 1476|   856k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|   856k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   856k|          m_has_value(false)
  446|   856k|    {
  447|   856k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1597|  1.32M|    {
 1598|  1.32M|        return has_value();
 1599|  1.32M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  2.80M|    {
  485|  2.80M|        return m_has_value;
  486|  2.80M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1603|   376k|    {
 1604|   376k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   376k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   376k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   376k|        return this->get_unexpected().error();
 1606|   376k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|   405k|    {
  468|   405k|        return m_unexpected;
  469|   405k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1427|   419k|        : base(std::in_place, std::forward<U>(val)),
 1428|   419k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   419k|    {
 1430|   419k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  435|   419k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   419k|    {
  437|   419k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   419k|    {
 1177|   419k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1652|   143k|    {
 1653|   143k|        return value();
 1654|   143k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|   760k|    {
 1627|   760k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   760k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   760k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   760k|        return this->get_value();
 1629|   760k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  450|   760k|    {
  451|   760k|        return m_value;
  452|   760k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1597|   419k|    {
 1598|   419k|        return has_value();
 1599|   419k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  484|   838k|    {
  485|   838k|        return m_has_value;
  486|   838k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   419k|    {
 1177|   419k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|   419k|    {
 1663|   419k|        return std::move(value());
 1664|   419k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|   419k|    {
 1627|   419k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   419k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   419k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   419k|        return this->get_value();
 1629|   419k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  450|   419k|    {
  451|   419k|        return m_value;
  452|   419k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   342k|    {
 1837|   342k|        return detail::transform_error_impl(std::move(*this),
 1838|   342k|                                            std::forward<F>(f));
 1839|   342k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|   342k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   342k|    else {
 1333|   342k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   342k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   342k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 330k, False: 11.7k]
  |  |  ------------------
  ------------------
 1335|   342k|                   ? result(*std::forward<Exp>(exp))
 1336|   342k|                   : result(unexpect,
 1337|  11.7k|                            trivial_invoke(std::forward<F>(f),
 1338|  11.7k|                                           std::forward<Exp>(exp).error()));
 1339|   342k|    }
 1340|   342k|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1427|   619k|        : base(std::in_place, std::forward<U>(val)),
 1428|   619k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   619k|    {
 1430|   619k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|   619k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   619k|    {
  437|   619k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1483|  11.7k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  11.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  11.7k|    {
 1486|  11.7k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|   616k|    {
 1663|   616k|        return std::move(value());
 1664|   616k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEEC2IS8_vEEOT_:
 1427|   419k|        : base(std::in_place, std::forward<U>(val)),
 1428|   419k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   419k|    {
 1430|   419k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  435|   419k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   419k|    {
  437|   419k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|   419k|    {
 1837|   419k|        return detail::transform_error_impl(std::move(*this),
 1838|   419k|                                            std::forward<F>(f));
 1839|   419k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS4_9eof_errorEEERFNS0_10scan_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1322|   419k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   419k|    else {
 1333|   419k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   419k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   419k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 419k, False: 0]
  |  |  ------------------
  ------------------
 1335|   419k|                   ? result(*std::forward<Exp>(exp))
 1336|   419k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   419k|    }
 1340|   419k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EE9has_valueEv:
  484|   838k|    {
  485|   838k|        return m_has_value;
  486|   838k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|   419k|    {
 1663|   419k|        return std::move(value());
 1664|   419k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|   419k|    {
 1627|   419k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   419k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   419k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   419k|        return this->get_value();
 1629|   419k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EE9get_valueEv:
  450|   419k|    {
  451|   419k|        return m_value;
  452|   419k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   419k|        : base(std::in_place, std::forward<U>(val)),
 1428|   419k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   419k|    {
 1430|   419k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  435|   419k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   419k|    {
  437|   419k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   419k|    {
 1177|   419k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEcvbEv:
 1597|   419k|    {
 1598|   419k|        return has_value();
 1599|   419k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   838k|    {
  485|   838k|        return m_has_value;
  486|   838k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|   419k|    {
 1663|   419k|        return std::move(value());
 1664|   419k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|   419k|    {
 1627|   419k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   419k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   419k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   419k|        return this->get_value();
 1629|   419k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   419k|    {
  451|   419k|        return m_value;
  452|   419k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|   315k|    {
 1837|   315k|        return detail::transform_error_impl(std::move(*this),
 1838|   315k|                                            std::forward<F>(f));
 1839|   315k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1322|   315k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   315k|    else {
 1333|   315k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   315k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   315k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 286k, False: 29.1k]
  |  |  ------------------
  ------------------
 1335|   315k|                   ? result(*std::forward<Exp>(exp))
 1336|   315k|                   : result(unexpect,
 1337|  29.1k|                            trivial_invoke(std::forward<F>(f),
 1338|  29.1k|                                           std::forward<Exp>(exp).error()));
 1339|   315k|    }
 1340|   315k|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1613|  29.1k|    {
 1614|  29.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  29.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  29.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  29.1k|        return std::move(this->get_unexpected().error());
 1616|  29.1k|    }
_ZN3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEC2ISF_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1473|  3.07k|        : base(unexpect, std::move(e.error())),
 1474|  3.07k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  3.07k|    {
 1476|  3.07k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EEC2IJSF_EvEENS0_10unexpect_tEDpOT_:
  624|  3.07k|        : m_has_value(false)
  625|  3.07k|    {
  626|  3.07k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  3.07k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESF_EEEvDpOT_:
  688|  3.07k|    {
  689|  3.07k|        scn::detail::construct_at(unexpected_ptr(),
  690|  3.07k|                                  std::forward<Args>(args)...);
  691|  3.07k|        m_has_value = false;
  692|  3.07k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  9.21k|    {
  718|  9.21k|        return reinterpret_cast<unexpected<E>*>(
  719|  9.21k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  9.21k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  9.21k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  61.3k|    {
 1177|  61.3k|    }
_ZN3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEC2ISE_vEEOT_:
 1427|  58.2k|        : base(std::in_place, std::forward<U>(val)),
 1428|  58.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  58.2k|    {
 1430|  58.2k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS3_10in_place_tEDpOT_:
  614|  58.2k|        : m_has_value(true)
  615|  58.2k|    {
  616|  58.2k|        construct(std::forward<Args>(args)...);
  617|  58.2k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9constructIJSE_EEEvDpOT_:
  681|  58.2k|    {
  682|  58.2k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|  58.2k|        m_has_value = true;
  684|  58.2k|    }
_ZN3scn2v36detail12construct_atINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEEJSE_EEEPT_SG_DpOT0_:
  391|  58.2k|{
  392|  58.2k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  58.2k|        T(std::forward<Args>(args)...);
  394|  58.2k|}
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9value_ptrEv:
  705|   174k|    {
  706|   174k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|   174k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|   174k|    }
_ZNK3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEcvbEv:
 1597|  61.3k|    {
 1598|  61.3k|        return has_value();
 1599|  61.3k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9has_valueEv:
  674|   184k|    {
  675|   184k|        return m_has_value;
  676|   184k|    }
_ZNR3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEE5errorEv:
 1603|  3.07k|    {
 1604|  3.07k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  3.07k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.07k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  3.07k|        return this->get_unexpected().error();
 1606|  3.07k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|  3.07k|    {
  658|  3.07k|        return *unexpected_ptr();
  659|  3.07k|    }
_ZNO3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEdeISE_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSJ_v:
 1662|  58.2k|    {
 1663|  58.2k|        return std::move(value());
 1664|  58.2k|    }
_ZNR3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEE5valueISE_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1626|  58.2k|    {
 1627|  58.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  58.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  58.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  58.2k|        return this->get_value();
 1629|  58.2k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9get_valueEv:
  640|  58.2k|    {
  641|  58.2k|        return *value_ptr();
  642|  58.2k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3325|   648k|    {
 3326|   648k|        return m_iterator;
 3327|   648k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3329|   648k|    {
 3330|   648k|        return m_sentinel;
 3331|   648k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EED2Ev:
  630|  61.3k|    {
  631|  61.3k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 58.2k, False: 3.07k]
  ------------------
  632|  58.2k|            destroy_value();
  633|  58.2k|        }
  634|  3.07k|        else {
  635|  3.07k|            destroy_unexpected();
  636|  3.07k|        }
  637|  61.3k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|  58.2k|    {
  696|  58.2k|        scn::detail::destroy_at(value_ptr());
  697|  58.2k|    }
_ZN3scn2v36detail10destroy_atINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEEEEvPT_:
  397|  58.2k|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|  58.2k|    else {
  404|  58.2k|        p->~T();
  405|  58.2k|    }
  406|  58.2k|}
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  3.07k|    {
  700|  3.07k|        scn::detail::destroy_at(unexpected_ptr());
  701|  3.07k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|  1.50M|    {
 1598|  1.50M|        return has_value();
 1599|  1.50M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  3.00M|    {
  485|  3.00M|        return m_has_value;
  486|  3.00M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|   145k|    {
 1604|   145k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   145k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   145k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   145k|        return this->get_unexpected().error();
 1606|   145k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   145k|    {
  468|   145k|        return m_unexpected;
  469|   145k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|  1.07M|    {
 1663|  1.07M|        return std::move(value());
 1664|  1.07M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|  1.35M|    {
 1627|  1.35M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.35M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.35M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.35M|        return this->get_value();
 1629|  1.35M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.35M|    {
  451|  1.35M|        return m_value;
  452|  1.35M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3310|   287k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   287k|    static_cast<    \
  |  |  929|   287k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   287k|    static_cast<    \
  |  |  929|   287k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|   287k|    {
 3312|   287k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4299|  2.63M|    {
 4300|  2.63M|        return !x.is_at_end();
 4301|  2.63M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  11.3k|        : base(unexpect, std::move(e.error())),
 1474|  11.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  11.3k|    {
 1476|  11.3k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  11.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  11.3k|          m_has_value(false)
  446|  11.3k|    {
  447|  11.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   963k|    {
 1177|   963k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1427|   951k|        : base(std::in_place, std::forward<U>(val)),
 1428|   951k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   951k|    {
 1430|   951k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|   951k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   951k|    {
  437|   951k|    }
_ZNK3scn2v38expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1597|   531k|    {
 1598|   531k|        return has_value();
 1599|   531k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1652|  97.3k|    {
 1653|  97.3k|        return value();
 1654|  97.3k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  8.53k|        : base(unexpect, std::move(e.error())),
 1474|  8.53k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  8.53k|    {
 1476|  8.53k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  444|  8.53k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  8.53k|          m_has_value(false)
  446|  8.53k|    {
  447|  8.53k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   612k|    {
 1177|   612k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|   604k|        : base(std::in_place, std::forward<U>(val)),
 1428|   604k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   604k|    {
 1430|   604k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  435|   604k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   604k|    {
  437|   604k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1597|   612k|    {
 1598|   612k|        return has_value();
 1599|   612k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.22M|    {
  485|  1.22M|        return m_has_value;
  486|  1.22M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1603|  8.53k|    {
 1604|  8.53k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  8.53k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.53k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  8.53k|        return this->get_unexpected().error();
 1606|  8.53k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  8.53k|    {
  468|  8.53k|        return m_unexpected;
  469|  8.53k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|   604k|    {
 1663|   604k|        return std::move(value());
 1664|   604k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|   604k|    {
 1627|   604k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   604k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   604k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   604k|        return this->get_value();
 1629|   604k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  450|   604k|    {
  451|   604k|        return m_value;
  452|   604k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1603|    360|    {
 1604|    360|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    360|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    360|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    360|        return this->get_unexpected().error();
 1606|    360|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  12.3k|        : base(unexpect, std::move(e.error())),
 1474|  12.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  12.3k|    {
 1476|  12.3k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  12.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  12.3k|          m_has_value(false)
  446|  12.3k|    {
  447|  12.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   984k|    {
 1177|   984k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1427|   140k|        : base(std::in_place, std::forward<U>(val)),
 1428|   140k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   140k|    {
 1430|   140k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  435|   140k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   140k|    {
  437|   140k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|   829k|        : base(unexpect, std::move(e.error())),
 1474|   829k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   829k|    {
 1476|   829k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|   829k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   829k|          m_has_value(false)
  446|   829k|    {
  447|   829k|    }
_ZNK3scn2v38expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1597|   984k|    {
 1598|   984k|        return has_value();
 1599|   984k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  1.49M|    {
  485|  1.49M|        return m_has_value;
  486|  1.49M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1603|   365k|    {
 1604|   365k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   365k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   365k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   365k|        return this->get_unexpected().error();
 1606|   365k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|   365k|    {
  468|   365k|        return m_unexpected;
  469|   365k|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1427|   421k|        : base(std::in_place, std::forward<U>(val)),
 1428|   421k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   421k|    {
 1430|   421k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|   421k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   421k|    {
  437|   421k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   421k|    {
 1177|   421k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1652|   143k|    {
 1653|   143k|        return value();
 1654|   143k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|   143k|    {
 1627|   143k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   143k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   143k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   143k|        return this->get_value();
 1629|   143k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|   143k|    {
  451|   143k|        return m_value;
  452|   143k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|   421k|    {
 1598|   421k|        return has_value();
 1599|   421k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|   842k|    {
  485|   842k|        return m_has_value;
  486|   842k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   421k|    {
 1177|   421k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|   421k|    {
 1663|   421k|        return std::move(value());
 1664|   421k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|   421k|    {
 1627|   421k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   421k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   421k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   421k|        return this->get_value();
 1629|   421k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|   421k|    {
  451|   421k|        return m_value;
  452|   421k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1427|  2.59k|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.59k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.59k|    {
 1430|  2.59k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  2.59k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.59k|    {
  437|  2.59k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1427|   421k|        : base(std::in_place, std::forward<U>(val)),
 1428|   421k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   421k|    {
 1430|   421k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  435|   421k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   421k|    {
  437|   421k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   421k|    {
 1837|   421k|        return detail::transform_error_impl(std::move(*this),
 1838|   421k|                                            std::forward<F>(f));
 1839|   421k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1322|   421k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   421k|    else {
 1333|   421k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   421k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   421k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 421k, False: 0]
  |  |  ------------------
  ------------------
 1335|   421k|                   ? result(*std::forward<Exp>(exp))
 1336|   421k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   421k|    }
 1340|   421k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  484|   842k|    {
  485|   842k|        return m_has_value;
  486|   842k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|   421k|    {
 1663|   421k|        return std::move(value());
 1664|   421k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|   421k|    {
 1627|   421k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   421k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   421k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   421k|        return this->get_value();
 1629|   421k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  450|   421k|    {
  451|   421k|        return m_value;
  452|   421k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|   421k|        : base(std::in_place, std::forward<U>(val)),
 1428|   421k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   421k|    {
 1430|   421k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  435|   421k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   421k|    {
  437|   421k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   421k|    {
 1177|   421k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1597|   421k|    {
 1598|   421k|        return has_value();
 1599|   421k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  484|   842k|    {
  485|   842k|        return m_has_value;
  486|   842k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|   421k|    {
 1663|   421k|        return std::move(value());
 1664|   421k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|   421k|    {
 1627|   421k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   421k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   421k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   421k|        return this->get_value();
 1629|   421k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  450|   421k|    {
  451|   421k|        return m_value;
  452|   421k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISD_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISD_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SD_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1473|  3.24k|        : base(unexpect, std::move(e.error())),
 1474|  3.24k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  3.24k|    {
 1476|  3.24k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  624|  3.24k|        : m_has_value(false)
  625|  3.24k|    {
  626|  3.24k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  3.24k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESE_EEEvDpOT_:
  688|  3.24k|    {
  689|  3.24k|        scn::detail::construct_at(unexpected_ptr(),
  690|  3.24k|                                  std::forward<Args>(args)...);
  691|  3.24k|        m_has_value = false;
  692|  3.24k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  9.73k|    {
  718|  9.73k|        return reinterpret_cast<unexpected<E>*>(
  719|  9.73k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  9.73k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  9.73k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  61.4k|    {
 1177|  61.4k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISC_vEEOT_:
 1427|  58.2k|        : base(std::in_place, std::forward<U>(val)),
 1428|  58.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  58.2k|    {
 1430|  58.2k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSD_EvEENS3_10in_place_tEDpOT_:
  614|  58.2k|        : m_has_value(true)
  615|  58.2k|    {
  616|  58.2k|        construct(std::forward<Args>(args)...);
  617|  58.2k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9constructIJSD_EEEvDpOT_:
  681|  58.2k|    {
  682|  58.2k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|  58.2k|        m_has_value = true;
  684|  58.2k|    }
_ZN3scn2v36detail12construct_atINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEEJSD_EEEPT_SF_DpOT0_:
  391|  58.2k|{
  392|  58.2k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  58.2k|        T(std::forward<Args>(args)...);
  394|  58.2k|}
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9value_ptrEv:
  705|   174k|    {
  706|   174k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|   174k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|   174k|    }
_ZNK3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEcvbEv:
 1597|  61.4k|    {
 1598|  61.4k|        return has_value();
 1599|  61.4k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9has_valueEv:
  674|   184k|    {
  675|   184k|        return m_has_value;
  676|   184k|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5errorEv:
 1603|  3.24k|    {
 1604|  3.24k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  3.24k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.24k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  3.24k|        return this->get_unexpected().error();
 1606|  3.24k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|  3.24k|    {
  658|  3.24k|        return *unexpected_ptr();
  659|  3.24k|    }
_ZNO3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEdeISC_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSH_v:
 1662|  58.2k|    {
 1663|  58.2k|        return std::move(value());
 1664|  58.2k|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5valueISC_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1626|  58.2k|    {
 1627|  58.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  58.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  58.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  58.2k|        return this->get_value();
 1629|  58.2k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9get_valueEv:
  640|  58.2k|    {
  641|  58.2k|        return *value_ptr();
  642|  58.2k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EED2Ev:
  630|  61.4k|    {
  631|  61.4k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 58.2k, False: 3.24k]
  ------------------
  632|  58.2k|            destroy_value();
  633|  58.2k|        }
  634|  3.24k|        else {
  635|  3.24k|            destroy_unexpected();
  636|  3.24k|        }
  637|  61.4k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|  58.2k|    {
  696|  58.2k|        scn::detail::destroy_at(value_ptr());
  697|  58.2k|    }
_ZN3scn2v36detail10destroy_atINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEEEEvPT_:
  397|  58.2k|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|  58.2k|    else {
  404|  58.2k|        p->~T();
  405|  58.2k|    }
  406|  58.2k|}
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  3.24k|    {
  700|  3.24k|        scn::detail::destroy_at(unexpected_ptr());
  701|  3.24k|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   746k|    {
 2855|   746k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   746k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   746k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   746k|    {
 2836|   746k|        return t.data();
 2837|   746k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1473|   533k|        : base(unexpect, std::move(e.error())),
 1474|   533k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   533k|    {
 1476|   533k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  444|   533k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   533k|          m_has_value(false)
  446|   533k|    {
  447|   533k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.27M|    {
 1177|  1.27M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1427|   742k|        : base(std::in_place, std::forward<U>(val)),
 1428|   742k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   742k|    {
 1430|   742k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  435|   742k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   742k|    {
  437|   742k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1652|   284k|    {
 1653|   284k|        return value();
 1654|   284k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1652|   284k|    {
 1653|   284k|        return value();
 1654|   284k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3642|   315k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|   315k|    static_cast<    \
  |  |  929|   315k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3643|   315k|    {
 3644|   315k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|   227k|        : base(unexpect, std::move(e.error())),
 1474|   227k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   227k|    {
 1476|   227k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4288|   618k|    {
 4289|   618k|        return x.is_at_end();
 4290|   618k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4332|  35.5M|    {
 4333|  35.5M|        if (m_end) {
  ------------------
  |  Branch (4333:13): [True: 0, False: 35.5M]
  ------------------
 4334|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4335|      0|        }
 4336|  35.5M|        if (!m_begin) {
  ------------------
  |  Branch (4336:13): [True: 0, False: 35.5M]
  ------------------
 4337|      0|            return true;
 4338|      0|        }
 4339|  35.5M|        return !read_at_position();
 4340|  35.5M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4312|  71.1G|    {
 4313|  71.1G|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  71.1G|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  71.1G|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4314|       |
 4315|  71.1G|        if (!stores_parent()) {
  ------------------
  |  Branch (4315:13): [True: 0, False: 71.1G]
  ------------------
 4316|      0|            return true;
 4317|      0|        }
 4318|       |
 4319|  71.1G|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|  71.1G|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 71.1G, False: 35.0M]
  |  |  ------------------
  ------------------
 4320|  71.1G|            return true;
 4321|  71.1G|        }
 4322|       |
 4323|  70.0M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4323:16): [True: 35.0M, False: 34.9M]
  ------------------
 4324|  35.0M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4324:17): [True: 107k, False: 34.9M]
  ------------------
 4325|   107k|                return false;
 4326|   107k|            }
 4327|  35.0M|        }
 4328|  34.9M|        return true;
 4329|  35.0M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE15chars_availableEv:
 4088|  71.2G|    {
 4089|  71.2G|        return m_putback_buffer.size() + m_current_view.size();
 4090|  71.2G|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4247|  35.6M|    {
 4248|  35.6M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  35.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  35.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|       |
 4250|  35.6M|        if (!stores_parent()) {
  ------------------
  |  Branch (4250:13): [True: 0, False: 35.6M]
  ------------------
 4251|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4252|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4253|      0|            return *ptr;
 4254|      0|        }
 4255|       |
 4256|  35.6M|        auto res = read_at_position();
 4257|  35.6M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  35.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  35.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4258|  35.6M|        return parent()->get_character_at(m_position);
 4259|  35.6M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16get_character_atEl:
 4119|  35.6M|    {
 4120|  35.6M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  35.6M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 649k, False: 34.9M]
  |  |  ------------------
  ------------------
 4121|  35.6M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4122|   649k|            return m_putback_buffer[pos];
 4123|   649k|        }
 4124|  34.9M|        const auto start = pos - m_putback_buffer.size();
 4125|  34.9M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  34.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  34.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4126|  34.9M|        return m_current_view[start];
 4127|  34.9M|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3802|   261k|{
 3803|       |    if constexpr (sizeof(U) == 1) {
 3804|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 3805|       |    }
 3806|       |    else if constexpr (sizeof(U) == 2) {
 3807|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 3808|       |    }
 3809|   261k|    else {
 3810|       |        // utf-32
 3811|   261k|        static_assert(sizeof(U) == 4);
 3812|   261k|        SCN_UNUSED(ch);
  ------------------
  |  |  909|   261k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3813|   261k|        return 1;
 3814|   261k|    }
 3815|   261k|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1427|   374k|        : base(std::in_place, std::forward<U>(val)),
 1428|   374k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   374k|    {
 1430|   374k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|   374k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   374k|    {
  437|   374k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   395k|    {
 1177|   395k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|  21.2k|        : base(unexpect, std::move(e.error())),
 1474|  21.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  21.2k|    {
 1476|  21.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  21.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  21.2k|          m_has_value(false)
  446|  21.2k|    {
  447|  21.2k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1597|   162k|    {
 1598|   162k|        return has_value();
 1599|   162k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1652|  2.22k|    {
 1653|  2.22k|        return value();
 1654|  2.22k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4282|  71.0G|    {
 4283|  71.0G|        return !(lhs == rhs);
 4284|  71.0G|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4277|  71.0G|    {
 4278|  71.0G|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4278:16): [True: 71.0G, False: 0]
  |  Branch (4278:46): [True: 34.8M, False: 71.0G]
  ------------------
 4279|  71.0G|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4233|  71.0G|    {
 4234|  71.0G|        ++m_position;
 4235|  71.0G|        (void)read_at_position();
 4236|  71.0G|        return *this;
 4237|  71.0G|    }
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4008|   261k|{
 4009|       |    if constexpr (sizeof(CharT) == 1) {
 4010|       |        return decode_utf8_code_point_exhaustive(input);
 4011|       |    }
 4012|       |    else if constexpr (sizeof(CharT) == 2) {
 4013|       |        return decode_utf16_code_point_exhaustive(input);
 4014|       |    }
 4015|   261k|    else {
 4016|   261k|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|   261k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   261k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4017|   261k|        auto cp = static_cast<char32_t>(input.front());
 4018|   261k|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   261k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 107k, False: 154k]
  |  |  ------------------
  ------------------
 4019|   107k|            return invalid_code_point;
 4020|   107k|        }
 4021|   154k|        return cp;
 4022|   261k|    }
 4023|   261k|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  1.48k|        : base(unexpect, std::move(e.error())),
 1474|  1.48k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.48k|    {
 1476|  1.48k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|  1.48k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.48k|          m_has_value(false)
  446|  1.48k|    {
  447|  1.48k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   106k|    {
 1177|   106k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   104k|        : base(std::in_place, std::forward<U>(val)),
 1428|   104k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   104k|    {
 1430|   104k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  435|   104k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   104k|    {
  437|   104k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|   106k|    {
 1598|   106k|        return has_value();
 1599|   106k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|   212k|    {
  485|   212k|        return m_has_value;
  486|   212k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  1.48k|    {
 1604|  1.48k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.48k|        return this->get_unexpected().error();
 1606|  1.48k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  1.48k|    {
  468|  1.48k|        return m_unexpected;
  469|  1.48k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|   104k|    {
 1663|   104k|        return std::move(value());
 1664|   104k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|   104k|    {
 1627|   104k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   104k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   104k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   104k|        return this->get_value();
 1629|   104k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|   104k|    {
  451|   104k|        return m_value;
  452|   104k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3329|  36.2M|    {
 3330|  36.2M|        return m_sentinel;
 3331|  36.2M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1603|     72|    {
 1604|     72|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     72|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     72|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     72|        return this->get_unexpected().error();
 1606|     72|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|  19.3k|        : base(unexpect, std::move(e.error())),
 1474|  19.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  19.3k|    {
 1476|  19.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  38.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  38.7k|          m_has_value(false)
  446|  38.7k|    {
  447|  38.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   512k|    {
 1177|   512k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1427|  2.58k|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.58k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.58k|    {
 1430|  2.58k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  435|  2.58k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.58k|    {
  437|  2.58k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|   385k|        : base(unexpect, std::move(e.error())),
 1474|   385k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   385k|    {
 1476|   385k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|   385k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   385k|          m_has_value(false)
  446|   385k|    {
  447|   385k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1597|   402k|    {
 1598|   402k|        return has_value();
 1599|   402k|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  484|   855k|    {
  485|   855k|        return m_has_value;
  486|   855k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1603|   145k|    {
 1604|   145k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   145k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   145k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   145k|        return this->get_unexpected().error();
 1606|   145k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|   253k|    {
  468|   253k|        return m_unexpected;
  469|   253k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1427|   128k|        : base(std::in_place, std::forward<U>(val)),
 1428|   128k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   128k|    {
 1430|   128k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  435|   128k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   128k|    {
  437|   128k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   128k|    {
 1177|   128k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1652|  2.58k|    {
 1653|  2.58k|        return value();
 1654|  2.58k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  88.9k|    {
 1627|  88.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  88.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  88.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  88.9k|        return this->get_value();
 1629|  88.9k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  88.9k|    {
  451|  88.9k|        return m_value;
  452|  88.9k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1597|   128k|    {
 1598|   128k|        return has_value();
 1599|   128k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  484|   256k|    {
  485|   256k|        return m_has_value;
  486|   256k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   128k|    {
 1177|   128k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|   128k|    {
 1663|   128k|        return std::move(value());
 1664|   128k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|   128k|    {
 1627|   128k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   128k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   128k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   128k|        return this->get_value();
 1629|   128k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  450|   128k|    {
  451|   128k|        return m_value;
  452|   128k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   102k|    {
 1837|   102k|        return detail::transform_error_impl(std::move(*this),
 1838|   102k|                                            std::forward<F>(f));
 1839|   102k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|   102k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   102k|    else {
 1333|   102k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   102k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   102k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 83.4k, False: 19.3k]
  |  |  ------------------
  ------------------
 1335|   102k|                   ? result(*std::forward<Exp>(exp))
 1336|   102k|                   : result(unexpect,
 1337|  19.3k|                            trivial_invoke(std::forward<F>(f),
 1338|  19.3k|                                           std::forward<Exp>(exp).error()));
 1339|   102k|    }
 1340|   102k|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1427|  86.3k|        : base(std::in_place, std::forward<U>(val)),
 1428|  86.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  86.3k|    {
 1430|  86.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  86.3k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  86.3k|    {
  437|  86.3k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1483|  19.3k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  19.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  19.3k|    {
 1486|  19.3k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  86.3k|    {
 1663|  86.3k|        return std::move(value());
 1664|  86.3k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEEC2IS8_vEEOT_:
 1427|   128k|        : base(std::in_place, std::forward<U>(val)),
 1428|   128k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   128k|    {
 1430|   128k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  435|   128k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   128k|    {
  437|   128k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|   128k|    {
 1837|   128k|        return detail::transform_error_impl(std::move(*this),
 1838|   128k|                                            std::forward<F>(f));
 1839|   128k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS4_9eof_errorEEERFNS0_10scan_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1322|   128k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   128k|    else {
 1333|   128k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   128k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   128k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 128k, False: 0]
  |  |  ------------------
  ------------------
 1335|   128k|                   ? result(*std::forward<Exp>(exp))
 1336|   128k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   128k|    }
 1340|   128k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EE9has_valueEv:
  484|   256k|    {
  485|   256k|        return m_has_value;
  486|   256k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|   128k|    {
 1663|   128k|        return std::move(value());
 1664|   128k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|   128k|    {
 1627|   128k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   128k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   128k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   128k|        return this->get_value();
 1629|   128k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EE9get_valueEv:
  450|   128k|    {
  451|   128k|        return m_value;
  452|   128k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   128k|        : base(std::in_place, std::forward<U>(val)),
 1428|   128k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   128k|    {
 1430|   128k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  435|   128k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   128k|    {
  437|   128k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   128k|    {
 1177|   128k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEcvbEv:
 1597|   128k|    {
 1598|   128k|        return has_value();
 1599|   128k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   256k|    {
  485|   256k|        return m_has_value;
  486|   256k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|   128k|    {
 1663|   128k|        return std::move(value());
 1664|   128k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|   128k|    {
 1627|   128k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   128k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   128k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   128k|        return this->get_value();
 1629|   128k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   128k|    {
  451|   128k|        return m_value;
  452|   128k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|   110k|    {
 1837|   110k|        return detail::transform_error_impl(std::move(*this),
 1838|   110k|                                            std::forward<F>(f));
 1839|   110k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1322|   110k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   110k|    else {
 1333|   110k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   110k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   110k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.94k, False: 107k]
  |  |  ------------------
  ------------------
 1335|   110k|                   ? result(*std::forward<Exp>(exp))
 1336|   110k|                   : result(unexpect,
 1337|   107k|                            trivial_invoke(std::forward<F>(f),
 1338|   107k|                                           std::forward<Exp>(exp).error()));
 1339|   110k|    }
 1340|   110k|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1613|   107k|    {
 1614|   107k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   107k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   107k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|   107k|        return std::move(this->get_unexpected().error());
 1616|   107k|    }
_ZN3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEC2ISI_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1473|  16.4k|        : base(unexpect, std::move(e.error())),
 1474|  16.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  16.4k|    {
 1476|  16.4k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  624|  16.4k|        : m_has_value(false)
  625|  16.4k|    {
  626|  16.4k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  16.4k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESI_EEEvDpOT_:
  688|  16.4k|    {
  689|  16.4k|        scn::detail::construct_at(unexpected_ptr(),
  690|  16.4k|                                  std::forward<Args>(args)...);
  691|  16.4k|        m_has_value = false;
  692|  16.4k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  49.2k|    {
  718|  49.2k|        return reinterpret_cast<unexpected<E>*>(
  719|  49.2k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  49.2k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  49.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  17.0k|    {
 1177|  17.0k|    }
_ZN3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1427|    596|        : base(std::in_place, std::forward<U>(val)),
 1428|    596|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    596|    {
 1430|    596|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS3_10in_place_tEDpOT_:
  614|    596|        : m_has_value(true)
  615|    596|    {
  616|    596|        construct(std::forward<Args>(args)...);
  617|    596|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9constructIJSH_EEEvDpOT_:
  681|    596|    {
  682|    596|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|    596|        m_has_value = true;
  684|    596|    }
_ZN3scn2v36detail12construct_atINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEEJSH_EEEPT_SJ_DpOT0_:
  391|    596|{
  392|    596|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|    596|        T(std::forward<Args>(args)...);
  394|    596|}
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  1.78k|    {
  706|  1.78k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  1.78k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  1.78k|    }
_ZNK3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|  17.0k|    {
 1598|  17.0k|        return has_value();
 1599|  17.0k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  51.0k|    {
  675|  51.0k|        return m_has_value;
  676|  51.0k|    }
_ZNR3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1603|  16.4k|    {
 1604|  16.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  16.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  16.4k|        return this->get_unexpected().error();
 1606|  16.4k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|  16.4k|    {
  658|  16.4k|        return *unexpected_ptr();
  659|  16.4k|    }
_ZNO3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEdeISH_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSM_v:
 1662|    596|    {
 1663|    596|        return std::move(value());
 1664|    596|    }
_ZNR3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEE5valueISH_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1626|    596|    {
 1627|    596|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    596|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    596|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    596|        return this->get_value();
 1629|    596|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|    596|    {
  641|    596|        return *value_ptr();
  642|    596|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3325|  7.18k|    {
 3326|  7.18k|        return m_iterator;
 3327|  7.18k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3329|  7.18k|    {
 3330|  7.18k|        return m_sentinel;
 3331|  7.18k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  17.0k|    {
  631|  17.0k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 596, False: 16.4k]
  ------------------
  632|    596|            destroy_value();
  633|    596|        }
  634|  16.4k|        else {
  635|  16.4k|            destroy_unexpected();
  636|  16.4k|        }
  637|  17.0k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|    596|    {
  696|    596|        scn::detail::destroy_at(value_ptr());
  697|    596|    }
_ZN3scn2v36detail10destroy_atINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEEEEvPT_:
  397|    596|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|    596|    else {
  404|    596|        p->~T();
  405|    596|    }
  406|    596|}
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  16.4k|    {
  700|  16.4k|        scn::detail::destroy_at(unexpected_ptr());
  701|  16.4k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|   473k|    {
 1598|   473k|        return has_value();
 1599|   473k|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|   947k|    {
  485|   947k|        return m_has_value;
  486|   947k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|   336k|    {
 1604|   336k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   336k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   336k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   336k|        return this->get_unexpected().error();
 1606|   336k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   336k|    {
  468|   336k|        return m_unexpected;
  469|   336k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|   134k|    {
 1663|   134k|        return std::move(value());
 1664|   134k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|   137k|    {
 1627|   137k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   137k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   137k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   137k|        return this->get_value();
 1629|   137k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|   137k|    {
  451|   137k|        return m_value;
  452|   137k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3310|  3.03k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  3.03k|    static_cast<    \
  |  |  929|  3.03k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  3.03k|    static_cast<    \
  |  |  929|  3.03k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  3.03k|    {
 3312|  3.03k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4299|  34.9M|    {
 4300|  34.9M|        return !x.is_at_end();
 4301|  34.9M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  21.2k|        : base(unexpect, std::move(e.error())),
 1474|  21.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  21.2k|    {
 1476|  21.2k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  21.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  21.2k|          m_has_value(false)
  446|  21.2k|    {
  447|  21.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   395k|    {
 1177|   395k|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1427|   374k|        : base(std::in_place, std::forward<U>(val)),
 1428|   374k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   374k|    {
 1430|   374k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|   374k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   374k|    {
  437|   374k|    }
_ZNK3scn2v38expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1597|   162k|    {
 1598|   162k|        return has_value();
 1599|   162k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|   631k|    {
  485|   631k|        return m_has_value;
  486|   631k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1652|  2.22k|    {
 1653|  2.22k|        return value();
 1654|  2.22k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|   214k|    {
 1627|   214k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   214k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   214k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   214k|        return this->get_value();
 1629|   214k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|   214k|    {
  451|   214k|        return m_value;
  452|   214k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  1.48k|        : base(unexpect, std::move(e.error())),
 1474|  1.48k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.48k|    {
 1476|  1.48k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  444|  1.48k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.48k|          m_has_value(false)
  446|  1.48k|    {
  447|  1.48k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   106k|    {
 1177|   106k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|   104k|        : base(std::in_place, std::forward<U>(val)),
 1428|   104k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   104k|    {
 1430|   104k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  435|   104k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   104k|    {
  437|   104k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|   130k|    {
 1837|   130k|        return detail::transform_error_impl(std::move(*this),
 1838|   130k|                                            std::forward<F>(f));
 1839|   130k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|   130k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   130k|    else {
 1333|   130k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   130k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   130k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 128k, False: 1.86k]
  |  |  ------------------
  ------------------
 1335|   130k|                   ? result(*std::forward<Exp>(exp))
 1336|   130k|                   : result(unexpect,
 1337|  1.86k|                            trivial_invoke(std::forward<F>(f),
 1338|  1.86k|                                           std::forward<Exp>(exp).error()));
 1339|   130k|    }
 1340|   130k|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|   211k|    {
 1663|   211k|        return std::move(value());
 1664|   211k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1613|  21.1k|    {
 1614|  21.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  21.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  21.1k|        return std::move(this->get_unexpected().error());
 1616|  21.1k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  21.2k|    {
  468|  21.2k|        return m_unexpected;
  469|  21.2k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1483|  1.86k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  1.86k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  1.86k|    {
 1486|  1.86k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1597|   106k|    {
 1598|   106k|        return has_value();
 1599|   106k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  484|   212k|    {
  485|   212k|        return m_has_value;
  486|   212k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1603|  1.48k|    {
 1604|  1.48k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.48k|        return this->get_unexpected().error();
 1606|  1.48k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  1.48k|    {
  468|  1.48k|        return m_unexpected;
  469|  1.48k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|   104k|    {
 1663|   104k|        return std::move(value());
 1664|   104k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|   104k|    {
 1627|   104k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   104k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   104k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   104k|        return this->get_value();
 1629|   104k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  450|   104k|    {
  451|   104k|        return m_value;
  452|   104k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1603|     72|    {
 1604|     72|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     72|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     72|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     72|        return this->get_unexpected().error();
 1606|     72|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  19.3k|        : base(unexpect, std::move(e.error())),
 1474|  19.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  19.3k|    {
 1476|  19.3k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  38.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  38.7k|          m_has_value(false)
  446|  38.7k|    {
  447|  38.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   402k|    {
 1177|   402k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1427|  2.58k|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.58k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.58k|    {
 1430|  2.58k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  435|  2.58k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.58k|    {
  437|  2.58k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|   277k|        : base(unexpect, std::move(e.error())),
 1474|   277k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   277k|    {
 1476|   277k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|   277k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   277k|          m_has_value(false)
  446|   277k|    {
  447|   277k|    }
_ZNK3scn2v38expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1597|   402k|    {
 1598|   402k|        return has_value();
 1599|   402k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|   634k|    {
  485|   634k|        return m_has_value;
  486|   634k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1603|   145k|    {
 1604|   145k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   145k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   145k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   145k|        return this->get_unexpected().error();
 1606|   145k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|   145k|    {
  468|   145k|        return m_unexpected;
  469|   145k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1427|   128k|        : base(std::in_place, std::forward<U>(val)),
 1428|   128k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   128k|    {
 1430|   128k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|   128k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   128k|    {
  437|   128k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   128k|    {
 1177|   128k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1652|  2.58k|    {
 1653|  2.58k|        return value();
 1654|  2.58k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  86.0k|    {
 1627|  86.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  86.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  86.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  86.0k|        return this->get_value();
 1629|  86.0k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  86.0k|    {
  451|  86.0k|        return m_value;
  452|  86.0k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|   128k|    {
 1598|   128k|        return has_value();
 1599|   128k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|   256k|    {
  485|   256k|        return m_has_value;
  486|   256k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   128k|    {
 1177|   128k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|   128k|    {
 1663|   128k|        return std::move(value());
 1664|   128k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|   128k|    {
 1627|   128k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   128k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   128k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   128k|        return this->get_value();
 1629|   128k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|   128k|    {
  451|   128k|        return m_value;
  452|   128k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|   102k|    {
 1837|   102k|        return detail::transform_error_impl(std::move(*this),
 1838|   102k|                                            std::forward<F>(f));
 1839|   102k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|   102k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   102k|    else {
 1333|   102k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   102k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   102k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 83.4k, False: 19.3k]
  |  |  ------------------
  ------------------
 1335|   102k|                   ? result(*std::forward<Exp>(exp))
 1336|   102k|                   : result(unexpect,
 1337|  19.3k|                            trivial_invoke(std::forward<F>(f),
 1338|  19.3k|                                           std::forward<Exp>(exp).error()));
 1339|   102k|    }
 1340|   102k|}
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1427|  83.4k|        : base(std::in_place, std::forward<U>(val)),
 1428|  83.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  83.4k|    {
 1430|  83.4k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  83.4k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  83.4k|    {
  437|  83.4k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1483|  19.3k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  19.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  19.3k|    {
 1486|  19.3k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|  83.4k|    {
 1663|  83.4k|        return std::move(value());
 1664|  83.4k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1427|   128k|        : base(std::in_place, std::forward<U>(val)),
 1428|   128k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   128k|    {
 1430|   128k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  435|   128k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   128k|    {
  437|   128k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   128k|    {
 1837|   128k|        return detail::transform_error_impl(std::move(*this),
 1838|   128k|                                            std::forward<F>(f));
 1839|   128k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1322|   128k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   128k|    else {
 1333|   128k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   128k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   128k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 128k, False: 0]
  |  |  ------------------
  ------------------
 1335|   128k|                   ? result(*std::forward<Exp>(exp))
 1336|   128k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   128k|    }
 1340|   128k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  484|   256k|    {
  485|   256k|        return m_has_value;
  486|   256k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|   128k|    {
 1663|   128k|        return std::move(value());
 1664|   128k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|   128k|    {
 1627|   128k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   128k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   128k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   128k|        return this->get_value();
 1629|   128k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  450|   128k|    {
  451|   128k|        return m_value;
  452|   128k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|   128k|        : base(std::in_place, std::forward<U>(val)),
 1428|   128k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   128k|    {
 1430|   128k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  435|   128k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   128k|    {
  437|   128k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   128k|    {
 1177|   128k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1597|   128k|    {
 1598|   128k|        return has_value();
 1599|   128k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  484|   256k|    {
  485|   256k|        return m_has_value;
  486|   256k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|   128k|    {
 1663|   128k|        return std::move(value());
 1664|   128k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|   128k|    {
 1627|   128k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   128k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   128k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   128k|        return this->get_value();
 1629|   128k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  450|   128k|    {
  451|   128k|        return m_value;
  452|   128k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISG_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1473|  16.4k|        : base(unexpect, std::move(e.error())),
 1474|  16.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  16.4k|    {
 1476|  16.4k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  624|  16.4k|        : m_has_value(false)
  625|  16.4k|    {
  626|  16.4k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  16.4k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESH_EEEvDpOT_:
  688|  16.4k|    {
  689|  16.4k|        scn::detail::construct_at(unexpected_ptr(),
  690|  16.4k|                                  std::forward<Args>(args)...);
  691|  16.4k|        m_has_value = false;
  692|  16.4k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  49.2k|    {
  718|  49.2k|        return reinterpret_cast<unexpected<E>*>(
  719|  49.2k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  49.2k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  49.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  17.0k|    {
 1177|  17.0k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1427|    596|        : base(std::in_place, std::forward<U>(val)),
 1428|    596|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    596|    {
 1430|    596|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSG_EvEENS3_10in_place_tEDpOT_:
  614|    596|        : m_has_value(true)
  615|    596|    {
  616|    596|        construct(std::forward<Args>(args)...);
  617|    596|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9constructIJSG_EEEvDpOT_:
  681|    596|    {
  682|    596|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|    596|        m_has_value = true;
  684|    596|    }
_ZN3scn2v36detail12construct_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEJSG_EEEPT_SI_DpOT0_:
  391|    596|{
  392|    596|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|    596|        T(std::forward<Args>(args)...);
  394|    596|}
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  1.78k|    {
  706|  1.78k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  1.78k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  1.78k|    }
_ZNK3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|  17.0k|    {
 1598|  17.0k|        return has_value();
 1599|  17.0k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  51.0k|    {
  675|  51.0k|        return m_has_value;
  676|  51.0k|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1603|  16.4k|    {
 1604|  16.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  16.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  16.4k|        return this->get_unexpected().error();
 1606|  16.4k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|  16.4k|    {
  658|  16.4k|        return *unexpected_ptr();
  659|  16.4k|    }
_ZNO3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEdeISF_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSK_v:
 1662|    596|    {
 1663|    596|        return std::move(value());
 1664|    596|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5valueISF_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1626|    596|    {
 1627|    596|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    596|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    596|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    596|        return this->get_value();
 1629|    596|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|    596|    {
  641|    596|        return *value_ptr();
  642|    596|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  17.0k|    {
  631|  17.0k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 596, False: 16.4k]
  ------------------
  632|    596|            destroy_value();
  633|    596|        }
  634|  16.4k|        else {
  635|  16.4k|            destroy_unexpected();
  636|  16.4k|        }
  637|  17.0k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|    596|    {
  696|    596|        scn::detail::destroy_at(value_ptr());
  697|    596|    }
_ZN3scn2v36detail10destroy_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEEEvPT_:
  397|    596|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|    596|    else {
  404|    596|        p->~T();
  405|    596|    }
  406|    596|}
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  16.4k|    {
  700|  16.4k|        scn::detail::destroy_at(unexpected_ptr());
  701|  16.4k|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   110k|    {
 2855|   110k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   110k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   110k|    {
 2836|   110k|        return t.data();
 2837|   110k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1652|  2.51k|    {
 1653|  2.51k|        return value();
 1654|  2.51k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1652|  2.51k|    {
 1653|  2.51k|        return value();
 1654|  2.51k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3642|   110k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|   110k|    static_cast<    \
  |  |  929|   110k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3643|   110k|    {
 3644|   110k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA17_KcEEEDaDpOT_:
 3649|  14.9k|{
 3650|  14.9k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  14.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  14.9k|}
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5475|   849k|    {
 5476|   849k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   849k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 849k]
  |  |  ------------------
  ------------------
 5477|      0|            return max_size();
 5478|      0|        }
 5479|       |
 5480|   849k|        return static_cast<std::size_t>(m_desc &
 5481|   849k|                                        ((1 << detail::packed_arg_bits) - 1));
 5482|   849k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5500|  1.69M|    {
 5501|  1.69M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5502|  1.69M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5443|   849k|    {
 5444|   849k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   849k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 849k]
  |  |  ------------------
  ------------------
 5445|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5446|      0|                return m_args[id];
 5447|      0|            }
 5448|      0|            return {};
 5449|      0|        }
 5450|       |
 5451|   849k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|   849k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 849k]
  |  |  ------------------
  ------------------
 5452|      0|            return {};
 5453|      0|        }
 5454|       |
 5455|   849k|        const auto t = type(id);
 5456|   849k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|   849k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 849k]
  |  |  ------------------
  ------------------
 5457|      0|            return {};
 5458|      0|        }
 5459|       |
 5460|   849k|        basic_scan_arg<Context> arg;
 5461|   849k|        arg.m_type = t;
 5462|   849k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5462:13): [True: 849k, False: 0]
  ------------------
 5463|   849k|            arg.m_value.ref_value = m_builtin_values[id];
 5464|   849k|        }
 5465|      0|        else {
 5466|      0|            arg.m_value = m_values[id];
 5467|      0|        }
 5468|   849k|        return arg;
 5469|   849k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5509|   849k|    {
 5510|       |        // First (0th) index is size, types start after that
 5511|   849k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5512|   849k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5513|   849k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5514|   849k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5504|   849k|    {
 5505|   849k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5506|   849k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5256|  1.58M|    {
 5257|  1.58M|        return m_type != detail::arg_type::none_type;
 5258|  1.58M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|  97.0k|{
 8428|  97.0k|#define SCN_VISIT(Type)                                         \
 8429|  97.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|  97.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|  97.0k|    }                                                           \
 8432|  97.0k|    else {                                                      \
 8433|  97.0k|        return vis(monostate_val);                              \
 8434|  97.0k|    }
 8435|       |
 8436|  97.0k|    monostate monostate_val{};
 8437|       |
 8438|  97.0k|    switch (arg.m_type) {
 8439|  16.1k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 16.1k, False: 80.9k]
  ------------------
 8440|  16.1k|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|  16.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  16.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  16.1k|    }                                                           \
  |  | 8432|  16.1k|    else {                                                      \
  |  | 8433|  16.1k|        return vis(monostate_val);                              \
  |  | 8434|  16.1k|    }
  ------------------
 8441|  16.1k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 97.0k]
  ------------------
 8442|  16.1k|            SCN_VISIT(short);
  ------------------
  |  | 8429|  16.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  16.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  16.1k|    }                                                           \
  |  | 8432|  16.1k|    else {                                                      \
  |  | 8433|  16.1k|        return vis(monostate_val);                              \
  |  | 8434|  16.1k|    }
  ------------------
 8443|  34.7k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 18.6k, False: 78.4k]
  ------------------
 8444|  34.7k|            SCN_VISIT(int);
  ------------------
  |  | 8429|  34.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  34.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  34.7k|    }                                                           \
  |  | 8432|  34.7k|    else {                                                      \
  |  | 8433|  34.7k|        return vis(monostate_val);                              \
  |  | 8434|  34.7k|    }
  ------------------
 8445|  34.7k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 97.0k]
  ------------------
 8446|  34.7k|            SCN_VISIT(long);
  ------------------
  |  | 8429|  34.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  34.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  34.7k|    }                                                           \
  |  | 8432|  34.7k|    else {                                                      \
  |  | 8433|  34.7k|        return vis(monostate_val);                              \
  |  | 8434|  34.7k|    }
  ------------------
 8447|  53.7k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 18.9k, False: 78.0k]
  ------------------
 8448|  53.7k|            SCN_VISIT(long long);
  ------------------
  |  | 8429|  53.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  53.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  53.7k|    }                                                           \
  |  | 8432|  53.7k|    else {                                                      \
  |  | 8433|  53.7k|        return vis(monostate_val);                              \
  |  | 8434|  53.7k|    }
  ------------------
 8449|  67.2k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 13.4k, False: 83.5k]
  ------------------
 8450|  67.2k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|  67.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  67.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  67.2k|    }                                                           \
  |  | 8432|  67.2k|    else {                                                      \
  |  | 8433|  67.2k|        return vis(monostate_val);                              \
  |  | 8434|  67.2k|    }
  ------------------
 8451|  67.2k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 97.0k]
  ------------------
 8452|  67.2k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|  67.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  67.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  67.2k|    }                                                           \
  |  | 8432|  67.2k|    else {                                                      \
  |  | 8433|  67.2k|        return vis(monostate_val);                              \
  |  | 8434|  67.2k|    }
  ------------------
 8453|  82.0k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 14.8k, False: 82.2k]
  ------------------
 8454|  82.0k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|  82.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  82.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  82.0k|    }                                                           \
  |  | 8432|  82.0k|    else {                                                      \
  |  | 8433|  82.0k|        return vis(monostate_val);                              \
  |  | 8434|  82.0k|    }
  ------------------
 8455|  82.0k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 97.0k]
  ------------------
 8456|  82.0k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|  82.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  82.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  82.0k|    }                                                           \
  |  | 8432|  82.0k|    else {                                                      \
  |  | 8433|  82.0k|        return vis(monostate_val);                              \
  |  | 8434|  82.0k|    }
  ------------------
 8457|  97.0k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 15.0k, False: 82.0k]
  ------------------
 8458|  97.0k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|  97.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  97.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  97.0k|    }                                                           \
  |  | 8432|  97.0k|    else {                                                      \
  |  | 8433|  97.0k|        return vis(monostate_val);                              \
  |  | 8434|  97.0k|    }
  ------------------
 8459|  97.0k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 97.0k]
  ------------------
 8460|  97.0k|            SCN_VISIT(void*);
  ------------------
  |  | 8429|  97.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  97.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  97.0k|    }                                                           \
  |  | 8432|  97.0k|    else {                                                      \
  |  | 8433|  97.0k|        return vis(monostate_val);                              \
  |  | 8434|  97.0k|    }
  ------------------
 8461|  97.0k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 97.0k]
  ------------------
 8462|  97.0k|            SCN_VISIT(bool);
  ------------------
  |  | 8429|  97.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  97.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  97.0k|    }                                                           \
  |  | 8432|  97.0k|    else {                                                      \
  |  | 8433|  97.0k|        return vis(monostate_val);                              \
  |  | 8434|  97.0k|    }
  ------------------
 8463|  97.0k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 97.0k]
  ------------------
 8464|  97.0k|            SCN_VISIT(char);
  ------------------
  |  | 8429|  97.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  97.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  97.0k|    }                                                           \
  |  | 8432|  97.0k|    else {                                                      \
  |  | 8433|  97.0k|        return vis(monostate_val);                              \
  |  | 8434|  97.0k|    }
  ------------------
 8465|  97.0k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 97.0k]
  ------------------
 8466|  97.0k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|  97.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  97.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  97.0k|    }                                                           \
  |  | 8432|  97.0k|    else {                                                      \
  |  | 8433|  97.0k|        return vis(monostate_val);                              \
  |  | 8434|  97.0k|    }
  ------------------
 8467|  97.0k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 97.0k]
  ------------------
 8468|  97.0k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|  97.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  97.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  97.0k|    }                                                           \
  |  | 8432|  97.0k|    else {                                                      \
  |  | 8433|  97.0k|        return vis(monostate_val);                              \
  |  | 8434|  97.0k|    }
  ------------------
 8469|  97.0k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 97.0k]
  ------------------
 8470|  97.0k|            SCN_VISIT(float);
  ------------------
  |  | 8429|  97.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  97.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  97.0k|    }                                                           \
  |  | 8432|  97.0k|    else {                                                      \
  |  | 8433|  97.0k|        return vis(monostate_val);                              \
  |  | 8434|  97.0k|    }
  ------------------
 8471|  97.0k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 97.0k]
  ------------------
 8472|  97.0k|            SCN_VISIT(double);
  ------------------
  |  | 8429|  97.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  97.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  97.0k|    }                                                           \
  |  | 8432|  97.0k|    else {                                                      \
  |  | 8433|  97.0k|        return vis(monostate_val);                              \
  |  | 8434|  97.0k|    }
  ------------------
 8473|  97.0k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 97.0k]
  ------------------
 8474|  97.0k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|  97.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  97.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  97.0k|    }                                                           \
  |  | 8432|  97.0k|    else {                                                      \
  |  | 8433|  97.0k|        return vis(monostate_val);                              \
  |  | 8434|  97.0k|    }
  ------------------
 8475|  97.0k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 97.0k]
  ------------------
 8476|  97.0k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|  97.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  97.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  97.0k|    }                                                           \
  |  | 8432|  97.0k|    else {                                                      \
  |  | 8433|  97.0k|        return vis(monostate_val);                              \
  |  | 8434|  97.0k|    }
  ------------------
 8477|  97.0k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 97.0k]
  ------------------
 8478|  97.0k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|  97.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  97.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  97.0k|    }                                                           \
  |  | 8432|  97.0k|    else {                                                      \
  |  | 8433|  97.0k|        return vis(monostate_val);                              \
  |  | 8434|  97.0k|    }
  ------------------
 8479|  97.0k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 97.0k]
  ------------------
 8480|  97.0k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|  97.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  97.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  97.0k|    }                                                           \
  |  | 8432|  97.0k|    else {                                                      \
  |  | 8433|  97.0k|        return vis(monostate_val);                              \
  |  | 8434|  97.0k|    }
  ------------------
 8481|  97.0k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 97.0k]
  ------------------
 8482|  97.0k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|  97.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  97.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  97.0k|    }                                                           \
  |  | 8432|  97.0k|    else {                                                      \
  |  | 8433|  97.0k|        return vis(monostate_val);                              \
  |  | 8434|  97.0k|    }
  ------------------
 8483|  97.0k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 97.0k]
  ------------------
 8484|  97.0k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|  97.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  97.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  97.0k|    }                                                           \
  |  | 8432|  97.0k|    else {                                                      \
  |  | 8433|  97.0k|        return vis(monostate_val);                              \
  |  | 8434|  97.0k|    }
  ------------------
 8485|  97.0k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 97.0k]
  ------------------
 8486|  97.0k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|  97.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  97.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  97.0k|    }                                                           \
  |  | 8432|  97.0k|    else {                                                      \
  |  | 8433|  97.0k|        return vis(monostate_val);                              \
  |  | 8434|  97.0k|    }
  ------------------
 8487|       |
 8488|  97.0k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 97.0k]
  ------------------
 8489|  97.0k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|  97.0k|            return vis(
 8491|  97.0k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 97.0k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 97.0k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|  97.0k|            SCN_CLANG_POP
 8506|  97.0k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5553|   721k|        : m_format{format}, m_next_arg_id{next_arg_id}
 5554|   721k|    {
 5555|   721k|    }
_ZN3scn2v318basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8147|   360k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  928|   360k|    static_cast<    \
  |  |  929|   360k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8148|   360k|    {
 8149|   360k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8065|   721k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   721k|    static_cast<    \
  |  |  929|   721k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   721k|    static_cast<    \
  |  |  929|   721k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8066|   721k|    {
 8067|   721k|    }
_ZN3scn2v36detail17basic_scan_bufferIcE3getEv:
 4352|   456k|{
 4353|   456k|    if (is_contiguous()) {
  ------------------
  |  Branch (4353:9): [True: 0, False: 456k]
  ------------------
 4354|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4355|      0|                                ranges::default_sentinel};
 4356|      0|    }
 4357|   456k|    return ranges::subrange{forward_iterator{this, 0},
 4358|   456k|                            ranges::default_sentinel};
 4359|   456k|}
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4183|   456k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4184|   456k|    {
 4185|   456k|        SCN_EXPECT(parent);
  ------------------
  |  |  924|   456k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   456k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4186|   456k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|   456k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   456k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4187|   456k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|  95.6k|{
 8428|  95.6k|#define SCN_VISIT(Type)                                         \
 8429|  95.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|  95.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|  95.6k|    }                                                           \
 8432|  95.6k|    else {                                                      \
 8433|  95.6k|        return vis(monostate_val);                              \
 8434|  95.6k|    }
 8435|       |
 8436|  95.6k|    monostate monostate_val{};
 8437|       |
 8438|  95.6k|    switch (arg.m_type) {
 8439|  16.1k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 16.1k, False: 79.5k]
  ------------------
 8440|  16.1k|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|  16.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  16.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  16.1k|    }                                                           \
  |  | 8432|  16.1k|    else {                                                      \
  |  | 8433|  16.1k|        return vis(monostate_val);                              \
  |  | 8434|  16.1k|    }
  ------------------
 8441|  16.1k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 95.6k]
  ------------------
 8442|  16.1k|            SCN_VISIT(short);
  ------------------
  |  | 8429|  16.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  16.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  16.1k|    }                                                           \
  |  | 8432|  16.1k|    else {                                                      \
  |  | 8433|  16.1k|        return vis(monostate_val);                              \
  |  | 8434|  16.1k|    }
  ------------------
 8443|  34.1k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 18.0k, False: 77.6k]
  ------------------
 8444|  34.1k|            SCN_VISIT(int);
  ------------------
  |  | 8429|  34.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  34.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  34.1k|    }                                                           \
  |  | 8432|  34.1k|    else {                                                      \
  |  | 8433|  34.1k|        return vis(monostate_val);                              \
  |  | 8434|  34.1k|    }
  ------------------
 8445|  34.1k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 95.6k]
  ------------------
 8446|  34.1k|            SCN_VISIT(long);
  ------------------
  |  | 8429|  34.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  34.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  34.1k|    }                                                           \
  |  | 8432|  34.1k|    else {                                                      \
  |  | 8433|  34.1k|        return vis(monostate_val);                              \
  |  | 8434|  34.1k|    }
  ------------------
 8447|  52.5k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 18.3k, False: 77.3k]
  ------------------
 8448|  52.5k|            SCN_VISIT(long long);
  ------------------
  |  | 8429|  52.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  52.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  52.5k|    }                                                           \
  |  | 8432|  52.5k|    else {                                                      \
  |  | 8433|  52.5k|        return vis(monostate_val);                              \
  |  | 8434|  52.5k|    }
  ------------------
 8449|  65.9k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 13.4k, False: 82.2k]
  ------------------
 8450|  65.9k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|  65.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  65.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  65.9k|    }                                                           \
  |  | 8432|  65.9k|    else {                                                      \
  |  | 8433|  65.9k|        return vis(monostate_val);                              \
  |  | 8434|  65.9k|    }
  ------------------
 8451|  65.9k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 95.6k]
  ------------------
 8452|  65.9k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|  65.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  65.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  65.9k|    }                                                           \
  |  | 8432|  65.9k|    else {                                                      \
  |  | 8433|  65.9k|        return vis(monostate_val);                              \
  |  | 8434|  65.9k|    }
  ------------------
 8453|  80.7k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 14.7k, False: 80.9k]
  ------------------
 8454|  80.7k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|  80.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  80.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  80.7k|    }                                                           \
  |  | 8432|  80.7k|    else {                                                      \
  |  | 8433|  80.7k|        return vis(monostate_val);                              \
  |  | 8434|  80.7k|    }
  ------------------
 8455|  80.7k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 95.6k]
  ------------------
 8456|  80.7k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|  80.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  80.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  80.7k|    }                                                           \
  |  | 8432|  80.7k|    else {                                                      \
  |  | 8433|  80.7k|        return vis(monostate_val);                              \
  |  | 8434|  80.7k|    }
  ------------------
 8457|  95.6k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 14.9k, False: 80.7k]
  ------------------
 8458|  95.6k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|  95.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  95.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  95.6k|    }                                                           \
  |  | 8432|  95.6k|    else {                                                      \
  |  | 8433|  95.6k|        return vis(monostate_val);                              \
  |  | 8434|  95.6k|    }
  ------------------
 8459|  95.6k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 95.6k]
  ------------------
 8460|  95.6k|            SCN_VISIT(void*);
  ------------------
  |  | 8429|  95.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  95.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  95.6k|    }                                                           \
  |  | 8432|  95.6k|    else {                                                      \
  |  | 8433|  95.6k|        return vis(monostate_val);                              \
  |  | 8434|  95.6k|    }
  ------------------
 8461|  95.6k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 95.6k]
  ------------------
 8462|  95.6k|            SCN_VISIT(bool);
  ------------------
  |  | 8429|  95.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  95.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  95.6k|    }                                                           \
  |  | 8432|  95.6k|    else {                                                      \
  |  | 8433|  95.6k|        return vis(monostate_val);                              \
  |  | 8434|  95.6k|    }
  ------------------
 8463|  95.6k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 95.6k]
  ------------------
 8464|  95.6k|            SCN_VISIT(char);
  ------------------
  |  | 8429|  95.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  95.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  95.6k|    }                                                           \
  |  | 8432|  95.6k|    else {                                                      \
  |  | 8433|  95.6k|        return vis(monostate_val);                              \
  |  | 8434|  95.6k|    }
  ------------------
 8465|  95.6k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 95.6k]
  ------------------
 8466|  95.6k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|  95.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  95.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  95.6k|    }                                                           \
  |  | 8432|  95.6k|    else {                                                      \
  |  | 8433|  95.6k|        return vis(monostate_val);                              \
  |  | 8434|  95.6k|    }
  ------------------
 8467|  95.6k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 95.6k]
  ------------------
 8468|  95.6k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|  95.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  95.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  95.6k|    }                                                           \
  |  | 8432|  95.6k|    else {                                                      \
  |  | 8433|  95.6k|        return vis(monostate_val);                              \
  |  | 8434|  95.6k|    }
  ------------------
 8469|  95.6k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 95.6k]
  ------------------
 8470|  95.6k|            SCN_VISIT(float);
  ------------------
  |  | 8429|  95.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  95.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  95.6k|    }                                                           \
  |  | 8432|  95.6k|    else {                                                      \
  |  | 8433|  95.6k|        return vis(monostate_val);                              \
  |  | 8434|  95.6k|    }
  ------------------
 8471|  95.6k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 95.6k]
  ------------------
 8472|  95.6k|            SCN_VISIT(double);
  ------------------
  |  | 8429|  95.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  95.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  95.6k|    }                                                           \
  |  | 8432|  95.6k|    else {                                                      \
  |  | 8433|  95.6k|        return vis(monostate_val);                              \
  |  | 8434|  95.6k|    }
  ------------------
 8473|  95.6k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 95.6k]
  ------------------
 8474|  95.6k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|  95.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  95.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  95.6k|    }                                                           \
  |  | 8432|  95.6k|    else {                                                      \
  |  | 8433|  95.6k|        return vis(monostate_val);                              \
  |  | 8434|  95.6k|    }
  ------------------
 8475|  95.6k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 95.6k]
  ------------------
 8476|  95.6k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|  95.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  95.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  95.6k|    }                                                           \
  |  | 8432|  95.6k|    else {                                                      \
  |  | 8433|  95.6k|        return vis(monostate_val);                              \
  |  | 8434|  95.6k|    }
  ------------------
 8477|  95.6k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 95.6k]
  ------------------
 8478|  95.6k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|  95.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  95.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  95.6k|    }                                                           \
  |  | 8432|  95.6k|    else {                                                      \
  |  | 8433|  95.6k|        return vis(monostate_val);                              \
  |  | 8434|  95.6k|    }
  ------------------
 8479|  95.6k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 95.6k]
  ------------------
 8480|  95.6k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|  95.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  95.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  95.6k|    }                                                           \
  |  | 8432|  95.6k|    else {                                                      \
  |  | 8433|  95.6k|        return vis(monostate_val);                              \
  |  | 8434|  95.6k|    }
  ------------------
 8481|  95.6k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 95.6k]
  ------------------
 8482|  95.6k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|  95.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  95.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  95.6k|    }                                                           \
  |  | 8432|  95.6k|    else {                                                      \
  |  | 8433|  95.6k|        return vis(monostate_val);                              \
  |  | 8434|  95.6k|    }
  ------------------
 8483|  95.6k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 95.6k]
  ------------------
 8484|  95.6k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|  95.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  95.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  95.6k|    }                                                           \
  |  | 8432|  95.6k|    else {                                                      \
  |  | 8433|  95.6k|        return vis(monostate_val);                              \
  |  | 8434|  95.6k|    }
  ------------------
 8485|  95.6k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 95.6k]
  ------------------
 8486|  95.6k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|  95.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  95.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  95.6k|    }                                                           \
  |  | 8432|  95.6k|    else {                                                      \
  |  | 8433|  95.6k|        return vis(monostate_val);                              \
  |  | 8434|  95.6k|    }
  ------------------
 8487|       |
 8488|  95.6k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 95.6k]
  ------------------
 8489|  95.6k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|  95.6k|            return vis(
 8491|  95.6k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 95.6k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 95.6k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|  95.6k|            SCN_CLANG_POP
 8506|  95.6k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7054|   360k|{
 7055|   360k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7056|   360k|    handler.check_args_exhausted();
 7057|   360k|    return handler.get_error();
 7058|   360k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7020|   360k|{
 7021|       |    // TODO: memchr fast path with a larger (> 32) format string
 7022|       |
 7023|   360k|    auto begin = format.data();
 7024|   360k|    auto it = begin;
 7025|   360k|    const auto end = format.data() + format.size();
 7026|       |
 7027|   644k|    while (it != end) {
  ------------------
  |  Branch (7027:12): [True: 360k, False: 284k]
  ------------------
 7028|   360k|        const auto ch = *it++;
 7029|   360k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7029:13): [True: 360k, False: 0]
  ------------------
 7030|   360k|            handler.on_literal_text(begin, it - 1);
 7031|       |
 7032|   360k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7033|   360k|            if (!handler) {
  ------------------
  |  Branch (7033:17): [True: 76.2k, False: 284k]
  ------------------
 7034|  76.2k|                return;
 7035|  76.2k|            }
 7036|   360k|        }
 7037|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7037:18): [True: 0, False: 0]
  ------------------
 7038|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7039|      0|                handler.on_error("Unmatched '}' in format string");
 7040|      0|                return;
 7041|      0|            }
 7042|       |
 7043|      0|            handler.on_literal_text(begin, it);
 7044|      0|            begin = ++it;
 7045|      0|        }
 7046|   360k|    }
 7047|       |
 7048|   284k|    handler.on_literal_text(begin, end);
 7049|   284k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6952|   360k|{
 6953|   360k|    struct id_adapter {
 6954|   360k|        constexpr void operator()()
 6955|   360k|        {
 6956|   360k|            arg_id = handler.on_arg_id();
 6957|   360k|        }
 6958|   360k|        constexpr void operator()(std::size_t id)
 6959|   360k|        {
 6960|   360k|            arg_id = handler.on_arg_id(id);
 6961|   360k|        }
 6962|       |
 6963|   360k|        constexpr void on_error(const char* msg)
 6964|   360k|        {
 6965|   360k|            SCN_UNLIKELY_ATTR
 6966|   360k|            handler.on_error(msg);
 6967|   360k|        }
 6968|       |
 6969|   360k|        Handler& handler;
 6970|   360k|        std::size_t arg_id;
 6971|   360k|    };
 6972|       |
 6973|   360k|    ++begin;
 6974|   360k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   360k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 360k]
  |  |  ------------------
  ------------------
 6975|      0|        handler.on_error("Unexpected end of replacement field");
 6976|      0|        return begin;
 6977|      0|    }
 6978|       |
 6979|   360k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:9): [True: 0, False: 360k]
  ------------------
 6980|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6981|      0|    }
 6982|   360k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6982:14): [True: 0, False: 360k]
  ------------------
 6983|      0|        handler.on_literal_text(begin, begin + 1);
 6984|      0|    }
 6985|   360k|    else {
 6986|   360k|        auto adapter = id_adapter{handler, 0};
 6987|   360k|        begin = parse_arg_id(begin, end, adapter);
 6988|       |
 6989|   360k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   360k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 360k]
  |  |  ------------------
  ------------------
 6990|      0|            handler.on_error("Missing '}' in format string");
 6991|      0|            return begin;
 6992|      0|        }
 6993|       |
 6994|   360k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6994:13): [True: 0, False: 360k]
  ------------------
 6995|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6996|      0|        }
 6997|   360k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6997:18): [True: 360k, False: 0]
  ------------------
 6998|   360k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   360k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 360k]
  |  |  ------------------
  ------------------
 6999|      0|                handler.on_error("Unexpected end of replacement field");
 7000|      0|                return begin;
 7001|      0|            }
 7002|   360k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7003|   360k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   720k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.4k, False: 335k]
  |  |  |  Branch (859:45): [True: 0, False: 360k]
  |  |  |  Branch (859:45): [True: 25.4k, False: 335k]
  |  |  ------------------
  ------------------
 7004|  25.4k|                handler.on_error("Unknown format specifier");
 7005|  25.4k|                return begin;
 7006|  25.4k|            }
 7007|   360k|        }
 7008|      0|        else {
 7009|      0|            SCN_UNLIKELY_ATTR
 7010|      0|            handler.on_error("Missing '}' in format string");
 7011|      0|            return begin;
 7012|      0|        }
 7013|   360k|    }
 7014|   335k|    return begin + 1;
 7015|   360k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8049|   721k|    {
 8050|   721k|        return m_args.get(id);
 8051|   721k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8059|   670k|    {
 8060|   670k|        return m_locale;
 8061|   670k|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5575|   721k|    {
 5576|   721k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   721k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 721k]
  |  |  ------------------
  ------------------
 5577|      0|            on_error(
 5578|      0|                "Cannot switch from manual to automatic argument indexing");
 5579|      0|            return 0;
 5580|      0|        }
 5581|       |
 5582|   721k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5583|   721k|        do_check_arg_id(id);
 5584|   721k|        return id;
 5585|   721k|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6063|   721k|{
 6064|   721k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6064:9): [Folded - Ignored]
  ------------------
 6065|   721k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6065:10): [Folded - Ignored]
  |  Branch (6065:22): [Folded - Ignored]
  ------------------
 6066|       |        // The cast below will cause an error on gcc pre-12
 6067|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6068|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6068:13): [True: 0, False: 0]
  ------------------
 6069|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6070|      0|            SCN_UNLIKELY_ATTR
 6071|      0|            on_error("Argument not found");
 6072|      0|        }
 6073|      0|    }
 6074|   721k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6453|   360k|{
 6454|   360k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   360k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   360k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6455|   360k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6455:9): [True: 360k, False: 0]
  |  Branch (6455:26): [True: 0, False: 360k]
  ------------------
 6456|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6457|      0|    }
 6458|       |
 6459|   360k|    handler();
 6460|   360k|    return begin;
 6461|   360k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6955|   360k|        {
 6956|   360k|            arg_id = handler.on_arg_id();
 6957|   360k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5261|  1.44M|    {
 5262|  1.44M|        return m_type;
 5263|  1.44M|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5570|   670k|    {
 5571|   670k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5572|   670k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5559|  1.39M|    {
 5560|  1.39M|        return m_format.data();
 5561|  1.39M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7131|   360k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   360k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7132|   360k|    {
 7133|   360k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   360k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   360k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7134|   360k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6868|   360k|{
 6869|   360k|    auto do_presentation = [&]() -> const CharT* {
 6870|   360k|        if (*begin == CharT{'['}) {
 6871|   360k|            auto set = parse_presentation_set(begin, end, handler);
 6872|   360k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6873|       |                // clang-format off
 6874|   360k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|   360k|                return begin;
 6877|   360k|            }
 6878|   360k|            handler.on_character_set_string(set);
 6879|   360k|            return begin;
 6880|   360k|        }
 6881|   360k|        if (*begin == CharT{'/'}) {
 6882|   360k|            return parse_presentation_regex(begin, end, handler);
 6883|   360k|        }
 6884|   360k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   360k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6886|   360k|            handler.on_error("Invalid type specifier in format string");
 6887|   360k|            return begin;
 6888|   360k|        }
 6889|   360k|        handler.on_type(type);
 6890|   360k|        return begin;
 6891|   360k|    };
 6892|       |
 6893|   360k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6893:9): [True: 360k, False: 0]
  |  Branch (6893:28): [True: 343k, False: 16.9k]
  ------------------
 6894|   360k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6894:9): [True: 335k, False: 8.47k]
  |  Branch (6894:36): [True: 270k, False: 64.7k]
  ------------------
 6895|   270k|        return do_presentation();
 6896|   270k|    }
 6897|       |
 6898|  90.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  90.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 90.1k]
  |  |  ------------------
  ------------------
 6899|      0|        handler.on_error("Unexpected end of format string");
 6900|      0|        return begin;
 6901|      0|    }
 6902|       |
 6903|  90.1k|    begin = parse_align(begin, end, handler);
 6904|  90.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  90.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 90.1k]
  |  |  ------------------
  ------------------
 6905|      0|        handler.on_error("Unexpected end of format string");
 6906|      0|        return begin;
 6907|      0|    }
 6908|       |
 6909|  90.1k|    begin = parse_width(begin, end, handler);
 6910|  90.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  90.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 90.1k]
  |  |  ------------------
  ------------------
 6911|      0|        handler.on_error("Unexpected end of format string");
 6912|      0|        return begin;
 6913|      0|    }
 6914|       |
 6915|  90.1k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6915:9): [True: 0, False: 90.1k]
  ------------------
 6916|      0|        ++begin;
 6917|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6918|      0|            handler.on_error("Unexpected end of format string");
 6919|      0|            return begin;
 6920|      0|        }
 6921|      0|        begin = parse_precision(begin, end, handler);
 6922|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6923|      0|            handler.on_error("Unexpected end of format string");
 6924|      0|            return begin;
 6925|      0|        }
 6926|      0|    }
 6927|       |
 6928|  90.1k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6928:9): [True: 64.7k, False: 25.4k]
  ------------------
 6929|  64.7k|        handler.on_localized();
 6930|  64.7k|        ++begin;
 6931|  64.7k|    }
 6932|  90.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  90.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 90.1k]
  |  |  ------------------
  ------------------
 6933|      0|        handler.on_error("Unexpected end of format string");
 6934|      0|        return begin;
 6935|      0|    }
 6936|       |
 6937|  90.1k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6937:9): [True: 90.1k, False: 0]
  |  Branch (6937:25): [True: 25.4k, False: 64.7k]
  ------------------
 6938|  25.4k|        do_presentation();
 6939|  25.4k|    }
 6940|  90.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  90.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 90.1k]
  |  |  ------------------
  ------------------
 6941|      0|        handler.on_error("Unexpected end of format string");
 6942|      0|        return begin;
 6943|      0|    }
 6944|       |
 6945|  90.1k|    return begin;
 6946|  90.1k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6517|   687k|{
 6518|   687k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6518:13): [True: 540k, False: 146k]
  |  Branch (6518:33): [True: 540k, False: 0]
  ------------------
 6519|   687k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6519:13): [True: 129k, False: 16.9k]
  |  Branch (6519:33): [True: 129k, False: 0]
  ------------------
 6520|   687k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6869|   295k|    auto do_presentation = [&]() -> const CharT* {
 6870|   295k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 295k]
  ------------------
 6871|      0|            auto set = parse_presentation_set(begin, end, handler);
 6872|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6873|       |                // clang-format off
 6874|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|      0|                return begin;
 6877|      0|            }
 6878|      0|            handler.on_character_set_string(set);
 6879|      0|            return begin;
 6880|      0|        }
 6881|   295k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6881:13): [True: 0, False: 295k]
  ------------------
 6882|      0|            return parse_presentation_regex(begin, end, handler);
 6883|      0|        }
 6884|   295k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   295k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   295k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.9k, False: 278k]
  |  |  ------------------
  ------------------
 6886|  16.9k|            handler.on_error("Invalid type specifier in format string");
 6887|  16.9k|            return begin;
 6888|  16.9k|        }
 6889|   278k|        handler.on_type(type);
 6890|   278k|        return begin;
 6891|   295k|    };
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6465|   591k|{
 6466|   591k|    switch (type) {
 6467|  45.4k|        case 'b':
  ------------------
  |  Branch (6467:9): [True: 45.4k, False: 546k]
  ------------------
 6468|  62.4k|        case 'B':
  ------------------
  |  Branch (6468:9): [True: 16.9k, False: 574k]
  ------------------
 6469|  62.4k|            return presentation_type::int_binary;
 6470|   129k|        case 'd':
  ------------------
  |  Branch (6470:9): [True: 129k, False: 462k]
  ------------------
 6471|   129k|            return presentation_type::int_decimal;
 6472|   147k|        case 'i':
  ------------------
  |  Branch (6472:9): [True: 147k, False: 444k]
  ------------------
 6473|   147k|            return presentation_type::int_generic;
 6474|      0|        case 'u':
  ------------------
  |  Branch (6474:9): [True: 0, False: 591k]
  ------------------
 6475|      0|            return presentation_type::int_unsigned_decimal;
 6476|  81.3k|        case 'o':
  ------------------
  |  Branch (6476:9): [True: 81.3k, False: 510k]
  ------------------
 6477|  81.3k|            return presentation_type::int_octal;
 6478|   137k|        case 'x':
  ------------------
  |  Branch (6478:9): [True: 137k, False: 454k]
  ------------------
 6479|   137k|        case 'X':
  ------------------
  |  Branch (6479:9): [True: 0, False: 591k]
  ------------------
 6480|   137k|            return presentation_type::int_hex;
 6481|      0|        case 'r':
  ------------------
  |  Branch (6481:9): [True: 0, False: 591k]
  ------------------
 6482|      0|        case 'R':
  ------------------
  |  Branch (6482:9): [True: 0, False: 591k]
  ------------------
 6483|      0|            return presentation_type::int_arbitrary_base;
 6484|      0|        case 'a':
  ------------------
  |  Branch (6484:9): [True: 0, False: 591k]
  ------------------
 6485|      0|        case 'A':
  ------------------
  |  Branch (6485:9): [True: 0, False: 591k]
  ------------------
 6486|      0|            return presentation_type::float_hex;
 6487|      0|        case 'e':
  ------------------
  |  Branch (6487:9): [True: 0, False: 591k]
  ------------------
 6488|      0|        case 'E':
  ------------------
  |  Branch (6488:9): [True: 0, False: 591k]
  ------------------
 6489|      0|            return presentation_type::float_scientific;
 6490|      0|        case 'f':
  ------------------
  |  Branch (6490:9): [True: 0, False: 591k]
  ------------------
 6491|      0|        case 'F':
  ------------------
  |  Branch (6491:9): [True: 0, False: 591k]
  ------------------
 6492|      0|            return presentation_type::float_fixed;
 6493|      0|        case 'g':
  ------------------
  |  Branch (6493:9): [True: 0, False: 591k]
  ------------------
 6494|      0|        case 'G':
  ------------------
  |  Branch (6494:9): [True: 0, False: 591k]
  ------------------
 6495|      0|            return presentation_type::float_general;
 6496|      0|        case 's':
  ------------------
  |  Branch (6496:9): [True: 0, False: 591k]
  ------------------
 6497|      0|            return presentation_type::string;
 6498|      0|        case 'c':
  ------------------
  |  Branch (6498:9): [True: 0, False: 591k]
  ------------------
 6499|      0|            return presentation_type::character;
 6500|      0|        case '?':
  ------------------
  |  Branch (6500:9): [True: 0, False: 591k]
  ------------------
 6501|      0|            return presentation_type::escaped_character;
 6502|      0|        case 'p':
  ------------------
  |  Branch (6502:9): [True: 0, False: 591k]
  ------------------
 6503|      0|            return presentation_type::pointer;
 6504|      0|        case '[':
  ------------------
  |  Branch (6504:9): [True: 0, False: 591k]
  ------------------
 6505|      0|        case '/':
  ------------------
  |  Branch (6505:9): [True: 0, False: 591k]
  ------------------
 6506|       |            // Should be handled by parse_presentation_set and
 6507|       |            // parse_presentation_regex
 6508|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6509|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6510|  33.8k|        default:
  ------------------
  |  Branch (6510:9): [True: 33.8k, False: 557k]
  ------------------
 6511|  33.8k|            return presentation_type::none;
 6512|   591k|    }
 6513|   591k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6542|  90.1k|{
 6543|  90.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  90.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  90.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6544|       |
 6545|  90.1k|    auto check_align = [](wchar_t ch) {
 6546|  90.1k|        switch (ch) {
 6547|  90.1k|            case L'<':
 6548|  90.1k|                return align_type::left;
 6549|  90.1k|            case L'>':
 6550|  90.1k|                return align_type::right;
 6551|  90.1k|            case L'^':
 6552|  90.1k|                return align_type::center;
 6553|  90.1k|            default:
 6554|  90.1k|                return align_type::none;
 6555|  90.1k|        }
 6556|  90.1k|    };
 6557|       |
 6558|  90.1k|    auto potential_fill_len = code_point_length(begin, end);
 6559|  90.1k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   180k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 90.1k]
  |  |  |  Branch (859:45): [True: 0, False: 90.1k]
  |  |  |  Branch (859:45): [True: 0, False: 90.1k]
  |  |  ------------------
  ------------------
 6560|  90.1k|                     std::distance(begin, end) < potential_fill_len)) {
 6561|      0|        handler.on_error("Invalid encoding in fill character");
 6562|      0|        return begin;
 6563|      0|    }
 6564|       |
 6565|  90.1k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6566|       |
 6567|  90.1k|    auto potential_fill = std::basic_string_view<CharT>{
 6568|  90.1k|        begin, static_cast<size_t>(potential_fill_len)};
 6569|  90.1k|    const auto begin_before_fill = begin;
 6570|  90.1k|    begin += potential_fill_len;
 6571|       |
 6572|  90.1k|    if (begin == end) {
  ------------------
  |  Branch (6572:9): [True: 0, False: 90.1k]
  ------------------
 6573|      0|        return begin_before_fill;
 6574|      0|    }
 6575|       |
 6576|  90.1k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6577|  90.1k|    const auto begin_after_fill = begin;
 6578|  90.1k|    ++begin;
 6579|       |
 6580|  90.1k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6580:9): [True: 90.1k, False: 0]
  ------------------
 6581|  90.1k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  90.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 90.1k]
  |  |  ------------------
  ------------------
 6582|      0|            handler.on_error("Invalid fill character '{' in format string");
 6583|      0|            return begin;
 6584|      0|        }
 6585|  90.1k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6585:13): [True: 0, False: 90.1k]
  ------------------
 6586|      0|            return begin_before_fill;
 6587|      0|        }
 6588|  90.1k|    }
 6589|       |
 6590|  90.1k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6590:9): [True: 90.1k, False: 0]
  ------------------
 6591|  90.1k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6591:13): [True: 0, False: 90.1k]
  ------------------
 6592|      0|            handler.on_align(potential_align_on_fill);
 6593|      0|            return begin_after_fill;
 6594|      0|        }
 6595|  90.1k|        return begin_before_fill;
 6596|  90.1k|    }
 6597|       |
 6598|      0|    handler.on_fill(potential_fill);
 6599|      0|    handler.on_align(potential_align_after_fill);
 6600|      0|    return begin;
 6601|  90.1k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6524|   180k|{
 6525|   180k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   180k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   180k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6526|       |    if constexpr (sizeof(CharT) != 1) {
 6527|       |        return 1;
 6528|       |    }
 6529|   180k|    else {
 6530|   180k|        const auto lengths =
 6531|   180k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6532|   180k|            "\3\4";
 6533|   180k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6534|   180k|        return len;
 6535|   180k|    }
 6536|   180k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6545|   180k|    auto check_align = [](wchar_t ch) {
 6546|   180k|        switch (ch) {
 6547|      0|            case L'<':
  ------------------
  |  Branch (6547:13): [True: 0, False: 180k]
  ------------------
 6548|      0|                return align_type::left;
 6549|      0|            case L'>':
  ------------------
  |  Branch (6549:13): [True: 0, False: 180k]
  ------------------
 6550|      0|                return align_type::right;
 6551|      0|            case L'^':
  ------------------
  |  Branch (6551:13): [True: 0, False: 180k]
  ------------------
 6552|      0|                return align_type::center;
 6553|   180k|            default:
  ------------------
  |  Branch (6553:13): [True: 180k, False: 0]
  ------------------
 6554|   180k|                return align_type::none;
 6555|   180k|        }
 6556|   180k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6607|  90.1k|{
 6608|  90.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  90.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  90.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6609|       |
 6610|  90.1k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6610:9): [True: 73.2k, False: 16.9k]
  |  Branch (6610:33): [True: 0, False: 73.2k]
  ------------------
 6611|      0|        int width = parse_simple_int(begin, end);
 6612|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6613|      0|            handler.on_width(width);
 6614|      0|        }
 6615|      0|        else {
 6616|      0|            handler.on_error("Invalid field width");
 6617|      0|            return begin;
 6618|      0|        }
 6619|      0|    }
 6620|  90.1k|    return begin;
 6621|  90.1k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7137|  64.7k|    {
 7138|  64.7k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7139|  64.7k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7139:13): [True: 28.9k, False: 35.8k]
  ------------------
 7140|  64.7k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7140:13): [True: 0, False: 28.9k]
  ------------------
 7141|  64.7k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7141:13): [True: 0, False: 0]
  ------------------
 7142|  64.7k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7142:13): [True: 0, False: 0]
  ------------------
 7143|      0|            SCN_UNLIKELY_ATTR
 7144|       |            // clang-format off
 7145|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7146|       |            // clang-format on
 7147|      0|        }
 7148|       |
 7149|  64.7k|        Handler::on_localized();
 7150|  64.7k|    }
_ZN3scn2v36detail12specs_setter12on_localizedILb1EEEvv:
 6282|   164k|    {
 6283|   164k|        if constexpr (!SCN_DISABLE_LOCALE) {
 6284|   164k|            m_specs.localized = true;
 6285|       |        }
 6286|       |        else {
 6287|       |            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 6288|       |        }
 6289|   164k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|   335k|{
 8428|   335k|#define SCN_VISIT(Type)                                         \
 8429|   335k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|   335k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|   335k|    }                                                           \
 8432|   335k|    else {                                                      \
 8433|   335k|        return vis(monostate_val);                              \
 8434|   335k|    }
 8435|       |
 8436|   335k|    monostate monostate_val{};
 8437|       |
 8438|   335k|    switch (arg.m_type) {
 8439|  54.0k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 54.0k, False: 280k]
  ------------------
 8440|  54.0k|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|  54.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  54.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  54.0k|    }                                                           \
  |  | 8432|  54.0k|    else {                                                      \
  |  | 8433|  54.0k|        return vis(monostate_val);                              \
  |  | 8434|  54.0k|    }
  ------------------
 8441|  54.0k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 335k]
  ------------------
 8442|  54.0k|            SCN_VISIT(short);
  ------------------
  |  | 8429|  54.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  54.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  54.0k|    }                                                           \
  |  | 8432|  54.0k|    else {                                                      \
  |  | 8433|  54.0k|        return vis(monostate_val);                              \
  |  | 8434|  54.0k|    }
  ------------------
 8443|   118k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 63.9k, False: 271k]
  ------------------
 8444|   118k|            SCN_VISIT(int);
  ------------------
  |  | 8429|   118k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   118k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   118k|    }                                                           \
  |  | 8432|   118k|    else {                                                      \
  |  | 8433|   118k|        return vis(monostate_val);                              \
  |  | 8434|   118k|    }
  ------------------
 8445|   118k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 335k]
  ------------------
 8446|   118k|            SCN_VISIT(long);
  ------------------
  |  | 8429|   118k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   118k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   118k|    }                                                           \
  |  | 8432|   118k|    else {                                                      \
  |  | 8433|   118k|        return vis(monostate_val);                              \
  |  | 8434|   118k|    }
  ------------------
 8447|   183k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 65.1k, False: 269k]
  ------------------
 8448|   183k|            SCN_VISIT(long long);
  ------------------
  |  | 8429|   183k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   183k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   183k|    }                                                           \
  |  | 8432|   183k|    else {                                                      \
  |  | 8433|   183k|        return vis(monostate_val);                              \
  |  | 8434|   183k|    }
  ------------------
 8449|   230k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 47.6k, False: 287k]
  ------------------
 8450|   230k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|   230k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   230k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   230k|    }                                                           \
  |  | 8432|   230k|    else {                                                      \
  |  | 8433|   230k|        return vis(monostate_val);                              \
  |  | 8434|   230k|    }
  ------------------
 8451|   230k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 335k]
  ------------------
 8452|   230k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|   230k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   230k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   230k|    }                                                           \
  |  | 8432|   230k|    else {                                                      \
  |  | 8433|   230k|        return vis(monostate_val);                              \
  |  | 8434|   230k|    }
  ------------------
 8453|   282k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 51.8k, False: 283k]
  ------------------
 8454|   282k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|   282k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   282k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   282k|    }                                                           \
  |  | 8432|   282k|    else {                                                      \
  |  | 8433|   282k|        return vis(monostate_val);                              \
  |  | 8434|   282k|    }
  ------------------
 8455|   282k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 335k]
  ------------------
 8456|   282k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|   282k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   282k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   282k|    }                                                           \
  |  | 8432|   282k|    else {                                                      \
  |  | 8433|   282k|        return vis(monostate_val);                              \
  |  | 8434|   282k|    }
  ------------------
 8457|   335k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 52.3k, False: 282k]
  ------------------
 8458|   335k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|   335k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   335k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   335k|    }                                                           \
  |  | 8432|   335k|    else {                                                      \
  |  | 8433|   335k|        return vis(monostate_val);                              \
  |  | 8434|   335k|    }
  ------------------
 8459|   335k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 335k]
  ------------------
 8460|   335k|            SCN_VISIT(void*);
  ------------------
  |  | 8429|   335k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   335k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   335k|    }                                                           \
  |  | 8432|   335k|    else {                                                      \
  |  | 8433|   335k|        return vis(monostate_val);                              \
  |  | 8434|   335k|    }
  ------------------
 8461|   335k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 335k]
  ------------------
 8462|   335k|            SCN_VISIT(bool);
  ------------------
  |  | 8429|   335k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   335k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   335k|    }                                                           \
  |  | 8432|   335k|    else {                                                      \
  |  | 8433|   335k|        return vis(monostate_val);                              \
  |  | 8434|   335k|    }
  ------------------
 8463|   335k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 335k]
  ------------------
 8464|   335k|            SCN_VISIT(char);
  ------------------
  |  | 8429|   335k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   335k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   335k|    }                                                           \
  |  | 8432|   335k|    else {                                                      \
  |  | 8433|   335k|        return vis(monostate_val);                              \
  |  | 8434|   335k|    }
  ------------------
 8465|   335k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 335k]
  ------------------
 8466|   335k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|   335k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   335k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   335k|    }                                                           \
  |  | 8432|   335k|    else {                                                      \
  |  | 8433|   335k|        return vis(monostate_val);                              \
  |  | 8434|   335k|    }
  ------------------
 8467|   335k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 335k]
  ------------------
 8468|   335k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|   335k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   335k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   335k|    }                                                           \
  |  | 8432|   335k|    else {                                                      \
  |  | 8433|   335k|        return vis(monostate_val);                              \
  |  | 8434|   335k|    }
  ------------------
 8469|   335k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 335k]
  ------------------
 8470|   335k|            SCN_VISIT(float);
  ------------------
  |  | 8429|   335k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   335k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   335k|    }                                                           \
  |  | 8432|   335k|    else {                                                      \
  |  | 8433|   335k|        return vis(monostate_val);                              \
  |  | 8434|   335k|    }
  ------------------
 8471|   335k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 335k]
  ------------------
 8472|   335k|            SCN_VISIT(double);
  ------------------
  |  | 8429|   335k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   335k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   335k|    }                                                           \
  |  | 8432|   335k|    else {                                                      \
  |  | 8433|   335k|        return vis(monostate_val);                              \
  |  | 8434|   335k|    }
  ------------------
 8473|   335k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 335k]
  ------------------
 8474|   335k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|   335k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   335k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   335k|    }                                                           \
  |  | 8432|   335k|    else {                                                      \
  |  | 8433|   335k|        return vis(monostate_val);                              \
  |  | 8434|   335k|    }
  ------------------
 8475|   335k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 335k]
  ------------------
 8476|   335k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|   335k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   335k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   335k|    }                                                           \
  |  | 8432|   335k|    else {                                                      \
  |  | 8433|   335k|        return vis(monostate_val);                              \
  |  | 8434|   335k|    }
  ------------------
 8477|   335k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 335k]
  ------------------
 8478|   335k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|   335k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   335k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   335k|    }                                                           \
  |  | 8432|   335k|    else {                                                      \
  |  | 8433|   335k|        return vis(monostate_val);                              \
  |  | 8434|   335k|    }
  ------------------
 8479|   335k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 335k]
  ------------------
 8480|   335k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|   335k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   335k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   335k|    }                                                           \
  |  | 8432|   335k|    else {                                                      \
  |  | 8433|   335k|        return vis(monostate_val);                              \
  |  | 8434|   335k|    }
  ------------------
 8481|   335k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 335k]
  ------------------
 8482|   335k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|   335k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   335k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   335k|    }                                                           \
  |  | 8432|   335k|    else {                                                      \
  |  | 8433|   335k|        return vis(monostate_val);                              \
  |  | 8434|   335k|    }
  ------------------
 8483|   335k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 335k]
  ------------------
 8484|   335k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|   335k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   335k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   335k|    }                                                           \
  |  | 8432|   335k|    else {                                                      \
  |  | 8433|   335k|        return vis(monostate_val);                              \
  |  | 8434|   335k|    }
  ------------------
 8485|   335k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 335k]
  ------------------
 8486|   335k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|   335k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   335k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   335k|    }                                                           \
  |  | 8432|   335k|    else {                                                      \
  |  | 8433|   335k|        return vis(monostate_val);                              \
  |  | 8434|   335k|    }
  ------------------
 8487|       |
 8488|   335k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 335k]
  ------------------
 8489|   335k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|   335k|            return vis(
 8491|   335k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 335k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 335k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|   335k|            SCN_CLANG_POP
 8506|   335k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7054|   360k|{
 7055|   360k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7056|   360k|    handler.check_args_exhausted();
 7057|   360k|    return handler.get_error();
 7058|   360k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7020|   360k|{
 7021|       |    // TODO: memchr fast path with a larger (> 32) format string
 7022|       |
 7023|   360k|    auto begin = format.data();
 7024|   360k|    auto it = begin;
 7025|   360k|    const auto end = format.data() + format.size();
 7026|       |
 7027|   645k|    while (it != end) {
  ------------------
  |  Branch (7027:12): [True: 360k, False: 284k]
  ------------------
 7028|   360k|        const auto ch = *it++;
 7029|   360k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7029:13): [True: 360k, False: 0]
  ------------------
 7030|   360k|            handler.on_literal_text(begin, it - 1);
 7031|       |
 7032|   360k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7033|   360k|            if (!handler) {
  ------------------
  |  Branch (7033:17): [True: 76.2k, False: 284k]
  ------------------
 7034|  76.2k|                return;
 7035|  76.2k|            }
 7036|   360k|        }
 7037|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7037:18): [True: 0, False: 0]
  ------------------
 7038|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7039|      0|                handler.on_error("Unmatched '}' in format string");
 7040|      0|                return;
 7041|      0|            }
 7042|       |
 7043|      0|            handler.on_literal_text(begin, it);
 7044|      0|            begin = ++it;
 7045|      0|        }
 7046|   360k|    }
 7047|       |
 7048|   284k|    handler.on_literal_text(begin, end);
 7049|   284k|}
_ZN3scn2v318basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
 8185|   284k|    {
 8186|   284k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   284k|    static_cast<    \
  |  |  929|   284k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8187|   284k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 6952|   360k|{
 6953|   360k|    struct id_adapter {
 6954|   360k|        constexpr void operator()()
 6955|   360k|        {
 6956|   360k|            arg_id = handler.on_arg_id();
 6957|   360k|        }
 6958|   360k|        constexpr void operator()(std::size_t id)
 6959|   360k|        {
 6960|   360k|            arg_id = handler.on_arg_id(id);
 6961|   360k|        }
 6962|       |
 6963|   360k|        constexpr void on_error(const char* msg)
 6964|   360k|        {
 6965|   360k|            SCN_UNLIKELY_ATTR
 6966|   360k|            handler.on_error(msg);
 6967|   360k|        }
 6968|       |
 6969|   360k|        Handler& handler;
 6970|   360k|        std::size_t arg_id;
 6971|   360k|    };
 6972|       |
 6973|   360k|    ++begin;
 6974|   360k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   360k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 360k]
  |  |  ------------------
  ------------------
 6975|      0|        handler.on_error("Unexpected end of replacement field");
 6976|      0|        return begin;
 6977|      0|    }
 6978|       |
 6979|   360k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:9): [True: 0, False: 360k]
  ------------------
 6980|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6981|      0|    }
 6982|   360k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6982:14): [True: 0, False: 360k]
  ------------------
 6983|      0|        handler.on_literal_text(begin, begin + 1);
 6984|      0|    }
 6985|   360k|    else {
 6986|   360k|        auto adapter = id_adapter{handler, 0};
 6987|   360k|        begin = parse_arg_id(begin, end, adapter);
 6988|       |
 6989|   360k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   360k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 360k]
  |  |  ------------------
  ------------------
 6990|      0|            handler.on_error("Missing '}' in format string");
 6991|      0|            return begin;
 6992|      0|        }
 6993|       |
 6994|   360k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6994:13): [True: 0, False: 360k]
  ------------------
 6995|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6996|      0|        }
 6997|   360k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6997:18): [True: 360k, False: 0]
  ------------------
 6998|   360k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   360k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 360k]
  |  |  ------------------
  ------------------
 6999|      0|                handler.on_error("Unexpected end of replacement field");
 7000|      0|                return begin;
 7001|      0|            }
 7002|   360k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7003|   360k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   721k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.4k, False: 335k]
  |  |  |  Branch (859:45): [True: 0, False: 360k]
  |  |  |  Branch (859:45): [True: 25.4k, False: 335k]
  |  |  ------------------
  ------------------
 7004|  25.4k|                handler.on_error("Unknown format specifier");
 7005|  25.4k|                return begin;
 7006|  25.4k|            }
 7007|   360k|        }
 7008|      0|        else {
 7009|      0|            SCN_UNLIKELY_ATTR
 7010|      0|            handler.on_error("Missing '}' in format string");
 7011|      0|            return begin;
 7012|      0|        }
 7013|   360k|    }
 7014|   335k|    return begin + 1;
 7015|   360k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6453|   360k|{
 6454|   360k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   360k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   360k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6455|   360k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6455:9): [True: 360k, False: 0]
  |  Branch (6455:26): [True: 0, False: 360k]
  ------------------
 6456|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6457|      0|    }
 6458|       |
 6459|   360k|    handler();
 6460|   360k|    return begin;
 6461|   360k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6955|   360k|        {
 6956|   360k|            arg_id = handler.on_arg_id();
 6957|   360k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7131|   360k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   360k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7132|   360k|    {
 7133|   360k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   360k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   360k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7134|   360k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6868|   360k|{
 6869|   360k|    auto do_presentation = [&]() -> const CharT* {
 6870|   360k|        if (*begin == CharT{'['}) {
 6871|   360k|            auto set = parse_presentation_set(begin, end, handler);
 6872|   360k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6873|       |                // clang-format off
 6874|   360k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|   360k|                return begin;
 6877|   360k|            }
 6878|   360k|            handler.on_character_set_string(set);
 6879|   360k|            return begin;
 6880|   360k|        }
 6881|   360k|        if (*begin == CharT{'/'}) {
 6882|   360k|            return parse_presentation_regex(begin, end, handler);
 6883|   360k|        }
 6884|   360k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   360k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6886|   360k|            handler.on_error("Invalid type specifier in format string");
 6887|   360k|            return begin;
 6888|   360k|        }
 6889|   360k|        handler.on_type(type);
 6890|   360k|        return begin;
 6891|   360k|    };
 6892|       |
 6893|   360k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6893:9): [True: 360k, False: 0]
  |  Branch (6893:28): [True: 343k, False: 16.9k]
  ------------------
 6894|   360k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6894:9): [True: 335k, False: 8.47k]
  |  Branch (6894:36): [True: 270k, False: 64.8k]
  ------------------
 6895|   270k|        return do_presentation();
 6896|   270k|    }
 6897|       |
 6898|  90.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  90.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 90.2k]
  |  |  ------------------
  ------------------
 6899|      0|        handler.on_error("Unexpected end of format string");
 6900|      0|        return begin;
 6901|      0|    }
 6902|       |
 6903|  90.2k|    begin = parse_align(begin, end, handler);
 6904|  90.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  90.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 90.2k]
  |  |  ------------------
  ------------------
 6905|      0|        handler.on_error("Unexpected end of format string");
 6906|      0|        return begin;
 6907|      0|    }
 6908|       |
 6909|  90.2k|    begin = parse_width(begin, end, handler);
 6910|  90.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  90.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 90.2k]
  |  |  ------------------
  ------------------
 6911|      0|        handler.on_error("Unexpected end of format string");
 6912|      0|        return begin;
 6913|      0|    }
 6914|       |
 6915|  90.2k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6915:9): [True: 0, False: 90.2k]
  ------------------
 6916|      0|        ++begin;
 6917|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6918|      0|            handler.on_error("Unexpected end of format string");
 6919|      0|            return begin;
 6920|      0|        }
 6921|      0|        begin = parse_precision(begin, end, handler);
 6922|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6923|      0|            handler.on_error("Unexpected end of format string");
 6924|      0|            return begin;
 6925|      0|        }
 6926|      0|    }
 6927|       |
 6928|  90.2k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6928:9): [True: 64.8k, False: 25.4k]
  ------------------
 6929|  64.8k|        handler.on_localized();
 6930|  64.8k|        ++begin;
 6931|  64.8k|    }
 6932|  90.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  90.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 90.2k]
  |  |  ------------------
  ------------------
 6933|      0|        handler.on_error("Unexpected end of format string");
 6934|      0|        return begin;
 6935|      0|    }
 6936|       |
 6937|  90.2k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6937:9): [True: 90.2k, False: 0]
  |  Branch (6937:25): [True: 25.4k, False: 64.8k]
  ------------------
 6938|  25.4k|        do_presentation();
 6939|  25.4k|    }
 6940|  90.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  90.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 90.2k]
  |  |  ------------------
  ------------------
 6941|      0|        handler.on_error("Unexpected end of format string");
 6942|      0|        return begin;
 6943|      0|    }
 6944|       |
 6945|  90.2k|    return begin;
 6946|  90.2k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6869|   296k|    auto do_presentation = [&]() -> const CharT* {
 6870|   296k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 296k]
  ------------------
 6871|      0|            auto set = parse_presentation_set(begin, end, handler);
 6872|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6873|       |                // clang-format off
 6874|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|      0|                return begin;
 6877|      0|            }
 6878|      0|            handler.on_character_set_string(set);
 6879|      0|            return begin;
 6880|      0|        }
 6881|   296k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6881:13): [True: 0, False: 296k]
  ------------------
 6882|      0|            return parse_presentation_regex(begin, end, handler);
 6883|      0|        }
 6884|   296k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   296k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   296k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.9k, False: 279k]
  |  |  ------------------
  ------------------
 6886|  16.9k|            handler.on_error("Invalid type specifier in format string");
 6887|  16.9k|            return begin;
 6888|  16.9k|        }
 6889|   279k|        handler.on_type(type);
 6890|   279k|        return begin;
 6891|   296k|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6542|  90.2k|{
 6543|  90.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  90.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  90.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6544|       |
 6545|  90.2k|    auto check_align = [](wchar_t ch) {
 6546|  90.2k|        switch (ch) {
 6547|  90.2k|            case L'<':
 6548|  90.2k|                return align_type::left;
 6549|  90.2k|            case L'>':
 6550|  90.2k|                return align_type::right;
 6551|  90.2k|            case L'^':
 6552|  90.2k|                return align_type::center;
 6553|  90.2k|            default:
 6554|  90.2k|                return align_type::none;
 6555|  90.2k|        }
 6556|  90.2k|    };
 6557|       |
 6558|  90.2k|    auto potential_fill_len = code_point_length(begin, end);
 6559|  90.2k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   180k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 90.2k]
  |  |  |  Branch (859:45): [True: 0, False: 90.2k]
  |  |  |  Branch (859:45): [True: 0, False: 90.2k]
  |  |  ------------------
  ------------------
 6560|  90.2k|                     std::distance(begin, end) < potential_fill_len)) {
 6561|      0|        handler.on_error("Invalid encoding in fill character");
 6562|      0|        return begin;
 6563|      0|    }
 6564|       |
 6565|  90.2k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6566|       |
 6567|  90.2k|    auto potential_fill = std::basic_string_view<CharT>{
 6568|  90.2k|        begin, static_cast<size_t>(potential_fill_len)};
 6569|  90.2k|    const auto begin_before_fill = begin;
 6570|  90.2k|    begin += potential_fill_len;
 6571|       |
 6572|  90.2k|    if (begin == end) {
  ------------------
  |  Branch (6572:9): [True: 0, False: 90.2k]
  ------------------
 6573|      0|        return begin_before_fill;
 6574|      0|    }
 6575|       |
 6576|  90.2k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6577|  90.2k|    const auto begin_after_fill = begin;
 6578|  90.2k|    ++begin;
 6579|       |
 6580|  90.2k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6580:9): [True: 90.2k, False: 0]
  ------------------
 6581|  90.2k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  90.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 90.2k]
  |  |  ------------------
  ------------------
 6582|      0|            handler.on_error("Invalid fill character '{' in format string");
 6583|      0|            return begin;
 6584|      0|        }
 6585|  90.2k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6585:13): [True: 0, False: 90.2k]
  ------------------
 6586|      0|            return begin_before_fill;
 6587|      0|        }
 6588|  90.2k|    }
 6589|       |
 6590|  90.2k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6590:9): [True: 90.2k, False: 0]
  ------------------
 6591|  90.2k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6591:13): [True: 0, False: 90.2k]
  ------------------
 6592|      0|            handler.on_align(potential_align_on_fill);
 6593|      0|            return begin_after_fill;
 6594|      0|        }
 6595|  90.2k|        return begin_before_fill;
 6596|  90.2k|    }
 6597|       |
 6598|      0|    handler.on_fill(potential_fill);
 6599|      0|    handler.on_align(potential_align_after_fill);
 6600|      0|    return begin;
 6601|  90.2k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6545|   180k|    auto check_align = [](wchar_t ch) {
 6546|   180k|        switch (ch) {
 6547|      0|            case L'<':
  ------------------
  |  Branch (6547:13): [True: 0, False: 180k]
  ------------------
 6548|      0|                return align_type::left;
 6549|      0|            case L'>':
  ------------------
  |  Branch (6549:13): [True: 0, False: 180k]
  ------------------
 6550|      0|                return align_type::right;
 6551|      0|            case L'^':
  ------------------
  |  Branch (6551:13): [True: 0, False: 180k]
  ------------------
 6552|      0|                return align_type::center;
 6553|   180k|            default:
  ------------------
  |  Branch (6553:13): [True: 180k, False: 0]
  ------------------
 6554|   180k|                return align_type::none;
 6555|   180k|        }
 6556|   180k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6607|  90.2k|{
 6608|  90.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  90.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  90.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6609|       |
 6610|  90.2k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6610:9): [True: 73.2k, False: 16.9k]
  |  Branch (6610:33): [True: 0, False: 73.2k]
  ------------------
 6611|      0|        int width = parse_simple_int(begin, end);
 6612|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6613|      0|            handler.on_width(width);
 6614|      0|        }
 6615|      0|        else {
 6616|      0|            handler.on_error("Invalid field width");
 6617|      0|            return begin;
 6618|      0|        }
 6619|      0|    }
 6620|  90.2k|    return begin;
 6621|  90.2k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 7137|  64.8k|    {
 7138|  64.8k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7139|  64.8k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7139:13): [True: 28.9k, False: 35.8k]
  ------------------
 7140|  64.8k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7140:13): [True: 0, False: 28.9k]
  ------------------
 7141|  64.8k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7141:13): [True: 0, False: 0]
  ------------------
 7142|  64.8k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7142:13): [True: 0, False: 0]
  ------------------
 7143|      0|            SCN_UNLIKELY_ATTR
 7144|       |            // clang-format off
 7145|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7146|       |            // clang-format on
 7147|      0|        }
 7148|       |
 7149|  64.8k|        Handler::on_localized();
 7150|  64.8k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|   335k|{
 8428|   335k|#define SCN_VISIT(Type)                                         \
 8429|   335k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|   335k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|   335k|    }                                                           \
 8432|   335k|    else {                                                      \
 8433|   335k|        return vis(monostate_val);                              \
 8434|   335k|    }
 8435|       |
 8436|   335k|    monostate monostate_val{};
 8437|       |
 8438|   335k|    switch (arg.m_type) {
 8439|  54.0k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 54.0k, False: 281k]
  ------------------
 8440|  54.0k|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|  54.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  54.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  54.0k|    }                                                           \
  |  | 8432|  54.0k|    else {                                                      \
  |  | 8433|  54.0k|        return vis(monostate_val);                              \
  |  | 8434|  54.0k|    }
  ------------------
 8441|  54.0k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 335k]
  ------------------
 8442|  54.0k|            SCN_VISIT(short);
  ------------------
  |  | 8429|  54.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  54.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  54.0k|    }                                                           \
  |  | 8432|  54.0k|    else {                                                      \
  |  | 8433|  54.0k|        return vis(monostate_val);                              \
  |  | 8434|  54.0k|    }
  ------------------
 8443|   118k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 64.0k, False: 271k]
  ------------------
 8444|   118k|            SCN_VISIT(int);
  ------------------
  |  | 8429|   118k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   118k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   118k|    }                                                           \
  |  | 8432|   118k|    else {                                                      \
  |  | 8433|   118k|        return vis(monostate_val);                              \
  |  | 8434|   118k|    }
  ------------------
 8445|   118k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 335k]
  ------------------
 8446|   118k|            SCN_VISIT(long);
  ------------------
  |  | 8429|   118k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   118k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   118k|    }                                                           \
  |  | 8432|   118k|    else {                                                      \
  |  | 8433|   118k|        return vis(monostate_val);                              \
  |  | 8434|   118k|    }
  ------------------
 8447|   183k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 65.2k, False: 270k]
  ------------------
 8448|   183k|            SCN_VISIT(long long);
  ------------------
  |  | 8429|   183k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   183k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   183k|    }                                                           \
  |  | 8432|   183k|    else {                                                      \
  |  | 8433|   183k|        return vis(monostate_val);                              \
  |  | 8434|   183k|    }
  ------------------
 8449|   231k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 47.7k, False: 287k]
  ------------------
 8450|   231k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|   231k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   231k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   231k|    }                                                           \
  |  | 8432|   231k|    else {                                                      \
  |  | 8433|   231k|        return vis(monostate_val);                              \
  |  | 8434|   231k|    }
  ------------------
 8451|   231k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 335k]
  ------------------
 8452|   231k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|   231k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   231k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   231k|    }                                                           \
  |  | 8432|   231k|    else {                                                      \
  |  | 8433|   231k|        return vis(monostate_val);                              \
  |  | 8434|   231k|    }
  ------------------
 8453|   283k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 51.9k, False: 283k]
  ------------------
 8454|   283k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|   283k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   283k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   283k|    }                                                           \
  |  | 8432|   283k|    else {                                                      \
  |  | 8433|   283k|        return vis(monostate_val);                              \
  |  | 8434|   283k|    }
  ------------------
 8455|   283k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 335k]
  ------------------
 8456|   283k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|   283k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   283k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   283k|    }                                                           \
  |  | 8432|   283k|    else {                                                      \
  |  | 8433|   283k|        return vis(monostate_val);                              \
  |  | 8434|   283k|    }
  ------------------
 8457|   335k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 52.4k, False: 283k]
  ------------------
 8458|   335k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|   335k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   335k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   335k|    }                                                           \
  |  | 8432|   335k|    else {                                                      \
  |  | 8433|   335k|        return vis(monostate_val);                              \
  |  | 8434|   335k|    }
  ------------------
 8459|   335k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 335k]
  ------------------
 8460|   335k|            SCN_VISIT(void*);
  ------------------
  |  | 8429|   335k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   335k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   335k|    }                                                           \
  |  | 8432|   335k|    else {                                                      \
  |  | 8433|   335k|        return vis(monostate_val);                              \
  |  | 8434|   335k|    }
  ------------------
 8461|   335k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 335k]
  ------------------
 8462|   335k|            SCN_VISIT(bool);
  ------------------
  |  | 8429|   335k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   335k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   335k|    }                                                           \
  |  | 8432|   335k|    else {                                                      \
  |  | 8433|   335k|        return vis(monostate_val);                              \
  |  | 8434|   335k|    }
  ------------------
 8463|   335k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 335k]
  ------------------
 8464|   335k|            SCN_VISIT(char);
  ------------------
  |  | 8429|   335k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   335k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   335k|    }                                                           \
  |  | 8432|   335k|    else {                                                      \
  |  | 8433|   335k|        return vis(monostate_val);                              \
  |  | 8434|   335k|    }
  ------------------
 8465|   335k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 335k]
  ------------------
 8466|   335k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|   335k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   335k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   335k|    }                                                           \
  |  | 8432|   335k|    else {                                                      \
  |  | 8433|   335k|        return vis(monostate_val);                              \
  |  | 8434|   335k|    }
  ------------------
 8467|   335k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 335k]
  ------------------
 8468|   335k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|   335k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   335k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   335k|    }                                                           \
  |  | 8432|   335k|    else {                                                      \
  |  | 8433|   335k|        return vis(monostate_val);                              \
  |  | 8434|   335k|    }
  ------------------
 8469|   335k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 335k]
  ------------------
 8470|   335k|            SCN_VISIT(float);
  ------------------
  |  | 8429|   335k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   335k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   335k|    }                                                           \
  |  | 8432|   335k|    else {                                                      \
  |  | 8433|   335k|        return vis(monostate_val);                              \
  |  | 8434|   335k|    }
  ------------------
 8471|   335k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 335k]
  ------------------
 8472|   335k|            SCN_VISIT(double);
  ------------------
  |  | 8429|   335k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   335k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   335k|    }                                                           \
  |  | 8432|   335k|    else {                                                      \
  |  | 8433|   335k|        return vis(monostate_val);                              \
  |  | 8434|   335k|    }
  ------------------
 8473|   335k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 335k]
  ------------------
 8474|   335k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|   335k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   335k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   335k|    }                                                           \
  |  | 8432|   335k|    else {                                                      \
  |  | 8433|   335k|        return vis(monostate_val);                              \
  |  | 8434|   335k|    }
  ------------------
 8475|   335k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 335k]
  ------------------
 8476|   335k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|   335k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   335k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   335k|    }                                                           \
  |  | 8432|   335k|    else {                                                      \
  |  | 8433|   335k|        return vis(monostate_val);                              \
  |  | 8434|   335k|    }
  ------------------
 8477|   335k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 335k]
  ------------------
 8478|   335k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|   335k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   335k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   335k|    }                                                           \
  |  | 8432|   335k|    else {                                                      \
  |  | 8433|   335k|        return vis(monostate_val);                              \
  |  | 8434|   335k|    }
  ------------------
 8479|   335k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 335k]
  ------------------
 8480|   335k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|   335k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   335k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   335k|    }                                                           \
  |  | 8432|   335k|    else {                                                      \
  |  | 8433|   335k|        return vis(monostate_val);                              \
  |  | 8434|   335k|    }
  ------------------
 8481|   335k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 335k]
  ------------------
 8482|   335k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|   335k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   335k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   335k|    }                                                           \
  |  | 8432|   335k|    else {                                                      \
  |  | 8433|   335k|        return vis(monostate_val);                              \
  |  | 8434|   335k|    }
  ------------------
 8483|   335k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 335k]
  ------------------
 8484|   335k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|   335k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   335k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   335k|    }                                                           \
  |  | 8432|   335k|    else {                                                      \
  |  | 8433|   335k|        return vis(monostate_val);                              \
  |  | 8434|   335k|    }
  ------------------
 8485|   335k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 335k]
  ------------------
 8486|   335k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|   335k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   335k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   335k|    }                                                           \
  |  | 8432|   335k|    else {                                                      \
  |  | 8433|   335k|        return vis(monostate_val);                              \
  |  | 8434|   335k|    }
  ------------------
 8487|       |
 8488|   335k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 335k]
  ------------------
 8489|   335k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|   335k|            return vis(
 8491|   335k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 335k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 335k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|   335k|            SCN_CLANG_POP
 8506|   335k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZN3scn2v36detail17basic_scan_bufferIcE8sync_allEv:
 4083|  88.9k|    {
 4084|  88.9k|        sync(0);
 4085|  88.9k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5475|   344k|    {
 5476|   344k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   344k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 344k]
  |  |  ------------------
  ------------------
 5477|      0|            return max_size();
 5478|      0|        }
 5479|       |
 5480|   344k|        return static_cast<std::size_t>(m_desc &
 5481|   344k|                                        ((1 << detail::packed_arg_bits) - 1));
 5482|   344k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5500|   689k|    {
 5501|   689k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5502|   689k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5443|   344k|    {
 5444|   344k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   344k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 344k]
  |  |  ------------------
  ------------------
 5445|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5446|      0|                return m_args[id];
 5447|      0|            }
 5448|      0|            return {};
 5449|      0|        }
 5450|       |
 5451|   344k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|   344k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 344k]
  |  |  ------------------
  ------------------
 5452|      0|            return {};
 5453|      0|        }
 5454|       |
 5455|   344k|        const auto t = type(id);
 5456|   344k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|   344k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 344k]
  |  |  ------------------
  ------------------
 5457|      0|            return {};
 5458|      0|        }
 5459|       |
 5460|   344k|        basic_scan_arg<Context> arg;
 5461|   344k|        arg.m_type = t;
 5462|   344k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5462:13): [True: 344k, False: 0]
  ------------------
 5463|   344k|            arg.m_value.ref_value = m_builtin_values[id];
 5464|   344k|        }
 5465|      0|        else {
 5466|      0|            arg.m_value = m_values[id];
 5467|      0|        }
 5468|   344k|        return arg;
 5469|   344k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5509|   344k|    {
 5510|       |        // First (0th) index is size, types start after that
 5511|   344k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5512|   344k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5513|   344k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5514|   344k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5504|   344k|    {
 5505|   344k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5506|   344k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5256|   570k|    {
 5257|   570k|        return m_type != detail::arg_type::none_type;
 5258|   570k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|  26.1k|{
 8428|  26.1k|#define SCN_VISIT(Type)                                         \
 8429|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|  26.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|  26.1k|    }                                                           \
 8432|  26.1k|    else {                                                      \
 8433|  26.1k|        return vis(monostate_val);                              \
 8434|  26.1k|    }
 8435|       |
 8436|  26.1k|    monostate monostate_val{};
 8437|       |
 8438|  26.1k|    switch (arg.m_type) {
 8439|  4.34k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 4.34k, False: 21.8k]
  ------------------
 8440|  4.34k|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|  4.34k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  4.34k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  4.34k|    }                                                           \
  |  | 8432|  4.34k|    else {                                                      \
  |  | 8433|  4.34k|        return vis(monostate_val);                              \
  |  | 8434|  4.34k|    }
  ------------------
 8441|  4.34k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 26.1k]
  ------------------
 8442|  4.34k|            SCN_VISIT(short);
  ------------------
  |  | 8429|  4.34k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  4.34k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  4.34k|    }                                                           \
  |  | 8432|  4.34k|    else {                                                      \
  |  | 8433|  4.34k|        return vis(monostate_val);                              \
  |  | 8434|  4.34k|    }
  ------------------
 8443|  8.71k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 4.37k, False: 21.7k]
  ------------------
 8444|  8.71k|            SCN_VISIT(int);
  ------------------
  |  | 8429|  8.71k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  8.71k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  8.71k|    }                                                           \
  |  | 8432|  8.71k|    else {                                                      \
  |  | 8433|  8.71k|        return vis(monostate_val);                              \
  |  | 8434|  8.71k|    }
  ------------------
 8445|  8.71k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 26.1k]
  ------------------
 8446|  8.71k|            SCN_VISIT(long);
  ------------------
  |  | 8429|  8.71k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  8.71k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  8.71k|    }                                                           \
  |  | 8432|  8.71k|    else {                                                      \
  |  | 8433|  8.71k|        return vis(monostate_val);                              \
  |  | 8434|  8.71k|    }
  ------------------
 8447|  13.1k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 4.40k, False: 21.7k]
  ------------------
 8448|  13.1k|            SCN_VISIT(long long);
  ------------------
  |  | 8429|  13.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  13.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  13.1k|    }                                                           \
  |  | 8432|  13.1k|    else {                                                      \
  |  | 8433|  13.1k|        return vis(monostate_val);                              \
  |  | 8434|  13.1k|    }
  ------------------
 8449|  17.4k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 4.32k, False: 21.8k]
  ------------------
 8450|  17.4k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|  17.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  17.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  17.4k|    }                                                           \
  |  | 8432|  17.4k|    else {                                                      \
  |  | 8433|  17.4k|        return vis(monostate_val);                              \
  |  | 8434|  17.4k|    }
  ------------------
 8451|  17.4k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 26.1k]
  ------------------
 8452|  17.4k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|  17.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  17.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  17.4k|    }                                                           \
  |  | 8432|  17.4k|    else {                                                      \
  |  | 8433|  17.4k|        return vis(monostate_val);                              \
  |  | 8434|  17.4k|    }
  ------------------
 8453|  21.7k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 4.34k, False: 21.8k]
  ------------------
 8454|  21.7k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|  21.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  21.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  21.7k|    }                                                           \
  |  | 8432|  21.7k|    else {                                                      \
  |  | 8433|  21.7k|        return vis(monostate_val);                              \
  |  | 8434|  21.7k|    }
  ------------------
 8455|  21.7k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 26.1k]
  ------------------
 8456|  21.7k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|  21.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  21.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  21.7k|    }                                                           \
  |  | 8432|  21.7k|    else {                                                      \
  |  | 8433|  21.7k|        return vis(monostate_val);                              \
  |  | 8434|  21.7k|    }
  ------------------
 8457|  26.1k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 4.36k, False: 21.7k]
  ------------------
 8458|  26.1k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.1k|    }                                                           \
  |  | 8432|  26.1k|    else {                                                      \
  |  | 8433|  26.1k|        return vis(monostate_val);                              \
  |  | 8434|  26.1k|    }
  ------------------
 8459|  26.1k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 26.1k]
  ------------------
 8460|  26.1k|            SCN_VISIT(void*);
  ------------------
  |  | 8429|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.1k|    }                                                           \
  |  | 8432|  26.1k|    else {                                                      \
  |  | 8433|  26.1k|        return vis(monostate_val);                              \
  |  | 8434|  26.1k|    }
  ------------------
 8461|  26.1k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 26.1k]
  ------------------
 8462|  26.1k|            SCN_VISIT(bool);
  ------------------
  |  | 8429|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.1k|    }                                                           \
  |  | 8432|  26.1k|    else {                                                      \
  |  | 8433|  26.1k|        return vis(monostate_val);                              \
  |  | 8434|  26.1k|    }
  ------------------
 8463|  26.1k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 26.1k]
  ------------------
 8464|  26.1k|            SCN_VISIT(char);
  ------------------
  |  | 8429|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.1k|    }                                                           \
  |  | 8432|  26.1k|    else {                                                      \
  |  | 8433|  26.1k|        return vis(monostate_val);                              \
  |  | 8434|  26.1k|    }
  ------------------
 8465|  26.1k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 26.1k]
  ------------------
 8466|  26.1k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.1k|    }                                                           \
  |  | 8432|  26.1k|    else {                                                      \
  |  | 8433|  26.1k|        return vis(monostate_val);                              \
  |  | 8434|  26.1k|    }
  ------------------
 8467|  26.1k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 26.1k]
  ------------------
 8468|  26.1k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.1k|    }                                                           \
  |  | 8432|  26.1k|    else {                                                      \
  |  | 8433|  26.1k|        return vis(monostate_val);                              \
  |  | 8434|  26.1k|    }
  ------------------
 8469|  26.1k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 26.1k]
  ------------------
 8470|  26.1k|            SCN_VISIT(float);
  ------------------
  |  | 8429|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.1k|    }                                                           \
  |  | 8432|  26.1k|    else {                                                      \
  |  | 8433|  26.1k|        return vis(monostate_val);                              \
  |  | 8434|  26.1k|    }
  ------------------
 8471|  26.1k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 26.1k]
  ------------------
 8472|  26.1k|            SCN_VISIT(double);
  ------------------
  |  | 8429|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.1k|    }                                                           \
  |  | 8432|  26.1k|    else {                                                      \
  |  | 8433|  26.1k|        return vis(monostate_val);                              \
  |  | 8434|  26.1k|    }
  ------------------
 8473|  26.1k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 26.1k]
  ------------------
 8474|  26.1k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.1k|    }                                                           \
  |  | 8432|  26.1k|    else {                                                      \
  |  | 8433|  26.1k|        return vis(monostate_val);                              \
  |  | 8434|  26.1k|    }
  ------------------
 8475|  26.1k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 26.1k]
  ------------------
 8476|  26.1k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.1k|    }                                                           \
  |  | 8432|  26.1k|    else {                                                      \
  |  | 8433|  26.1k|        return vis(monostate_val);                              \
  |  | 8434|  26.1k|    }
  ------------------
 8477|  26.1k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 26.1k]
  ------------------
 8478|  26.1k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.1k|    }                                                           \
  |  | 8432|  26.1k|    else {                                                      \
  |  | 8433|  26.1k|        return vis(monostate_val);                              \
  |  | 8434|  26.1k|    }
  ------------------
 8479|  26.1k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 26.1k]
  ------------------
 8480|  26.1k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.1k|    }                                                           \
  |  | 8432|  26.1k|    else {                                                      \
  |  | 8433|  26.1k|        return vis(monostate_val);                              \
  |  | 8434|  26.1k|    }
  ------------------
 8481|  26.1k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 26.1k]
  ------------------
 8482|  26.1k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.1k|    }                                                           \
  |  | 8432|  26.1k|    else {                                                      \
  |  | 8433|  26.1k|        return vis(monostate_val);                              \
  |  | 8434|  26.1k|    }
  ------------------
 8483|  26.1k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 26.1k]
  ------------------
 8484|  26.1k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.1k|    }                                                           \
  |  | 8432|  26.1k|    else {                                                      \
  |  | 8433|  26.1k|        return vis(monostate_val);                              \
  |  | 8434|  26.1k|    }
  ------------------
 8485|  26.1k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 26.1k]
  ------------------
 8486|  26.1k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.1k|    }                                                           \
  |  | 8432|  26.1k|    else {                                                      \
  |  | 8433|  26.1k|        return vis(monostate_val);                              \
  |  | 8434|  26.1k|    }
  ------------------
 8487|       |
 8488|  26.1k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 26.1k]
  ------------------
 8489|  26.1k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|  26.1k|            return vis(
 8491|  26.1k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 26.1k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 26.1k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|  26.1k|            SCN_CLANG_POP
 8506|  26.1k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5553|   310k|        : m_format{format}, m_next_arg_id{next_arg_id}
 5554|   310k|    {
 5555|   310k|    }
_ZN3scn2v318basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8147|   155k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  928|   155k|    static_cast<    \
  |  |  929|   155k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8148|   155k|    {
 8149|   155k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8065|   310k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   310k|    static_cast<    \
  |  |  929|   310k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   310k|    static_cast<    \
  |  |  929|   310k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8066|   310k|    {
 8067|   310k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7054|   155k|{
 7055|   155k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7056|   155k|    handler.check_args_exhausted();
 7057|   155k|    return handler.get_error();
 7058|   155k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7020|   155k|{
 7021|       |    // TODO: memchr fast path with a larger (> 32) format string
 7022|       |
 7023|   155k|    auto begin = format.data();
 7024|   155k|    auto it = begin;
 7025|   155k|    const auto end = format.data() + format.size();
 7026|       |
 7027|   157k|    while (it != end) {
  ------------------
  |  Branch (7027:12): [True: 155k, False: 2.51k]
  ------------------
 7028|   155k|        const auto ch = *it++;
 7029|   155k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7029:13): [True: 155k, False: 0]
  ------------------
 7030|   155k|            handler.on_literal_text(begin, it - 1);
 7031|       |
 7032|   155k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7033|   155k|            if (!handler) {
  ------------------
  |  Branch (7033:17): [True: 152k, False: 2.51k]
  ------------------
 7034|   152k|                return;
 7035|   152k|            }
 7036|   155k|        }
 7037|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7037:18): [True: 0, False: 0]
  ------------------
 7038|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7039|      0|                handler.on_error("Unmatched '}' in format string");
 7040|      0|                return;
 7041|      0|            }
 7042|       |
 7043|      0|            handler.on_literal_text(begin, it);
 7044|      0|            begin = ++it;
 7045|      0|        }
 7046|   155k|    }
 7047|       |
 7048|  2.51k|    handler.on_literal_text(begin, end);
 7049|  2.51k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6952|   155k|{
 6953|   155k|    struct id_adapter {
 6954|   155k|        constexpr void operator()()
 6955|   155k|        {
 6956|   155k|            arg_id = handler.on_arg_id();
 6957|   155k|        }
 6958|   155k|        constexpr void operator()(std::size_t id)
 6959|   155k|        {
 6960|   155k|            arg_id = handler.on_arg_id(id);
 6961|   155k|        }
 6962|       |
 6963|   155k|        constexpr void on_error(const char* msg)
 6964|   155k|        {
 6965|   155k|            SCN_UNLIKELY_ATTR
 6966|   155k|            handler.on_error(msg);
 6967|   155k|        }
 6968|       |
 6969|   155k|        Handler& handler;
 6970|   155k|        std::size_t arg_id;
 6971|   155k|    };
 6972|       |
 6973|   155k|    ++begin;
 6974|   155k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 155k]
  |  |  ------------------
  ------------------
 6975|      0|        handler.on_error("Unexpected end of replacement field");
 6976|      0|        return begin;
 6977|      0|    }
 6978|       |
 6979|   155k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:9): [True: 0, False: 155k]
  ------------------
 6980|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6981|      0|    }
 6982|   155k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6982:14): [True: 0, False: 155k]
  ------------------
 6983|      0|        handler.on_literal_text(begin, begin + 1);
 6984|      0|    }
 6985|   155k|    else {
 6986|   155k|        auto adapter = id_adapter{handler, 0};
 6987|   155k|        begin = parse_arg_id(begin, end, adapter);
 6988|       |
 6989|   155k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 155k]
  |  |  ------------------
  ------------------
 6990|      0|            handler.on_error("Missing '}' in format string");
 6991|      0|            return begin;
 6992|      0|        }
 6993|       |
 6994|   155k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6994:13): [True: 0, False: 155k]
  ------------------
 6995|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6996|      0|        }
 6997|   155k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6997:18): [True: 155k, False: 0]
  ------------------
 6998|   155k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 155k]
  |  |  ------------------
  ------------------
 6999|      0|                handler.on_error("Unexpected end of replacement field");
 7000|      0|                return begin;
 7001|      0|            }
 7002|   155k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7003|   155k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   310k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 50.8k, False: 104k]
  |  |  |  Branch (859:45): [True: 0, False: 155k]
  |  |  |  Branch (859:45): [True: 50.8k, False: 104k]
  |  |  ------------------
  ------------------
 7004|  50.8k|                handler.on_error("Unknown format specifier");
 7005|  50.8k|                return begin;
 7006|  50.8k|            }
 7007|   155k|        }
 7008|      0|        else {
 7009|      0|            SCN_UNLIKELY_ATTR
 7010|      0|            handler.on_error("Missing '}' in format string");
 7011|      0|            return begin;
 7012|      0|        }
 7013|   155k|    }
 7014|   104k|    return begin + 1;
 7015|   155k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8049|   310k|    {
 8050|   310k|        return m_args.get(id);
 8051|   310k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8059|   208k|    {
 8060|   208k|        return m_locale;
 8061|   208k|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5575|   310k|    {
 5576|   310k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   310k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 310k]
  |  |  ------------------
  ------------------
 5577|      0|            on_error(
 5578|      0|                "Cannot switch from manual to automatic argument indexing");
 5579|      0|            return 0;
 5580|      0|        }
 5581|       |
 5582|   310k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5583|   310k|        do_check_arg_id(id);
 5584|   310k|        return id;
 5585|   310k|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6063|   310k|{
 6064|   310k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6064:9): [Folded - Ignored]
  ------------------
 6065|   310k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6065:10): [Folded - Ignored]
  |  Branch (6065:22): [Folded - Ignored]
  ------------------
 6066|       |        // The cast below will cause an error on gcc pre-12
 6067|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6068|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6068:13): [True: 0, False: 0]
  ------------------
 6069|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6070|      0|            SCN_UNLIKELY_ATTR
 6071|      0|            on_error("Argument not found");
 6072|      0|        }
 6073|      0|    }
 6074|   310k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6453|   155k|{
 6454|   155k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   155k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   155k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6455|   155k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6455:9): [True: 155k, False: 0]
  |  Branch (6455:26): [True: 0, False: 155k]
  ------------------
 6456|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6457|      0|    }
 6458|       |
 6459|   155k|    handler();
 6460|   155k|    return begin;
 6461|   155k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6955|   155k|        {
 6956|   155k|            arg_id = handler.on_arg_id();
 6957|   155k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5261|   620k|    {
 5262|   620k|        return m_type;
 5263|   620k|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5570|   208k|    {
 5571|   208k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5572|   208k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE3getEv:
 4352|   181k|{
 4353|   181k|    if (is_contiguous()) {
  ------------------
  |  Branch (4353:9): [True: 0, False: 181k]
  ------------------
 4354|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4355|      0|                                ranges::default_sentinel};
 4356|      0|    }
 4357|   181k|    return ranges::subrange{forward_iterator{this, 0},
 4358|   181k|                            ranges::default_sentinel};
 4359|   181k|}
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4183|   181k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4184|   181k|    {
 4185|   181k|        SCN_EXPECT(parent);
  ------------------
  |  |  924|   181k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   181k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4186|   181k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|   181k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   181k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4187|   181k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5559|   518k|    {
 5560|   518k|        return m_format.data();
 5561|   518k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7131|   155k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   155k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7132|   155k|    {
 7133|   155k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   155k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   155k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7134|   155k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6868|   155k|{
 6869|   155k|    auto do_presentation = [&]() -> const CharT* {
 6870|   155k|        if (*begin == CharT{'['}) {
 6871|   155k|            auto set = parse_presentation_set(begin, end, handler);
 6872|   155k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6873|       |                // clang-format off
 6874|   155k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|   155k|                return begin;
 6877|   155k|            }
 6878|   155k|            handler.on_character_set_string(set);
 6879|   155k|            return begin;
 6880|   155k|        }
 6881|   155k|        if (*begin == CharT{'/'}) {
 6882|   155k|            return parse_presentation_regex(begin, end, handler);
 6883|   155k|        }
 6884|   155k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   155k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6886|   155k|            handler.on_error("Invalid type specifier in format string");
 6887|   155k|            return begin;
 6888|   155k|        }
 6889|   155k|        handler.on_type(type);
 6890|   155k|        return begin;
 6891|   155k|    };
 6892|       |
 6893|   155k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6893:9): [True: 155k, False: 0]
  |  Branch (6893:28): [True: 121k, False: 33.8k]
  ------------------
 6894|   155k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6894:9): [True: 104k, False: 16.9k]
  |  Branch (6894:36): [True: 86.8k, False: 17.3k]
  ------------------
 6895|  86.8k|        return do_presentation();
 6896|  86.8k|    }
 6897|       |
 6898|  68.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  68.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 68.2k]
  |  |  ------------------
  ------------------
 6899|      0|        handler.on_error("Unexpected end of format string");
 6900|      0|        return begin;
 6901|      0|    }
 6902|       |
 6903|  68.2k|    begin = parse_align(begin, end, handler);
 6904|  68.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  68.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 68.2k]
  |  |  ------------------
  ------------------
 6905|      0|        handler.on_error("Unexpected end of format string");
 6906|      0|        return begin;
 6907|      0|    }
 6908|       |
 6909|  68.2k|    begin = parse_width(begin, end, handler);
 6910|  68.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  68.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 68.2k]
  |  |  ------------------
  ------------------
 6911|      0|        handler.on_error("Unexpected end of format string");
 6912|      0|        return begin;
 6913|      0|    }
 6914|       |
 6915|  68.2k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6915:9): [True: 0, False: 68.2k]
  ------------------
 6916|      0|        ++begin;
 6917|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6918|      0|            handler.on_error("Unexpected end of format string");
 6919|      0|            return begin;
 6920|      0|        }
 6921|      0|        begin = parse_precision(begin, end, handler);
 6922|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6923|      0|            handler.on_error("Unexpected end of format string");
 6924|      0|            return begin;
 6925|      0|        }
 6926|      0|    }
 6927|       |
 6928|  68.2k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6928:9): [True: 17.3k, False: 50.8k]
  ------------------
 6929|  17.3k|        handler.on_localized();
 6930|  17.3k|        ++begin;
 6931|  17.3k|    }
 6932|  68.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  68.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 68.2k]
  |  |  ------------------
  ------------------
 6933|      0|        handler.on_error("Unexpected end of format string");
 6934|      0|        return begin;
 6935|      0|    }
 6936|       |
 6937|  68.2k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6937:9): [True: 68.2k, False: 0]
  |  Branch (6937:25): [True: 50.8k, False: 17.3k]
  ------------------
 6938|  50.8k|        do_presentation();
 6939|  50.8k|    }
 6940|  68.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  68.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 68.2k]
  |  |  ------------------
  ------------------
 6941|      0|        handler.on_error("Unexpected end of format string");
 6942|      0|        return begin;
 6943|      0|    }
 6944|       |
 6945|  68.2k|    return begin;
 6946|  68.2k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6517|   242k|{
 6518|   242k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6518:13): [True: 173k, False: 68.6k]
  |  Branch (6518:33): [True: 173k, False: 0]
  ------------------
 6519|   242k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6519:13): [True: 34.7k, False: 33.8k]
  |  Branch (6519:33): [True: 34.7k, False: 0]
  ------------------
 6520|   242k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6869|   137k|    auto do_presentation = [&]() -> const CharT* {
 6870|   137k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 137k]
  ------------------
 6871|      0|            auto set = parse_presentation_set(begin, end, handler);
 6872|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6873|       |                // clang-format off
 6874|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|      0|                return begin;
 6877|      0|            }
 6878|      0|            handler.on_character_set_string(set);
 6879|      0|            return begin;
 6880|      0|        }
 6881|   137k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6881:13): [True: 0, False: 137k]
  ------------------
 6882|      0|            return parse_presentation_regex(begin, end, handler);
 6883|      0|        }
 6884|   137k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   137k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 33.8k, False: 103k]
  |  |  ------------------
  ------------------
 6886|  33.8k|            handler.on_error("Invalid type specifier in format string");
 6887|  33.8k|            return begin;
 6888|  33.8k|        }
 6889|   103k|        handler.on_type(type);
 6890|   103k|        return begin;
 6891|   137k|    };
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6465|   275k|{
 6466|   275k|    switch (type) {
 6467|  34.3k|        case 'b':
  ------------------
  |  Branch (6467:9): [True: 34.3k, False: 240k]
  ------------------
 6468|  68.2k|        case 'B':
  ------------------
  |  Branch (6468:9): [True: 33.8k, False: 241k]
  ------------------
 6469|  68.2k|            return presentation_type::int_binary;
 6470|  34.8k|        case 'd':
  ------------------
  |  Branch (6470:9): [True: 34.8k, False: 240k]
  ------------------
 6471|  34.8k|            return presentation_type::int_decimal;
 6472|  34.8k|        case 'i':
  ------------------
  |  Branch (6472:9): [True: 34.8k, False: 240k]
  ------------------
 6473|  34.8k|            return presentation_type::int_generic;
 6474|      0|        case 'u':
  ------------------
  |  Branch (6474:9): [True: 0, False: 275k]
  ------------------
 6475|      0|            return presentation_type::int_unsigned_decimal;
 6476|  34.4k|        case 'o':
  ------------------
  |  Branch (6476:9): [True: 34.4k, False: 240k]
  ------------------
 6477|  34.4k|            return presentation_type::int_octal;
 6478|  34.9k|        case 'x':
  ------------------
  |  Branch (6478:9): [True: 34.9k, False: 240k]
  ------------------
 6479|  34.9k|        case 'X':
  ------------------
  |  Branch (6479:9): [True: 0, False: 275k]
  ------------------
 6480|  34.9k|            return presentation_type::int_hex;
 6481|      0|        case 'r':
  ------------------
  |  Branch (6481:9): [True: 0, False: 275k]
  ------------------
 6482|      0|        case 'R':
  ------------------
  |  Branch (6482:9): [True: 0, False: 275k]
  ------------------
 6483|      0|            return presentation_type::int_arbitrary_base;
 6484|      0|        case 'a':
  ------------------
  |  Branch (6484:9): [True: 0, False: 275k]
  ------------------
 6485|      0|        case 'A':
  ------------------
  |  Branch (6485:9): [True: 0, False: 275k]
  ------------------
 6486|      0|            return presentation_type::float_hex;
 6487|      0|        case 'e':
  ------------------
  |  Branch (6487:9): [True: 0, False: 275k]
  ------------------
 6488|      0|        case 'E':
  ------------------
  |  Branch (6488:9): [True: 0, False: 275k]
  ------------------
 6489|      0|            return presentation_type::float_scientific;
 6490|      0|        case 'f':
  ------------------
  |  Branch (6490:9): [True: 0, False: 275k]
  ------------------
 6491|      0|        case 'F':
  ------------------
  |  Branch (6491:9): [True: 0, False: 275k]
  ------------------
 6492|      0|            return presentation_type::float_fixed;
 6493|      0|        case 'g':
  ------------------
  |  Branch (6493:9): [True: 0, False: 275k]
  ------------------
 6494|      0|        case 'G':
  ------------------
  |  Branch (6494:9): [True: 0, False: 275k]
  ------------------
 6495|      0|            return presentation_type::float_general;
 6496|      0|        case 's':
  ------------------
  |  Branch (6496:9): [True: 0, False: 275k]
  ------------------
 6497|      0|            return presentation_type::string;
 6498|      0|        case 'c':
  ------------------
  |  Branch (6498:9): [True: 0, False: 275k]
  ------------------
 6499|      0|            return presentation_type::character;
 6500|      0|        case '?':
  ------------------
  |  Branch (6500:9): [True: 0, False: 275k]
  ------------------
 6501|      0|            return presentation_type::escaped_character;
 6502|      0|        case 'p':
  ------------------
  |  Branch (6502:9): [True: 0, False: 275k]
  ------------------
 6503|      0|            return presentation_type::pointer;
 6504|      0|        case '[':
  ------------------
  |  Branch (6504:9): [True: 0, False: 275k]
  ------------------
 6505|      0|        case '/':
  ------------------
  |  Branch (6505:9): [True: 0, False: 275k]
  ------------------
 6506|       |            // Should be handled by parse_presentation_set and
 6507|       |            // parse_presentation_regex
 6508|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6509|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6510|  67.7k|        default:
  ------------------
  |  Branch (6510:9): [True: 67.7k, False: 207k]
  ------------------
 6511|  67.7k|            return presentation_type::none;
 6512|   275k|    }
 6513|   275k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6542|  68.2k|{
 6543|  68.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  68.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  68.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6544|       |
 6545|  68.2k|    auto check_align = [](wchar_t ch) {
 6546|  68.2k|        switch (ch) {
 6547|  68.2k|            case L'<':
 6548|  68.2k|                return align_type::left;
 6549|  68.2k|            case L'>':
 6550|  68.2k|                return align_type::right;
 6551|  68.2k|            case L'^':
 6552|  68.2k|                return align_type::center;
 6553|  68.2k|            default:
 6554|  68.2k|                return align_type::none;
 6555|  68.2k|        }
 6556|  68.2k|    };
 6557|       |
 6558|  68.2k|    auto potential_fill_len = code_point_length(begin, end);
 6559|  68.2k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 68.2k]
  |  |  |  Branch (859:45): [True: 0, False: 68.2k]
  |  |  |  Branch (859:45): [True: 0, False: 68.2k]
  |  |  ------------------
  ------------------
 6560|  68.2k|                     std::distance(begin, end) < potential_fill_len)) {
 6561|      0|        handler.on_error("Invalid encoding in fill character");
 6562|      0|        return begin;
 6563|      0|    }
 6564|       |
 6565|  68.2k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6566|       |
 6567|  68.2k|    auto potential_fill = std::basic_string_view<CharT>{
 6568|  68.2k|        begin, static_cast<size_t>(potential_fill_len)};
 6569|  68.2k|    const auto begin_before_fill = begin;
 6570|  68.2k|    begin += potential_fill_len;
 6571|       |
 6572|  68.2k|    if (begin == end) {
  ------------------
  |  Branch (6572:9): [True: 0, False: 68.2k]
  ------------------
 6573|      0|        return begin_before_fill;
 6574|      0|    }
 6575|       |
 6576|  68.2k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6577|  68.2k|    const auto begin_after_fill = begin;
 6578|  68.2k|    ++begin;
 6579|       |
 6580|  68.2k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6580:9): [True: 68.2k, False: 0]
  ------------------
 6581|  68.2k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  68.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 68.2k]
  |  |  ------------------
  ------------------
 6582|      0|            handler.on_error("Invalid fill character '{' in format string");
 6583|      0|            return begin;
 6584|      0|        }
 6585|  68.2k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6585:13): [True: 0, False: 68.2k]
  ------------------
 6586|      0|            return begin_before_fill;
 6587|      0|        }
 6588|  68.2k|    }
 6589|       |
 6590|  68.2k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6590:9): [True: 68.2k, False: 0]
  ------------------
 6591|  68.2k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6591:13): [True: 0, False: 68.2k]
  ------------------
 6592|      0|            handler.on_align(potential_align_on_fill);
 6593|      0|            return begin_after_fill;
 6594|      0|        }
 6595|  68.2k|        return begin_before_fill;
 6596|  68.2k|    }
 6597|       |
 6598|      0|    handler.on_fill(potential_fill);
 6599|      0|    handler.on_align(potential_align_after_fill);
 6600|      0|    return begin;
 6601|  68.2k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6524|   136k|{
 6525|   136k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   136k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   136k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6526|   136k|    if constexpr (sizeof(CharT) != 1) {
 6527|   136k|        return 1;
 6528|       |    }
 6529|       |    else {
 6530|       |        const auto lengths =
 6531|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6532|       |            "\3\4";
 6533|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6534|       |        return len;
 6535|       |    }
 6536|   136k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6545|   136k|    auto check_align = [](wchar_t ch) {
 6546|   136k|        switch (ch) {
 6547|      0|            case L'<':
  ------------------
  |  Branch (6547:13): [True: 0, False: 136k]
  ------------------
 6548|      0|                return align_type::left;
 6549|      0|            case L'>':
  ------------------
  |  Branch (6549:13): [True: 0, False: 136k]
  ------------------
 6550|      0|                return align_type::right;
 6551|      0|            case L'^':
  ------------------
  |  Branch (6551:13): [True: 0, False: 136k]
  ------------------
 6552|      0|                return align_type::center;
 6553|   136k|            default:
  ------------------
  |  Branch (6553:13): [True: 136k, False: 0]
  ------------------
 6554|   136k|                return align_type::none;
 6555|   136k|        }
 6556|   136k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6607|  68.2k|{
 6608|  68.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  68.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  68.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6609|       |
 6610|  68.2k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6610:9): [True: 34.3k, False: 33.8k]
  |  Branch (6610:33): [True: 0, False: 34.3k]
  ------------------
 6611|      0|        int width = parse_simple_int(begin, end);
 6612|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6613|      0|            handler.on_width(width);
 6614|      0|        }
 6615|      0|        else {
 6616|      0|            handler.on_error("Invalid field width");
 6617|      0|            return begin;
 6618|      0|        }
 6619|      0|    }
 6620|  68.2k|    return begin;
 6621|  68.2k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7137|  17.3k|    {
 7138|  17.3k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7139|  17.3k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7139:13): [True: 8.65k, False: 8.72k]
  ------------------
 7140|  17.3k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7140:13): [True: 0, False: 8.65k]
  ------------------
 7141|  17.3k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7141:13): [True: 0, False: 0]
  ------------------
 7142|  17.3k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7142:13): [True: 0, False: 0]
  ------------------
 7143|      0|            SCN_UNLIKELY_ATTR
 7144|       |            // clang-format off
 7145|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7146|       |            // clang-format on
 7147|      0|        }
 7148|       |
 7149|  17.3k|        Handler::on_localized();
 7150|  17.3k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|   104k|{
 8428|   104k|#define SCN_VISIT(Type)                                         \
 8429|   104k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|   104k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|   104k|    }                                                           \
 8432|   104k|    else {                                                      \
 8433|   104k|        return vis(monostate_val);                              \
 8434|   104k|    }
 8435|       |
 8436|   104k|    monostate monostate_val{};
 8437|       |
 8438|   104k|    switch (arg.m_type) {
 8439|  17.3k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 17.3k, False: 86.8k]
  ------------------
 8440|  17.3k|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|  17.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  17.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  17.3k|    }                                                           \
  |  | 8432|  17.3k|    else {                                                      \
  |  | 8433|  17.3k|        return vis(monostate_val);                              \
  |  | 8434|  17.3k|    }
  ------------------
 8441|  17.3k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 104k]
  ------------------
 8442|  17.3k|            SCN_VISIT(short);
  ------------------
  |  | 8429|  17.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  17.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  17.3k|    }                                                           \
  |  | 8432|  17.3k|    else {                                                      \
  |  | 8433|  17.3k|        return vis(monostate_val);                              \
  |  | 8434|  17.3k|    }
  ------------------
 8443|  34.7k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 17.4k, False: 86.7k]
  ------------------
 8444|  34.7k|            SCN_VISIT(int);
  ------------------
  |  | 8429|  34.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  34.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  34.7k|    }                                                           \
  |  | 8432|  34.7k|    else {                                                      \
  |  | 8433|  34.7k|        return vis(monostate_val);                              \
  |  | 8434|  34.7k|    }
  ------------------
 8445|  34.7k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 104k]
  ------------------
 8446|  34.7k|            SCN_VISIT(long);
  ------------------
  |  | 8429|  34.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  34.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  34.7k|    }                                                           \
  |  | 8432|  34.7k|    else {                                                      \
  |  | 8433|  34.7k|        return vis(monostate_val);                              \
  |  | 8434|  34.7k|    }
  ------------------
 8447|  52.2k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 17.4k, False: 86.6k]
  ------------------
 8448|  52.2k|            SCN_VISIT(long long);
  ------------------
  |  | 8429|  52.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  52.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  52.2k|    }                                                           \
  |  | 8432|  52.2k|    else {                                                      \
  |  | 8433|  52.2k|        return vis(monostate_val);                              \
  |  | 8434|  52.2k|    }
  ------------------
 8449|  69.4k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 17.2k, False: 86.9k]
  ------------------
 8450|  69.4k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|  69.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  69.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  69.4k|    }                                                           \
  |  | 8432|  69.4k|    else {                                                      \
  |  | 8433|  69.4k|        return vis(monostate_val);                              \
  |  | 8434|  69.4k|    }
  ------------------
 8451|  69.4k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 104k]
  ------------------
 8452|  69.4k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|  69.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  69.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  69.4k|    }                                                           \
  |  | 8432|  69.4k|    else {                                                      \
  |  | 8433|  69.4k|        return vis(monostate_val);                              \
  |  | 8434|  69.4k|    }
  ------------------
 8453|  86.7k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 17.3k, False: 86.8k]
  ------------------
 8454|  86.7k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|  86.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  86.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  86.7k|    }                                                           \
  |  | 8432|  86.7k|    else {                                                      \
  |  | 8433|  86.7k|        return vis(monostate_val);                              \
  |  | 8434|  86.7k|    }
  ------------------
 8455|  86.7k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 104k]
  ------------------
 8456|  86.7k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|  86.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  86.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  86.7k|    }                                                           \
  |  | 8432|  86.7k|    else {                                                      \
  |  | 8433|  86.7k|        return vis(monostate_val);                              \
  |  | 8434|  86.7k|    }
  ------------------
 8457|   104k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 17.3k, False: 86.7k]
  ------------------
 8458|   104k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|   104k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   104k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   104k|    }                                                           \
  |  | 8432|   104k|    else {                                                      \
  |  | 8433|   104k|        return vis(monostate_val);                              \
  |  | 8434|   104k|    }
  ------------------
 8459|   104k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 104k]
  ------------------
 8460|   104k|            SCN_VISIT(void*);
  ------------------
  |  | 8429|   104k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   104k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   104k|    }                                                           \
  |  | 8432|   104k|    else {                                                      \
  |  | 8433|   104k|        return vis(monostate_val);                              \
  |  | 8434|   104k|    }
  ------------------
 8461|   104k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 104k]
  ------------------
 8462|   104k|            SCN_VISIT(bool);
  ------------------
  |  | 8429|   104k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   104k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   104k|    }                                                           \
  |  | 8432|   104k|    else {                                                      \
  |  | 8433|   104k|        return vis(monostate_val);                              \
  |  | 8434|   104k|    }
  ------------------
 8463|   104k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 104k]
  ------------------
 8464|   104k|            SCN_VISIT(char);
  ------------------
  |  | 8429|   104k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   104k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   104k|    }                                                           \
  |  | 8432|   104k|    else {                                                      \
  |  | 8433|   104k|        return vis(monostate_val);                              \
  |  | 8434|   104k|    }
  ------------------
 8465|   104k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 104k]
  ------------------
 8466|   104k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|   104k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   104k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   104k|    }                                                           \
  |  | 8432|   104k|    else {                                                      \
  |  | 8433|   104k|        return vis(monostate_val);                              \
  |  | 8434|   104k|    }
  ------------------
 8467|   104k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 104k]
  ------------------
 8468|   104k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|   104k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   104k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   104k|    }                                                           \
  |  | 8432|   104k|    else {                                                      \
  |  | 8433|   104k|        return vis(monostate_val);                              \
  |  | 8434|   104k|    }
  ------------------
 8469|   104k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 104k]
  ------------------
 8470|   104k|            SCN_VISIT(float);
  ------------------
  |  | 8429|   104k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   104k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   104k|    }                                                           \
  |  | 8432|   104k|    else {                                                      \
  |  | 8433|   104k|        return vis(monostate_val);                              \
  |  | 8434|   104k|    }
  ------------------
 8471|   104k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 104k]
  ------------------
 8472|   104k|            SCN_VISIT(double);
  ------------------
  |  | 8429|   104k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   104k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   104k|    }                                                           \
  |  | 8432|   104k|    else {                                                      \
  |  | 8433|   104k|        return vis(monostate_val);                              \
  |  | 8434|   104k|    }
  ------------------
 8473|   104k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 104k]
  ------------------
 8474|   104k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|   104k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   104k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   104k|    }                                                           \
  |  | 8432|   104k|    else {                                                      \
  |  | 8433|   104k|        return vis(monostate_val);                              \
  |  | 8434|   104k|    }
  ------------------
 8475|   104k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 104k]
  ------------------
 8476|   104k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|   104k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   104k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   104k|    }                                                           \
  |  | 8432|   104k|    else {                                                      \
  |  | 8433|   104k|        return vis(monostate_val);                              \
  |  | 8434|   104k|    }
  ------------------
 8477|   104k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 104k]
  ------------------
 8478|   104k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|   104k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   104k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   104k|    }                                                           \
  |  | 8432|   104k|    else {                                                      \
  |  | 8433|   104k|        return vis(monostate_val);                              \
  |  | 8434|   104k|    }
  ------------------
 8479|   104k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 104k]
  ------------------
 8480|   104k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|   104k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   104k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   104k|    }                                                           \
  |  | 8432|   104k|    else {                                                      \
  |  | 8433|   104k|        return vis(monostate_val);                              \
  |  | 8434|   104k|    }
  ------------------
 8481|   104k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 104k]
  ------------------
 8482|   104k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|   104k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   104k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   104k|    }                                                           \
  |  | 8432|   104k|    else {                                                      \
  |  | 8433|   104k|        return vis(monostate_val);                              \
  |  | 8434|   104k|    }
  ------------------
 8483|   104k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 104k]
  ------------------
 8484|   104k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|   104k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   104k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   104k|    }                                                           \
  |  | 8432|   104k|    else {                                                      \
  |  | 8433|   104k|        return vis(monostate_val);                              \
  |  | 8434|   104k|    }
  ------------------
 8485|   104k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 104k]
  ------------------
 8486|   104k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|   104k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   104k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   104k|    }                                                           \
  |  | 8432|   104k|    else {                                                      \
  |  | 8433|   104k|        return vis(monostate_val);                              \
  |  | 8434|   104k|    }
  ------------------
 8487|       |
 8488|   104k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 104k]
  ------------------
 8489|   104k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|   104k|            return vis(
 8491|   104k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 104k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 104k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|   104k|            SCN_CLANG_POP
 8506|   104k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|  26.1k|{
 8428|  26.1k|#define SCN_VISIT(Type)                                         \
 8429|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|  26.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|  26.1k|    }                                                           \
 8432|  26.1k|    else {                                                      \
 8433|  26.1k|        return vis(monostate_val);                              \
 8434|  26.1k|    }
 8435|       |
 8436|  26.1k|    monostate monostate_val{};
 8437|       |
 8438|  26.1k|    switch (arg.m_type) {
 8439|  4.34k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 4.34k, False: 21.8k]
  ------------------
 8440|  4.34k|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|  4.34k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  4.34k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  4.34k|    }                                                           \
  |  | 8432|  4.34k|    else {                                                      \
  |  | 8433|  4.34k|        return vis(monostate_val);                              \
  |  | 8434|  4.34k|    }
  ------------------
 8441|  4.34k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 26.1k]
  ------------------
 8442|  4.34k|            SCN_VISIT(short);
  ------------------
  |  | 8429|  4.34k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  4.34k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  4.34k|    }                                                           \
  |  | 8432|  4.34k|    else {                                                      \
  |  | 8433|  4.34k|        return vis(monostate_val);                              \
  |  | 8434|  4.34k|    }
  ------------------
 8443|  8.71k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 4.37k, False: 21.7k]
  ------------------
 8444|  8.71k|            SCN_VISIT(int);
  ------------------
  |  | 8429|  8.71k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  8.71k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  8.71k|    }                                                           \
  |  | 8432|  8.71k|    else {                                                      \
  |  | 8433|  8.71k|        return vis(monostate_val);                              \
  |  | 8434|  8.71k|    }
  ------------------
 8445|  8.71k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 26.1k]
  ------------------
 8446|  8.71k|            SCN_VISIT(long);
  ------------------
  |  | 8429|  8.71k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  8.71k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  8.71k|    }                                                           \
  |  | 8432|  8.71k|    else {                                                      \
  |  | 8433|  8.71k|        return vis(monostate_val);                              \
  |  | 8434|  8.71k|    }
  ------------------
 8447|  13.1k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 4.40k, False: 21.7k]
  ------------------
 8448|  13.1k|            SCN_VISIT(long long);
  ------------------
  |  | 8429|  13.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  13.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  13.1k|    }                                                           \
  |  | 8432|  13.1k|    else {                                                      \
  |  | 8433|  13.1k|        return vis(monostate_val);                              \
  |  | 8434|  13.1k|    }
  ------------------
 8449|  17.4k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 4.32k, False: 21.8k]
  ------------------
 8450|  17.4k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|  17.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  17.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  17.4k|    }                                                           \
  |  | 8432|  17.4k|    else {                                                      \
  |  | 8433|  17.4k|        return vis(monostate_val);                              \
  |  | 8434|  17.4k|    }
  ------------------
 8451|  17.4k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 26.1k]
  ------------------
 8452|  17.4k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|  17.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  17.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  17.4k|    }                                                           \
  |  | 8432|  17.4k|    else {                                                      \
  |  | 8433|  17.4k|        return vis(monostate_val);                              \
  |  | 8434|  17.4k|    }
  ------------------
 8453|  21.7k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 4.34k, False: 21.8k]
  ------------------
 8454|  21.7k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|  21.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  21.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  21.7k|    }                                                           \
  |  | 8432|  21.7k|    else {                                                      \
  |  | 8433|  21.7k|        return vis(monostate_val);                              \
  |  | 8434|  21.7k|    }
  ------------------
 8455|  21.7k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 26.1k]
  ------------------
 8456|  21.7k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|  21.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  21.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  21.7k|    }                                                           \
  |  | 8432|  21.7k|    else {                                                      \
  |  | 8433|  21.7k|        return vis(monostate_val);                              \
  |  | 8434|  21.7k|    }
  ------------------
 8457|  26.1k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 4.36k, False: 21.7k]
  ------------------
 8458|  26.1k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.1k|    }                                                           \
  |  | 8432|  26.1k|    else {                                                      \
  |  | 8433|  26.1k|        return vis(monostate_val);                              \
  |  | 8434|  26.1k|    }
  ------------------
 8459|  26.1k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 26.1k]
  ------------------
 8460|  26.1k|            SCN_VISIT(void*);
  ------------------
  |  | 8429|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.1k|    }                                                           \
  |  | 8432|  26.1k|    else {                                                      \
  |  | 8433|  26.1k|        return vis(monostate_val);                              \
  |  | 8434|  26.1k|    }
  ------------------
 8461|  26.1k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 26.1k]
  ------------------
 8462|  26.1k|            SCN_VISIT(bool);
  ------------------
  |  | 8429|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.1k|    }                                                           \
  |  | 8432|  26.1k|    else {                                                      \
  |  | 8433|  26.1k|        return vis(monostate_val);                              \
  |  | 8434|  26.1k|    }
  ------------------
 8463|  26.1k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 26.1k]
  ------------------
 8464|  26.1k|            SCN_VISIT(char);
  ------------------
  |  | 8429|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.1k|    }                                                           \
  |  | 8432|  26.1k|    else {                                                      \
  |  | 8433|  26.1k|        return vis(monostate_val);                              \
  |  | 8434|  26.1k|    }
  ------------------
 8465|  26.1k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 26.1k]
  ------------------
 8466|  26.1k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.1k|    }                                                           \
  |  | 8432|  26.1k|    else {                                                      \
  |  | 8433|  26.1k|        return vis(monostate_val);                              \
  |  | 8434|  26.1k|    }
  ------------------
 8467|  26.1k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 26.1k]
  ------------------
 8468|  26.1k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.1k|    }                                                           \
  |  | 8432|  26.1k|    else {                                                      \
  |  | 8433|  26.1k|        return vis(monostate_val);                              \
  |  | 8434|  26.1k|    }
  ------------------
 8469|  26.1k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 26.1k]
  ------------------
 8470|  26.1k|            SCN_VISIT(float);
  ------------------
  |  | 8429|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.1k|    }                                                           \
  |  | 8432|  26.1k|    else {                                                      \
  |  | 8433|  26.1k|        return vis(monostate_val);                              \
  |  | 8434|  26.1k|    }
  ------------------
 8471|  26.1k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 26.1k]
  ------------------
 8472|  26.1k|            SCN_VISIT(double);
  ------------------
  |  | 8429|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.1k|    }                                                           \
  |  | 8432|  26.1k|    else {                                                      \
  |  | 8433|  26.1k|        return vis(monostate_val);                              \
  |  | 8434|  26.1k|    }
  ------------------
 8473|  26.1k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 26.1k]
  ------------------
 8474|  26.1k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.1k|    }                                                           \
  |  | 8432|  26.1k|    else {                                                      \
  |  | 8433|  26.1k|        return vis(monostate_val);                              \
  |  | 8434|  26.1k|    }
  ------------------
 8475|  26.1k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 26.1k]
  ------------------
 8476|  26.1k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.1k|    }                                                           \
  |  | 8432|  26.1k|    else {                                                      \
  |  | 8433|  26.1k|        return vis(monostate_val);                              \
  |  | 8434|  26.1k|    }
  ------------------
 8477|  26.1k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 26.1k]
  ------------------
 8478|  26.1k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.1k|    }                                                           \
  |  | 8432|  26.1k|    else {                                                      \
  |  | 8433|  26.1k|        return vis(monostate_val);                              \
  |  | 8434|  26.1k|    }
  ------------------
 8479|  26.1k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 26.1k]
  ------------------
 8480|  26.1k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.1k|    }                                                           \
  |  | 8432|  26.1k|    else {                                                      \
  |  | 8433|  26.1k|        return vis(monostate_val);                              \
  |  | 8434|  26.1k|    }
  ------------------
 8481|  26.1k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 26.1k]
  ------------------
 8482|  26.1k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.1k|    }                                                           \
  |  | 8432|  26.1k|    else {                                                      \
  |  | 8433|  26.1k|        return vis(monostate_val);                              \
  |  | 8434|  26.1k|    }
  ------------------
 8483|  26.1k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 26.1k]
  ------------------
 8484|  26.1k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.1k|    }                                                           \
  |  | 8432|  26.1k|    else {                                                      \
  |  | 8433|  26.1k|        return vis(monostate_val);                              \
  |  | 8434|  26.1k|    }
  ------------------
 8485|  26.1k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 26.1k]
  ------------------
 8486|  26.1k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.1k|    }                                                           \
  |  | 8432|  26.1k|    else {                                                      \
  |  | 8433|  26.1k|        return vis(monostate_val);                              \
  |  | 8434|  26.1k|    }
  ------------------
 8487|       |
 8488|  26.1k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 26.1k]
  ------------------
 8489|  26.1k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|  26.1k|            return vis(
 8491|  26.1k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 26.1k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 26.1k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|  26.1k|            SCN_CLANG_POP
 8506|  26.1k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7054|   155k|{
 7055|   155k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7056|   155k|    handler.check_args_exhausted();
 7057|   155k|    return handler.get_error();
 7058|   155k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7020|   155k|{
 7021|       |    // TODO: memchr fast path with a larger (> 32) format string
 7022|       |
 7023|   155k|    auto begin = format.data();
 7024|   155k|    auto it = begin;
 7025|   155k|    const auto end = format.data() + format.size();
 7026|       |
 7027|   157k|    while (it != end) {
  ------------------
  |  Branch (7027:12): [True: 155k, False: 2.51k]
  ------------------
 7028|   155k|        const auto ch = *it++;
 7029|   155k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7029:13): [True: 155k, False: 0]
  ------------------
 7030|   155k|            handler.on_literal_text(begin, it - 1);
 7031|       |
 7032|   155k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7033|   155k|            if (!handler) {
  ------------------
  |  Branch (7033:17): [True: 152k, False: 2.51k]
  ------------------
 7034|   152k|                return;
 7035|   152k|            }
 7036|   155k|        }
 7037|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7037:18): [True: 0, False: 0]
  ------------------
 7038|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7039|      0|                handler.on_error("Unmatched '}' in format string");
 7040|      0|                return;
 7041|      0|            }
 7042|       |
 7043|      0|            handler.on_literal_text(begin, it);
 7044|      0|            begin = ++it;
 7045|      0|        }
 7046|   155k|    }
 7047|       |
 7048|  2.51k|    handler.on_literal_text(begin, end);
 7049|  2.51k|}
_ZN3scn2v318basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
 8185|  2.51k|    {
 8186|  2.51k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  2.51k|    static_cast<    \
  |  |  929|  2.51k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8187|  2.51k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 6952|   155k|{
 6953|   155k|    struct id_adapter {
 6954|   155k|        constexpr void operator()()
 6955|   155k|        {
 6956|   155k|            arg_id = handler.on_arg_id();
 6957|   155k|        }
 6958|   155k|        constexpr void operator()(std::size_t id)
 6959|   155k|        {
 6960|   155k|            arg_id = handler.on_arg_id(id);
 6961|   155k|        }
 6962|       |
 6963|   155k|        constexpr void on_error(const char* msg)
 6964|   155k|        {
 6965|   155k|            SCN_UNLIKELY_ATTR
 6966|   155k|            handler.on_error(msg);
 6967|   155k|        }
 6968|       |
 6969|   155k|        Handler& handler;
 6970|   155k|        std::size_t arg_id;
 6971|   155k|    };
 6972|       |
 6973|   155k|    ++begin;
 6974|   155k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 155k]
  |  |  ------------------
  ------------------
 6975|      0|        handler.on_error("Unexpected end of replacement field");
 6976|      0|        return begin;
 6977|      0|    }
 6978|       |
 6979|   155k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:9): [True: 0, False: 155k]
  ------------------
 6980|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6981|      0|    }
 6982|   155k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6982:14): [True: 0, False: 155k]
  ------------------
 6983|      0|        handler.on_literal_text(begin, begin + 1);
 6984|      0|    }
 6985|   155k|    else {
 6986|   155k|        auto adapter = id_adapter{handler, 0};
 6987|   155k|        begin = parse_arg_id(begin, end, adapter);
 6988|       |
 6989|   155k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 155k]
  |  |  ------------------
  ------------------
 6990|      0|            handler.on_error("Missing '}' in format string");
 6991|      0|            return begin;
 6992|      0|        }
 6993|       |
 6994|   155k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6994:13): [True: 0, False: 155k]
  ------------------
 6995|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6996|      0|        }
 6997|   155k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6997:18): [True: 155k, False: 0]
  ------------------
 6998|   155k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 155k]
  |  |  ------------------
  ------------------
 6999|      0|                handler.on_error("Unexpected end of replacement field");
 7000|      0|                return begin;
 7001|      0|            }
 7002|   155k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7003|   155k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   310k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 50.8k, False: 104k]
  |  |  |  Branch (859:45): [True: 0, False: 155k]
  |  |  |  Branch (859:45): [True: 50.8k, False: 104k]
  |  |  ------------------
  ------------------
 7004|  50.8k|                handler.on_error("Unknown format specifier");
 7005|  50.8k|                return begin;
 7006|  50.8k|            }
 7007|   155k|        }
 7008|      0|        else {
 7009|      0|            SCN_UNLIKELY_ATTR
 7010|      0|            handler.on_error("Missing '}' in format string");
 7011|      0|            return begin;
 7012|      0|        }
 7013|   155k|    }
 7014|   104k|    return begin + 1;
 7015|   155k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6453|   155k|{
 6454|   155k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   155k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   155k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6455|   155k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6455:9): [True: 155k, False: 0]
  |  Branch (6455:26): [True: 0, False: 155k]
  ------------------
 6456|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6457|      0|    }
 6458|       |
 6459|   155k|    handler();
 6460|   155k|    return begin;
 6461|   155k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6955|   155k|        {
 6956|   155k|            arg_id = handler.on_arg_id();
 6957|   155k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7131|   155k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   155k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7132|   155k|    {
 7133|   155k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   155k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   155k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7134|   155k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6868|   155k|{
 6869|   155k|    auto do_presentation = [&]() -> const CharT* {
 6870|   155k|        if (*begin == CharT{'['}) {
 6871|   155k|            auto set = parse_presentation_set(begin, end, handler);
 6872|   155k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6873|       |                // clang-format off
 6874|   155k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|   155k|                return begin;
 6877|   155k|            }
 6878|   155k|            handler.on_character_set_string(set);
 6879|   155k|            return begin;
 6880|   155k|        }
 6881|   155k|        if (*begin == CharT{'/'}) {
 6882|   155k|            return parse_presentation_regex(begin, end, handler);
 6883|   155k|        }
 6884|   155k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   155k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6886|   155k|            handler.on_error("Invalid type specifier in format string");
 6887|   155k|            return begin;
 6888|   155k|        }
 6889|   155k|        handler.on_type(type);
 6890|   155k|        return begin;
 6891|   155k|    };
 6892|       |
 6893|   155k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6893:9): [True: 155k, False: 0]
  |  Branch (6893:28): [True: 121k, False: 33.8k]
  ------------------
 6894|   155k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6894:9): [True: 104k, False: 16.9k]
  |  Branch (6894:36): [True: 86.8k, False: 17.3k]
  ------------------
 6895|  86.8k|        return do_presentation();
 6896|  86.8k|    }
 6897|       |
 6898|  68.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  68.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 68.2k]
  |  |  ------------------
  ------------------
 6899|      0|        handler.on_error("Unexpected end of format string");
 6900|      0|        return begin;
 6901|      0|    }
 6902|       |
 6903|  68.2k|    begin = parse_align(begin, end, handler);
 6904|  68.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  68.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 68.2k]
  |  |  ------------------
  ------------------
 6905|      0|        handler.on_error("Unexpected end of format string");
 6906|      0|        return begin;
 6907|      0|    }
 6908|       |
 6909|  68.2k|    begin = parse_width(begin, end, handler);
 6910|  68.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  68.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 68.2k]
  |  |  ------------------
  ------------------
 6911|      0|        handler.on_error("Unexpected end of format string");
 6912|      0|        return begin;
 6913|      0|    }
 6914|       |
 6915|  68.2k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6915:9): [True: 0, False: 68.2k]
  ------------------
 6916|      0|        ++begin;
 6917|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6918|      0|            handler.on_error("Unexpected end of format string");
 6919|      0|            return begin;
 6920|      0|        }
 6921|      0|        begin = parse_precision(begin, end, handler);
 6922|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6923|      0|            handler.on_error("Unexpected end of format string");
 6924|      0|            return begin;
 6925|      0|        }
 6926|      0|    }
 6927|       |
 6928|  68.2k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6928:9): [True: 17.3k, False: 50.8k]
  ------------------
 6929|  17.3k|        handler.on_localized();
 6930|  17.3k|        ++begin;
 6931|  17.3k|    }
 6932|  68.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  68.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 68.2k]
  |  |  ------------------
  ------------------
 6933|      0|        handler.on_error("Unexpected end of format string");
 6934|      0|        return begin;
 6935|      0|    }
 6936|       |
 6937|  68.2k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6937:9): [True: 68.2k, False: 0]
  |  Branch (6937:25): [True: 50.8k, False: 17.3k]
  ------------------
 6938|  50.8k|        do_presentation();
 6939|  50.8k|    }
 6940|  68.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  68.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 68.2k]
  |  |  ------------------
  ------------------
 6941|      0|        handler.on_error("Unexpected end of format string");
 6942|      0|        return begin;
 6943|      0|    }
 6944|       |
 6945|  68.2k|    return begin;
 6946|  68.2k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6869|   137k|    auto do_presentation = [&]() -> const CharT* {
 6870|   137k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 137k]
  ------------------
 6871|      0|            auto set = parse_presentation_set(begin, end, handler);
 6872|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6873|       |                // clang-format off
 6874|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|      0|                return begin;
 6877|      0|            }
 6878|      0|            handler.on_character_set_string(set);
 6879|      0|            return begin;
 6880|      0|        }
 6881|   137k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6881:13): [True: 0, False: 137k]
  ------------------
 6882|      0|            return parse_presentation_regex(begin, end, handler);
 6883|      0|        }
 6884|   137k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   137k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 33.8k, False: 103k]
  |  |  ------------------
  ------------------
 6886|  33.8k|            handler.on_error("Invalid type specifier in format string");
 6887|  33.8k|            return begin;
 6888|  33.8k|        }
 6889|   103k|        handler.on_type(type);
 6890|   103k|        return begin;
 6891|   137k|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6542|  68.2k|{
 6543|  68.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  68.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  68.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6544|       |
 6545|  68.2k|    auto check_align = [](wchar_t ch) {
 6546|  68.2k|        switch (ch) {
 6547|  68.2k|            case L'<':
 6548|  68.2k|                return align_type::left;
 6549|  68.2k|            case L'>':
 6550|  68.2k|                return align_type::right;
 6551|  68.2k|            case L'^':
 6552|  68.2k|                return align_type::center;
 6553|  68.2k|            default:
 6554|  68.2k|                return align_type::none;
 6555|  68.2k|        }
 6556|  68.2k|    };
 6557|       |
 6558|  68.2k|    auto potential_fill_len = code_point_length(begin, end);
 6559|  68.2k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 68.2k]
  |  |  |  Branch (859:45): [True: 0, False: 68.2k]
  |  |  |  Branch (859:45): [True: 0, False: 68.2k]
  |  |  ------------------
  ------------------
 6560|  68.2k|                     std::distance(begin, end) < potential_fill_len)) {
 6561|      0|        handler.on_error("Invalid encoding in fill character");
 6562|      0|        return begin;
 6563|      0|    }
 6564|       |
 6565|  68.2k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6566|       |
 6567|  68.2k|    auto potential_fill = std::basic_string_view<CharT>{
 6568|  68.2k|        begin, static_cast<size_t>(potential_fill_len)};
 6569|  68.2k|    const auto begin_before_fill = begin;
 6570|  68.2k|    begin += potential_fill_len;
 6571|       |
 6572|  68.2k|    if (begin == end) {
  ------------------
  |  Branch (6572:9): [True: 0, False: 68.2k]
  ------------------
 6573|      0|        return begin_before_fill;
 6574|      0|    }
 6575|       |
 6576|  68.2k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6577|  68.2k|    const auto begin_after_fill = begin;
 6578|  68.2k|    ++begin;
 6579|       |
 6580|  68.2k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6580:9): [True: 68.2k, False: 0]
  ------------------
 6581|  68.2k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  68.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 68.2k]
  |  |  ------------------
  ------------------
 6582|      0|            handler.on_error("Invalid fill character '{' in format string");
 6583|      0|            return begin;
 6584|      0|        }
 6585|  68.2k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6585:13): [True: 0, False: 68.2k]
  ------------------
 6586|      0|            return begin_before_fill;
 6587|      0|        }
 6588|  68.2k|    }
 6589|       |
 6590|  68.2k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6590:9): [True: 68.2k, False: 0]
  ------------------
 6591|  68.2k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6591:13): [True: 0, False: 68.2k]
  ------------------
 6592|      0|            handler.on_align(potential_align_on_fill);
 6593|      0|            return begin_after_fill;
 6594|      0|        }
 6595|  68.2k|        return begin_before_fill;
 6596|  68.2k|    }
 6597|       |
 6598|      0|    handler.on_fill(potential_fill);
 6599|      0|    handler.on_align(potential_align_after_fill);
 6600|      0|    return begin;
 6601|  68.2k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6545|   136k|    auto check_align = [](wchar_t ch) {
 6546|   136k|        switch (ch) {
 6547|      0|            case L'<':
  ------------------
  |  Branch (6547:13): [True: 0, False: 136k]
  ------------------
 6548|      0|                return align_type::left;
 6549|      0|            case L'>':
  ------------------
  |  Branch (6549:13): [True: 0, False: 136k]
  ------------------
 6550|      0|                return align_type::right;
 6551|      0|            case L'^':
  ------------------
  |  Branch (6551:13): [True: 0, False: 136k]
  ------------------
 6552|      0|                return align_type::center;
 6553|   136k|            default:
  ------------------
  |  Branch (6553:13): [True: 136k, False: 0]
  ------------------
 6554|   136k|                return align_type::none;
 6555|   136k|        }
 6556|   136k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6607|  68.2k|{
 6608|  68.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  68.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  68.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6609|       |
 6610|  68.2k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6610:9): [True: 34.3k, False: 33.8k]
  |  Branch (6610:33): [True: 0, False: 34.3k]
  ------------------
 6611|      0|        int width = parse_simple_int(begin, end);
 6612|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6613|      0|            handler.on_width(width);
 6614|      0|        }
 6615|      0|        else {
 6616|      0|            handler.on_error("Invalid field width");
 6617|      0|            return begin;
 6618|      0|        }
 6619|      0|    }
 6620|  68.2k|    return begin;
 6621|  68.2k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 7137|  17.3k|    {
 7138|  17.3k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7139|  17.3k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7139:13): [True: 8.65k, False: 8.72k]
  ------------------
 7140|  17.3k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7140:13): [True: 0, False: 8.65k]
  ------------------
 7141|  17.3k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7141:13): [True: 0, False: 0]
  ------------------
 7142|  17.3k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7142:13): [True: 0, False: 0]
  ------------------
 7143|      0|            SCN_UNLIKELY_ATTR
 7144|       |            // clang-format off
 7145|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7146|       |            // clang-format on
 7147|      0|        }
 7148|       |
 7149|  17.3k|        Handler::on_localized();
 7150|  17.3k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|   104k|{
 8428|   104k|#define SCN_VISIT(Type)                                         \
 8429|   104k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|   104k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|   104k|    }                                                           \
 8432|   104k|    else {                                                      \
 8433|   104k|        return vis(monostate_val);                              \
 8434|   104k|    }
 8435|       |
 8436|   104k|    monostate monostate_val{};
 8437|       |
 8438|   104k|    switch (arg.m_type) {
 8439|  17.3k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 17.3k, False: 86.8k]
  ------------------
 8440|  17.3k|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|  17.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  17.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  17.3k|    }                                                           \
  |  | 8432|  17.3k|    else {                                                      \
  |  | 8433|  17.3k|        return vis(monostate_val);                              \
  |  | 8434|  17.3k|    }
  ------------------
 8441|  17.3k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 104k]
  ------------------
 8442|  17.3k|            SCN_VISIT(short);
  ------------------
  |  | 8429|  17.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  17.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  17.3k|    }                                                           \
  |  | 8432|  17.3k|    else {                                                      \
  |  | 8433|  17.3k|        return vis(monostate_val);                              \
  |  | 8434|  17.3k|    }
  ------------------
 8443|  34.7k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 17.4k, False: 86.7k]
  ------------------
 8444|  34.7k|            SCN_VISIT(int);
  ------------------
  |  | 8429|  34.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  34.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  34.7k|    }                                                           \
  |  | 8432|  34.7k|    else {                                                      \
  |  | 8433|  34.7k|        return vis(monostate_val);                              \
  |  | 8434|  34.7k|    }
  ------------------
 8445|  34.7k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 104k]
  ------------------
 8446|  34.7k|            SCN_VISIT(long);
  ------------------
  |  | 8429|  34.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  34.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  34.7k|    }                                                           \
  |  | 8432|  34.7k|    else {                                                      \
  |  | 8433|  34.7k|        return vis(monostate_val);                              \
  |  | 8434|  34.7k|    }
  ------------------
 8447|  52.2k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 17.4k, False: 86.6k]
  ------------------
 8448|  52.2k|            SCN_VISIT(long long);
  ------------------
  |  | 8429|  52.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  52.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  52.2k|    }                                                           \
  |  | 8432|  52.2k|    else {                                                      \
  |  | 8433|  52.2k|        return vis(monostate_val);                              \
  |  | 8434|  52.2k|    }
  ------------------
 8449|  69.4k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 17.2k, False: 86.9k]
  ------------------
 8450|  69.4k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|  69.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  69.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  69.4k|    }                                                           \
  |  | 8432|  69.4k|    else {                                                      \
  |  | 8433|  69.4k|        return vis(monostate_val);                              \
  |  | 8434|  69.4k|    }
  ------------------
 8451|  69.4k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 104k]
  ------------------
 8452|  69.4k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|  69.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  69.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  69.4k|    }                                                           \
  |  | 8432|  69.4k|    else {                                                      \
  |  | 8433|  69.4k|        return vis(monostate_val);                              \
  |  | 8434|  69.4k|    }
  ------------------
 8453|  86.7k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 17.3k, False: 86.8k]
  ------------------
 8454|  86.7k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|  86.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  86.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  86.7k|    }                                                           \
  |  | 8432|  86.7k|    else {                                                      \
  |  | 8433|  86.7k|        return vis(monostate_val);                              \
  |  | 8434|  86.7k|    }
  ------------------
 8455|  86.7k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 104k]
  ------------------
 8456|  86.7k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|  86.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  86.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  86.7k|    }                                                           \
  |  | 8432|  86.7k|    else {                                                      \
  |  | 8433|  86.7k|        return vis(monostate_val);                              \
  |  | 8434|  86.7k|    }
  ------------------
 8457|   104k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 17.3k, False: 86.7k]
  ------------------
 8458|   104k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|   104k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   104k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   104k|    }                                                           \
  |  | 8432|   104k|    else {                                                      \
  |  | 8433|   104k|        return vis(monostate_val);                              \
  |  | 8434|   104k|    }
  ------------------
 8459|   104k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 104k]
  ------------------
 8460|   104k|            SCN_VISIT(void*);
  ------------------
  |  | 8429|   104k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   104k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   104k|    }                                                           \
  |  | 8432|   104k|    else {                                                      \
  |  | 8433|   104k|        return vis(monostate_val);                              \
  |  | 8434|   104k|    }
  ------------------
 8461|   104k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 104k]
  ------------------
 8462|   104k|            SCN_VISIT(bool);
  ------------------
  |  | 8429|   104k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   104k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   104k|    }                                                           \
  |  | 8432|   104k|    else {                                                      \
  |  | 8433|   104k|        return vis(monostate_val);                              \
  |  | 8434|   104k|    }
  ------------------
 8463|   104k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 104k]
  ------------------
 8464|   104k|            SCN_VISIT(char);
  ------------------
  |  | 8429|   104k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   104k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   104k|    }                                                           \
  |  | 8432|   104k|    else {                                                      \
  |  | 8433|   104k|        return vis(monostate_val);                              \
  |  | 8434|   104k|    }
  ------------------
 8465|   104k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 104k]
  ------------------
 8466|   104k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|   104k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   104k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   104k|    }                                                           \
  |  | 8432|   104k|    else {                                                      \
  |  | 8433|   104k|        return vis(monostate_val);                              \
  |  | 8434|   104k|    }
  ------------------
 8467|   104k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 104k]
  ------------------
 8468|   104k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|   104k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   104k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   104k|    }                                                           \
  |  | 8432|   104k|    else {                                                      \
  |  | 8433|   104k|        return vis(monostate_val);                              \
  |  | 8434|   104k|    }
  ------------------
 8469|   104k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 104k]
  ------------------
 8470|   104k|            SCN_VISIT(float);
  ------------------
  |  | 8429|   104k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   104k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   104k|    }                                                           \
  |  | 8432|   104k|    else {                                                      \
  |  | 8433|   104k|        return vis(monostate_val);                              \
  |  | 8434|   104k|    }
  ------------------
 8471|   104k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 104k]
  ------------------
 8472|   104k|            SCN_VISIT(double);
  ------------------
  |  | 8429|   104k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   104k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   104k|    }                                                           \
  |  | 8432|   104k|    else {                                                      \
  |  | 8433|   104k|        return vis(monostate_val);                              \
  |  | 8434|   104k|    }
  ------------------
 8473|   104k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 104k]
  ------------------
 8474|   104k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|   104k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   104k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   104k|    }                                                           \
  |  | 8432|   104k|    else {                                                      \
  |  | 8433|   104k|        return vis(monostate_val);                              \
  |  | 8434|   104k|    }
  ------------------
 8475|   104k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 104k]
  ------------------
 8476|   104k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|   104k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   104k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   104k|    }                                                           \
  |  | 8432|   104k|    else {                                                      \
  |  | 8433|   104k|        return vis(monostate_val);                              \
  |  | 8434|   104k|    }
  ------------------
 8477|   104k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 104k]
  ------------------
 8478|   104k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|   104k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   104k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   104k|    }                                                           \
  |  | 8432|   104k|    else {                                                      \
  |  | 8433|   104k|        return vis(monostate_val);                              \
  |  | 8434|   104k|    }
  ------------------
 8479|   104k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 104k]
  ------------------
 8480|   104k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|   104k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   104k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   104k|    }                                                           \
  |  | 8432|   104k|    else {                                                      \
  |  | 8433|   104k|        return vis(monostate_val);                              \
  |  | 8434|   104k|    }
  ------------------
 8481|   104k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 104k]
  ------------------
 8482|   104k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|   104k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   104k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   104k|    }                                                           \
  |  | 8432|   104k|    else {                                                      \
  |  | 8433|   104k|        return vis(monostate_val);                              \
  |  | 8434|   104k|    }
  ------------------
 8483|   104k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 104k]
  ------------------
 8484|   104k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|   104k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   104k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   104k|    }                                                           \
  |  | 8432|   104k|    else {                                                      \
  |  | 8433|   104k|        return vis(monostate_val);                              \
  |  | 8434|   104k|    }
  ------------------
 8485|   104k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 104k]
  ------------------
 8486|   104k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|   104k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   104k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   104k|    }                                                           \
  |  | 8432|   104k|    else {                                                      \
  |  | 8433|   104k|        return vis(monostate_val);                              \
  |  | 8434|   104k|    }
  ------------------
 8487|       |
 8488|   104k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 104k]
  ------------------
 8489|   104k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|   104k|            return vis(
 8491|   104k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 104k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 104k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|   104k|            SCN_CLANG_POP
 8506|   104k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZN3scn2v36detail17basic_scan_bufferIwE8sync_allEv:
 4083|   177k|    {
 4084|   177k|        sync(0);
 4085|   177k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
 5429|  64.2k|    constexpr basic_scan_args() = default;
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
 5429|  17.4k|    constexpr basic_scan_args() = default;

_ZN3scn2v34scanIJaENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  14.3k|{
   89|  14.3k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  14.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  14.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.3k|    static_cast<    \
  |  |  929|  14.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.3k|    static_cast<    \
  |  |  929|  14.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  14.3k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|  86.2k|{
   44|  86.2k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|  86.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  86.2k|}
_ZN3scn2v34scanIJaENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  14.3k|{
  127|  14.3k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  14.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  14.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.3k|    static_cast<    \
  |  |  929|  14.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.3k|    static_cast<    \
  |  |  929|  14.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  14.3k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|  86.2k|{
   60|  86.2k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|  86.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  86.2k|}
_ZN3scn2v310scan_valueIaNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  162|  1.44k|{
  163|  1.44k|    T value;
  164|  1.44k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  1.44k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  1.44k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.44k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.44k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.41k, False: 36]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.41k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.41k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.41k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.41k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.41k|    }                                                  \
  |  |  |  | 3667|  1.44k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     36|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     36|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     36|    static_cast<    \
  |  |  929|     36|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     36|    static_cast<    \
  |  |  929|     36|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  1.44k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  8.71k|{
   72|  8.71k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  8.71k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  8.71k|}
_ZN3scn2v34scanIJhENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  14.3k|{
   89|  14.3k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  14.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  14.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.3k|    static_cast<    \
  |  |  929|  14.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.3k|    static_cast<    \
  |  |  929|  14.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  14.3k|}
_ZN3scn2v34scanIJhENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  14.3k|{
  127|  14.3k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  14.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  14.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.3k|    static_cast<    \
  |  |  929|  14.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.3k|    static_cast<    \
  |  |  929|  14.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  14.3k|}
_ZN3scn2v310scan_valueIhNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  162|  1.44k|{
  163|  1.44k|    T value;
  164|  1.44k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  1.44k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  1.44k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.44k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.44k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.41k, False: 29]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.41k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.41k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.41k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.41k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.41k|    }                                                  \
  |  |  |  | 3667|  1.44k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     29|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     29|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     29|    static_cast<    \
  |  |  929|     29|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     29|    static_cast<    \
  |  |  929|     29|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  1.44k|}
_ZN3scn2v34scanIJiENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  14.3k|{
   89|  14.3k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  14.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  14.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.3k|    static_cast<    \
  |  |  929|  14.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.3k|    static_cast<    \
  |  |  929|  14.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  14.3k|}
_ZN3scn2v34scanIJiENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  14.3k|{
  127|  14.3k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  14.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  14.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.3k|    static_cast<    \
  |  |  929|  14.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.3k|    static_cast<    \
  |  |  929|  14.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  14.3k|}
_ZN3scn2v310scan_valueIiNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  162|  1.45k|{
  163|  1.45k|    T value;
  164|  1.45k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  1.45k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  1.45k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.45k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.45k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.41k, False: 46]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.41k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.41k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.41k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.41k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.41k|    }                                                  \
  |  |  |  | 3667|  1.45k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     46|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     46|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     46|    static_cast<    \
  |  |  929|     46|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     46|    static_cast<    \
  |  |  929|     46|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  1.45k|}
_ZN3scn2v34scanIJjENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  14.3k|{
   89|  14.3k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  14.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  14.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.3k|    static_cast<    \
  |  |  929|  14.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.3k|    static_cast<    \
  |  |  929|  14.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  14.3k|}
_ZN3scn2v34scanIJjENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  14.3k|{
  127|  14.3k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  14.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  14.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.3k|    static_cast<    \
  |  |  929|  14.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.3k|    static_cast<    \
  |  |  929|  14.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  14.3k|}
_ZN3scn2v310scan_valueIjNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  162|  1.44k|{
  163|  1.44k|    T value;
  164|  1.44k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  1.44k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  1.44k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.44k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.44k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.41k, False: 35]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.41k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.41k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.41k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.41k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.41k|    }                                                  \
  |  |  |  | 3667|  1.44k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     35|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     35|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     35|    static_cast<    \
  |  |  929|     35|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     35|    static_cast<    \
  |  |  929|     35|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  1.44k|}
_ZN3scn2v34scanIJxENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  14.4k|{
   89|  14.4k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  14.4k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  14.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.4k|    static_cast<    \
  |  |  929|  14.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.4k|    static_cast<    \
  |  |  929|  14.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  14.4k|}
_ZN3scn2v34scanIJxENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  14.4k|{
  127|  14.4k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  14.4k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  14.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.4k|    static_cast<    \
  |  |  929|  14.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.4k|    static_cast<    \
  |  |  929|  14.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  14.4k|}
_ZN3scn2v310scan_valueIxNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  162|  1.46k|{
  163|  1.46k|    T value;
  164|  1.46k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  1.46k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  1.46k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.46k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.46k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.41k, False: 57]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.41k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.41k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.41k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.41k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.41k|    }                                                  \
  |  |  |  | 3667|  1.46k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     57|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     57|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     57|    static_cast<    \
  |  |  929|     57|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     57|    static_cast<    \
  |  |  929|     57|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  1.46k|}
_ZN3scn2v34scanIJyENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  14.3k|{
   89|  14.3k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  14.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  14.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.3k|    static_cast<    \
  |  |  929|  14.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.3k|    static_cast<    \
  |  |  929|  14.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  14.3k|}
_ZN3scn2v34scanIJyENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  14.3k|{
  127|  14.3k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  14.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  14.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.3k|    static_cast<    \
  |  |  929|  14.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.3k|    static_cast<    \
  |  |  929|  14.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  14.3k|}
_ZN3scn2v310scan_valueIyNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  162|  1.45k|{
  163|  1.45k|    T value;
  164|  1.45k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  1.45k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  1.45k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.45k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.45k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.41k, False: 43]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.41k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.41k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.41k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.41k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.41k|    }                                                  \
  |  |  |  | 3667|  1.45k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     43|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     43|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     43|    static_cast<    \
  |  |  929|     43|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     43|    static_cast<    \
  |  |  929|     43|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  1.45k|}
_ZN3scn2v34scanIJaENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  14.3k|{
   89|  14.3k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  14.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  14.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.3k|    static_cast<    \
  |  |  929|  14.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.3k|    static_cast<    \
  |  |  929|  14.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  14.3k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|  86.2k|{
   44|  86.2k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|  86.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  86.2k|}
_ZN3scn2v34scanIJaENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  126|  14.3k|{
  127|  14.3k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  14.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  14.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.3k|    static_cast<    \
  |  |  929|  14.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.3k|    static_cast<    \
  |  |  929|  14.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  14.3k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|  86.2k|{
   60|  86.2k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|  86.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  86.2k|}
_ZN3scn2v310scan_valueIaNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  162|  1.44k|{
  163|  1.44k|    T value;
  164|  1.44k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  1.44k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  1.44k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.44k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.44k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.41k, False: 36]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.41k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.41k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.41k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.41k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.41k|    }                                                  \
  |  |  |  | 3667|  1.44k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     36|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     36|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     36|    static_cast<    \
  |  |  929|     36|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     36|    static_cast<    \
  |  |  929|     36|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  1.44k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  8.71k|{
   72|  8.71k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  8.71k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  8.71k|}
_ZN3scn2v34scanIJhENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  14.3k|{
   89|  14.3k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  14.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  14.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.3k|    static_cast<    \
  |  |  929|  14.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.3k|    static_cast<    \
  |  |  929|  14.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  14.3k|}
_ZN3scn2v34scanIJhENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  126|  14.3k|{
  127|  14.3k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  14.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  14.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.3k|    static_cast<    \
  |  |  929|  14.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.3k|    static_cast<    \
  |  |  929|  14.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  14.3k|}
_ZN3scn2v310scan_valueIhNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  162|  1.44k|{
  163|  1.44k|    T value;
  164|  1.44k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  1.44k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  1.44k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.44k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.44k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.41k, False: 29]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.41k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.41k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.41k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.41k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.41k|    }                                                  \
  |  |  |  | 3667|  1.44k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     29|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     29|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     29|    static_cast<    \
  |  |  929|     29|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     29|    static_cast<    \
  |  |  929|     29|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  1.44k|}
_ZN3scn2v34scanIJiENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  14.3k|{
   89|  14.3k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  14.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  14.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.3k|    static_cast<    \
  |  |  929|  14.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.3k|    static_cast<    \
  |  |  929|  14.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  14.3k|}
_ZN3scn2v34scanIJiENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  126|  14.3k|{
  127|  14.3k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  14.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  14.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.3k|    static_cast<    \
  |  |  929|  14.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.3k|    static_cast<    \
  |  |  929|  14.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  14.3k|}
_ZN3scn2v310scan_valueIiNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  162|  1.45k|{
  163|  1.45k|    T value;
  164|  1.45k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  1.45k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  1.45k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.45k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.45k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.41k, False: 46]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.41k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.41k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.41k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.41k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.41k|    }                                                  \
  |  |  |  | 3667|  1.45k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     46|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     46|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     46|    static_cast<    \
  |  |  929|     46|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     46|    static_cast<    \
  |  |  929|     46|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  1.45k|}
_ZN3scn2v34scanIJjENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  14.3k|{
   89|  14.3k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  14.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  14.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.3k|    static_cast<    \
  |  |  929|  14.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.3k|    static_cast<    \
  |  |  929|  14.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  14.3k|}
_ZN3scn2v34scanIJjENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  126|  14.3k|{
  127|  14.3k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  14.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  14.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.3k|    static_cast<    \
  |  |  929|  14.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.3k|    static_cast<    \
  |  |  929|  14.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  14.3k|}
_ZN3scn2v310scan_valueIjNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  162|  1.44k|{
  163|  1.44k|    T value;
  164|  1.44k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  1.44k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  1.44k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.44k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.44k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.41k, False: 35]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.41k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.41k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.41k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.41k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.41k|    }                                                  \
  |  |  |  | 3667|  1.44k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     35|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     35|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     35|    static_cast<    \
  |  |  929|     35|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     35|    static_cast<    \
  |  |  929|     35|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  1.44k|}
_ZN3scn2v34scanIJxENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  14.4k|{
   89|  14.4k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  14.4k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  14.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.4k|    static_cast<    \
  |  |  929|  14.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.4k|    static_cast<    \
  |  |  929|  14.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  14.4k|}
_ZN3scn2v34scanIJxENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  126|  14.4k|{
  127|  14.4k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  14.4k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  14.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.4k|    static_cast<    \
  |  |  929|  14.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.4k|    static_cast<    \
  |  |  929|  14.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  14.4k|}
_ZN3scn2v310scan_valueIxNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  162|  1.46k|{
  163|  1.46k|    T value;
  164|  1.46k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  1.46k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  1.46k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.46k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.46k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.41k, False: 57]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.41k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.41k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.41k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.41k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.41k|    }                                                  \
  |  |  |  | 3667|  1.46k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     57|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     57|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     57|    static_cast<    \
  |  |  929|     57|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     57|    static_cast<    \
  |  |  929|     57|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  1.46k|}
_ZN3scn2v34scanIJyENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  14.3k|{
   89|  14.3k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  14.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  14.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.3k|    static_cast<    \
  |  |  929|  14.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.3k|    static_cast<    \
  |  |  929|  14.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  14.3k|}
_ZN3scn2v34scanIJyENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  126|  14.3k|{
  127|  14.3k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  14.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  14.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.3k|    static_cast<    \
  |  |  929|  14.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.3k|    static_cast<    \
  |  |  929|  14.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  14.3k|}
_ZN3scn2v310scan_valueIyNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  162|  1.45k|{
  163|  1.45k|    T value;
  164|  1.45k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  1.45k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  1.45k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.45k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.45k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.41k, False: 43]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.41k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.41k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.41k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.41k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.41k|    }                                                  \
  |  |  |  | 3667|  1.45k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     43|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     43|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     43|    static_cast<    \
  |  |  929|     43|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     43|    static_cast<    \
  |  |  929|     43|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  1.45k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  652|   597k|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  653|   597k|{
  654|   597k|    static_assert(std::is_same_v<Locale, std::locale>);
  655|   597k|}
_ZNK3scn2v36detail10locale_ref3getINSt3__16localeEEET_v:
  659|   156k|{
  660|   156k|    static_assert(std::is_same_v<Locale, std::locale>);
  661|   156k|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (661:12): [True: 78.4k, False: 78.4k]
  ------------------
  662|   156k|                    : std::locale{};
  663|   156k|}
_ZN3scn2v34impl19parse_integer_valueIcaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1461|   119k|{
 1462|   119k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|   119k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   119k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|   119k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|   119k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   119k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|   119k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|   119k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   119k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|   119k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|   119k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   119k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1466|       |
 1467|   119k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1467:9): [True: 5.26k, False: 114k]
  ------------------
 1468|  5.26k|        SCN_UNLIKELY_ATTR
 1469|  5.26k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1470|  5.26k|                                     "Invalid integer value");
 1471|  5.26k|    }
 1472|       |
 1473|       |    // Skip leading zeroes
 1474|   114k|    auto start = source.data();
 1475|   114k|    const auto end = source.data() + source.size();
 1476|   114k|    {
 1477|   313k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1477:16): [True: 295k, False: 18.6k]
  ------------------
 1478|   295k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1478:17): [True: 95.5k, False: 199k]
  ------------------
 1479|  95.5k|                break;
 1480|  95.5k|            }
 1481|   295k|        }
 1482|   114k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|   209k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 30.8k, False: 83.2k]
  |  |  |  Branch (859:45): [True: 18.6k, False: 95.5k]
  |  |  |  Branch (859:45): [True: 12.2k, False: 83.2k]
  |  |  ------------------
  ------------------
 1483|  30.8k|            value = 0;
 1484|  30.8k|            return ranges::next(source.begin(),
 1485|  30.8k|                                ranges::distance(source.data(), start));
 1486|  30.8k|        }
 1487|   114k|    }
 1488|       |
 1489|  83.2k|    if constexpr (std::is_same_v<CharT, char>) {
 1490|  83.2k|        if (base == 10) {
  ------------------
  |  Branch (1490:13): [True: 62.1k, False: 21.0k]
  ------------------
 1491|  62.1k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3668|  62.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  62.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  62.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  62.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.37k, False: 58.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.37k|    }                                                  \
  |  |  |  | 3667|  62.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  58.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1492|  58.7k|                             detail::make_string_view_from_pointers(start, end),
 1493|  58.7k|                             value, sign == sign_type::minus_sign));
 1494|  58.7k|            return ranges::next(source.begin(),
 1495|  58.7k|                                ranges::distance(source.data(), ptr));
 1496|  62.1k|        }
 1497|  83.2k|    }
 1498|       |
 1499|  81.2k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|  83.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  83.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  83.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  83.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.95k, False: 81.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.95k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.95k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.95k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.95k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.95k|    }                                                  \
  |  |  |  | 3667|  83.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  81.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1500|  81.2k|                     detail::make_string_view_from_pointers(start, end), value,
 1501|  81.2k|                     base, sign == sign_type::minus_sign));
 1502|  81.2k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1503|  83.2k|}
_ZN3scn2v34impl19parse_integer_valueIwaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1461|  19.1k|{
 1462|  19.1k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  19.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  19.1k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  19.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  19.1k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  19.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|  19.1k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  19.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1466|       |
 1467|  19.1k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1467:9): [True: 17.9k, False: 1.21k]
  ------------------
 1468|  17.9k|        SCN_UNLIKELY_ATTR
 1469|  17.9k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1470|  17.9k|                                     "Invalid integer value");
 1471|  17.9k|    }
 1472|       |
 1473|       |    // Skip leading zeroes
 1474|  1.21k|    auto start = source.data();
 1475|  1.21k|    const auto end = source.data() + source.size();
 1476|  1.21k|    {
 1477|  1.63k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1477:16): [True: 1.42k, False: 208]
  ------------------
 1478|  1.42k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1478:17): [True: 1.00k, False: 416]
  ------------------
 1479|  1.00k|                break;
 1480|  1.00k|            }
 1481|  1.42k|        }
 1482|  1.21k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|  2.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 328, False: 888]
  |  |  |  Branch (859:45): [True: 208, False: 1.00k]
  |  |  |  Branch (859:45): [True: 120, False: 888]
  |  |  ------------------
  ------------------
 1483|    328|            value = 0;
 1484|    328|            return ranges::next(source.begin(),
 1485|    328|                                ranges::distance(source.data(), start));
 1486|    328|        }
 1487|  1.21k|    }
 1488|       |
 1489|       |    if constexpr (std::is_same_v<CharT, char>) {
 1490|       |        if (base == 10) {
 1491|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1492|       |                             detail::make_string_view_from_pointers(start, end),
 1493|       |                             value, sign == sign_type::minus_sign));
 1494|       |            return ranges::next(source.begin(),
 1495|       |                                ranges::distance(source.data(), ptr));
 1496|       |        }
 1497|       |    }
 1498|       |
 1499|    888|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|    888|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    888|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    888|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    888|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 332, False: 556]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    332|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    332|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    332|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    332|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    332|    }                                                  \
  |  |  |  | 3667|    888|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    556|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1500|    556|                     detail::make_string_view_from_pointers(start, end), value,
 1501|    556|                     base, sign == sign_type::minus_sign));
 1502|    556|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1503|    888|}
_ZN3scn2v34impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1461|   140k|{
 1462|   140k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|   140k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   140k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|   140k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|   140k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   140k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|   140k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|   140k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   140k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|   140k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|   140k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   140k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1466|       |
 1467|   140k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1467:9): [True: 5.89k, False: 135k]
  ------------------
 1468|  5.89k|        SCN_UNLIKELY_ATTR
 1469|  5.89k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1470|  5.89k|                                     "Invalid integer value");
 1471|  5.89k|    }
 1472|       |
 1473|       |    // Skip leading zeroes
 1474|   135k|    auto start = source.data();
 1475|   135k|    const auto end = source.data() + source.size();
 1476|   135k|    {
 1477|   348k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1477:16): [True: 328k, False: 20.6k]
  ------------------
 1478|   328k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1478:17): [True: 114k, False: 213k]
  ------------------
 1479|   114k|                break;
 1480|   114k|            }
 1481|   328k|        }
 1482|   135k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|   249k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34.4k, False: 100k]
  |  |  |  Branch (859:45): [True: 20.6k, False: 114k]
  |  |  |  Branch (859:45): [True: 13.8k, False: 100k]
  |  |  ------------------
  ------------------
 1483|  34.4k|            value = 0;
 1484|  34.4k|            return ranges::next(source.begin(),
 1485|  34.4k|                                ranges::distance(source.data(), start));
 1486|  34.4k|        }
 1487|   135k|    }
 1488|       |
 1489|   100k|    if constexpr (std::is_same_v<CharT, char>) {
 1490|   100k|        if (base == 10) {
  ------------------
  |  Branch (1490:13): [True: 72.1k, False: 28.4k]
  ------------------
 1491|  72.1k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3668|  72.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  72.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  72.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  72.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.67k, False: 70.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.67k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.67k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.67k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.67k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.67k|    }                                                  \
  |  |  |  | 3667|  72.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  70.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1492|  70.5k|                             detail::make_string_view_from_pointers(start, end),
 1493|  70.5k|                             value, sign == sign_type::minus_sign));
 1494|  70.5k|            return ranges::next(source.begin(),
 1495|  70.5k|                                ranges::distance(source.data(), ptr));
 1496|  72.1k|        }
 1497|   100k|    }
 1498|       |
 1499|  99.7k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|   100k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   100k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   100k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 906, False: 99.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    906|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    906|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    906|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    906|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    906|    }                                                  \
  |  |  |  | 3667|   100k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  99.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1500|  99.7k|                     detail::make_string_view_from_pointers(start, end), value,
 1501|  99.7k|                     base, sign == sign_type::minus_sign));
 1502|  99.7k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1503|   100k|}
_ZN3scn2v34impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1461|  19.2k|{
 1462|  19.2k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  19.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  19.2k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  19.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  19.2k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  19.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|  19.2k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  19.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1466|       |
 1467|  19.2k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1467:9): [True: 17.9k, False: 1.26k]
  ------------------
 1468|  17.9k|        SCN_UNLIKELY_ATTR
 1469|  17.9k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1470|  17.9k|                                     "Invalid integer value");
 1471|  17.9k|    }
 1472|       |
 1473|       |    // Skip leading zeroes
 1474|  1.26k|    auto start = source.data();
 1475|  1.26k|    const auto end = source.data() + source.size();
 1476|  1.26k|    {
 1477|  1.69k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1477:16): [True: 1.47k, False: 219]
  ------------------
 1478|  1.47k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1478:17): [True: 1.04k, False: 434]
  ------------------
 1479|  1.04k|                break;
 1480|  1.04k|            }
 1481|  1.47k|        }
 1482|  1.26k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|  2.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 346, False: 914]
  |  |  |  Branch (859:45): [True: 219, False: 1.04k]
  |  |  |  Branch (859:45): [True: 127, False: 914]
  |  |  ------------------
  ------------------
 1483|    346|            value = 0;
 1484|    346|            return ranges::next(source.begin(),
 1485|    346|                                ranges::distance(source.data(), start));
 1486|    346|        }
 1487|  1.26k|    }
 1488|       |
 1489|       |    if constexpr (std::is_same_v<CharT, char>) {
 1490|       |        if (base == 10) {
 1491|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1492|       |                             detail::make_string_view_from_pointers(start, end),
 1493|       |                             value, sign == sign_type::minus_sign));
 1494|       |            return ranges::next(source.begin(),
 1495|       |                                ranges::distance(source.data(), ptr));
 1496|       |        }
 1497|       |    }
 1498|       |
 1499|    914|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|    914|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    914|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    914|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    914|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 148, False: 766]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    148|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    148|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    148|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    148|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    148|    }                                                  \
  |  |  |  | 3667|    914|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    766|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1500|    766|                     detail::make_string_view_from_pointers(start, end), value,
 1501|    766|                     base, sign == sign_type::minus_sign));
 1502|    766|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1503|    914|}
_ZN3scn2v34impl19parse_integer_valueIcxEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1461|   142k|{
 1462|   142k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|   142k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   142k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|   142k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|   142k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   142k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|   142k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|   142k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   142k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|   142k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|   142k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   142k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1466|       |
 1467|   142k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1467:9): [True: 6.16k, False: 136k]
  ------------------
 1468|  6.16k|        SCN_UNLIKELY_ATTR
 1469|  6.16k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1470|  6.16k|                                     "Invalid integer value");
 1471|  6.16k|    }
 1472|       |
 1473|       |    // Skip leading zeroes
 1474|   136k|    auto start = source.data();
 1475|   136k|    const auto end = source.data() + source.size();
 1476|   136k|    {
 1477|   351k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1477:16): [True: 330k, False: 20.8k]
  ------------------
 1478|   330k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1478:17): [True: 115k, False: 214k]
  ------------------
 1479|   115k|                break;
 1480|   115k|            }
 1481|   330k|        }
 1482|   136k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|   252k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34.8k, False: 101k]
  |  |  |  Branch (859:45): [True: 20.8k, False: 115k]
  |  |  |  Branch (859:45): [True: 13.9k, False: 101k]
  |  |  ------------------
  ------------------
 1483|  34.8k|            value = 0;
 1484|  34.8k|            return ranges::next(source.begin(),
 1485|  34.8k|                                ranges::distance(source.data(), start));
 1486|  34.8k|        }
 1487|   136k|    }
 1488|       |
 1489|   101k|    if constexpr (std::is_same_v<CharT, char>) {
 1490|   101k|        if (base == 10) {
  ------------------
  |  Branch (1490:13): [True: 73.1k, False: 28.7k]
  ------------------
 1491|  73.1k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3668|  73.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  73.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  73.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  73.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 910, False: 72.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    910|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    910|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    910|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    910|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    910|    }                                                  \
  |  |  |  | 3667|  73.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  72.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1492|  72.2k|                             detail::make_string_view_from_pointers(start, end),
 1493|  72.2k|                             value, sign == sign_type::minus_sign));
 1494|  72.2k|            return ranges::next(source.begin(),
 1495|  72.2k|                                ranges::distance(source.data(), ptr));
 1496|  73.1k|        }
 1497|   101k|    }
 1498|       |
 1499|   101k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|   101k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   101k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   101k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 466, False: 101k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    466|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    466|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    466|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    466|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    466|    }                                                  \
  |  |  |  | 3667|   101k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   101k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1500|   101k|                     detail::make_string_view_from_pointers(start, end), value,
 1501|   101k|                     base, sign == sign_type::minus_sign));
 1502|   101k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1503|   101k|}
_ZN3scn2v34impl19parse_integer_valueIwxEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1461|  19.3k|{
 1462|  19.3k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  19.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  19.3k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  19.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  19.3k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  19.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|  19.3k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  19.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1466|       |
 1467|  19.3k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1467:9): [True: 18.0k, False: 1.35k]
  ------------------
 1468|  18.0k|        SCN_UNLIKELY_ATTR
 1469|  18.0k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1470|  18.0k|                                     "Invalid integer value");
 1471|  18.0k|    }
 1472|       |
 1473|       |    // Skip leading zeroes
 1474|  1.35k|    auto start = source.data();
 1475|  1.35k|    const auto end = source.data() + source.size();
 1476|  1.35k|    {
 1477|  1.84k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1477:16): [True: 1.59k, False: 252]
  ------------------
 1478|  1.59k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1478:17): [True: 1.10k, False: 488]
  ------------------
 1479|  1.10k|                break;
 1480|  1.10k|            }
 1481|  1.59k|        }
 1482|  1.35k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|  2.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 400, False: 954]
  |  |  |  Branch (859:45): [True: 252, False: 1.10k]
  |  |  |  Branch (859:45): [True: 148, False: 954]
  |  |  ------------------
  ------------------
 1483|    400|            value = 0;
 1484|    400|            return ranges::next(source.begin(),
 1485|    400|                                ranges::distance(source.data(), start));
 1486|    400|        }
 1487|  1.35k|    }
 1488|       |
 1489|       |    if constexpr (std::is_same_v<CharT, char>) {
 1490|       |        if (base == 10) {
 1491|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1492|       |                             detail::make_string_view_from_pointers(start, end),
 1493|       |                             value, sign == sign_type::minus_sign));
 1494|       |            return ranges::next(source.begin(),
 1495|       |                                ranges::distance(source.data(), ptr));
 1496|       |        }
 1497|       |    }
 1498|       |
 1499|    954|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|    954|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    954|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    954|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    954|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 934]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     20|    }                                                  \
  |  |  |  | 3667|    954|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    934|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1500|    934|                     detail::make_string_view_from_pointers(start, end), value,
 1501|    934|                     base, sign == sign_type::minus_sign));
 1502|    934|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1503|    954|}
_ZN3scn2v34impl19parse_integer_valueIchEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1461|  97.8k|{
 1462|  97.8k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  97.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  97.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  97.8k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  97.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  97.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  97.8k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  97.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  97.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|  97.8k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  97.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  97.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1466|       |
 1467|  97.8k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1467:9): [True: 3.66k, False: 94.2k]
  ------------------
 1468|  3.66k|        SCN_UNLIKELY_ATTR
 1469|  3.66k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1470|  3.66k|                                     "Invalid integer value");
 1471|  3.66k|    }
 1472|       |
 1473|       |    // Skip leading zeroes
 1474|  94.2k|    auto start = source.data();
 1475|  94.2k|    const auto end = source.data() + source.size();
 1476|  94.2k|    {
 1477|   285k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1477:16): [True: 268k, False: 17.5k]
  ------------------
 1478|   268k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1478:17): [True: 76.7k, False: 191k]
  ------------------
 1479|  76.7k|                break;
 1480|  76.7k|            }
 1481|   268k|        }
 1482|  94.2k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|   170k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 29.2k, False: 64.9k]
  |  |  |  Branch (859:45): [True: 17.5k, False: 76.7k]
  |  |  |  Branch (859:45): [True: 11.7k, False: 64.9k]
  |  |  ------------------
  ------------------
 1483|  29.2k|            value = 0;
 1484|  29.2k|            return ranges::next(source.begin(),
 1485|  29.2k|                                ranges::distance(source.data(), start));
 1486|  29.2k|        }
 1487|  94.2k|    }
 1488|       |
 1489|  64.9k|    if constexpr (std::is_same_v<CharT, char>) {
 1490|  64.9k|        if (base == 10) {
  ------------------
  |  Branch (1490:13): [True: 47.1k, False: 17.8k]
  ------------------
 1491|  47.1k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3668|  47.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  47.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  47.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  47.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.68k, False: 45.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.68k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.68k|    }                                                  \
  |  |  |  | 3667|  47.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  45.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1492|  45.4k|                             detail::make_string_view_from_pointers(start, end),
 1493|  45.4k|                             value, sign == sign_type::minus_sign));
 1494|  45.4k|            return ranges::next(source.begin(),
 1495|  45.4k|                                ranges::distance(source.data(), ptr));
 1496|  47.1k|        }
 1497|  64.9k|    }
 1498|       |
 1499|  63.9k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|  64.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  64.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  64.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  64.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.03k, False: 63.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.03k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.03k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.03k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.03k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.03k|    }                                                  \
  |  |  |  | 3667|  64.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  63.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1500|  63.9k|                     detail::make_string_view_from_pointers(start, end), value,
 1501|  63.9k|                     base, sign == sign_type::minus_sign));
 1502|  63.9k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1503|  64.9k|}
_ZN3scn2v34impl19parse_integer_valueIwhEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1461|  18.7k|{
 1462|  18.7k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  18.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  18.7k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  18.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  18.7k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  18.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|  18.7k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  18.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1466|       |
 1467|  18.7k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1467:9): [True: 17.7k, False: 992]
  ------------------
 1468|  17.7k|        SCN_UNLIKELY_ATTR
 1469|  17.7k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1470|  17.7k|                                     "Invalid integer value");
 1471|  17.7k|    }
 1472|       |
 1473|       |    // Skip leading zeroes
 1474|    992|    auto start = source.data();
 1475|    992|    const auto end = source.data() + source.size();
 1476|    992|    {
 1477|  1.39k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1477:16): [True: 1.19k, False: 197]
  ------------------
 1478|  1.19k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1478:17): [True: 795, False: 398]
  ------------------
 1479|    795|                break;
 1480|    795|            }
 1481|  1.19k|        }
 1482|    992|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|  1.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 310, False: 682]
  |  |  |  Branch (859:45): [True: 197, False: 795]
  |  |  |  Branch (859:45): [True: 113, False: 682]
  |  |  ------------------
  ------------------
 1483|    310|            value = 0;
 1484|    310|            return ranges::next(source.begin(),
 1485|    310|                                ranges::distance(source.data(), start));
 1486|    310|        }
 1487|    992|    }
 1488|       |
 1489|       |    if constexpr (std::is_same_v<CharT, char>) {
 1490|       |        if (base == 10) {
 1491|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1492|       |                             detail::make_string_view_from_pointers(start, end),
 1493|       |                             value, sign == sign_type::minus_sign));
 1494|       |            return ranges::next(source.begin(),
 1495|       |                                ranges::distance(source.data(), ptr));
 1496|       |        }
 1497|       |    }
 1498|       |
 1499|    682|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|    682|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    682|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    682|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    682|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 250, False: 432]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    250|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    250|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    250|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    250|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    250|    }                                                  \
  |  |  |  | 3667|    682|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    432|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1500|    432|                     detail::make_string_view_from_pointers(start, end), value,
 1501|    432|                     base, sign == sign_type::minus_sign));
 1502|    432|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1503|    682|}
_ZN3scn2v34impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1461|   107k|{
 1462|   107k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|   107k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   107k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|   107k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|   107k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   107k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|   107k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|   107k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   107k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|   107k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|   107k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   107k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1466|       |
 1467|   107k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1467:9): [True: 3.89k, False: 103k]
  ------------------
 1468|  3.89k|        SCN_UNLIKELY_ATTR
 1469|  3.89k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1470|  3.89k|                                     "Invalid integer value");
 1471|  3.89k|    }
 1472|       |
 1473|       |    // Skip leading zeroes
 1474|   103k|    auto start = source.data();
 1475|   103k|    const auto end = source.data() + source.size();
 1476|   103k|    {
 1477|   300k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1477:16): [True: 281k, False: 18.7k]
  ------------------
 1478|   281k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1478:17): [True: 84.7k, False: 196k]
  ------------------
 1479|  84.7k|                break;
 1480|  84.7k|            }
 1481|   281k|        }
 1482|   103k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|   188k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 31.2k, False: 72.1k]
  |  |  |  Branch (859:45): [True: 18.7k, False: 84.7k]
  |  |  |  Branch (859:45): [True: 12.5k, False: 72.1k]
  |  |  ------------------
  ------------------
 1483|  31.2k|            value = 0;
 1484|  31.2k|            return ranges::next(source.begin(),
 1485|  31.2k|                                ranges::distance(source.data(), start));
 1486|  31.2k|        }
 1487|   103k|    }
 1488|       |
 1489|  72.1k|    if constexpr (std::is_same_v<CharT, char>) {
 1490|  72.1k|        if (base == 10) {
  ------------------
  |  Branch (1490:13): [True: 52.2k, False: 19.8k]
  ------------------
 1491|  52.2k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3668|  52.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  52.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  52.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  52.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 895, False: 51.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    895|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    895|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    895|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    895|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    895|    }                                                  \
  |  |  |  | 3667|  52.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  51.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1492|  51.4k|                             detail::make_string_view_from_pointers(start, end),
 1493|  51.4k|                             value, sign == sign_type::minus_sign));
 1494|  51.4k|            return ranges::next(source.begin(),
 1495|  51.4k|                                ranges::distance(source.data(), ptr));
 1496|  52.2k|        }
 1497|  72.1k|    }
 1498|       |
 1499|  71.6k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|  72.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  72.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  72.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  72.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 486, False: 71.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    486|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    486|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    486|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    486|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    486|    }                                                  \
  |  |  |  | 3667|  72.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  71.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1500|  71.6k|                     detail::make_string_view_from_pointers(start, end), value,
 1501|  71.6k|                     base, sign == sign_type::minus_sign));
 1502|  71.6k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1503|  72.1k|}
_ZN3scn2v34impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1461|  18.8k|{
 1462|  18.8k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  18.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  18.8k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  18.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  18.8k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  18.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|  18.8k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  18.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1466|       |
 1467|  18.8k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1467:9): [True: 17.8k, False: 1.01k]
  ------------------
 1468|  17.8k|        SCN_UNLIKELY_ATTR
 1469|  17.8k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1470|  17.8k|                                     "Invalid integer value");
 1471|  17.8k|    }
 1472|       |
 1473|       |    // Skip leading zeroes
 1474|  1.01k|    auto start = source.data();
 1475|  1.01k|    const auto end = source.data() + source.size();
 1476|  1.01k|    {
 1477|  1.41k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1477:16): [True: 1.21k, False: 197]
  ------------------
 1478|  1.21k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1478:17): [True: 817, False: 398]
  ------------------
 1479|    817|                break;
 1480|    817|            }
 1481|  1.21k|        }
 1482|  1.01k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|  1.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 310, False: 704]
  |  |  |  Branch (859:45): [True: 197, False: 817]
  |  |  |  Branch (859:45): [True: 113, False: 704]
  |  |  ------------------
  ------------------
 1483|    310|            value = 0;
 1484|    310|            return ranges::next(source.begin(),
 1485|    310|                                ranges::distance(source.data(), start));
 1486|    310|        }
 1487|  1.01k|    }
 1488|       |
 1489|       |    if constexpr (std::is_same_v<CharT, char>) {
 1490|       |        if (base == 10) {
 1491|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1492|       |                             detail::make_string_view_from_pointers(start, end),
 1493|       |                             value, sign == sign_type::minus_sign));
 1494|       |            return ranges::next(source.begin(),
 1495|       |                                ranges::distance(source.data(), ptr));
 1496|       |        }
 1497|       |    }
 1498|       |
 1499|    704|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|    704|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    704|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    704|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    704|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 144, False: 560]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    144|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    144|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    144|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    144|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    144|    }                                                  \
  |  |  |  | 3667|    704|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    560|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1500|    560|                     detail::make_string_view_from_pointers(start, end), value,
 1501|    560|                     base, sign == sign_type::minus_sign));
 1502|    560|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1503|    704|}
_ZN3scn2v34impl19parse_integer_valueIcyEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1461|   108k|{
 1462|   108k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|   108k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   108k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|   108k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|   108k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   108k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|   108k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|   108k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   108k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|   108k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|   108k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   108k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1466|       |
 1467|   108k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1467:9): [True: 3.97k, False: 104k]
  ------------------
 1468|  3.97k|        SCN_UNLIKELY_ATTR
 1469|  3.97k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1470|  3.97k|                                     "Invalid integer value");
 1471|  3.97k|    }
 1472|       |
 1473|       |    // Skip leading zeroes
 1474|   104k|    auto start = source.data();
 1475|   104k|    const auto end = source.data() + source.size();
 1476|   104k|    {
 1477|   301k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1477:16): [True: 282k, False: 18.7k]
  ------------------
 1478|   282k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1478:17): [True: 85.5k, False: 197k]
  ------------------
 1479|  85.5k|                break;
 1480|  85.5k|            }
 1481|   282k|        }
 1482|   104k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|   189k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 31.3k, False: 72.9k]
  |  |  |  Branch (859:45): [True: 18.7k, False: 85.5k]
  |  |  |  Branch (859:45): [True: 12.6k, False: 72.9k]
  |  |  ------------------
  ------------------
 1483|  31.3k|            value = 0;
 1484|  31.3k|            return ranges::next(source.begin(),
 1485|  31.3k|                                ranges::distance(source.data(), start));
 1486|  31.3k|        }
 1487|   104k|    }
 1488|       |
 1489|  72.9k|    if constexpr (std::is_same_v<CharT, char>) {
 1490|  72.9k|        if (base == 10) {
  ------------------
  |  Branch (1490:13): [True: 52.9k, False: 20.0k]
  ------------------
 1491|  52.9k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3668|  52.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  52.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  52.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  52.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 448, False: 52.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    448|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    448|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    448|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    448|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    448|    }                                                  \
  |  |  |  | 3667|  52.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  52.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1492|  52.4k|                             detail::make_string_view_from_pointers(start, end),
 1493|  52.4k|                             value, sign == sign_type::minus_sign));
 1494|  52.4k|            return ranges::next(source.begin(),
 1495|  52.4k|                                ranges::distance(source.data(), ptr));
 1496|  52.9k|        }
 1497|  72.9k|    }
 1498|       |
 1499|  72.6k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|  72.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  72.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  72.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  72.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 262, False: 72.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    262|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    262|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    262|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    262|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    262|    }                                                  \
  |  |  |  | 3667|  72.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  72.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1500|  72.6k|                     detail::make_string_view_from_pointers(start, end), value,
 1501|  72.6k|                     base, sign == sign_type::minus_sign));
 1502|  72.6k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1503|  72.9k|}
_ZN3scn2v34impl19parse_integer_valueIwyEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1461|  18.8k|{
 1462|  18.8k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  18.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  18.8k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  18.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  18.8k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  18.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|  18.8k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  18.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1466|       |
 1467|  18.8k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1467:9): [True: 17.8k, False: 1.05k]
  ------------------
 1468|  17.8k|        SCN_UNLIKELY_ATTR
 1469|  17.8k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1470|  17.8k|                                     "Invalid integer value");
 1471|  17.8k|    }
 1472|       |
 1473|       |    // Skip leading zeroes
 1474|  1.05k|    auto start = source.data();
 1475|  1.05k|    const auto end = source.data() + source.size();
 1476|  1.05k|    {
 1477|  1.45k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1477:16): [True: 1.25k, False: 197]
  ------------------
 1478|  1.25k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1478:17): [True: 861, False: 398]
  ------------------
 1479|    861|                break;
 1480|    861|            }
 1481|  1.25k|        }
 1482|  1.05k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|  1.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 310, False: 748]
  |  |  |  Branch (859:45): [True: 197, False: 861]
  |  |  |  Branch (859:45): [True: 113, False: 748]
  |  |  ------------------
  ------------------
 1483|    310|            value = 0;
 1484|    310|            return ranges::next(source.begin(),
 1485|    310|                                ranges::distance(source.data(), start));
 1486|    310|        }
 1487|  1.05k|    }
 1488|       |
 1489|       |    if constexpr (std::is_same_v<CharT, char>) {
 1490|       |        if (base == 10) {
 1491|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1492|       |                             detail::make_string_view_from_pointers(start, end),
 1493|       |                             value, sign == sign_type::minus_sign));
 1494|       |            return ranges::next(source.begin(),
 1495|       |                                ranges::distance(source.data(), ptr));
 1496|       |        }
 1497|       |    }
 1498|       |
 1499|    748|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|    748|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    748|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    748|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    748|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8, False: 740]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      8|    }                                                  \
  |  |  |  | 3667|    748|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    740|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1500|    740|                     detail::make_string_view_from_pointers(start, end), value,
 1501|    740|                     base, sign == sign_type::minus_sign));
 1502|    740|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1503|    748|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2184|   212k|{
 2185|   212k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2186|   212k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2192|   212k|{
 2193|   212k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2194|   212k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   212k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 169k, False: 42.3k]
  |  |  ------------------
  ------------------
 2195|   169k|        source.sync(*n);
 2196|   169k|    }
 2197|  42.3k|    else {
 2198|  42.3k|        source.sync_all();
 2199|  42.3k|    }
 2200|   212k|    return n;
 2201|   212k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2208|  86.2k|{
 2209|  86.2k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2210|  86.2k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2216|  86.2k|{
 2217|  86.2k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2218|  86.2k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  86.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.50k, False: 84.7k]
  |  |  ------------------
  ------------------
 2219|  1.50k|        source.sync(*n);
 2220|  1.50k|    }
 2221|  84.7k|    else {
 2222|  84.7k|        source.sync_all();
 2223|  84.7k|    }
 2224|  86.2k|    return n;
 2225|  86.2k|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  202|   859k|{
  203|   859k|    return find_classic_impl(
  204|   859k|        source, [](char ch) { return !is_ascii_space(ch); },
  205|   859k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  206|   859k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2141|   212k|{
 2142|   212k|    return vscan_internal(source, format, args);
 2143|   212k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2147|   212k|{
 2148|   212k|    auto n = vscan_internal(source, format, args);
 2149|   212k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   212k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 169k, False: 42.3k]
  |  |  ------------------
  ------------------
 2150|   169k|        source.sync(*n);
 2151|   169k|    }
 2152|  42.3k|    else {
 2153|  42.3k|        source.sync_all();
 2154|  42.3k|    }
 2155|   212k|    return n;
 2156|   212k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2161|  86.2k|{
 2162|  86.2k|    return vscan_internal(source, format, args);
 2163|  86.2k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2167|  86.2k|{
 2168|  86.2k|    auto n = vscan_internal(source, format, args);
 2169|  86.2k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  86.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.50k, False: 84.7k]
  |  |  ------------------
  ------------------
 2170|  1.50k|        source.sync(*n);
 2171|  1.50k|    }
 2172|  84.7k|    else {
 2173|  84.7k|        source.sync_all();
 2174|  84.7k|    }
 2175|  86.2k|    return n;
 2176|  86.2k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2251|  32.3k|{
 2252|  32.3k|    return vscan_value_internal(source, arg);
 2253|  32.3k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2256|  31.8k|{
 2257|  31.8k|    auto n = vscan_value_internal(source, arg);
 2258|  31.8k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  31.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 27.6k, False: 4.23k]
  |  |  ------------------
  ------------------
 2259|  27.6k|        source.sync(*n);
 2260|  27.6k|    }
 2261|  4.23k|    else {
 2262|  4.23k|        source.sync_all();
 2263|  4.23k|    }
 2264|  31.8k|    return n;
 2265|  31.8k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2270|  8.71k|{
 2271|  8.71k|    return vscan_value_internal(source, arg);
 2272|  8.71k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2276|  8.71k|{
 2277|  8.71k|    auto n = vscan_value_internal(source, arg);
 2278|  8.71k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  8.71k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 246, False: 8.47k]
  |  |  ------------------
  ------------------
 2279|    246|        source.sync(*n);
 2280|    246|    }
 2281|  8.47k|    else {
 2282|  8.47k|        source.sync_all();
 2283|  8.47k|    }
 2284|  8.71k|    return n;
 2285|  8.71k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_122check_integer_overflowIaEEbmmib:
 1369|  84.1k|{
 1370|  84.1k|    auto max_digits = maxdigits_u64(base);
 1371|  84.1k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1371:9): [True: 938, False: 83.1k]
  ------------------
 1372|    938|        return true;
 1373|    938|    }
 1374|  83.1k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1374:9): [True: 318, False: 82.8k]
  |  Branch (1374:39): [True: 106, False: 212]
  ------------------
 1375|    106|        return true;
 1376|    106|    }
 1377|  83.0k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1378|  83.0k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1378:13): [True: 4.61k, False: 78.4k]
  ------------------
 1379|  83.0k|                      static_cast<uint64_t>(is_negative)) {
 1380|  4.61k|            SCN_UNLIKELY_ATTR
 1381|  4.61k|            return true;
 1382|  4.61k|        }
 1383|  83.0k|    }
 1384|       |
 1385|  78.4k|    return false;
 1386|  83.1k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113maxdigits_u64Ei:
 1315|   500k|{
 1316|   500k|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  |  924|   500k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   500k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1317|   500k|    return maxdigits_u64_table[static_cast<size_t>(base)];
 1318|   500k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_112min_safe_u64Ei:
 1359|  1.79k|{
 1360|  1.79k|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  |  924|  1.79k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.79k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1361|  1.79k|    return min_safe_u64_table[static_cast<size_t>(base)];
 1362|  1.79k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_112store_resultIaEET_mb:
 1390|  78.4k|{
 1391|  78.4k|    if (is_negative) {
  ------------------
  |  Branch (1391:9): [True: 15.0k, False: 63.3k]
  ------------------
 1392|  15.0k|        SCN_MSVC_PUSH
 1393|  15.0k|        SCN_MSVC_IGNORE(4146)
 1394|  15.0k|        return static_cast<T>(
 1395|  15.0k|            -std::numeric_limits<T>::max() -
 1396|  15.0k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1397|  15.0k|        SCN_MSVC_POP
 1398|  15.0k|    }
 1399|       |
 1400|  63.3k|    return static_cast<T>(u64val);
 1401|  78.4k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_122check_integer_overflowIiEEbmmib:
 1369|   101k|{
 1370|   101k|    auto max_digits = maxdigits_u64(base);
 1371|   101k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1371:9): [True: 1.00k, False: 100k]
  ------------------
 1372|  1.00k|        return true;
 1373|  1.00k|    }
 1374|   100k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1374:9): [True: 326, False: 100k]
  |  Branch (1374:39): [True: 106, False: 220]
  ------------------
 1375|    106|        return true;
 1376|    106|    }
 1377|   100k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1378|   100k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1378:13): [True: 1.61k, False: 98.8k]
  ------------------
 1379|   100k|                      static_cast<uint64_t>(is_negative)) {
 1380|  1.61k|            SCN_UNLIKELY_ATTR
 1381|  1.61k|            return true;
 1382|  1.61k|        }
 1383|   100k|    }
 1384|       |
 1385|  98.8k|    return false;
 1386|   100k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_112store_resultIiEET_mb:
 1390|  98.8k|{
 1391|  98.8k|    if (is_negative) {
  ------------------
  |  Branch (1391:9): [True: 16.4k, False: 82.3k]
  ------------------
 1392|  16.4k|        SCN_MSVC_PUSH
 1393|  16.4k|        SCN_MSVC_IGNORE(4146)
 1394|  16.4k|        return static_cast<T>(
 1395|  16.4k|            -std::numeric_limits<T>::max() -
 1396|  16.4k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1397|  16.4k|        SCN_MSVC_POP
 1398|  16.4k|    }
 1399|       |
 1400|  82.3k|    return static_cast<T>(u64val);
 1401|  98.8k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_122check_integer_overflowIxEEbmmib:
 1369|   102k|{
 1370|   102k|    auto max_digits = maxdigits_u64(base);
 1371|   102k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1371:9): [True: 1.09k, False: 101k]
  ------------------
 1372|  1.09k|        return true;
 1373|  1.09k|    }
 1374|   101k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1374:9): [True: 362, False: 101k]
  |  Branch (1374:39): [True: 106, False: 256]
  ------------------
 1375|    106|        return true;
 1376|    106|    }
 1377|   101k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1378|   101k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1378:13): [True: 198, False: 101k]
  ------------------
 1379|   101k|                      static_cast<uint64_t>(is_negative)) {
 1380|    198|            SCN_UNLIKELY_ATTR
 1381|    198|            return true;
 1382|    198|        }
 1383|   101k|    }
 1384|       |
 1385|   101k|    return false;
 1386|   101k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_112store_resultIxEET_mb:
 1390|   101k|{
 1391|   101k|    if (is_negative) {
  ------------------
  |  Branch (1391:9): [True: 17.1k, False: 84.3k]
  ------------------
 1392|  17.1k|        SCN_MSVC_PUSH
 1393|  17.1k|        SCN_MSVC_IGNORE(4146)
 1394|  17.1k|        return static_cast<T>(
 1395|  17.1k|            -std::numeric_limits<T>::max() -
 1396|  17.1k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1397|  17.1k|        SCN_MSVC_POP
 1398|  17.1k|    }
 1399|       |
 1400|  84.3k|    return static_cast<T>(u64val);
 1401|   101k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_122check_integer_overflowIhEEbmmib:
 1369|  65.6k|{
 1370|  65.6k|    auto max_digits = maxdigits_u64(base);
 1371|  65.6k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1371:9): [True: 646, False: 65.0k]
  ------------------
 1372|    646|        return true;
 1373|    646|    }
 1374|  65.0k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1374:9): [True: 224, False: 64.7k]
  |  Branch (1374:39): [True: 58, False: 166]
  ------------------
 1375|     58|        return true;
 1376|     58|    }
 1377|  64.9k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1378|  64.9k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1378:13): [True: 2.26k, False: 62.6k]
  ------------------
 1379|  64.9k|                      static_cast<uint64_t>(is_negative)) {
 1380|  2.26k|            SCN_UNLIKELY_ATTR
 1381|  2.26k|            return true;
 1382|  2.26k|        }
 1383|  64.9k|    }
 1384|       |
 1385|  62.6k|    return false;
 1386|  65.0k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_112store_resultIhEET_mb:
 1390|  62.6k|{
 1391|  62.6k|    if (is_negative) {
  ------------------
  |  Branch (1391:9): [True: 0, False: 62.6k]
  ------------------
 1392|      0|        SCN_MSVC_PUSH
 1393|      0|        SCN_MSVC_IGNORE(4146)
 1394|      0|        return static_cast<T>(
 1395|      0|            -std::numeric_limits<T>::max() -
 1396|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1397|      0|        SCN_MSVC_POP
 1398|      0|    }
 1399|       |
 1400|  62.6k|    return static_cast<T>(u64val);
 1401|  62.6k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_122check_integer_overflowIjEEbmmib:
 1369|  72.8k|{
 1370|  72.8k|    auto max_digits = maxdigits_u64(base);
 1371|  72.8k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1371:9): [True: 646, False: 72.2k]
  ------------------
 1372|    646|        return true;
 1373|    646|    }
 1374|  72.2k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1374:9): [True: 228, False: 72.0k]
  |  Branch (1374:39): [True: 58, False: 170]
  ------------------
 1375|     58|        return true;
 1376|     58|    }
 1377|  72.1k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1378|  72.1k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1378:13): [True: 821, False: 71.3k]
  ------------------
 1379|  72.1k|                      static_cast<uint64_t>(is_negative)) {
 1380|    821|            SCN_UNLIKELY_ATTR
 1381|    821|            return true;
 1382|    821|        }
 1383|  72.1k|    }
 1384|       |
 1385|  71.3k|    return false;
 1386|  72.2k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_112store_resultIjEET_mb:
 1390|  71.3k|{
 1391|  71.3k|    if (is_negative) {
  ------------------
  |  Branch (1391:9): [True: 0, False: 71.3k]
  ------------------
 1392|      0|        SCN_MSVC_PUSH
 1393|      0|        SCN_MSVC_IGNORE(4146)
 1394|      0|        return static_cast<T>(
 1395|      0|            -std::numeric_limits<T>::max() -
 1396|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1397|      0|        SCN_MSVC_POP
 1398|      0|    }
 1399|       |
 1400|  71.3k|    return static_cast<T>(u64val);
 1401|  71.3k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_122check_integer_overflowIyEEbmmib:
 1369|  73.7k|{
 1370|  73.7k|    auto max_digits = maxdigits_u64(base);
 1371|  73.7k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1371:9): [True: 660, False: 73.0k]
  ------------------
 1372|    660|        return true;
 1373|    660|    }
 1374|  73.0k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1374:9): [True: 336, False: 72.7k]
  |  Branch (1374:39): [True: 58, False: 278]
  ------------------
 1375|     58|        return true;
 1376|     58|    }
 1377|  72.9k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1378|  72.9k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1378:13): [True: 0, False: 72.9k]
  ------------------
 1379|  72.9k|                      static_cast<uint64_t>(is_negative)) {
 1380|      0|            SCN_UNLIKELY_ATTR
 1381|      0|            return true;
 1382|      0|        }
 1383|  72.9k|    }
 1384|       |
 1385|  72.9k|    return false;
 1386|  73.0k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_112store_resultIyEET_mb:
 1390|  72.9k|{
 1391|  72.9k|    if (is_negative) {
  ------------------
  |  Branch (1391:9): [True: 0, False: 72.9k]
  ------------------
 1392|      0|        SCN_MSVC_PUSH
 1393|      0|        SCN_MSVC_IGNORE(4146)
 1394|      0|        return static_cast<T>(
 1395|      0|            -std::numeric_limits<T>::max() -
 1396|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1397|      0|        SCN_MSVC_POP
 1398|      0|    }
 1399|       |
 1400|  72.9k|    return static_cast<T>(u64val);
 1401|  72.9k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121get_eight_digits_wordEPKc:
 1253|   188k|{
 1254|   188k|    uint64_t val{};
 1255|   188k|    std::memcpy(&val, input, sizeof(uint64_t));
 1256|       |    if constexpr (SCN_IS_BIG_ENDIAN) {
 1257|       |        val = byteswap(val);
 1258|       |    }
 1259|   188k|    return val;
 1260|   188k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_140parse_eight_decimal_digits_unrolled_fastEm:
 1263|  33.2k|{
 1264|  33.2k|    constexpr uint64_t mask = 0x000000FF000000FF;
 1265|  33.2k|    constexpr uint64_t mul1 = 0x000F424000000064;  // 100 + (1000000ULL << 32)
 1266|  33.2k|    constexpr uint64_t mul2 = 0x0000271000000001;  // 1 + (10000ULL << 32)
 1267|  33.2k|    word -= 0x3030303030303030;
 1268|  33.2k|    word = (word * 10) + (word >> 8);  // val = (val * 2561) >> 8;
 1269|  33.2k|    word = (((word & mask) * mul1) + (((word >> 16) & mask) * mul2)) >> 32;
 1270|  33.2k|    return static_cast<uint32_t>(word);
 1271|  33.2k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_141is_word_made_of_eight_decimal_digits_fastEm:
 1274|   155k|{
 1275|   155k|    return !((((word + 0x4646464646464646) | (word - 0x3030303030303030)) &
 1276|   155k|              0x8080808080808080));
 1277|   155k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  105|   524k|{
  106|   524k|    static_assert(sizeof(*source.data()) == 1);
  107|   524k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|   524k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   524k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  108|   524k|    uint64_t word{};
  109|   524k|    std::memcpy(&word, source.data(), source.size());
  110|       |
  111|   524k|    return has_byte_greater(word, 127) != 0;
  112|   524k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  118|   859k|{
  119|   859k|    auto it = source.begin();
  120|       |
  121|   939k|    while (it != source.end()) {
  ------------------
  |  Branch (121:12): [True: 524k, False: 414k]
  ------------------
  122|   524k|        auto sv =
  123|   524k|            detail::make_string_view_from_iterators<char>(it, source.end())
  124|   524k|                .substr(0, 8);
  125|       |
  126|   524k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (126:13): [True: 500k, False: 24.7k]
  ------------------
  127|   500k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  128|   500k|            it = detail::make_string_view_iterator(source, tmp_it);
  129|   500k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (129:17): [True: 422k, False: 77.8k]
  ------------------
  130|   422k|                break;
  131|   422k|            }
  132|  77.8k|            continue;
  133|   500k|        }
  134|       |
  135|  34.4k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (135:28): [True: 32.3k, False: 2.05k]
  ------------------
  136|  32.3k|            auto tmp =
  137|  32.3k|                detail::make_string_view_from_iterators<char>(it, source.end());
  138|  32.3k|            auto res = get_next_code_point(tmp);
  139|  32.3k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (139:17): [True: 22.6k, False: 9.69k]
  ------------------
  140|  22.6k|                return it;
  141|  22.6k|            }
  142|  9.69k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  143|  9.69k|            it = detail::make_string_view_iterator(source, res.iterator);
  144|  9.69k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  9.69k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.69k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  145|  9.69k|        }
  146|  24.7k|    }
  147|       |
  148|   836k|    return detail::make_string_view_iterator(source, it);
  149|   859k|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  204|   871k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  205|  32.3k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_126parse_decimal_integer_fastIaEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1407|  62.1k|{
 1408|  62.1k|    uint64_t u64val{};
 1409|  62.1k|    auto ptr = parse_decimal_integer_fast_impl(
 1410|  62.1k|        input.data(), input.data() + input.size(), u64val);
 1411|       |
 1412|  62.1k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1413|  62.1k|    if (SCN_UNLIKELY(
  ------------------
  |  |  859|  62.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.37k, False: 58.7k]
  |  |  ------------------
  ------------------
 1414|  62.1k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1415|  3.37k|        return unexpected_scan_error(scan_error::value_out_of_range,
 1416|  3.37k|                                     "Integer overflow");
 1417|  3.37k|    }
 1418|       |
 1419|  58.7k|    val = store_result<T>(u64val, is_negative);
 1420|  58.7k|    return ptr;
 1421|  62.1k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_131parse_decimal_integer_fast_implEPKcS4_Rm:
 1295|   359k|{
 1296|   359k|    loop_parse_if_eight_decimal_digits(begin, end, val);
 1297|       |
 1298|   807k|    while (begin != end) {
  ------------------
  |  Branch (1298:12): [True: 584k, False: 223k]
  ------------------
 1299|   584k|        const auto digit = char_to_int(*begin);
 1300|   584k|        if (digit >= 10) {
  ------------------
  |  Branch (1300:13): [True: 136k, False: 447k]
  ------------------
 1301|   136k|            break;
 1302|   136k|        }
 1303|   447k|        val = 10ull * val + static_cast<uint64_t>(digit);
 1304|   447k|        ++begin;
 1305|   447k|    }
 1306|       |
 1307|   359k|    return begin;
 1308|   359k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_134loop_parse_if_eight_decimal_digitsERPKcS4_Rm:
 1282|   359k|{
 1283|   359k|    while (
 1284|   393k|        std::distance(p, end) >= 8 &&
  ------------------
  |  Branch (1284:9): [True: 155k, False: 237k]
  ------------------
 1285|   393k|        is_word_made_of_eight_decimal_digits_fast(get_eight_digits_word(p))) {
  ------------------
  |  Branch (1285:9): [True: 33.2k, False: 122k]
  ------------------
 1286|  33.2k|        val = val * 100'000'000 + parse_eight_decimal_digits_unrolled_fast(
 1287|  33.2k|                                      get_eight_digits_word(p));
 1288|  33.2k|        p += 8;
 1289|  33.2k|    }
 1290|   359k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIcaEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1428|  21.0k|{
 1429|  21.0k|    uint64_t u64val{};
 1430|  21.0k|    const CharT* begin = input.data();
 1431|  21.0k|    const CharT* const end = input.data() + input.size();
 1432|       |
 1433|  74.0k|    while (begin != end) {
  ------------------
  |  Branch (1433:12): [True: 63.0k, False: 10.9k]
  ------------------
 1434|  63.0k|        const auto digit = char_to_int(*begin);
 1435|  63.0k|        if (digit >= base) {
  ------------------
  |  Branch (1435:13): [True: 10.0k, False: 52.9k]
  ------------------
 1436|  10.0k|            break;
 1437|  10.0k|        }
 1438|  52.9k|        u64val =
 1439|  52.9k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1440|  52.9k|        ++begin;
 1441|  52.9k|    }
 1442|       |
 1443|  21.0k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1444|  21.0k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|  21.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.95k, False: 19.1k]
  |  |  ------------------
  ------------------
 1445|  21.0k|                                               is_negative))) {
 1446|  1.95k|        return unexpected_scan_error(scan_error::value_out_of_range,
 1447|  1.95k|                                     "Integer overflow");
 1448|  1.95k|    }
 1449|       |
 1450|  19.1k|    val = store_result<T>(u64val, is_negative);
 1451|  19.1k|    return begin;
 1452|  21.0k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIwaEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1428|    888|{
 1429|    888|    uint64_t u64val{};
 1430|    888|    const CharT* begin = input.data();
 1431|    888|    const CharT* const end = input.data() + input.size();
 1432|       |
 1433|  4.60k|    while (begin != end) {
  ------------------
  |  Branch (1433:12): [True: 3.99k, False: 611]
  ------------------
 1434|  3.99k|        const auto digit = char_to_int(*begin);
 1435|  3.99k|        if (digit >= base) {
  ------------------
  |  Branch (1435:13): [True: 277, False: 3.71k]
  ------------------
 1436|    277|            break;
 1437|    277|        }
 1438|  3.71k|        u64val =
 1439|  3.71k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1440|  3.71k|        ++begin;
 1441|  3.71k|    }
 1442|       |
 1443|    888|    auto digits_count = static_cast<size_t>(begin - input.data());
 1444|    888|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|    888|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 332, False: 556]
  |  |  ------------------
  ------------------
 1445|    888|                                               is_negative))) {
 1446|    332|        return unexpected_scan_error(scan_error::value_out_of_range,
 1447|    332|                                     "Integer overflow");
 1448|    332|    }
 1449|       |
 1450|    556|    val = store_result<T>(u64val, is_negative);
 1451|    556|    return begin;
 1452|    888|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_126parse_decimal_integer_fastIiEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1407|  72.1k|{
 1408|  72.1k|    uint64_t u64val{};
 1409|  72.1k|    auto ptr = parse_decimal_integer_fast_impl(
 1410|  72.1k|        input.data(), input.data() + input.size(), u64val);
 1411|       |
 1412|  72.1k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1413|  72.1k|    if (SCN_UNLIKELY(
  ------------------
  |  |  859|  72.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.67k, False: 70.5k]
  |  |  ------------------
  ------------------
 1414|  72.1k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1415|  1.67k|        return unexpected_scan_error(scan_error::value_out_of_range,
 1416|  1.67k|                                     "Integer overflow");
 1417|  1.67k|    }
 1418|       |
 1419|  70.5k|    val = store_result<T>(u64val, is_negative);
 1420|  70.5k|    return ptr;
 1421|  72.1k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIciEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1428|  28.4k|{
 1429|  28.4k|    uint64_t u64val{};
 1430|  28.4k|    const CharT* begin = input.data();
 1431|  28.4k|    const CharT* const end = input.data() + input.size();
 1432|       |
 1433|  92.7k|    while (begin != end) {
  ------------------
  |  Branch (1433:12): [True: 77.9k, False: 14.7k]
  ------------------
 1434|  77.9k|        const auto digit = char_to_int(*begin);
 1435|  77.9k|        if (digit >= base) {
  ------------------
  |  Branch (1435:13): [True: 13.6k, False: 64.2k]
  ------------------
 1436|  13.6k|            break;
 1437|  13.6k|        }
 1438|  64.2k|        u64val =
 1439|  64.2k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1440|  64.2k|        ++begin;
 1441|  64.2k|    }
 1442|       |
 1443|  28.4k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1444|  28.4k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|  28.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 906, False: 27.5k]
  |  |  ------------------
  ------------------
 1445|  28.4k|                                               is_negative))) {
 1446|    906|        return unexpected_scan_error(scan_error::value_out_of_range,
 1447|    906|                                     "Integer overflow");
 1448|    906|    }
 1449|       |
 1450|  27.5k|    val = store_result<T>(u64val, is_negative);
 1451|  27.5k|    return begin;
 1452|  28.4k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIwiEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1428|    914|{
 1429|    914|    uint64_t u64val{};
 1430|    914|    const CharT* begin = input.data();
 1431|    914|    const CharT* const end = input.data() + input.size();
 1432|       |
 1433|  4.65k|    while (begin != end) {
  ------------------
  |  Branch (1433:12): [True: 4.03k, False: 626]
  ------------------
 1434|  4.03k|        const auto digit = char_to_int(*begin);
 1435|  4.03k|        if (digit >= base) {
  ------------------
  |  Branch (1435:13): [True: 288, False: 3.74k]
  ------------------
 1436|    288|            break;
 1437|    288|        }
 1438|  3.74k|        u64val =
 1439|  3.74k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1440|  3.74k|        ++begin;
 1441|  3.74k|    }
 1442|       |
 1443|    914|    auto digits_count = static_cast<size_t>(begin - input.data());
 1444|    914|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|    914|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 148, False: 766]
  |  |  ------------------
  ------------------
 1445|    914|                                               is_negative))) {
 1446|    148|        return unexpected_scan_error(scan_error::value_out_of_range,
 1447|    148|                                     "Integer overflow");
 1448|    148|    }
 1449|       |
 1450|    766|    val = store_result<T>(u64val, is_negative);
 1451|    766|    return begin;
 1452|    914|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_126parse_decimal_integer_fastIxEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1407|  73.1k|{
 1408|  73.1k|    uint64_t u64val{};
 1409|  73.1k|    auto ptr = parse_decimal_integer_fast_impl(
 1410|  73.1k|        input.data(), input.data() + input.size(), u64val);
 1411|       |
 1412|  73.1k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1413|  73.1k|    if (SCN_UNLIKELY(
  ------------------
  |  |  859|  73.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 910, False: 72.2k]
  |  |  ------------------
  ------------------
 1414|  73.1k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1415|    910|        return unexpected_scan_error(scan_error::value_out_of_range,
 1416|    910|                                     "Integer overflow");
 1417|    910|    }
 1418|       |
 1419|  72.2k|    val = store_result<T>(u64val, is_negative);
 1420|  72.2k|    return ptr;
 1421|  73.1k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIcxEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1428|  28.7k|{
 1429|  28.7k|    uint64_t u64val{};
 1430|  28.7k|    const CharT* begin = input.data();
 1431|  28.7k|    const CharT* const end = input.data() + input.size();
 1432|       |
 1433|  95.3k|    while (begin != end) {
  ------------------
  |  Branch (1433:12): [True: 80.4k, False: 14.9k]
  ------------------
 1434|  80.4k|        const auto digit = char_to_int(*begin);
 1435|  80.4k|        if (digit >= base) {
  ------------------
  |  Branch (1435:13): [True: 13.8k, False: 66.6k]
  ------------------
 1436|  13.8k|            break;
 1437|  13.8k|        }
 1438|  66.6k|        u64val =
 1439|  66.6k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1440|  66.6k|        ++begin;
 1441|  66.6k|    }
 1442|       |
 1443|  28.7k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1444|  28.7k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|  28.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 466, False: 28.3k]
  |  |  ------------------
  ------------------
 1445|  28.7k|                                               is_negative))) {
 1446|    466|        return unexpected_scan_error(scan_error::value_out_of_range,
 1447|    466|                                     "Integer overflow");
 1448|    466|    }
 1449|       |
 1450|  28.3k|    val = store_result<T>(u64val, is_negative);
 1451|  28.3k|    return begin;
 1452|  28.7k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIwxEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1428|    954|{
 1429|    954|    uint64_t u64val{};
 1430|    954|    const CharT* begin = input.data();
 1431|    954|    const CharT* const end = input.data() + input.size();
 1432|       |
 1433|  4.73k|    while (begin != end) {
  ------------------
  |  Branch (1433:12): [True: 4.08k, False: 650]
  ------------------
 1434|  4.08k|        const auto digit = char_to_int(*begin);
 1435|  4.08k|        if (digit >= base) {
  ------------------
  |  Branch (1435:13): [True: 304, False: 3.78k]
  ------------------
 1436|    304|            break;
 1437|    304|        }
 1438|  3.78k|        u64val =
 1439|  3.78k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1440|  3.78k|        ++begin;
 1441|  3.78k|    }
 1442|       |
 1443|    954|    auto digits_count = static_cast<size_t>(begin - input.data());
 1444|    954|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|    954|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20, False: 934]
  |  |  ------------------
  ------------------
 1445|    954|                                               is_negative))) {
 1446|     20|        return unexpected_scan_error(scan_error::value_out_of_range,
 1447|     20|                                     "Integer overflow");
 1448|     20|    }
 1449|       |
 1450|    934|    val = store_result<T>(u64val, is_negative);
 1451|    934|    return begin;
 1452|    954|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_126parse_decimal_integer_fastIhEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1407|  47.1k|{
 1408|  47.1k|    uint64_t u64val{};
 1409|  47.1k|    auto ptr = parse_decimal_integer_fast_impl(
 1410|  47.1k|        input.data(), input.data() + input.size(), u64val);
 1411|       |
 1412|  47.1k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1413|  47.1k|    if (SCN_UNLIKELY(
  ------------------
  |  |  859|  47.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.68k, False: 45.4k]
  |  |  ------------------
  ------------------
 1414|  47.1k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1415|  1.68k|        return unexpected_scan_error(scan_error::value_out_of_range,
 1416|  1.68k|                                     "Integer overflow");
 1417|  1.68k|    }
 1418|       |
 1419|  45.4k|    val = store_result<T>(u64val, is_negative);
 1420|  45.4k|    return ptr;
 1421|  47.1k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIchEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1428|  17.8k|{
 1429|  17.8k|    uint64_t u64val{};
 1430|  17.8k|    const CharT* begin = input.data();
 1431|  17.8k|    const CharT* const end = input.data() + input.size();
 1432|       |
 1433|  57.1k|    while (begin != end) {
  ------------------
  |  Branch (1433:12): [True: 47.8k, False: 9.27k]
  ------------------
 1434|  47.8k|        const auto digit = char_to_int(*begin);
 1435|  47.8k|        if (digit >= base) {
  ------------------
  |  Branch (1435:13): [True: 8.59k, False: 39.2k]
  ------------------
 1436|  8.59k|            break;
 1437|  8.59k|        }
 1438|  39.2k|        u64val =
 1439|  39.2k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1440|  39.2k|        ++begin;
 1441|  39.2k|    }
 1442|       |
 1443|  17.8k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1444|  17.8k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|  17.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.03k, False: 16.8k]
  |  |  ------------------
  ------------------
 1445|  17.8k|                                               is_negative))) {
 1446|  1.03k|        return unexpected_scan_error(scan_error::value_out_of_range,
 1447|  1.03k|                                     "Integer overflow");
 1448|  1.03k|    }
 1449|       |
 1450|  16.8k|    val = store_result<T>(u64val, is_negative);
 1451|  16.8k|    return begin;
 1452|  17.8k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIwhEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1428|    682|{
 1429|    682|    uint64_t u64val{};
 1430|    682|    const CharT* begin = input.data();
 1431|    682|    const CharT* const end = input.data() + input.size();
 1432|       |
 1433|  4.03k|    while (begin != end) {
  ------------------
  |  Branch (1433:12): [True: 3.58k, False: 450]
  ------------------
 1434|  3.58k|        const auto digit = char_to_int(*begin);
 1435|  3.58k|        if (digit >= base) {
  ------------------
  |  Branch (1435:13): [True: 232, False: 3.34k]
  ------------------
 1436|    232|            break;
 1437|    232|        }
 1438|  3.34k|        u64val =
 1439|  3.34k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1440|  3.34k|        ++begin;
 1441|  3.34k|    }
 1442|       |
 1443|    682|    auto digits_count = static_cast<size_t>(begin - input.data());
 1444|    682|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|    682|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 250, False: 432]
  |  |  ------------------
  ------------------
 1445|    682|                                               is_negative))) {
 1446|    250|        return unexpected_scan_error(scan_error::value_out_of_range,
 1447|    250|                                     "Integer overflow");
 1448|    250|    }
 1449|       |
 1450|    432|    val = store_result<T>(u64val, is_negative);
 1451|    432|    return begin;
 1452|    682|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_126parse_decimal_integer_fastIjEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1407|  52.2k|{
 1408|  52.2k|    uint64_t u64val{};
 1409|  52.2k|    auto ptr = parse_decimal_integer_fast_impl(
 1410|  52.2k|        input.data(), input.data() + input.size(), u64val);
 1411|       |
 1412|  52.2k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1413|  52.2k|    if (SCN_UNLIKELY(
  ------------------
  |  |  859|  52.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 895, False: 51.4k]
  |  |  ------------------
  ------------------
 1414|  52.2k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1415|    895|        return unexpected_scan_error(scan_error::value_out_of_range,
 1416|    895|                                     "Integer overflow");
 1417|    895|    }
 1418|       |
 1419|  51.4k|    val = store_result<T>(u64val, is_negative);
 1420|  51.4k|    return ptr;
 1421|  52.2k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIcjEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1428|  19.8k|{
 1429|  19.8k|    uint64_t u64val{};
 1430|  19.8k|    const CharT* begin = input.data();
 1431|  19.8k|    const CharT* const end = input.data() + input.size();
 1432|       |
 1433|  62.3k|    while (begin != end) {
  ------------------
  |  Branch (1433:12): [True: 52.0k, False: 10.3k]
  ------------------
 1434|  52.0k|        const auto digit = char_to_int(*begin);
 1435|  52.0k|        if (digit >= base) {
  ------------------
  |  Branch (1435:13): [True: 9.57k, False: 42.5k]
  ------------------
 1436|  9.57k|            break;
 1437|  9.57k|        }
 1438|  42.5k|        u64val =
 1439|  42.5k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1440|  42.5k|        ++begin;
 1441|  42.5k|    }
 1442|       |
 1443|  19.8k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1444|  19.8k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|  19.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 486, False: 19.3k]
  |  |  ------------------
  ------------------
 1445|  19.8k|                                               is_negative))) {
 1446|    486|        return unexpected_scan_error(scan_error::value_out_of_range,
 1447|    486|                                     "Integer overflow");
 1448|    486|    }
 1449|       |
 1450|  19.3k|    val = store_result<T>(u64val, is_negative);
 1451|  19.3k|    return begin;
 1452|  19.8k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIwjEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1428|    704|{
 1429|    704|    uint64_t u64val{};
 1430|    704|    const CharT* begin = input.data();
 1431|    704|    const CharT* const end = input.data() + input.size();
 1432|       |
 1433|  4.07k|    while (begin != end) {
  ------------------
  |  Branch (1433:12): [True: 3.61k, False: 463]
  ------------------
 1434|  3.61k|        const auto digit = char_to_int(*begin);
 1435|  3.61k|        if (digit >= base) {
  ------------------
  |  Branch (1435:13): [True: 241, False: 3.37k]
  ------------------
 1436|    241|            break;
 1437|    241|        }
 1438|  3.37k|        u64val =
 1439|  3.37k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1440|  3.37k|        ++begin;
 1441|  3.37k|    }
 1442|       |
 1443|    704|    auto digits_count = static_cast<size_t>(begin - input.data());
 1444|    704|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|    704|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 144, False: 560]
  |  |  ------------------
  ------------------
 1445|    704|                                               is_negative))) {
 1446|    144|        return unexpected_scan_error(scan_error::value_out_of_range,
 1447|    144|                                     "Integer overflow");
 1448|    144|    }
 1449|       |
 1450|    560|    val = store_result<T>(u64val, is_negative);
 1451|    560|    return begin;
 1452|    704|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_126parse_decimal_integer_fastIyEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1407|  52.9k|{
 1408|  52.9k|    uint64_t u64val{};
 1409|  52.9k|    auto ptr = parse_decimal_integer_fast_impl(
 1410|  52.9k|        input.data(), input.data() + input.size(), u64val);
 1411|       |
 1412|  52.9k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1413|  52.9k|    if (SCN_UNLIKELY(
  ------------------
  |  |  859|  52.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 448, False: 52.4k]
  |  |  ------------------
  ------------------
 1414|  52.9k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1415|    448|        return unexpected_scan_error(scan_error::value_out_of_range,
 1416|    448|                                     "Integer overflow");
 1417|    448|    }
 1418|       |
 1419|  52.4k|    val = store_result<T>(u64val, is_negative);
 1420|  52.4k|    return ptr;
 1421|  52.9k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIcyEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1428|  20.0k|{
 1429|  20.0k|    uint64_t u64val{};
 1430|  20.0k|    const CharT* begin = input.data();
 1431|  20.0k|    const CharT* const end = input.data() + input.size();
 1432|       |
 1433|  63.8k|    while (begin != end) {
  ------------------
  |  Branch (1433:12): [True: 53.4k, False: 10.4k]
  ------------------
 1434|  53.4k|        const auto digit = char_to_int(*begin);
 1435|  53.4k|        if (digit >= base) {
  ------------------
  |  Branch (1435:13): [True: 9.64k, False: 43.7k]
  ------------------
 1436|  9.64k|            break;
 1437|  9.64k|        }
 1438|  43.7k|        u64val =
 1439|  43.7k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1440|  43.7k|        ++begin;
 1441|  43.7k|    }
 1442|       |
 1443|  20.0k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1444|  20.0k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|  20.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 262, False: 19.7k]
  |  |  ------------------
  ------------------
 1445|  20.0k|                                               is_negative))) {
 1446|    262|        return unexpected_scan_error(scan_error::value_out_of_range,
 1447|    262|                                     "Integer overflow");
 1448|    262|    }
 1449|       |
 1450|  19.7k|    val = store_result<T>(u64val, is_negative);
 1451|  19.7k|    return begin;
 1452|  20.0k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIwyEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1428|    748|{
 1429|    748|    uint64_t u64val{};
 1430|    748|    const CharT* begin = input.data();
 1431|    748|    const CharT* const end = input.data() + input.size();
 1432|       |
 1433|  4.16k|    while (begin != end) {
  ------------------
  |  Branch (1433:12): [True: 3.67k, False: 489]
  ------------------
 1434|  3.67k|        const auto digit = char_to_int(*begin);
 1435|  3.67k|        if (digit >= base) {
  ------------------
  |  Branch (1435:13): [True: 259, False: 3.41k]
  ------------------
 1436|    259|            break;
 1437|    259|        }
 1438|  3.41k|        u64val =
 1439|  3.41k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1440|  3.41k|        ++begin;
 1441|  3.41k|    }
 1442|       |
 1443|    748|    auto digits_count = static_cast<size_t>(begin - input.data());
 1444|    748|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|    748|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 740]
  |  |  ------------------
  ------------------
 1445|    748|                                               is_negative))) {
 1446|      8|        return unexpected_scan_error(scan_error::value_out_of_range,
 1447|      8|                                     "Integer overflow");
 1448|      8|    }
 1449|       |
 1450|    740|    val = store_result<T>(u64val, is_negative);
 1451|    740|    return begin;
 1452|    748|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2073|   424k|{
 2074|   424k|    const auto argcount = args.size();
 2075|   424k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2075:9): [True: 63.7k, False: 360k]
  |  Branch (2075:60): [True: 63.7k, False: 0]
  ------------------
 2076|  63.7k|        auto arg = args.get(0);
 2077|  63.7k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  63.7k|    static_cast<    \
  |  |  929|  63.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2078|  63.7k|    }
 2079|       |
 2080|   360k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2080:9): [True: 0, False: 360k]
  ------------------
 2081|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2082|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2084|      0|        return vscan_parse_format_string(format, handler);
 2085|      0|    }
 2086|       |
 2087|   360k|    SCN_UNLIKELY_ATTR
 2088|   360k|    {
 2089|   360k|        auto handler = format_handler<false, CharT>{
 2090|   360k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   360k|    static_cast<    \
  |  |  929|   360k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   360k|    static_cast<    \
  |  |  929|   360k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2091|   360k|        return vscan_parse_format_string(format, handler);
 2092|   360k|    }
 2093|   360k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1625|   849k|{
 1626|   849k|    if (format.size() != 2) {
  ------------------
  |  Branch (1626:9): [True: 721k, False: 128k]
  ------------------
 1627|   721k|        return false;
 1628|   721k|    }
 1629|   128k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1629:12): [True: 128k, False: 0]
  |  Branch (1629:39): [True: 128k, False: 0]
  ------------------
 1630|   849k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1658|  95.6k|{
 1659|  95.6k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  95.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 95.6k]
  |  |  ------------------
  ------------------
 1660|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1661|      0|                                     "Argument #0 not found");
 1662|      0|    }
 1663|       |
 1664|  95.6k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|  95.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 95.6k]
  |  |  ------------------
  ------------------
 1665|      0|        auto reader = impl::default_arg_reader<
 1666|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1667|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1668|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1669|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1670|      0|    }
 1671|       |
 1672|  95.6k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1673|  95.6k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|  95.6k|    static_cast<    \
  |  |  929|  95.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1674|  95.6k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|  95.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  95.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  95.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  95.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12.7k, False: 82.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  12.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  12.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  12.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  12.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  12.7k|    }                                                  \
  |  |  |  | 3667|  95.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  82.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1675|  82.9k|    return it.position();
 1676|  95.6k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1900|   360k|        : format_handler_base{argcount},
 1901|   360k|          parse_ctx{format},
 1902|   360k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   360k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   360k|    static_cast<    \
  |  |  929|   360k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   360k|    static_cast<    \
  |  |  929|   360k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1903|   360k|    {
 1904|   360k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1721|  1.03M|    format_handler_base(size_t argcount) : args_count(argcount)
 1722|  1.03M|    {
 1723|  1.03M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.03M]
  |  |  ------------------
  ------------------
 1724|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1725|      0|        }
 1726|  1.03M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1852|   360k|        : contiguous_ctx(source, args, loc)
 1853|   360k|    {
 1854|   360k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2038|   360k|{
 2039|   360k|    const auto beg = handler.get_ctx().begin();
 2040|   360k|    detail::parse_format_string<false>(format, handler);
 2041|   360k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   360k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 76.2k, False: 284k]
  |  |  ------------------
  ------------------
 2042|  76.2k|        return unexpected(handler.error);
 2043|  76.2k|    }
 2044|   284k|    return ranges::distance(beg, handler.get_ctx().begin());
 2045|   360k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2022|  2.31M|    {
 2023|  2.31M|        return ctx.get();
 2024|  2.31M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1857|  2.31M|    {
 1858|  2.31M|        return contiguous_ctx;
 1859|  2.31M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1907|   644k|    {
 1908|   644k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1908:16): [True: 0, False: 644k]
  ------------------
 1909|      0|            auto it = get_ctx().begin();
 1910|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1910:17): [True: 0, False: 0]
  ------------------
 1911|      0|                SCN_UNLIKELY_ATTR
 1912|      0|                return on_error("Unexpected end of source");
 1913|      0|            }
 1914|       |
 1915|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1916|      0|                    detail::make_string_view_from_pointers(begin, end));
 1917|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1917:17): [True: 0, False: 0]
  ------------------
 1918|      0|                SCN_UNLIKELY_ATTR
 1919|      0|                return on_error("Invalid encoding in format string");
 1920|      0|            }
 1921|      0|            else if (is_space) {
  ------------------
  |  Branch (1921:22): [True: 0, False: 0]
  ------------------
 1922|       |                // Skip all whitespace in input
 1923|      0|                get_ctx().advance_to(
 1924|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1925|       |                // And, skip all whitespace in the format string
 1926|      0|                auto begin_it = impl::read_while_classic_space(
 1927|      0|                    detail::make_string_view_from_pointers(
 1928|      0|                        detail::to_address(after_space_it),
 1929|      0|                        detail::to_address(end)));
 1930|       |                // (-1 because of the for loop ++begin)
 1931|      0|                begin = detail::to_address(begin_it) - 1;
 1932|      0|                continue;
 1933|      0|            }
 1934|       |
 1935|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1935:17): [True: 0, False: 0]
  ------------------
 1936|      0|                SCN_UNLIKELY_ATTR
 1937|      0|                return on_error("Unexpected literal character in source");
 1938|      0|            }
 1939|      0|            get_ctx().advance_to(ranges::next(it));
 1940|      0|        }
 1941|   644k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1681|   360k|{
 1682|   360k|    auto arg = ctx.arg(id);
 1683|   360k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   360k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 360k]
  |  |  ------------------
  ------------------
 1684|      0|        handler.on_error("Failed to find argument with ID");
 1685|      0|    }
 1686|   360k|    return arg;
 1687|   360k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1797|  1.03M|    {
 1798|  1.03M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.03M]
  |  |  ------------------
  ------------------
 1799|      0|            on_error("Invalid out-of-range argument ID");
 1800|      0|            return;
 1801|      0|        }
 1802|       |
 1803|  1.03M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.03M]
  |  |  ------------------
  ------------------
 1804|      0|            return on_error("Argument with this ID has already been scanned");
 1805|      0|        }
 1806|       |
 1807|  1.03M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  1.03M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.03M, False: 0]
  |  |  ------------------
  ------------------
 1808|  1.03M|            visited_args_lower64 |= (1ull << id);
 1809|  1.03M|            return;
 1810|  1.03M|        }
 1811|       |
 1812|      0|        id -= 64;
 1813|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1814|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1782|  1.03M|    {
 1783|  1.03M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.03M]
  |  |  ------------------
  ------------------
 1784|      0|            on_error("Invalid out-of-range argument ID");
 1785|      0|            return false;
 1786|      0|        }
 1787|       |
 1788|  1.03M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  1.03M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.03M, False: 0]
  |  |  ------------------
  ------------------
 1789|  1.03M|            return (visited_args_lower64 >> id) & 1ull;
 1790|  1.03M|        }
 1791|       |
 1792|      0|        id -= 64;
 1793|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1794|  1.03M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1766|   304k|    {
 1767|   304k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|   304k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 304k, False: 0]
  |  |  ------------------
  ------------------
 1768|   304k|            error = err;
 1769|   304k|        }
 1770|   304k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1944|   360k|    {
 1945|   360k|        return parse_ctx.next_arg_id();
 1946|   360k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1985|   360k|    {
 1986|   360k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1987|   360k|        set_arg_as_visited(arg_id);
 1988|       |
 1989|   360k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1989:13): [True: 0, False: 360k]
  ------------------
 1990|      0|            parse_ctx.advance_to(begin);
 1991|      0|            on_visit_scan_arg(
 1992|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1993|      0|                    parse_ctx, get_custom_ctx()},
 1994|      0|                arg);
 1995|      0|            return parse_ctx.begin();
 1996|      0|        }
 1997|       |
 1998|   360k|        auto specs = detail::format_specs{};
 1999|   360k|        detail::specs_checker<specs_handler<context_type>> handler{
 2000|   360k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2001|   360k|            arg.type()};
 2002|       |
 2003|   360k|        begin = detail::parse_format_specs(begin, end, handler);
 2004|   360k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2004:13): [True: 0, False: 360k]
  |  Branch (2004:29): [True: 16.9k, False: 343k]
  ------------------
 2005|  16.9k|            SCN_UNLIKELY_ATTR
 2006|  16.9k|            on_error("Missing '}' in format string");
 2007|  16.9k|            return parse_ctx.begin();
 2008|  16.9k|        }
 2009|   343k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   343k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.47k, False: 335k]
  |  |  ------------------
  ------------------
 2010|  8.47k|            return parse_ctx.begin();
 2011|  8.47k|        }
 2012|   335k|        parse_ctx.advance_to(begin);
 2013|       |
 2014|   335k|        on_visit_scan_arg(
 2015|   335k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2016|   335k|                                           get_ctx().locale()},
 2017|   335k|            arg);
 2018|   335k|        return parse_ctx.begin();
 2019|   343k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1700|   360k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1701|   360k|    {
 1702|   360k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1956|   335k|    {
 1957|   335k|        if (!*this || !arg) {
  ------------------
  |  Branch (1957:13): [True: 0, False: 335k]
  |  Branch (1957:23): [True: 0, False: 335k]
  ------------------
 1958|      0|            SCN_UNLIKELY_ATTR
 1959|      0|            return;
 1960|      0|        }
 1961|       |
 1962|   335k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   335k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1963|   335k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   335k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 50.8k, False: 284k]
  |  |  ------------------
  ------------------
 1964|  50.8k|            on_error(r.error());
 1965|  50.8k|        }
 1966|   284k|        else {
 1967|   284k|            get_ctx().advance_to(*r);
 1968|   284k|        }
 1969|   335k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1761|   254k|    {
 1762|   254k|        SCN_UNLIKELY_ATTR
 1763|   254k|        error = scan_error{scan_error::invalid_format_string, msg};
 1764|   254k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1729|  1.03M|    {
 1730|  1.03M|        {
 1731|  1.03M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1731:45): [True: 0, False: 1.03M]
  ------------------
 1732|  1.03M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1732:35): [True: 0, False: 1.03M]
  ------------------
 1733|  1.03M|                                      ? std::numeric_limits<uint64_t>::max()
 1734|  1.03M|                                      : (1ull << args_count_lower64) - 1;
 1735|       |
 1736|  1.03M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1736:17): [True: 0, False: 1.03M]
  ------------------
 1737|      0|                return on_error("Argument list not exhausted");
 1738|      0|            }
 1739|  1.03M|        }
 1740|       |
 1741|  1.03M|        if (args_count < 64) {
  ------------------
  |  Branch (1741:13): [True: 1.03M, False: 0]
  ------------------
 1742|  1.03M|            return;
 1743|  1.03M|        }
 1744|       |
 1745|      0|        auto last_args_count = args_count - 64;
 1746|      0|        for (auto it = visited_args_upper.begin();
 1747|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1747:14): [True: 0, False: 0]
  ------------------
 1748|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1748:17): [True: 0, False: 0]
  ------------------
 1749|      0|                return on_error("Argument list not exhausted");
 1750|      0|            }
 1751|      0|            last_args_count -= 8;
 1752|      0|        }
 1753|       |
 1754|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1755|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1755:13): [True: 0, False: 0]
  ------------------
 1756|      0|            return on_error("Argument list not exhausted");
 1757|      0|        }
 1758|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1777|  1.03M|    {
 1778|  1.03M|        return error;
 1779|  1.03M|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1773|  2.94M|    {
 1774|  2.94M|        return static_cast<bool>(error);
 1775|  2.94M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
 1900|   360k|        : format_handler_base{argcount},
 1901|   360k|          parse_ctx{format},
 1902|   360k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   360k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   360k|    static_cast<    \
  |  |  929|   360k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   360k|    static_cast<    \
  |  |  929|   360k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1903|   360k|    {
 1904|   360k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
 1829|   360k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  928|   360k|    static_cast<    \
  |  |  929|   360k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1830|   360k|    {
 1831|   360k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2038|   360k|{
 2039|   360k|    const auto beg = handler.get_ctx().begin();
 2040|   360k|    detail::parse_format_string<false>(format, handler);
 2041|   360k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   360k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 76.2k, False: 284k]
  |  |  ------------------
  ------------------
 2042|  76.2k|        return unexpected(handler.error);
 2043|  76.2k|    }
 2044|   284k|    return ranges::distance(beg, handler.get_ctx().begin());
 2045|   360k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2022|  2.32M|    {
 2023|  2.32M|        return ctx.get();
 2024|  2.32M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1834|  2.32M|    {
 1835|  2.32M|        return ctx;
 1836|  2.32M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1907|   645k|    {
 1908|   645k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1908:16): [True: 0, False: 645k]
  ------------------
 1909|      0|            auto it = get_ctx().begin();
 1910|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1910:17): [True: 0, False: 0]
  ------------------
 1911|      0|                SCN_UNLIKELY_ATTR
 1912|      0|                return on_error("Unexpected end of source");
 1913|      0|            }
 1914|       |
 1915|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1916|      0|                    detail::make_string_view_from_pointers(begin, end));
 1917|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1917:17): [True: 0, False: 0]
  ------------------
 1918|      0|                SCN_UNLIKELY_ATTR
 1919|      0|                return on_error("Invalid encoding in format string");
 1920|      0|            }
 1921|      0|            else if (is_space) {
  ------------------
  |  Branch (1921:22): [True: 0, False: 0]
  ------------------
 1922|       |                // Skip all whitespace in input
 1923|      0|                get_ctx().advance_to(
 1924|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1925|       |                // And, skip all whitespace in the format string
 1926|      0|                auto begin_it = impl::read_while_classic_space(
 1927|      0|                    detail::make_string_view_from_pointers(
 1928|      0|                        detail::to_address(after_space_it),
 1929|      0|                        detail::to_address(end)));
 1930|       |                // (-1 because of the for loop ++begin)
 1931|      0|                begin = detail::to_address(begin_it) - 1;
 1932|      0|                continue;
 1933|      0|            }
 1934|       |
 1935|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1935:17): [True: 0, False: 0]
  ------------------
 1936|      0|                SCN_UNLIKELY_ATTR
 1937|      0|                return on_error("Unexpected literal character in source");
 1938|      0|            }
 1939|      0|            get_ctx().advance_to(ranges::next(it));
 1940|      0|        }
 1941|   645k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
 1681|   360k|{
 1682|   360k|    auto arg = ctx.arg(id);
 1683|   360k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   360k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 360k]
  |  |  ------------------
  ------------------
 1684|      0|        handler.on_error("Failed to find argument with ID");
 1685|      0|    }
 1686|   360k|    return arg;
 1687|   360k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1944|   360k|    {
 1945|   360k|        return parse_ctx.next_arg_id();
 1946|   360k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1985|   360k|    {
 1986|   360k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1987|   360k|        set_arg_as_visited(arg_id);
 1988|       |
 1989|   360k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1989:13): [True: 0, False: 360k]
  ------------------
 1990|      0|            parse_ctx.advance_to(begin);
 1991|      0|            on_visit_scan_arg(
 1992|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1993|      0|                    parse_ctx, get_custom_ctx()},
 1994|      0|                arg);
 1995|      0|            return parse_ctx.begin();
 1996|      0|        }
 1997|       |
 1998|   360k|        auto specs = detail::format_specs{};
 1999|   360k|        detail::specs_checker<specs_handler<context_type>> handler{
 2000|   360k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2001|   360k|            arg.type()};
 2002|       |
 2003|   360k|        begin = detail::parse_format_specs(begin, end, handler);
 2004|   360k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2004:13): [True: 0, False: 360k]
  |  Branch (2004:29): [True: 16.9k, False: 343k]
  ------------------
 2005|  16.9k|            SCN_UNLIKELY_ATTR
 2006|  16.9k|            on_error("Missing '}' in format string");
 2007|  16.9k|            return parse_ctx.begin();
 2008|  16.9k|        }
 2009|   343k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   343k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.47k, False: 335k]
  |  |  ------------------
  ------------------
 2010|  8.47k|            return parse_ctx.begin();
 2011|  8.47k|        }
 2012|   335k|        parse_ctx.advance_to(begin);
 2013|       |
 2014|   335k|        on_visit_scan_arg(
 2015|   335k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2016|   335k|                                           get_ctx().locale()},
 2017|   335k|            arg);
 2018|   335k|        return parse_ctx.begin();
 2019|   343k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
 1700|   360k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1701|   360k|    {
 1702|   360k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1956|   335k|    {
 1957|   335k|        if (!*this || !arg) {
  ------------------
  |  Branch (1957:13): [True: 0, False: 335k]
  |  Branch (1957:23): [True: 0, False: 335k]
  ------------------
 1958|      0|            SCN_UNLIKELY_ATTR
 1959|      0|            return;
 1960|      0|        }
 1961|       |
 1962|   335k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   335k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1963|   335k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   335k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 50.8k, False: 284k]
  |  |  ------------------
  ------------------
 1964|  50.8k|            on_error(r.error());
 1965|  50.8k|        }
 1966|   284k|        else {
 1967|   284k|            get_ctx().advance_to(*r);
 1968|   284k|        }
 1969|   335k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2053|   425k|{
 2054|   425k|    const auto argcount = args.size();
 2055|   425k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2055:9): [True: 64.7k, False: 360k]
  |  Branch (2055:60): [True: 64.7k, False: 0]
  ------------------
 2056|  64.7k|        auto arg = args.get(0);
 2057|  64.7k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  64.7k|    static_cast<    \
  |  |  929|  64.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2058|  64.7k|    }
 2059|       |
 2060|   360k|    auto handler = format_handler<true, CharT>{
 2061|   360k|        ranges::subrange<const CharT*>{source.data(),
 2062|   360k|                                       source.data() + source.size()},
 2063|   360k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   360k|    static_cast<    \
  |  |  929|   360k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   360k|    static_cast<    \
  |  |  929|   360k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2064|   360k|    return vscan_parse_format_string(format, handler);
 2065|   425k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1638|  97.0k|{
 1639|  97.0k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  97.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 97.0k]
  |  |  ------------------
  ------------------
 1640|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1641|      0|                                     "Argument #0 not found");
 1642|      0|    }
 1643|       |
 1644|  97.0k|    auto reader =
 1645|  97.0k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1646|  97.0k|            ranges::subrange<const CharT*>{source.data(),
 1647|  97.0k|                                           source.data() + source.size()},
 1648|  97.0k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|  97.0k|    static_cast<    \
  |  |  929|  97.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1649|  97.0k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|  97.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  97.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  97.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  97.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12.7k, False: 84.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  12.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  12.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  12.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  12.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  12.7k|    }                                                  \
  |  |  |  | 3667|  97.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  84.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1650|  84.3k|    return ranges::distance(source.data(), it);
 1651|  97.0k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2053|   172k|{
 2054|   172k|    const auto argcount = args.size();
 2055|   172k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2055:9): [True: 17.4k, False: 155k]
  |  Branch (2055:60): [True: 17.4k, False: 0]
  ------------------
 2056|  17.4k|        auto arg = args.get(0);
 2057|  17.4k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  17.4k|    static_cast<    \
  |  |  929|  17.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2058|  17.4k|    }
 2059|       |
 2060|   155k|    auto handler = format_handler<true, CharT>{
 2061|   155k|        ranges::subrange<const CharT*>{source.data(),
 2062|   155k|                                       source.data() + source.size()},
 2063|   155k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   155k|    static_cast<    \
  |  |  929|   155k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   155k|    static_cast<    \
  |  |  929|   155k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2064|   155k|    return vscan_parse_format_string(format, handler);
 2065|   172k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1625|   344k|{
 1626|   344k|    if (format.size() != 2) {
  ------------------
  |  Branch (1626:9): [True: 310k, False: 34.8k]
  ------------------
 1627|   310k|        return false;
 1628|   310k|    }
 1629|  34.8k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1629:12): [True: 34.8k, False: 0]
  |  Branch (1629:39): [True: 34.8k, False: 0]
  ------------------
 1630|   344k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1638|  26.1k|{
 1639|  26.1k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  26.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 26.1k]
  |  |  ------------------
  ------------------
 1640|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1641|      0|                                     "Argument #0 not found");
 1642|      0|    }
 1643|       |
 1644|  26.1k|    auto reader =
 1645|  26.1k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1646|  26.1k|            ranges::subrange<const CharT*>{source.data(),
 1647|  26.1k|                                           source.data() + source.size()},
 1648|  26.1k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|  26.1k|    static_cast<    \
  |  |  929|  26.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1649|  26.1k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|  26.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  26.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  26.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  26.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 25.4k, False: 738]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  25.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  25.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  25.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  25.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  25.4k|    }                                                  \
  |  |  |  | 3667|  26.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    738|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1650|    738|    return ranges::distance(source.data(), it);
 1651|  26.1k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1900|   155k|        : format_handler_base{argcount},
 1901|   155k|          parse_ctx{format},
 1902|   155k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   155k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   155k|    static_cast<    \
  |  |  929|   155k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   155k|    static_cast<    \
  |  |  929|   155k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1903|   155k|    {
 1904|   155k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1852|   155k|        : contiguous_ctx(source, args, loc)
 1853|   155k|    {
 1854|   155k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2038|   155k|{
 2039|   155k|    const auto beg = handler.get_ctx().begin();
 2040|   155k|    detail::parse_format_string<false>(format, handler);
 2041|   155k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 152k, False: 2.51k]
  |  |  ------------------
  ------------------
 2042|   152k|        return unexpected(handler.error);
 2043|   152k|    }
 2044|  2.51k|    return ranges::distance(beg, handler.get_ctx().begin());
 2045|   155k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2022|   678k|    {
 2023|   678k|        return ctx.get();
 2024|   678k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1857|   678k|    {
 1858|   678k|        return contiguous_ctx;
 1859|   678k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1907|   157k|    {
 1908|   157k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1908:16): [True: 0, False: 157k]
  ------------------
 1909|      0|            auto it = get_ctx().begin();
 1910|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1910:17): [True: 0, False: 0]
  ------------------
 1911|      0|                SCN_UNLIKELY_ATTR
 1912|      0|                return on_error("Unexpected end of source");
 1913|      0|            }
 1914|       |
 1915|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1916|      0|                    detail::make_string_view_from_pointers(begin, end));
 1917|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1917:17): [True: 0, False: 0]
  ------------------
 1918|      0|                SCN_UNLIKELY_ATTR
 1919|      0|                return on_error("Invalid encoding in format string");
 1920|      0|            }
 1921|      0|            else if (is_space) {
  ------------------
  |  Branch (1921:22): [True: 0, False: 0]
  ------------------
 1922|       |                // Skip all whitespace in input
 1923|      0|                get_ctx().advance_to(
 1924|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1925|       |                // And, skip all whitespace in the format string
 1926|      0|                auto begin_it = impl::read_while_classic_space(
 1927|      0|                    detail::make_string_view_from_pointers(
 1928|      0|                        detail::to_address(after_space_it),
 1929|      0|                        detail::to_address(end)));
 1930|       |                // (-1 because of the for loop ++begin)
 1931|      0|                begin = detail::to_address(begin_it) - 1;
 1932|      0|                continue;
 1933|      0|            }
 1934|       |
 1935|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1935:17): [True: 0, False: 0]
  ------------------
 1936|      0|                SCN_UNLIKELY_ATTR
 1937|      0|                return on_error("Unexpected literal character in source");
 1938|      0|            }
 1939|      0|            get_ctx().advance_to(ranges::next(it));
 1940|      0|        }
 1941|   157k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1681|   155k|{
 1682|   155k|    auto arg = ctx.arg(id);
 1683|   155k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 155k]
  |  |  ------------------
  ------------------
 1684|      0|        handler.on_error("Failed to find argument with ID");
 1685|      0|    }
 1686|   155k|    return arg;
 1687|   155k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1944|   155k|    {
 1945|   155k|        return parse_ctx.next_arg_id();
 1946|   155k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1985|   155k|    {
 1986|   155k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1987|   155k|        set_arg_as_visited(arg_id);
 1988|       |
 1989|   155k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1989:13): [True: 0, False: 155k]
  ------------------
 1990|      0|            parse_ctx.advance_to(begin);
 1991|      0|            on_visit_scan_arg(
 1992|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1993|      0|                    parse_ctx, get_custom_ctx()},
 1994|      0|                arg);
 1995|      0|            return parse_ctx.begin();
 1996|      0|        }
 1997|       |
 1998|   155k|        auto specs = detail::format_specs{};
 1999|   155k|        detail::specs_checker<specs_handler<context_type>> handler{
 2000|   155k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2001|   155k|            arg.type()};
 2002|       |
 2003|   155k|        begin = detail::parse_format_specs(begin, end, handler);
 2004|   155k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2004:13): [True: 0, False: 155k]
  |  Branch (2004:29): [True: 33.8k, False: 121k]
  ------------------
 2005|  33.8k|            SCN_UNLIKELY_ATTR
 2006|  33.8k|            on_error("Missing '}' in format string");
 2007|  33.8k|            return parse_ctx.begin();
 2008|  33.8k|        }
 2009|   121k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   121k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.9k, False: 104k]
  |  |  ------------------
  ------------------
 2010|  16.9k|            return parse_ctx.begin();
 2011|  16.9k|        }
 2012|   104k|        parse_ctx.advance_to(begin);
 2013|       |
 2014|   104k|        on_visit_scan_arg(
 2015|   104k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2016|   104k|                                           get_ctx().locale()},
 2017|   104k|            arg);
 2018|   104k|        return parse_ctx.begin();
 2019|   121k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1700|   155k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1701|   155k|    {
 1702|   155k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1956|   104k|    {
 1957|   104k|        if (!*this || !arg) {
  ------------------
  |  Branch (1957:13): [True: 0, False: 104k]
  |  Branch (1957:23): [True: 0, False: 104k]
  ------------------
 1958|      0|            SCN_UNLIKELY_ATTR
 1959|      0|            return;
 1960|      0|        }
 1961|       |
 1962|   104k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   104k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1963|   104k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 101k, False: 2.51k]
  |  |  ------------------
  ------------------
 1964|   101k|            on_error(r.error());
 1965|   101k|        }
 1966|  2.51k|        else {
 1967|  2.51k|            get_ctx().advance_to(*r);
 1968|  2.51k|        }
 1969|   104k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2073|   172k|{
 2074|   172k|    const auto argcount = args.size();
 2075|   172k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2075:9): [True: 17.4k, False: 155k]
  |  Branch (2075:60): [True: 17.4k, False: 0]
  ------------------
 2076|  17.4k|        auto arg = args.get(0);
 2077|  17.4k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  17.4k|    static_cast<    \
  |  |  929|  17.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2078|  17.4k|    }
 2079|       |
 2080|   155k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2080:9): [True: 0, False: 155k]
  ------------------
 2081|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2082|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2084|      0|        return vscan_parse_format_string(format, handler);
 2085|      0|    }
 2086|       |
 2087|   155k|    SCN_UNLIKELY_ATTR
 2088|   155k|    {
 2089|   155k|        auto handler = format_handler<false, CharT>{
 2090|   155k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   155k|    static_cast<    \
  |  |  929|   155k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   155k|    static_cast<    \
  |  |  929|   155k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2091|   155k|        return vscan_parse_format_string(format, handler);
 2092|   155k|    }
 2093|   155k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1658|  26.1k|{
 1659|  26.1k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  26.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 26.1k]
  |  |  ------------------
  ------------------
 1660|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1661|      0|                                     "Argument #0 not found");
 1662|      0|    }
 1663|       |
 1664|  26.1k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|  26.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 26.1k]
  |  |  ------------------
  ------------------
 1665|      0|        auto reader = impl::default_arg_reader<
 1666|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1667|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1668|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1669|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1670|      0|    }
 1671|       |
 1672|  26.1k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1673|  26.1k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|  26.1k|    static_cast<    \
  |  |  929|  26.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1674|  26.1k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|  26.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  26.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  26.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  26.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 25.4k, False: 738]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  25.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  25.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  25.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  25.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  25.4k|    }                                                  \
  |  |  |  | 3667|  26.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    738|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1675|    738|    return it.position();
 1676|  26.1k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
 1900|   155k|        : format_handler_base{argcount},
 1901|   155k|          parse_ctx{format},
 1902|   155k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   155k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   155k|    static_cast<    \
  |  |  929|   155k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   155k|    static_cast<    \
  |  |  929|   155k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1903|   155k|    {
 1904|   155k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
 1829|   155k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  928|   155k|    static_cast<    \
  |  |  929|   155k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1830|   155k|    {
 1831|   155k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2038|   155k|{
 2039|   155k|    const auto beg = handler.get_ctx().begin();
 2040|   155k|    detail::parse_format_string<false>(format, handler);
 2041|   155k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 152k, False: 2.51k]
  |  |  ------------------
  ------------------
 2042|   152k|        return unexpected(handler.error);
 2043|   152k|    }
 2044|  2.51k|    return ranges::distance(beg, handler.get_ctx().begin());
 2045|   155k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2022|   678k|    {
 2023|   678k|        return ctx.get();
 2024|   678k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1834|   678k|    {
 1835|   678k|        return ctx;
 1836|   678k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1907|   157k|    {
 1908|   157k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1908:16): [True: 0, False: 157k]
  ------------------
 1909|      0|            auto it = get_ctx().begin();
 1910|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1910:17): [True: 0, False: 0]
  ------------------
 1911|      0|                SCN_UNLIKELY_ATTR
 1912|      0|                return on_error("Unexpected end of source");
 1913|      0|            }
 1914|       |
 1915|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1916|      0|                    detail::make_string_view_from_pointers(begin, end));
 1917|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1917:17): [True: 0, False: 0]
  ------------------
 1918|      0|                SCN_UNLIKELY_ATTR
 1919|      0|                return on_error("Invalid encoding in format string");
 1920|      0|            }
 1921|      0|            else if (is_space) {
  ------------------
  |  Branch (1921:22): [True: 0, False: 0]
  ------------------
 1922|       |                // Skip all whitespace in input
 1923|      0|                get_ctx().advance_to(
 1924|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1925|       |                // And, skip all whitespace in the format string
 1926|      0|                auto begin_it = impl::read_while_classic_space(
 1927|      0|                    detail::make_string_view_from_pointers(
 1928|      0|                        detail::to_address(after_space_it),
 1929|      0|                        detail::to_address(end)));
 1930|       |                // (-1 because of the for loop ++begin)
 1931|      0|                begin = detail::to_address(begin_it) - 1;
 1932|      0|                continue;
 1933|      0|            }
 1934|       |
 1935|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1935:17): [True: 0, False: 0]
  ------------------
 1936|      0|                SCN_UNLIKELY_ATTR
 1937|      0|                return on_error("Unexpected literal character in source");
 1938|      0|            }
 1939|      0|            get_ctx().advance_to(ranges::next(it));
 1940|      0|        }
 1941|   157k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
 1681|   155k|{
 1682|   155k|    auto arg = ctx.arg(id);
 1683|   155k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 155k]
  |  |  ------------------
  ------------------
 1684|      0|        handler.on_error("Failed to find argument with ID");
 1685|      0|    }
 1686|   155k|    return arg;
 1687|   155k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1944|   155k|    {
 1945|   155k|        return parse_ctx.next_arg_id();
 1946|   155k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1985|   155k|    {
 1986|   155k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1987|   155k|        set_arg_as_visited(arg_id);
 1988|       |
 1989|   155k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1989:13): [True: 0, False: 155k]
  ------------------
 1990|      0|            parse_ctx.advance_to(begin);
 1991|      0|            on_visit_scan_arg(
 1992|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1993|      0|                    parse_ctx, get_custom_ctx()},
 1994|      0|                arg);
 1995|      0|            return parse_ctx.begin();
 1996|      0|        }
 1997|       |
 1998|   155k|        auto specs = detail::format_specs{};
 1999|   155k|        detail::specs_checker<specs_handler<context_type>> handler{
 2000|   155k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2001|   155k|            arg.type()};
 2002|       |
 2003|   155k|        begin = detail::parse_format_specs(begin, end, handler);
 2004|   155k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2004:13): [True: 0, False: 155k]
  |  Branch (2004:29): [True: 33.8k, False: 121k]
  ------------------
 2005|  33.8k|            SCN_UNLIKELY_ATTR
 2006|  33.8k|            on_error("Missing '}' in format string");
 2007|  33.8k|            return parse_ctx.begin();
 2008|  33.8k|        }
 2009|   121k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   121k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.9k, False: 104k]
  |  |  ------------------
  ------------------
 2010|  16.9k|            return parse_ctx.begin();
 2011|  16.9k|        }
 2012|   104k|        parse_ctx.advance_to(begin);
 2013|       |
 2014|   104k|        on_visit_scan_arg(
 2015|   104k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2016|   104k|                                           get_ctx().locale()},
 2017|   104k|            arg);
 2018|   104k|        return parse_ctx.begin();
 2019|   121k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
 1700|   155k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1701|   155k|    {
 1702|   155k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1956|   104k|    {
 1957|   104k|        if (!*this || !arg) {
  ------------------
  |  Branch (1957:13): [True: 0, False: 104k]
  |  Branch (1957:23): [True: 0, False: 104k]
  ------------------
 1958|      0|            SCN_UNLIKELY_ATTR
 1959|      0|            return;
 1960|      0|        }
 1961|       |
 1962|   104k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   104k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1963|   104k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 101k, False: 2.51k]
  |  |  ------------------
  ------------------
 1964|   101k|            on_error(r.error());
 1965|   101k|        }
 1966|  2.51k|        else {
 1967|  2.51k|            get_ctx().advance_to(*r);
 1968|  2.51k|        }
 1969|   104k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2099|  32.3k|{
 2100|  32.3k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  32.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2101|  32.3k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2099|  31.8k|{
 2100|  31.8k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  31.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2101|  31.8k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2099|  8.71k|{
 2100|  8.71k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  8.71k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2101|  8.71k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2099|  8.71k|{
 2100|  8.71k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  8.71k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2101|  8.71k|}

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1350|    706|{
 1351|    706|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1352|       |
 1353|    706|    if constexpr (sizeof(SourceCharT) == 1) {
 1354|       |        if constexpr (sizeof(DestCharT) == 2) {
 1355|       |            std::u32string tmp;
 1356|       |            transcode_to_string_impl_to32(src, tmp);
 1357|       |            return transcode_to_string_impl_32to16<false>(
 1358|       |                std::u32string_view{tmp}, dest);
 1359|       |        }
 1360|    706|        else if constexpr (sizeof(DestCharT) == 4) {
 1361|    706|            return transcode_to_string_impl_to32(src, dest);
 1362|    706|        }
 1363|       |    }
 1364|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1365|       |        if constexpr (sizeof(DestCharT) == 1) {
 1366|       |            std::u32string tmp;
 1367|       |            transcode_to_string_impl_to32(src, tmp);
 1368|       |            return transcode_to_string_impl_32to8<false>(
 1369|       |                std::u32string_view{tmp}, dest);
 1370|       |        }
 1371|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1372|       |            return trasncode_to_string_impl_to32(src, dest);
 1373|       |        }
 1374|       |    }
 1375|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1376|       |        if constexpr (sizeof(DestCharT) == 1) {
 1377|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1378|       |        }
 1379|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1380|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1381|       |        }
 1382|       |    }
 1383|       |
 1384|    706|    SCN_EXPECT(false);
  ------------------
  |  |  924|    706|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    706|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1385|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1386|    706|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1243|    706|{
 1244|    706|    static_assert(sizeof(DestCharT) == 4);
 1245|       |
 1246|    706|    auto it = src.begin();
 1247|  49.2k|    while (it != src.end()) {
  ------------------
  |  Branch (1247:12): [True: 48.5k, False: 706]
  ------------------
 1248|  48.5k|        auto res = get_next_code_point(
 1249|  48.5k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1250|  48.5k|                                                                 src.end()));
 1251|  48.5k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|  48.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 489, False: 48.0k]
  |  |  ------------------
  ------------------
 1252|    489|            dest.push_back(DestCharT{0xfffd});
 1253|    489|        }
 1254|  48.0k|        else {
 1255|  48.0k|            dest.push_back(res.value);
 1256|  48.0k|        }
 1257|  48.5k|        it = detail::make_string_view_iterator(src, res.iterator);
 1258|  48.5k|    }
 1259|    706|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|  80.9k|{
 1169|  80.9k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|  80.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  80.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|  80.9k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|  80.9k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  80.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.44k, False: 78.4k]
  |  |  ------------------
  ------------------
 1173|  2.44k|        return {get_start_for_next_code_point(input),
 1174|  2.44k|                detail::invalid_code_point};
 1175|  2.44k|    }
 1176|  78.4k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|  78.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.17k, False: 76.3k]
  |  |  ------------------
  ------------------
 1177|  2.17k|        return {input.end(), detail::invalid_code_point};
 1178|  2.17k|    }
 1179|       |
 1180|  76.3k|    return {input.begin() + len,
 1181|  76.3k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|  78.4k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  2.44k|{
 1155|  2.44k|    auto it = input.begin();
 1156|  10.1k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 8.95k, False: 1.17k]
  ------------------
 1157|  8.95k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 1.27k, False: 7.68k]
  ------------------
 1158|  1.27k|            break;
 1159|  1.27k|        }
 1160|  8.95k|    }
 1161|  2.44k|    return it;
 1162|  2.44k|}
_ZN3scn2v34impl11parse_errorC2ENS2_4codeE:
  807|  3.66M|    constexpr parse_error(code c) : m_code(c)
  808|  3.66M|    {
  809|  3.66M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  3.66M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  3.66M|    }
_ZN3scn2v34impleqENS1_11parse_errorES2_:
  822|  1.25M|    {
  823|  1.25M|        return a.m_code == b.m_code;
  824|  1.25M|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2924|   878k|    {
 2925|   878k|        return m_msg == nullptr;
 2926|   878k|    }
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|   871k|{
  458|   871k|    return is_ascii_space_lookup[static_cast<size_t>(
  459|   871k|        static_cast<unsigned char>(ch))];
  460|   871k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|   524k|{
  539|   524k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|   524k|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  3.17M|{
  784|  3.17M|    return e != eof_error::good;
  785|  3.17M|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  26.5k|{
  798|  26.5k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|  26.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  26.5k|    return scan_error{scan_error::end_of_range, "EOF"};
  800|  26.5k|}
_ZN3scn2v34impl20make_eof_parse_errorENS1_9eof_errorE:
  844|  63.2k|{
  845|  63.2k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|  63.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  63.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|  63.2k|    return parse_error::eof;
  847|  63.2k|}
_ZN3scn2v34impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|   136k|{
  854|   136k|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 136k]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|   136k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 0, False: 136k]
  ------------------
  859|      0|        return scan_error{scan_error::end_of_range, "EOF"};
  860|      0|    }
  861|       |
  862|   136k|    return scan_error{code, msg};
  863|   136k|}
_ZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|   425k|{
  868|   425k|    return [code, msg](parse_error err) {
  869|   425k|        return make_scan_error_from_parse_error(err, code, msg);
  870|   425k|    };
  871|   425k|}
_ZN3scn2v34impl17fast_streq_nocaseEPKcS3_m:
 2208|   330k|{
 2209|   330k|    unsigned char running_diff{0};
 2210|   992k|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2210:24): [True: 661k, False: 330k]
  ------------------
 2211|   661k|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2212|   661k|    }
 2213|   330k|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2213:12): [True: 2.13k, False: 328k]
  |  Branch (2213:33): [True: 462, False: 328k]
  ------------------
 2214|   330k|}
_ZN3scn2v34impl11char_to_intEc:
 3111|  5.21M|{
 3112|  5.21M|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3113|  5.21M|}
_ZN3scn2v34impl11char_to_intEw:
 3115|   556k|{
 3116|   556k|#if WCHAR_MIN < 0
 3117|   556k|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3117:9): [True: 530k, False: 25.9k]
  |  Branch (3117:20): [True: 322k, False: 207k]
  ------------------
 3118|       |#else
 3119|       |    if (ch <= 255) {
 3120|       |#endif
 3121|   322k|        return char_to_int(static_cast<char>(ch));
 3122|   322k|    }
 3123|   233k|    return 255;
 3124|   556k|}
_ZN3scn2v34impl23transform_thsep_indicesERNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEl:
 3147|  3.57k|{
 3148|  74.0k|    for (auto thsep_it = indices.rbegin(); thsep_it != indices.rend();
  ------------------
  |  Branch (3148:44): [True: 70.4k, False: 3.57k]
  ------------------
 3149|  70.4k|         ++thsep_it) {
 3150|  70.4k|        const auto tmp = *thsep_it;
 3151|  70.4k|        *thsep_it = static_cast<char>(last_thsep_index - tmp - 1);
 3152|  70.4k|        last_thsep_index = static_cast<std::ptrdiff_t>(tmp);
 3153|  70.4k|    }
 3154|  3.57k|    indices.insert(indices.begin(), static_cast<char>(last_thsep_index));
 3155|  3.57k|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 5996|   573k|{
 5997|   573k|    if (specs.width != 0) {
  ------------------
  |  Branch (5997:9): [True: 0, False: 573k]
  ------------------
 5998|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (5998:13): [True: 0, False: 0]
  ------------------
 5999|      0|            return {scan_error::invalid_scanned_value,
 6000|      0|                    "Scanned value too narrow, width did not exceed what "
 6001|      0|                    "was specified in the format string"};
 6002|      0|        }
 6003|      0|    }
 6004|   573k|    if (specs.precision != 0) {
  ------------------
  |  Branch (6004:9): [True: 0, False: 573k]
  ------------------
 6005|      0|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6005:13): [True: 0, False: 0]
  ------------------
 6006|      0|            return {scan_error::invalid_scanned_value,
 6007|      0|                    "Scanned value too wide, width exceeded the specified "
 6008|      0|                    "precision"};
 6009|      0|        }
 6010|      0|    }
 6011|   573k|    return {};
 6012|   573k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  1.44M|    {
  304|  1.44M|        ranges::advance(x, n);
  305|  1.44M|        return x;
  306|  1.44M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  1.44M|    {
  268|  1.44M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.44M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  1.44M|    {
  151|  1.44M|        i += n;
  152|  1.44M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  2.21M|    {
  108|  2.21M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  2.21M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  2.21M|    {
   87|  2.21M|        return s - i;
   88|  2.21M|    }
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  92.4k|    {
  304|  92.4k|        ranges::advance(x, n);
  305|  92.4k|        return x;
  306|  92.4k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  92.4k|    {
  268|  92.4k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  92.4k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  92.4k|    {
  151|  92.4k|        i += n;
  152|  92.4k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  34.7M|    {
  108|  34.7M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  34.7M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  34.7M|    {
   87|  34.7M|        return s - i;
   88|  34.7M|    }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|   431k|{
  981|       |    if constexpr (ranges::contiguous_range<Range> &&
  982|       |                  ranges::sized_range<Range>) {
  983|       |        return true;
  984|       |    }
  985|       |    else if constexpr (std::is_same_v<
  986|       |                           ranges::const_iterator_t<Range>,
  987|       |                           typename detail::basic_scan_buffer<
  988|   431k|                               detail::char_t<Range>>::forward_iterator>) {
  989|   431k|        auto beg = r.begin();
  990|   431k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 431k, False: 0]
  ------------------
  991|   431k|            return false;
  992|   431k|        }
  993|       |        if constexpr (ranges::common_range<Range>) {
  994|       |            return beg.contiguous_segment().end() ==
  995|       |                   ranges::end(r).contiguous_segment().end();
  996|       |        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|       |    }
 1005|       |    else {
 1006|       |        return false;
 1007|       |    }
 1008|   431k|}
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  2.35M|    {
  763|  2.35M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  2.35M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  2.35M|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1844|   342k|{
 1845|   342k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|   342k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   342k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1846|       |
 1847|       |    if constexpr (ranges::sized_range<Range>) {
 1848|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1849|       |        if (sz < count) {
 1850|       |            return unexpected(eof_error::eof);
 1851|       |        }
 1852|       |
 1853|       |        return ranges::next(range.begin(), count);
 1854|       |    }
 1855|   342k|    else {
 1856|   342k|        auto it = range.begin();
 1857|   342k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1857:13): [True: 306k, False: 36.4k]
  ------------------
 1858|   306k|            return ranges::next(it, count);
 1859|   306k|        }
 1860|       |
 1861|  96.3k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1861:36): [True: 71.6k, False: 24.6k]
  ------------------
 1862|  71.6k|            if (it == range.end()) {
  ------------------
  |  Branch (1862:17): [True: 11.7k, False: 59.9k]
  ------------------
 1863|  11.7k|                return unexpected(eof_error::eof);
 1864|  11.7k|            }
 1865|  71.6k|        }
 1866|       |
 1867|  24.6k|        return it;
 1868|  36.4k|    }
 1869|   342k|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|   342k|{
 1095|       |    if constexpr (ranges::sized_range<Range>) {
 1096|       |        return r.size();
 1097|       |    }
 1098|       |    else if constexpr (std::is_same_v<
 1099|       |                           ranges::const_iterator_t<Range>,
 1100|       |                           typename detail::basic_scan_buffer<
 1101|   342k|                               detail::char_t<Range>>::forward_iterator>) {
 1102|       |        if constexpr (ranges::common_range<Range>) {
 1103|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|       |        }
 1105|   342k|        else {
 1106|   342k|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 342k, False: 0]
  ------------------
 1107|   342k|                return static_cast<size_t>(
 1108|   342k|                    r.begin().parent()->chars_available() -
 1109|   342k|                    r.begin().position());
 1110|   342k|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|   342k|        }
 1113|       |    }
 1114|       |    else {
 1115|       |        return 0;
 1116|       |    }
 1117|   342k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|   315k|        : m_fptr([](storage fn,
  743|   315k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   315k|              cvref<T> obj = *get<T>(fn);
  745|   315k|              if constexpr (std::is_void_v<R>) {
  746|   315k|                  obj(static_cast<decltype(args)>(args)...);
  747|   315k|              }
  748|   315k|              else {
  749|   315k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   315k|              }
  751|   315k|          }),
  752|   315k|          m_storage(std::addressof(f))
  753|   315k|    {
  754|   315k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  1.17M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.17M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.17M|              else {
  749|  1.17M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.17M|              }
  751|  1.17M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  1.17M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.17M|        else if constexpr (std::is_object_v<T>) {
  688|  1.17M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.17M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|   315k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   315k|        {
  662|   315k|        }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|  2.09M|    {
  763|  2.09M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  2.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  2.09M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|   665k|        : m_fptr([](storage fn,
  743|   665k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   665k|              cvref<T> obj = *get<T>(fn);
  745|   665k|              if constexpr (std::is_void_v<R>) {
  746|   665k|                  obj(static_cast<decltype(args)>(args)...);
  747|   665k|              }
  748|   665k|              else {
  749|   665k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   665k|              }
  751|   665k|          }),
  752|   665k|          m_storage(std::addressof(f))
  753|   665k|    {
  754|   665k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|  1.04M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.04M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.04M|              else {
  749|  1.04M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.04M|              }
  751|  1.04M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  1.04M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.04M|        else if constexpr (std::is_object_v<T>) {
  688|  1.04M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.04M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|   665k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   665k|        {
  662|   665k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6025|   335k|    {
 6026|   335k|        const bool need_skipped_width =
 6027|   335k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 0, False: 335k]
  |  Branch (6027:33): [True: 0, False: 335k]
  ------------------
 6028|   335k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|   335k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 0, False: 335k]
  ------------------
 6032|   335k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 0, False: 335k]
  ------------------
 6033|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6034|      0|                             need_skipped_width);
 6035|      0|        }
 6036|   335k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 335k, False: 0]
  |  Branch (6036:56): [True: 335k, False: 0]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|   335k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 335k]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|   661k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|   335k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   335k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   335k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   335k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 9.42k, False: 326k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  9.42k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  9.42k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  9.42k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  9.42k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  9.42k|    }                                                  \
  |  |  |  | 3667|   335k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   326k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|   661k|                            make_eof_scan_error));
 6047|       |
 6048|   661k|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 326k]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|   326k|            return result_type{it, 0};
 6056|   661k|        }
 6057|       |
 6058|      0|        return result_type{rng.begin(), 0};
 6059|   335k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1963|   315k|{
 1964|   315k|    return read_until_code_unit(range, std::not_fn(pred));
 1965|   315k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1944|   315k|{
 1945|       |    if constexpr (ranges::common_range<Range>) {
 1946|       |        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|   315k|    else {
 1949|   315k|        auto first = range.begin();
 1950|  1.18M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1950:16): [True: 1.17M, False: 9.20k]
  ------------------
 1951|  1.17M|            if (pred(*first)) {
  ------------------
  |  Branch (1951:17): [True: 306k, False: 870k]
  ------------------
 1952|   306k|                return first;
 1953|   306k|            }
 1954|  1.17M|        }
 1955|  9.20k|        return first;
 1956|   315k|    }
 1957|   315k|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   322k|    {
  108|   322k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   322k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   322k|    {
   94|   322k|        iter_difference_t<I> counter{0};
   95|  4.81M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 4.49M, False: 322k]
  ------------------
   96|  4.49M|            ++i;
   97|  4.49M|            ++counter;
   98|  4.49M|        }
   99|   322k|        return counter;
  100|   322k|    }
_ZZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|   136k|    return [code, msg](parse_error err) {
  869|   136k|        return make_scan_error_from_parse_error(err, code, msg);
  870|   136k|    };
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1767|   122k|    {
 1768|   122k|        auto stdloc = loc.get<std::locale>();
 1769|   122k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1770|   122k|        grouping = numpunct.grouping();
 1771|   122k|        thousands_sep =
 1772|   122k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1772:13): [True: 0, False: 122k]
  ------------------
 1773|   122k|        decimal_point = numpunct.decimal_point();
 1774|   122k|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1704|   122k|{
 1705|   122k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1705:9): [True: 122k, False: 0]
  ------------------
 1706|   122k|        return std::use_facet<Facet>(stdloc);
 1707|   122k|    }
 1708|      0|    stdloc = std::locale(stdloc, new Facet{});
 1709|      0|    return std::use_facet<Facet>(stdloc);
 1710|   122k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1833|   529k|{
 1834|   529k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   529k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 360, False: 528k]
  |  |  ------------------
  ------------------
 1835|    360|        return unexpected(e);
 1836|    360|    }
 1837|       |
 1838|   528k|    return ranges::next(range.begin());
 1839|   529k|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  1.05M|{
  950|  1.05M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.1k, False: 1.04M]
  |  |  ------------------
  ------------------
  951|  12.1k|        return eof_error::eof;
  952|  12.1k|    }
  953|  1.04M|    return eof_error::good;
  954|  1.05M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  1.83M|{
  944|  1.83M|    return is_range_eof(r.begin(), r.end());
  945|  1.83M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  1.83M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  1.83M|    {
  937|  1.83M|        return begin == end;
  938|  1.83M|    }
  939|  1.83M|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|   528k|    {
  296|   528k|        ++x;
  297|   528k|        return x;
  298|   528k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3527|  52.6k|    {
 3528|  52.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  52.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  52.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  52.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  52.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 52.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  52.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  52.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  52.6k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  52.6k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 7.73k, False: 44.9k]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|  7.73k|            else {
 3539|  7.73k|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 7.73k]
  ------------------
 3540|  7.73k|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|  7.73k|            }
 3546|  7.73k|        }
 3547|       |
 3548|  52.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 5.23k, False: 47.3k]
  ------------------
 3549|  5.23k|            value = T{0};
 3550|  5.23k|            return std::next(prefix_result.iterator);
 3551|  5.23k|        }
 3552|       |
 3553|  47.3k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  47.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 36.9k, False: 10.4k]
  |  |  ------------------
  ------------------
 3554|  36.9k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  36.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  36.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  36.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  36.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.19k, False: 32.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.19k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.19k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.19k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.19k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.19k|    }                                                  \
  |  |  |  | 3667|  36.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  32.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  32.7k|                    parse_integer_digits_without_thsep(
 3556|  32.7k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  32.7k|                        prefix_result.parsed_base));
 3558|       |
 3559|  32.7k|            auto buf = make_contiguous_buffer(
 3560|  32.7k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  32.7k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  32.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  32.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  32.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  32.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.70k, False: 31.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.70k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.70k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.70k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.70k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.70k|    }                                                  \
  |  |  |  | 3667|  32.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  31.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|  31.0k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|  31.0k|                                        prefix_result.parsed_base));
 3564|       |
 3565|  31.0k|            return ranges::next(
 3566|  31.0k|                prefix_result.iterator,
 3567|  31.0k|                ranges::distance(buf.view().begin(), result_it));
 3568|  32.7k|        }
 3569|       |
 3570|  10.4k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  10.4k|            localized_number_formatting_options<CharT>{loc};
 3575|  10.4k|#endif
 3576|       |
 3577|  10.4k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  10.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  10.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  10.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  10.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 562, False: 9.93k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    562|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    562|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    562|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    562|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    562|    }                                                  \
  |  |  |  | 3667|  10.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  9.93k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  9.93k|                parse_integer_digits_with_thsep(
 3579|  9.93k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  9.93k|                    prefix_result.parsed_base, locale_options));
 3581|  9.93k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  9.93k|            parse_digits_result;
 3583|       |
 3584|  9.93k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 306, False: 9.62k]
  ------------------
 3585|    306|            if (auto e = check_thsep_grouping(
 3586|    306|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|    306|                    thsep_indices, locale_options.grouping);
 3588|    306|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    306|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 172, False: 134]
  |  |  ------------------
  ------------------
 3589|    172|                return unexpected(e);
 3590|    172|            }
 3591|    306|        }
 3592|       |
 3593|  9.76k|        auto nothsep_source_view =
 3594|  9.76k|            std::basic_string_view<CharT>{nothsep_source};
 3595|  9.76k|        SCN_TRY(
  ------------------
  |  | 3668|  9.76k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  9.76k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  9.76k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  9.76k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 382, False: 9.37k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    382|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    382|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    382|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    382|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    382|    }                                                  \
  |  |  |  | 3667|  9.76k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  9.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|  9.37k|            nothsep_source_it,
 3597|  9.37k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|  9.37k|                                prefix_result.parsed_base));
 3599|       |
 3600|  9.37k|        return ranges::next(
 3601|  9.37k|            prefix_result.iterator,
 3602|  9.37k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|  9.37k|                ranges::ssize(thsep_indices));
 3604|  9.76k|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESH_i:
 3314|   419k|{
 3315|   419k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3668|   419k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   419k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   419k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   419k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 419k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   419k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   419k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3316|   419k|    auto [base_prefix_begin_it, sign] = sign_result;
 3317|       |
 3318|   419k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3319|   419k|        parse_integer_base_prefix(
 3320|   419k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3321|       |
 3322|   419k|    if (parsed_zero) {
  ------------------
  |  Branch (3322:9): [True: 42.2k, False: 377k]
  ------------------
 3323|  42.2k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3323:13): [True: 502, False: 41.7k]
  ------------------
 3324|  42.2k|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3324:13): [True: 30.8k, False: 10.8k]
  ------------------
 3325|  31.3k|            digits_begin_it = base_prefix_begin_it;
 3326|  31.3k|        }
 3327|  10.8k|        else {
 3328|  10.8k|            parsed_zero = false;
 3329|  10.8k|        }
 3330|  42.2k|    }
 3331|   377k|    else {
 3332|   377k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3332:13): [True: 2.12k, False: 374k]
  ------------------
 3333|   377k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3333:13): [True: 34.5k, False: 340k]
  ------------------
 3334|  36.7k|            digits_begin_it = base_prefix_begin_it;
 3335|  36.7k|        }
 3336|   377k|    }
 3337|       |
 3338|   419k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3338:9): [True: 364k, False: 55.0k]
  ------------------
 3339|   364k|        sign = sign_type::plus_sign;
 3340|   364k|    }
 3341|   419k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3342|   419k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3343|   419k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3129|   419k|{
 3130|   419k|    auto r = read_one_of_code_unit(range, "+-");
 3131|   419k|    if (!r) {
  ------------------
  |  Branch (3131:9): [True: 364k, False: 55.0k]
  ------------------
 3132|   364k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3132:13): [True: 364k, False: 0]
  ------------------
 3133|   364k|            return std::pair{range.begin(), sign_type::default_sign};
 3134|   364k|        }
 3135|      0|        return unexpected(eof_error::eof);
 3136|   364k|    }
 3137|       |
 3138|  55.0k|    auto& it = *r;
 3139|  55.0k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3139:9): [True: 42.6k, False: 12.4k]
  ------------------
 3140|  42.6k|        return std::pair{it, sign_type::minus_sign};
 3141|  42.6k|    }
 3142|  12.4k|    return std::pair{it, sign_type::plus_sign};
 3143|  55.0k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2260|   419k|{
 2261|   419k|    auto it = read_code_unit(range);
 2262|   419k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   419k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 419k]
  |  |  ------------------
  ------------------
 2263|      0|        return unexpected(make_eof_parse_error(it.error()));
 2264|      0|    }
 2265|       |
 2266|   826k|    for (auto ch : str) {
  ------------------
  |  Branch (2266:18): [True: 826k, False: 364k]
  ------------------
 2267|   826k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2267:13): [True: 55.0k, False: 771k]
  ------------------
 2268|  55.0k|            return *it;
 2269|  55.0k|        }
 2270|   826k|    }
 2271|       |
 2272|   364k|    return unexpected(parse_error::error);
 2273|   419k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEEibEEESG_i:
 3281|   419k|{
 3282|   419k|    switch (base) {
 3283|  22.1k|        case 2:
  ------------------
  |  Branch (3283:9): [True: 22.1k, False: 397k]
  ------------------
 3284|       |            // allow 0b/0B
 3285|  22.1k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3286|  22.1k|                    false};
 3287|       |
 3288|  39.6k|        case 8: {
  ------------------
  |  Branch (3288:9): [True: 39.6k, False: 379k]
  ------------------
 3289|       |            // allow 0o/0O/0
 3290|  39.6k|            bool zero_parsed = false;
 3291|  39.6k|            auto it = apply_opt(
 3292|  39.6k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3293|  39.6k|            return {it, 8, zero_parsed};
 3294|      0|        }
 3295|       |
 3296|  66.3k|        case 16:
  ------------------
  |  Branch (3296:9): [True: 66.3k, False: 352k]
  ------------------
 3297|       |            // allow 0x/0X
 3298|  66.3k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3299|  66.3k|                    false};
 3300|       |
 3301|  71.8k|        case 0:
  ------------------
  |  Branch (3301:9): [True: 71.8k, False: 347k]
  ------------------
 3302|       |            // detect base
 3303|  71.8k|            return parse_integer_base_prefix_for_detection(range);
 3304|       |
 3305|   219k|        default:
  ------------------
  |  Branch (3305:9): [True: 219k, False: 200k]
  ------------------
 3306|       |            // no base prefix allowed
 3307|   219k|            return {range.begin(), base, false};
 3308|   419k|    }
 3309|   419k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEENS1_14parse_expectedESA_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEE4typeEOSI_SK_:
 2279|   128k|{
 2280|   128k|    if (!result) {
  ------------------
  |  Branch (2280:9): [True: 110k, False: 17.6k]
  ------------------
 2281|   110k|        return range.begin();
 2282|   110k|    }
 2283|  17.6k|    return *result;
 2284|   128k|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 3232|  93.4k|{
 3233|  93.4k|    return read_matching_string_classic_nocase(range, "0b");
 3234|  93.4k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2219|   342k|{
 2220|   342k|    using char_type = detail::char_t<Range>;
 2221|       |
 2222|       |    if constexpr (ranges::contiguous_range<Range> &&
 2223|       |                  std::is_same_v<char_type, char>) {
 2224|       |        if (range.size() < str.size()) {
 2225|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2226|       |        }
 2227|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2228|       |            return unexpected(parse_error::error);
 2229|       |        }
 2230|       |        return ranges::next(range.begin(), str.size());
 2231|       |    }
 2232|   342k|    else {
 2233|   342k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|   342k|            if (ch < 'A' || ch > 'Z') {
 2235|   342k|                return ch;
 2236|   342k|            }
 2237|   342k|            return static_cast<char_type>(ch +
 2238|   342k|                                          static_cast<char_type>('a' - 'A'));
 2239|   342k|        };
 2240|       |
 2241|   342k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|   342k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   342k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   342k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   342k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 11.7k, False: 330k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  11.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  11.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  11.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  11.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  11.7k|    }                                                  \
  |  |  |  | 3667|   342k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   330k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2242|   330k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2243|   330k|                        .transform_error(make_eof_parse_error));
 2244|       |
 2245|   330k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|   330k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 328k, False: 2.59k]
  |  |  ------------------
  ------------------
 2246|   330k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2247|   330k|                    return ascii_tolower(a) ==
 2248|   330k|                           static_cast<detail::char_t<Range>>(b);
 2249|   330k|                }))) {
 2250|   328k|            return unexpected(parse_error::error);
 2251|   328k|        }
 2252|       |
 2253|  2.59k|        return it;
 2254|   330k|    }
 2255|   342k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlcE_clEc:
 2233|   467k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|   467k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2234:17): [True: 453k, False: 13.7k]
  |  Branch (2234:29): [True: 7.59k, False: 6.18k]
  ------------------
 2235|   461k|                return ch;
 2236|   461k|            }
 2237|  6.18k|            return static_cast<char_type>(ch +
 2238|  6.18k|                                          static_cast<char_type>('a' - 'A'));
 2239|   467k|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 3246|   110k|{
 3247|   110k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3247:14): [True: 952, False: 109k]
  ------------------
 3248|    952|        return *r;
 3249|    952|    }
 3250|       |
 3251|   109k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3251:14): [True: 42.2k, False: 67.5k]
  ------------------
 3252|  42.2k|        zero_parsed = true;
 3253|  42.2k|        return *r;
 3254|  42.2k|    }
 3255|       |
 3256|  67.5k|    return unexpected(parse_error::error);
 3257|   109k|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2134|   109k|{
 2135|   109k|    auto it = read_code_unit(range);
 2136|   109k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 360, False: 109k]
  |  |  ------------------
  ------------------
 2137|    360|        return unexpected(make_eof_parse_error(it.error()));
 2138|    360|    }
 2139|       |
 2140|   109k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 67.1k, False: 42.2k]
  |  |  ------------------
  ------------------
 2141|   109k|                     static_cast<detail::char_t<Range>>(ch))) {
 2142|  67.1k|        return unexpected(parse_error::error);
 2143|  67.1k|    }
 2144|       |
 2145|  42.2k|    return *it;
 2146|   109k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 3239|   138k|{
 3240|   138k|    return read_matching_string_classic_nocase(range, "0x");
 3241|   138k|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEEibEEESG_:
 3262|  71.8k|{
 3263|  71.8k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3263:14): [True: 532, False: 71.3k]
  ------------------
 3264|    532|        return {*r, 16, false};
 3265|    532|    }
 3266|  71.3k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3266:14): [True: 318, False: 71.0k]
  ------------------
 3267|    318|        return {*r, 2, false};
 3268|    318|    }
 3269|  71.0k|    {
 3270|  71.0k|        bool zero_parsed{false};
 3271|  71.0k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3271:18): [True: 26.4k, False: 44.6k]
  ------------------
 3272|  26.4k|            return {*r, 8, zero_parsed};
 3273|  26.4k|        }
 3274|  71.0k|    }
 3275|  44.6k|    return {range.begin(), 10, false};
 3276|  71.0k|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_i:
 3348|   315k|{
 3349|   315k|    using char_type = detail::char_t<Range>;
 3350|       |
 3351|       |    if constexpr (ranges::contiguous_range<Range>) {
 3352|       |        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3353|       |            return unexpected_scan_error(
 3354|       |                scan_error::invalid_scanned_value,
 3355|       |                "Failed to parse integer: No digits found");
 3356|       |        }
 3357|       |        return range.end();
 3358|       |    }
 3359|   315k|    else {
 3360|   315k|        return read_while1_code_unit(range,
 3361|   315k|                                     [&](char_type ch) noexcept {
 3362|   315k|                                         return char_to_int(ch) < base;
 3363|   315k|                                     })
 3364|   315k|            .transform_error(map_parse_error_to_scan_error(
 3365|   315k|                scan_error::invalid_scanned_value,
 3366|   315k|                "Failed to parse integer: No digits found"));
 3367|   315k|    }
 3368|   315k|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1983|   315k|{
 1984|   315k|    auto it = read_while_code_unit(range, pred);
 1985|   315k|    if (it == range.begin()) {
  ------------------
  |  Branch (1985:9): [True: 29.1k, False: 286k]
  ------------------
 1986|  29.1k|        return unexpected(parse_error::error);
 1987|  29.1k|    }
 1988|   286k|    return it;
 1989|   315k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlcE_SQ_TnPNSI_9enable_ifIXaaaasr6detailE11is_not_selfISK_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSS_EEvE4typeELPv0EEEOSK_:
  742|   315k|        : m_fptr([](storage fn,
  743|   315k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   315k|              cvref<T> obj = *get<T>(fn);
  745|   315k|              if constexpr (std::is_void_v<R>) {
  746|   315k|                  obj(static_cast<decltype(args)>(args)...);
  747|   315k|              }
  748|   315k|              else {
  749|   315k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   315k|              }
  751|   315k|          }),
  752|   315k|          m_storage(std::addressof(f))
  753|   315k|    {
  754|   315k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlcE_SQ_TnPNSI_9enable_ifIXaaaasr6detailE11is_not_selfISK_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSS_EEvE4typeELPv0EEEOSK_ENKUlNS1_12fnref_detail4base7storageEcE_clES11_c:
  743|  1.17M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.17M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.17M|              else {
  749|  1.17M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.17M|              }
  751|  1.17M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_iEUlcE_EEDaNS3_7storageE:
  683|  1.17M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.17M|        else if constexpr (std::is_object_v<T>) {
  688|  1.17M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.17M|    }
_ZZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_iENKUlcE_clEc:
 3361|  1.17M|                                     [&](char_type ch) noexcept {
 3362|  1.17M|                                         return char_to_int(ch) < base;
 3363|  1.17M|                                     })
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlcE_TnPNSI_9enable_ifIXsr3stdE11is_object_vISK_EEvE4typeELPv0EEEPSK_:
  660|   315k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   315k|        {
  662|   315k|        }
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENSE_12basic_stringIT0_NSE_11char_traitsISN_EENSE_9allocatorISN_EEEENSM_IcNSO_IcEENSQ_IcEEEEEEEEESH_iRKNS1_35localized_number_formatting_optionsISN_EE:
 3378|  61.3k|{
 3379|  61.3k|    std::basic_string<CharT> output;
 3380|  61.3k|    std::string thsep_indices;
 3381|  61.3k|    auto it = range.begin();
 3382|  61.3k|    bool digit_matched = false;
 3383|   351k|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3383:12): [True: 349k, False: 2.25k]
  ------------------
 3384|   349k|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3384:13): [True: 36.0k, False: 313k]
  ------------------
 3385|  36.0k|            thsep_indices.push_back(
 3386|  36.0k|                static_cast<char>(ranges::distance(range.begin(), it)));
 3387|  36.0k|        }
 3388|   313k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3388:18): [True: 59.1k, False: 254k]
  ------------------
 3389|  59.1k|            break;
 3390|  59.1k|        }
 3391|   254k|        else {
 3392|   254k|            output.push_back(*it);
 3393|   254k|            digit_matched = true;
 3394|   254k|        }
 3395|   349k|    }
 3396|  61.3k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|  61.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.07k, False: 58.2k]
  |  |  ------------------
  ------------------
 3397|  3.07k|        return unexpected_scan_error(
 3398|  3.07k|            scan_error::invalid_scanned_value,
 3399|  3.07k|            "Failed to parse integer: No digits found");
 3400|  3.07k|    }
 3401|  58.2k|    return std::tuple{it, output, thsep_indices};
 3402|  61.3k|}
_ZN3scn2v34impl20check_thsep_groupingINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_EEEENS0_10scan_errorET_NSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEENSE_17basic_string_viewIcSH_EE:
 3199|  1.70k|{
 3200|  1.70k|    SCN_EXPECT(!thsep_indices.empty());
  ------------------
  |  |  924|  1.70k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.70k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3201|       |
 3202|  1.70k|    if (!check_thsep_grouping_impl(range, thsep_indices, grouping)) {
  ------------------
  |  Branch (3202:9): [True: 910, False: 792]
  ------------------
 3203|    910|        SCN_UNLIKELY_ATTR
 3204|    910|        return {scan_error::invalid_scanned_value,
 3205|    910|                "Invalid thousands separator grouping"};
 3206|    910|    }
 3207|       |
 3208|    792|    return {};
 3209|  1.70k|}
_ZN3scn2v34impl25check_thsep_grouping_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_EEEEbT_RNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEENSD_17basic_string_viewIcSG_EE:
 3161|  1.70k|{
 3162|  1.70k|    transform_thsep_indices(thsep_indices,
 3163|  1.70k|                            ranges::distance(range.begin(), range.end()));
 3164|       |
 3165|  1.70k|    auto thsep_it = thsep_indices.rbegin();
 3166|  1.70k|    for (auto grouping_it = grouping.begin();
 3167|  1.70k|         grouping_it != grouping.end() && thsep_it != thsep_indices.rend() - 1;
  ------------------
  |  Branch (3167:10): [True: 0, False: 1.70k]
  |  Branch (3167:10): [True: 0, False: 1.70k]
  |  Branch (3167:43): [True: 0, False: 0]
  ------------------
 3168|  1.70k|         ++grouping_it, (void)++thsep_it) {
 3169|      0|        if (*thsep_it != *grouping_it) {
  ------------------
  |  Branch (3169:13): [True: 0, False: 0]
  ------------------
 3170|      0|            return false;
 3171|      0|        }
 3172|      0|    }
 3173|       |
 3174|  1.70k|    SCN_CLANG_PUSH
 3175|       |    // false positive
 3176|  1.70k|    SCN_CLANG_IGNORE("-Wzero-as-null-pointer-constant")
 3177|       |
 3178|  26.9k|    for (; thsep_it < thsep_indices.rend() - 1; ++thsep_it) {
  ------------------
  |  Branch (3178:12): [True: 25.6k, False: 1.25k]
  ------------------
 3179|  25.6k|        if (*thsep_it != grouping.back()) {
  ------------------
  |  Branch (3179:13): [True: 446, False: 25.2k]
  ------------------
 3180|    446|            return false;
 3181|    446|        }
 3182|  25.6k|    }
 3183|       |
 3184|  1.25k|    if (thsep_it == thsep_indices.rend() - 1) {
  ------------------
  |  Branch (3184:9): [True: 1.25k, False: 0]
  ------------------
 3185|  1.25k|        if (*thsep_it > grouping.back()) {
  ------------------
  |  Branch (3185:13): [True: 464, False: 792]
  ------------------
 3186|    464|            return false;
 3187|    464|        }
 3188|  1.25k|    }
 3189|       |
 3190|    792|    SCN_CLANG_POP
 3191|       |
 3192|    792|    return true;
 3193|  1.25k|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_EEEEDaOT_:
 1670|   286k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|       |                  ranges::sized_range<Range>) {
 1674|       |        return string_view_wrapper{SCN_FWD(range)};
 1675|       |    }
 1676|   286k|    else {
 1677|   286k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|   286k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1678|   286k|    }
 1679|   286k|}
_ZN3scn2v34impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1524|   286k|    {
 1525|   286k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   286k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1526|   286k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1608|   286k|    {
 1609|   286k|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|       |                      ranges::sized_range<Range>) {
 1614|       |            m_storage.reset();
 1615|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|       |                                          std::basic_string<CharT>>) {
 1619|       |            m_storage.emplace(SCN_FWD(range));
 1620|       |            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|   286k|                           ranges::common_range<Range>) {
 1626|   286k|            auto beg_seg = range.begin().contiguous_segment();
 1627|   286k|            auto end_seg = range.end().contiguous_segment();
 1628|   286k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|   286k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 180k, False: 105k]
  |  |  ------------------
  ------------------
 1629|   286k|                             detail::to_address(end_seg.end()))) {
 1630|   180k|                auto& str = m_storage.emplace();
 1631|   180k|                str.reserve(range.end().position() - range.begin().position());
 1632|   180k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|   180k|                m_view = string_view_type{str};
 1634|   180k|                return;
 1635|   180k|            }
 1636|       |
 1637|   105k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|   105k|                                                            end_seg.data());
 1639|   105k|            m_storage.reset();
 1640|       |        }
 1641|       |        else {
 1642|       |            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|       |            if constexpr (ranges::common_range<Range>) {
 1647|       |                std::copy(ranges::begin(range), ranges::end(range),
 1648|       |                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|       |            m_view = string_view_type{str};
 1657|       |        }
 1658|   286k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1569|   566k|    {
 1570|   566k|        return m_view;
 1571|   566k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1559|   286k|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6067|   278k|    {
 6068|   278k|        const bool need_skipped_width =
 6069|   278k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 0, False: 278k]
  |  Branch (6069:33): [True: 0, False: 278k]
  ------------------
 6070|   278k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|   278k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 0, False: 278k]
  ------------------
 6073|   278k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 0, False: 278k]
  ------------------
 6074|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 0, False: 0]
  ------------------
 6075|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 0, False: 0]
  ------------------
 6076|      0|                return result_type{rng.begin(), 0};
 6077|      0|            }
 6078|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|      0|                             specs.fill, need_skipped_width);
 6080|      0|        }
 6081|   278k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 278k, False: 0]
  ------------------
 6082|   278k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 0, False: 278k]
  ------------------
 6083|   278k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 0, False: 0]
  |  Branch (6083:35): [True: 0, False: 0]
  ------------------
 6084|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 0, False: 0]
  ------------------
 6085|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 0, False: 0]
  ------------------
 6086|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                const auto initial_width =
 6088|      0|                    specs.precision - prefix_width - value_width;
 6089|      0|                auto max_width_view = take_width(rng, initial_width);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|      0|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|   278k|        return result_type{rng.begin(), 0};
 6107|   278k|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1833|   531k|{
 1834|   531k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   531k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 360, False: 530k]
  |  |  ------------------
  ------------------
 1835|    360|        return unexpected(e);
 1836|    360|    }
 1837|       |
 1838|   530k|    return ranges::next(range.begin());
 1839|   531k|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|  1.37M|{
  950|  1.37M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.37M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.2k, False: 1.36M]
  |  |  ------------------
  ------------------
  951|  12.2k|        return eof_error::eof;
  952|  12.2k|    }
  953|  1.36M|    return eof_error::good;
  954|  1.37M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|  1.37M|{
  944|  1.37M|    return is_range_eof(r.begin(), r.end());
  945|  1.37M|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|  1.37M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  1.37M|    {
  937|  1.37M|        return begin == end;
  938|  1.37M|    }
  939|  1.37M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   530k|    {
  296|   530k|        ++x;
  297|   530k|        return x;
  298|   530k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|  52.7k|    {
 3528|  52.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  52.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  52.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  52.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  52.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 52.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  52.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  52.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  52.7k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  52.7k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 7.72k, False: 45.0k]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|  7.72k|            else {
 3539|  7.72k|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 7.72k]
  ------------------
 3540|  7.72k|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|  7.72k|            }
 3546|  7.72k|        }
 3547|       |
 3548|  52.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 5.23k, False: 47.5k]
  ------------------
 3549|  5.23k|            value = T{0};
 3550|  5.23k|            return std::next(prefix_result.iterator);
 3551|  5.23k|        }
 3552|       |
 3553|  47.5k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  47.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 36.9k, False: 10.5k]
  |  |  ------------------
  ------------------
 3554|  36.9k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  36.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  36.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  36.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  36.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 128, False: 36.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    128|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    128|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    128|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    128|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    128|    }                                                  \
  |  |  |  | 3667|  36.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  36.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  36.8k|                    parse_integer_digits_without_thsep(
 3556|  36.8k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  36.8k|                        prefix_result.parsed_base));
 3558|       |
 3559|  36.8k|            auto buf = make_contiguous_buffer(
 3560|  36.8k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  36.8k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  36.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  36.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  36.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  36.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.88k, False: 30.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  5.88k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  5.88k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  5.88k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  5.88k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  5.88k|    }                                                  \
  |  |  |  | 3667|  36.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  30.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|  30.9k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|  30.9k|                                        prefix_result.parsed_base));
 3564|       |
 3565|  30.9k|            return ranges::next(
 3566|  30.9k|                prefix_result.iterator,
 3567|  30.9k|                ranges::distance(buf.view().begin(), result_it));
 3568|  36.8k|        }
 3569|       |
 3570|  10.5k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  10.5k|            localized_number_formatting_options<CharT>{loc};
 3575|  10.5k|#endif
 3576|       |
 3577|  10.5k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  10.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  10.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  10.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  10.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 592, False: 9.92k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    592|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    592|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    592|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    592|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    592|    }                                                  \
  |  |  |  | 3667|  10.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  9.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  9.92k|                parse_integer_digits_with_thsep(
 3579|  9.92k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  9.92k|                    prefix_result.parsed_base, locale_options));
 3581|  9.92k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  9.92k|            parse_digits_result;
 3583|       |
 3584|  9.92k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 306, False: 9.61k]
  ------------------
 3585|    306|            if (auto e = check_thsep_grouping(
 3586|    306|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|    306|                    thsep_indices, locale_options.grouping);
 3588|    306|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    306|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 172, False: 134]
  |  |  ------------------
  ------------------
 3589|    172|                return unexpected(e);
 3590|    172|            }
 3591|    306|        }
 3592|       |
 3593|  9.74k|        auto nothsep_source_view =
 3594|  9.74k|            std::basic_string_view<CharT>{nothsep_source};
 3595|  9.74k|        SCN_TRY(
  ------------------
  |  | 3668|  9.74k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  9.74k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  9.74k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  9.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 378, False: 9.37k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    378|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    378|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    378|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    378|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    378|    }                                                  \
  |  |  |  | 3667|  9.74k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  9.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|  9.37k|            nothsep_source_it,
 3597|  9.37k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|  9.37k|                                prefix_result.parsed_base));
 3599|       |
 3600|  9.37k|        return ranges::next(
 3601|  9.37k|            prefix_result.iterator,
 3602|  9.37k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|  9.37k|                ranges::ssize(thsep_indices));
 3604|  9.74k|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3314|   421k|{
 3315|   421k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3668|   421k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   421k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   421k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   421k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 421k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   421k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   421k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3316|   421k|    auto [base_prefix_begin_it, sign] = sign_result;
 3317|       |
 3318|   421k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3319|   421k|        parse_integer_base_prefix(
 3320|   421k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3321|       |
 3322|   421k|    if (parsed_zero) {
  ------------------
  |  Branch (3322:9): [True: 42.2k, False: 378k]
  ------------------
 3323|  42.2k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3323:13): [True: 502, False: 41.7k]
  ------------------
 3324|  42.2k|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3324:13): [True: 30.8k, False: 10.8k]
  ------------------
 3325|  31.3k|            digits_begin_it = base_prefix_begin_it;
 3326|  31.3k|        }
 3327|  10.8k|        else {
 3328|  10.8k|            parsed_zero = false;
 3329|  10.8k|        }
 3330|  42.2k|    }
 3331|   378k|    else {
 3332|   378k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3332:13): [True: 2.12k, False: 376k]
  ------------------
 3333|   378k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3333:13): [True: 35.3k, False: 341k]
  ------------------
 3334|  37.4k|            digits_begin_it = base_prefix_begin_it;
 3335|  37.4k|        }
 3336|   378k|    }
 3337|       |
 3338|   421k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3338:9): [True: 365k, False: 55.1k]
  ------------------
 3339|   365k|        sign = sign_type::plus_sign;
 3340|   365k|    }
 3341|   421k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3342|   421k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3343|   421k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3129|   421k|{
 3130|   421k|    auto r = read_one_of_code_unit(range, "+-");
 3131|   421k|    if (!r) {
  ------------------
  |  Branch (3131:9): [True: 365k, False: 55.1k]
  ------------------
 3132|   365k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3132:13): [True: 365k, False: 0]
  ------------------
 3133|   365k|            return std::pair{range.begin(), sign_type::default_sign};
 3134|   365k|        }
 3135|      0|        return unexpected(eof_error::eof);
 3136|   365k|    }
 3137|       |
 3138|  55.1k|    auto& it = *r;
 3139|  55.1k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3139:9): [True: 42.7k, False: 12.4k]
  ------------------
 3140|  42.7k|        return std::pair{it, sign_type::minus_sign};
 3141|  42.7k|    }
 3142|  12.4k|    return std::pair{it, sign_type::plus_sign};
 3143|  55.1k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2260|   421k|{
 2261|   421k|    auto it = read_code_unit(range);
 2262|   421k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   421k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 421k]
  |  |  ------------------
  ------------------
 2263|      0|        return unexpected(make_eof_parse_error(it.error()));
 2264|      0|    }
 2265|       |
 2266|   829k|    for (auto ch : str) {
  ------------------
  |  Branch (2266:18): [True: 829k, False: 365k]
  ------------------
 2267|   829k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2267:13): [True: 55.1k, False: 774k]
  ------------------
 2268|  55.1k|            return *it;
 2269|  55.1k|        }
 2270|   829k|    }
 2271|       |
 2272|   365k|    return unexpected(parse_error::error);
 2273|   421k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3281|   421k|{
 3282|   421k|    switch (base) {
 3283|  22.2k|        case 2:
  ------------------
  |  Branch (3283:9): [True: 22.2k, False: 398k]
  ------------------
 3284|       |            // allow 0b/0B
 3285|  22.2k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3286|  22.2k|                    false};
 3287|       |
 3288|  39.8k|        case 8: {
  ------------------
  |  Branch (3288:9): [True: 39.8k, False: 381k]
  ------------------
 3289|       |            // allow 0o/0O/0
 3290|  39.8k|            bool zero_parsed = false;
 3291|  39.8k|            auto it = apply_opt(
 3292|  39.8k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3293|  39.8k|            return {it, 8, zero_parsed};
 3294|      0|        }
 3295|       |
 3296|  66.3k|        case 16:
  ------------------
  |  Branch (3296:9): [True: 66.3k, False: 354k]
  ------------------
 3297|       |            // allow 0x/0X
 3298|  66.3k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3299|  66.3k|                    false};
 3300|       |
 3301|  71.9k|        case 0:
  ------------------
  |  Branch (3301:9): [True: 71.9k, False: 349k]
  ------------------
 3302|       |            // detect base
 3303|  71.9k|            return parse_integer_base_prefix_for_detection(range);
 3304|       |
 3305|   220k|        default:
  ------------------
  |  Branch (3305:9): [True: 220k, False: 200k]
  ------------------
 3306|       |            // no base prefix allowed
 3307|   220k|            return {range.begin(), base, false};
 3308|   421k|    }
 3309|   421k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2279|   128k|{
 2280|   128k|    if (!result) {
  ------------------
  |  Branch (2280:9): [True: 110k, False: 17.6k]
  ------------------
 2281|   110k|        return range.begin();
 2282|   110k|    }
 2283|  17.6k|    return *result;
 2284|   128k|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3232|  93.6k|{
 3233|  93.6k|    return read_matching_string_classic_nocase(range, "0b");
 3234|  93.6k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2219|   342k|{
 2220|   342k|    using char_type = detail::char_t<Range>;
 2221|       |
 2222|       |    if constexpr (ranges::contiguous_range<Range> &&
 2223|   342k|                  std::is_same_v<char_type, char>) {
 2224|   342k|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2224:13): [True: 11.9k, False: 330k]
  ------------------
 2225|  11.9k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2226|  11.9k|        }
 2227|   330k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2227:13): [True: 328k, False: 2.59k]
  ------------------
 2228|   328k|            return unexpected(parse_error::error);
 2229|   328k|        }
 2230|  2.59k|        return ranges::next(range.begin(), str.size());
 2231|       |    }
 2232|       |    else {
 2233|       |        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|       |            if (ch < 'A' || ch > 'Z') {
 2235|       |                return ch;
 2236|       |            }
 2237|       |            return static_cast<char_type>(ch +
 2238|       |                                          static_cast<char_type>('a' - 'A'));
 2239|       |        };
 2240|       |
 2241|       |        SCN_TRY(it, read_exactly_n_code_units(
 2242|       |                        range, static_cast<std::ptrdiff_t>(str.size()))
 2243|       |                        .transform_error(make_eof_parse_error));
 2244|       |
 2245|       |        if (SCN_UNLIKELY(!std::equal(
 2246|       |                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2247|       |                    return ascii_tolower(a) ==
 2248|       |                           static_cast<detail::char_t<Range>>(b);
 2249|       |                }))) {
 2250|       |            return unexpected(parse_error::error);
 2251|       |        }
 2252|       |
 2253|       |        return it;
 2254|       |    }
 2255|   342k|}
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3246|   110k|{
 3247|   110k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3247:14): [True: 952, False: 109k]
  ------------------
 3248|    952|        return *r;
 3249|    952|    }
 3250|       |
 3251|   109k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3251:14): [True: 42.2k, False: 67.7k]
  ------------------
 3252|  42.2k|        zero_parsed = true;
 3253|  42.2k|        return *r;
 3254|  42.2k|    }
 3255|       |
 3256|  67.7k|    return unexpected(parse_error::error);
 3257|   109k|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2134|   109k|{
 2135|   109k|    auto it = read_code_unit(range);
 2136|   109k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 360, False: 109k]
  |  |  ------------------
  ------------------
 2137|    360|        return unexpected(make_eof_parse_error(it.error()));
 2138|    360|    }
 2139|       |
 2140|   109k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 67.3k, False: 42.2k]
  |  |  ------------------
  ------------------
 2141|   109k|                     static_cast<detail::char_t<Range>>(ch))) {
 2142|  67.3k|        return unexpected(parse_error::error);
 2143|  67.3k|    }
 2144|       |
 2145|  42.2k|    return *it;
 2146|   109k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3239|   138k|{
 3240|   138k|    return read_matching_string_classic_nocase(range, "0x");
 3241|   138k|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3262|  71.9k|{
 3263|  71.9k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3263:14): [True: 532, False: 71.4k]
  ------------------
 3264|    532|        return {*r, 16, false};
 3265|    532|    }
 3266|  71.4k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3266:14): [True: 318, False: 71.1k]
  ------------------
 3267|    318|        return {*r, 2, false};
 3268|    318|    }
 3269|  71.1k|    {
 3270|  71.1k|        bool zero_parsed{false};
 3271|  71.1k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3271:18): [True: 26.3k, False: 44.7k]
  ------------------
 3272|  26.3k|            return {*r, 8, zero_parsed};
 3273|  26.3k|        }
 3274|  71.1k|    }
 3275|  44.7k|    return {range.begin(), 10, false};
 3276|  71.1k|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3348|   316k|{
 3349|   316k|    using char_type = detail::char_t<Range>;
 3350|       |
 3351|   316k|    if constexpr (ranges::contiguous_range<Range>) {
 3352|   316k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   316k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 891, False: 315k]
  |  |  ------------------
  ------------------
 3353|    891|            return unexpected_scan_error(
 3354|    891|                scan_error::invalid_scanned_value,
 3355|    891|                "Failed to parse integer: No digits found");
 3356|    891|        }
 3357|   315k|        return range.end();
 3358|       |    }
 3359|       |    else {
 3360|       |        return read_while1_code_unit(range,
 3361|       |                                     [&](char_type ch) noexcept {
 3362|       |                                         return char_to_int(ch) < base;
 3363|       |                                     })
 3364|       |            .transform_error(map_parse_error_to_scan_error(
 3365|       |                scan_error::invalid_scanned_value,
 3366|       |                "Failed to parse integer: No digits found"));
 3367|       |    }
 3368|   316k|}
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3378|  61.4k|{
 3379|  61.4k|    std::basic_string<CharT> output;
 3380|  61.4k|    std::string thsep_indices;
 3381|  61.4k|    auto it = range.begin();
 3382|  61.4k|    bool digit_matched = false;
 3383|   351k|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3383:12): [True: 349k, False: 2.23k]
  ------------------
 3384|   349k|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3384:13): [True: 35.9k, False: 313k]
  ------------------
 3385|  35.9k|            thsep_indices.push_back(
 3386|  35.9k|                static_cast<char>(ranges::distance(range.begin(), it)));
 3387|  35.9k|        }
 3388|   313k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3388:18): [True: 59.2k, False: 253k]
  ------------------
 3389|  59.2k|            break;
 3390|  59.2k|        }
 3391|   253k|        else {
 3392|   253k|            output.push_back(*it);
 3393|   253k|            digit_matched = true;
 3394|   253k|        }
 3395|   349k|    }
 3396|  61.4k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|  61.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.24k, False: 58.2k]
  |  |  ------------------
  ------------------
 3397|  3.24k|        return unexpected_scan_error(
 3398|  3.24k|            scan_error::invalid_scanned_value,
 3399|  3.24k|            "Failed to parse integer: No digits found");
 3400|  3.24k|    }
 3401|  58.2k|    return std::tuple{it, output, thsep_indices};
 3402|  61.4k|}
_ZN3scn2v34impl20check_thsep_groupingINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_10scan_errorET_NSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEENSC_17basic_string_viewIcSF_EE:
 3199|  1.69k|{
 3200|  1.69k|    SCN_EXPECT(!thsep_indices.empty());
  ------------------
  |  |  924|  1.69k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.69k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3201|       |
 3202|  1.69k|    if (!check_thsep_grouping_impl(range, thsep_indices, grouping)) {
  ------------------
  |  Branch (3202:9): [True: 902, False: 792]
  ------------------
 3203|    902|        SCN_UNLIKELY_ATTR
 3204|    902|        return {scan_error::invalid_scanned_value,
 3205|    902|                "Invalid thousands separator grouping"};
 3206|    902|    }
 3207|       |
 3208|    792|    return {};
 3209|  1.69k|}
_ZN3scn2v34impl25check_thsep_grouping_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_RNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEENSB_17basic_string_viewIcSE_EE:
 3161|  1.69k|{
 3162|  1.69k|    transform_thsep_indices(thsep_indices,
 3163|  1.69k|                            ranges::distance(range.begin(), range.end()));
 3164|       |
 3165|  1.69k|    auto thsep_it = thsep_indices.rbegin();
 3166|  1.69k|    for (auto grouping_it = grouping.begin();
 3167|  1.69k|         grouping_it != grouping.end() && thsep_it != thsep_indices.rend() - 1;
  ------------------
  |  Branch (3167:10): [True: 0, False: 1.69k]
  |  Branch (3167:10): [True: 0, False: 1.69k]
  |  Branch (3167:43): [True: 0, False: 0]
  ------------------
 3168|  1.69k|         ++grouping_it, (void)++thsep_it) {
 3169|      0|        if (*thsep_it != *grouping_it) {
  ------------------
  |  Branch (3169:13): [True: 0, False: 0]
  ------------------
 3170|      0|            return false;
 3171|      0|        }
 3172|      0|    }
 3173|       |
 3174|  1.69k|    SCN_CLANG_PUSH
 3175|       |    // false positive
 3176|  1.69k|    SCN_CLANG_IGNORE("-Wzero-as-null-pointer-constant")
 3177|       |
 3178|  26.9k|    for (; thsep_it < thsep_indices.rend() - 1; ++thsep_it) {
  ------------------
  |  Branch (3178:12): [True: 25.6k, False: 1.25k]
  ------------------
 3179|  25.6k|        if (*thsep_it != grouping.back()) {
  ------------------
  |  Branch (3179:13): [True: 438, False: 25.2k]
  ------------------
 3180|    438|            return false;
 3181|    438|        }
 3182|  25.6k|    }
 3183|       |
 3184|  1.25k|    if (thsep_it == thsep_indices.rend() - 1) {
  ------------------
  |  Branch (3184:9): [True: 1.25k, False: 0]
  ------------------
 3185|  1.25k|        if (*thsep_it > grouping.back()) {
  ------------------
  |  Branch (3185:13): [True: 464, False: 792]
  ------------------
 3186|    464|            return false;
 3187|    464|        }
 3188|  1.25k|    }
 3189|       |
 3190|    792|    SCN_CLANG_POP
 3191|       |
 3192|    792|    return true;
 3193|  1.25k|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1670|   315k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|   315k|                  ranges::sized_range<Range>) {
 1674|   315k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|   315k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1675|       |    }
 1676|       |    else {
 1677|       |        return contiguous_range_factory{SCN_FWD(range)};
 1678|       |    }
 1679|   315k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1476|   315k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1477|   315k|    {
 1478|   315k|    }
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1490|  1.45M|    {
 1491|  1.45M|        return sv;
 1492|  1.45M|    }
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2939|   430k|{
 2940|   430k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 430k, False: 0]
  ------------------
 2941|   430k|        auto it = read_while_classic_space(range);
 2942|   430k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|   430k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   430k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.10k, False: 421k]
  |  |  ------------------
  ------------------
 2944|  9.10k|            return unexpected(e);
 2945|  9.10k|        }
 2946|       |
 2947|   421k|        return it;
 2948|   430k|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|   430k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2104|   430k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|   430k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|   430k|        auto buf = make_contiguous_buffer(range);
 2109|   430k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|   430k|        return ranges::next(range.begin(),
 2111|   430k|                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|       |    else {
 2114|       |        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|       |            return detail::is_cp_space(cp);
 2127|       |        });
 2128|       |    }
 2129|   430k|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1670|   430k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|   430k|                  ranges::sized_range<Range>) {
 1674|   430k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|   430k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1675|       |    }
 1676|       |    else {
 1677|       |        return contiguous_range_factory{SCN_FWD(range)};
 1678|       |    }
 1679|   430k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1476|   430k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1477|   430k|    {
 1478|   430k|    }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|   666k|    {
  304|   666k|        ranges::advance(x, n);
  305|   666k|        return x;
  306|   666k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  1.07M|    {
  268|  1.07M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.07M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  1.07M|    {
  181|  2.65M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 1.57M, False: 1.07M]
  ------------------
  182|  1.57M|            ++i;
  183|  1.57M|        }
  184|  1.07M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6181|  54.0k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|  54.0k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|  54.0k|            auto rd = make_reader<T, char_type>();
 6195|  54.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  54.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 54.0k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|  54.0k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 54.0k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|  54.0k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|  54.0k|                return impl(rd, range, value);
 6202|  54.0k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  54.0k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3028|   670k|    {
 3029|   670k|        reader_error_handler eh{};
 3030|   670k|        get_derived().check_specs_impl(specs, eh);
 3031|   670k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|   670k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 670k]
  |  |  ------------------
  ------------------
 3032|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|      0|        }
 3034|   670k|        return {};
 3035|   670k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
 3039|   670k|    {
 3040|   670k|        return static_cast<Derived&>(*this);
 3041|   670k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3473|   670k|    {
 3474|   670k|        detail::check_int_type_specs(specs, eh);
 3475|   670k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|  54.0k|    {
 6113|  54.0k|        const bool need_skipped_width =
 6114|  54.0k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 54.0k]
  |  Branch (6114:33): [True: 0, False: 54.0k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  54.0k|        auto it = rng.begin();
 6118|  54.0k|        std::ptrdiff_t prefix_width = 0;
 6119|  54.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 54.0k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  54.0k|        else {
 6127|  54.0k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  54.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  54.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  54.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  54.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.46k, False: 52.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.46k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.46k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.46k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.46k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.46k|    }                                                  \
  |  |  |  | 3667|  54.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  52.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  52.6k|            std::tie(it, prefix_width) = prefix_result;
 6129|  52.6k|        }
 6130|  52.6k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  52.6k|        std::ptrdiff_t value_width = 0;
 6134|  52.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 52.6k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  52.6k|        else {
 6150|  52.6k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  52.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  52.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  52.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 7.00k, False: 45.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  7.00k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  7.00k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  7.00k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  7.00k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  7.00k|    }                                                  \
  |  | 3667|  52.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  52.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  45.6k|                                             specs, value, loc));
 6152|       |
 6153|  45.6k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 45.6k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  45.6k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  45.6k|        std::ptrdiff_t postfix_width = 0;
 6162|  45.6k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 44.6k, False: 996]
  ------------------
 6163|  44.6k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  44.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  44.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  44.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  44.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 44.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  44.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  44.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  44.6k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  44.6k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  44.6k|                                 value_width));
 6167|  44.6k|            std::tie(it, postfix_width) = postfix_result;
 6168|  44.6k|        }
 6169|       |
 6170|  45.6k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  45.6k|                                                 value_width, postfix_width);
 6172|  45.6k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 45.6k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  45.6k|        return it;
 6177|  45.6k|    }
_ZNK3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
 3023|  1.41M|    {
 3024|  1.41M|        return true;
 3025|  1.41M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6181|  64.0k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|  64.0k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|  64.0k|            auto rd = make_reader<T, char_type>();
 6195|  64.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  64.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 64.0k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|  64.0k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 64.0k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|  64.0k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|  64.0k|                return impl(rd, range, value);
 6202|  64.0k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  64.0k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|  64.0k|    {
 6113|  64.0k|        const bool need_skipped_width =
 6114|  64.0k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 64.0k]
  |  Branch (6114:33): [True: 0, False: 64.0k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  64.0k|        auto it = rng.begin();
 6118|  64.0k|        std::ptrdiff_t prefix_width = 0;
 6119|  64.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 64.0k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  64.0k|        else {
 6127|  64.0k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  64.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  64.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  64.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  64.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.93k, False: 62.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.93k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.93k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.93k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.93k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.93k|    }                                                  \
  |  |  |  | 3667|  64.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  62.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  62.1k|            std::tie(it, prefix_width) = prefix_result;
 6129|  62.1k|        }
 6130|  62.1k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  62.1k|        std::ptrdiff_t value_width = 0;
 6134|  62.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 62.1k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  62.1k|        else {
 6150|  62.1k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  62.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  62.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  62.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 6.54k, False: 55.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  6.54k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  6.54k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  6.54k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  6.54k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  6.54k|    }                                                  \
  |  | 3667|  62.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  62.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  55.6k|                                             specs, value, loc));
 6152|       |
 6153|  55.6k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 55.6k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  55.6k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  55.6k|        std::ptrdiff_t postfix_width = 0;
 6162|  55.6k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 54.2k, False: 1.33k]
  ------------------
 6163|  54.2k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  54.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  54.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  54.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  54.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 54.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  54.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  54.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  54.2k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  54.2k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  54.2k|                                 value_width));
 6167|  54.2k|            std::tie(it, postfix_width) = postfix_result;
 6168|  54.2k|        }
 6169|       |
 6170|  55.6k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  55.6k|                                                 value_width, postfix_width);
 6172|  55.6k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 55.6k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  55.6k|        return it;
 6177|  55.6k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3527|  62.1k|    {
 3528|  62.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  62.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  62.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  62.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  62.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 62.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  62.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  62.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  62.1k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  62.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 8.08k, False: 54.0k]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|  8.08k|            else {
 3539|  8.08k|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 8.08k]
  ------------------
 3540|  8.08k|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|  8.08k|            }
 3546|  8.08k|        }
 3547|       |
 3548|  62.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 5.52k, False: 56.6k]
  ------------------
 3549|  5.52k|            value = T{0};
 3550|  5.52k|            return std::next(prefix_result.iterator);
 3551|  5.52k|        }
 3552|       |
 3553|  56.6k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  56.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 44.5k, False: 12.0k]
  |  |  ------------------
  ------------------
 3554|  44.5k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  44.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  44.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  44.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  44.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.70k, False: 39.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.70k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.70k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.70k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.70k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.70k|    }                                                  \
  |  |  |  | 3667|  44.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  39.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  39.8k|                    parse_integer_digits_without_thsep(
 3556|  39.8k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  39.8k|                        prefix_result.parsed_base));
 3558|       |
 3559|  39.8k|            auto buf = make_contiguous_buffer(
 3560|  39.8k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  39.8k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  39.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  39.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  39.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  39.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 802, False: 39.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    802|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    802|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    802|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    802|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    802|    }                                                  \
  |  |  |  | 3667|  39.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  39.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|  39.0k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|  39.0k|                                        prefix_result.parsed_base));
 3564|       |
 3565|  39.0k|            return ranges::next(
 3566|  39.0k|                prefix_result.iterator,
 3567|  39.0k|                ranges::distance(buf.view().begin(), result_it));
 3568|  39.8k|        }
 3569|       |
 3570|  12.0k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  12.0k|            localized_number_formatting_options<CharT>{loc};
 3575|  12.0k|#endif
 3576|       |
 3577|  12.0k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  12.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  12.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  12.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 664, False: 11.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    664|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    664|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    664|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    664|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    664|    }                                                  \
  |  |  |  | 3667|  12.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  11.3k|                parse_integer_digits_with_thsep(
 3579|  11.3k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  11.3k|                    prefix_result.parsed_base, locale_options));
 3581|  11.3k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  11.3k|            parse_digits_result;
 3583|       |
 3584|  11.3k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 314, False: 11.0k]
  ------------------
 3585|    314|            if (auto e = check_thsep_grouping(
 3586|    314|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|    314|                    thsep_indices, locale_options.grouping);
 3588|    314|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    314|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 180, False: 134]
  |  |  ------------------
  ------------------
 3589|    180|                return unexpected(e);
 3590|    180|            }
 3591|    314|        }
 3592|       |
 3593|  11.2k|        auto nothsep_source_view =
 3594|  11.2k|            std::basic_string_view<CharT>{nothsep_source};
 3595|  11.2k|        SCN_TRY(
  ------------------
  |  | 3668|  11.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 192, False: 11.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    192|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    192|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    192|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    192|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    192|    }                                                  \
  |  |  |  | 3667|  11.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|  11.0k|            nothsep_source_it,
 3597|  11.0k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|  11.0k|                                prefix_result.parsed_base));
 3599|       |
 3600|  11.0k|        return ranges::next(
 3601|  11.0k|            prefix_result.iterator,
 3602|  11.0k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|  11.0k|                ranges::ssize(thsep_indices));
 3604|  11.2k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|  62.2k|    {
 3528|  62.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  62.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  62.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  62.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  62.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 62.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  62.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  62.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  62.2k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  62.2k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 8.07k, False: 54.1k]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|  8.07k|            else {
 3539|  8.07k|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 8.07k]
  ------------------
 3540|  8.07k|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|  8.07k|            }
 3546|  8.07k|        }
 3547|       |
 3548|  62.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 5.52k, False: 56.7k]
  ------------------
 3549|  5.52k|            value = T{0};
 3550|  5.52k|            return std::next(prefix_result.iterator);
 3551|  5.52k|        }
 3552|       |
 3553|  56.7k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  56.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 44.6k, False: 12.0k]
  |  |  ------------------
  ------------------
 3554|  44.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  44.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  44.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  44.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  44.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 192, False: 44.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    192|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    192|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    192|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    192|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    192|    }                                                  \
  |  |  |  | 3667|  44.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  44.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  44.4k|                    parse_integer_digits_without_thsep(
 3556|  44.4k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  44.4k|                        prefix_result.parsed_base));
 3558|       |
 3559|  44.4k|            auto buf = make_contiguous_buffer(
 3560|  44.4k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  44.4k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  44.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  44.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  44.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  44.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.46k, False: 38.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  5.46k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  5.46k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  5.46k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  5.46k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  5.46k|    }                                                  \
  |  |  |  | 3667|  44.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  38.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|  38.9k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|  38.9k|                                        prefix_result.parsed_base));
 3564|       |
 3565|  38.9k|            return ranges::next(
 3566|  38.9k|                prefix_result.iterator,
 3567|  38.9k|                ranges::distance(buf.view().begin(), result_it));
 3568|  44.4k|        }
 3569|       |
 3570|  12.0k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  12.0k|            localized_number_formatting_options<CharT>{loc};
 3575|  12.0k|#endif
 3576|       |
 3577|  12.0k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  12.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  12.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  12.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 696, False: 11.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    696|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    696|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    696|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    696|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    696|    }                                                  \
  |  |  |  | 3667|  12.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  11.3k|                parse_integer_digits_with_thsep(
 3579|  11.3k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  11.3k|                    prefix_result.parsed_base, locale_options));
 3581|  11.3k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  11.3k|            parse_digits_result;
 3583|       |
 3584|  11.3k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 312, False: 11.0k]
  ------------------
 3585|    312|            if (auto e = check_thsep_grouping(
 3586|    312|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|    312|                    thsep_indices, locale_options.grouping);
 3588|    312|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    312|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 178, False: 134]
  |  |  ------------------
  ------------------
 3589|    178|                return unexpected(e);
 3590|    178|            }
 3591|    312|        }
 3592|       |
 3593|  11.1k|        auto nothsep_source_view =
 3594|  11.1k|            std::basic_string_view<CharT>{nothsep_source};
 3595|  11.1k|        SCN_TRY(
  ------------------
  |  | 3668|  11.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 190, False: 11.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    190|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    190|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    190|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    190|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    190|    }                                                  \
  |  |  |  | 3667|  11.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|  11.0k|            nothsep_source_it,
 3597|  11.0k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|  11.0k|                                prefix_result.parsed_base));
 3599|       |
 3600|  11.0k|        return ranges::next(
 3601|  11.0k|            prefix_result.iterator,
 3602|  11.0k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|  11.0k|                ranges::ssize(thsep_indices));
 3604|  11.1k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6181|  65.2k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|  65.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|  65.2k|            auto rd = make_reader<T, char_type>();
 6195|  65.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  65.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 65.2k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|  65.2k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 65.2k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|  65.2k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|  65.2k|                return impl(rd, range, value);
 6202|  65.2k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  65.2k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|  65.2k|    {
 6113|  65.2k|        const bool need_skipped_width =
 6114|  65.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 65.2k]
  |  Branch (6114:33): [True: 0, False: 65.2k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  65.2k|        auto it = rng.begin();
 6118|  65.2k|        std::ptrdiff_t prefix_width = 0;
 6119|  65.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 65.2k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  65.2k|        else {
 6127|  65.2k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  65.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  65.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  65.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  65.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.12k, False: 63.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.12k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.12k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.12k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.12k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.12k|    }                                                  \
  |  |  |  | 3667|  65.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  63.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  63.1k|            std::tie(it, prefix_width) = prefix_result;
 6129|  63.1k|        }
 6130|  63.1k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  63.1k|        std::ptrdiff_t value_width = 0;
 6134|  63.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 63.1k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  63.1k|        else {
 6150|  63.1k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  63.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  63.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  63.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 6.35k, False: 56.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  6.35k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  6.35k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  6.35k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  6.35k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  6.35k|    }                                                  \
  |  | 3667|  63.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  63.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  56.7k|                                             specs, value, loc));
 6152|       |
 6153|  56.7k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 56.7k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  56.7k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  56.7k|        std::ptrdiff_t postfix_width = 0;
 6162|  56.7k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 55.2k, False: 1.48k]
  ------------------
 6163|  55.2k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  55.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  55.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  55.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  55.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 55.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  55.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  55.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  55.2k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  55.2k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  55.2k|                                 value_width));
 6167|  55.2k|            std::tie(it, postfix_width) = postfix_result;
 6168|  55.2k|        }
 6169|       |
 6170|  56.7k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  56.7k|                                                 value_width, postfix_width);
 6172|  56.7k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 56.7k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  56.7k|        return it;
 6177|  56.7k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3527|  63.1k|    {
 3528|  63.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  63.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  63.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  63.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  63.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 63.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  63.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  63.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  63.1k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  63.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 8.27k, False: 54.8k]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|  8.27k|            else {
 3539|  8.27k|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 8.27k]
  ------------------
 3540|  8.27k|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|  8.27k|            }
 3546|  8.27k|        }
 3547|       |
 3548|  63.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 5.55k, False: 57.5k]
  ------------------
 3549|  5.55k|            value = T{0};
 3550|  5.55k|            return std::next(prefix_result.iterator);
 3551|  5.55k|        }
 3552|       |
 3553|  57.5k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  57.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 45.3k, False: 12.2k]
  |  |  ------------------
  ------------------
 3554|  45.3k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  45.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  45.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  45.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  45.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.93k, False: 40.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.93k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.93k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.93k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.93k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.93k|    }                                                  \
  |  |  |  | 3667|  45.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  40.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  40.3k|                    parse_integer_digits_without_thsep(
 3556|  40.3k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  40.3k|                        prefix_result.parsed_base));
 3558|       |
 3559|  40.3k|            auto buf = make_contiguous_buffer(
 3560|  40.3k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  40.3k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  40.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  40.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  40.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  40.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 412, False: 39.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    412|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    412|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    412|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    412|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    412|    }                                                  \
  |  |  |  | 3667|  40.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  39.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|  39.9k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|  39.9k|                                        prefix_result.parsed_base));
 3564|       |
 3565|  39.9k|            return ranges::next(
 3566|  39.9k|                prefix_result.iterator,
 3567|  39.9k|                ranges::distance(buf.view().begin(), result_it));
 3568|  40.3k|        }
 3569|       |
 3570|  12.2k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  12.2k|            localized_number_formatting_options<CharT>{loc};
 3575|  12.2k|#endif
 3576|       |
 3577|  12.2k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  12.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  12.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  12.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 706, False: 11.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    706|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    706|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    706|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    706|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    706|    }                                                  \
  |  |  |  | 3667|  12.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  11.5k|                parse_integer_digits_with_thsep(
 3579|  11.5k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  11.5k|                    prefix_result.parsed_base, locale_options));
 3581|  11.5k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  11.5k|            parse_digits_result;
 3583|       |
 3584|  11.5k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 326, False: 11.2k]
  ------------------
 3585|    326|            if (auto e = check_thsep_grouping(
 3586|    326|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|    326|                    thsep_indices, locale_options.grouping);
 3588|    326|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    326|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 192, False: 134]
  |  |  ------------------
  ------------------
 3589|    192|                return unexpected(e);
 3590|    192|            }
 3591|    326|        }
 3592|       |
 3593|  11.3k|        auto nothsep_source_view =
 3594|  11.3k|            std::basic_string_view<CharT>{nothsep_source};
 3595|  11.3k|        SCN_TRY(
  ------------------
  |  | 3668|  11.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 106, False: 11.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    106|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    106|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    106|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    106|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    106|    }                                                  \
  |  |  |  | 3667|  11.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|  11.2k|            nothsep_source_it,
 3597|  11.2k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|  11.2k|                                prefix_result.parsed_base));
 3599|       |
 3600|  11.2k|        return ranges::next(
 3601|  11.2k|            prefix_result.iterator,
 3602|  11.2k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|  11.2k|                ranges::ssize(thsep_indices));
 3604|  11.3k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|  63.1k|    {
 3528|  63.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  63.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  63.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  63.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  63.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 63.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  63.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  63.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  63.1k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  63.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 8.27k, False: 54.9k]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|  8.27k|            else {
 3539|  8.27k|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 8.27k]
  ------------------
 3540|  8.27k|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|  8.27k|            }
 3546|  8.27k|        }
 3547|       |
 3548|  63.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 5.55k, False: 57.6k]
  ------------------
 3549|  5.55k|            value = T{0};
 3550|  5.55k|            return std::next(prefix_result.iterator);
 3551|  5.55k|        }
 3552|       |
 3553|  57.6k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  57.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 45.3k, False: 12.2k]
  |  |  ------------------
  ------------------
 3554|  45.3k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  45.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  45.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  45.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  45.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 222, False: 45.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    222|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    222|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    222|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    222|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    222|    }                                                  \
  |  |  |  | 3667|  45.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  45.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  45.1k|                    parse_integer_digits_without_thsep(
 3556|  45.1k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  45.1k|                        prefix_result.parsed_base));
 3558|       |
 3559|  45.1k|            auto buf = make_contiguous_buffer(
 3560|  45.1k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  45.1k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  45.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  45.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  45.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  45.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.27k, False: 39.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  5.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  5.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  5.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  5.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  5.27k|    }                                                  \
  |  |  |  | 3667|  45.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  39.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|  39.8k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|  39.8k|                                        prefix_result.parsed_base));
 3564|       |
 3565|  39.8k|            return ranges::next(
 3566|  39.8k|                prefix_result.iterator,
 3567|  39.8k|                ranges::distance(buf.view().begin(), result_it));
 3568|  45.1k|        }
 3569|       |
 3570|  12.2k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  12.2k|            localized_number_formatting_options<CharT>{loc};
 3575|  12.2k|#endif
 3576|       |
 3577|  12.2k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  12.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  12.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  12.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 738, False: 11.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    738|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    738|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    738|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    738|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    738|    }                                                  \
  |  |  |  | 3667|  12.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  11.5k|                parse_integer_digits_with_thsep(
 3579|  11.5k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  11.5k|                    prefix_result.parsed_base, locale_options));
 3581|  11.5k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  11.5k|            parse_digits_result;
 3583|       |
 3584|  11.5k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 324, False: 11.1k]
  ------------------
 3585|    324|            if (auto e = check_thsep_grouping(
 3586|    324|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|    324|                    thsep_indices, locale_options.grouping);
 3588|    324|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    324|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 190, False: 134]
  |  |  ------------------
  ------------------
 3589|    190|                return unexpected(e);
 3590|    190|            }
 3591|    324|        }
 3592|       |
 3593|  11.3k|        auto nothsep_source_view =
 3594|  11.3k|            std::basic_string_view<CharT>{nothsep_source};
 3595|  11.3k|        SCN_TRY(
  ------------------
  |  | 3668|  11.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 104, False: 11.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    104|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    104|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    104|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    104|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    104|    }                                                  \
  |  |  |  | 3667|  11.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|  11.2k|            nothsep_source_it,
 3597|  11.2k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|  11.2k|                                prefix_result.parsed_base));
 3599|       |
 3600|  11.2k|        return ranges::next(
 3601|  11.2k|            prefix_result.iterator,
 3602|  11.2k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|  11.2k|                ranges::ssize(thsep_indices));
 3604|  11.3k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6181|  47.7k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|  47.7k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|  47.7k|            auto rd = make_reader<T, char_type>();
 6195|  47.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  47.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 47.7k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|  47.7k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 47.7k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|  47.7k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|  47.7k|                return impl(rd, range, value);
 6202|  47.7k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  47.7k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|  47.7k|    {
 6113|  47.7k|        const bool need_skipped_width =
 6114|  47.7k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 47.7k]
  |  Branch (6114:33): [True: 0, False: 47.7k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  47.7k|        auto it = rng.begin();
 6118|  47.7k|        std::ptrdiff_t prefix_width = 0;
 6119|  47.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 47.7k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  47.7k|        else {
 6127|  47.7k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  47.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  47.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  47.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  47.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.10k, False: 46.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.10k|    }                                                  \
  |  |  |  | 3667|  47.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  46.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  46.6k|            std::tie(it, prefix_width) = prefix_result;
 6129|  46.6k|        }
 6130|  46.6k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  46.6k|        std::ptrdiff_t value_width = 0;
 6134|  46.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 46.6k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  46.6k|        else {
 6150|  46.6k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  46.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  46.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  46.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 7.36k, False: 39.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  7.36k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  7.36k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  7.36k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  7.36k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  7.36k|    }                                                  \
  |  | 3667|  46.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  46.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  39.2k|                                             specs, value, loc));
 6152|       |
 6153|  39.2k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 39.2k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  39.2k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  39.2k|        std::ptrdiff_t postfix_width = 0;
 6162|  39.2k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 38.4k, False: 740]
  ------------------
 6163|  38.4k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  38.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  38.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  38.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  38.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 38.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  38.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  38.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  38.4k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  38.4k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  38.4k|                                 value_width));
 6167|  38.4k|            std::tie(it, postfix_width) = postfix_result;
 6168|  38.4k|        }
 6169|       |
 6170|  39.2k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  39.2k|                                                 value_width, postfix_width);
 6172|  39.2k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 39.2k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  39.2k|        return it;
 6177|  39.2k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3527|  46.6k|    {
 3528|  46.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  46.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  46.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  46.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  46.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 46.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  46.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  46.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  46.6k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  46.6k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 2.97k, False: 43.6k]
  ------------------
 3532|  2.97k|            if constexpr (!std::is_signed_v<T>) {
 3533|  2.97k|                return unexpected_scan_error(
 3534|  2.97k|                    scan_error::invalid_scanned_value,
 3535|  2.97k|                    "Unexpected '-' sign when parsing an "
 3536|  2.97k|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|  2.97k|        }
 3547|       |
 3548|  46.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 4.82k, False: 41.7k]
  ------------------
 3549|  4.82k|            value = T{0};
 3550|  4.82k|            return std::next(prefix_result.iterator);
 3551|  4.82k|        }
 3552|       |
 3553|  41.7k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  41.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 30.5k, False: 11.2k]
  |  |  ------------------
  ------------------
 3554|  30.5k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  30.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  30.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  30.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  30.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.84k, False: 27.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.84k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.84k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.84k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.84k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.84k|    }                                                  \
  |  |  |  | 3667|  30.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  27.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  27.6k|                    parse_integer_digits_without_thsep(
 3556|  27.6k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  27.6k|                        prefix_result.parsed_base));
 3558|       |
 3559|  27.6k|            auto buf = make_contiguous_buffer(
 3560|  27.6k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  27.6k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  27.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  27.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  27.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  27.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 876, False: 26.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    876|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    876|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    876|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    876|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    876|    }                                                  \
  |  |  |  | 3667|  27.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  26.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|  26.7k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|  26.7k|                                        prefix_result.parsed_base));
 3564|       |
 3565|  26.7k|            return ranges::next(
 3566|  26.7k|                prefix_result.iterator,
 3567|  26.7k|                ranges::distance(buf.view().begin(), result_it));
 3568|  27.6k|        }
 3569|       |
 3570|  11.2k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  11.2k|            localized_number_formatting_options<CharT>{loc};
 3575|  11.2k|#endif
 3576|       |
 3577|  11.2k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  11.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 364, False: 10.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    364|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    364|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    364|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    364|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    364|    }                                                  \
  |  |  |  | 3667|  11.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  10.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  10.9k|                parse_integer_digits_with_thsep(
 3579|  10.9k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  10.9k|                    prefix_result.parsed_base, locale_options));
 3581|  10.9k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  10.9k|            parse_digits_result;
 3583|       |
 3584|  10.9k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 248, False: 10.6k]
  ------------------
 3585|    248|            if (auto e = check_thsep_grouping(
 3586|    248|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|    248|                    thsep_indices, locale_options.grouping);
 3588|    248|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    248|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 118, False: 130]
  |  |  ------------------
  ------------------
 3589|    118|                return unexpected(e);
 3590|    118|            }
 3591|    248|        }
 3592|       |
 3593|  10.7k|        auto nothsep_source_view =
 3594|  10.7k|            std::basic_string_view<CharT>{nothsep_source};
 3595|  10.7k|        SCN_TRY(
  ------------------
  |  | 3668|  10.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  10.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  10.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  10.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 194, False: 10.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    194|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    194|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    194|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    194|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    194|    }                                                  \
  |  |  |  | 3667|  10.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  10.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|  10.5k|            nothsep_source_it,
 3597|  10.5k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|  10.5k|                                prefix_result.parsed_base));
 3599|       |
 3600|  10.5k|        return ranges::next(
 3601|  10.5k|            prefix_result.iterator,
 3602|  10.5k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|  10.5k|                ranges::ssize(thsep_indices));
 3604|  10.7k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|  46.6k|    {
 3528|  46.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  46.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  46.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  46.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  46.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 46.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  46.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  46.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  46.6k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  46.6k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 2.96k, False: 43.7k]
  ------------------
 3532|  2.96k|            if constexpr (!std::is_signed_v<T>) {
 3533|  2.96k|                return unexpected_scan_error(
 3534|  2.96k|                    scan_error::invalid_scanned_value,
 3535|  2.96k|                    "Unexpected '-' sign when parsing an "
 3536|  2.96k|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|  2.96k|        }
 3547|       |
 3548|  46.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 4.82k, False: 41.8k]
  ------------------
 3549|  4.82k|            value = T{0};
 3550|  4.82k|            return std::next(prefix_result.iterator);
 3551|  4.82k|        }
 3552|       |
 3553|  41.8k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  41.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 30.5k, False: 11.2k]
  |  |  ------------------
  ------------------
 3554|  30.5k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  30.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  30.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  30.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  30.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 38, False: 30.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     38|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     38|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     38|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     38|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     38|    }                                                  \
  |  |  |  | 3667|  30.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  30.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  30.5k|                    parse_integer_digits_without_thsep(
 3556|  30.5k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  30.5k|                        prefix_result.parsed_base));
 3558|       |
 3559|  30.5k|            auto buf = make_contiguous_buffer(
 3560|  30.5k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  30.5k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  30.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  30.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  30.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  30.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.78k, False: 26.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.78k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.78k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.78k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.78k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.78k|    }                                                  \
  |  |  |  | 3667|  30.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  26.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|  26.7k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|  26.7k|                                        prefix_result.parsed_base));
 3564|       |
 3565|  26.7k|            return ranges::next(
 3566|  26.7k|                prefix_result.iterator,
 3567|  26.7k|                ranges::distance(buf.view().begin(), result_it));
 3568|  30.5k|        }
 3569|       |
 3570|  11.2k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  11.2k|            localized_number_formatting_options<CharT>{loc};
 3575|  11.2k|#endif
 3576|       |
 3577|  11.2k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  11.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 390, False: 10.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    390|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    390|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    390|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    390|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    390|    }                                                  \
  |  |  |  | 3667|  11.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  10.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  10.8k|                parse_integer_digits_with_thsep(
 3579|  10.8k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  10.8k|                    prefix_result.parsed_base, locale_options));
 3581|  10.8k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  10.8k|            parse_digits_result;
 3583|       |
 3584|  10.8k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 248, False: 10.6k]
  ------------------
 3585|    248|            if (auto e = check_thsep_grouping(
 3586|    248|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|    248|                    thsep_indices, locale_options.grouping);
 3588|    248|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    248|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 118, False: 130]
  |  |  ------------------
  ------------------
 3589|    118|                return unexpected(e);
 3590|    118|            }
 3591|    248|        }
 3592|       |
 3593|  10.7k|        auto nothsep_source_view =
 3594|  10.7k|            std::basic_string_view<CharT>{nothsep_source};
 3595|  10.7k|        SCN_TRY(
  ------------------
  |  | 3668|  10.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  10.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  10.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  10.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 190, False: 10.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    190|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    190|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    190|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    190|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    190|    }                                                  \
  |  |  |  | 3667|  10.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  10.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|  10.5k|            nothsep_source_it,
 3597|  10.5k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|  10.5k|                                prefix_result.parsed_base));
 3599|       |
 3600|  10.5k|        return ranges::next(
 3601|  10.5k|            prefix_result.iterator,
 3602|  10.5k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|  10.5k|                ranges::ssize(thsep_indices));
 3604|  10.7k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6181|  51.9k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|  51.9k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|  51.9k|            auto rd = make_reader<T, char_type>();
 6195|  51.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  51.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 51.9k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|  51.9k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 51.9k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|  51.9k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|  51.9k|                return impl(rd, range, value);
 6202|  51.9k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  51.9k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|  51.9k|    {
 6113|  51.9k|        const bool need_skipped_width =
 6114|  51.9k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 51.9k]
  |  Branch (6114:33): [True: 0, False: 51.9k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  51.9k|        auto it = rng.begin();
 6118|  51.9k|        std::ptrdiff_t prefix_width = 0;
 6119|  51.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 51.9k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  51.9k|        else {
 6127|  51.9k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  51.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  51.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  51.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  51.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.34k, False: 50.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.34k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.34k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.34k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.34k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.34k|    }                                                  \
  |  |  |  | 3667|  51.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  50.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  50.5k|            std::tie(it, prefix_width) = prefix_result;
 6129|  50.5k|        }
 6130|  50.5k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  50.5k|        std::ptrdiff_t value_width = 0;
 6134|  50.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 50.5k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  50.5k|        else {
 6150|  50.5k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  50.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  50.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  50.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 7.12k, False: 43.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  7.12k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  7.12k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  7.12k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  7.12k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  7.12k|    }                                                  \
  |  | 3667|  50.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  50.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  43.4k|                                             specs, value, loc));
 6152|       |
 6153|  43.4k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 43.4k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  43.4k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  43.4k|        std::ptrdiff_t postfix_width = 0;
 6162|  43.4k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 42.5k, False: 908]
  ------------------
 6163|  42.5k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  42.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  42.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  42.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  42.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 42.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  42.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  42.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  42.5k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  42.5k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  42.5k|                                 value_width));
 6167|  42.5k|            std::tie(it, postfix_width) = postfix_result;
 6168|  42.5k|        }
 6169|       |
 6170|  43.4k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  43.4k|                                                 value_width, postfix_width);
 6172|  43.4k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 43.4k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  43.4k|        return it;
 6177|  43.4k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3527|  50.5k|    {
 3528|  50.5k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  50.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  50.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  50.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  50.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 50.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  50.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  50.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  50.5k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  50.5k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 3.06k, False: 47.4k]
  ------------------
 3532|  3.06k|            if constexpr (!std::is_signed_v<T>) {
 3533|  3.06k|                return unexpected_scan_error(
 3534|  3.06k|                    scan_error::invalid_scanned_value,
 3535|  3.06k|                    "Unexpected '-' sign when parsing an "
 3536|  3.06k|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|  3.06k|        }
 3547|       |
 3548|  50.5k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 5.00k, False: 45.5k]
  ------------------
 3549|  5.00k|            value = T{0};
 3550|  5.00k|            return std::next(prefix_result.iterator);
 3551|  5.00k|        }
 3552|       |
 3553|  45.5k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  45.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 33.3k, False: 12.1k]
  |  |  ------------------
  ------------------
 3554|  33.3k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  33.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  33.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  33.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  33.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.02k, False: 30.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.02k|    }                                                  \
  |  |  |  | 3667|  33.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  30.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  30.3k|                    parse_integer_digits_without_thsep(
 3556|  30.3k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  30.3k|                        prefix_result.parsed_base));
 3558|       |
 3559|  30.3k|            auto buf = make_contiguous_buffer(
 3560|  30.3k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  30.3k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  30.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  30.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  30.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  30.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 428, False: 29.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    428|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    428|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    428|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    428|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    428|    }                                                  \
  |  |  |  | 3667|  30.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|  29.9k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|  29.9k|                                        prefix_result.parsed_base));
 3564|       |
 3565|  29.9k|            return ranges::next(
 3566|  29.9k|                prefix_result.iterator,
 3567|  29.9k|                ranges::distance(buf.view().begin(), result_it));
 3568|  30.3k|        }
 3569|       |
 3570|  12.1k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  12.1k|            localized_number_formatting_options<CharT>{loc};
 3575|  12.1k|#endif
 3576|       |
 3577|  12.1k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 382, False: 11.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    382|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    382|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    382|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    382|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    382|    }                                                  \
  |  |  |  | 3667|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  11.7k|                parse_integer_digits_with_thsep(
 3579|  11.7k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  11.7k|                    prefix_result.parsed_base, locale_options));
 3581|  11.7k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  11.7k|            parse_digits_result;
 3583|       |
 3584|  11.7k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 254, False: 11.5k]
  ------------------
 3585|    254|            if (auto e = check_thsep_grouping(
 3586|    254|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|    254|                    thsep_indices, locale_options.grouping);
 3588|    254|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    254|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 124, False: 130]
  |  |  ------------------
  ------------------
 3589|    124|                return unexpected(e);
 3590|    124|            }
 3591|    254|        }
 3592|       |
 3593|  11.6k|        auto nothsep_source_view =
 3594|  11.6k|            std::basic_string_view<CharT>{nothsep_source};
 3595|  11.6k|        SCN_TRY(
  ------------------
  |  | 3668|  11.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 106, False: 11.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    106|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    106|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    106|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    106|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    106|    }                                                  \
  |  |  |  | 3667|  11.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|  11.5k|            nothsep_source_it,
 3597|  11.5k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|  11.5k|                                prefix_result.parsed_base));
 3599|       |
 3600|  11.5k|        return ranges::next(
 3601|  11.5k|            prefix_result.iterator,
 3602|  11.5k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|  11.5k|                ranges::ssize(thsep_indices));
 3604|  11.6k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|  50.6k|    {
 3528|  50.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  50.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  50.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  50.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  50.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 50.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  50.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  50.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  50.6k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  50.6k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 3.05k, False: 47.5k]
  ------------------
 3532|  3.05k|            if constexpr (!std::is_signed_v<T>) {
 3533|  3.05k|                return unexpected_scan_error(
 3534|  3.05k|                    scan_error::invalid_scanned_value,
 3535|  3.05k|                    "Unexpected '-' sign when parsing an "
 3536|  3.05k|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|  3.05k|        }
 3547|       |
 3548|  50.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 5.00k, False: 45.6k]
  ------------------
 3549|  5.00k|            value = T{0};
 3550|  5.00k|            return std::next(prefix_result.iterator);
 3551|  5.00k|        }
 3552|       |
 3553|  45.6k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  45.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 33.4k, False: 12.1k]
  |  |  ------------------
  ------------------
 3554|  33.4k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  33.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  33.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  33.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  33.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 40, False: 33.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     40|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     40|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     40|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     40|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     40|    }                                                  \
  |  |  |  | 3667|  33.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  33.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  33.3k|                    parse_integer_digits_without_thsep(
 3556|  33.3k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  33.3k|                        prefix_result.parsed_base));
 3558|       |
 3559|  33.3k|            auto buf = make_contiguous_buffer(
 3560|  33.3k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  33.3k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  33.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  33.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  33.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  33.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.53k, False: 29.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.53k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.53k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.53k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.53k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.53k|    }                                                  \
  |  |  |  | 3667|  33.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  29.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|  29.8k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|  29.8k|                                        prefix_result.parsed_base));
 3564|       |
 3565|  29.8k|            return ranges::next(
 3566|  29.8k|                prefix_result.iterator,
 3567|  29.8k|                ranges::distance(buf.view().begin(), result_it));
 3568|  33.3k|        }
 3569|       |
 3570|  12.1k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  12.1k|            localized_number_formatting_options<CharT>{loc};
 3575|  12.1k|#endif
 3576|       |
 3577|  12.1k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 410, False: 11.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    410|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    410|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    410|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    410|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    410|    }                                                  \
  |  |  |  | 3667|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  11.7k|                parse_integer_digits_with_thsep(
 3579|  11.7k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  11.7k|                    prefix_result.parsed_base, locale_options));
 3581|  11.7k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  11.7k|            parse_digits_result;
 3583|       |
 3584|  11.7k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 252, False: 11.5k]
  ------------------
 3585|    252|            if (auto e = check_thsep_grouping(
 3586|    252|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|    252|                    thsep_indices, locale_options.grouping);
 3588|    252|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    252|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 122, False: 130]
  |  |  ------------------
  ------------------
 3589|    122|                return unexpected(e);
 3590|    122|            }
 3591|    252|        }
 3592|       |
 3593|  11.6k|        auto nothsep_source_view =
 3594|  11.6k|            std::basic_string_view<CharT>{nothsep_source};
 3595|  11.6k|        SCN_TRY(
  ------------------
  |  | 3668|  11.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 104, False: 11.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    104|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    104|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    104|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    104|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    104|    }                                                  \
  |  |  |  | 3667|  11.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|  11.5k|            nothsep_source_it,
 3597|  11.5k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|  11.5k|                                prefix_result.parsed_base));
 3599|       |
 3600|  11.5k|        return ranges::next(
 3601|  11.5k|            prefix_result.iterator,
 3602|  11.5k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|  11.5k|                ranges::ssize(thsep_indices));
 3604|  11.6k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6181|  52.4k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|  52.4k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|  52.4k|            auto rd = make_reader<T, char_type>();
 6195|  52.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  52.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 52.4k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|  52.4k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 52.4k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|  52.4k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|  52.4k|                return impl(rd, range, value);
 6202|  52.4k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  52.4k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|  52.4k|    {
 6113|  52.4k|        const bool need_skipped_width =
 6114|  52.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 52.4k]
  |  Branch (6114:33): [True: 0, False: 52.4k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  52.4k|        auto it = rng.begin();
 6118|  52.4k|        std::ptrdiff_t prefix_width = 0;
 6119|  52.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 52.4k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  52.4k|        else {
 6127|  52.4k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  52.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  52.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  52.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  52.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.45k, False: 51.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.45k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.45k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.45k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.45k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.45k|    }                                                  \
  |  |  |  | 3667|  52.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  51.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  51.0k|            std::tie(it, prefix_width) = prefix_result;
 6129|  51.0k|        }
 6130|  51.0k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  51.0k|        std::ptrdiff_t value_width = 0;
 6134|  51.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 51.0k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  51.0k|        else {
 6150|  51.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  51.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  51.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  51.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 7.01k, False: 44.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  7.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  7.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  7.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  7.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  7.01k|    }                                                  \
  |  | 3667|  51.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  51.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  44.0k|                                             specs, value, loc));
 6152|       |
 6153|  44.0k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 44.0k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  44.0k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  44.0k|        std::ptrdiff_t postfix_width = 0;
 6162|  44.0k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 42.9k, False: 1.01k]
  ------------------
 6163|  42.9k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  42.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  42.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  42.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  42.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 42.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  42.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  42.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  42.9k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  42.9k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  42.9k|                                 value_width));
 6167|  42.9k|            std::tie(it, postfix_width) = postfix_result;
 6168|  42.9k|        }
 6169|       |
 6170|  44.0k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  44.0k|                                                 value_width, postfix_width);
 6172|  44.0k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 44.0k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  44.0k|        return it;
 6177|  44.0k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3527|  51.0k|    {
 3528|  51.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  51.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  51.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  51.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  51.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 51.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  51.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  51.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  51.0k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  51.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 3.15k, False: 47.8k]
  ------------------
 3532|  3.15k|            if constexpr (!std::is_signed_v<T>) {
 3533|  3.15k|                return unexpected_scan_error(
 3534|  3.15k|                    scan_error::invalid_scanned_value,
 3535|  3.15k|                    "Unexpected '-' sign when parsing an "
 3536|  3.15k|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|  3.15k|        }
 3547|       |
 3548|  51.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 5.00k, False: 46.0k]
  ------------------
 3549|  5.00k|            value = T{0};
 3550|  5.00k|            return std::next(prefix_result.iterator);
 3551|  5.00k|        }
 3552|       |
 3553|  46.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  46.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 33.6k, False: 12.3k]
  |  |  ------------------
  ------------------
 3554|  33.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  33.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  33.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  33.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  33.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.07k, False: 30.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.07k|    }                                                  \
  |  |  |  | 3667|  33.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  30.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  30.5k|                    parse_integer_digits_without_thsep(
 3556|  30.5k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  30.5k|                        prefix_result.parsed_base));
 3558|       |
 3559|  30.5k|            auto buf = make_contiguous_buffer(
 3560|  30.5k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  30.5k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  30.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  30.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  30.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  30.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 216, False: 30.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    216|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    216|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    216|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    216|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    216|    }                                                  \
  |  |  |  | 3667|  30.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  30.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|  30.3k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|  30.3k|                                        prefix_result.parsed_base));
 3564|       |
 3565|  30.3k|            return ranges::next(
 3566|  30.3k|                prefix_result.iterator,
 3567|  30.3k|                ranges::distance(buf.view().begin(), result_it));
 3568|  30.5k|        }
 3569|       |
 3570|  12.3k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  12.3k|            localized_number_formatting_options<CharT>{loc};
 3575|  12.3k|#endif
 3576|       |
 3577|  12.3k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  12.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  12.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  12.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 392, False: 11.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    392|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    392|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    392|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    392|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    392|    }                                                  \
  |  |  |  | 3667|  12.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  11.9k|                parse_integer_digits_with_thsep(
 3579|  11.9k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  11.9k|                    prefix_result.parsed_base, locale_options));
 3581|  11.9k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  11.9k|            parse_digits_result;
 3583|       |
 3584|  11.9k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 254, False: 11.6k]
  ------------------
 3585|    254|            if (auto e = check_thsep_grouping(
 3586|    254|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|    254|                    thsep_indices, locale_options.grouping);
 3588|    254|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    254|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 124, False: 130]
  |  |  ------------------
  ------------------
 3589|    124|                return unexpected(e);
 3590|    124|            }
 3591|    254|        }
 3592|       |
 3593|  11.8k|        auto nothsep_source_view =
 3594|  11.8k|            std::basic_string_view<CharT>{nothsep_source};
 3595|  11.8k|        SCN_TRY(
  ------------------
  |  | 3668|  11.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 56, False: 11.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     56|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     56|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     56|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     56|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     56|    }                                                  \
  |  |  |  | 3667|  11.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|  11.7k|            nothsep_source_it,
 3597|  11.7k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|  11.7k|                                prefix_result.parsed_base));
 3599|       |
 3600|  11.7k|        return ranges::next(
 3601|  11.7k|            prefix_result.iterator,
 3602|  11.7k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|  11.7k|                ranges::ssize(thsep_indices));
 3604|  11.8k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|  51.0k|    {
 3528|  51.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  51.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  51.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  51.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  51.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 51.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  51.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  51.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  51.0k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  51.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 3.14k, False: 47.9k]
  ------------------
 3532|  3.14k|            if constexpr (!std::is_signed_v<T>) {
 3533|  3.14k|                return unexpected_scan_error(
 3534|  3.14k|                    scan_error::invalid_scanned_value,
 3535|  3.14k|                    "Unexpected '-' sign when parsing an "
 3536|  3.14k|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|  3.14k|        }
 3547|       |
 3548|  51.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 5.00k, False: 46.0k]
  ------------------
 3549|  5.00k|            value = T{0};
 3550|  5.00k|            return std::next(prefix_result.iterator);
 3551|  5.00k|        }
 3552|       |
 3553|  46.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  46.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 33.7k, False: 12.3k]
  |  |  ------------------
  ------------------
 3554|  33.7k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  33.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  33.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  33.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  33.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 40, False: 33.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     40|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     40|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     40|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     40|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     40|    }                                                  \
  |  |  |  | 3667|  33.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  33.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  33.6k|                    parse_integer_digits_without_thsep(
 3556|  33.6k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  33.6k|                        prefix_result.parsed_base));
 3558|       |
 3559|  33.6k|            auto buf = make_contiguous_buffer(
 3560|  33.6k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  33.6k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  33.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  33.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  33.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  33.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.37k, False: 30.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.37k|    }                                                  \
  |  |  |  | 3667|  33.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  30.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|  30.2k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|  30.2k|                                        prefix_result.parsed_base));
 3564|       |
 3565|  30.2k|            return ranges::next(
 3566|  30.2k|                prefix_result.iterator,
 3567|  30.2k|                ranges::distance(buf.view().begin(), result_it));
 3568|  33.6k|        }
 3569|       |
 3570|  12.3k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  12.3k|            localized_number_formatting_options<CharT>{loc};
 3575|  12.3k|#endif
 3576|       |
 3577|  12.3k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  12.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  12.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  12.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 420, False: 11.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    420|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    420|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    420|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    420|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    420|    }                                                  \
  |  |  |  | 3667|  12.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  11.9k|                parse_integer_digits_with_thsep(
 3579|  11.9k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  11.9k|                    prefix_result.parsed_base, locale_options));
 3581|  11.9k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  11.9k|            parse_digits_result;
 3583|       |
 3584|  11.9k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 252, False: 11.6k]
  ------------------
 3585|    252|            if (auto e = check_thsep_grouping(
 3586|    252|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|    252|                    thsep_indices, locale_options.grouping);
 3588|    252|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    252|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 122, False: 130]
  |  |  ------------------
  ------------------
 3589|    122|                return unexpected(e);
 3590|    122|            }
 3591|    252|        }
 3592|       |
 3593|  11.8k|        auto nothsep_source_view =
 3594|  11.8k|            std::basic_string_view<CharT>{nothsep_source};
 3595|  11.8k|        SCN_TRY(
  ------------------
  |  | 3668|  11.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 54, False: 11.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     54|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     54|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     54|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     54|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     54|    }                                                  \
  |  |  |  | 3667|  11.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|  11.7k|            nothsep_source_it,
 3597|  11.7k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|  11.7k|                                prefix_result.parsed_base));
 3599|       |
 3600|  11.7k|        return ranges::next(
 3601|  11.7k|            prefix_result.iterator,
 3602|  11.7k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|  11.7k|                ranges::ssize(thsep_indices));
 3604|  11.8k|    }
_ZN3scn2v34impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1038|   429k|{
 1039|       |    if constexpr (ranges::contiguous_range<Range> &&
 1040|       |                  ranges::sized_range<Range>) {
 1041|       |        return r;
 1042|       |    }
 1043|       |    else if constexpr (std::is_same_v<
 1044|       |                           ranges::const_iterator_t<Range>,
 1045|       |                           typename detail::basic_scan_buffer<
 1046|   429k|                               detail::char_t<Range>>::forward_iterator>) {
 1047|       |        if constexpr (ranges::common_range<Range>) {
 1048|       |            auto seg = r.begin().contiguous_segment();
 1049|       |            auto dist =
 1050|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|       |            return seg.substr(0, std::min(seg.size(), dist));
 1052|       |        }
 1053|   429k|        else {
 1054|   429k|            return r.begin().contiguous_segment();
 1055|   429k|        }
 1056|       |    }
 1057|       |    else {
 1058|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1059|       |    }
 1060|   429k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2048|   405k|{
 2049|   405k|    auto it = range.begin();
 2050|   795k|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 785k, False: 9.88k]
  ------------------
 2051|   785k|        const auto val =
 2052|   785k|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|   785k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   785k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 783k, False: 1.65k]
  |  |  ------------------
  ------------------
 2054|   783k|            const auto cp = detail::decode_code_point_exhaustive(
 2055|   783k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|   783k|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 395k, False: 388k]
  ------------------
 2057|   395k|                return it;
 2058|   395k|            }
 2059|   783k|        }
 2060|   389k|        it = val.iterator;
 2061|   389k|    }
 2062|       |
 2063|  9.88k|    return it;
 2064|   405k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1886|   785k|{
 1887|   785k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   785k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   785k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|   785k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|   785k|    auto it = range.begin();
 1891|   785k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|   785k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   785k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.65k, False: 783k]
  |  |  ------------------
  ------------------
 1894|  1.65k|        ++it;
 1895|  1.65k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|  1.65k|        return {it, {}};
 1897|  1.65k|    }
 1898|       |
 1899|   783k|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 778k, False: 5.09k]
  ------------------
 1900|   778k|        ++it;
 1901|   778k|        return {it, string_type(1, *range.begin())};
 1902|   778k|    }
 1903|       |
 1904|  5.09k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|  5.09k|    return {it, string_type{range.begin(), it}};
 1906|   783k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1154|  1.65k|{
 1155|  1.65k|    auto it = input.begin();
 1156|  2.75k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 1.98k, False: 767]
  ------------------
 1157|  1.98k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 883, False: 1.10k]
  ------------------
 1158|    883|            break;
 1159|    883|        }
 1160|  1.98k|    }
 1161|  1.65k|    return it;
 1162|  1.65k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  5.09k|    {
  283|  5.09k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  5.09k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  5.09k|    {
  252|  5.09k|        constexpr iter_difference_t<I> zero{0};
  253|  5.09k|        iter_difference_t<I> counter{0};
  254|       |
  255|  16.9k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 13.0k, False: 3.91k]
  |  Branch (255:30): [True: 11.8k, False: 1.17k]
  ------------------
  256|  11.8k|            ++i;
  257|  11.8k|            ++counter;
  258|  11.8k|        }
  259|       |
  260|  5.09k|        return counter;
  261|  5.09k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1877|   785k|    {
 1878|   785k|        return !codepoint.empty();
 1879|   785k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2069|   405k|{
 2070|   405k|    return read_until_code_point(range, std::not_fn(pred));
 2071|   405k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2939|   429k|{
 2940|   429k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 429k, False: 0]
  ------------------
 2941|   429k|        auto it = read_while_classic_space(range);
 2942|   429k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|   429k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   429k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.88k, False: 419k]
  |  |  ------------------
  ------------------
 2944|  9.88k|            return unexpected(e);
 2945|  9.88k|        }
 2946|       |
 2947|   419k|        return it;
 2948|   429k|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|   429k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2104|   429k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|   429k|    else {
 2114|   429k|        auto it = range.begin();
 2115|       |
 2116|   429k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|   429k|            auto seg = get_contiguous_beginning(range);
 2118|   429k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|   429k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2119:17): [True: 23.7k, False: 405k]
  ------------------
 2120|  23.7k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|  23.7k|            }
 2122|   405k|            ranges::advance(it, seg.size());
 2123|   405k|        }
 2124|       |
 2125|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|   429k|            return detail::is_cp_space(cp);
 2127|   429k|        });
 2128|   429k|    }
 2129|   429k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   405k|        : m_fptr([](storage fn,
  743|   405k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   405k|              cvref<T> obj = *get<T>(fn);
  745|   405k|              if constexpr (std::is_void_v<R>) {
  746|   405k|                  obj(static_cast<decltype(args)>(args)...);
  747|   405k|              }
  748|   405k|              else {
  749|   405k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   405k|              }
  751|   405k|          }),
  752|   405k|          m_storage(std::addressof(f))
  753|   405k|    {
  754|   405k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   783k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   783k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   783k|              else {
  749|   783k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   783k|              }
  751|   783k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   783k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   783k|        else if constexpr (std::is_object_v<T>) {
  688|   783k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   783k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2125|   783k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|   783k|            return detail::is_cp_space(cp);
 2127|   783k|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   405k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   405k|        {
  662|   405k|        }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|   130k|{
  981|       |    if constexpr (ranges::contiguous_range<Range> &&
  982|       |                  ranges::sized_range<Range>) {
  983|       |        return true;
  984|       |    }
  985|       |    else if constexpr (std::is_same_v<
  986|       |                           ranges::const_iterator_t<Range>,
  987|       |                           typename detail::basic_scan_buffer<
  988|   130k|                               detail::char_t<Range>>::forward_iterator>) {
  989|   130k|        auto beg = r.begin();
  990|   130k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 130k, False: 0]
  ------------------
  991|   130k|            return false;
  992|   130k|        }
  993|       |        if constexpr (ranges::common_range<Range>) {
  994|       |            return beg.contiguous_segment().end() ==
  995|       |                   ranges::end(r).contiguous_segment().end();
  996|       |        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|       |    }
 1005|       |    else {
 1006|       |        return false;
 1007|       |    }
 1008|   130k|}
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|   239k|    {
  763|   239k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   239k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   239k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1844|   102k|{
 1845|   102k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|   102k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   102k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1846|       |
 1847|       |    if constexpr (ranges::sized_range<Range>) {
 1848|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1849|       |        if (sz < count) {
 1850|       |            return unexpected(eof_error::eof);
 1851|       |        }
 1852|       |
 1853|       |        return ranges::next(range.begin(), count);
 1854|       |    }
 1855|   102k|    else {
 1856|   102k|        auto it = range.begin();
 1857|   102k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1857:13): [True: 82.7k, False: 20.0k]
  ------------------
 1858|  82.7k|            return ranges::next(it, count);
 1859|  82.7k|        }
 1860|       |
 1861|  40.5k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1861:36): [True: 39.8k, False: 708]
  ------------------
 1862|  39.8k|            if (it == range.end()) {
  ------------------
  |  Branch (1862:17): [True: 19.3k, False: 20.5k]
  ------------------
 1863|  19.3k|                return unexpected(eof_error::eof);
 1864|  19.3k|            }
 1865|  39.8k|        }
 1866|       |
 1867|    708|        return it;
 1868|  20.0k|    }
 1869|   102k|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|   102k|{
 1095|       |    if constexpr (ranges::sized_range<Range>) {
 1096|       |        return r.size();
 1097|       |    }
 1098|       |    else if constexpr (std::is_same_v<
 1099|       |                           ranges::const_iterator_t<Range>,
 1100|       |                           typename detail::basic_scan_buffer<
 1101|   102k|                               detail::char_t<Range>>::forward_iterator>) {
 1102|       |        if constexpr (ranges::common_range<Range>) {
 1103|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|       |        }
 1105|   102k|        else {
 1106|   102k|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 102k, False: 0]
  ------------------
 1107|   102k|                return static_cast<size_t>(
 1108|   102k|                    r.begin().parent()->chars_available() -
 1109|   102k|                    r.begin().position());
 1110|   102k|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|   102k|        }
 1113|       |    }
 1114|       |    else {
 1115|       |        return 0;
 1116|       |    }
 1117|   102k|}
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|   110k|        : m_fptr([](storage fn,
  743|   110k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   110k|              cvref<T> obj = *get<T>(fn);
  745|   110k|              if constexpr (std::is_void_v<R>) {
  746|   110k|                  obj(static_cast<decltype(args)>(args)...);
  747|   110k|              }
  748|   110k|              else {
  749|   110k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   110k|              }
  751|   110k|          }),
  752|   110k|          m_storage(std::addressof(f))
  753|   110k|    {
  754|   110k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|   119k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   119k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   119k|              else {
  749|   119k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   119k|              }
  751|   119k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|   119k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   119k|        else if constexpr (std::is_object_v<T>) {
  688|   119k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   119k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|   110k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   110k|        {
  662|   110k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6025|   104k|    {
 6026|   104k|        const bool need_skipped_width =
 6027|   104k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 0, False: 104k]
  |  Branch (6027:33): [True: 0, False: 104k]
  ------------------
 6028|   104k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|   104k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 0, False: 104k]
  ------------------
 6032|   104k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 0, False: 104k]
  ------------------
 6033|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6034|      0|                             need_skipped_width);
 6035|      0|        }
 6036|   104k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 104k, False: 0]
  |  Branch (6036:56): [True: 104k, False: 0]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|   104k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 104k]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|   206k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|   104k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   104k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   104k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.48k, False: 102k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.48k|    }                                                  \
  |  |  |  | 3667|   104k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|   206k|                            make_eof_scan_error));
 6047|       |
 6048|   206k|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 102k]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|   102k|            return result_type{it, 0};
 6056|   206k|        }
 6057|       |
 6058|      0|        return result_type{rng.begin(), 0};
 6059|   104k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1963|   110k|{
 1964|   110k|    return read_until_code_unit(range, std::not_fn(pred));
 1965|   110k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1944|   110k|{
 1945|       |    if constexpr (ranges::common_range<Range>) {
 1946|       |        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|   110k|    else {
 1949|   110k|        auto first = range.begin();
 1950|   120k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1950:16): [True: 119k, False: 762]
  ------------------
 1951|   119k|            if (pred(*first)) {
  ------------------
  |  Branch (1951:17): [True: 109k, False: 9.92k]
  ------------------
 1952|   109k|                return first;
 1953|   109k|            }
 1954|   119k|        }
 1955|    762|        return first;
 1956|   110k|    }
 1957|   110k|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  34.7M|    {
  108|  34.7M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  34.7M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  34.7M|    {
   94|  34.7M|        iter_difference_t<I> counter{0};
   95|  71.0G|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 71.0G, False: 34.7M]
  ------------------
   96|  71.0G|            ++i;
   97|  71.0G|            ++counter;
   98|  71.0G|        }
   99|  34.7M|        return counter;
  100|  34.7M|    }
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1767|  34.0k|    {
 1768|  34.0k|        auto stdloc = loc.get<std::locale>();
 1769|  34.0k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1770|  34.0k|        grouping = numpunct.grouping();
 1771|  34.0k|        thousands_sep =
 1772|  34.0k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1772:13): [True: 0, False: 34.0k]
  ------------------
 1773|  34.0k|        decimal_point = numpunct.decimal_point();
 1774|  34.0k|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1704|  34.0k|{
 1705|  34.0k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1705:9): [True: 34.0k, False: 0]
  ------------------
 1706|  34.0k|        return std::use_facet<Facet>(stdloc);
 1707|  34.0k|    }
 1708|      0|    stdloc = std::locale(stdloc, new Facet{});
 1709|      0|    return std::use_facet<Facet>(stdloc);
 1710|  34.0k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1833|   162k|{
 1834|   162k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   162k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 72, False: 162k]
  |  |  ------------------
  ------------------
 1835|     72|        return unexpected(e);
 1836|     72|    }
 1837|       |
 1838|   162k|    return ranges::next(range.begin());
 1839|   162k|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|   319k|{
  950|   319k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   319k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.93k, False: 317k]
  |  |  ------------------
  ------------------
  951|  1.93k|        return eof_error::eof;
  952|  1.93k|    }
  953|   317k|    return eof_error::good;
  954|   319k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|   449k|{
  944|   449k|    return is_range_eof(r.begin(), r.end());
  945|   449k|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|   449k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   449k|    {
  937|   449k|        return begin == end;
  938|   449k|    }
  939|   449k|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|   162k|    {
  296|   162k|        ++x;
  297|   162k|        return x;
  298|   162k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3527|  17.1k|    {
 3528|  17.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  17.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 17.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  17.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  17.1k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  17.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 228, False: 16.9k]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|    228|            else {
 3539|    228|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 228]
  ------------------
 3540|    228|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|    228|            }
 3546|    228|        }
 3547|       |
 3548|  17.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 44, False: 17.0k]
  ------------------
 3549|     44|            value = T{0};
 3550|     44|            return std::next(prefix_result.iterator);
 3551|     44|        }
 3552|       |
 3553|  17.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  17.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 14.2k, False: 2.86k]
  |  |  ------------------
  ------------------
 3554|  14.2k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  14.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 13.8k, False: 380]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  13.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  13.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  13.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  13.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  13.8k|    }                                                  \
  |  |  |  | 3667|  14.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    380|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|    380|                    parse_integer_digits_without_thsep(
 3556|    380|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|    380|                        prefix_result.parsed_base));
 3558|       |
 3559|    380|            auto buf = make_contiguous_buffer(
 3560|    380|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|    380|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    380|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    380|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    380|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    380|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 44, False: 336]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     44|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     44|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     44|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     44|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     44|    }                                                  \
  |  |  |  | 3667|    380|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    336|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|    336|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|    336|                                        prefix_result.parsed_base));
 3564|       |
 3565|    336|            return ranges::next(
 3566|    336|                prefix_result.iterator,
 3567|    336|                ranges::distance(buf.view().begin(), result_it));
 3568|    380|        }
 3569|       |
 3570|  2.86k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  2.86k|            localized_number_formatting_options<CharT>{loc};
 3575|  2.86k|#endif
 3576|       |
 3577|  2.86k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  2.86k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.86k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.86k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.75k, False: 110]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.75k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.75k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.75k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.75k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.75k|    }                                                  \
  |  |  |  | 3667|  2.86k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    110|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|    110|                parse_integer_digits_with_thsep(
 3579|    110|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|    110|                    prefix_result.parsed_base, locale_options));
 3581|    110|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|    110|            parse_digits_result;
 3583|       |
 3584|    110|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 16, False: 94]
  ------------------
 3585|     16|            if (auto e = check_thsep_grouping(
 3586|     16|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|     16|                    thsep_indices, locale_options.grouping);
 3588|     16|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16, False: 0]
  |  |  ------------------
  ------------------
 3589|     16|                return unexpected(e);
 3590|     16|            }
 3591|     16|        }
 3592|       |
 3593|     94|        auto nothsep_source_view =
 3594|     94|            std::basic_string_view<CharT>{nothsep_source};
 3595|     94|        SCN_TRY(
  ------------------
  |  | 3668|     94|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     94|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     94|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     94|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 82]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     12|    }                                                  \
  |  |  |  | 3667|     94|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     82|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|     82|            nothsep_source_it,
 3597|     82|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|     82|                                prefix_result.parsed_base));
 3599|       |
 3600|     82|        return ranges::next(
 3601|     82|            prefix_result.iterator,
 3602|     82|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|     82|                ranges::ssize(thsep_indices));
 3604|     94|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESH_i:
 3314|   128k|{
 3315|   128k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3668|   128k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   128k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   128k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 128k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   128k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3316|   128k|    auto [base_prefix_begin_it, sign] = sign_result;
 3317|       |
 3318|   128k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3319|   128k|        parse_integer_base_prefix(
 3320|   128k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3321|       |
 3322|   128k|    if (parsed_zero) {
  ------------------
  |  Branch (3322:9): [True: 356, False: 128k]
  ------------------
 3323|    356|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3323:13): [True: 48, False: 308]
  ------------------
 3324|    356|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3324:13): [True: 212, False: 96]
  ------------------
 3325|    260|            digits_begin_it = base_prefix_begin_it;
 3326|    260|        }
 3327|     96|        else {
 3328|     96|            parsed_zero = false;
 3329|     96|        }
 3330|    356|    }
 3331|   128k|    else {
 3332|   128k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3332:13): [True: 270, False: 127k]
  ------------------
 3333|   128k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3333:13): [True: 124k, False: 3.74k]
  ------------------
 3334|   124k|            digits_begin_it = base_prefix_begin_it;
 3335|   124k|        }
 3336|   128k|    }
 3337|       |
 3338|   128k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3338:9): [True: 126k, False: 1.87k]
  ------------------
 3339|   126k|        sign = sign_type::plus_sign;
 3340|   126k|    }
 3341|   128k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3342|   128k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3343|   128k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3129|   128k|{
 3130|   128k|    auto r = read_one_of_code_unit(range, "+-");
 3131|   128k|    if (!r) {
  ------------------
  |  Branch (3131:9): [True: 126k, False: 1.87k]
  ------------------
 3132|   126k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3132:13): [True: 126k, False: 0]
  ------------------
 3133|   126k|            return std::pair{range.begin(), sign_type::default_sign};
 3134|   126k|        }
 3135|      0|        return unexpected(eof_error::eof);
 3136|   126k|    }
 3137|       |
 3138|  1.87k|    auto& it = *r;
 3139|  1.87k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3139:9): [True: 1.69k, False: 179]
  ------------------
 3140|  1.69k|        return std::pair{it, sign_type::minus_sign};
 3141|  1.69k|    }
 3142|    179|    return std::pair{it, sign_type::plus_sign};
 3143|  1.87k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2260|   128k|{
 2261|   128k|    auto it = read_code_unit(range);
 2262|   128k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 128k]
  |  |  ------------------
  ------------------
 2263|      0|        return unexpected(make_eof_parse_error(it.error()));
 2264|      0|    }
 2265|       |
 2266|   256k|    for (auto ch : str) {
  ------------------
  |  Branch (2266:18): [True: 256k, False: 126k]
  ------------------
 2267|   256k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2267:13): [True: 1.87k, False: 254k]
  ------------------
 2268|  1.87k|            return *it;
 2269|  1.87k|        }
 2270|   256k|    }
 2271|       |
 2272|   126k|    return unexpected(parse_error::error);
 2273|   128k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEEibEEESG_i:
 3281|   128k|{
 3282|   128k|    switch (base) {
 3283|  16.9k|        case 2:
  ------------------
  |  Branch (3283:9): [True: 16.9k, False: 111k]
  ------------------
 3284|       |            // allow 0b/0B
 3285|  16.9k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3286|  16.9k|                    false};
 3287|       |
 3288|  17.0k|        case 8: {
  ------------------
  |  Branch (3288:9): [True: 17.0k, False: 111k]
  ------------------
 3289|       |            // allow 0o/0O/0
 3290|  17.0k|            bool zero_parsed = false;
 3291|  17.0k|            auto it = apply_opt(
 3292|  17.0k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3293|  17.0k|            return {it, 8, zero_parsed};
 3294|      0|        }
 3295|       |
 3296|  17.1k|        case 16:
  ------------------
  |  Branch (3296:9): [True: 17.1k, False: 111k]
  ------------------
 3297|       |            // allow 0x/0X
 3298|  17.1k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3299|  17.1k|                    false};
 3300|       |
 3301|  17.1k|        case 0:
  ------------------
  |  Branch (3301:9): [True: 17.1k, False: 111k]
  ------------------
 3302|       |            // detect base
 3303|  17.1k|            return parse_integer_base_prefix_for_detection(range);
 3304|       |
 3305|  60.0k|        default:
  ------------------
  |  Branch (3305:9): [True: 60.0k, False: 68.3k]
  ------------------
 3306|       |            // no base prefix allowed
 3307|  60.0k|            return {range.begin(), base, false};
 3308|   128k|    }
 3309|   128k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEENS1_14parse_expectedESA_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEE4typeEOSI_SK_:
 2279|  51.1k|{
 2280|  51.1k|    if (!result) {
  ------------------
  |  Branch (2280:9): [True: 51.0k, False: 168]
  ------------------
 2281|  51.0k|        return range.begin();
 2282|  51.0k|    }
 2283|    168|    return *result;
 2284|  51.1k|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 3232|  34.1k|{
 3233|  34.1k|    return read_matching_string_classic_nocase(range, "0b");
 3234|  34.1k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2219|   102k|{
 2220|   102k|    using char_type = detail::char_t<Range>;
 2221|       |
 2222|       |    if constexpr (ranges::contiguous_range<Range> &&
 2223|       |                  std::is_same_v<char_type, char>) {
 2224|       |        if (range.size() < str.size()) {
 2225|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2226|       |        }
 2227|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2228|       |            return unexpected(parse_error::error);
 2229|       |        }
 2230|       |        return ranges::next(range.begin(), str.size());
 2231|       |    }
 2232|   102k|    else {
 2233|   102k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|   102k|            if (ch < 'A' || ch > 'Z') {
 2235|   102k|                return ch;
 2236|   102k|            }
 2237|   102k|            return static_cast<char_type>(ch +
 2238|   102k|                                          static_cast<char_type>('a' - 'A'));
 2239|   102k|        };
 2240|       |
 2241|   102k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|   102k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   102k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   102k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 19.3k, False: 83.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  19.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  19.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  19.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  19.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  19.3k|    }                                                  \
  |  |  |  | 3667|   102k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  83.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2242|  83.4k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2243|  83.4k|                        .transform_error(make_eof_parse_error));
 2244|       |
 2245|  83.4k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  83.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 83.4k, False: 0]
  |  |  ------------------
  ------------------
 2246|  83.4k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2247|  83.4k|                    return ascii_tolower(a) ==
 2248|  83.4k|                           static_cast<detail::char_t<Range>>(b);
 2249|  83.4k|                }))) {
 2250|  83.4k|            return unexpected(parse_error::error);
 2251|  83.4k|        }
 2252|       |
 2253|      0|        return it;
 2254|  83.4k|    }
 2255|   102k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlwE_clEw:
 2233|  84.4k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|  84.4k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2234:17): [True: 56.3k, False: 28.0k]
  |  Branch (2234:29): [True: 27.6k, False: 360]
  ------------------
 2235|  84.0k|                return ch;
 2236|  84.0k|            }
 2237|    360|            return static_cast<char_type>(ch +
 2238|    360|                                          static_cast<char_type>('a' - 'A'));
 2239|  84.4k|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 3246|  34.2k|{
 3247|  34.2k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3247:14): [True: 0, False: 34.2k]
  ------------------
 3248|      0|        return *r;
 3249|      0|    }
 3250|       |
 3251|  34.2k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3251:14): [True: 356, False: 33.8k]
  ------------------
 3252|    356|        zero_parsed = true;
 3253|    356|        return *r;
 3254|    356|    }
 3255|       |
 3256|  33.8k|    return unexpected(parse_error::error);
 3257|  34.2k|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2134|  34.2k|{
 2135|  34.2k|    auto it = read_code_unit(range);
 2136|  34.2k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  34.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 72, False: 34.1k]
  |  |  ------------------
  ------------------
 2137|     72|        return unexpected(make_eof_parse_error(it.error()));
 2138|     72|    }
 2139|       |
 2140|  34.1k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  34.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 33.7k, False: 356]
  |  |  ------------------
  ------------------
 2141|  34.1k|                     static_cast<detail::char_t<Range>>(ch))) {
 2142|  33.7k|        return unexpected(parse_error::error);
 2143|  33.7k|    }
 2144|       |
 2145|    356|    return *it;
 2146|  34.1k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 3239|  34.3k|{
 3240|  34.3k|    return read_matching_string_classic_nocase(range, "0x");
 3241|  34.3k|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEEibEEESG_:
 3262|  17.1k|{
 3263|  17.1k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3263:14): [True: 0, False: 17.1k]
  ------------------
 3264|      0|        return {*r, 16, false};
 3265|      0|    }
 3266|  17.1k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3266:14): [True: 0, False: 17.1k]
  ------------------
 3267|      0|        return {*r, 2, false};
 3268|      0|    }
 3269|  17.1k|    {
 3270|  17.1k|        bool zero_parsed{false};
 3271|  17.1k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3271:18): [True: 188, False: 17.0k]
  ------------------
 3272|    188|            return {*r, 8, zero_parsed};
 3273|    188|        }
 3274|  17.1k|    }
 3275|  17.0k|    return {range.begin(), 10, false};
 3276|  17.1k|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_i:
 3348|   110k|{
 3349|   110k|    using char_type = detail::char_t<Range>;
 3350|       |
 3351|       |    if constexpr (ranges::contiguous_range<Range>) {
 3352|       |        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3353|       |            return unexpected_scan_error(
 3354|       |                scan_error::invalid_scanned_value,
 3355|       |                "Failed to parse integer: No digits found");
 3356|       |        }
 3357|       |        return range.end();
 3358|       |    }
 3359|   110k|    else {
 3360|   110k|        return read_while1_code_unit(range,
 3361|   110k|                                     [&](char_type ch) noexcept {
 3362|   110k|                                         return char_to_int(ch) < base;
 3363|   110k|                                     })
 3364|   110k|            .transform_error(map_parse_error_to_scan_error(
 3365|   110k|                scan_error::invalid_scanned_value,
 3366|   110k|                "Failed to parse integer: No digits found"));
 3367|   110k|    }
 3368|   110k|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1983|   110k|{
 1984|   110k|    auto it = read_while_code_unit(range, pred);
 1985|   110k|    if (it == range.begin()) {
  ------------------
  |  Branch (1985:9): [True: 107k, False: 2.94k]
  ------------------
 1986|   107k|        return unexpected(parse_error::error);
 1987|   107k|    }
 1988|  2.94k|    return it;
 1989|   110k|}
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlwE_SQ_TnPNSI_9enable_ifIXaaaasr6detailE11is_not_selfISK_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSS_EEvE4typeELPv0EEEOSK_:
  742|   110k|        : m_fptr([](storage fn,
  743|   110k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   110k|              cvref<T> obj = *get<T>(fn);
  745|   110k|              if constexpr (std::is_void_v<R>) {
  746|   110k|                  obj(static_cast<decltype(args)>(args)...);
  747|   110k|              }
  748|   110k|              else {
  749|   110k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   110k|              }
  751|   110k|          }),
  752|   110k|          m_storage(std::addressof(f))
  753|   110k|    {
  754|   110k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlwE_SQ_TnPNSI_9enable_ifIXaaaasr6detailE11is_not_selfISK_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSS_EEvE4typeELPv0EEEOSK_ENKUlNS1_12fnref_detail4base7storageEwE_clES11_w:
  743|   119k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   119k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   119k|              else {
  749|   119k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   119k|              }
  751|   119k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_iEUlwE_EEDaNS3_7storageE:
  683|   119k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   119k|        else if constexpr (std::is_object_v<T>) {
  688|   119k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   119k|    }
_ZZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_iENKUlwE_clEw:
 3361|   119k|                                     [&](char_type ch) noexcept {
 3362|   119k|                                         return char_to_int(ch) < base;
 3363|   119k|                                     })
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlwE_TnPNSI_9enable_ifIXsr3stdE11is_object_vISK_EEvE4typeELPv0EEEPSK_:
  660|   110k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   110k|        {
  662|   110k|        }
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENSE_12basic_stringIT0_NSE_11char_traitsISN_EENSE_9allocatorISN_EEEENSM_IcNSO_IcEENSQ_IcEEEEEEEEESH_iRKNS1_35localized_number_formatting_optionsISN_EE:
 3378|  17.0k|{
 3379|  17.0k|    std::basic_string<CharT> output;
 3380|  17.0k|    std::string thsep_indices;
 3381|  17.0k|    auto it = range.begin();
 3382|  17.0k|    bool digit_matched = false;
 3383|  34.7M|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3383:12): [True: 34.7M, False: 324]
  ------------------
 3384|  34.7M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3384:13): [True: 34.7M, False: 18.8k]
  ------------------
 3385|  34.7M|            thsep_indices.push_back(
 3386|  34.7M|                static_cast<char>(ranges::distance(range.begin(), it)));
 3387|  34.7M|        }
 3388|  18.8k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3388:18): [True: 16.6k, False: 2.11k]
  ------------------
 3389|  16.6k|            break;
 3390|  16.6k|        }
 3391|  2.11k|        else {
 3392|  2.11k|            output.push_back(*it);
 3393|  2.11k|            digit_matched = true;
 3394|  2.11k|        }
 3395|  34.7M|    }
 3396|  17.0k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|  17.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.4k, False: 596]
  |  |  ------------------
  ------------------
 3397|  16.4k|        return unexpected_scan_error(
 3398|  16.4k|            scan_error::invalid_scanned_value,
 3399|  16.4k|            "Failed to parse integer: No digits found");
 3400|  16.4k|    }
 3401|    596|    return std::tuple{it, output, thsep_indices};
 3402|  17.0k|}
_ZN3scn2v34impl20check_thsep_groupingINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_EEEENS0_10scan_errorET_NSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEENSE_17basic_string_viewIcSH_EE:
 3199|     90|{
 3200|     90|    SCN_EXPECT(!thsep_indices.empty());
  ------------------
  |  |  924|     90|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     90|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3201|       |
 3202|     90|    if (!check_thsep_grouping_impl(range, thsep_indices, grouping)) {
  ------------------
  |  Branch (3202:9): [True: 90, False: 0]
  ------------------
 3203|     90|        SCN_UNLIKELY_ATTR
 3204|     90|        return {scan_error::invalid_scanned_value,
 3205|     90|                "Invalid thousands separator grouping"};
 3206|     90|    }
 3207|       |
 3208|      0|    return {};
 3209|     90|}
_ZN3scn2v34impl25check_thsep_grouping_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_EEEEbT_RNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEENSD_17basic_string_viewIcSG_EE:
 3161|     90|{
 3162|     90|    transform_thsep_indices(thsep_indices,
 3163|     90|                            ranges::distance(range.begin(), range.end()));
 3164|       |
 3165|     90|    auto thsep_it = thsep_indices.rbegin();
 3166|     90|    for (auto grouping_it = grouping.begin();
 3167|     90|         grouping_it != grouping.end() && thsep_it != thsep_indices.rend() - 1;
  ------------------
  |  Branch (3167:10): [True: 0, False: 90]
  |  Branch (3167:10): [True: 0, False: 90]
  |  Branch (3167:43): [True: 0, False: 0]
  ------------------
 3168|     90|         ++grouping_it, (void)++thsep_it) {
 3169|      0|        if (*thsep_it != *grouping_it) {
  ------------------
  |  Branch (3169:13): [True: 0, False: 0]
  ------------------
 3170|      0|            return false;
 3171|      0|        }
 3172|      0|    }
 3173|       |
 3174|     90|    SCN_CLANG_PUSH
 3175|       |    // false positive
 3176|     90|    SCN_CLANG_IGNORE("-Wzero-as-null-pointer-constant")
 3177|       |
 3178|    552|    for (; thsep_it < thsep_indices.rend() - 1; ++thsep_it) {
  ------------------
  |  Branch (3178:12): [True: 492, False: 60]
  ------------------
 3179|    492|        if (*thsep_it != grouping.back()) {
  ------------------
  |  Branch (3179:13): [True: 30, False: 462]
  ------------------
 3180|     30|            return false;
 3181|     30|        }
 3182|    492|    }
 3183|       |
 3184|     60|    if (thsep_it == thsep_indices.rend() - 1) {
  ------------------
  |  Branch (3184:9): [True: 60, False: 0]
  ------------------
 3185|     60|        if (*thsep_it > grouping.back()) {
  ------------------
  |  Branch (3185:13): [True: 60, False: 0]
  ------------------
 3186|     60|            return false;
 3187|     60|        }
 3188|     60|    }
 3189|       |
 3190|      0|    SCN_CLANG_POP
 3191|       |
 3192|      0|    return true;
 3193|     60|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_EEEEDaOT_:
 1670|  2.94k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|       |                  ranges::sized_range<Range>) {
 1674|       |        return string_view_wrapper{SCN_FWD(range)};
 1675|       |    }
 1676|  2.94k|    else {
 1677|  2.94k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|  2.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1678|  2.94k|    }
 1679|  2.94k|}
_ZN3scn2v34impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1524|  2.94k|    {
 1525|  2.94k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  2.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1526|  2.94k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1608|  2.94k|    {
 1609|  2.94k|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|       |                      ranges::sized_range<Range>) {
 1614|       |            m_storage.reset();
 1615|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|       |                                          std::basic_string<CharT>>) {
 1619|       |            m_storage.emplace(SCN_FWD(range));
 1620|       |            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|  2.94k|                           ranges::common_range<Range>) {
 1626|  2.94k|            auto beg_seg = range.begin().contiguous_segment();
 1627|  2.94k|            auto end_seg = range.end().contiguous_segment();
 1628|  2.94k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|  2.94k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.07k, False: 863]
  |  |  ------------------
  ------------------
 1629|  2.94k|                             detail::to_address(end_seg.end()))) {
 1630|  2.07k|                auto& str = m_storage.emplace();
 1631|  2.07k|                str.reserve(range.end().position() - range.begin().position());
 1632|  2.07k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|  2.07k|                m_view = string_view_type{str};
 1634|  2.07k|                return;
 1635|  2.07k|            }
 1636|       |
 1637|    863|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|    863|                                                            end_seg.data());
 1639|    863|            m_storage.reset();
 1640|       |        }
 1641|       |        else {
 1642|       |            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|       |            if constexpr (ranges::common_range<Range>) {
 1647|       |                std::copy(ranges::begin(range), ranges::end(range),
 1648|       |                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|       |            m_view = string_view_type{str};
 1657|       |        }
 1658|  2.94k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1569|  5.50k|    {
 1570|  5.50k|        return m_view;
 1571|  5.50k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1559|  2.94k|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6067|  1.92k|    {
 6068|  1.92k|        const bool need_skipped_width =
 6069|  1.92k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 0, False: 1.92k]
  |  Branch (6069:33): [True: 0, False: 1.92k]
  ------------------
 6070|  1.92k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|  1.92k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 0, False: 1.92k]
  ------------------
 6073|  1.92k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 0, False: 1.92k]
  ------------------
 6074|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 0, False: 0]
  ------------------
 6075|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 0, False: 0]
  ------------------
 6076|      0|                return result_type{rng.begin(), 0};
 6077|      0|            }
 6078|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|      0|                             specs.fill, need_skipped_width);
 6080|      0|        }
 6081|  1.92k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 1.92k, False: 0]
  ------------------
 6082|  1.92k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 0, False: 1.92k]
  ------------------
 6083|  1.92k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 0, False: 0]
  |  Branch (6083:35): [True: 0, False: 0]
  ------------------
 6084|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 0, False: 0]
  ------------------
 6085|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 0, False: 0]
  ------------------
 6086|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                const auto initial_width =
 6088|      0|                    specs.precision - prefix_width - value_width;
 6089|      0|                auto max_width_view = take_width(rng, initial_width);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|      0|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|  1.92k|        return result_type{rng.begin(), 0};
 6107|  1.92k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1844|   102k|{
 1845|   102k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|   102k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   102k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1846|       |
 1847|   102k|    if constexpr (ranges::sized_range<Range>) {
 1848|   102k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1849|   102k|        if (sz < count) {
  ------------------
  |  Branch (1849:13): [True: 19.3k, False: 83.4k]
  ------------------
 1850|  19.3k|            return unexpected(eof_error::eof);
 1851|  19.3k|        }
 1852|       |
 1853|  83.4k|        return ranges::next(range.begin(), count);
 1854|       |    }
 1855|       |    else {
 1856|       |        auto it = range.begin();
 1857|       |        if (guaranteed_minimum_size(range) >= count) {
 1858|       |            return ranges::next(it, count);
 1859|       |        }
 1860|       |
 1861|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1862|       |            if (it == range.end()) {
 1863|       |                return unexpected(eof_error::eof);
 1864|       |            }
 1865|       |        }
 1866|       |
 1867|       |        return it;
 1868|       |    }
 1869|   102k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1886|   130k|{
 1887|   130k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   130k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   130k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|   130k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|   130k|    auto it = range.begin();
 1891|   130k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|   130k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 130k]
  |  |  ------------------
  ------------------
 1894|      0|        ++it;
 1895|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|      0|        return {it, {}};
 1897|      0|    }
 1898|       |
 1899|   130k|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 130k, False: 0]
  ------------------
 1900|   130k|        ++it;
 1901|   130k|        return {it, string_type(1, *range.begin())};
 1902|   130k|    }
 1903|       |
 1904|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|      0|    return {it, string_type{range.begin(), it}};
 1906|   130k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|   560k|{
  944|   560k|    return is_range_eof(r.begin(), r.end());
  945|   560k|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|   560k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   560k|    {
  937|   560k|        return begin == end;
  938|   560k|    }
  939|   560k|}
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1877|   130k|    {
 1878|   130k|        return !codepoint.empty();
 1879|   130k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|   429k|{
  950|   429k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   429k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.09k, False: 427k]
  |  |  ------------------
  ------------------
  951|  2.09k|        return eof_error::eof;
  952|  2.09k|    }
  953|   427k|    return eof_error::good;
  954|   429k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1833|   162k|{
 1834|   162k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   162k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 72, False: 162k]
  |  |  ------------------
  ------------------
 1835|     72|        return unexpected(e);
 1836|     72|    }
 1837|       |
 1838|   162k|    return ranges::next(range.begin());
 1839|   162k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   162k|    {
  296|   162k|        ++x;
  297|   162k|        return x;
  298|   162k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|  17.1k|    {
 3528|  17.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  17.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 17.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  17.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  17.1k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  17.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 228, False: 16.9k]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|    228|            else {
 3539|    228|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 228]
  ------------------
 3540|    228|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|    228|            }
 3546|    228|        }
 3547|       |
 3548|  17.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 44, False: 17.0k]
  ------------------
 3549|     44|            value = T{0};
 3550|     44|            return std::next(prefix_result.iterator);
 3551|     44|        }
 3552|       |
 3553|  17.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  17.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 14.2k, False: 2.86k]
  |  |  ------------------
  ------------------
 3554|  14.2k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  14.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 30, False: 14.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     30|    }                                                  \
  |  |  |  | 3667|  14.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  14.2k|                    parse_integer_digits_without_thsep(
 3556|  14.2k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  14.2k|                        prefix_result.parsed_base));
 3558|       |
 3559|  14.2k|            auto buf = make_contiguous_buffer(
 3560|  14.2k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  14.2k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  14.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 13.8k, False: 336]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  13.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  13.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  13.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  13.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  13.8k|    }                                                  \
  |  |  |  | 3667|  14.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    336|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|    336|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|    336|                                        prefix_result.parsed_base));
 3564|       |
 3565|    336|            return ranges::next(
 3566|    336|                prefix_result.iterator,
 3567|    336|                ranges::distance(buf.view().begin(), result_it));
 3568|  14.2k|        }
 3569|       |
 3570|  2.86k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  2.86k|            localized_number_formatting_options<CharT>{loc};
 3575|  2.86k|#endif
 3576|       |
 3577|  2.86k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  2.86k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.86k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.86k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.75k, False: 110]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.75k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.75k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.75k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.75k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.75k|    }                                                  \
  |  |  |  | 3667|  2.86k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    110|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|    110|                parse_integer_digits_with_thsep(
 3579|    110|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|    110|                    prefix_result.parsed_base, locale_options));
 3581|    110|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|    110|            parse_digits_result;
 3583|       |
 3584|    110|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 16, False: 94]
  ------------------
 3585|     16|            if (auto e = check_thsep_grouping(
 3586|     16|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|     16|                    thsep_indices, locale_options.grouping);
 3588|     16|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16, False: 0]
  |  |  ------------------
  ------------------
 3589|     16|                return unexpected(e);
 3590|     16|            }
 3591|     16|        }
 3592|       |
 3593|     94|        auto nothsep_source_view =
 3594|     94|            std::basic_string_view<CharT>{nothsep_source};
 3595|     94|        SCN_TRY(
  ------------------
  |  | 3668|     94|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     94|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     94|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     94|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 82]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     12|    }                                                  \
  |  |  |  | 3667|     94|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     82|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|     82|            nothsep_source_it,
 3597|     82|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|     82|                                prefix_result.parsed_base));
 3599|       |
 3600|     82|        return ranges::next(
 3601|     82|            prefix_result.iterator,
 3602|     82|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|     82|                ranges::ssize(thsep_indices));
 3604|     94|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3314|   128k|{
 3315|   128k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3668|   128k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   128k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   128k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 128k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   128k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3316|   128k|    auto [base_prefix_begin_it, sign] = sign_result;
 3317|       |
 3318|   128k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3319|   128k|        parse_integer_base_prefix(
 3320|   128k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3321|       |
 3322|   128k|    if (parsed_zero) {
  ------------------
  |  Branch (3322:9): [True: 356, False: 128k]
  ------------------
 3323|    356|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3323:13): [True: 48, False: 308]
  ------------------
 3324|    356|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3324:13): [True: 212, False: 96]
  ------------------
 3325|    260|            digits_begin_it = base_prefix_begin_it;
 3326|    260|        }
 3327|     96|        else {
 3328|     96|            parsed_zero = false;
 3329|     96|        }
 3330|    356|    }
 3331|   128k|    else {
 3332|   128k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3332:13): [True: 270, False: 127k]
  ------------------
 3333|   128k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3333:13): [True: 124k, False: 3.74k]
  ------------------
 3334|   124k|            digits_begin_it = base_prefix_begin_it;
 3335|   124k|        }
 3336|   128k|    }
 3337|       |
 3338|   128k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3338:9): [True: 126k, False: 1.87k]
  ------------------
 3339|   126k|        sign = sign_type::plus_sign;
 3340|   126k|    }
 3341|   128k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3342|   128k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3343|   128k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3129|   128k|{
 3130|   128k|    auto r = read_one_of_code_unit(range, "+-");
 3131|   128k|    if (!r) {
  ------------------
  |  Branch (3131:9): [True: 126k, False: 1.87k]
  ------------------
 3132|   126k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3132:13): [True: 126k, False: 0]
  ------------------
 3133|   126k|            return std::pair{range.begin(), sign_type::default_sign};
 3134|   126k|        }
 3135|      0|        return unexpected(eof_error::eof);
 3136|   126k|    }
 3137|       |
 3138|  1.87k|    auto& it = *r;
 3139|  1.87k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3139:9): [True: 1.69k, False: 179]
  ------------------
 3140|  1.69k|        return std::pair{it, sign_type::minus_sign};
 3141|  1.69k|    }
 3142|    179|    return std::pair{it, sign_type::plus_sign};
 3143|  1.87k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2260|   128k|{
 2261|   128k|    auto it = read_code_unit(range);
 2262|   128k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 128k]
  |  |  ------------------
  ------------------
 2263|      0|        return unexpected(make_eof_parse_error(it.error()));
 2264|      0|    }
 2265|       |
 2266|   256k|    for (auto ch : str) {
  ------------------
  |  Branch (2266:18): [True: 256k, False: 126k]
  ------------------
 2267|   256k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2267:13): [True: 1.87k, False: 254k]
  ------------------
 2268|  1.87k|            return *it;
 2269|  1.87k|        }
 2270|   256k|    }
 2271|       |
 2272|   126k|    return unexpected(parse_error::error);
 2273|   128k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3281|   128k|{
 3282|   128k|    switch (base) {
 3283|  16.9k|        case 2:
  ------------------
  |  Branch (3283:9): [True: 16.9k, False: 111k]
  ------------------
 3284|       |            // allow 0b/0B
 3285|  16.9k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3286|  16.9k|                    false};
 3287|       |
 3288|  17.0k|        case 8: {
  ------------------
  |  Branch (3288:9): [True: 17.0k, False: 111k]
  ------------------
 3289|       |            // allow 0o/0O/0
 3290|  17.0k|            bool zero_parsed = false;
 3291|  17.0k|            auto it = apply_opt(
 3292|  17.0k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3293|  17.0k|            return {it, 8, zero_parsed};
 3294|      0|        }
 3295|       |
 3296|  17.1k|        case 16:
  ------------------
  |  Branch (3296:9): [True: 17.1k, False: 111k]
  ------------------
 3297|       |            // allow 0x/0X
 3298|  17.1k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3299|  17.1k|                    false};
 3300|       |
 3301|  17.1k|        case 0:
  ------------------
  |  Branch (3301:9): [True: 17.1k, False: 111k]
  ------------------
 3302|       |            // detect base
 3303|  17.1k|            return parse_integer_base_prefix_for_detection(range);
 3304|       |
 3305|  60.0k|        default:
  ------------------
  |  Branch (3305:9): [True: 60.0k, False: 68.3k]
  ------------------
 3306|       |            // no base prefix allowed
 3307|  60.0k|            return {range.begin(), base, false};
 3308|   128k|    }
 3309|   128k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2279|  51.1k|{
 2280|  51.1k|    if (!result) {
  ------------------
  |  Branch (2280:9): [True: 51.0k, False: 168]
  ------------------
 2281|  51.0k|        return range.begin();
 2282|  51.0k|    }
 2283|    168|    return *result;
 2284|  51.1k|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3232|  34.1k|{
 3233|  34.1k|    return read_matching_string_classic_nocase(range, "0b");
 3234|  34.1k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2219|   102k|{
 2220|   102k|    using char_type = detail::char_t<Range>;
 2221|       |
 2222|       |    if constexpr (ranges::contiguous_range<Range> &&
 2223|       |                  std::is_same_v<char_type, char>) {
 2224|       |        if (range.size() < str.size()) {
 2225|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2226|       |        }
 2227|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2228|       |            return unexpected(parse_error::error);
 2229|       |        }
 2230|       |        return ranges::next(range.begin(), str.size());
 2231|       |    }
 2232|   102k|    else {
 2233|   102k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|   102k|            if (ch < 'A' || ch > 'Z') {
 2235|   102k|                return ch;
 2236|   102k|            }
 2237|   102k|            return static_cast<char_type>(ch +
 2238|   102k|                                          static_cast<char_type>('a' - 'A'));
 2239|   102k|        };
 2240|       |
 2241|   102k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|   102k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   102k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   102k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 19.3k, False: 83.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  19.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  19.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  19.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  19.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  19.3k|    }                                                  \
  |  |  |  | 3667|   102k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  83.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2242|  83.4k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2243|  83.4k|                        .transform_error(make_eof_parse_error));
 2244|       |
 2245|  83.4k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  83.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 83.4k, False: 0]
  |  |  ------------------
  ------------------
 2246|  83.4k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2247|  83.4k|                    return ascii_tolower(a) ==
 2248|  83.4k|                           static_cast<detail::char_t<Range>>(b);
 2249|  83.4k|                }))) {
 2250|  83.4k|            return unexpected(parse_error::error);
 2251|  83.4k|        }
 2252|       |
 2253|      0|        return it;
 2254|  83.4k|    }
 2255|   102k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2233|  84.4k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|  84.4k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2234:17): [True: 56.3k, False: 28.0k]
  |  Branch (2234:29): [True: 27.6k, False: 360]
  ------------------
 2235|  84.0k|                return ch;
 2236|  84.0k|            }
 2237|    360|            return static_cast<char_type>(ch +
 2238|    360|                                          static_cast<char_type>('a' - 'A'));
 2239|  84.4k|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3246|  34.2k|{
 3247|  34.2k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3247:14): [True: 0, False: 34.2k]
  ------------------
 3248|      0|        return *r;
 3249|      0|    }
 3250|       |
 3251|  34.2k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3251:14): [True: 356, False: 33.8k]
  ------------------
 3252|    356|        zero_parsed = true;
 3253|    356|        return *r;
 3254|    356|    }
 3255|       |
 3256|  33.8k|    return unexpected(parse_error::error);
 3257|  34.2k|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2134|  34.2k|{
 2135|  34.2k|    auto it = read_code_unit(range);
 2136|  34.2k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  34.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 72, False: 34.1k]
  |  |  ------------------
  ------------------
 2137|     72|        return unexpected(make_eof_parse_error(it.error()));
 2138|     72|    }
 2139|       |
 2140|  34.1k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  34.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 33.7k, False: 356]
  |  |  ------------------
  ------------------
 2141|  34.1k|                     static_cast<detail::char_t<Range>>(ch))) {
 2142|  33.7k|        return unexpected(parse_error::error);
 2143|  33.7k|    }
 2144|       |
 2145|    356|    return *it;
 2146|  34.1k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3239|  34.3k|{
 3240|  34.3k|    return read_matching_string_classic_nocase(range, "0x");
 3241|  34.3k|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3262|  17.1k|{
 3263|  17.1k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3263:14): [True: 0, False: 17.1k]
  ------------------
 3264|      0|        return {*r, 16, false};
 3265|      0|    }
 3266|  17.1k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3266:14): [True: 0, False: 17.1k]
  ------------------
 3267|      0|        return {*r, 2, false};
 3268|      0|    }
 3269|  17.1k|    {
 3270|  17.1k|        bool zero_parsed{false};
 3271|  17.1k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3271:18): [True: 188, False: 17.0k]
  ------------------
 3272|    188|            return {*r, 8, zero_parsed};
 3273|    188|        }
 3274|  17.1k|    }
 3275|  17.0k|    return {range.begin(), 10, false};
 3276|  17.1k|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3348|   110k|{
 3349|   110k|    using char_type = detail::char_t<Range>;
 3350|       |
 3351|   110k|    if constexpr (ranges::contiguous_range<Range>) {
 3352|   110k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 156, False: 110k]
  |  |  ------------------
  ------------------
 3353|    156|            return unexpected_scan_error(
 3354|    156|                scan_error::invalid_scanned_value,
 3355|    156|                "Failed to parse integer: No digits found");
 3356|    156|        }
 3357|   110k|        return range.end();
 3358|       |    }
 3359|       |    else {
 3360|       |        return read_while1_code_unit(range,
 3361|       |                                     [&](char_type ch) noexcept {
 3362|       |                                         return char_to_int(ch) < base;
 3363|       |                                     })
 3364|       |            .transform_error(map_parse_error_to_scan_error(
 3365|       |                scan_error::invalid_scanned_value,
 3366|       |                "Failed to parse integer: No digits found"));
 3367|       |    }
 3368|   110k|}
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3378|  17.0k|{
 3379|  17.0k|    std::basic_string<CharT> output;
 3380|  17.0k|    std::string thsep_indices;
 3381|  17.0k|    auto it = range.begin();
 3382|  17.0k|    bool digit_matched = false;
 3383|  34.7M|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3383:12): [True: 34.7M, False: 324]
  ------------------
 3384|  34.7M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3384:13): [True: 34.7M, False: 18.8k]
  ------------------
 3385|  34.7M|            thsep_indices.push_back(
 3386|  34.7M|                static_cast<char>(ranges::distance(range.begin(), it)));
 3387|  34.7M|        }
 3388|  18.8k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3388:18): [True: 16.6k, False: 2.11k]
  ------------------
 3389|  16.6k|            break;
 3390|  16.6k|        }
 3391|  2.11k|        else {
 3392|  2.11k|            output.push_back(*it);
 3393|  2.11k|            digit_matched = true;
 3394|  2.11k|        }
 3395|  34.7M|    }
 3396|  17.0k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|  17.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.4k, False: 596]
  |  |  ------------------
  ------------------
 3397|  16.4k|        return unexpected_scan_error(
 3398|  16.4k|            scan_error::invalid_scanned_value,
 3399|  16.4k|            "Failed to parse integer: No digits found");
 3400|  16.4k|    }
 3401|    596|    return std::tuple{it, output, thsep_indices};
 3402|  17.0k|}
_ZN3scn2v34impl20check_thsep_groupingINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_10scan_errorET_NSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEENSC_17basic_string_viewIcSF_EE:
 3199|     90|{
 3200|     90|    SCN_EXPECT(!thsep_indices.empty());
  ------------------
  |  |  924|     90|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     90|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3201|       |
 3202|     90|    if (!check_thsep_grouping_impl(range, thsep_indices, grouping)) {
  ------------------
  |  Branch (3202:9): [True: 90, False: 0]
  ------------------
 3203|     90|        SCN_UNLIKELY_ATTR
 3204|     90|        return {scan_error::invalid_scanned_value,
 3205|     90|                "Invalid thousands separator grouping"};
 3206|     90|    }
 3207|       |
 3208|      0|    return {};
 3209|     90|}
_ZN3scn2v34impl25check_thsep_grouping_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_RNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEENSB_17basic_string_viewIcSE_EE:
 3161|     90|{
 3162|     90|    transform_thsep_indices(thsep_indices,
 3163|     90|                            ranges::distance(range.begin(), range.end()));
 3164|       |
 3165|     90|    auto thsep_it = thsep_indices.rbegin();
 3166|     90|    for (auto grouping_it = grouping.begin();
 3167|     90|         grouping_it != grouping.end() && thsep_it != thsep_indices.rend() - 1;
  ------------------
  |  Branch (3167:10): [True: 0, False: 90]
  |  Branch (3167:10): [True: 0, False: 90]
  |  Branch (3167:43): [True: 0, False: 0]
  ------------------
 3168|     90|         ++grouping_it, (void)++thsep_it) {
 3169|      0|        if (*thsep_it != *grouping_it) {
  ------------------
  |  Branch (3169:13): [True: 0, False: 0]
  ------------------
 3170|      0|            return false;
 3171|      0|        }
 3172|      0|    }
 3173|       |
 3174|     90|    SCN_CLANG_PUSH
 3175|       |    // false positive
 3176|     90|    SCN_CLANG_IGNORE("-Wzero-as-null-pointer-constant")
 3177|       |
 3178|    552|    for (; thsep_it < thsep_indices.rend() - 1; ++thsep_it) {
  ------------------
  |  Branch (3178:12): [True: 492, False: 60]
  ------------------
 3179|    492|        if (*thsep_it != grouping.back()) {
  ------------------
  |  Branch (3179:13): [True: 30, False: 462]
  ------------------
 3180|     30|            return false;
 3181|     30|        }
 3182|    492|    }
 3183|       |
 3184|     60|    if (thsep_it == thsep_indices.rend() - 1) {
  ------------------
  |  Branch (3184:9): [True: 60, False: 0]
  ------------------
 3185|     60|        if (*thsep_it > grouping.back()) {
  ------------------
  |  Branch (3185:13): [True: 60, False: 0]
  ------------------
 3186|     60|            return false;
 3187|     60|        }
 3188|     60|    }
 3189|       |
 3190|      0|    SCN_CLANG_POP
 3191|       |
 3192|      0|    return true;
 3193|     60|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1670|   110k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|   110k|                  ranges::sized_range<Range>) {
 1674|   110k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1675|       |    }
 1676|       |    else {
 1677|       |        return contiguous_range_factory{SCN_FWD(range)};
 1678|       |    }
 1679|   110k|}
_ZN3scn2v34impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1476|   110k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1477|   110k|    {
 1478|   110k|    }
_ZNK3scn2v34impl19string_view_wrapperIwE4viewEv:
 1490|   112k|    {
 1491|   112k|        return sv;
 1492|   112k|    }
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2939|   130k|{
 2940|   130k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 130k, False: 0]
  ------------------
 2941|   130k|        auto it = read_while_classic_space(range);
 2942|   130k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|   130k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.70k, False: 128k]
  |  |  ------------------
  ------------------
 2944|  1.70k|            return unexpected(e);
 2945|  1.70k|        }
 2946|       |
 2947|   128k|        return it;
 2948|   130k|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|   130k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2104|   130k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|   130k|    else {
 2114|   130k|        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|   130k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|   130k|            return detail::is_cp_space(cp);
 2127|   130k|        });
 2128|   130k|    }
 2129|   130k|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2069|   130k|{
 2070|   130k|    return read_until_code_point(range, std::not_fn(pred));
 2071|   130k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2048|   130k|{
 2049|   130k|    auto it = range.begin();
 2050|   132k|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 130k, False: 1.70k]
  ------------------
 2051|   130k|        const auto val =
 2052|   130k|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|   130k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   130k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 130k, False: 0]
  |  |  ------------------
  ------------------
 2054|   130k|            const auto cp = detail::decode_code_point_exhaustive(
 2055|   130k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|   130k|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 128k, False: 2.41k]
  ------------------
 2057|   128k|                return it;
 2058|   128k|            }
 2059|   130k|        }
 2060|  2.41k|        it = val.iterator;
 2061|  2.41k|    }
 2062|       |
 2063|  1.70k|    return it;
 2064|   130k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|   130k|        : m_fptr([](storage fn,
  743|   130k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   130k|              cvref<T> obj = *get<T>(fn);
  745|   130k|              if constexpr (std::is_void_v<R>) {
  746|   130k|                  obj(static_cast<decltype(args)>(args)...);
  747|   130k|              }
  748|   130k|              else {
  749|   130k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   130k|              }
  751|   130k|          }),
  752|   130k|          m_storage(std::addressof(f))
  753|   130k|    {
  754|   130k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|   130k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   130k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   130k|              else {
  749|   130k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   130k|              }
  751|   130k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   130k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   130k|        else if constexpr (std::is_object_v<T>) {
  688|   130k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   130k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2125|   130k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|   130k|            return detail::is_cp_space(cp);
 2127|   130k|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|   130k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   130k|        {
  662|   130k|        }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  85.7k|    {
  304|  85.7k|        ranges::advance(x, n);
  305|  85.7k|        return x;
  306|  85.7k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  85.7k|    {
  268|  85.7k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  85.7k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  85.7k|    {
  181|   257k|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 172k, False: 85.7k]
  ------------------
  182|   172k|            ++i;
  183|   172k|        }
  184|  85.7k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6181|  17.3k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|  17.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|  17.3k|            auto rd = make_reader<T, char_type>();
 6195|  17.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.3k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|  17.3k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 17.3k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|  17.3k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|  17.3k|                return impl(rd, range, value);
 6202|  17.3k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  17.3k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3028|   208k|    {
 3029|   208k|        reader_error_handler eh{};
 3030|   208k|        get_derived().check_specs_impl(specs, eh);
 3031|   208k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|   208k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 208k]
  |  |  ------------------
  ------------------
 3032|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|      0|        }
 3034|   208k|        return {};
 3035|   208k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
 3039|   208k|    {
 3040|   208k|        return static_cast<Derived&>(*this);
 3041|   208k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3473|   208k|    {
 3474|   208k|        detail::check_int_type_specs(specs, eh);
 3475|   208k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|  17.3k|    {
 6113|  17.3k|        const bool need_skipped_width =
 6114|  17.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 17.3k]
  |  Branch (6114:33): [True: 0, False: 17.3k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  17.3k|        auto it = rng.begin();
 6118|  17.3k|        std::ptrdiff_t prefix_width = 0;
 6119|  17.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 17.3k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  17.3k|        else {
 6127|  17.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  17.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 256, False: 17.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    256|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    256|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    256|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    256|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    256|    }                                                  \
  |  |  |  | 3667|  17.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  17.0k|            std::tie(it, prefix_width) = prefix_result;
 6129|  17.0k|        }
 6130|  17.0k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  17.0k|        std::ptrdiff_t value_width = 0;
 6134|  17.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 17.0k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  17.0k|        else {
 6150|  17.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  17.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  17.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  17.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 16.6k, False: 376]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  16.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  16.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  16.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  16.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  16.6k|    }                                                  \
  |  | 3667|  17.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  17.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    376|                                             specs, value, loc));
 6152|       |
 6153|    376|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 376]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|    376|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    376|        std::ptrdiff_t postfix_width = 0;
 6162|    376|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 270, False: 106]
  ------------------
 6163|    270|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    270|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    270|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    270|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    270|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 270]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    270|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    270|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    270|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    270|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    270|                                 value_width));
 6167|    270|            std::tie(it, postfix_width) = postfix_result;
 6168|    270|        }
 6169|       |
 6170|    376|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    376|                                                 value_width, postfix_width);
 6172|    376|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 376]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|    376|        return it;
 6177|    376|    }
_ZNK3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
 3023|   264k|    {
 3024|   264k|        return true;
 3025|   264k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3527|  17.0k|    {
 3528|  17.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  17.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 17.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  17.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  17.0k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  17.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 218, False: 16.8k]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|    218|            else {
 3539|    218|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 218]
  ------------------
 3540|    218|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|    218|            }
 3546|    218|        }
 3547|       |
 3548|  17.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 42, False: 17.0k]
  ------------------
 3549|     42|            value = T{0};
 3550|     42|            return std::next(prefix_result.iterator);
 3551|     42|        }
 3552|       |
 3553|  17.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  17.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 14.1k, False: 2.84k]
  |  |  ------------------
  ------------------
 3554|  14.1k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  14.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 13.8k, False: 368]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  13.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  13.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  13.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  13.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  13.8k|    }                                                  \
  |  |  |  | 3667|  14.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    368|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|    368|                    parse_integer_digits_without_thsep(
 3556|    368|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|    368|                        prefix_result.parsed_base));
 3558|       |
 3559|    368|            auto buf = make_contiguous_buffer(
 3560|    368|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|    368|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    368|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    368|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    368|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    368|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 96, False: 272]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     96|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     96|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     96|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     96|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     96|    }                                                  \
  |  |  |  | 3667|    368|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    272|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|    272|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|    272|                                        prefix_result.parsed_base));
 3564|       |
 3565|    272|            return ranges::next(
 3566|    272|                prefix_result.iterator,
 3567|    272|                ranges::distance(buf.view().begin(), result_it));
 3568|    368|        }
 3569|       |
 3570|  2.84k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  2.84k|            localized_number_formatting_options<CharT>{loc};
 3575|  2.84k|#endif
 3576|       |
 3577|  2.84k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  2.84k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.84k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.84k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.73k, False: 106]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.73k|    }                                                  \
  |  |  |  | 3667|  2.84k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    106|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|    106|                parse_integer_digits_with_thsep(
 3579|    106|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|    106|                    prefix_result.parsed_base, locale_options));
 3581|    106|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|    106|            parse_digits_result;
 3583|       |
 3584|    106|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 16, False: 90]
  ------------------
 3585|     16|            if (auto e = check_thsep_grouping(
 3586|     16|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|     16|                    thsep_indices, locale_options.grouping);
 3588|     16|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16, False: 0]
  |  |  ------------------
  ------------------
 3589|     16|                return unexpected(e);
 3590|     16|            }
 3591|     16|        }
 3592|       |
 3593|     90|        auto nothsep_source_view =
 3594|     90|            std::basic_string_view<CharT>{nothsep_source};
 3595|     90|        SCN_TRY(
  ------------------
  |  | 3668|     90|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     90|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     90|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     90|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 28, False: 62]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     28|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     28|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     28|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     28|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     28|    }                                                  \
  |  |  |  | 3667|     90|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     62|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|     62|            nothsep_source_it,
 3597|     62|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|     62|                                prefix_result.parsed_base));
 3599|       |
 3600|     62|        return ranges::next(
 3601|     62|            prefix_result.iterator,
 3602|     62|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|     62|                ranges::ssize(thsep_indices));
 3604|     90|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|  17.0k|    {
 3528|  17.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  17.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 17.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  17.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  17.0k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  17.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 218, False: 16.8k]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|    218|            else {
 3539|    218|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 218]
  ------------------
 3540|    218|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|    218|            }
 3546|    218|        }
 3547|       |
 3548|  17.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 42, False: 17.0k]
  ------------------
 3549|     42|            value = T{0};
 3550|     42|            return std::next(prefix_result.iterator);
 3551|     42|        }
 3552|       |
 3553|  17.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  17.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 14.1k, False: 2.84k]
  |  |  ------------------
  ------------------
 3554|  14.1k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  14.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 30, False: 14.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     30|    }                                                  \
  |  |  |  | 3667|  14.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  14.1k|                    parse_integer_digits_without_thsep(
 3556|  14.1k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  14.1k|                        prefix_result.parsed_base));
 3558|       |
 3559|  14.1k|            auto buf = make_contiguous_buffer(
 3560|  14.1k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  14.1k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  14.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 13.8k, False: 272]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  13.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  13.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  13.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  13.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  13.8k|    }                                                  \
  |  |  |  | 3667|  14.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    272|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|    272|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|    272|                                        prefix_result.parsed_base));
 3564|       |
 3565|    272|            return ranges::next(
 3566|    272|                prefix_result.iterator,
 3567|    272|                ranges::distance(buf.view().begin(), result_it));
 3568|  14.1k|        }
 3569|       |
 3570|  2.84k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  2.84k|            localized_number_formatting_options<CharT>{loc};
 3575|  2.84k|#endif
 3576|       |
 3577|  2.84k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  2.84k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.84k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.84k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.73k, False: 106]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.73k|    }                                                  \
  |  |  |  | 3667|  2.84k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    106|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|    106|                parse_integer_digits_with_thsep(
 3579|    106|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|    106|                    prefix_result.parsed_base, locale_options));
 3581|    106|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|    106|            parse_digits_result;
 3583|       |
 3584|    106|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 16, False: 90]
  ------------------
 3585|     16|            if (auto e = check_thsep_grouping(
 3586|     16|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|     16|                    thsep_indices, locale_options.grouping);
 3588|     16|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16, False: 0]
  |  |  ------------------
  ------------------
 3589|     16|                return unexpected(e);
 3590|     16|            }
 3591|     16|        }
 3592|       |
 3593|     90|        auto nothsep_source_view =
 3594|     90|            std::basic_string_view<CharT>{nothsep_source};
 3595|     90|        SCN_TRY(
  ------------------
  |  | 3668|     90|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     90|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     90|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     90|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 28, False: 62]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     28|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     28|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     28|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     28|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     28|    }                                                  \
  |  |  |  | 3667|     90|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     62|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|     62|            nothsep_source_it,
 3597|     62|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|     62|                                prefix_result.parsed_base));
 3599|       |
 3600|     62|        return ranges::next(
 3601|     62|            prefix_result.iterator,
 3602|     62|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|     62|                ranges::ssize(thsep_indices));
 3604|     90|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6181|  17.4k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|  17.4k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|  17.4k|            auto rd = make_reader<T, char_type>();
 6195|  17.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  17.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.4k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|  17.4k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 17.4k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|  17.4k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|  17.4k|                return impl(rd, range, value);
 6202|  17.4k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  17.4k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|  17.4k|    {
 6113|  17.4k|        const bool need_skipped_width =
 6114|  17.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 17.4k]
  |  Branch (6114:33): [True: 0, False: 17.4k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  17.4k|        auto it = rng.begin();
 6118|  17.4k|        std::ptrdiff_t prefix_width = 0;
 6119|  17.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 17.4k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  17.4k|        else {
 6127|  17.4k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  17.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 268, False: 17.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    268|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    268|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    268|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    268|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    268|    }                                                  \
  |  |  |  | 3667|  17.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  17.1k|            std::tie(it, prefix_width) = prefix_result;
 6129|  17.1k|        }
 6130|  17.1k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  17.1k|        std::ptrdiff_t value_width = 0;
 6134|  17.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 17.1k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  17.1k|        else {
 6150|  17.1k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  17.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  17.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  17.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 16.6k, False: 462]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  16.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  16.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  16.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  16.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  16.6k|    }                                                  \
  |  | 3667|  17.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  17.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    462|                                             specs, value, loc));
 6152|       |
 6153|    462|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 462]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|    462|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    462|        std::ptrdiff_t postfix_width = 0;
 6162|    462|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 344, False: 118]
  ------------------
 6163|    344|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    344|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    344|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    344|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    344|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 344]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    344|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    344|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    344|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    344|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    344|                                 value_width));
 6167|    344|            std::tie(it, postfix_width) = postfix_result;
 6168|    344|        }
 6169|       |
 6170|    462|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    462|                                                 value_width, postfix_width);
 6172|    462|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 462]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|    462|        return it;
 6177|    462|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6181|  17.4k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|  17.4k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|  17.4k|            auto rd = make_reader<T, char_type>();
 6195|  17.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  17.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.4k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|  17.4k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 17.4k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|  17.4k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|  17.4k|                return impl(rd, range, value);
 6202|  17.4k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  17.4k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|  17.4k|    {
 6113|  17.4k|        const bool need_skipped_width =
 6114|  17.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 17.4k]
  |  Branch (6114:33): [True: 0, False: 17.4k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  17.4k|        auto it = rng.begin();
 6118|  17.4k|        std::ptrdiff_t prefix_width = 0;
 6119|  17.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 17.4k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  17.4k|        else {
 6127|  17.4k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  17.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 268, False: 17.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    268|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    268|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    268|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    268|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    268|    }                                                  \
  |  |  |  | 3667|  17.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  17.2k|            std::tie(it, prefix_width) = prefix_result;
 6129|  17.2k|        }
 6130|  17.2k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  17.2k|        std::ptrdiff_t value_width = 0;
 6134|  17.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 17.2k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  17.2k|        else {
 6150|  17.2k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  17.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  17.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  17.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 16.6k, False: 546]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  16.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  16.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  16.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  16.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  16.6k|    }                                                  \
  |  | 3667|  17.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  17.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    546|                                             specs, value, loc));
 6152|       |
 6153|    546|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 546]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|    546|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    546|        std::ptrdiff_t postfix_width = 0;
 6162|    546|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 428, False: 118]
  ------------------
 6163|    428|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    428|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    428|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    428|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    428|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 428]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    428|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    428|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    428|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    428|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    428|                                 value_width));
 6167|    428|            std::tie(it, postfix_width) = postfix_result;
 6168|    428|        }
 6169|       |
 6170|    546|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    546|                                                 value_width, postfix_width);
 6172|    546|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 546]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|    546|        return it;
 6177|    546|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3527|  17.2k|    {
 3528|  17.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  17.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 17.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  17.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  17.2k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  17.2k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 244, False: 16.9k]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|    244|            else {
 3539|    244|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 244]
  ------------------
 3540|    244|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|    244|            }
 3546|    244|        }
 3547|       |
 3548|  17.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 50, False: 17.1k]
  ------------------
 3549|     50|            value = T{0};
 3550|     50|            return std::next(prefix_result.iterator);
 3551|     50|        }
 3552|       |
 3553|  17.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  17.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 14.2k, False: 2.88k]
  |  |  ------------------
  ------------------
 3554|  14.2k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  14.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 13.8k, False: 402]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  13.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  13.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  13.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  13.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  13.8k|    }                                                  \
  |  |  |  | 3667|  14.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    402|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|    402|                    parse_integer_digits_without_thsep(
 3556|    402|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|    402|                        prefix_result.parsed_base));
 3558|       |
 3559|    402|            auto buf = make_contiguous_buffer(
 3560|    402|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|    402|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    402|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    402|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    402|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    402|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 392]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     10|    }                                                  \
  |  |  |  | 3667|    402|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    392|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|    392|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|    392|                                        prefix_result.parsed_base));
 3564|       |
 3565|    392|            return ranges::next(
 3566|    392|                prefix_result.iterator,
 3567|    392|                ranges::distance(buf.view().begin(), result_it));
 3568|    402|        }
 3569|       |
 3570|  2.88k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  2.88k|            localized_number_formatting_options<CharT>{loc};
 3575|  2.88k|#endif
 3576|       |
 3577|  2.88k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  2.88k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.88k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.88k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.76k, False: 120]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.76k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.76k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.76k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.76k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.76k|    }                                                  \
  |  |  |  | 3667|  2.88k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    120|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|    120|                parse_integer_digits_with_thsep(
 3579|    120|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|    120|                    prefix_result.parsed_base, locale_options));
 3581|    120|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|    120|            parse_digits_result;
 3583|       |
 3584|    120|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 16, False: 104]
  ------------------
 3585|     16|            if (auto e = check_thsep_grouping(
 3586|     16|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|     16|                    thsep_indices, locale_options.grouping);
 3588|     16|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16, False: 0]
  |  |  ------------------
  ------------------
 3589|     16|                return unexpected(e);
 3590|     16|            }
 3591|     16|        }
 3592|       |
 3593|    104|        auto nothsep_source_view =
 3594|    104|            std::basic_string_view<CharT>{nothsep_source};
 3595|    104|        SCN_TRY(
  ------------------
  |  | 3668|    104|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    104|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    104|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    104|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 104]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    104|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    104|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|    104|            nothsep_source_it,
 3597|    104|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|    104|                                prefix_result.parsed_base));
 3599|       |
 3600|    104|        return ranges::next(
 3601|    104|            prefix_result.iterator,
 3602|    104|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|    104|                ranges::ssize(thsep_indices));
 3604|    104|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|  17.2k|    {
 3528|  17.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  17.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 17.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  17.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  17.2k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  17.2k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 244, False: 16.9k]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|    244|            else {
 3539|    244|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 244]
  ------------------
 3540|    244|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|    244|            }
 3546|    244|        }
 3547|       |
 3548|  17.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 50, False: 17.1k]
  ------------------
 3549|     50|            value = T{0};
 3550|     50|            return std::next(prefix_result.iterator);
 3551|     50|        }
 3552|       |
 3553|  17.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  17.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 14.2k, False: 2.88k]
  |  |  ------------------
  ------------------
 3554|  14.2k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  14.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 30, False: 14.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     30|    }                                                  \
  |  |  |  | 3667|  14.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  14.2k|                    parse_integer_digits_without_thsep(
 3556|  14.2k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  14.2k|                        prefix_result.parsed_base));
 3558|       |
 3559|  14.2k|            auto buf = make_contiguous_buffer(
 3560|  14.2k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  14.2k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  14.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 13.8k, False: 392]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  13.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  13.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  13.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  13.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  13.8k|    }                                                  \
  |  |  |  | 3667|  14.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    392|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|    392|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|    392|                                        prefix_result.parsed_base));
 3564|       |
 3565|    392|            return ranges::next(
 3566|    392|                prefix_result.iterator,
 3567|    392|                ranges::distance(buf.view().begin(), result_it));
 3568|  14.2k|        }
 3569|       |
 3570|  2.88k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  2.88k|            localized_number_formatting_options<CharT>{loc};
 3575|  2.88k|#endif
 3576|       |
 3577|  2.88k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  2.88k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.88k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.88k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.76k, False: 120]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.76k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.76k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.76k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.76k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.76k|    }                                                  \
  |  |  |  | 3667|  2.88k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    120|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|    120|                parse_integer_digits_with_thsep(
 3579|    120|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|    120|                    prefix_result.parsed_base, locale_options));
 3581|    120|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|    120|            parse_digits_result;
 3583|       |
 3584|    120|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 16, False: 104]
  ------------------
 3585|     16|            if (auto e = check_thsep_grouping(
 3586|     16|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|     16|                    thsep_indices, locale_options.grouping);
 3588|     16|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16, False: 0]
  |  |  ------------------
  ------------------
 3589|     16|                return unexpected(e);
 3590|     16|            }
 3591|     16|        }
 3592|       |
 3593|    104|        auto nothsep_source_view =
 3594|    104|            std::basic_string_view<CharT>{nothsep_source};
 3595|    104|        SCN_TRY(
  ------------------
  |  | 3668|    104|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    104|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    104|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    104|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 104]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    104|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    104|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|    104|            nothsep_source_it,
 3597|    104|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|    104|                                prefix_result.parsed_base));
 3599|       |
 3600|    104|        return ranges::next(
 3601|    104|            prefix_result.iterator,
 3602|    104|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|    104|                ranges::ssize(thsep_indices));
 3604|    104|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6181|  17.2k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|  17.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|  17.2k|            auto rd = make_reader<T, char_type>();
 6195|  17.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  17.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.2k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|  17.2k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 17.2k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|  17.2k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|  17.2k|                return impl(rd, range, value);
 6202|  17.2k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  17.2k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|  17.2k|    {
 6113|  17.2k|        const bool need_skipped_width =
 6114|  17.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 17.2k]
  |  Branch (6114:33): [True: 0, False: 17.2k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  17.2k|        auto it = rng.begin();
 6118|  17.2k|        std::ptrdiff_t prefix_width = 0;
 6119|  17.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 17.2k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  17.2k|        else {
 6127|  17.2k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  17.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 232, False: 17.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    232|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    232|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    232|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    232|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    232|    }                                                  \
  |  |  |  | 3667|  17.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  17.0k|            std::tie(it, prefix_width) = prefix_result;
 6129|  17.0k|        }
 6130|  17.0k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  17.0k|        std::ptrdiff_t value_width = 0;
 6134|  17.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 17.0k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  17.0k|        else {
 6150|  17.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  17.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  17.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  17.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 16.7k, False: 324]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  16.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  16.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  16.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  16.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  16.7k|    }                                                  \
  |  | 3667|  17.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  17.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    324|                                             specs, value, loc));
 6152|       |
 6153|    324|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 324]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|    324|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    324|        std::ptrdiff_t postfix_width = 0;
 6162|    324|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 242, False: 82]
  ------------------
 6163|    242|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    242|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    242|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    242|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    242|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 242]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    242|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    242|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    242|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    242|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    242|                                 value_width));
 6167|    242|            std::tie(it, postfix_width) = postfix_result;
 6168|    242|        }
 6169|       |
 6170|    324|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    324|                                                 value_width, postfix_width);
 6172|    324|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 324]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|    324|        return it;
 6177|    324|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3527|  17.0k|    {
 3528|  17.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  17.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 17.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  17.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  17.0k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  17.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 212, False: 16.8k]
  ------------------
 3532|    212|            if constexpr (!std::is_signed_v<T>) {
 3533|    212|                return unexpected_scan_error(
 3534|    212|                    scan_error::invalid_scanned_value,
 3535|    212|                    "Unexpected '-' sign when parsing an "
 3536|    212|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|    212|        }
 3547|       |
 3548|  17.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 40, False: 16.9k]
  ------------------
 3549|     40|            value = T{0};
 3550|     40|            return std::next(prefix_result.iterator);
 3551|     40|        }
 3552|       |
 3553|  16.9k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  16.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 13.9k, False: 3.01k]
  |  |  ------------------
  ------------------
 3554|  13.9k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  13.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  13.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  13.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  13.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 13.6k, False: 306]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  13.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  13.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  13.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  13.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  13.6k|    }                                                  \
  |  |  |  | 3667|  13.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    306|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|    306|                    parse_integer_digits_without_thsep(
 3556|    306|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|    306|                        prefix_result.parsed_base));
 3558|       |
 3559|    306|            auto buf = make_contiguous_buffer(
 3560|    306|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|    306|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    306|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    306|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    306|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    306|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 70, False: 236]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     70|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     70|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     70|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     70|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     70|    }                                                  \
  |  |  |  | 3667|    306|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    236|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|    236|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|    236|                                        prefix_result.parsed_base));
 3564|       |
 3565|    236|            return ranges::next(
 3566|    236|                prefix_result.iterator,
 3567|    236|                ranges::distance(buf.view().begin(), result_it));
 3568|    306|        }
 3569|       |
 3570|  3.01k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  3.01k|            localized_number_formatting_options<CharT>{loc};
 3575|  3.01k|#endif
 3576|       |
 3577|  3.01k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  3.01k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.01k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.01k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.01k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.71k, False: 296]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.71k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.71k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.71k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.71k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.71k|    }                                                  \
  |  |  |  | 3667|  3.01k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    296|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|    296|                parse_integer_digits_with_thsep(
 3579|    296|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|    296|                    prefix_result.parsed_base, locale_options));
 3581|    296|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|    296|            parse_digits_result;
 3583|       |
 3584|    296|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 14, False: 282]
  ------------------
 3585|     14|            if (auto e = check_thsep_grouping(
 3586|     14|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|     14|                    thsep_indices, locale_options.grouping);
 3588|     14|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14, False: 0]
  |  |  ------------------
  ------------------
 3589|     14|                return unexpected(e);
 3590|     14|            }
 3591|     14|        }
 3592|       |
 3593|    282|        auto nothsep_source_view =
 3594|    282|            std::basic_string_view<CharT>{nothsep_source};
 3595|    282|        SCN_TRY(
  ------------------
  |  | 3668|    282|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    282|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    282|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    282|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 22, False: 260]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     22|    }                                                  \
  |  |  |  | 3667|    282|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    260|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|    260|            nothsep_source_it,
 3597|    260|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|    260|                                prefix_result.parsed_base));
 3599|       |
 3600|    260|        return ranges::next(
 3601|    260|            prefix_result.iterator,
 3602|    260|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|    260|                ranges::ssize(thsep_indices));
 3604|    282|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|  17.0k|    {
 3528|  17.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  17.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 17.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  17.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  17.0k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  17.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 212, False: 16.8k]
  ------------------
 3532|    212|            if constexpr (!std::is_signed_v<T>) {
 3533|    212|                return unexpected_scan_error(
 3534|    212|                    scan_error::invalid_scanned_value,
 3535|    212|                    "Unexpected '-' sign when parsing an "
 3536|    212|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|    212|        }
 3547|       |
 3548|  17.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 40, False: 16.9k]
  ------------------
 3549|     40|            value = T{0};
 3550|     40|            return std::next(prefix_result.iterator);
 3551|     40|        }
 3552|       |
 3553|  16.9k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  16.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 13.9k, False: 3.01k]
  |  |  ------------------
  ------------------
 3554|  13.9k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  13.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  13.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  13.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  13.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 13.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     10|    }                                                  \
  |  |  |  | 3667|  13.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  13.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  13.9k|                    parse_integer_digits_without_thsep(
 3556|  13.9k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  13.9k|                        prefix_result.parsed_base));
 3558|       |
 3559|  13.9k|            auto buf = make_contiguous_buffer(
 3560|  13.9k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  13.9k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  13.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  13.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  13.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  13.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 13.7k, False: 236]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  13.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  13.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  13.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  13.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  13.7k|    }                                                  \
  |  |  |  | 3667|  13.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    236|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|    236|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|    236|                                        prefix_result.parsed_base));
 3564|       |
 3565|    236|            return ranges::next(
 3566|    236|                prefix_result.iterator,
 3567|    236|                ranges::distance(buf.view().begin(), result_it));
 3568|  13.9k|        }
 3569|       |
 3570|  3.01k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  3.01k|            localized_number_formatting_options<CharT>{loc};
 3575|  3.01k|#endif
 3576|       |
 3577|  3.01k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  3.01k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.01k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.01k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.01k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.71k, False: 296]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.71k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.71k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.71k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.71k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.71k|    }                                                  \
  |  |  |  | 3667|  3.01k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    296|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|    296|                parse_integer_digits_with_thsep(
 3579|    296|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|    296|                    prefix_result.parsed_base, locale_options));
 3581|    296|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|    296|            parse_digits_result;
 3583|       |
 3584|    296|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 14, False: 282]
  ------------------
 3585|     14|            if (auto e = check_thsep_grouping(
 3586|     14|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|     14|                    thsep_indices, locale_options.grouping);
 3588|     14|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14, False: 0]
  |  |  ------------------
  ------------------
 3589|     14|                return unexpected(e);
 3590|     14|            }
 3591|     14|        }
 3592|       |
 3593|    282|        auto nothsep_source_view =
 3594|    282|            std::basic_string_view<CharT>{nothsep_source};
 3595|    282|        SCN_TRY(
  ------------------
  |  | 3668|    282|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    282|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    282|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    282|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 22, False: 260]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     22|    }                                                  \
  |  |  |  | 3667|    282|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    260|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|    260|            nothsep_source_it,
 3597|    260|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|    260|                                prefix_result.parsed_base));
 3599|       |
 3600|    260|        return ranges::next(
 3601|    260|            prefix_result.iterator,
 3602|    260|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|    260|                ranges::ssize(thsep_indices));
 3604|    282|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6181|  17.3k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|  17.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|  17.3k|            auto rd = make_reader<T, char_type>();
 6195|  17.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.3k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|  17.3k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 17.3k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|  17.3k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|  17.3k|                return impl(rd, range, value);
 6202|  17.3k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  17.3k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|  17.3k|    {
 6113|  17.3k|        const bool need_skipped_width =
 6114|  17.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 17.3k]
  |  Branch (6114:33): [True: 0, False: 17.3k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  17.3k|        auto it = rng.begin();
 6118|  17.3k|        std::ptrdiff_t prefix_width = 0;
 6119|  17.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 17.3k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  17.3k|        else {
 6127|  17.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  17.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 232, False: 17.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    232|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    232|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    232|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    232|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    232|    }                                                  \
  |  |  |  | 3667|  17.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  17.0k|            std::tie(it, prefix_width) = prefix_result;
 6129|  17.0k|        }
 6130|  17.0k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  17.0k|        std::ptrdiff_t value_width = 0;
 6134|  17.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 17.0k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  17.0k|        else {
 6150|  17.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  17.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  17.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  17.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 16.7k, False: 370]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  16.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  16.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  16.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  16.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  16.7k|    }                                                  \
  |  | 3667|  17.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  17.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    370|                                             specs, value, loc));
 6152|       |
 6153|    370|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 370]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|    370|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    370|        std::ptrdiff_t postfix_width = 0;
 6162|    370|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 288, False: 82]
  ------------------
 6163|    288|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    288|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    288|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    288|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    288|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 288]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    288|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    288|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    288|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    288|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    288|                                 value_width));
 6167|    288|            std::tie(it, postfix_width) = postfix_result;
 6168|    288|        }
 6169|       |
 6170|    370|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    370|                                                 value_width, postfix_width);
 6172|    370|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 370]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|    370|        return it;
 6177|    370|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3527|  17.0k|    {
 3528|  17.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  17.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 17.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  17.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  17.0k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  17.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 212, False: 16.8k]
  ------------------
 3532|    212|            if constexpr (!std::is_signed_v<T>) {
 3533|    212|                return unexpected_scan_error(
 3534|    212|                    scan_error::invalid_scanned_value,
 3535|    212|                    "Unexpected '-' sign when parsing an "
 3536|    212|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|    212|        }
 3547|       |
 3548|  17.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 40, False: 17.0k]
  ------------------
 3549|     40|            value = T{0};
 3550|     40|            return std::next(prefix_result.iterator);
 3551|     40|        }
 3552|       |
 3553|  17.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  17.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 14.0k, False: 3.02k]
  |  |  ------------------
  ------------------
 3554|  14.0k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  14.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 13.7k, False: 312]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  13.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  13.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  13.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  13.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  13.7k|    }                                                  \
  |  |  |  | 3667|  14.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    312|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|    312|                    parse_integer_digits_without_thsep(
 3556|    312|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|    312|                        prefix_result.parsed_base));
 3558|       |
 3559|    312|            auto buf = make_contiguous_buffer(
 3560|    312|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|    312|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    312|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    312|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    312|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    312|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 42, False: 270]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     42|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     42|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     42|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     42|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     42|    }                                                  \
  |  |  |  | 3667|    312|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    270|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|    270|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|    270|                                        prefix_result.parsed_base));
 3564|       |
 3565|    270|            return ranges::next(
 3566|    270|                prefix_result.iterator,
 3567|    270|                ranges::distance(buf.view().begin(), result_it));
 3568|    312|        }
 3569|       |
 3570|  3.02k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  3.02k|            localized_number_formatting_options<CharT>{loc};
 3575|  3.02k|#endif
 3576|       |
 3577|  3.02k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  3.02k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.02k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.02k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.72k, False: 298]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.72k|    }                                                  \
  |  |  |  | 3667|  3.02k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    298|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|    298|                parse_integer_digits_with_thsep(
 3579|    298|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|    298|                    prefix_result.parsed_base, locale_options));
 3581|    298|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|    298|            parse_digits_result;
 3583|       |
 3584|    298|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 14, False: 284]
  ------------------
 3585|     14|            if (auto e = check_thsep_grouping(
 3586|     14|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|     14|                    thsep_indices, locale_options.grouping);
 3588|     14|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14, False: 0]
  |  |  ------------------
  ------------------
 3589|     14|                return unexpected(e);
 3590|     14|            }
 3591|     14|        }
 3592|       |
 3593|    284|        auto nothsep_source_view =
 3594|    284|            std::basic_string_view<CharT>{nothsep_source};
 3595|    284|        SCN_TRY(
  ------------------
  |  | 3668|    284|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    284|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    284|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    284|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 272]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     12|    }                                                  \
  |  |  |  | 3667|    284|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    272|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|    272|            nothsep_source_it,
 3597|    272|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|    272|                                prefix_result.parsed_base));
 3599|       |
 3600|    272|        return ranges::next(
 3601|    272|            prefix_result.iterator,
 3602|    272|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|    272|                ranges::ssize(thsep_indices));
 3604|    284|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|  17.0k|    {
 3528|  17.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  17.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 17.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  17.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  17.0k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  17.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 212, False: 16.8k]
  ------------------
 3532|    212|            if constexpr (!std::is_signed_v<T>) {
 3533|    212|                return unexpected_scan_error(
 3534|    212|                    scan_error::invalid_scanned_value,
 3535|    212|                    "Unexpected '-' sign when parsing an "
 3536|    212|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|    212|        }
 3547|       |
 3548|  17.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 40, False: 17.0k]
  ------------------
 3549|     40|            value = T{0};
 3550|     40|            return std::next(prefix_result.iterator);
 3551|     40|        }
 3552|       |
 3553|  17.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  17.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 14.0k, False: 3.02k]
  |  |  ------------------
  ------------------
 3554|  14.0k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  14.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 14.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     10|    }                                                  \
  |  |  |  | 3667|  14.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  14.0k|                    parse_integer_digits_without_thsep(
 3556|  14.0k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  14.0k|                        prefix_result.parsed_base));
 3558|       |
 3559|  14.0k|            auto buf = make_contiguous_buffer(
 3560|  14.0k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  14.0k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  14.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 13.7k, False: 270]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  13.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  13.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  13.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  13.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  13.7k|    }                                                  \
  |  |  |  | 3667|  14.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    270|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|    270|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|    270|                                        prefix_result.parsed_base));
 3564|       |
 3565|    270|            return ranges::next(
 3566|    270|                prefix_result.iterator,
 3567|    270|                ranges::distance(buf.view().begin(), result_it));
 3568|  14.0k|        }
 3569|       |
 3570|  3.02k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  3.02k|            localized_number_formatting_options<CharT>{loc};
 3575|  3.02k|#endif
 3576|       |
 3577|  3.02k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  3.02k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.02k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.02k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.72k, False: 298]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.72k|    }                                                  \
  |  |  |  | 3667|  3.02k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    298|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|    298|                parse_integer_digits_with_thsep(
 3579|    298|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|    298|                    prefix_result.parsed_base, locale_options));
 3581|    298|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|    298|            parse_digits_result;
 3583|       |
 3584|    298|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 14, False: 284]
  ------------------
 3585|     14|            if (auto e = check_thsep_grouping(
 3586|     14|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|     14|                    thsep_indices, locale_options.grouping);
 3588|     14|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14, False: 0]
  |  |  ------------------
  ------------------
 3589|     14|                return unexpected(e);
 3590|     14|            }
 3591|     14|        }
 3592|       |
 3593|    284|        auto nothsep_source_view =
 3594|    284|            std::basic_string_view<CharT>{nothsep_source};
 3595|    284|        SCN_TRY(
  ------------------
  |  | 3668|    284|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    284|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    284|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    284|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 272]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     12|    }                                                  \
  |  |  |  | 3667|    284|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    272|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|    272|            nothsep_source_it,
 3597|    272|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|    272|                                prefix_result.parsed_base));
 3599|       |
 3600|    272|        return ranges::next(
 3601|    272|            prefix_result.iterator,
 3602|    272|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|    272|                ranges::ssize(thsep_indices));
 3604|    284|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6181|  17.3k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|  17.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|  17.3k|            auto rd = make_reader<T, char_type>();
 6195|  17.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.3k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|  17.3k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 17.3k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|  17.3k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|  17.3k|                return impl(rd, range, value);
 6202|  17.3k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  17.3k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|  17.3k|    {
 6113|  17.3k|        const bool need_skipped_width =
 6114|  17.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 17.3k]
  |  Branch (6114:33): [True: 0, False: 17.3k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  17.3k|        auto it = rng.begin();
 6118|  17.3k|        std::ptrdiff_t prefix_width = 0;
 6119|  17.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 17.3k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  17.3k|        else {
 6127|  17.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  17.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 232, False: 17.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    232|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    232|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    232|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    232|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    232|    }                                                  \
  |  |  |  | 3667|  17.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  17.1k|            std::tie(it, prefix_width) = prefix_result;
 6129|  17.1k|        }
 6130|  17.1k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  17.1k|        std::ptrdiff_t value_width = 0;
 6134|  17.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 17.1k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  17.1k|        else {
 6150|  17.1k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  17.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  17.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  17.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 16.7k, False: 436]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  16.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  16.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  16.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  16.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  16.7k|    }                                                  \
  |  | 3667|  17.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  17.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    436|                                             specs, value, loc));
 6152|       |
 6153|    436|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 436]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|    436|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    436|        std::ptrdiff_t postfix_width = 0;
 6162|    436|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 354, False: 82]
  ------------------
 6163|    354|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    354|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    354|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    354|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    354|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 354]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    354|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    354|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    354|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    354|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    354|                                 value_width));
 6167|    354|            std::tie(it, postfix_width) = postfix_result;
 6168|    354|        }
 6169|       |
 6170|    436|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    436|                                                 value_width, postfix_width);
 6172|    436|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 436]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|    436|        return it;
 6177|    436|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3527|  17.1k|    {
 3528|  17.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  17.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 17.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  17.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  17.1k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  17.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 228, False: 16.9k]
  ------------------
 3532|    228|            if constexpr (!std::is_signed_v<T>) {
 3533|    228|                return unexpected_scan_error(
 3534|    228|                    scan_error::invalid_scanned_value,
 3535|    228|                    "Unexpected '-' sign when parsing an "
 3536|    228|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|    228|        }
 3547|       |
 3548|  17.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 40, False: 17.1k]
  ------------------
 3549|     40|            value = T{0};
 3550|     40|            return std::next(prefix_result.iterator);
 3551|     40|        }
 3552|       |
 3553|  17.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  17.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 14.0k, False: 3.05k]
  |  |  ------------------
  ------------------
 3554|  14.0k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  14.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 13.7k, False: 324]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  13.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  13.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  13.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  13.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  13.7k|    }                                                  \
  |  |  |  | 3667|  14.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    324|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|    324|                    parse_integer_digits_without_thsep(
 3556|    324|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|    324|                        prefix_result.parsed_base));
 3558|       |
 3559|    324|            auto buf = make_contiguous_buffer(
 3560|    324|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|    324|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    324|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    324|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    324|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    324|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4, False: 320]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      4|    }                                                  \
  |  |  |  | 3667|    324|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    320|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|    320|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|    320|                                        prefix_result.parsed_base));
 3564|       |
 3565|    320|            return ranges::next(
 3566|    320|                prefix_result.iterator,
 3567|    320|                ranges::distance(buf.view().begin(), result_it));
 3568|    324|        }
 3569|       |
 3570|  3.05k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  3.05k|            localized_number_formatting_options<CharT>{loc};
 3575|  3.05k|#endif
 3576|       |
 3577|  3.05k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  3.05k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.05k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.05k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.73k, False: 318]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.73k|    }                                                  \
  |  |  |  | 3667|  3.05k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    318|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|    318|                parse_integer_digits_with_thsep(
 3579|    318|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|    318|                    prefix_result.parsed_base, locale_options));
 3581|    318|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|    318|            parse_digits_result;
 3583|       |
 3584|    318|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 14, False: 304]
  ------------------
 3585|     14|            if (auto e = check_thsep_grouping(
 3586|     14|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|     14|                    thsep_indices, locale_options.grouping);
 3588|     14|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14, False: 0]
  |  |  ------------------
  ------------------
 3589|     14|                return unexpected(e);
 3590|     14|            }
 3591|     14|        }
 3592|       |
 3593|    304|        auto nothsep_source_view =
 3594|    304|            std::basic_string_view<CharT>{nothsep_source};
 3595|    304|        SCN_TRY(
  ------------------
  |  | 3668|    304|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    304|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    304|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    304|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 304]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    304|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    304|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|    304|            nothsep_source_it,
 3597|    304|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|    304|                                prefix_result.parsed_base));
 3599|       |
 3600|    304|        return ranges::next(
 3601|    304|            prefix_result.iterator,
 3602|    304|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|    304|                ranges::ssize(thsep_indices));
 3604|    304|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|  17.1k|    {
 3528|  17.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  17.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 17.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  17.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  17.1k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  17.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 228, False: 16.9k]
  ------------------
 3532|    228|            if constexpr (!std::is_signed_v<T>) {
 3533|    228|                return unexpected_scan_error(
 3534|    228|                    scan_error::invalid_scanned_value,
 3535|    228|                    "Unexpected '-' sign when parsing an "
 3536|    228|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|    228|        }
 3547|       |
 3548|  17.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 40, False: 17.1k]
  ------------------
 3549|     40|            value = T{0};
 3550|     40|            return std::next(prefix_result.iterator);
 3551|     40|        }
 3552|       |
 3553|  17.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  17.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 14.0k, False: 3.05k]
  |  |  ------------------
  ------------------
 3554|  14.0k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  14.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 14.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     10|    }                                                  \
  |  |  |  | 3667|  14.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  14.0k|                    parse_integer_digits_without_thsep(
 3556|  14.0k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  14.0k|                        prefix_result.parsed_base));
 3558|       |
 3559|  14.0k|            auto buf = make_contiguous_buffer(
 3560|  14.0k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  14.0k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  14.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 13.7k, False: 320]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  13.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  13.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  13.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  13.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  13.7k|    }                                                  \
  |  |  |  | 3667|  14.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    320|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|    320|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|    320|                                        prefix_result.parsed_base));
 3564|       |
 3565|    320|            return ranges::next(
 3566|    320|                prefix_result.iterator,
 3567|    320|                ranges::distance(buf.view().begin(), result_it));
 3568|  14.0k|        }
 3569|       |
 3570|  3.05k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  3.05k|            localized_number_formatting_options<CharT>{loc};
 3575|  3.05k|#endif
 3576|       |
 3577|  3.05k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  3.05k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.05k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.05k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.73k, False: 318]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.73k|    }                                                  \
  |  |  |  | 3667|  3.05k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    318|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|    318|                parse_integer_digits_with_thsep(
 3579|    318|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|    318|                    prefix_result.parsed_base, locale_options));
 3581|    318|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|    318|            parse_digits_result;
 3583|       |
 3584|    318|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 14, False: 304]
  ------------------
 3585|     14|            if (auto e = check_thsep_grouping(
 3586|     14|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|     14|                    thsep_indices, locale_options.grouping);
 3588|     14|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14, False: 0]
  |  |  ------------------
  ------------------
 3589|     14|                return unexpected(e);
 3590|     14|            }
 3591|     14|        }
 3592|       |
 3593|    304|        auto nothsep_source_view =
 3594|    304|            std::basic_string_view<CharT>{nothsep_source};
 3595|    304|        SCN_TRY(
  ------------------
  |  | 3668|    304|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    304|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    304|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    304|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 304]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    304|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    304|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|    304|            nothsep_source_it,
 3597|    304|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|    304|                                prefix_result.parsed_base));
 3599|       |
 3600|    304|        return ranges::next(
 3601|    304|            prefix_result.iterator,
 3602|    304|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|    304|                ranges::ssize(thsep_indices));
 3604|    304|    }
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2048|   130k|{
 2049|   130k|    auto it = range.begin();
 2050|   132k|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 130k, False: 1.70k]
  ------------------
 2051|   130k|        const auto val =
 2052|   130k|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|   130k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   130k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 130k, False: 0]
  |  |  ------------------
  ------------------
 2054|   130k|            const auto cp = detail::decode_code_point_exhaustive(
 2055|   130k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|   130k|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 128k, False: 2.41k]
  ------------------
 2057|   128k|                return it;
 2058|   128k|            }
 2059|   130k|        }
 2060|  2.41k|        it = val.iterator;
 2061|  2.41k|    }
 2062|       |
 2063|  1.70k|    return it;
 2064|   130k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1886|   130k|{
 1887|   130k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   130k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   130k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|   130k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|   130k|    auto it = range.begin();
 1891|   130k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|   130k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 130k]
  |  |  ------------------
  ------------------
 1894|      0|        ++it;
 1895|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|      0|        return {it, {}};
 1897|      0|    }
 1898|       |
 1899|   130k|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 130k, False: 0]
  ------------------
 1900|   130k|        ++it;
 1901|   130k|        return {it, string_type(1, *range.begin())};
 1902|   130k|    }
 1903|       |
 1904|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|      0|    return {it, string_type{range.begin(), it}};
 1906|   130k|}
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1877|   130k|    {
 1878|   130k|        return !codepoint.empty();
 1879|   130k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2069|   130k|{
 2070|   130k|    return read_until_code_point(range, std::not_fn(pred));
 2071|   130k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2939|   130k|{
 2940|   130k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 130k, False: 0]
  ------------------
 2941|   130k|        auto it = read_while_classic_space(range);
 2942|   130k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|   130k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.70k, False: 128k]
  |  |  ------------------
  ------------------
 2944|  1.70k|            return unexpected(e);
 2945|  1.70k|        }
 2946|       |
 2947|   128k|        return it;
 2948|   130k|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|   130k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2104|   130k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|   130k|    else {
 2114|   130k|        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|   130k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|   130k|            return detail::is_cp_space(cp);
 2127|   130k|        });
 2128|   130k|    }
 2129|   130k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   130k|        : m_fptr([](storage fn,
  743|   130k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   130k|              cvref<T> obj = *get<T>(fn);
  745|   130k|              if constexpr (std::is_void_v<R>) {
  746|   130k|                  obj(static_cast<decltype(args)>(args)...);
  747|   130k|              }
  748|   130k|              else {
  749|   130k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   130k|              }
  751|   130k|          }),
  752|   130k|          m_storage(std::addressof(f))
  753|   130k|    {
  754|   130k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   130k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   130k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   130k|              else {
  749|   130k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   130k|              }
  751|   130k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   130k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   130k|        else if constexpr (std::is_object_v<T>) {
  688|   130k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   130k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2125|   130k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|   130k|            return detail::is_cp_space(cp);
 2127|   130k|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   130k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   130k|        {
  662|   130k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIaEENS0_13scan_expectedIPKcEERT_:
 5859|  16.1k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  16.1k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  16.1k|            auto rd = make_reader<T, char_type>();
 5865|  16.1k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  16.1k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEaEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  16.1k|    {
 5852|  16.1k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  16.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  16.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  16.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  16.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 399, False: 15.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    399|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    399|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    399|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    399|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    399|    }                                                  \
  |  |  |  | 3667|  16.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  15.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  15.7k|                        .transform_error(make_eof_scan_error));
 5854|  15.7k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  16.1k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5783|  97.0k|{
 5784|  97.0k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  97.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.89k, False: 95.1k]
  |  |  ------------------
  ------------------
 5785|  1.89k|        return unexpected(e);
 5786|  1.89k|    }
 5787|       |
 5788|  95.1k|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 0, False: 95.1k]
  ------------------
 5789|      0|        return range.begin();
 5790|      0|    }
 5791|       |
 5792|  95.1k|    return skip_classic_whitespace(range);
 5793|  95.1k|}
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|  15.7k|    {
 3517|  15.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  15.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  15.7k|        return read_default_with_base(range, value, 10);
 3519|  15.7k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
 5859|  18.6k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  18.6k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  18.6k|            auto rd = make_reader<T, char_type>();
 5865|  18.6k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  18.6k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  18.6k|    {
 5852|  18.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  18.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  18.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  18.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  18.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 516, False: 18.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    516|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    516|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    516|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    516|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    516|    }                                                  \
  |  |  |  | 3667|  18.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  18.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  18.1k|                        .transform_error(make_eof_scan_error));
 5854|  18.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  18.6k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|  18.1k|    {
 3517|  18.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  18.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  18.1k|        return read_default_with_base(range, value, 10);
 3519|  18.1k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIxEENS0_13scan_expectedIPKcEERT_:
 5859|  18.9k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  18.9k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  18.9k|            auto rd = make_reader<T, char_type>();
 5865|  18.9k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  18.9k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EExEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  18.9k|    {
 5852|  18.9k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  18.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  18.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  18.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  18.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 564, False: 18.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    564|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    564|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    564|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    564|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    564|    }                                                  \
  |  |  |  | 3667|  18.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  18.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  18.4k|                        .transform_error(make_eof_scan_error));
 5854|  18.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  18.9k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|  18.4k|    {
 3517|  18.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  18.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  18.4k|        return read_default_with_base(range, value, 10);
 3519|  18.4k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIhEENS0_13scan_expectedIPKcEERT_:
 5859|  13.4k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  13.4k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  13.4k|            auto rd = make_reader<T, char_type>();
 5865|  13.4k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  13.4k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEhEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  13.4k|    {
 5852|  13.4k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  13.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  13.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  13.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  13.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 279, False: 13.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    279|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    279|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    279|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    279|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    279|    }                                                  \
  |  |  |  | 3667|  13.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  13.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  13.2k|                        .transform_error(make_eof_scan_error));
 5854|  13.2k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  13.4k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|  13.2k|    {
 3517|  13.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  13.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  13.2k|        return read_default_with_base(range, value, 10);
 3519|  13.2k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
 5859|  14.8k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  14.8k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  14.8k|            auto rd = make_reader<T, char_type>();
 5865|  14.8k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  14.8k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  14.8k|    {
 5852|  14.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  14.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 345, False: 14.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    345|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    345|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    345|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    345|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    345|    }                                                  \
  |  |  |  | 3667|  14.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  14.4k|                        .transform_error(make_eof_scan_error));
 5854|  14.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  14.8k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|  14.4k|    {
 3517|  14.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  14.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  14.4k|        return read_default_with_base(range, value, 10);
 3519|  14.4k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIyEENS0_13scan_expectedIPKcEERT_:
 5859|  15.0k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  15.0k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  15.0k|            auto rd = make_reader<T, char_type>();
 5865|  15.0k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  15.0k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEyEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  15.0k|    {
 5852|  15.0k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  15.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  15.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  15.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  15.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 372, False: 14.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    372|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    372|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    372|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    372|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    372|    }                                                  \
  |  |  |  | 3667|  15.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  14.6k|                        .transform_error(make_eof_scan_error));
 5854|  14.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  15.0k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|  14.6k|    {
 3517|  14.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  14.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  14.6k|        return read_default_with_base(range, value, 10);
 3519|  14.6k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5859|  16.1k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  16.1k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  16.1k|            auto rd = make_reader<T, char_type>();
 5869|  16.1k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 16.1k, False: 0]
  ------------------
 5870|  16.1k|                return impl(rd, range, value);
 5871|  16.1k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  16.1k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  16.1k|    {
 5852|  16.1k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  16.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  16.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  16.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  16.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 381, False: 15.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    381|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    381|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    381|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    381|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    381|    }                                                  \
  |  |  |  | 3667|  16.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  15.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  15.7k|                        .transform_error(make_eof_scan_error));
 5854|  15.7k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  16.1k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5783|  95.6k|{
 5784|  95.6k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  95.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.89k, False: 93.7k]
  |  |  ------------------
  ------------------
 5785|  1.89k|        return unexpected(e);
 5786|  1.89k|    }
 5787|       |
 5788|  93.7k|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 0, False: 93.7k]
  ------------------
 5789|      0|        return range.begin();
 5790|      0|    }
 5791|       |
 5792|  93.7k|    return skip_classic_whitespace(range);
 5793|  93.7k|}
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3516|  15.7k|    {
 3517|  15.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  15.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  15.7k|        return read_default_with_base(range, value, 10);
 3519|  15.7k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3480|  15.7k|    {
 3481|  15.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  15.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  15.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  15.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  15.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 15.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  15.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  15.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  15.7k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|       |        if constexpr (!std::is_signed_v<T>) {
 3485|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3486|       |                return unexpected_scan_error(
 3487|       |                    scan_error::invalid_scanned_value,
 3488|       |                    "Unexpected '-' sign when parsing an "
 3489|       |                    "unsigned value");
 3490|       |            }
 3491|       |        }
 3492|       |
 3493|  15.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 15.7k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  30.3k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  15.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  15.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  15.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  15.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.15k, False: 14.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.15k|    }                                                  \
  |  |  |  | 3667|  15.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  30.3k|                parse_integer_digits_without_thsep(
 3500|  30.3k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  30.3k|                    prefix_result.parsed_base));
 3502|       |
 3503|  30.3k|        auto buf = make_contiguous_buffer(
 3504|  30.3k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  30.3k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  14.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 582, False: 14.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    582|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    582|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    582|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    582|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    582|    }                                                  \
  |  |  |  | 3667|  14.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|  14.0k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|  14.0k|                                    prefix_result.parsed_base));
 3508|       |
 3509|  14.0k|        return ranges::next(prefix_result.iterator,
 3510|  14.0k|                            ranges::distance(buf.view().begin(), result_it));
 3511|  30.3k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5859|  18.0k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  18.0k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  18.0k|            auto rd = make_reader<T, char_type>();
 5869|  18.0k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 18.0k, False: 0]
  ------------------
 5870|  18.0k|                return impl(rd, range, value);
 5871|  18.0k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  18.0k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  18.0k|    {
 5852|  18.0k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 489, False: 17.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    489|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    489|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    489|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    489|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    489|    }                                                  \
  |  |  |  | 3667|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  17.5k|                        .transform_error(make_eof_scan_error));
 5854|  17.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  18.0k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3516|  17.5k|    {
 3517|  17.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  17.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  17.5k|        return read_default_with_base(range, value, 10);
 3519|  17.5k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3480|  17.5k|    {
 3481|  17.5k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  17.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 17.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  17.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  17.5k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|       |        if constexpr (!std::is_signed_v<T>) {
 3485|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3486|       |                return unexpected_scan_error(
 3487|       |                    scan_error::invalid_scanned_value,
 3488|       |                    "Unexpected '-' sign when parsing an "
 3489|       |                    "unsigned value");
 3490|       |            }
 3491|       |        }
 3492|       |
 3493|  17.5k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 17.5k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  33.7k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  17.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.33k, False: 16.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.33k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.33k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.33k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.33k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.33k|    }                                                  \
  |  |  |  | 3667|  17.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  16.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  33.7k|                parse_integer_digits_without_thsep(
 3500|  33.7k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  33.7k|                    prefix_result.parsed_base));
 3502|       |
 3503|  33.7k|        auto buf = make_contiguous_buffer(
 3504|  33.7k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  33.7k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  16.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  16.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  16.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  16.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 291, False: 15.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    291|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    291|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    291|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    291|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    291|    }                                                  \
  |  |  |  | 3667|  16.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  15.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|  15.9k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|  15.9k|                                    prefix_result.parsed_base));
 3508|       |
 3509|  15.9k|        return ranges::next(prefix_result.iterator,
 3510|  15.9k|                            ranges::distance(buf.view().begin(), result_it));
 3511|  33.7k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5859|  18.3k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  18.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  18.3k|            auto rd = make_reader<T, char_type>();
 5869|  18.3k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 18.3k, False: 0]
  ------------------
 5870|  18.3k|                return impl(rd, range, value);
 5871|  18.3k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  18.3k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  18.3k|    {
 5852|  18.3k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  18.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  18.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  18.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 534, False: 17.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    534|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    534|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    534|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    534|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    534|    }                                                  \
  |  |  |  | 3667|  18.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  17.8k|                        .transform_error(make_eof_scan_error));
 5854|  17.8k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  18.3k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3516|  17.8k|    {
 3517|  17.8k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  17.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  17.8k|        return read_default_with_base(range, value, 10);
 3519|  17.8k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3480|  17.8k|    {
 3481|  17.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  17.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 17.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  17.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  17.8k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|       |        if constexpr (!std::is_signed_v<T>) {
 3485|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3486|       |                return unexpected_scan_error(
 3487|       |                    scan_error::invalid_scanned_value,
 3488|       |                    "Unexpected '-' sign when parsing an "
 3489|       |                    "unsigned value");
 3490|       |            }
 3491|       |        }
 3492|       |
 3493|  17.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 17.8k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  34.2k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  17.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.41k, False: 16.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.41k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.41k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.41k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.41k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.41k|    }                                                  \
  |  |  |  | 3667|  17.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  16.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  34.2k|                parse_integer_digits_without_thsep(
 3500|  34.2k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  34.2k|                    prefix_result.parsed_base));
 3502|       |
 3503|  34.2k|        auto buf = make_contiguous_buffer(
 3504|  34.2k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  34.2k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  16.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  16.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  16.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  16.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 174, False: 16.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    174|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    174|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    174|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    174|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    174|    }                                                  \
  |  |  |  | 3667|  16.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  16.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|  16.2k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|  16.2k|                                    prefix_result.parsed_base));
 3508|       |
 3509|  16.2k|        return ranges::next(prefix_result.iterator,
 3510|  16.2k|                            ranges::distance(buf.view().begin(), result_it));
 3511|  34.2k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5859|  13.4k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  13.4k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  13.4k|            auto rd = make_reader<T, char_type>();
 5869|  13.4k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 13.4k, False: 0]
  ------------------
 5870|  13.4k|                return impl(rd, range, value);
 5871|  13.4k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  13.4k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  13.4k|    {
 5852|  13.4k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  13.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  13.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  13.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  13.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 267, False: 13.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    267|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    267|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    267|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    267|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    267|    }                                                  \
  |  |  |  | 3667|  13.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  13.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  13.1k|                        .transform_error(make_eof_scan_error));
 5854|  13.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  13.4k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3516|  13.1k|    {
 3517|  13.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  13.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  13.1k|        return read_default_with_base(range, value, 10);
 3519|  13.1k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3480|  13.1k|    {
 3481|  13.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  13.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  13.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  13.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  13.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 13.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  13.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  13.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  13.1k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|  13.1k|        if constexpr (!std::is_signed_v<T>) {
 3485|  13.1k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3485:17): [True: 777, False: 12.4k]
  ------------------
 3486|    777|                return unexpected_scan_error(
 3487|    777|                    scan_error::invalid_scanned_value,
 3488|    777|                    "Unexpected '-' sign when parsing an "
 3489|    777|                    "unsigned value");
 3490|    777|            }
 3491|  13.1k|        }
 3492|       |
 3493|  13.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 13.1k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  25.6k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  13.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  13.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  13.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  13.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 786, False: 12.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    786|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    786|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    786|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    786|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    786|    }                                                  \
  |  |  |  | 3667|  13.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  25.6k|                parse_integer_digits_without_thsep(
 3500|  25.6k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  25.6k|                    prefix_result.parsed_base));
 3502|       |
 3503|  25.6k|        auto buf = make_contiguous_buffer(
 3504|  25.6k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  25.6k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  12.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  12.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  12.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 288, False: 12.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    288|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    288|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    288|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    288|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    288|    }                                                  \
  |  |  |  | 3667|  12.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|  12.1k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|  12.1k|                                    prefix_result.parsed_base));
 3508|       |
 3509|  12.1k|        return ranges::next(prefix_result.iterator,
 3510|  12.1k|                            ranges::distance(buf.view().begin(), result_it));
 3511|  25.6k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5859|  14.7k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  14.7k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  14.7k|            auto rd = make_reader<T, char_type>();
 5869|  14.7k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 14.7k, False: 0]
  ------------------
 5870|  14.7k|                return impl(rd, range, value);
 5871|  14.7k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  14.7k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  14.7k|    {
 5852|  14.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  14.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 327, False: 14.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    327|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    327|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    327|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    327|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    327|    }                                                  \
  |  |  |  | 3667|  14.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  14.4k|                        .transform_error(make_eof_scan_error));
 5854|  14.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  14.7k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3516|  14.4k|    {
 3517|  14.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  14.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  14.4k|        return read_default_with_base(range, value, 10);
 3519|  14.4k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3480|  14.4k|    {
 3481|  14.4k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  14.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 14.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  14.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  14.4k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|  14.4k|        if constexpr (!std::is_signed_v<T>) {
 3485|  14.4k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3485:17): [True: 795, False: 13.6k]
  ------------------
 3486|    795|                return unexpected_scan_error(
 3487|    795|                    scan_error::invalid_scanned_value,
 3488|    795|                    "Unexpected '-' sign when parsing an "
 3489|    795|                    "unsigned value");
 3490|    795|            }
 3491|  14.4k|        }
 3492|       |
 3493|  14.4k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 14.4k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  28.0k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  14.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 840, False: 13.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    840|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    840|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    840|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    840|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    840|    }                                                  \
  |  |  |  | 3667|  14.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  13.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  28.0k|                parse_integer_digits_without_thsep(
 3500|  28.0k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  28.0k|                    prefix_result.parsed_base));
 3502|       |
 3503|  28.0k|        auto buf = make_contiguous_buffer(
 3504|  28.0k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  28.0k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  13.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  13.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  13.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  13.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 156, False: 13.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    156|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    156|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    156|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    156|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    156|    }                                                  \
  |  |  |  | 3667|  13.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  13.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|  13.4k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|  13.4k|                                    prefix_result.parsed_base));
 3508|       |
 3509|  13.4k|        return ranges::next(prefix_result.iterator,
 3510|  13.4k|                            ranges::distance(buf.view().begin(), result_it));
 3511|  28.0k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5859|  14.9k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  14.9k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  14.9k|            auto rd = make_reader<T, char_type>();
 5869|  14.9k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 14.9k, False: 0]
  ------------------
 5870|  14.9k|                return impl(rd, range, value);
 5871|  14.9k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  14.9k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  14.9k|    {
 5852|  14.9k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  14.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 354, False: 14.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    354|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    354|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    354|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    354|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    354|    }                                                  \
  |  |  |  | 3667|  14.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  14.5k|                        .transform_error(make_eof_scan_error));
 5854|  14.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  14.9k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3516|  14.5k|    {
 3517|  14.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  14.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  14.5k|        return read_default_with_base(range, value, 10);
 3519|  14.5k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3480|  14.5k|    {
 3481|  14.5k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  14.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 14.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  14.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  14.5k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|  14.5k|        if constexpr (!std::is_signed_v<T>) {
 3485|  14.5k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3485:17): [True: 819, False: 13.7k]
  ------------------
 3486|    819|                return unexpected_scan_error(
 3487|    819|                    scan_error::invalid_scanned_value,
 3488|    819|                    "Unexpected '-' sign when parsing an "
 3489|    819|                    "unsigned value");
 3490|    819|            }
 3491|  14.5k|        }
 3492|       |
 3493|  14.5k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 14.5k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  28.2k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  14.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 858, False: 13.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    858|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    858|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    858|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    858|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    858|    }                                                  \
  |  |  |  | 3667|  14.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  13.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  28.2k|                parse_integer_digits_without_thsep(
 3500|  28.2k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  28.2k|                    prefix_result.parsed_base));
 3502|       |
 3503|  28.2k|        auto buf = make_contiguous_buffer(
 3504|  28.2k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  28.2k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  13.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  13.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  13.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 87, False: 13.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     87|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     87|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     87|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     87|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     87|    }                                                  \
  |  |  |  | 3667|  13.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  13.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|  13.6k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|  13.6k|                                    prefix_result.parsed_base));
 3508|       |
 3509|  13.6k|        return ranges::next(prefix_result.iterator,
 3510|  13.6k|                            ranges::distance(buf.view().begin(), result_it));
 3511|  28.2k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISF_EEvE4typeELPv0EEEOSF_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2864|   360k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  928|   360k|    static_cast<    \
  |  |  929|   360k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2865|   360k|          m_range(SCN_FWD(r)),
  ------------------
  |  |  930|   360k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2866|   360k|          m_current(m_range.begin())
 2867|   360k|    {
 2868|   360k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2871|   979k|    {
 2872|   979k|        return m_current;
 2873|   979k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2876|   619k|    {
 2877|   619k|        return m_range.end();
 2878|   619k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2891|   284k|    {
 2892|   284k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   284k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   284k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2893|   284k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 2894|   284k|            if (it == nullptr) {
  ------------------
  |  Branch (2894:17): [True: 0, False: 284k]
  ------------------
 2895|      0|                it = end();
 2896|      0|            }
 2897|   284k|        }
 2898|   284k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   284k|    static_cast<    \
  |  |  929|   284k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2899|   284k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2881|   335k|    {
 2882|   335k|        return ranges::subrange{begin(), end()};
 2883|   335k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIaEENS0_13scan_expectedIPKcEERT_:
 6181|  54.0k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  54.0k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  54.0k|            auto rd = make_reader<T, char_type>();
 6187|  54.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  54.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 54.0k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|  54.0k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  54.0k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEaEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|  54.0k|    {
 6113|  54.0k|        const bool need_skipped_width =
 6114|  54.0k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 54.0k]
  |  Branch (6114:33): [True: 0, False: 54.0k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  54.0k|        auto it = rng.begin();
 6118|  54.0k|        std::ptrdiff_t prefix_width = 0;
 6119|  54.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 54.0k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  54.0k|        else {
 6127|  54.0k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  54.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  54.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  54.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  54.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.32k, False: 52.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.32k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.32k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.32k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.32k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.32k|    }                                                  \
  |  |  |  | 3667|  54.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  52.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  52.7k|            std::tie(it, prefix_width) = prefix_result;
 6129|  52.7k|        }
 6130|  52.7k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  52.7k|        std::ptrdiff_t value_width = 0;
 6134|  52.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 52.7k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  52.7k|        else {
 6150|  52.7k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  52.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  52.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  52.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 7.15k, False: 45.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  7.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  7.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  7.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  7.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  7.15k|    }                                                  \
  |  | 3667|  52.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  52.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  45.5k|                                             specs, value, loc));
 6152|       |
 6153|  45.5k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 45.5k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  45.5k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  45.5k|        std::ptrdiff_t postfix_width = 0;
 6162|  45.5k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 44.6k, False: 982]
  ------------------
 6163|  44.6k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  44.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  44.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  44.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  44.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 44.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  44.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  44.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  44.6k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  44.6k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  44.6k|                                 value_width));
 6167|  44.6k|            std::tie(it, postfix_width) = postfix_result;
 6168|  44.6k|        }
 6169|       |
 6170|  45.5k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  45.5k|                                                 value_width, postfix_width);
 6172|  45.5k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 45.5k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  45.5k|        return it;
 6177|  45.5k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6025|   335k|    {
 6026|   335k|        const bool need_skipped_width =
 6027|   335k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 0, False: 335k]
  |  Branch (6027:33): [True: 0, False: 335k]
  ------------------
 6028|   335k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|   335k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 0, False: 335k]
  ------------------
 6032|   335k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 0, False: 335k]
  ------------------
 6033|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6034|      0|                             need_skipped_width);
 6035|      0|        }
 6036|   335k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 335k, False: 0]
  |  Branch (6036:56): [True: 335k, False: 0]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|   335k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 335k]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|   661k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|   335k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   335k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   335k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   335k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8.53k, False: 326k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  8.53k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  8.53k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  8.53k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  8.53k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  8.53k|    }                                                  \
  |  |  |  | 3667|   335k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   326k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|   661k|                            make_eof_scan_error));
 6047|       |
 6048|   661k|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 326k]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|   326k|            return result_type{it, 0};
 6056|   661k|        }
 6057|       |
 6058|      0|        return result_type{rng.begin(), 0};
 6059|   335k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6067|   277k|    {
 6068|   277k|        const bool need_skipped_width =
 6069|   277k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 0, False: 277k]
  |  Branch (6069:33): [True: 0, False: 277k]
  ------------------
 6070|   277k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|   277k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 0, False: 277k]
  ------------------
 6073|   277k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 0, False: 277k]
  ------------------
 6074|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 0, False: 0]
  ------------------
 6075|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 0, False: 0]
  ------------------
 6076|      0|                return result_type{rng.begin(), 0};
 6077|      0|            }
 6078|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|      0|                             specs.fill, need_skipped_width);
 6080|      0|        }
 6081|   277k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 277k, False: 0]
  ------------------
 6082|   277k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 0, False: 277k]
  ------------------
 6083|   277k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 0, False: 0]
  |  Branch (6083:35): [True: 0, False: 0]
  ------------------
 6084|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 0, False: 0]
  ------------------
 6085|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 0, False: 0]
  ------------------
 6086|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                const auto initial_width =
 6088|      0|                    specs.precision - prefix_width - value_width;
 6089|      0|                auto max_width_view = take_width(rng, initial_width);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|      0|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|   277k|        return result_type{rng.begin(), 0};
 6107|   277k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
 6181|  63.9k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  63.9k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  63.9k|            auto rd = make_reader<T, char_type>();
 6187|  63.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  63.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 63.9k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|  63.9k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  63.9k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|  63.9k|    {
 6113|  63.9k|        const bool need_skipped_width =
 6114|  63.9k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 63.9k]
  |  Branch (6114:33): [True: 0, False: 63.9k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  63.9k|        auto it = rng.begin();
 6118|  63.9k|        std::ptrdiff_t prefix_width = 0;
 6119|  63.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 63.9k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  63.9k|        else {
 6127|  63.9k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  63.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  63.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  63.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  63.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.75k, False: 62.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.75k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.75k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.75k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.75k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.75k|    }                                                  \
  |  |  |  | 3667|  63.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  62.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  62.2k|            std::tie(it, prefix_width) = prefix_result;
 6129|  62.2k|        }
 6130|  62.2k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  62.2k|        std::ptrdiff_t value_width = 0;
 6134|  62.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 62.2k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  62.2k|        else {
 6150|  62.2k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  62.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  62.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  62.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 6.71k, False: 55.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  6.71k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  6.71k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  6.71k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  6.71k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  6.71k|    }                                                  \
  |  | 3667|  62.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  62.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  55.5k|                                             specs, value, loc));
 6152|       |
 6153|  55.5k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 55.5k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  55.5k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  55.5k|        std::ptrdiff_t postfix_width = 0;
 6162|  55.5k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 54.1k, False: 1.31k]
  ------------------
 6163|  54.1k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  54.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  54.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  54.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  54.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 54.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  54.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  54.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  54.1k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  54.1k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  54.1k|                                 value_width));
 6167|  54.1k|            std::tie(it, postfix_width) = postfix_result;
 6168|  54.1k|        }
 6169|       |
 6170|  55.5k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  55.5k|                                                 value_width, postfix_width);
 6172|  55.5k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 55.5k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  55.5k|        return it;
 6177|  55.5k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIxEENS0_13scan_expectedIPKcEERT_:
 6181|  65.1k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  65.1k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  65.1k|            auto rd = make_reader<T, char_type>();
 6187|  65.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  65.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 65.1k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|  65.1k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  65.1k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EExEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|  65.1k|    {
 6113|  65.1k|        const bool need_skipped_width =
 6114|  65.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 65.1k]
  |  Branch (6114:33): [True: 0, False: 65.1k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  65.1k|        auto it = rng.begin();
 6118|  65.1k|        std::ptrdiff_t prefix_width = 0;
 6119|  65.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 65.1k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  65.1k|        else {
 6127|  65.1k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  65.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  65.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  65.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  65.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.94k, False: 63.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.94k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.94k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.94k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.94k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.94k|    }                                                  \
  |  |  |  | 3667|  65.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  63.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  63.1k|            std::tie(it, prefix_width) = prefix_result;
 6129|  63.1k|        }
 6130|  63.1k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  63.1k|        std::ptrdiff_t value_width = 0;
 6134|  63.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 63.1k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  63.1k|        else {
 6150|  63.1k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  63.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  63.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  63.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 6.53k, False: 56.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  6.53k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  6.53k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  6.53k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  6.53k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  6.53k|    }                                                  \
  |  | 3667|  63.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  63.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  56.6k|                                             specs, value, loc));
 6152|       |
 6153|  56.6k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 56.6k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  56.6k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  56.6k|        std::ptrdiff_t postfix_width = 0;
 6162|  56.6k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 55.1k, False: 1.46k]
  ------------------
 6163|  55.1k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  55.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  55.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  55.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  55.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 55.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  55.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  55.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  55.1k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  55.1k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  55.1k|                                 value_width));
 6167|  55.1k|            std::tie(it, postfix_width) = postfix_result;
 6168|  55.1k|        }
 6169|       |
 6170|  56.6k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  56.6k|                                                 value_width, postfix_width);
 6172|  56.6k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 56.6k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  56.6k|        return it;
 6177|  56.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIhEENS0_13scan_expectedIPKcEERT_:
 6181|  47.6k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  47.6k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  47.6k|            auto rd = make_reader<T, char_type>();
 6187|  47.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  47.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 47.6k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|  47.6k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  47.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEhEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|  47.6k|    {
 6113|  47.6k|        const bool need_skipped_width =
 6114|  47.6k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 47.6k]
  |  Branch (6114:33): [True: 0, False: 47.6k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  47.6k|        auto it = rng.begin();
 6118|  47.6k|        std::ptrdiff_t prefix_width = 0;
 6119|  47.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 47.6k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  47.6k|        else {
 6127|  47.6k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  47.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  47.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  47.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  47.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 988, False: 46.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    988|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    988|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    988|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    988|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    988|    }                                                  \
  |  |  |  | 3667|  47.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  46.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  46.6k|            std::tie(it, prefix_width) = prefix_result;
 6129|  46.6k|        }
 6130|  46.6k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  46.6k|        std::ptrdiff_t value_width = 0;
 6134|  46.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 46.6k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  46.6k|        else {
 6150|  46.6k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  46.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  46.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  46.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 7.48k, False: 39.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  7.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  7.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  7.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  7.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  7.48k|    }                                                  \
  |  | 3667|  46.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  46.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  39.2k|                                             specs, value, loc));
 6152|       |
 6153|  39.2k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 39.2k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  39.2k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  39.2k|        std::ptrdiff_t postfix_width = 0;
 6162|  39.2k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 38.4k, False: 730]
  ------------------
 6163|  38.4k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  38.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  38.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  38.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  38.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 38.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  38.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  38.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  38.4k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  38.4k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  38.4k|                                 value_width));
 6167|  38.4k|            std::tie(it, postfix_width) = postfix_result;
 6168|  38.4k|        }
 6169|       |
 6170|  39.2k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  39.2k|                                                 value_width, postfix_width);
 6172|  39.2k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 39.2k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  39.2k|        return it;
 6177|  39.2k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
 6181|  51.8k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  51.8k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  51.8k|            auto rd = make_reader<T, char_type>();
 6187|  51.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  51.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 51.8k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|  51.8k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  51.8k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|  51.8k|    {
 6113|  51.8k|        const bool need_skipped_width =
 6114|  51.8k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 51.8k]
  |  Branch (6114:33): [True: 0, False: 51.8k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  51.8k|        auto it = rng.begin();
 6118|  51.8k|        std::ptrdiff_t prefix_width = 0;
 6119|  51.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 51.8k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  51.8k|        else {
 6127|  51.8k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  51.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  51.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  51.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  51.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.21k, False: 50.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.21k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.21k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.21k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.21k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.21k|    }                                                  \
  |  |  |  | 3667|  51.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  50.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  50.6k|            std::tie(it, prefix_width) = prefix_result;
 6129|  50.6k|        }
 6130|  50.6k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  50.6k|        std::ptrdiff_t value_width = 0;
 6134|  50.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 50.6k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  50.6k|        else {
 6150|  50.6k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  50.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  50.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  50.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 7.26k, False: 43.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  7.26k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  7.26k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  7.26k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  7.26k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  7.26k|    }                                                  \
  |  | 3667|  50.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  50.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  43.3k|                                             specs, value, loc));
 6152|       |
 6153|  43.3k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 43.3k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  43.3k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  43.3k|        std::ptrdiff_t postfix_width = 0;
 6162|  43.3k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 42.4k, False: 892]
  ------------------
 6163|  42.4k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  42.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  42.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  42.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  42.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 42.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  42.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  42.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  42.4k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  42.4k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  42.4k|                                 value_width));
 6167|  42.4k|            std::tie(it, postfix_width) = postfix_result;
 6168|  42.4k|        }
 6169|       |
 6170|  43.3k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  43.3k|                                                 value_width, postfix_width);
 6172|  43.3k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 43.3k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  43.3k|        return it;
 6177|  43.3k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIyEENS0_13scan_expectedIPKcEERT_:
 6181|  52.3k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  52.3k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  52.3k|            auto rd = make_reader<T, char_type>();
 6187|  52.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  52.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 52.3k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|  52.3k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  52.3k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEyEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|  52.3k|    {
 6113|  52.3k|        const bool need_skipped_width =
 6114|  52.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 52.3k]
  |  Branch (6114:33): [True: 0, False: 52.3k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  52.3k|        auto it = rng.begin();
 6118|  52.3k|        std::ptrdiff_t prefix_width = 0;
 6119|  52.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 52.3k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  52.3k|        else {
 6127|  52.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  52.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  52.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  52.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  52.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.31k, False: 51.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.31k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.31k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.31k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.31k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.31k|    }                                                  \
  |  |  |  | 3667|  52.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  51.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  51.0k|            std::tie(it, prefix_width) = prefix_result;
 6129|  51.0k|        }
 6130|  51.0k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  51.0k|        std::ptrdiff_t value_width = 0;
 6134|  51.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 51.0k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  51.0k|        else {
 6150|  51.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  51.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  51.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  51.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 7.15k, False: 43.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  7.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  7.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  7.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  7.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  7.15k|    }                                                  \
  |  | 3667|  51.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  51.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  43.9k|                                             specs, value, loc));
 6152|       |
 6153|  43.9k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 43.9k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  43.9k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  43.9k|        std::ptrdiff_t postfix_width = 0;
 6162|  43.9k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 42.9k, False: 994]
  ------------------
 6163|  42.9k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  42.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  42.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  42.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  42.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 42.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  42.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  42.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  42.9k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  42.9k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  42.9k|                                 value_width));
 6167|  42.9k|            std::tie(it, postfix_width) = postfix_result;
 6168|  42.9k|        }
 6169|       |
 6170|  43.9k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  43.9k|                                                 value_width, postfix_width);
 6172|  43.9k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 43.9k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  43.9k|        return it;
 6177|  43.9k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIaEENS0_13scan_expectedIPKwEERT_:
 5859|  4.34k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  4.34k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  4.34k|            auto rd = make_reader<T, char_type>();
 5865|  4.34k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  4.34k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEaEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  4.34k|    {
 5852|  4.34k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  4.34k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.34k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.34k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 66, False: 4.27k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     66|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     66|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     66|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     66|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     66|    }                                                  \
  |  |  |  | 3667|  4.34k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.27k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  4.27k|                        .transform_error(make_eof_scan_error));
 5854|  4.27k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  4.34k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5783|  26.1k|{
 5784|  26.1k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  26.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 159, False: 25.9k]
  |  |  ------------------
  ------------------
 5785|    159|        return unexpected(e);
 5786|    159|    }
 5787|       |
 5788|  25.9k|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 0, False: 25.9k]
  ------------------
 5789|      0|        return range.begin();
 5790|      0|    }
 5791|       |
 5792|  25.9k|    return skip_classic_whitespace(range);
 5793|  25.9k|}
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|  4.27k|    {
 3517|  4.27k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.27k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  4.27k|        return read_default_with_base(range, value, 10);
 3519|  4.27k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|  4.27k|    {
 3481|  4.27k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  4.27k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.27k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.27k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.27k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.27k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  4.27k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.27k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  4.27k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|       |        if constexpr (!std::is_signed_v<T>) {
 3485|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3486|       |                return unexpected_scan_error(
 3487|       |                    scan_error::invalid_scanned_value,
 3488|       |                    "Unexpected '-' sign when parsing an "
 3489|       |                    "unsigned value");
 3490|       |            }
 3491|       |        }
 3492|       |
 3493|  4.27k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 4.27k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  8.54k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  4.27k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.27k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.27k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.27k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 9, False: 4.26k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      9|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      9|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      9|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      9|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      9|    }                                                  \
  |  |  |  | 3667|  4.27k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.26k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  8.54k|                parse_integer_digits_without_thsep(
 3500|  8.54k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  8.54k|                    prefix_result.parsed_base));
 3502|       |
 3503|  8.54k|        auto buf = make_contiguous_buffer(
 3504|  8.54k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  8.54k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  4.26k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.26k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.26k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.16k, False: 108]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.16k|    }                                                  \
  |  |  |  | 3667|  4.26k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    108|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|    108|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|    108|                                    prefix_result.parsed_base));
 3508|       |
 3509|    108|        return ranges::next(prefix_result.iterator,
 3510|    108|                            ranges::distance(buf.view().begin(), result_it));
 3511|  8.54k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
 5859|  4.37k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  4.37k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  4.37k|            auto rd = make_reader<T, char_type>();
 5865|  4.37k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  4.37k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  4.37k|    {
 5852|  4.37k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  4.37k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.37k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.37k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 69, False: 4.30k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     69|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     69|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     69|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     69|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     69|    }                                                  \
  |  |  |  | 3667|  4.37k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  4.30k|                        .transform_error(make_eof_scan_error));
 5854|  4.30k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  4.37k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|  4.30k|    {
 3517|  4.30k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.30k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  4.30k|        return read_default_with_base(range, value, 10);
 3519|  4.30k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|  4.30k|    {
 3481|  4.30k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  4.30k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.30k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.30k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.30k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  4.30k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  4.30k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|       |        if constexpr (!std::is_signed_v<T>) {
 3485|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3486|       |                return unexpected_scan_error(
 3487|       |                    scan_error::invalid_scanned_value,
 3488|       |                    "Unexpected '-' sign when parsing an "
 3489|       |                    "unsigned value");
 3490|       |            }
 3491|       |        }
 3492|       |
 3493|  4.30k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 4.30k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  8.60k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  4.30k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.30k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.30k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 9, False: 4.29k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      9|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      9|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      9|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      9|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      9|    }                                                  \
  |  |  |  | 3667|  4.30k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.29k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  8.60k|                parse_integer_digits_without_thsep(
 3500|  8.60k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  8.60k|                    prefix_result.parsed_base));
 3502|       |
 3503|  8.60k|        auto buf = make_contiguous_buffer(
 3504|  8.60k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  8.60k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  4.29k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.29k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.29k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.15k, False: 138]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.15k|    }                                                  \
  |  |  |  | 3667|  4.29k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    138|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|    138|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|    138|                                    prefix_result.parsed_base));
 3508|       |
 3509|    138|        return ranges::next(prefix_result.iterator,
 3510|    138|                            ranges::distance(buf.view().begin(), result_it));
 3511|  8.60k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIxEENS0_13scan_expectedIPKwEERT_:
 5859|  4.40k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  4.40k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  4.40k|            auto rd = make_reader<T, char_type>();
 5865|  4.40k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  4.40k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EExEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  4.40k|    {
 5852|  4.40k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  4.40k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.40k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.40k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 69, False: 4.33k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     69|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     69|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     69|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     69|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     69|    }                                                  \
  |  |  |  | 3667|  4.40k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  4.33k|                        .transform_error(make_eof_scan_error));
 5854|  4.33k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  4.40k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|  4.33k|    {
 3517|  4.33k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.33k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  4.33k|        return read_default_with_base(range, value, 10);
 3519|  4.33k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|  4.33k|    {
 3481|  4.33k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  4.33k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.33k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.33k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.33k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  4.33k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  4.33k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|       |        if constexpr (!std::is_signed_v<T>) {
 3485|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3486|       |                return unexpected_scan_error(
 3487|       |                    scan_error::invalid_scanned_value,
 3488|       |                    "Unexpected '-' sign when parsing an "
 3489|       |                    "unsigned value");
 3490|       |            }
 3491|       |        }
 3492|       |
 3493|  4.33k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 4.33k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  8.66k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  4.33k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.33k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.33k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 9, False: 4.32k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      9|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      9|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      9|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      9|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      9|    }                                                  \
  |  |  |  | 3667|  4.33k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  8.66k|                parse_integer_digits_without_thsep(
 3500|  8.66k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  8.66k|                    prefix_result.parsed_base));
 3502|       |
 3503|  8.66k|        auto buf = make_contiguous_buffer(
 3504|  8.66k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  8.66k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  4.32k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.32k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.32k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.15k, False: 171]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.15k|    }                                                  \
  |  |  |  | 3667|  4.32k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    171|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|    171|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|    171|                                    prefix_result.parsed_base));
 3508|       |
 3509|    171|        return ranges::next(prefix_result.iterator,
 3510|    171|                            ranges::distance(buf.view().begin(), result_it));
 3511|  8.66k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIhEENS0_13scan_expectedIPKwEERT_:
 5859|  4.32k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  4.32k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  4.32k|            auto rd = make_reader<T, char_type>();
 5865|  4.32k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  4.32k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEhEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  4.32k|    {
 5852|  4.32k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  4.32k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.32k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.32k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 57, False: 4.26k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     57|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     57|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     57|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     57|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     57|    }                                                  \
  |  |  |  | 3667|  4.32k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.26k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  4.26k|                        .transform_error(make_eof_scan_error));
 5854|  4.26k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  4.32k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|  4.26k|    {
 3517|  4.26k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.26k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  4.26k|        return read_default_with_base(range, value, 10);
 3519|  4.26k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|  4.26k|    {
 3481|  4.26k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  4.26k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.26k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.26k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.26k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  4.26k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.26k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  4.26k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|  4.26k|        if constexpr (!std::is_signed_v<T>) {
 3485|  4.26k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3485:17): [True: 54, False: 4.21k]
  ------------------
 3486|     54|                return unexpected_scan_error(
 3487|     54|                    scan_error::invalid_scanned_value,
 3488|     54|                    "Unexpected '-' sign when parsing an "
 3489|     54|                    "unsigned value");
 3490|     54|            }
 3491|  4.26k|        }
 3492|       |
 3493|  4.26k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 4.26k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  8.52k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  4.26k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.26k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.26k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3, False: 4.26k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      3|    }                                                  \
  |  |  |  | 3667|  4.26k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.26k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  8.52k|                parse_integer_digits_without_thsep(
 3500|  8.52k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  8.52k|                    prefix_result.parsed_base));
 3502|       |
 3503|  8.52k|        auto buf = make_contiguous_buffer(
 3504|  8.52k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  8.52k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  4.26k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.26k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.26k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.12k, False: 141]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.12k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.12k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.12k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.12k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.12k|    }                                                  \
  |  |  |  | 3667|  4.26k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    141|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|    141|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|    141|                                    prefix_result.parsed_base));
 3508|       |
 3509|    141|        return ranges::next(prefix_result.iterator,
 3510|    141|                            ranges::distance(buf.view().begin(), result_it));
 3511|  8.52k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
 5859|  4.34k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  4.34k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  4.34k|            auto rd = make_reader<T, char_type>();
 5865|  4.34k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  4.34k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  4.34k|    {
 5852|  4.34k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  4.34k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.34k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.34k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 57, False: 4.28k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     57|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     57|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     57|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     57|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     57|    }                                                  \
  |  |  |  | 3667|  4.34k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  4.28k|                        .transform_error(make_eof_scan_error));
 5854|  4.28k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  4.34k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|  4.28k|    {
 3517|  4.28k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.28k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  4.28k|        return read_default_with_base(range, value, 10);
 3519|  4.28k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|  4.28k|    {
 3481|  4.28k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  4.28k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.28k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.28k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.28k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  4.28k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  4.28k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|  4.28k|        if constexpr (!std::is_signed_v<T>) {
 3485|  4.28k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3485:17): [True: 54, False: 4.23k]
  ------------------
 3486|     54|                return unexpected_scan_error(
 3487|     54|                    scan_error::invalid_scanned_value,
 3488|     54|                    "Unexpected '-' sign when parsing an "
 3489|     54|                    "unsigned value");
 3490|     54|            }
 3491|  4.28k|        }
 3492|       |
 3493|  4.28k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 4.28k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  8.56k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  4.28k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.28k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.28k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3, False: 4.28k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      3|    }                                                  \
  |  |  |  | 3667|  4.28k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  8.56k|                parse_integer_digits_without_thsep(
 3500|  8.56k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  8.56k|                    prefix_result.parsed_base));
 3502|       |
 3503|  8.56k|        auto buf = make_contiguous_buffer(
 3504|  8.56k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  8.56k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  4.28k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.28k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.28k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.12k, False: 159]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.12k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.12k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.12k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.12k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.12k|    }                                                  \
  |  |  |  | 3667|  4.28k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    159|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|    159|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|    159|                                    prefix_result.parsed_base));
 3508|       |
 3509|    159|        return ranges::next(prefix_result.iterator,
 3510|    159|                            ranges::distance(buf.view().begin(), result_it));
 3511|  8.56k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIyEENS0_13scan_expectedIPKwEERT_:
 5859|  4.36k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  4.36k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  4.36k|            auto rd = make_reader<T, char_type>();
 5865|  4.36k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  4.36k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEyEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  4.36k|    {
 5852|  4.36k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  4.36k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.36k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.36k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 57, False: 4.30k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     57|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     57|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     57|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     57|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     57|    }                                                  \
  |  |  |  | 3667|  4.36k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  4.30k|                        .transform_error(make_eof_scan_error));
 5854|  4.30k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  4.36k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|  4.30k|    {
 3517|  4.30k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.30k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  4.30k|        return read_default_with_base(range, value, 10);
 3519|  4.30k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|  4.30k|    {
 3481|  4.30k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  4.30k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.30k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.30k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.30k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  4.30k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  4.30k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|  4.30k|        if constexpr (!std::is_signed_v<T>) {
 3485|  4.30k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3485:17): [True: 60, False: 4.24k]
  ------------------
 3486|     60|                return unexpected_scan_error(
 3487|     60|                    scan_error::invalid_scanned_value,
 3488|     60|                    "Unexpected '-' sign when parsing an "
 3489|     60|                    "unsigned value");
 3490|     60|            }
 3491|  4.30k|        }
 3492|       |
 3493|  4.30k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 4.30k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  8.61k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  4.30k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.30k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.30k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3, False: 4.30k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      3|    }                                                  \
  |  |  |  | 3667|  4.30k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  8.61k|                parse_integer_digits_without_thsep(
 3500|  8.61k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  8.61k|                    prefix_result.parsed_base));
 3502|       |
 3503|  8.61k|        auto buf = make_contiguous_buffer(
 3504|  8.61k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  8.61k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  4.30k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.30k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.30k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.11k, False: 189]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.11k|    }                                                  \
  |  |  |  | 3667|  4.30k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    189|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|    189|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|    189|                                    prefix_result.parsed_base));
 3508|       |
 3509|    189|        return ranges::next(prefix_result.iterator,
 3510|    189|                            ranges::distance(buf.view().begin(), result_it));
 3511|  8.61k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISF_EEvE4typeELPv0EEEOSF_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2864|   155k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  928|   155k|    static_cast<    \
  |  |  929|   155k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2865|   155k|          m_range(SCN_FWD(r)),
  ------------------
  |  |  930|   155k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2866|   155k|          m_current(m_range.begin())
 2867|   155k|    {
 2868|   155k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2871|   261k|    {
 2872|   261k|        return m_current;
 2873|   261k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2876|   106k|    {
 2877|   106k|        return m_range.end();
 2878|   106k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2891|  2.51k|    {
 2892|  2.51k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  2.51k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.51k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2893|  2.51k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 2894|  2.51k|            if (it == nullptr) {
  ------------------
  |  Branch (2894:17): [True: 0, False: 2.51k]
  ------------------
 2895|      0|                it = end();
 2896|      0|            }
 2897|  2.51k|        }
 2898|  2.51k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  2.51k|    static_cast<    \
  |  |  929|  2.51k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2899|  2.51k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2881|   104k|    {
 2882|   104k|        return ranges::subrange{begin(), end()};
 2883|   104k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIaEENS0_13scan_expectedIPKwEERT_:
 6181|  17.3k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  17.3k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  17.3k|            auto rd = make_reader<T, char_type>();
 6187|  17.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.3k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|  17.3k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  17.3k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEaEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|  17.3k|    {
 6113|  17.3k|        const bool need_skipped_width =
 6114|  17.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 17.3k]
  |  Branch (6114:33): [True: 0, False: 17.3k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  17.3k|        auto it = rng.begin();
 6118|  17.3k|        std::ptrdiff_t prefix_width = 0;
 6119|  17.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 17.3k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  17.3k|        else {
 6127|  17.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  17.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 256, False: 17.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    256|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    256|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    256|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    256|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    256|    }                                                  \
  |  |  |  | 3667|  17.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  17.0k|            std::tie(it, prefix_width) = prefix_result;
 6129|  17.0k|        }
 6130|  17.0k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  17.0k|        std::ptrdiff_t value_width = 0;
 6134|  17.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 17.0k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  17.0k|        else {
 6150|  17.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  17.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  17.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  17.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 16.6k, False: 376]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  16.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  16.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  16.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  16.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  16.6k|    }                                                  \
  |  | 3667|  17.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  17.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    376|                                             specs, value, loc));
 6152|       |
 6153|    376|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 376]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|    376|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    376|        std::ptrdiff_t postfix_width = 0;
 6162|    376|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 270, False: 106]
  ------------------
 6163|    270|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    270|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    270|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    270|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    270|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 270]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    270|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    270|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    270|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    270|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    270|                                 value_width));
 6167|    270|            std::tie(it, postfix_width) = postfix_result;
 6168|    270|        }
 6169|       |
 6170|    376|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    376|                                                 value_width, postfix_width);
 6172|    376|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 376]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|    376|        return it;
 6177|    376|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6025|   104k|    {
 6026|   104k|        const bool need_skipped_width =
 6027|   104k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 0, False: 104k]
  |  Branch (6027:33): [True: 0, False: 104k]
  ------------------
 6028|   104k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|   104k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 0, False: 104k]
  ------------------
 6032|   104k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 0, False: 104k]
  ------------------
 6033|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6034|      0|                             need_skipped_width);
 6035|      0|        }
 6036|   104k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 104k, False: 0]
  |  Branch (6036:56): [True: 104k, False: 0]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|   104k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 104k]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|   206k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|   104k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   104k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   104k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.48k, False: 102k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.48k|    }                                                  \
  |  |  |  | 3667|   104k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|   206k|                            make_eof_scan_error));
 6047|       |
 6048|   206k|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 102k]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|   102k|            return result_type{it, 0};
 6056|   206k|        }
 6057|       |
 6058|      0|        return result_type{rng.begin(), 0};
 6059|   104k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6067|  1.92k|    {
 6068|  1.92k|        const bool need_skipped_width =
 6069|  1.92k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 0, False: 1.92k]
  |  Branch (6069:33): [True: 0, False: 1.92k]
  ------------------
 6070|  1.92k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|  1.92k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 0, False: 1.92k]
  ------------------
 6073|  1.92k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 0, False: 1.92k]
  ------------------
 6074|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 0, False: 0]
  ------------------
 6075|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 0, False: 0]
  ------------------
 6076|      0|                return result_type{rng.begin(), 0};
 6077|      0|            }
 6078|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|      0|                             specs.fill, need_skipped_width);
 6080|      0|        }
 6081|  1.92k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 1.92k, False: 0]
  ------------------
 6082|  1.92k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 0, False: 1.92k]
  ------------------
 6083|  1.92k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 0, False: 0]
  |  Branch (6083:35): [True: 0, False: 0]
  ------------------
 6084|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 0, False: 0]
  ------------------
 6085|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 0, False: 0]
  ------------------
 6086|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                const auto initial_width =
 6088|      0|                    specs.precision - prefix_width - value_width;
 6089|      0|                auto max_width_view = take_width(rng, initial_width);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|      0|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|  1.92k|        return result_type{rng.begin(), 0};
 6107|  1.92k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
 6181|  17.4k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  17.4k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  17.4k|            auto rd = make_reader<T, char_type>();
 6187|  17.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  17.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.4k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|  17.4k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  17.4k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|  17.4k|    {
 6113|  17.4k|        const bool need_skipped_width =
 6114|  17.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 17.4k]
  |  Branch (6114:33): [True: 0, False: 17.4k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  17.4k|        auto it = rng.begin();
 6118|  17.4k|        std::ptrdiff_t prefix_width = 0;
 6119|  17.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 17.4k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  17.4k|        else {
 6127|  17.4k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  17.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 268, False: 17.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    268|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    268|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    268|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    268|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    268|    }                                                  \
  |  |  |  | 3667|  17.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  17.1k|            std::tie(it, prefix_width) = prefix_result;
 6129|  17.1k|        }
 6130|  17.1k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  17.1k|        std::ptrdiff_t value_width = 0;
 6134|  17.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 17.1k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  17.1k|        else {
 6150|  17.1k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  17.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  17.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  17.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 16.6k, False: 462]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  16.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  16.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  16.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  16.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  16.6k|    }                                                  \
  |  | 3667|  17.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  17.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    462|                                             specs, value, loc));
 6152|       |
 6153|    462|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 462]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|    462|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    462|        std::ptrdiff_t postfix_width = 0;
 6162|    462|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 344, False: 118]
  ------------------
 6163|    344|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    344|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    344|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    344|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    344|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 344]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    344|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    344|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    344|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    344|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    344|                                 value_width));
 6167|    344|            std::tie(it, postfix_width) = postfix_result;
 6168|    344|        }
 6169|       |
 6170|    462|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    462|                                                 value_width, postfix_width);
 6172|    462|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 462]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|    462|        return it;
 6177|    462|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIxEENS0_13scan_expectedIPKwEERT_:
 6181|  17.4k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  17.4k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  17.4k|            auto rd = make_reader<T, char_type>();
 6187|  17.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  17.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.4k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|  17.4k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  17.4k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EExEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|  17.4k|    {
 6113|  17.4k|        const bool need_skipped_width =
 6114|  17.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 17.4k]
  |  Branch (6114:33): [True: 0, False: 17.4k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  17.4k|        auto it = rng.begin();
 6118|  17.4k|        std::ptrdiff_t prefix_width = 0;
 6119|  17.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 17.4k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  17.4k|        else {
 6127|  17.4k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  17.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 268, False: 17.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    268|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    268|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    268|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    268|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    268|    }                                                  \
  |  |  |  | 3667|  17.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  17.2k|            std::tie(it, prefix_width) = prefix_result;
 6129|  17.2k|        }
 6130|  17.2k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  17.2k|        std::ptrdiff_t value_width = 0;
 6134|  17.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 17.2k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  17.2k|        else {
 6150|  17.2k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  17.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  17.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  17.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 16.6k, False: 546]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  16.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  16.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  16.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  16.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  16.6k|    }                                                  \
  |  | 3667|  17.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  17.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    546|                                             specs, value, loc));
 6152|       |
 6153|    546|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 546]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|    546|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    546|        std::ptrdiff_t postfix_width = 0;
 6162|    546|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 428, False: 118]
  ------------------
 6163|    428|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    428|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    428|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    428|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    428|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 428]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    428|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    428|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    428|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    428|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    428|                                 value_width));
 6167|    428|            std::tie(it, postfix_width) = postfix_result;
 6168|    428|        }
 6169|       |
 6170|    546|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    546|                                                 value_width, postfix_width);
 6172|    546|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 546]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|    546|        return it;
 6177|    546|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIhEENS0_13scan_expectedIPKwEERT_:
 6181|  17.2k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  17.2k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  17.2k|            auto rd = make_reader<T, char_type>();
 6187|  17.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  17.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.2k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|  17.2k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  17.2k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEhEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|  17.2k|    {
 6113|  17.2k|        const bool need_skipped_width =
 6114|  17.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 17.2k]
  |  Branch (6114:33): [True: 0, False: 17.2k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  17.2k|        auto it = rng.begin();
 6118|  17.2k|        std::ptrdiff_t prefix_width = 0;
 6119|  17.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 17.2k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  17.2k|        else {
 6127|  17.2k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  17.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 232, False: 17.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    232|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    232|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    232|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    232|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    232|    }                                                  \
  |  |  |  | 3667|  17.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  17.0k|            std::tie(it, prefix_width) = prefix_result;
 6129|  17.0k|        }
 6130|  17.0k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  17.0k|        std::ptrdiff_t value_width = 0;
 6134|  17.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 17.0k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  17.0k|        else {
 6150|  17.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  17.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  17.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  17.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 16.7k, False: 324]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  16.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  16.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  16.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  16.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  16.7k|    }                                                  \
  |  | 3667|  17.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  17.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    324|                                             specs, value, loc));
 6152|       |
 6153|    324|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 324]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|    324|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    324|        std::ptrdiff_t postfix_width = 0;
 6162|    324|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 242, False: 82]
  ------------------
 6163|    242|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    242|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    242|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    242|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    242|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 242]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    242|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    242|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    242|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    242|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    242|                                 value_width));
 6167|    242|            std::tie(it, postfix_width) = postfix_result;
 6168|    242|        }
 6169|       |
 6170|    324|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    324|                                                 value_width, postfix_width);
 6172|    324|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 324]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|    324|        return it;
 6177|    324|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
 6181|  17.3k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  17.3k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  17.3k|            auto rd = make_reader<T, char_type>();
 6187|  17.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.3k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|  17.3k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  17.3k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|  17.3k|    {
 6113|  17.3k|        const bool need_skipped_width =
 6114|  17.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 17.3k]
  |  Branch (6114:33): [True: 0, False: 17.3k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  17.3k|        auto it = rng.begin();
 6118|  17.3k|        std::ptrdiff_t prefix_width = 0;
 6119|  17.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 17.3k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  17.3k|        else {
 6127|  17.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  17.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 232, False: 17.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    232|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    232|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    232|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    232|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    232|    }                                                  \
  |  |  |  | 3667|  17.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  17.0k|            std::tie(it, prefix_width) = prefix_result;
 6129|  17.0k|        }
 6130|  17.0k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  17.0k|        std::ptrdiff_t value_width = 0;
 6134|  17.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 17.0k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  17.0k|        else {
 6150|  17.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  17.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  17.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  17.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 16.7k, False: 370]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  16.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  16.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  16.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  16.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  16.7k|    }                                                  \
  |  | 3667|  17.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  17.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    370|                                             specs, value, loc));
 6152|       |
 6153|    370|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 370]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|    370|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    370|        std::ptrdiff_t postfix_width = 0;
 6162|    370|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 288, False: 82]
  ------------------
 6163|    288|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    288|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    288|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    288|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    288|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 288]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    288|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    288|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    288|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    288|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    288|                                 value_width));
 6167|    288|            std::tie(it, postfix_width) = postfix_result;
 6168|    288|        }
 6169|       |
 6170|    370|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    370|                                                 value_width, postfix_width);
 6172|    370|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 370]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|    370|        return it;
 6177|    370|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIyEENS0_13scan_expectedIPKwEERT_:
 6181|  17.3k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  17.3k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  17.3k|            auto rd = make_reader<T, char_type>();
 6187|  17.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.3k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|  17.3k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  17.3k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEyEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|  17.3k|    {
 6113|  17.3k|        const bool need_skipped_width =
 6114|  17.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 17.3k]
  |  Branch (6114:33): [True: 0, False: 17.3k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  17.3k|        auto it = rng.begin();
 6118|  17.3k|        std::ptrdiff_t prefix_width = 0;
 6119|  17.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 17.3k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  17.3k|        else {
 6127|  17.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  17.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 232, False: 17.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    232|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    232|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    232|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    232|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    232|    }                                                  \
  |  |  |  | 3667|  17.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  17.1k|            std::tie(it, prefix_width) = prefix_result;
 6129|  17.1k|        }
 6130|  17.1k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  17.1k|        std::ptrdiff_t value_width = 0;
 6134|  17.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 17.1k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  17.1k|        else {
 6150|  17.1k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  17.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  17.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  17.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 16.7k, False: 436]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  16.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  16.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  16.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  16.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  16.7k|    }                                                  \
  |  | 3667|  17.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  17.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    436|                                             specs, value, loc));
 6152|       |
 6153|    436|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 436]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|    436|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    436|        std::ptrdiff_t postfix_width = 0;
 6162|    436|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 354, False: 82]
  ------------------
 6163|    354|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    354|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    354|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    354|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    354|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 354]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    354|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    354|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    354|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    354|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    354|                                 value_width));
 6167|    354|            std::tie(it, postfix_width) = postfix_result;
 6168|    354|        }
 6169|       |
 6170|    436|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    436|                                                 value_width, postfix_width);
 6172|    436|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 436]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|    436|        return it;
 6177|    436|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5859|  4.34k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  4.34k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  4.34k|            auto rd = make_reader<T, char_type>();
 5869|  4.34k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 4.34k, False: 0]
  ------------------
 5870|  4.34k|                return impl(rd, range, value);
 5871|  4.34k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  4.34k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  4.34k|    {
 5852|  4.34k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  4.34k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.34k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.34k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 66, False: 4.27k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     66|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     66|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     66|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     66|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     66|    }                                                  \
  |  |  |  | 3667|  4.34k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.27k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  4.27k|                        .transform_error(make_eof_scan_error));
 5854|  4.27k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  4.34k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5783|  26.1k|{
 5784|  26.1k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  26.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 159, False: 25.9k]
  |  |  ------------------
  ------------------
 5785|    159|        return unexpected(e);
 5786|    159|    }
 5787|       |
 5788|  25.9k|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 0, False: 25.9k]
  ------------------
 5789|      0|        return range.begin();
 5790|      0|    }
 5791|       |
 5792|  25.9k|    return skip_classic_whitespace(range);
 5793|  25.9k|}
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3516|  4.27k|    {
 3517|  4.27k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.27k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  4.27k|        return read_default_with_base(range, value, 10);
 3519|  4.27k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3480|  4.27k|    {
 3481|  4.27k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  4.27k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.27k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.27k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.27k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.27k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  4.27k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.27k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  4.27k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|       |        if constexpr (!std::is_signed_v<T>) {
 3485|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3486|       |                return unexpected_scan_error(
 3487|       |                    scan_error::invalid_scanned_value,
 3488|       |                    "Unexpected '-' sign when parsing an "
 3489|       |                    "unsigned value");
 3490|       |            }
 3491|       |        }
 3492|       |
 3493|  4.27k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 4.27k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  4.42k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  4.27k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.27k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.27k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.27k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.12k, False: 150]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.12k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.12k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.12k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.12k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.12k|    }                                                  \
  |  |  |  | 3667|  4.27k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    150|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  4.42k|                parse_integer_digits_without_thsep(
 3500|  4.42k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  4.42k|                    prefix_result.parsed_base));
 3502|       |
 3503|  4.42k|        auto buf = make_contiguous_buffer(
 3504|  4.42k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  4.42k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|    150|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    150|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    150|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    150|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 42, False: 108]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     42|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     42|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     42|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     42|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     42|    }                                                  \
  |  |  |  | 3667|    150|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    108|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|    108|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|    108|                                    prefix_result.parsed_base));
 3508|       |
 3509|    108|        return ranges::next(prefix_result.iterator,
 3510|    108|                            ranges::distance(buf.view().begin(), result_it));
 3511|  4.42k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5859|  4.37k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  4.37k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  4.37k|            auto rd = make_reader<T, char_type>();
 5869|  4.37k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 4.37k, False: 0]
  ------------------
 5870|  4.37k|                return impl(rd, range, value);
 5871|  4.37k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  4.37k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  4.37k|    {
 5852|  4.37k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  4.37k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.37k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.37k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 69, False: 4.30k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     69|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     69|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     69|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     69|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     69|    }                                                  \
  |  |  |  | 3667|  4.37k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  4.30k|                        .transform_error(make_eof_scan_error));
 5854|  4.30k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  4.37k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3516|  4.30k|    {
 3517|  4.30k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.30k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  4.30k|        return read_default_with_base(range, value, 10);
 3519|  4.30k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3480|  4.30k|    {
 3481|  4.30k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  4.30k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.30k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.30k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.30k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  4.30k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  4.30k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|       |        if constexpr (!std::is_signed_v<T>) {
 3485|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3486|       |                return unexpected_scan_error(
 3487|       |                    scan_error::invalid_scanned_value,
 3488|       |                    "Unexpected '-' sign when parsing an "
 3489|       |                    "unsigned value");
 3490|       |            }
 3491|       |        }
 3492|       |
 3493|  4.30k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 4.30k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  4.46k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  4.30k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.30k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.30k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.14k, False: 156]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.14k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.14k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.14k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.14k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.14k|    }                                                  \
  |  |  |  | 3667|  4.30k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    156|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  4.46k|                parse_integer_digits_without_thsep(
 3500|  4.46k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  4.46k|                    prefix_result.parsed_base));
 3502|       |
 3503|  4.46k|        auto buf = make_contiguous_buffer(
 3504|  4.46k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  4.46k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|    156|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    156|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    156|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    156|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18, False: 138]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     18|    }                                                  \
  |  |  |  | 3667|    156|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    138|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|    138|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|    138|                                    prefix_result.parsed_base));
 3508|       |
 3509|    138|        return ranges::next(prefix_result.iterator,
 3510|    138|                            ranges::distance(buf.view().begin(), result_it));
 3511|  4.46k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5859|  4.40k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  4.40k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  4.40k|            auto rd = make_reader<T, char_type>();
 5869|  4.40k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 4.40k, False: 0]
  ------------------
 5870|  4.40k|                return impl(rd, range, value);
 5871|  4.40k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  4.40k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  4.40k|    {
 5852|  4.40k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  4.40k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.40k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.40k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 69, False: 4.33k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     69|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     69|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     69|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     69|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     69|    }                                                  \
  |  |  |  | 3667|  4.40k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  4.33k|                        .transform_error(make_eof_scan_error));
 5854|  4.33k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  4.40k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3516|  4.33k|    {
 3517|  4.33k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.33k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  4.33k|        return read_default_with_base(range, value, 10);
 3519|  4.33k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3480|  4.33k|    {
 3481|  4.33k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  4.33k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.33k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.33k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.33k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  4.33k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  4.33k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|       |        if constexpr (!std::is_signed_v<T>) {
 3485|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3486|       |                return unexpected_scan_error(
 3487|       |                    scan_error::invalid_scanned_value,
 3488|       |                    "Unexpected '-' sign when parsing an "
 3489|       |                    "unsigned value");
 3490|       |            }
 3491|       |        }
 3492|       |
 3493|  4.33k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 4.33k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  4.50k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  4.33k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.33k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.33k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.16k, False: 171]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.16k|    }                                                  \
  |  |  |  | 3667|  4.33k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    171|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  4.50k|                parse_integer_digits_without_thsep(
 3500|  4.50k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  4.50k|                    prefix_result.parsed_base));
 3502|       |
 3503|  4.50k|        auto buf = make_contiguous_buffer(
 3504|  4.50k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  4.50k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|    171|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    171|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    171|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    171|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 171]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    171|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    171|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|    171|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|    171|                                    prefix_result.parsed_base));
 3508|       |
 3509|    171|        return ranges::next(prefix_result.iterator,
 3510|    171|                            ranges::distance(buf.view().begin(), result_it));
 3511|  4.50k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5859|  4.32k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  4.32k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  4.32k|            auto rd = make_reader<T, char_type>();
 5869|  4.32k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 4.32k, False: 0]
  ------------------
 5870|  4.32k|                return impl(rd, range, value);
 5871|  4.32k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  4.32k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  4.32k|    {
 5852|  4.32k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  4.32k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.32k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.32k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 57, False: 4.26k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     57|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     57|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     57|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     57|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     57|    }                                                  \
  |  |  |  | 3667|  4.32k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.26k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  4.26k|                        .transform_error(make_eof_scan_error));
 5854|  4.26k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  4.32k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3516|  4.26k|    {
 3517|  4.26k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.26k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  4.26k|        return read_default_with_base(range, value, 10);
 3519|  4.26k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3480|  4.26k|    {
 3481|  4.26k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  4.26k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.26k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.26k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.26k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  4.26k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.26k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  4.26k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|  4.26k|        if constexpr (!std::is_signed_v<T>) {
 3485|  4.26k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3485:17): [True: 54, False: 4.21k]
  ------------------
 3486|     54|                return unexpected_scan_error(
 3487|     54|                    scan_error::invalid_scanned_value,
 3488|     54|                    "Unexpected '-' sign when parsing an "
 3489|     54|                    "unsigned value");
 3490|     54|            }
 3491|  4.26k|        }
 3492|       |
 3493|  4.26k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 4.26k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  4.44k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  4.26k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.26k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.26k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.09k, False: 174]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.09k|    }                                                  \
  |  |  |  | 3667|  4.26k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    174|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  4.44k|                parse_integer_digits_without_thsep(
 3500|  4.44k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  4.44k|                    prefix_result.parsed_base));
 3502|       |
 3503|  4.44k|        auto buf = make_contiguous_buffer(
 3504|  4.44k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  4.44k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|    174|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    174|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    174|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    174|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 33, False: 141]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     33|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     33|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     33|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     33|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     33|    }                                                  \
  |  |  |  | 3667|    174|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    141|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|    141|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|    141|                                    prefix_result.parsed_base));
 3508|       |
 3509|    141|        return ranges::next(prefix_result.iterator,
 3510|    141|                            ranges::distance(buf.view().begin(), result_it));
 3511|  4.44k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5859|  4.34k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  4.34k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  4.34k|            auto rd = make_reader<T, char_type>();
 5869|  4.34k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 4.34k, False: 0]
  ------------------
 5870|  4.34k|                return impl(rd, range, value);
 5871|  4.34k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  4.34k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  4.34k|    {
 5852|  4.34k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  4.34k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.34k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.34k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 57, False: 4.28k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     57|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     57|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     57|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     57|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     57|    }                                                  \
  |  |  |  | 3667|  4.34k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  4.28k|                        .transform_error(make_eof_scan_error));
 5854|  4.28k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  4.34k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3516|  4.28k|    {
 3517|  4.28k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.28k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  4.28k|        return read_default_with_base(range, value, 10);
 3519|  4.28k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3480|  4.28k|    {
 3481|  4.28k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  4.28k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.28k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.28k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.28k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  4.28k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  4.28k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|  4.28k|        if constexpr (!std::is_signed_v<T>) {
 3485|  4.28k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3485:17): [True: 54, False: 4.23k]
  ------------------
 3486|     54|                return unexpected_scan_error(
 3487|     54|                    scan_error::invalid_scanned_value,
 3488|     54|                    "Unexpected '-' sign when parsing an "
 3489|     54|                    "unsigned value");
 3490|     54|            }
 3491|  4.28k|        }
 3492|       |
 3493|  4.28k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 4.28k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  4.46k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  4.28k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.28k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.28k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.10k, False: 177]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.10k|    }                                                  \
  |  |  |  | 3667|  4.28k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    177|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  4.46k|                parse_integer_digits_without_thsep(
 3500|  4.46k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  4.46k|                    prefix_result.parsed_base));
 3502|       |
 3503|  4.46k|        auto buf = make_contiguous_buffer(
 3504|  4.46k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  4.46k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|    177|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    177|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    177|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    177|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18, False: 159]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     18|    }                                                  \
  |  |  |  | 3667|    177|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    159|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|    159|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|    159|                                    prefix_result.parsed_base));
 3508|       |
 3509|    159|        return ranges::next(prefix_result.iterator,
 3510|    159|                            ranges::distance(buf.view().begin(), result_it));
 3511|  4.46k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5859|  4.36k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  4.36k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  4.36k|            auto rd = make_reader<T, char_type>();
 5869|  4.36k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 4.36k, False: 0]
  ------------------
 5870|  4.36k|                return impl(rd, range, value);
 5871|  4.36k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  4.36k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  4.36k|    {
 5852|  4.36k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  4.36k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.36k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.36k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 57, False: 4.30k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     57|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     57|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     57|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     57|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     57|    }                                                  \
  |  |  |  | 3667|  4.36k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  4.30k|                        .transform_error(make_eof_scan_error));
 5854|  4.30k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  4.36k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3516|  4.30k|    {
 3517|  4.30k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.30k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  4.30k|        return read_default_with_base(range, value, 10);
 3519|  4.30k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3480|  4.30k|    {
 3481|  4.30k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  4.30k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.30k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.30k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.30k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  4.30k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  4.30k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|  4.30k|        if constexpr (!std::is_signed_v<T>) {
 3485|  4.30k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3485:17): [True: 60, False: 4.24k]
  ------------------
 3486|     60|                return unexpected_scan_error(
 3487|     60|                    scan_error::invalid_scanned_value,
 3488|     60|                    "Unexpected '-' sign when parsing an "
 3489|     60|                    "unsigned value");
 3490|     60|            }
 3491|  4.30k|        }
 3492|       |
 3493|  4.30k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 4.30k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  4.49k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  4.30k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.30k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.30k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.11k, False: 189]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.11k|    }                                                  \
  |  |  |  | 3667|  4.30k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    189|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  4.49k|                parse_integer_digits_without_thsep(
 3500|  4.49k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  4.49k|                    prefix_result.parsed_base));
 3502|       |
 3503|  4.49k|        auto buf = make_contiguous_buffer(
 3504|  4.49k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  4.49k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|    189|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    189|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    189|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    189|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 189]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    189|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    189|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|    189|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|    189|                                    prefix_result.parsed_base));
 3508|       |
 3509|    189|        return ranges::next(prefix_result.iterator,
 3510|    189|                            ranges::distance(buf.view().begin(), result_it));
 3511|  4.49k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|  15.7k|    {
 3481|  15.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  15.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  15.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  15.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  15.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 15.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  15.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  15.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  15.7k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|       |        if constexpr (!std::is_signed_v<T>) {
 3485|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3486|       |                return unexpected_scan_error(
 3487|       |                    scan_error::invalid_scanned_value,
 3488|       |                    "Unexpected '-' sign when parsing an "
 3489|       |                    "unsigned value");
 3490|       |            }
 3491|       |        }
 3492|       |
 3493|  15.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 15.7k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  31.4k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  15.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  15.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  15.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  15.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 45, False: 15.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     45|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     45|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     45|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     45|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     45|    }                                                  \
  |  |  |  | 3667|  15.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  15.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  31.4k|                parse_integer_digits_without_thsep(
 3500|  31.4k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  31.4k|                    prefix_result.parsed_base));
 3502|       |
 3503|  31.4k|        auto buf = make_contiguous_buffer(
 3504|  31.4k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  31.4k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  15.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  15.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  15.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  15.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.67k, False: 14.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.67k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.67k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.67k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.67k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.67k|    }                                                  \
  |  |  |  | 3667|  15.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|  14.0k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|  14.0k|                                    prefix_result.parsed_base));
 3508|       |
 3509|  14.0k|        return ranges::next(prefix_result.iterator,
 3510|  14.0k|                            ranges::distance(buf.view().begin(), result_it));
 3511|  31.4k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|  18.1k|    {
 3481|  18.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  18.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  18.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  18.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  18.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 18.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  18.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  18.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  18.1k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|       |        if constexpr (!std::is_signed_v<T>) {
 3485|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3486|       |                return unexpected_scan_error(
 3487|       |                    scan_error::invalid_scanned_value,
 3488|       |                    "Unexpected '-' sign when parsing an "
 3489|       |                    "unsigned value");
 3490|       |            }
 3491|       |        }
 3492|       |
 3493|  18.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 18.1k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  36.1k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  18.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  18.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  18.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  18.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 69, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     69|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     69|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     69|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     69|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     69|    }                                                  \
  |  |  |  | 3667|  18.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  36.1k|                parse_integer_digits_without_thsep(
 3500|  36.1k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  36.1k|                    prefix_result.parsed_base));
 3502|       |
 3503|  36.1k|        auto buf = make_contiguous_buffer(
 3504|  36.1k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  36.1k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.53k, False: 16.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.53k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.53k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.53k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.53k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.53k|    }                                                  \
  |  |  |  | 3667|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  16.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|  16.5k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|  16.5k|                                    prefix_result.parsed_base));
 3508|       |
 3509|  16.5k|        return ranges::next(prefix_result.iterator,
 3510|  16.5k|                            ranges::distance(buf.view().begin(), result_it));
 3511|  36.1k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|  18.4k|    {
 3481|  18.4k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  18.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  18.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  18.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  18.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 18.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  18.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  18.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  18.4k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|       |        if constexpr (!std::is_signed_v<T>) {
 3485|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3486|       |                return unexpected_scan_error(
 3487|       |                    scan_error::invalid_scanned_value,
 3488|       |                    "Unexpected '-' sign when parsing an "
 3489|       |                    "unsigned value");
 3490|       |            }
 3491|       |        }
 3492|       |
 3493|  18.4k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 18.4k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  36.7k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  18.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  18.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  18.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  18.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 81, False: 18.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     81|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     81|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     81|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     81|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     81|    }                                                  \
  |  |  |  | 3667|  18.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  18.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  36.7k|                parse_integer_digits_without_thsep(
 3500|  36.7k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  36.7k|                    prefix_result.parsed_base));
 3502|       |
 3503|  36.7k|        auto buf = make_contiguous_buffer(
 3504|  36.7k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  36.7k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  18.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  18.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  18.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.47k, False: 16.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.47k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.47k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.47k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.47k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.47k|    }                                                  \
  |  |  |  | 3667|  18.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  16.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|  16.8k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|  16.8k|                                    prefix_result.parsed_base));
 3508|       |
 3509|  16.8k|        return ranges::next(prefix_result.iterator,
 3510|  16.8k|                            ranges::distance(buf.view().begin(), result_it));
 3511|  36.7k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|  13.2k|    {
 3481|  13.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  13.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  13.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  13.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  13.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 13.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  13.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  13.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  13.2k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|  13.2k|        if constexpr (!std::is_signed_v<T>) {
 3485|  13.2k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3485:17): [True: 780, False: 12.4k]
  ------------------
 3486|    780|                return unexpected_scan_error(
 3487|    780|                    scan_error::invalid_scanned_value,
 3488|    780|                    "Unexpected '-' sign when parsing an "
 3489|    780|                    "unsigned value");
 3490|    780|            }
 3491|  13.2k|        }
 3492|       |
 3493|  13.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 13.2k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  26.4k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  13.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  13.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  13.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  13.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 13.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     12|    }                                                  \
  |  |  |  | 3667|  13.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  13.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  26.4k|                parse_integer_digits_without_thsep(
 3500|  26.4k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  26.4k|                    prefix_result.parsed_base));
 3502|       |
 3503|  26.4k|        auto buf = make_contiguous_buffer(
 3504|  26.4k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  26.4k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  13.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  13.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  13.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  13.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.04k, False: 12.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.04k|    }                                                  \
  |  |  |  | 3667|  13.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|  12.1k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|  12.1k|                                    prefix_result.parsed_base));
 3508|       |
 3509|  12.1k|        return ranges::next(prefix_result.iterator,
 3510|  12.1k|                            ranges::distance(buf.view().begin(), result_it));
 3511|  26.4k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|  14.4k|    {
 3481|  14.4k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  14.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 14.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  14.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  14.4k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|  14.4k|        if constexpr (!std::is_signed_v<T>) {
 3485|  14.4k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3485:17): [True: 807, False: 13.6k]
  ------------------
 3486|    807|                return unexpected_scan_error(
 3487|    807|                    scan_error::invalid_scanned_value,
 3488|    807|                    "Unexpected '-' sign when parsing an "
 3489|    807|                    "unsigned value");
 3490|    807|            }
 3491|  14.4k|        }
 3492|       |
 3493|  14.4k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 14.4k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  28.9k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  14.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 14.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     12|    }                                                  \
  |  |  |  | 3667|  14.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  28.9k|                parse_integer_digits_without_thsep(
 3500|  28.9k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  28.9k|                    prefix_result.parsed_base));
 3502|       |
 3503|  28.9k|        auto buf = make_contiguous_buffer(
 3504|  28.9k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  28.9k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  14.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 954, False: 13.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    954|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    954|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    954|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    954|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    954|    }                                                  \
  |  |  |  | 3667|  14.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  13.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|  13.5k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|  13.5k|                                    prefix_result.parsed_base));
 3508|       |
 3509|  13.5k|        return ranges::next(prefix_result.iterator,
 3510|  13.5k|                            ranges::distance(buf.view().begin(), result_it));
 3511|  28.9k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|  14.6k|    {
 3481|  14.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  14.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 14.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  14.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  14.6k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|  14.6k|        if constexpr (!std::is_signed_v<T>) {
 3485|  14.6k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3485:17): [True: 840, False: 13.7k]
  ------------------
 3486|    840|                return unexpected_scan_error(
 3487|    840|                    scan_error::invalid_scanned_value,
 3488|    840|                    "Unexpected '-' sign when parsing an "
 3489|    840|                    "unsigned value");
 3490|    840|            }
 3491|  14.6k|        }
 3492|       |
 3493|  14.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 14.6k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  29.2k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  14.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 14.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     12|    }                                                  \
  |  |  |  | 3667|  14.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  29.2k|                parse_integer_digits_without_thsep(
 3500|  29.2k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  29.2k|                    prefix_result.parsed_base));
 3502|       |
 3503|  29.2k|        auto buf = make_contiguous_buffer(
 3504|  29.2k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  29.2k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  14.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 894, False: 13.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    894|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    894|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    894|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    894|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    894|    }                                                  \
  |  |  |  | 3667|  14.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  13.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|  13.7k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|  13.7k|                                    prefix_result.parsed_base));
 3508|       |
 3509|  13.7k|        return ranges::next(prefix_result.iterator,
 3510|  13.7k|                            ranges::distance(buf.view().begin(), result_it));
 3511|  29.2k|    }

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|    706|{
   52|    706|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|    706|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    706|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|    706|    string_buffer.resize(size);
   56|    706|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|    706|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|    706|    const auto wsv_reinterpret_size =
   61|    706|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 106, False: 600]
  ------------------
   62|    706|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|    706|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|    706|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|    706|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|    706|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|    706|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|    706|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|    706|{
  122|    706|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|    706|    auto& buf = get_format_string_view_buffer<CharT>();
  124|    706|    buf.resize(sizeof...(Args));
  125|    706|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|    706|    return buf;
  127|    706|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  107|    706|{
  108|    706|    if constexpr (std::is_same_v<CharT, char>) {
  109|    706|        return format_string_view_buffer;
  110|       |    }
  111|       |    else {
  112|       |        return wformat_string_view_buffer;
  113|       |    }
  114|    706|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|    706|{
  185|    706|    do_basic_run_for_source<CharT>(data, format_strings);
  186|    706|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|    706|                                   format_strings);
  188|    706|}
_ZN3scn4fuzz21do_basic_run_for_typeIcaNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|    706|{
  133|       |    // Regular scan
  134|  7.06k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 7.06k, False: 706]
  ------------------
  135|  7.06k|        auto it = scn::ranges::begin(source);
  136|  34.5k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  34.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  34.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  34.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  34.5k|            auto result = scn::scan<T>(
  139|  34.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  34.5k|                scn::runtime_format(f));
  141|  34.5k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 7.06k, False: 27.4k]
  ------------------
  142|  7.06k|                break;
  143|  7.06k|            }
  144|  27.4k|            it = result->begin();
  145|  27.4k|        }
  146|  7.06k|    }
  147|       |
  148|       |    // scan localized
  149|  7.06k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 7.06k, False: 706]
  ------------------
  150|  7.06k|        auto it = scn::ranges::begin(source);
  151|  34.5k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  34.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  34.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  34.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  34.5k|            auto result = scn::scan<T>(
  154|  34.5k|                global_locale,
  155|  34.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  34.5k|                scn::runtime_format(f));
  157|  34.5k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 7.06k, False: 27.4k]
  ------------------
  158|  7.06k|                break;
  159|  7.06k|            }
  160|  27.4k|            it = result->begin();
  161|  27.4k|        }
  162|  7.06k|    }
  163|       |
  164|       |    // scan_value
  165|    706|    {
  166|    706|        auto it = scn::ranges::begin(source);
  167|  5.38k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  5.38k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  5.38k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.38k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  5.38k|            auto result = scn::scan_value<T>(
  170|  5.38k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  5.38k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 706, False: 4.67k]
  ------------------
  172|    706|                break;
  173|    706|            }
  174|  4.67k|            it = result->begin();
  175|  4.67k|        }
  176|    706|    }
  177|    706|}
_ZN3scn4fuzz21do_basic_run_for_typeIchNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|    706|{
  133|       |    // Regular scan
  134|  7.06k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 7.06k, False: 706]
  ------------------
  135|  7.06k|        auto it = scn::ranges::begin(source);
  136|  30.4k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  30.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  30.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  30.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  30.4k|            auto result = scn::scan<T>(
  139|  30.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  30.4k|                scn::runtime_format(f));
  141|  30.4k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 7.06k, False: 23.3k]
  ------------------
  142|  7.06k|                break;
  143|  7.06k|            }
  144|  23.3k|            it = result->begin();
  145|  23.3k|        }
  146|  7.06k|    }
  147|       |
  148|       |    // scan localized
  149|  7.06k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 7.06k, False: 706]
  ------------------
  150|  7.06k|        auto it = scn::ranges::begin(source);
  151|  30.4k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  30.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  30.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  30.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  30.4k|            auto result = scn::scan<T>(
  154|  30.4k|                global_locale,
  155|  30.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  30.4k|                scn::runtime_format(f));
  157|  30.4k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 7.06k, False: 23.3k]
  ------------------
  158|  7.06k|                break;
  159|  7.06k|            }
  160|  23.3k|            it = result->begin();
  161|  23.3k|        }
  162|  7.06k|    }
  163|       |
  164|       |    // scan_value
  165|    706|    {
  166|    706|        auto it = scn::ranges::begin(source);
  167|  4.49k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  4.49k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  4.49k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.49k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  4.49k|            auto result = scn::scan_value<T>(
  170|  4.49k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  4.49k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 706, False: 3.78k]
  ------------------
  172|    706|                break;
  173|    706|            }
  174|  3.78k|            it = result->begin();
  175|  3.78k|        }
  176|    706|    }
  177|    706|}
_ZN3scn4fuzz21do_basic_run_for_typeIciNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|    706|{
  133|       |    // Regular scan
  134|  7.06k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 7.06k, False: 706]
  ------------------
  135|  7.06k|        auto it = scn::ranges::begin(source);
  136|  40.3k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  40.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  40.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  40.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  40.3k|            auto result = scn::scan<T>(
  139|  40.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  40.3k|                scn::runtime_format(f));
  141|  40.3k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 7.06k, False: 33.2k]
  ------------------
  142|  7.06k|                break;
  143|  7.06k|            }
  144|  33.2k|            it = result->begin();
  145|  33.2k|        }
  146|  7.06k|    }
  147|       |
  148|       |    // scan localized
  149|  7.06k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 7.06k, False: 706]
  ------------------
  150|  7.06k|        auto it = scn::ranges::begin(source);
  151|  40.3k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  40.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  40.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  40.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  40.3k|            auto result = scn::scan<T>(
  154|  40.3k|                global_locale,
  155|  40.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  40.3k|                scn::runtime_format(f));
  157|  40.3k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 7.06k, False: 33.2k]
  ------------------
  158|  7.06k|                break;
  159|  7.06k|            }
  160|  33.2k|            it = result->begin();
  161|  33.2k|        }
  162|  7.06k|    }
  163|       |
  164|       |    // scan_value
  165|    706|    {
  166|    706|        auto it = scn::ranges::begin(source);
  167|  6.21k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  6.21k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  6.21k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.21k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  6.21k|            auto result = scn::scan_value<T>(
  170|  6.21k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  6.21k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 706, False: 5.50k]
  ------------------
  172|    706|                break;
  173|    706|            }
  174|  5.50k|            it = result->begin();
  175|  5.50k|        }
  176|    706|    }
  177|    706|}
_ZN3scn4fuzz21do_basic_run_for_typeIcjNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|    706|{
  133|       |    // Regular scan
  134|  7.06k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 7.06k, False: 706]
  ------------------
  135|  7.06k|        auto it = scn::ranges::begin(source);
  136|  32.9k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  32.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  32.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  32.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  32.9k|            auto result = scn::scan<T>(
  139|  32.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  32.9k|                scn::runtime_format(f));
  141|  32.9k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 7.06k, False: 25.9k]
  ------------------
  142|  7.06k|                break;
  143|  7.06k|            }
  144|  25.9k|            it = result->begin();
  145|  25.9k|        }
  146|  7.06k|    }
  147|       |
  148|       |    // scan localized
  149|  7.06k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 7.06k, False: 706]
  ------------------
  150|  7.06k|        auto it = scn::ranges::begin(source);
  151|  32.9k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  32.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  32.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  32.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  32.9k|            auto result = scn::scan<T>(
  154|  32.9k|                global_locale,
  155|  32.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  32.9k|                scn::runtime_format(f));
  157|  32.9k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 7.06k, False: 25.9k]
  ------------------
  158|  7.06k|                break;
  159|  7.06k|            }
  160|  25.9k|            it = result->begin();
  161|  25.9k|        }
  162|  7.06k|    }
  163|       |
  164|       |    // scan_value
  165|    706|    {
  166|    706|        auto it = scn::ranges::begin(source);
  167|  4.93k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  4.93k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  4.93k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.93k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  4.93k|            auto result = scn::scan_value<T>(
  170|  4.93k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  4.93k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 706, False: 4.23k]
  ------------------
  172|    706|                break;
  173|    706|            }
  174|  4.23k|            it = result->begin();
  175|  4.23k|        }
  176|    706|    }
  177|    706|}
_ZN3scn4fuzz21do_basic_run_for_typeIcxNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|    706|{
  133|       |    // Regular scan
  134|  7.06k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 7.06k, False: 706]
  ------------------
  135|  7.06k|        auto it = scn::ranges::begin(source);
  136|  41.0k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  41.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  41.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  41.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  41.0k|            auto result = scn::scan<T>(
  139|  41.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  41.0k|                scn::runtime_format(f));
  141|  41.0k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 7.06k, False: 33.9k]
  ------------------
  142|  7.06k|                break;
  143|  7.06k|            }
  144|  33.9k|            it = result->begin();
  145|  33.9k|        }
  146|  7.06k|    }
  147|       |
  148|       |    // scan localized
  149|  7.06k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 7.06k, False: 706]
  ------------------
  150|  7.06k|        auto it = scn::ranges::begin(source);
  151|  41.0k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  41.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  41.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  41.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  41.0k|            auto result = scn::scan<T>(
  154|  41.0k|                global_locale,
  155|  41.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  41.0k|                scn::runtime_format(f));
  157|  41.0k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 7.06k, False: 33.9k]
  ------------------
  158|  7.06k|                break;
  159|  7.06k|            }
  160|  33.9k|            it = result->begin();
  161|  33.9k|        }
  162|  7.06k|    }
  163|       |
  164|       |    // scan_value
  165|    706|    {
  166|    706|        auto it = scn::ranges::begin(source);
  167|  6.32k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  6.32k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  6.32k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.32k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  6.32k|            auto result = scn::scan_value<T>(
  170|  6.32k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  6.32k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 706, False: 5.61k]
  ------------------
  172|    706|                break;
  173|    706|            }
  174|  5.61k|            it = result->begin();
  175|  5.61k|        }
  176|    706|    }
  177|    706|}
_ZN3scn4fuzz21do_basic_run_for_typeIcyNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|    706|{
  133|       |    // Regular scan
  134|  7.06k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 7.06k, False: 706]
  ------------------
  135|  7.06k|        auto it = scn::ranges::begin(source);
  136|  33.3k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  33.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  33.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  33.3k|            auto result = scn::scan<T>(
  139|  33.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  33.3k|                scn::runtime_format(f));
  141|  33.3k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 7.06k, False: 26.2k]
  ------------------
  142|  7.06k|                break;
  143|  7.06k|            }
  144|  26.2k|            it = result->begin();
  145|  26.2k|        }
  146|  7.06k|    }
  147|       |
  148|       |    // scan localized
  149|  7.06k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 7.06k, False: 706]
  ------------------
  150|  7.06k|        auto it = scn::ranges::begin(source);
  151|  33.3k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  33.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  33.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  33.3k|            auto result = scn::scan<T>(
  154|  33.3k|                global_locale,
  155|  33.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  33.3k|                scn::runtime_format(f));
  157|  33.3k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 7.06k, False: 26.2k]
  ------------------
  158|  7.06k|                break;
  159|  7.06k|            }
  160|  26.2k|            it = result->begin();
  161|  26.2k|        }
  162|  7.06k|    }
  163|       |
  164|       |    // scan_value
  165|    706|    {
  166|    706|        auto it = scn::ranges::begin(source);
  167|  5.00k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  5.00k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  5.00k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.00k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  5.00k|            auto result = scn::scan_value<T>(
  170|  5.00k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  5.00k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 706, False: 4.29k]
  ------------------
  172|    706|                break;
  173|    706|            }
  174|  4.29k|            it = result->begin();
  175|  4.29k|        }
  176|    706|    }
  177|    706|}
_ZN3scn4fuzz21do_basic_run_for_typeIcaKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|    706|{
  133|       |    // Regular scan
  134|  7.06k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 7.06k, False: 706]
  ------------------
  135|  7.06k|        auto it = scn::ranges::begin(source);
  136|  34.5k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  34.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  34.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  34.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  34.5k|            auto result = scn::scan<T>(
  139|  34.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  34.5k|                scn::runtime_format(f));
  141|  34.5k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 7.06k, False: 27.4k]
  ------------------
  142|  7.06k|                break;
  143|  7.06k|            }
  144|  27.4k|            it = result->begin();
  145|  27.4k|        }
  146|  7.06k|    }
  147|       |
  148|       |    // scan localized
  149|  7.06k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 7.06k, False: 706]
  ------------------
  150|  7.06k|        auto it = scn::ranges::begin(source);
  151|  34.5k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  34.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  34.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  34.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  34.5k|            auto result = scn::scan<T>(
  154|  34.5k|                global_locale,
  155|  34.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  34.5k|                scn::runtime_format(f));
  157|  34.5k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 7.06k, False: 27.4k]
  ------------------
  158|  7.06k|                break;
  159|  7.06k|            }
  160|  27.4k|            it = result->begin();
  161|  27.4k|        }
  162|  7.06k|    }
  163|       |
  164|       |    // scan_value
  165|    706|    {
  166|    706|        auto it = scn::ranges::begin(source);
  167|  5.37k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  5.37k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  5.37k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.37k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  5.37k|            auto result = scn::scan_value<T>(
  170|  5.37k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  5.37k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 706, False: 4.67k]
  ------------------
  172|    706|                break;
  173|    706|            }
  174|  4.67k|            it = result->begin();
  175|  4.67k|        }
  176|    706|    }
  177|    706|}
_ZN3scn4fuzz21do_basic_run_for_typeIchKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|    706|{
  133|       |    // Regular scan
  134|  7.06k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 7.06k, False: 706]
  ------------------
  135|  7.06k|        auto it = scn::ranges::begin(source);
  136|  30.4k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  30.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  30.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  30.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  30.4k|            auto result = scn::scan<T>(
  139|  30.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  30.4k|                scn::runtime_format(f));
  141|  30.4k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 7.06k, False: 23.3k]
  ------------------
  142|  7.06k|                break;
  143|  7.06k|            }
  144|  23.3k|            it = result->begin();
  145|  23.3k|        }
  146|  7.06k|    }
  147|       |
  148|       |    // scan localized
  149|  7.06k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 7.06k, False: 706]
  ------------------
  150|  7.06k|        auto it = scn::ranges::begin(source);
  151|  30.4k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  30.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  30.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  30.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  30.4k|            auto result = scn::scan<T>(
  154|  30.4k|                global_locale,
  155|  30.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  30.4k|                scn::runtime_format(f));
  157|  30.4k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 7.06k, False: 23.3k]
  ------------------
  158|  7.06k|                break;
  159|  7.06k|            }
  160|  23.3k|            it = result->begin();
  161|  23.3k|        }
  162|  7.06k|    }
  163|       |
  164|       |    // scan_value
  165|    706|    {
  166|    706|        auto it = scn::ranges::begin(source);
  167|  4.48k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  4.48k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  4.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  4.48k|            auto result = scn::scan_value<T>(
  170|  4.48k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  4.48k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 706, False: 3.78k]
  ------------------
  172|    706|                break;
  173|    706|            }
  174|  3.78k|            it = result->begin();
  175|  3.78k|        }
  176|    706|    }
  177|    706|}
_ZN3scn4fuzz21do_basic_run_for_typeIciKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|    706|{
  133|       |    // Regular scan
  134|  7.06k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 7.06k, False: 706]
  ------------------
  135|  7.06k|        auto it = scn::ranges::begin(source);
  136|  40.1k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  40.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  40.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  40.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  40.1k|            auto result = scn::scan<T>(
  139|  40.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  40.1k|                scn::runtime_format(f));
  141|  40.1k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 7.06k, False: 33.1k]
  ------------------
  142|  7.06k|                break;
  143|  7.06k|            }
  144|  33.1k|            it = result->begin();
  145|  33.1k|        }
  146|  7.06k|    }
  147|       |
  148|       |    // scan localized
  149|  7.06k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 7.06k, False: 706]
  ------------------
  150|  7.06k|        auto it = scn::ranges::begin(source);
  151|  40.1k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  40.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  40.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  40.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  40.1k|            auto result = scn::scan<T>(
  154|  40.1k|                global_locale,
  155|  40.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  40.1k|                scn::runtime_format(f));
  157|  40.1k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 7.06k, False: 33.1k]
  ------------------
  158|  7.06k|                break;
  159|  7.06k|            }
  160|  33.1k|            it = result->begin();
  161|  33.1k|        }
  162|  7.06k|    }
  163|       |
  164|       |    // scan_value
  165|    706|    {
  166|    706|        auto it = scn::ranges::begin(source);
  167|  6.01k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  6.01k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  6.01k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.01k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  6.01k|            auto result = scn::scan_value<T>(
  170|  6.01k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  6.01k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 706, False: 5.30k]
  ------------------
  172|    706|                break;
  173|    706|            }
  174|  5.30k|            it = result->begin();
  175|  5.30k|        }
  176|    706|    }
  177|    706|}
_ZN3scn4fuzz21do_basic_run_for_typeIcjKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|    706|{
  133|       |    // Regular scan
  134|  7.06k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 7.06k, False: 706]
  ------------------
  135|  7.06k|        auto it = scn::ranges::begin(source);
  136|  32.9k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  32.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  32.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  32.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  32.9k|            auto result = scn::scan<T>(
  139|  32.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  32.9k|                scn::runtime_format(f));
  141|  32.9k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 7.06k, False: 25.9k]
  ------------------
  142|  7.06k|                break;
  143|  7.06k|            }
  144|  25.9k|            it = result->begin();
  145|  25.9k|        }
  146|  7.06k|    }
  147|       |
  148|       |    // scan localized
  149|  7.06k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 7.06k, False: 706]
  ------------------
  150|  7.06k|        auto it = scn::ranges::begin(source);
  151|  32.9k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  32.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  32.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  32.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  32.9k|            auto result = scn::scan<T>(
  154|  32.9k|                global_locale,
  155|  32.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  32.9k|                scn::runtime_format(f));
  157|  32.9k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 7.06k, False: 25.9k]
  ------------------
  158|  7.06k|                break;
  159|  7.06k|            }
  160|  25.9k|            it = result->begin();
  161|  25.9k|        }
  162|  7.06k|    }
  163|       |
  164|       |    // scan_value
  165|    706|    {
  166|    706|        auto it = scn::ranges::begin(source);
  167|  4.91k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  4.91k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  4.91k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.91k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  4.91k|            auto result = scn::scan_value<T>(
  170|  4.91k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  4.91k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 706, False: 4.21k]
  ------------------
  172|    706|                break;
  173|    706|            }
  174|  4.21k|            it = result->begin();
  175|  4.21k|        }
  176|    706|    }
  177|    706|}
_ZN3scn4fuzz21do_basic_run_for_typeIcxKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|    706|{
  133|       |    // Regular scan
  134|  7.06k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 7.06k, False: 706]
  ------------------
  135|  7.06k|        auto it = scn::ranges::begin(source);
  136|  40.8k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  40.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  40.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  40.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  40.8k|            auto result = scn::scan<T>(
  139|  40.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  40.8k|                scn::runtime_format(f));
  141|  40.8k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 7.06k, False: 33.7k]
  ------------------
  142|  7.06k|                break;
  143|  7.06k|            }
  144|  33.7k|            it = result->begin();
  145|  33.7k|        }
  146|  7.06k|    }
  147|       |
  148|       |    // scan localized
  149|  7.06k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 7.06k, False: 706]
  ------------------
  150|  7.06k|        auto it = scn::ranges::begin(source);
  151|  40.8k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  40.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  40.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  40.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  40.8k|            auto result = scn::scan<T>(
  154|  40.8k|                global_locale,
  155|  40.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  40.8k|                scn::runtime_format(f));
  157|  40.8k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 7.06k, False: 33.7k]
  ------------------
  158|  7.06k|                break;
  159|  7.06k|            }
  160|  33.7k|            it = result->begin();
  161|  33.7k|        }
  162|  7.06k|    }
  163|       |
  164|       |    // scan_value
  165|    706|    {
  166|    706|        auto it = scn::ranges::begin(source);
  167|  6.11k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  6.11k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  6.11k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.11k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  6.11k|            auto result = scn::scan_value<T>(
  170|  6.11k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  6.11k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 706, False: 5.41k]
  ------------------
  172|    706|                break;
  173|    706|            }
  174|  5.41k|            it = result->begin();
  175|  5.41k|        }
  176|    706|    }
  177|    706|}
_ZN3scn4fuzz21do_basic_run_for_typeIcyKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|    706|{
  133|       |    // Regular scan
  134|  7.06k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 7.06k, False: 706]
  ------------------
  135|  7.06k|        auto it = scn::ranges::begin(source);
  136|  33.3k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  33.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  33.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  33.3k|            auto result = scn::scan<T>(
  139|  33.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  33.3k|                scn::runtime_format(f));
  141|  33.3k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 7.06k, False: 26.2k]
  ------------------
  142|  7.06k|                break;
  143|  7.06k|            }
  144|  26.2k|            it = result->begin();
  145|  26.2k|        }
  146|  7.06k|    }
  147|       |
  148|       |    // scan localized
  149|  7.06k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 7.06k, False: 706]
  ------------------
  150|  7.06k|        auto it = scn::ranges::begin(source);
  151|  33.3k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  33.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  33.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  33.3k|            auto result = scn::scan<T>(
  154|  33.3k|                global_locale,
  155|  33.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  33.3k|                scn::runtime_format(f));
  157|  33.3k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 7.06k, False: 26.2k]
  ------------------
  158|  7.06k|                break;
  159|  7.06k|            }
  160|  26.2k|            it = result->begin();
  161|  26.2k|        }
  162|  7.06k|    }
  163|       |
  164|       |    // scan_value
  165|    706|    {
  166|    706|        auto it = scn::ranges::begin(source);
  167|  4.97k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  4.97k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  4.97k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.97k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  4.97k|            auto result = scn::scan_value<T>(
  170|  4.97k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  4.97k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 706, False: 4.27k]
  ------------------
  172|    706|                break;
  173|    706|            }
  174|  4.27k|            it = result->begin();
  175|  4.27k|        }
  176|    706|    }
  177|    706|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   89|    706|{
   90|    706|    using char_type = ranges::range_value_t<Source>;
   91|    706|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|    706|    deque.clear();
   93|    706|    std::copy(ranges::begin(source), ranges::end(source),
   94|    706|              std::back_inserter(deque));
   95|    706|    return deque;
   96|    706|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   78|    706|{
   79|    706|    if constexpr (std::is_same_v<CharT, char>) {
   80|    706|        return noncontiguous_buffer;
   81|       |    }
   82|       |    else {
   83|       |        return wnoncontiguous_buffer;
   84|       |    }
   85|    706|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|    706|{
  122|    706|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|    706|    auto& buf = get_format_string_view_buffer<CharT>();
  124|    706|    buf.resize(sizeof...(Args));
  125|    706|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|    706|    return buf;
  127|    706|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  107|    706|{
  108|       |    if constexpr (std::is_same_v<CharT, char>) {
  109|       |        return format_string_view_buffer;
  110|       |    }
  111|    706|    else {
  112|    706|        return wformat_string_view_buffer;
  113|    706|    }
  114|    706|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  1.41k|{
  185|  1.41k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  1.41k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  1.41k|                                   format_strings);
  188|  1.41k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwaNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  1.41k|{
  133|       |    // Regular scan
  134|  14.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 14.1k, False: 1.41k]
  ------------------
  135|  14.1k|        auto it = scn::ranges::begin(source);
  136|  14.3k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  14.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  14.3k|            auto result = scn::scan<T>(
  139|  14.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  14.3k|                scn::runtime_format(f));
  141|  14.3k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 14.1k, False: 224]
  ------------------
  142|  14.1k|                break;
  143|  14.1k|            }
  144|    224|            it = result->begin();
  145|    224|        }
  146|  14.1k|    }
  147|       |
  148|       |    // scan localized
  149|  14.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 14.1k, False: 1.41k]
  ------------------
  150|  14.1k|        auto it = scn::ranges::begin(source);
  151|  14.3k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  14.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  14.3k|            auto result = scn::scan<T>(
  154|  14.3k|                global_locale,
  155|  14.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  14.3k|                scn::runtime_format(f));
  157|  14.3k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 14.1k, False: 224]
  ------------------
  158|  14.1k|                break;
  159|  14.1k|            }
  160|    224|            it = result->begin();
  161|    224|        }
  162|  14.1k|    }
  163|       |
  164|       |    // scan_value
  165|  1.41k|    {
  166|  1.41k|        auto it = scn::ranges::begin(source);
  167|  1.44k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.44k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.44k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.44k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.44k|            auto result = scn::scan_value<T>(
  170|  1.44k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.44k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.41k, False: 36]
  ------------------
  172|  1.41k|                break;
  173|  1.41k|            }
  174|     36|            it = result->begin();
  175|     36|        }
  176|  1.41k|    }
  177|  1.41k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwhNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  1.41k|{
  133|       |    // Regular scan
  134|  14.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 14.1k, False: 1.41k]
  ------------------
  135|  14.1k|        auto it = scn::ranges::begin(source);
  136|  14.3k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  14.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  14.3k|            auto result = scn::scan<T>(
  139|  14.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  14.3k|                scn::runtime_format(f));
  141|  14.3k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 14.1k, False: 191]
  ------------------
  142|  14.1k|                break;
  143|  14.1k|            }
  144|    191|            it = result->begin();
  145|    191|        }
  146|  14.1k|    }
  147|       |
  148|       |    // scan localized
  149|  14.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 14.1k, False: 1.41k]
  ------------------
  150|  14.1k|        auto it = scn::ranges::begin(source);
  151|  14.3k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  14.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  14.3k|            auto result = scn::scan<T>(
  154|  14.3k|                global_locale,
  155|  14.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  14.3k|                scn::runtime_format(f));
  157|  14.3k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 14.1k, False: 191]
  ------------------
  158|  14.1k|                break;
  159|  14.1k|            }
  160|    191|            it = result->begin();
  161|    191|        }
  162|  14.1k|    }
  163|       |
  164|       |    // scan_value
  165|  1.41k|    {
  166|  1.41k|        auto it = scn::ranges::begin(source);
  167|  1.44k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.44k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.44k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.44k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.44k|            auto result = scn::scan_value<T>(
  170|  1.44k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.44k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.41k, False: 29]
  ------------------
  172|  1.41k|                break;
  173|  1.41k|            }
  174|     29|            it = result->begin();
  175|     29|        }
  176|  1.41k|    }
  177|  1.41k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwiNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  1.41k|{
  133|       |    // Regular scan
  134|  14.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 14.1k, False: 1.41k]
  ------------------
  135|  14.1k|        auto it = scn::ranges::begin(source);
  136|  14.3k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  14.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  14.3k|            auto result = scn::scan<T>(
  139|  14.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  14.3k|                scn::runtime_format(f));
  141|  14.3k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 14.1k, False: 277]
  ------------------
  142|  14.1k|                break;
  143|  14.1k|            }
  144|    277|            it = result->begin();
  145|    277|        }
  146|  14.1k|    }
  147|       |
  148|       |    // scan localized
  149|  14.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 14.1k, False: 1.41k]
  ------------------
  150|  14.1k|        auto it = scn::ranges::begin(source);
  151|  14.3k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  14.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  14.3k|            auto result = scn::scan<T>(
  154|  14.3k|                global_locale,
  155|  14.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  14.3k|                scn::runtime_format(f));
  157|  14.3k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 14.1k, False: 277]
  ------------------
  158|  14.1k|                break;
  159|  14.1k|            }
  160|    277|            it = result->begin();
  161|    277|        }
  162|  14.1k|    }
  163|       |
  164|       |    // scan_value
  165|  1.41k|    {
  166|  1.41k|        auto it = scn::ranges::begin(source);
  167|  1.45k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.45k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.45k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.45k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.45k|            auto result = scn::scan_value<T>(
  170|  1.45k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.45k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.41k, False: 46]
  ------------------
  172|  1.41k|                break;
  173|  1.41k|            }
  174|     46|            it = result->begin();
  175|     46|        }
  176|  1.41k|    }
  177|  1.41k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwjNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  1.41k|{
  133|       |    // Regular scan
  134|  14.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 14.1k, False: 1.41k]
  ------------------
  135|  14.1k|        auto it = scn::ranges::begin(source);
  136|  14.3k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  14.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  14.3k|            auto result = scn::scan<T>(
  139|  14.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  14.3k|                scn::runtime_format(f));
  141|  14.3k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 14.1k, False: 220]
  ------------------
  142|  14.1k|                break;
  143|  14.1k|            }
  144|    220|            it = result->begin();
  145|    220|        }
  146|  14.1k|    }
  147|       |
  148|       |    // scan localized
  149|  14.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 14.1k, False: 1.41k]
  ------------------
  150|  14.1k|        auto it = scn::ranges::begin(source);
  151|  14.3k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  14.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  14.3k|            auto result = scn::scan<T>(
  154|  14.3k|                global_locale,
  155|  14.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  14.3k|                scn::runtime_format(f));
  157|  14.3k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 14.1k, False: 220]
  ------------------
  158|  14.1k|                break;
  159|  14.1k|            }
  160|    220|            it = result->begin();
  161|    220|        }
  162|  14.1k|    }
  163|       |
  164|       |    // scan_value
  165|  1.41k|    {
  166|  1.41k|        auto it = scn::ranges::begin(source);
  167|  1.44k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.44k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.44k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.44k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.44k|            auto result = scn::scan_value<T>(
  170|  1.44k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.44k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.41k, False: 35]
  ------------------
  172|  1.41k|                break;
  173|  1.41k|            }
  174|     35|            it = result->begin();
  175|     35|        }
  176|  1.41k|    }
  177|  1.41k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwxNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  1.41k|{
  133|       |    // Regular scan
  134|  14.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 14.1k, False: 1.41k]
  ------------------
  135|  14.1k|        auto it = scn::ranges::begin(source);
  136|  14.4k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  14.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  14.4k|            auto result = scn::scan<T>(
  139|  14.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  14.4k|                scn::runtime_format(f));
  141|  14.4k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 14.1k, False: 330]
  ------------------
  142|  14.1k|                break;
  143|  14.1k|            }
  144|    330|            it = result->begin();
  145|    330|        }
  146|  14.1k|    }
  147|       |
  148|       |    // scan localized
  149|  14.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 14.1k, False: 1.41k]
  ------------------
  150|  14.1k|        auto it = scn::ranges::begin(source);
  151|  14.4k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  14.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  14.4k|            auto result = scn::scan<T>(
  154|  14.4k|                global_locale,
  155|  14.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  14.4k|                scn::runtime_format(f));
  157|  14.4k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 14.1k, False: 330]
  ------------------
  158|  14.1k|                break;
  159|  14.1k|            }
  160|    330|            it = result->begin();
  161|    330|        }
  162|  14.1k|    }
  163|       |
  164|       |    // scan_value
  165|  1.41k|    {
  166|  1.41k|        auto it = scn::ranges::begin(source);
  167|  1.46k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.46k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.46k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.46k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.46k|            auto result = scn::scan_value<T>(
  170|  1.46k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.46k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.41k, False: 57]
  ------------------
  172|  1.41k|                break;
  173|  1.41k|            }
  174|     57|            it = result->begin();
  175|     57|        }
  176|  1.41k|    }
  177|  1.41k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwyNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  1.41k|{
  133|       |    // Regular scan
  134|  14.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 14.1k, False: 1.41k]
  ------------------
  135|  14.1k|        auto it = scn::ranges::begin(source);
  136|  14.3k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  14.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  14.3k|            auto result = scn::scan<T>(
  139|  14.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  14.3k|                scn::runtime_format(f));
  141|  14.3k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 14.1k, False: 261]
  ------------------
  142|  14.1k|                break;
  143|  14.1k|            }
  144|    261|            it = result->begin();
  145|    261|        }
  146|  14.1k|    }
  147|       |
  148|       |    // scan localized
  149|  14.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 14.1k, False: 1.41k]
  ------------------
  150|  14.1k|        auto it = scn::ranges::begin(source);
  151|  14.3k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  14.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  14.3k|            auto result = scn::scan<T>(
  154|  14.3k|                global_locale,
  155|  14.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  14.3k|                scn::runtime_format(f));
  157|  14.3k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 14.1k, False: 261]
  ------------------
  158|  14.1k|                break;
  159|  14.1k|            }
  160|    261|            it = result->begin();
  161|    261|        }
  162|  14.1k|    }
  163|       |
  164|       |    // scan_value
  165|  1.41k|    {
  166|  1.41k|        auto it = scn::ranges::begin(source);
  167|  1.45k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.45k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.45k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.45k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.45k|            auto result = scn::scan_value<T>(
  170|  1.45k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.45k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.41k, False: 43]
  ------------------
  172|  1.41k|                break;
  173|  1.41k|            }
  174|     43|            it = result->begin();
  175|     43|        }
  176|  1.41k|    }
  177|  1.41k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwaKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  1.41k|{
  133|       |    // Regular scan
  134|  14.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 14.1k, False: 1.41k]
  ------------------
  135|  14.1k|        auto it = scn::ranges::begin(source);
  136|  14.3k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  14.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  14.3k|            auto result = scn::scan<T>(
  139|  14.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  14.3k|                scn::runtime_format(f));
  141|  14.3k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 14.1k, False: 224]
  ------------------
  142|  14.1k|                break;
  143|  14.1k|            }
  144|    224|            it = result->begin();
  145|    224|        }
  146|  14.1k|    }
  147|       |
  148|       |    // scan localized
  149|  14.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 14.1k, False: 1.41k]
  ------------------
  150|  14.1k|        auto it = scn::ranges::begin(source);
  151|  14.3k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  14.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  14.3k|            auto result = scn::scan<T>(
  154|  14.3k|                global_locale,
  155|  14.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  14.3k|                scn::runtime_format(f));
  157|  14.3k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 14.1k, False: 224]
  ------------------
  158|  14.1k|                break;
  159|  14.1k|            }
  160|    224|            it = result->begin();
  161|    224|        }
  162|  14.1k|    }
  163|       |
  164|       |    // scan_value
  165|  1.41k|    {
  166|  1.41k|        auto it = scn::ranges::begin(source);
  167|  1.44k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.44k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.44k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.44k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.44k|            auto result = scn::scan_value<T>(
  170|  1.44k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.44k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.41k, False: 36]
  ------------------
  172|  1.41k|                break;
  173|  1.41k|            }
  174|     36|            it = result->begin();
  175|     36|        }
  176|  1.41k|    }
  177|  1.41k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwhKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  1.41k|{
  133|       |    // Regular scan
  134|  14.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 14.1k, False: 1.41k]
  ------------------
  135|  14.1k|        auto it = scn::ranges::begin(source);
  136|  14.3k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  14.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  14.3k|            auto result = scn::scan<T>(
  139|  14.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  14.3k|                scn::runtime_format(f));
  141|  14.3k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 14.1k, False: 191]
  ------------------
  142|  14.1k|                break;
  143|  14.1k|            }
  144|    191|            it = result->begin();
  145|    191|        }
  146|  14.1k|    }
  147|       |
  148|       |    // scan localized
  149|  14.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 14.1k, False: 1.41k]
  ------------------
  150|  14.1k|        auto it = scn::ranges::begin(source);
  151|  14.3k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  14.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  14.3k|            auto result = scn::scan<T>(
  154|  14.3k|                global_locale,
  155|  14.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  14.3k|                scn::runtime_format(f));
  157|  14.3k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 14.1k, False: 191]
  ------------------
  158|  14.1k|                break;
  159|  14.1k|            }
  160|    191|            it = result->begin();
  161|    191|        }
  162|  14.1k|    }
  163|       |
  164|       |    // scan_value
  165|  1.41k|    {
  166|  1.41k|        auto it = scn::ranges::begin(source);
  167|  1.44k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.44k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.44k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.44k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.44k|            auto result = scn::scan_value<T>(
  170|  1.44k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.44k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.41k, False: 29]
  ------------------
  172|  1.41k|                break;
  173|  1.41k|            }
  174|     29|            it = result->begin();
  175|     29|        }
  176|  1.41k|    }
  177|  1.41k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwiKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  1.41k|{
  133|       |    // Regular scan
  134|  14.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 14.1k, False: 1.41k]
  ------------------
  135|  14.1k|        auto it = scn::ranges::begin(source);
  136|  14.3k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  14.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  14.3k|            auto result = scn::scan<T>(
  139|  14.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  14.3k|                scn::runtime_format(f));
  141|  14.3k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 14.1k, False: 277]
  ------------------
  142|  14.1k|                break;
  143|  14.1k|            }
  144|    277|            it = result->begin();
  145|    277|        }
  146|  14.1k|    }
  147|       |
  148|       |    // scan localized
  149|  14.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 14.1k, False: 1.41k]
  ------------------
  150|  14.1k|        auto it = scn::ranges::begin(source);
  151|  14.3k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  14.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  14.3k|            auto result = scn::scan<T>(
  154|  14.3k|                global_locale,
  155|  14.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  14.3k|                scn::runtime_format(f));
  157|  14.3k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 14.1k, False: 277]
  ------------------
  158|  14.1k|                break;
  159|  14.1k|            }
  160|    277|            it = result->begin();
  161|    277|        }
  162|  14.1k|    }
  163|       |
  164|       |    // scan_value
  165|  1.41k|    {
  166|  1.41k|        auto it = scn::ranges::begin(source);
  167|  1.45k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.45k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.45k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.45k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.45k|            auto result = scn::scan_value<T>(
  170|  1.45k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.45k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.41k, False: 46]
  ------------------
  172|  1.41k|                break;
  173|  1.41k|            }
  174|     46|            it = result->begin();
  175|     46|        }
  176|  1.41k|    }
  177|  1.41k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwjKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  1.41k|{
  133|       |    // Regular scan
  134|  14.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 14.1k, False: 1.41k]
  ------------------
  135|  14.1k|        auto it = scn::ranges::begin(source);
  136|  14.3k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  14.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  14.3k|            auto result = scn::scan<T>(
  139|  14.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  14.3k|                scn::runtime_format(f));
  141|  14.3k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 14.1k, False: 220]
  ------------------
  142|  14.1k|                break;
  143|  14.1k|            }
  144|    220|            it = result->begin();
  145|    220|        }
  146|  14.1k|    }
  147|       |
  148|       |    // scan localized
  149|  14.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 14.1k, False: 1.41k]
  ------------------
  150|  14.1k|        auto it = scn::ranges::begin(source);
  151|  14.3k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  14.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  14.3k|            auto result = scn::scan<T>(
  154|  14.3k|                global_locale,
  155|  14.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  14.3k|                scn::runtime_format(f));
  157|  14.3k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 14.1k, False: 220]
  ------------------
  158|  14.1k|                break;
  159|  14.1k|            }
  160|    220|            it = result->begin();
  161|    220|        }
  162|  14.1k|    }
  163|       |
  164|       |    // scan_value
  165|  1.41k|    {
  166|  1.41k|        auto it = scn::ranges::begin(source);
  167|  1.44k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.44k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.44k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.44k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.44k|            auto result = scn::scan_value<T>(
  170|  1.44k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.44k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.41k, False: 35]
  ------------------
  172|  1.41k|                break;
  173|  1.41k|            }
  174|     35|            it = result->begin();
  175|     35|        }
  176|  1.41k|    }
  177|  1.41k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwxKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  1.41k|{
  133|       |    // Regular scan
  134|  14.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 14.1k, False: 1.41k]
  ------------------
  135|  14.1k|        auto it = scn::ranges::begin(source);
  136|  14.4k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  14.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  14.4k|            auto result = scn::scan<T>(
  139|  14.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  14.4k|                scn::runtime_format(f));
  141|  14.4k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 14.1k, False: 330]
  ------------------
  142|  14.1k|                break;
  143|  14.1k|            }
  144|    330|            it = result->begin();
  145|    330|        }
  146|  14.1k|    }
  147|       |
  148|       |    // scan localized
  149|  14.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 14.1k, False: 1.41k]
  ------------------
  150|  14.1k|        auto it = scn::ranges::begin(source);
  151|  14.4k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  14.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  14.4k|            auto result = scn::scan<T>(
  154|  14.4k|                global_locale,
  155|  14.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  14.4k|                scn::runtime_format(f));
  157|  14.4k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 14.1k, False: 330]
  ------------------
  158|  14.1k|                break;
  159|  14.1k|            }
  160|    330|            it = result->begin();
  161|    330|        }
  162|  14.1k|    }
  163|       |
  164|       |    // scan_value
  165|  1.41k|    {
  166|  1.41k|        auto it = scn::ranges::begin(source);
  167|  1.46k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.46k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.46k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.46k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.46k|            auto result = scn::scan_value<T>(
  170|  1.46k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.46k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.41k, False: 57]
  ------------------
  172|  1.41k|                break;
  173|  1.41k|            }
  174|     57|            it = result->begin();
  175|     57|        }
  176|  1.41k|    }
  177|  1.41k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwyKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  1.41k|{
  133|       |    // Regular scan
  134|  14.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 14.1k, False: 1.41k]
  ------------------
  135|  14.1k|        auto it = scn::ranges::begin(source);
  136|  14.3k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  14.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  14.3k|            auto result = scn::scan<T>(
  139|  14.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  14.3k|                scn::runtime_format(f));
  141|  14.3k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 14.1k, False: 261]
  ------------------
  142|  14.1k|                break;
  143|  14.1k|            }
  144|    261|            it = result->begin();
  145|    261|        }
  146|  14.1k|    }
  147|       |
  148|       |    // scan localized
  149|  14.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 14.1k, False: 1.41k]
  ------------------
  150|  14.1k|        auto it = scn::ranges::begin(source);
  151|  14.3k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  14.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  14.3k|            auto result = scn::scan<T>(
  154|  14.3k|                global_locale,
  155|  14.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  14.3k|                scn::runtime_format(f));
  157|  14.3k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 14.1k, False: 261]
  ------------------
  158|  14.1k|                break;
  159|  14.1k|            }
  160|    261|            it = result->begin();
  161|    261|        }
  162|  14.1k|    }
  163|       |
  164|       |    // scan_value
  165|  1.41k|    {
  166|  1.41k|        auto it = scn::ranges::begin(source);
  167|  1.45k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.45k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.45k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.45k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.45k|            auto result = scn::scan_value<T>(
  170|  1.45k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.45k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.41k, False: 43]
  ------------------
  172|  1.41k|                break;
  173|  1.41k|            }
  174|     43|            it = result->begin();
  175|     43|        }
  176|  1.41k|    }
  177|  1.41k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   89|  1.41k|{
   90|  1.41k|    using char_type = ranges::range_value_t<Source>;
   91|  1.41k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  1.41k|    deque.clear();
   93|  1.41k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  1.41k|              std::back_inserter(deque));
   95|  1.41k|    return deque;
   96|  1.41k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   78|  1.41k|{
   79|       |    if constexpr (std::is_same_v<CharT, char>) {
   80|       |        return noncontiguous_buffer;
   81|       |    }
   82|  1.41k|    else {
   83|  1.41k|        return wnoncontiguous_buffer;
   84|  1.41k|    }
   85|  1.41k|}

LLVMFuzzerTestOneInput:
   59|    706|{
   60|    706|    scn::fuzz::run(data, size);
   61|    706|    return 0;
   62|    706|}
int_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   35|    706|{
   36|    706|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (36:9): [True: 0, False: 706]
  |  Branch (36:35): [True: 0, False: 706]
  ------------------
   37|      0|        return;
   38|      0|    }
   39|       |
   40|    706|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   41|       |
   42|    706|    const auto& f =
   43|    706|        get_format_strings<char>("{}", "{:i}", "{:d}", "{:L}", "{:x}", "{:b}",
   44|    706|                                 "{:o}", "{:B36}", "{:'}", "{:'L}");
   45|    706|    do_basic_run(sv, f);
   46|       |
   47|    706|    const auto& wf = get_format_strings<wchar_t>(
   48|    706|        L"{}", L"{:i}", L"{:d}", L"{:L}", L"{:x}", L"{:b}", L"{:o}", L"{:B36}",
   49|    706|        L"{:'}", L"{:'L}");
   50|    706|    do_basic_run(wsv_reinterpret, wf);
   51|    706|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (51:9): [True: 706, False: 0]
  ------------------
   52|    706|        do_basic_run(wsv_transcode, wf);
   53|    706|    }
   54|    706|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|    706|{
   25|    706|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|    706|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|    706|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|    706|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|    706|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|    706|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|    706|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|    706|{
   25|    706|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|    706|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|    706|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|    706|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|    706|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|    706|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|    706|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  1.41k|{
   25|  1.41k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  1.41k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  1.41k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  1.41k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  1.41k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  1.41k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  1.41k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  1.41k|{
   25|  1.41k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  1.41k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  1.41k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  1.41k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  1.41k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  1.41k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  1.41k|}

